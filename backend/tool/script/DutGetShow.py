
# -*- coding: utf-8 -*-
##########################################################################################
#  Copyright 2016-2016 RUIJIE
#  文件名称：DutGetShow.py
#  软件编写：叶火坤、林传昊
#  功能描述：设备回显信息的解析函数
#
#  修改记录：
###########################################################################################
import os
import re
import json
import logging
class DutGetShow :
    def __init__(self):
        self.include = 1
        self.dut_name = "dut1"

    def dut_cli_convert_tool_used_bak1213(self,cmd_str):
        '''
        此仅供解析工具使用
        '''
        cmd_str =cmd_str.strip()
        cmd = cmd_str
        if re.search(r'.*(.*).*', cmd_str):
            #去除括号生成用于配置的命令，将括号中内容替换为word
            cmd_str = re.sub(r'\(', '', cmd_str)
            cmd_str = re.sub(r'\)', '', cmd_str)
        pattern=re.compile(r'(?<=\().+?(?=\))')
        fync = pattern.sub('word',cmd)
        fync = fync.replace('(','').replace(')','')
        fync = re.sub(r'-',"",

                      fync)
        fync_split = fync.split(' ')
        fync_lenght = len(fync_split)
        tag =0
        for i in range(fync_lenght):
            if re.match(r'\Agi|\Aten|\Afor|\Amgmt|\Aaggre|\Atfgi', fync_split[i],re.I|re.M):
                if re.match(r'(\Agigabitethernet|\Atengigabitethernet|\Afortygigabitethernet|\Amgmt|\Aaggregate|\Ahundredgigabitethernet|\Atfgigabitethernet)\d',fync_split[i], re.I | re.M):
                    tag = 1
                    break
                if i+2 <= fync_lenght :          #修改i+1 为i+2  —yehuokun
                    if re.findall('[0-9]+',fync_split[i+1]):
                        fync_split.remove(fync_split[i+1])
                        tag = 1
                        break
        fync_name = ""
        for var in fync_split:
            #print '%s--------'%var
            if tag == 1 :
                if re.match(r'\Agi|\Aten|\Afor|\Amgmt|\Aaggre|\Atfgi', var,re.I|re.M):
                    var = "dutport"
            else:
                if var.count(":")>=2:
                    if var.count("/")>0:
                        var = "ipv6mask"
                    else:
                        var = "ipv6"
                elif re.match(r'\w+:', var):
                    #将设备储存空间后的冒号去除
                    var = re.sub(r':', '', var)
                elif re.match(r'(\d|\w)(\d|\w)(\d|\w)(\d|\w)\.(\d|\w)(\d|\w)(\d|\w)(\d|\w)\.(\d|\w)(\d|\w)(\d|\w)(\d|\w)', var):
                    #将H.H.H格式的mac地址替换为mac
                    var = "mac"
                elif re.match(r'\d+\.\d+\.\d+\.\d+/\d+', var):
                    #将x.x.x.x/x格式的IP加掩码替换为ipmask
                    var = "ipmask"
                elif re.match(r'\d+/\d+', var):
                    #将x.x.x.x/x格式的IP加掩码替换为ipmask
                    continue
                elif re.match(r'\d+/\d+/\d+', var):
                    #将x.x.x.x/x格式的IP加掩码替换为ipmask
                    continue
                elif re.match(r'\d+\.\d+\.\d+\.\d+', var):
                    #将x.x.x.x格式的IP地址变为ip
                    var = "ip"
                elif re.match(r'\d+', var):
                    #将数字变为num
                    var = "num"
            if fync_name == "":
                fync_name = var
            else :
                fync_name = fync_name+"_"+var
            #print fync_name
        cmd_list = []
        cmd_list.append(cmd_str)
        cmd_list.append(fync_name)
        return cmd_list
    def dut_cli_convert_tool_used(self,cmd_str):
        '''
        此仅供解析工具使用
        '''
        cmd_str =cmd_str.strip().lower()
        cmd = cmd_str
        if re.search(r'.*(.*).*', cmd_str):
            #去除括号生成用于配置的命令，将括号中内容替换为word
            cmd_str = re.sub(r'\(', '', cmd_str)
            cmd_str = re.sub(r'\)', '', cmd_str)
        pattern=re.compile(r'(?<=\().+?(?=\))')
        fync = pattern.sub('word',cmd)
        fync = fync.replace('(','').replace(')','')
        fync = re.sub(r'-',"",fync)
        if fync.find('cpuprotect type') != -1:
            fync = 'show cpuprotect type type'
        fync_split = fync.split(' ')
        fync_lenght = len(fync_split)
        tag =0
        for i in range(fync_lenght):
            if re.match(r'\Agi|\Aten|\Afor|\Amgmt|\Aaggre|\Ahundredgi|\Atfgiga|\Athgiga|\Afhgiga|\Anull|\Aloopback|\Afivegi|\Amtgiga|\Amsgiga|\Afsgiga', fync_split[i],re.I|re.M):
                if re.match(r'(\Agigabitethernet|\Atengigabitethernet|\Afortygigabitethernet|\Amgmt|\Aaggregate|\Ahundredgigabitethernet|\Atfgigabitethernet|\Athgigabitethernet|\Afhgigabitethernet|\Anull|\Aloopback|\Afivegigabitethernet|\Amtgigabitethernet|\Amsgigabitethernet|\Afsgigabitethernet)\d',fync_split[i], re.I | re.M):
                    tag = 1
                    break
                if i+2 <= fync_lenght :          #修改i+1 为i+2  —yehuokun
                    if re.findall('[0-9]+',fync_split[i+1]):
                        fync_split.remove(fync_split[i+1])
                        tag = 1
                        break
        fync_name = ""
        for var in fync_split:
            #print '%s--------'%var
            if tag == 1 :
                if re.match(r'\Agi|\Aten|\Afor|\Amgmt|\Aaggre|\Ahundredgi|\Atfgiga|\Athgiga|\Afhgiga|\Anull|\Aloopback|\Afivegiga|\Amtgiga|\Amsgiga|\Afsgiga', var,re.I|re.M):
                    var = "dutport"
            else:
                if var.count(":")>=2:
                    if var.count("/")>0:
                        var = "ipv6mask"
                    else:
                        var = "ipv6"
                elif re.match(r'\w+:', var):
                    #将设备储存空间后的冒号去除
                    var = re.sub(r':', '', var)
                elif re.match(r'(\d|\w)(\d|\w)(\d|\w)(\d|\w)\.(\d|\w)(\d|\w)(\d|\w)(\d|\w)\.(\d|\w)(\d|\w)(\d|\w)(\d|\w)', var):
                    #将H.H.H格式的mac地址替换为mac
                    var = "mac"
                elif re.match(r'\d+\.\d+\.\d+\.\d+/\d+', var):
                    #将x.x.x.x/x格式的IP加掩码替换为ipmask
                    var = "ipmask"
                elif re.match(r'\d+/\d+', var):
                    #将x.x.x.x/x格式的IP加掩码替换为ipmask
                    continue
                elif re.match(r'\d+/\d+/\d+', var):
                    #将x.x.x.x/x格式的IP加掩码替换为ipmask
                    continue
                elif re.match(r'\d+\.\d+\.\d+\.\d+', var):
                    #将x.x.x.x格式的IP地址变为ip
                    var = "ip"
                elif re.match(r'\d+', var):
                    #将数字变为num
                    var = "num"
            if fync_name == "":
                fync_name = var
            else :
                fync_name = fync_name+"_"+var
            #print fync_name
        cmd_list = []
        cmd_list.append(cmd_str)
        cmd_list.append(fync_name)
        return cmd_list

    #by:hao
    def dut_judge_show_dot1x_su(self, show_info, mac, status):
        """
            判断show web user all 中ip地址与对应状态
            Args:
                show_info: dut_show_info回显信息
                mac: 需要对比的mac地址
                status: IP地址对应的状态

            Returns:对比成功返回PASS，失败返回FAIL

            Example:
                    | returns      | *Keywords*           |  *Parameters*                                       |
                    |${result}     | dut_show_info        |cmd_str
                    |${result1}     | dut_judge_WebUser   | ${result} |mac=xxxx.xxxx.xxxx| status=Authed        |

            """
        dut_info=str(show_info)
        dut_info = re.sub(' +', ',', dut_info)
        dut_info_split = dut_info.split("\n")
        s = []
        for i in dut_info_split:
            s.append(str(i))
        dut_show_table=[[i for i in ii.split(',')] for ii in s]
        #遍历一列信息
        #v = [x[1] for x in dut_show_table]
        #print dut_show_table
        i=""
        result = ""
        nRow = len(dut_show_table)
        nCol = len(dut_show_table[0])
        for i in range(nRow):
            if mac == dut_show_table[i][2] and status == dut_show_table[i][6]:
                result = 0
                #print dut_show_table[i]
        if result == 0 :
            return "PASS"
        else:
            return "FAIL"
    def dut_judge_debug_scc_user_mac(self, show_info, mac):
        """
            判断debug scc user mac 中ip地址与对应MAC

            Args:
                show_info: show 回显返回值
                mac: 对应的MAC地址

            Returns:匹配成功返回PASS，匹配失败返回FAIL

            Example:
                    | returns      | *Keywords*                    |  *Parameters*                                       |
                    |${result}     | dut_show_info                 |cmd_str
                    |${result1}     | dut_judge_debug_sccusermac   | ${result}  | mac=xxxx.xxxx.xxxx/...             |

        """
        dut_info=str(show_info)
        dut_info = re.sub('\]\[', ',', dut_info)
        dut_info = re.sub('\[', '', dut_info)
        dut_info = re.sub('\]', '', dut_info)
        dut_info_split = dut_info.split("\n")
        s = []
        for i in dut_info_split:
            s.append(str(i))
        dut_show_table=[[i for i in ii.split(',')] for ii in s]

        #遍历一列信息
        #v = [x[1] for x in dut_show_table]
        #print dut_show_table
        i=""
        result = ""
        nRow = len(dut_show_table)
        nCol = len(dut_show_table[0])
        for i in range(nRow):
            if mac == dut_show_table[i][5]:
                #print dut_show_table[i]
                result = 0
                break
        if result == 0 :
            return "PASS"
        else:
            return "FAIL"
    def dut_judge_ping(self, show_info):
        """
            判断ping是否成功

            Args:
                show_info: show 回显返回值


            Returns:匹配成功返回PASS，匹配失败返回FAIL

            Example:
                    | returns      | *Keywords*                    |  *Parameters*                                       |
                    |${result}     | dut_show_info                 |cmd_str
                    |${result1}    | dut_judge_ping   | ${result}  |

        """
        dut_info=str(show_info)
        dut_info_split = dut_info.split("\n")
        #print dut_info_split
        split_len = len(dut_info_split)
        result = ""
        for i in range(split_len):
            if re.match( r'.*100 percent.*', dut_info_split[i]):
                result = 0
        if result == 0 :
            return "PASS"
        else:
            return "FAIL"
    #web switch
    def dut_judge_webauth_logging_count(self,show_info):
        """
            统计web user上线终端个数

            Args:
                show_info: show 回显返回值

            Returns:返回终端个数
                    如果返回-1；则passed与online的统计不相等

            Example:
                    | returns      | *Keywords*                    |*Parameters*                                       |
                    |${result}     | dut_show_info                 |show log
                    |${result1}    | dut_judge_webauth_logging_count   | ${result}
        """
        dut_info_split = show_info.split("\n")
        #print dut_info_split
        len = len(dut_info_split)
        passed_count = 0
        online_count = 0
        for i in range(len):

            if re.match( r'.*:\s%AAA-6-USER_AUTH_PASSED.*', dut_info_split[i]):
                passed_count = passed_count+1
            if re.match( r'.*:\s%WEBAUTH-6-USER_ONLINE.*', dut_info_split[i]):
                online_count = online_count+1

        if passed_count == online_count :
            print passed_count
        else:
            print "-1"
    def dut_judge_sh_web_user_ip_ip(self,show_info):
        """
            统计sh web user ip xxx.xxx.xxx.xxx期望值对比

            Args:
                show_info: show 回显返回值
                value:期望值数组

            Returns:返回终端个数
                    如果返回-1；则passed与online的统计不相等

            Example:
                    | returns      | *Keywords*                    |*Parameters*                                       |
                    |${result}     | dut_show_info                 |show log
                    |${ylist}      | creat_list|预期值(可以是多项)|
                    |${result2}    | dut_judge_sh_web_user_ip   | ${result} | ${ylist}
        """
        #处理回显信息
        dut_info_split = show_info.split("\n")
        if re.match(r'.*show.*',dut_info_split[0]):
            dut_info_split.remove(dut_info_split[0])
        if re.match(r'.*#.*',dut_info_split[-1]):
            dut_info_split.remove(dut_info_split[-1])
        #print dut_info_split
        dut_info_len = len(dut_info_split)
        name_list = []
        value_list = []
        #获取字典所需参数
        for i in range(dut_info_len):
            matchObj = re.match( r'(.*):\s+(.*)', dut_info_split[i], re.M|re.I)
            a= matchObj.group(1)
            b= matchObj.group(2)
            name_list.append(a)
            value_list.append(b)
            s = len(name_list)
        #组成字典
        web_dict=dict(zip(name_list,value_list))
        return web_dict
    #VAC
    def dut_get_show_virtualac_config(self, show_info):
        """
        Function:show virtual-ac config回显解析函数
        CLI命令:show virtual-ac config
        回显信息示例:
WS5708#show virtual-ac config
mac: 5425.4826.1789
!
device virtual domain 255
!
device 4
device 4 priority 100
!
port-member interface GigabitEthernet 0/2 copper
port-member interface GigabitEthernet 0/3 fiber
port-member interface GigabitEthernet 0/8 copper
device convert mode standalone

        Returns:
{"device": "4"
"device convert mode": "standalone"
"device 4 priority": "100"
"device virtual domain": "255"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show virtual-ac config | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dut_info_split = show_info.split("\n")
        if re.match(r'.*show.*',dut_info_split[0]):
            dut_info_split.remove(dut_info_split[0])
        if re.match(r'.*#.*',dut_info_split[-1]):
            dut_info_split.remove(dut_info_split[-1])
        length = len(dut_info_split)
        name_list=[]
        value_list=[]
        for i in range(length):
            if re.match(r'(device virtual domain)\s+(\d+)',dut_info_split[i]):
                matchObj = re.match(r'(device virtual domain)\s+(\d+)',dut_info_split[i])
                a= matchObj.group(1)
                a = a.lstrip()
                b= matchObj.group(2)
                b = b.lstrip()
                name_list.append(a)
                value_list.append(b)
            if re.match(r'(device)\s+(\d+)',dut_info_split[i]):
                matchObj = re.match(r'(device)\s+(\d+)',dut_info_split[i])
                #print matchObj.group(1)
                #print matchObj.group(2)
                a= matchObj.group(1)
                a = a.lstrip()
                b= matchObj.group(2)
                b = b.lstrip()
                name_list.append(a)
                value_list.append(b)
            if re.match(r'(device \d+ priority)\s+(\d+)',dut_info_split[i]):
                matchObj = re.match(r'(device \d+ priority)\s+(\d+)',dut_info_split[i])
                #print matchObj.group(1)
                #print matchObj.group(2)
                a= matchObj.group(1)
                a = a.lstrip()
                b= matchObj.group(2)
                b = b.lstrip()
                name_list.append(a)
                value_list.append(b)
            if re.match(r'(device \d+ connect_switch)\s+(\d+)',dut_info_split[i]):
                matchObj = re.match(r'(device \d+ connect_switch)\s+(\d+)',dut_info_split[i])
                #print matchObj.group(1)
                #print matchObj.group(2)
                a= matchObj.group(1)
                a = a.lstrip()
                b= matchObj.group(2)
                b = b.lstrip()
                name_list.append(a)
                value_list.append(b)
            if re.match(r'(device \d+ description)\s+(\w+)',dut_info_split[i]):
                matchObj = re.match(r'(device \d+ description)\s+(\w+)',dut_info_split[i])
                #print matchObj.group(1)
                #print matchObj.group(2)
                a= matchObj.group(1)
                a = a.lstrip()
                b= matchObj.group(2)
                b = b.lstrip()
                name_list.append(a)
                value_list.append(b)
            if re.match(r'(device convert mode)\s+(\w+)',dut_info_split[i]):
                matchObj = re.match(r'(device convert mode)\s+(\w+)',dut_info_split[i])
                #print matchObj.group(1)
                #print matchObj.group(2)
                a= matchObj.group(1)
                a = a.lstrip()
                b= matchObj.group(2)
                b = b.lstrip()
                name_list.append(a)
                value_list.append(b)
            dut_info_split[i].lstrip()
        web_dict=dict(zip(name_list,value_list))
        return web_dict
    def dut_judge_list_out_show(self,dut_info,yinfo):
        """
            判断show web-auth direct-host表项是否符合预期

            Returns:匹配成功返回PASS，匹配失败返回FAIL

            Args:
                |show_info  |  show 回显返回值 |
                |yinfo      |  预期值          |

            Example:
                    | returns      | *Keywords*                           |*Parameters*   |
                    |${result}     | dut_show_info                        |cmd_str        |
                    |${result2}    | create_list                          |预期值（可多项）|
                    |${result1}    | dut_judge_show_webauth_direct_host   | ${result}     | 1 |
        """
        dut_info_split = dut_info.split("\n")
        if re.match(r'.*show.*',dut_info_split[0]):
            dut_info_split.remove(dut_info_split[0])
        if re.match(r'.*#.*',dut_info_split[-1]):
            dut_info_split.remove(dut_info_split[-1])
        lenght = len(dut_info_split)
        for var in yinfo:
            for i in range(lenght):
                if dut_info_split[i].find(var)!=-1:
                    result = 0
                    break
                else:
                    result = -1
        if result ==0:
            return "FAIL"
        else:
            return "PASS"
    def dut_judge_show_device_id(self,show_info,yinfo):
        """
            判断show web-auth direct-host表项是否符合预期

            Returns:匹配成功返回PASS，匹配失败返回FAIL

            Args:
                |show_info  |  show 回显返回值 |
                |yinfo      |  预期值          |

            Example:
                    | returns      | *Keywords*                           |*Parameters* |
                    |${result}     | dut_show_info                        |cmd_str      |
                    |${result1}    | dut_judge_show_webauth_direct_host   | ${result}   | 1(yinfo) |
        """
        dut_info_split = show_info.split("\n")
        if re.match(r'.*show.*',dut_info_split[0]):
            dut_info_split.remove(dut_info_split[0])
        if re.match(r'.*#.*',dut_info_split[-1]):
            dut_info_split.remove(dut_info_split[-1])
        lenght = len(dut_info_split)
        #print yinfo
        result = -1
        device_id = ""
        for var in yinfo:
            for i in range(lenght):
                if re.match(r'.*(\d+)',dut_info_split[0]):
                    matchObj = re.match(r'.*(\d+)',dut_info_split[i])
                    device_id = matchObj.group(1)
                    if device_id == yinfo:
                        result = 0
                    break
                else:
                    result = -1
        if result ==0:
            return "PASS"
        else:
            #print "must",yinfo,"but",device_id
            return "FAIL"
    #ospf
    def dut_judge_show_show_ip_ospf_interface(self,show_info,yinfo):

        ##print dut_info
        dut_info_split = show_info.split("\n")
        if re.match(r'.*show.*',dut_info_split[0]):
            dut_info_split.remove(dut_info_split[0])
        if re.match(r'.*#.*',dut_info_split[-1]):
            dut_info_split.remove(dut_info_split[-1])
        lenght = len(dut_info_split)
        ##print yinfo
        for var in yinfo:
            for i in range(lenght):
                ##print var
                ##print dut_info_split[i]
                if dut_info_split[i].find(var)!=-1:
                    result = 0
                    break
                else:
                    result = -1
        if result ==0:
            return "PASS"
        else:
            return"FAIL"
    def dut_get_show_ip_ospf_route_count (self,show_info):
        value_title="Type"
        length_list = []
        dut_info_split = show_info.split("\n")
        if re.match(r'.*show.*',dut_info_split[0]):
            dut_info_split.remove(dut_info_split[0])
        if re.match(r'.*#.*',dut_info_split[-1]):
            dut_info_split.remove(dut_info_split[-1])
        length = len(dut_info_split)
        for i in range(length):
            if re.match(r'----+.*',dut_info_split[i]):
                dut_info_split.remove(dut_info_split[i])
                break
        #去除每行前面的空格
        for i in range(length):
            dut_info_split[i].lstrip()
            if re.match(r'.*:',dut_info_split[i]):
                dut_info_split.remove(dut_info_split[i])
                break
        for i in range(length):
            if re.match(r'',dut_info_split[i]):
                dut_info_split[i] = dut_info_split[i].lstrip()
                dut_info_list = dut_info_split[i].split(" ")
                length = len(dut_info_list)
                #判断列宽
                #for i in range(length):
                #    list_len = len(dut_info_list[i])
                #    length_list.append(list_len)
                dut_info_split.remove(dut_info_split[i])
                break
        # #print length_list
        # #print "######"
        #列宽
        length_list = [22,9,9]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        ##print dut_info_split
        #创建字典
        dict={}
        device_list=[]
        for i in range(length):
            sight = 0
            sight_sum=0
            list = []
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                a = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                if re.match(r'.*:',a):
                    matchObj=re.match(r'(.*):',a)
                    a = matchObj.group(1)
                a = a.lstrip()
                a = a.rstrip()
                list.append(a)
            # #print "######"
            # #print list
            # #print "######"
            #获取表头，用于组合
            if list[0]==value_title:
                title = list
            elif list[0]!=value_title:
                #获取主key集合
                name = '%s/%s' % (list[0],title[0])
                device_list.append(list[0])
                #生成字典
                for s in range(1,length_list_len):
                    name = '%s/%s' % (list[0],title[s])
                    dict[name]=list[s]
            #dict[value_title]=device_list
        return dict
    def dut_get_show_packet_capture_status(self,show_info):
        """
        Function:show packet capture status回显解析函数
        CLI命令:show packet capture status
        回显信息示例:
WS5848-NAT#show packet capture status 
Capture file:
  Filename: /data/1
  Buffer size: 2(MB)
Capture Statistic:
  Status: stopped
  Stopped reason: Normal
  Timeout: 10(minutes)
  Packets limit: 1024
  Write file packet count: 0

        Returns:
{"Capture Statistic/Timeout": "10(minutes)"
"Capture Statistic/Packets limit": "1024"
"Capture Statistic/Stopped reason": "Normal"
"Capture file/Buffer size": "2(MB)"
"Capture Statistic/Write file packet count": "0"
"Capture file/Filename": "/data/1"
"Capture Statistic/Status": "stopped"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show packet capture status | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判#
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)
        ######################################################
        #使用正则匹配列表前的内容，并提取出写入字典，删除该行#
        ######################################################
        #print dut_info_split
        first_name = ""
        sec_name = ""
        name = ""
        for i in range(length):
            if re.match(r'\w+.*',dut_info_split[i]):
                matchObj = re.match(r'(.*):(.*)',dut_info_split[i])
                first_name = matchObj.group(1)
            elif re.match(r'  (\w+.*):\s(.*)',dut_info_split[i]):
                matchObj = re.match(r'  (.*):\s(.*)',dut_info_split[i])
                if matchObj.group(2)=='':
                    sec_name = '%s/%s' % (first_name,matchObj.group(1))
                else:
                    name =  '%s/%s' % (first_name,matchObj.group(1))
                    dict_value[name]=matchObj.group(2)
            elif re.match(r'\s\s\w+.*',dut_info_split[i]):
                matchObj = re.match(r'\s\s(.*):(.*)',dut_info_split[i])
                if matchObj.group(2)=='':
                    sec_name = '%s/%s' % (first_name,matchObj.group(1))
                else:
                    name =  '%s/%s' % (first_name,matchObj.group(1))
                    dict_value[name]=value
            elif re.match(r'\s\s\s\s+\w+.*',dut_info_split[i]):
                matchObj = re.match(r'\s\s\s\s+(\w.*):(.*)',dut_info_split[i])
                last_name = '%s/%s' % (sec_name,re.sub(r' ','',matchObj.group(1)))
                value = re.sub(r' ','',matchObj.group(2))
                dict_value[last_name]=value

        return dict_value
    def dut_get_show_ipv6_dhcp_relay_statistics(self,show_info):
        """
        Function:show ipv6 dhcp relay statistics回显解析函数
        CLI命令:show ipv6 dhcp relay statistics
        回显信息示例:
RGOS_12_1#show ipv6 dhcp relay statistics
Packets dropped:         0
    Error:               0
Packets received:        0
    SOLICIT:             0
    REQUEST:             0
    CONFIRM:             0
    RENEW:               0
    REBIND:              0
    RELEASE:             0
    DECLINE:             0
    INFORMATION-REQUEST: 0
    RELAY-FORWARD:       0
    RELAY-REPLY:         0
Packets sent:            0
    ADVERTISE:           0
    RECONFIGURE:         0
    REPLY:               0
    RELAY-FORWARD:       0
    RELAY-REPLY:         0
    
Configuration statistics:
DHCPv6 relay destination:            1

        Returns:
{"Packets sent/ADVERTISE": "0"
"Packets received/REQUEST": "0"
"Packets sent/RELAY-FORWARD": "0"
"Packets received": "0"
"Packets received/REBIND": "0"
"Packets received/DECLINE": "0"
"Packets received/RENEW": "0"
"Packets sent": "0"
"Packets received/RELAY-FORWARD": "0"
"DHCPv6 relay destination": "1"
"Packets received/SOLICIT": "0"
"Packets received/CONFIRM": "0"
"Packets received/INFORMATION-REQUEST": "0"
"Packets received/RELEASE": "0"
"Packets dropped/Error": "0"
"Packets sent/RECONFIGURE": "0"
"Packets sent/REPLY": "0"
"Packets dropped": "0"
"Packets received/RELAY-REPLY": "0"
"Packets sent/RELAY-REPLY": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 dhcp relay statistics | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判#
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=self.del_space_lines(show_info_split)
        #print dut_info_split
        length = len(dut_info_split)
        ######################################################
        #使用正则匹配列表前的内容，并提取出写入字典，删除该行#
        ######################################################
        #print dut_info_split
        first_name = ""
        sec_name = ""
        name = ""
        for i in range(length):
            if re.match(r'\w+(.*):\s+(.*)',dut_info_split[i]):
                matchObj = re.match(r'(.*):\s+(.*)',dut_info_split[i])
                first_name = matchObj.group(1).strip()
                dict_value[matchObj.group(1).strip()]=matchObj.group(2).strip()
            elif re.match(r'\s+(.*):(.*)',dut_info_split[i]):
                matchObj = re.match(r'(.*):(.*)',dut_info_split[i])
                name =  '%s/%s' % (first_name,matchObj.group(1).strip())
                dict_value[name]=matchObj.group(2).strip()

        return dict_value





    #by : ye
    def dut_get_show_webauth_directarp(self, show_info):
        """
        Function:show web-auth direct-arp回显解析函数
        CLI命令:show web-auth direct-arp
        回显信息示例:
Ruijie(config)#show web-auth direct-arp
Direct arps: 2
  Address         Mask           
  --------------- ---------------
  1.1.1.1         255.255.255.255
  1.1.1.2         255.255.255.255

        Returns:
{'1.1.1.2/Mask': '255.255.255.255'
'1.1.1.1/Mask': '255.255.255.255'
'Direct arps': '2'
'address_list': ['1.1.1.1'
'1.1.1.2']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show web-auth direct-arp | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """


        value_title="Address"     #需要变参的地方
        col_len_list = []
        #创建字典
        dict_value={}
        address_list = []
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*direct-arp.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        #去除横线
        show_info_list_line.remove(show_info_list_line[2])    #需要变参的地方
        direct_arps_list = show_info_list_line[0].split(":")
        key_name = '%s' % (direct_arps_list[0])
        dict_value[key_name]=direct_arps_list[1].replace(" ","").replace("\r","")


        #列宽
        col_len_list = [16,15]         #需要变参的地方
        col_list_all_num = len(col_len_list)
        row_list_all_num = len(show_info_list_line)

        for i in range(1,row_list_all_num):
            cut_star = 0
            cut_end=0
            col_value_list = []
            show_info_list_line[i] = show_info_list_line[i].lstrip()  #去除每行前面的空格
            for j in range(col_list_all_num):
                cut_end = cut_end+int(col_len_list[j])
                col_value = show_info_list_line[i][cut_star:cut_end]
                cut_star = cut_end
                col_value = col_value.lstrip()
                col_value = col_value.rstrip()
                col_value_list.append(col_value)
            #获取表头，用于组合
            title_col = col_value_list[0]          #需要变参的地方
            if title_col==value_title:
                title_row = col_value_list
            elif title_col!=value_title:
                #生成字典
                address_list.append(title_col)
                #遍历列头右边的值
                for s in range(1,col_list_all_num):      #需要变参的地方
                    key_name = '%s/%s' % (title_col, title_row[s])
                    dict_value[key_name]=col_value_list[s]
                ##遍历列头右边的值
                #key_name = '%s/%s' % (title_col, title_row[0])
                #dict_value[key_name]=col_value_list[0]
            dict_value["address_list"]=address_list
        return  dict_value
    #
    def dut_show_info_error_list(self,type):
        list_error_type1 = []
        list_error_type1.append("Data does not exist")
        list_error_type2 = []
        list_error_type2.append("****Error****")
        type = int(type)
        if type == 1 :
            return list_error_type1
        else :
            return list_error_type2
    def dut_get_show_len(self, show_info):
        # 创建列表
        list_value = []
        show_info_list_line = show_info.split("\n")
        line_len = len(show_info_list_line)  # 计算长度 ，实际上此刻line_len=1，方便后续进行多行扩展
        # ver1.0 能匹配分隔任意情况，有无前导空格，中间有无空格，末尾有无空格均可
        for i in range(line_len):
            if re.match(r'.*', show_info_list_line[i]):  # 匹配任意情况
                temp_list1 = show_info_list_line[i].split('- ')  # 归纳出以- 特征区分
                if temp_list1[-1].strip() == '':  # 要考虑到此行最后面可能出现很多空格的情况
                    for j in range(len(temp_list1)-1):  # 必须减一，将最后两个元素长度合并
                        diff_sec = len(temp_list1[j+1]) - len(temp_list1[j+1].strip())  # 引入差异值的概念，处理中间分隔多空格
                        list_value.append(len(temp_list1[j].strip())+2+diff_sec)  # 开始添加元素，特别注意考虑第一个元素
                    list_value[-1] = len(temp_list1[-2].strip()) + len(temp_list1[-1]) + 2  # 更新最后一个元素的长度
                else:  # 末尾未出现多空格情况
                    temp_list1.append('')
                    for j in range(len(temp_list1)-1):  # 必须减一
                        diff_sec = len(temp_list1[j+1]) - len(temp_list1[j+1].strip())  # 引入差异值的概念，处理中间分隔多空格
                        list_value.append(len(temp_list1[j].strip()) + 2 + diff_sec)  # 开始添加元素，特别注意考虑第一个元素
                    list_value[-1] = len(temp_list1[-2].strip())  # 更新最后一个元素的长度
        # 需单独处理第一个元素
        if len(temp_list1[0]) - len(temp_list1[0].lstrip()) != 0:
            diff_first = len(temp_list1[0]) - len(temp_list1[0].lstrip())  # 第一行的前导空格
            list_value[0] = list_value[0]+diff_first  # len(temp_list1[1]) + 2 + diff_first + diff_end
        #list_value.remove(list_value[-1])
        list_value.pop()
        list_value.append(32)
        return list_value
    def dut_show_autoget_whippletree(self,star_num,end_num,show_info_list_line):
        '''
        计数：自动获取横杠
        '''
        for cut_value_num in range(star_num,end_num):
            cut_value = show_info_list_line[cut_value_num]
            if cut_value != "":
                if re.match("\s*-{3,}\s+-{3,}.*",cut_value) :
                    whippletree_list = self.dut_get_show_len(cut_value)
                    cut_del = cut_value_num
                    #cut_del = cut_value_num
                    #cut_value_list = cut_value.split()
                    #whippletree_list = []
                    #for cut_value_list_value in cut_value_list:
                    #    whippletree_list.append(len(cut_value_list_value)+1)
        return whippletree_list,cut_del
    def dut_show_autoget_form(self, star_num, end_num,title_value,x_list,show_info_list_line,title_value2=None):
        '''
        对设备有关杆号的列表进行字典的遍历
        '''
        dict_value ={}
        address_list = []
        title_list =[]
        for i in range (star_num,end_num):    #line_len-1:上面删除“-----”这一行了
            ##print show_info_list_line[i]
            x_len = len(x_list)
            cut_star = 0
            cut_end=0
            new_list = []
            show_info_list_line[i] = show_info_list_line[i]
            ##print show_info_list_line[i]
            if show_info_list_line[i] != "" :
                for j in range(x_len):
                    cut_end = cut_end+int(x_list[j])
                    col_value = show_info_list_line[i][cut_star:cut_end]
                    cut_star = cut_end
                    col_value = col_value.lstrip()
                    col_value = col_value.rstrip()
                    new_list.append(col_value)
                #获取表头的列，用于组合
                ##print col_value_list
                for i in range(len(new_list)) :
                    if new_list[i] == title_value :
                        new_list_title_key = i
                    if title_value2 is not None :
                        if new_list[i] == title_value2 :
                            new_list_title_key_2 = i
                new_list_title_value = new_list[new_list_title_key]          #需要变参的地方

                if new_list_title_value == title_value:
                    title_list = new_list
                elif new_list_title_value!= title_value:
                    #生成字典
                    if title_value2 is not None :
                        new_list_title_value = new_list_title_value+"/"+new_list[new_list_title_key_2]
                    address_list.append(new_list_title_value)
                    #遍历列头右边的值
                    if new_list_title_key+1 < x_len :
                        for s in range(new_list_title_key+1,x_len):  #需要变参的地方
                            #key_name = '%s/%s' % (title_col,title_row[s])
                            if title_value2 is not None :
                                if s == new_list_title_key_2 :
                                    continue
                            key_name = '%s/%s'%(new_list_title_value,title_list[s])
                            dict_value[key_name]=new_list[s]
                    if new_list_title_key > 0 :
                        for s in range(0,new_list_title_key):  #需要变参的地方
                            ##遍历列头边的值
                            if title_value2 is not None :
                                if s == new_list_title_key_2 :
                                    continue
                            key_name = '%s/%s' % (new_list_title_value, title_list[s])
                            dict_value[key_name]=new_list[s]
                dict_value[title_value+"_list"]=address_list
        return dict_value
    def dut_split_whippletree(self,show_info, main_key, real_main_key,end_line=None):
        # main_key=main_key
        ########关键key的传入值
        ########寻址key（必填）
        ########若值中有括号符号去掉
        # main_key_list = ['power-id','slot','total-power']
        if end_line!=None:
            end_line=end_line
        main_key_list = main_key
        ########若有key分多行写，填完整的key值，不然与寻址key一样就好（必填）
        real_main_key_list = real_main_key
        # real_main_key_list=[['power-id','power-type','supply(W)'],['slot','card_type'],'total-power(W)']
        ########

        # 创建字典
        dict_value = {}

        # 按行读取信息，并清除空值清除无用信息头信息尾数据
        show_info_split = show_info.split("\n")
        if re.match(r'.*Ruijie.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*Ruijie.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        #print(show_info_split)
        # （去掉dut_info_split中的空值以及只包含空格符的值）
        for i in dut_info_split:
            if '' in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' ' in dut_info_split:
                dut_info_split.remove(' ')
        for i in range(len(dut_info_split)):
            dut_info_split[i] = dut_info_split[i]
        #print(dut_info_split)

        #######################参数
        # 表数量
        count = 0
        # 各个横杠长度
        hengang_len = 0
        # 一张表内各个横杠长度集合
        hengang_len_list = []
        # 整个showinfo内每张表内各个横杠长度集合的集合
        hengang_len_list_list = []
        # 横杠位置（用来相对判定key的位置）
        hengang_index_list = []
        # key的位置
        key_index_list = []
        # 表信息的集合
        table = []
        # 所有表信息的集合
        table_list = []
        start_list=[]
        end_list=[]
        #######################
        if end_line!=None:
            for i in range(end_line):
                end_list.append(dut_info_split[-1])
                dut_info_split.remove(dut_info_split[-1])
        #print(end_list)
        # 主要算法
        # 标识横杠位置并记录参数相关信息
        for i in range(len(dut_info_split)):
            if re.match("-+", dut_info_split[i]):
                # 排除数据中有“-”的情况
                for j in dut_info_split[i]:
                    if j != '-' and j != ' ':
                        cheak = 1
                        break
                    else:
                        cheak = 0
                        continue
                if cheak == 0:
                    hengang_len_list = []
                    count = count + 1
                    hengang_index_list.append(i)
                    # print(dut_info_split[i])
                    # 识别并记录下横杠的长度到list中
                    for k in range(len(dut_info_split[i])):
                        if dut_info_split[i][k] == '-' and k != len(dut_info_split[i]) - 1:
                            hengang_len = hengang_len + 1
                        elif dut_info_split[i][k] == ' ' and k != len(dut_info_split[i]) - 1 and dut_info_split[i][
                            k + 1] != '-':
                            hengang_len = hengang_len + 1
                        elif dut_info_split[i][k] == ' ' and k != len(dut_info_split[i]) - 1 and dut_info_split[i][
                            k + 1] == '-':
                            hengang_len_list.append(hengang_len)
                            hengang_len = 0
                        elif k == len(dut_info_split[i]) - 1:
                            hengang_len = hengang_len + 1
                            hengang_len_list.append(hengang_len)
                            hengang_len = 0
                    hengang_len_list_list.append(hengang_len_list)
                else:
                    continue
                #print(hengang_len_list_list)
        # 根据横杠位置和key的传入值标识出key的位置
        # """一般情况下横杠上一位就是key值，其他情况有横杠上一行为单位，或者有key值过长分行输出显示？"""
        for i in range(len(hengang_index_list)):
            main_key = main_key_list[i]
            k = hengang_index_list[i]
            #print(main_key[0].upper()+main_key[1:])
            while 1:
                if re.match('.*' + main_key + '.*', dut_info_split[k]):
                    key_index_list.append(k)
                    break
                elif re.match('.*' + main_key[0].upper()+main_key[1:] + '.*', dut_info_split[k]):
                    key_index_list.append(k)
                    break
                else:
                    k = k - 1
        #print(key_index_list)
        #print(hengang_index_list)
        # 根据查找的key位置进行分表操作,并存入table_list中
        for i in range(len(key_index_list)):
            if i == len(key_index_list) - 1:
                table = dut_info_split[key_index_list[i]:]
            else:
                table = dut_info_split[key_index_list[i]:key_index_list[i + 1]]
            table_list.append(table)
        #print(table_list)
        # 将表头表尾多余信息分别存入
        if len(dut_info_split[0:key_index_list[0]])!=0:
            start_list=dut_info_split[0:key_index_list[0]]
        # 对各个表中的key、value提取，并删除掉横杠
        # 判定若key与横杠之间有单位之类的数据，进行key与该数据的整合成为一个完整key数据
        for i in range(len(table_list)):
            key_list = []
            value_list = []
            for j in range(len(table_list[i])):
                if re.match('-+', table_list[i][j]):
                    index = j
            key_info = table_list[i][0:index]
            value_info = table_list[i][index + 1:]
            #print(value_info)
            ##单行key的情况
            if index == 1:
                # key
                num1 = 0
                num2 = 0
                key = []
                for k in range(len(hengang_len_list_list[i])):
                    num1 = num2
                    num2 = 1 + hengang_len_list_list[i][k] + num2
                    key.append(key_info[0][num1:num2].strip())
                # value
                for k in range(len(value_info)):
                    value = []
                    num1 = 0
                    num2 = 0
                    # print(hengang_len_list_list[i])
                    for l in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][l] + num2
                        value.append(value_info[k][num1:num2])
                        # print(num1,num2)
                    value_list.append(value)
                #print(value_list)
                # 录入词典
                real_main_key = real_main_key_list[i]
                # print(real_main_key)
                if type(real_main_key) == type([]):
                    real_main_key_index = []
                    for l in range(len(real_main_key)):
                        if real_main_key[l] not in key:
                            real_main_key[l]=real_main_key[l][0].upper()+real_main_key[l][1:]
                            if real_main_key[l] in key:
                                real_main_key_index.append(key.index(real_main_key[l]))
                            elif real_main_key[l] not in key:
                                if '-' in real_main_key[l]:
                                    real_main_key_index.append(key.index(real_main_key[l].replace('-','_')))
                                elif '_' in real_main_key[l]:
                                    real_main_key_index.append(key.index(real_main_key[l].replace('_', '-')))
                        else:
                            real_main_key_index.append(key.index(real_main_key[l]))
                    # print(real_main_key_index)
                    key__list_list = []
                    for q in range(len(value_list)):
                        key__list = []
                        real_main_key_title = ''
                        for w in range(len(value_list[q])):
                            if w in real_main_key_index:
                                key__list.append(value_list[q][w].strip())
                                continue
                            else:
                                title1 = ''
                                for l in range(len(real_main_key_index)):
                                    title1 = title1 + '/' + value_list[q][real_main_key_index[l]].strip()
                                title2 = title1.strip('/') + '/' + key[w].strip()
                                info = value_list[q][w].strip()
                                dict_value[title2] = info
                        key__list_list.append(key__list)
                        for w in range(len(real_main_key)):
                            real_main_key_title = real_main_key_title + '/' + real_main_key[w]
                        dict_value[real_main_key_title.strip('/')] = key__list_list
                elif type(real_main_key) == type(''):
                    if real_main_key not in key:
                        real_main_key = real_main_key[0].upper() + real_main_key[1:]
                        if real_main_key in key:
                            real_main_key_index=key.index(real_main_key)
                        elif real_main_key not in key:
                            if '-' in real_main_key:
                                real_main_key_index=key.index(real_main_key.replace('-', '_'))
                            elif '_' in real_main_key:
                                real_main_key_index=key.index(real_main_key.replace('_', '-'))
                    else:
                        real_main_key_index = key.index(real_main_key)
                    key__list = []
                    for q in range(len(value_list)):
                        for w in range(len(value_list[q])):
                            if w == real_main_key_index:
                                key__list.append(value_list[q][w].strip())
                                continue
                            else:
                                title = value_list[q][real_main_key_index].strip() + '/' + key[w].strip()
                                info = value_list[q][w].strip()
                                dict_value[title] = info
                        dict_value[real_main_key] = key__list
                    # print(main_key)
                    # print(key)
                    # print(value_list)
            ##多行key的情况
            elif index > 1:
                # key
                for m in range(len(key_info)):
                    num1 = 0
                    num2 = 0
                    key = []
                    for k in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][k] + num2
                        key.append(key_info[m][num1:num2])
                    key_list.append(key)
                # print(key_list)
                count_key_List = 0
                count_num = 0
                for h in range(len(key_list[0])):
                    count_key_List = count_key_List + 1
                real_key_list = []
                while 1:
                    real_key = ''
                    count_num = count_num + 1
                    if count_num > count_key_List:
                        break
                    else:
                        for f in range(len(key_list)):
                            key_in = key_list[f][count_num - 1]
                            real_key = real_key.strip() + key_in.strip()
                        # print(real_key)
                        real_key_list.append(real_key)
                        continue
                # print(real_key_list)
                # value
                for k in range(len(value_info)):
                    value = []
                    num1 = 0
                    num2 = 0
                    for l in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][l] + num2
                        value.append(value_info[k][num1:num2])
                    value_list.append(value)
                # 录入词典
                real_main_key = real_main_key_list[i]
                # print(real_main_key)
                if type(real_main_key) == type([]):
                    real_main_key_index = []
                    for l in range(len(real_main_key)):
                        if real_main_key[l] not in key:
                            real_main_key[l]=real_main_key[l][0].upper()+real_main_key[l][1:]
                            if real_main_key[l] in key:
                                real_main_key_index.append(key.index(real_main_key[l]))
                            elif real_main_key[l] not in key:
                                if '-' in real_main_key[l]:
                                    real_main_key_index.append(key.index(real_main_key[l].replace('-','_')))
                                elif '_' in real_main_key[l]:
                                    real_main_key_index.append(key.index(real_main_key[l].replace('_', '-')))
                        else:
                            real_main_key_index.append(key.index(real_main_key[l]))
                    # print(real_main_key_index)
                    key__list_list = []
                    for q in range(len(value_list)):
                        key__list = []
                        real_main_key_title = ''
                        for w in range(len(value_list[q])):
                            if w in real_main_key_index:
                                key__list.append(value_list[q][w].strip())
                                continue
                            else:
                                title1 = ''
                                for l in range(len(real_main_key_index)):
                                    title1 = title1 + '/' + value_list[q][real_main_key_index[l]].strip()
                                title2 = title1.strip('/') + '/' + key[w].strip()
                                info = value_list[q][w].strip()
                                dict_value[title2] = info
                        key__list_list.append(key__list)
                        for w in range(len(real_main_key)):
                            real_main_key_title = real_main_key_title + '/' + real_main_key[w]
                        dict_value[real_main_key_title.strip('/')] = key__list_list
                elif type(real_main_key) == type(''):
                    if real_main_key not in real_key_list:
                        real_main_key = real_main_key[0].upper() + real_main_key[1:]
                        if real_main_key in real_key_list:
                            real_main_key_index=real_key_list.index(real_main_key)
                        elif real_main_key not in real_key_list:
                            if '-' in real_main_key:
                                real_main_key_index=real_key_list.index(real_main_key.replace('-', '_'))
                            elif '_' in real_main_key:
                                real_main_key_index=real_key_list.index(real_main_key.replace('_', '-'))
                    else:
                        real_main_key_index = real_key_list.index(real_main_key)

                    key__list = []
                    for q in range(len(value_list)):
                        for w in range(len(value_list[q])):
                            if w == real_main_key_index:
                                key__list.append(value_list[q][w].strip())
                                continue
                            else:
                                title = value_list[q][real_main_key_index].strip() + '/' + real_key_list[w].strip()
                                info = value_list[q][w].strip()
                                dict_value[title] = info
                        dict_value[real_main_key] = key__list
                    # print(key__list)
                    # print(real_main_key_index)
                    # print(real_key_list)
                    # print(value_list)
        #print(start_list)
        return dict_value,start_list,end_list
    def dut_show_return_for_dut_show_autoget_form(self,show_info,table_title,end_num_flag=None):
        """
        用来返回dut_show_autoget_form需要的参数
        """
        show_info_list_line=self.dut_get_start_show_info(show_info)
        show_info_len = len(show_info_list_line)
        end_table = show_info_len
        star_table = 0
        for num in range (show_info_len):
            if table_title in show_info_list_line[num]:
                star_table = num
            if end_num_flag is not None :
                if end_num_flag in show_info_list_line[num]:
                    end_table = num
        (whippletree_list_1,cut_del_1) = self.dut_show_autoget_whippletree(star_table,end_table,show_info_list_line)
        show_info_list_line.remove(show_info_list_line[cut_del_1])
        show_info_len = len(show_info_list_line)
        end_table = show_info_len
        for num in range (show_info_len):
            if table_title in show_info_list_line[num]:
                star_table = num
            if end_num_flag is not None :
                if end_num_flag in show_info_list_line[num]:
                    end_table = num
        return star_table,end_table,table_title,whippletree_list_1,show_info_list_line

    def dut_get_show_info_analy_all_colon(self,show_info,str_arg):
        """
        以冒号拆分格式
        auto-sync range      : vsu
        auto-sync policy     : none
        """
        dict_value={}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*(%s).*'%(str_arg),show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        #print show_info_list_line
        for list_value in show_info_list_line:
            if re.match(".*:.*",list_value) :
                list_value_split = list_value.split (":",1)   #以冒号分割一次
                key_name = '%s'%(list_value_split[0].lstrip().rstrip().replace("\r",""))
                dict_value[key_name] = list_value_split[1].lstrip().rstrip().replace("\r","")
        #print u"------》解析结果："
        #print dict_value
        return dict_value
    def dut_get_show_info_analy_all_more_blank(self,show_info,str_arg):
        """
        以两个空格拆分格式
        Address pools             0
        Lease counter             0
        """
        dict_value={}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*(%s).*'%(str_arg),show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for list_value in show_info_list_line:
            if re.match("\w+.*",list_value) :
                list_value_split = re.split(r'\s{2,}',list_value)   #以冒号分割一次
                key_name = '%s'%(list_value_split[0].lstrip().rstrip().replace("\r",""))
                dict_value[key_name] = list_value_split[1].lstrip().rstrip().replace("\r","")
        return dict_value
    def dut_show_only_blank_list(self,show_info,value_title):
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if value_title in show_info_list_line[line_len_num]:              #***********
                table_1 = line_len_num
        (whippletree_list_1,cut_del_1) = self.dut_show_autoget_whippletree(table_1,line_len,show_info_list_line)
        show_info_list_line.remove(show_info_list_line[cut_del_1])
        new_show_info_num = len(show_info_list_line)
        for line_len_num in range(0,new_show_info_num):
            if value_title in show_info_list_line[line_len_num]:              #***********
                table_3 = line_len_num
        dict_value1 = self.dut_show_autoget_form(table_3,new_show_info_num,"Interface",whippletree_list_1,show_info_list_line)
        return dict_value1
    def dut_show_autoget_blank_list(self,show_info,value_title,value_title_end = None,value_title_2=None,split_one=None,star_num_count_flag=None,end_num_count_flag=None,ago_value_title=None):
        """
        value_title_2指有二级key的时候
        split_one 用来定义空格分割位数 有填为1+ ，不填默认 2+
        star_num_count_flag 用于value_title在回显信息中出现的多次时使用，填1表示第一次匹配的为表头，默认为最后一次匹配到
        列表为空格区分的形式
        Index     Peer IP              Port      State         Mac Address
        1         13.0.3.3             10000     Run           5869.6c7a.685e
        """
        col_len_list = []
        #创建字典
        dict_value={}
        rol_title_list = []
        title_row =[]

        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
            if re.match("\s*-{3,}\s+-{3,}.*",i):
                show_info_list_line.remove(i)
            if '====' in i:
                show_info_list_line.remove(i)
        length = len(show_info_list_line)
        star_num_count = 0
        end_num_count = 0
        for line_len_num in range(0,length):
            if value_title in show_info_list_line[line_len_num]:              #***********
                star_num_count = star_num_count + 1
                if star_num_count_flag is not None:
                    if int(star_num_count_flag) == star_num_count and star_num_count < 100:
                        start_num=line_len_num
                        star_num_count = 101
                else:
                    start_num=line_len_num
            if value_title_end is not None:
                if value_title_end in show_info_list_line[line_len_num]:
                    if end_num_count_flag is not None :
                        if end_num_count < 1:
                            end_num = line_len_num
                            end_num_count = 1
                    else:
                        end_num = line_len_num
            else:
                end_num = length
        for k in range(start_num,end_num):
            if split_one is not None :
                col_value_list = re.split(r'\s{1,}', str(show_info_list_line[k]).strip())
            else:
                col_value_list = re.split(r'\s{2,}', str(show_info_list_line[k]).strip())
            if value_title in col_value_list :
                title_row = col_value_list
                x_len = len(title_row)
                for i in range(x_len) :
                    if title_row[i] == value_title :
                        new_list_title_key = i
                    if value_title_2 is not None :
                        if title_row[i] == value_title_2 :
                            new_list_title_key_2 = i

            else:
                if col_value_list != "":
                    title_col = col_value_list[new_list_title_key]           #表头的列值位*****
                    if ago_value_title:
                        title_col = ago_value_title+"/"+title_col
                    if value_title_2 is not None :
                        title_col = title_col+"/"+col_value_list[new_list_title_key_2]
                    rol_title_list.append(title_col.strip())
                    if new_list_title_key+1 < x_len :
                        for s in range(new_list_title_key+1,x_len):  #需要变参的地方
                            if value_title_2 is not None :
                                if s == new_list_title_key_2 :
                                    continue
                            key_name = '%s/%s'%(title_col,title_row[s])
                            dict_value[key_name]=col_value_list[s].strip()
                    if new_list_title_key > 0 :
                        for s in range(0,new_list_title_key):  #需要变参的地方
                            ##遍历列头边的值
                            if value_title_2 is not None :
                                if s == new_list_title_key_2 :
                                    continue
                            key_name = '%s/%s' % (title_col, title_row[s])
                            dict_value[key_name.strip()]=col_value_list[s].strip()
        if ago_value_title:
            value_title = ago_value_title+"/"+value_title
        dict_value[value_title+"_list"] = rol_title_list
        return dict_value
    def dut_show_autoget_blank_list_3(self,show_info,value_title,value_title_end = None,value_title_2=None,split_one=None,star_num_count_flag=None,end_num_count_flag=None,ago_value_title=None,value_title_3=None,value_title_4=None):

        col_len_list = []

        dict_value={}
        rol_title_list = []
        title_row =[]

        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
            if re.match("\s*-{3,}\s+-{3,}.*",i):
                show_info_list_line.remove(i)
            if '====' in i:
                show_info_list_line.remove(i)
        length = len(show_info_list_line)
        star_num_count = 0
        end_num_count = 0
        for line_len_num in range(0,length):
            if value_title in show_info_list_line[line_len_num]:              #***********
                star_num_count = star_num_count + 1
                if star_num_count_flag is not None:
                    if int(star_num_count_flag) == star_num_count and star_num_count < 100:
                        start_num=line_len_num
                        star_num_count = 101
                else:
                    start_num=line_len_num
            if value_title_end is not None:
                if value_title_end in show_info_list_line[line_len_num]:
                    if end_num_count_flag is not None :
                        if end_num_count < 1:
                            end_num = line_len_num
                            end_num_count = 1
                    else:
                        end_num = line_len_num
            else:
                end_num = length
        for k in range(start_num,end_num):
            if split_one is not None :
                col_value_list = re.split(r'\s{1,}', str(show_info_list_line[k]).strip())
            else:
                col_value_list = re.split(r'\s{2,}', str(show_info_list_line[k]).strip())
            if value_title in col_value_list :
                title_row = col_value_list
                x_len = len(title_row)
                for i in range(x_len) :
                    if title_row[i] == value_title :
                        new_list_title_key = i
                    if value_title_2 is not None :
                        if title_row[i] == value_title_2 :
                            new_list_title_key_2 = i
                    if value_title_3 is not None :
                        if title_row[i] == value_title_3 :
                            new_list_title_key_3 = i
                    if value_title_4 is not None :
                        if title_row[i] == value_title_4 :
                            new_list_title_key_4 = i

            else:
                if col_value_list != "":
                    title_col = col_value_list[new_list_title_key]
                    if ago_value_title:
                        title_col = ago_value_title+"/"+title_col
                    if value_title_2 is not None and value_title_3 is not None:
                        title_col = title_col+"/"+col_value_list[new_list_title_key_2] + "/"+col_value_list[new_list_title_key_3]
                    if value_title_2 is not None and value_title_4 is not None:
                        title_col = title_col+"/"+col_value_list[new_list_title_key_4]
                    elif value_title_2 is not None :
                        title_col = title_col+"/"+col_value_list[new_list_title_key_2]
                    rol_title_list.append(title_col.strip())
                    if new_list_title_key+1 < x_len :
                        for s in range(new_list_title_key+1,x_len):
                            if value_title_2 is not None :
                                if s == new_list_title_key_2 :
                                    continue
                            key_name = '%s/%s'%(title_col,title_row[s])
                            dict_value[key_name]=col_value_list[s].strip()
                    if new_list_title_key > 0 :
                        for s in range(0,new_list_title_key):
                            if value_title_2 is not None :
                                if s == new_list_title_key_2 :
                                    continue
                            key_name = '%s/%s' % (title_col, title_row[s])
                            dict_value[key_name.strip()]=col_value_list[s].strip()
        if ago_value_title:
            value_title = ago_value_title+"/"+value_title
        dict_value[value_title+"_list"] = rol_title_list
        return dict_value
    def dut_common_get_linelist(self,show_info,title_value,end_num_flag=None,split_num = 1,mode_flag=1,str_arg="show"):
        #title_line = " prefix/len                                   weight  path-id next_hop                               interface"
        #split_num = 1 时，以1个空格拆分 ，2时为2个以上
        #mode_flag = 1 时 为字符切到下一个字符结束；mode_flag = 2 时 为字符切到本字符结束0
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*(%s).*'%(str_arg),show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        show_info_len = len(show_info_list_line)
        star = 0
        end = show_info_len
        for value_show_num in range(show_info_len):
            if title_value in show_info_list_line[value_show_num]:
                title_line = show_info_list_line[value_show_num]
                star = value_show_num
            if end_num_flag is not None :
                if end_num_flag in show_info_list_line[value_show_num]:
                    end = value_show_num
        list1 = re.split(r'\s{%d,}'%(split_num),title_line.strip())
        show_len_list = []
        tmp = 0
        count = 0
        if mode_flag == 1 :
            for value in list1:
                num = title_line.find(value)
                num_len = num - tmp
                if count >0:
                    tmp = num
                    show_len_list.append(num_len)
                count = count+1
            show_len_list.append(32)
        else:
            for value in list1:
                len_title = len(value)
                num = title_line.find(value)
                max_num = len_title + num
                if count > 0 :
                    num_len2 = max_num-tmp
                    show_len_list.append(num_len2)
                else:
                    show_len_list.append(max_num)
                tmp = max_num
                count = count+1
        return star,end,show_len_list,show_info_list_line
    def dut_common_get_linelist_improve(self,show_info,title_value,end_num_flag=None,split_num = 1,mode_flag=1,str_arg="show"):
        #title_line = " prefix/len                                   weight  path-id next_hop                               interface"
        #split_num = 1 时，以1个空格拆分 ，2时为2个以上
        #mode_flag = 1 时 为字符切到下一个字符结束；mode_flag = 2 时 为字符切到本字符结束0
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*(%s).*'%(str_arg),show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        show_info_len = len(show_info_list_line)
        star = 0
        end = show_info_len
        for value_show_num in range(show_info_len):
            if title_value in show_info_list_line[value_show_num]:
                title_line = show_info_list_line[value_show_num]
                title_line_tmp = title_line + " "
                star = value_show_num
            if end_num_flag is not None :
                if end_num_flag in show_info_list_line[value_show_num]:
                    end = value_show_num
        list1 = re.split(r'\s{%d,}'%(split_num),title_line.strip())
        show_len_list = []
        tmp = 0
        count = 0
        if mode_flag == 1 :
            for value in list1:
                num = title_line_tmp.find(value+" ")
                num_len = num - tmp
                if count >0:
                    tmp = num
                    show_len_list.append(num_len)
                count = count+1
            show_len_list.append(32)
        else:
            for value in list1:
                len_title = len(value)
                num = title_line_tmp.find(value+" ")
                max_num = len_title + num
                if count > 0 :
                    num_len2 = max_num-tmp
                    show_len_list.append(num_len2)
                else:
                    show_len_list.append(max_num)
                tmp = max_num
                count = count+1
        return star,end,show_len_list,show_info_list_line
    def dut_get_start_show_info(self,show_info):
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            value = i.strip()
            if value == "":
                show_info_list_line.remove(i)
        return show_info_list_line
    def dut_show_autoget_whippletree_form_analysis(self,show_info,title_value,title_value2=None,ago_colon_last_str=None,last_colon_ago_str=None):
        """解析纯横线，或者表格前面、后面有冒号的情况"""
        dict_value0 = {}
        last_colon_ago_str_flag = 0
        show_info_list_line=self.dut_get_start_show_info(show_info)
        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if title_value in show_info_list_line[line_len_num]:              #***********
                table_1 = line_len_num
                if ago_colon_last_str is not None:
                    break
            if ago_colon_last_str is not None:
                if ":" in show_info_list_line[line_len_num]:
                    list1 = show_info_list_line[line_len_num].split(":")
                    dict_value0[list1[0].strip()] = list1[1].strip()
        (whippletree_list_1,cut_del_1) = self.dut_show_autoget_whippletree(table_1,line_len,show_info_list_line)
        show_info_list_line.remove(show_info_list_line[cut_del_1])
        new_show_info_num = len(show_info_list_line)
        for line_len_num in range(0,new_show_info_num):
            if title_value in show_info_list_line[line_len_num]:              #***********
                table_3 = line_len_num
            if last_colon_ago_str is not None:
                if last_colon_ago_str in show_info_list_line[line_len_num]:
                    new_show_info_num = line_len_num
                    last_colon_ago_str_flag = 1
            if last_colon_ago_str_flag == 1:
                if ":" in show_info_list_line[line_len_num]:
                    list1 = show_info_list_line[line_len_num].split(":")
                    dict_value0[list1[0].strip()] = list1[1].strip()
        dict_value1 = self.dut_show_autoget_form(table_3,new_show_info_num,title_value,whippletree_list_1,show_info_list_line,title_value2=title_value2)
        dict_value =dict(dict_value1.items()+dict_value0.items())
        return dict_value

    def dut_get_show_supervlan(self,show_info):
        """
        Function:show supervlan回显解析函数
        CLI命令:show supervlan
        回显信息示例:
5848VAC#show supervlan 
supervlan id  supervlan arp-proxy  subvlan id  subvlan arp-proxy  subvlan ip range
------------  -------------------  ----------  -----------------  ---------------------------------
           2                   ON          20                 ON  192.168.196.10 - 192.168.196.50
                                           30                 ON  192.168.196.60 - 192.168.196.100
5848VAC#

        Returns:
{'supervlan id_list': ['2'
'5848VAC#'], '2/30/subvlan ip range': '192.168.196.60 - 192.168.196.100'
'2/supervlan arp-proxy': 'ON'
'2/30/subvlan arp-proxy': 'ON'
'2/20/subvlan ip range': '192.168.196.10 - 192.168.196.50'
'5848VAC#//subvlan arp-proxy': ''
'2/20/subvlan arp-proxy': 'ON'
'5848VAC#//subvlan ip range': ''
'subvlan id_list': ['2/20'
'2/30'
'5848VAC#/']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show supervlan | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        star_table,end_table,table_title,whippletree_list_1,show_info_list_line = self.dut_show_return_for_dut_show_autoget_form(show_info,"supervlan id")
        return self.dut_show_autoget_form_show_supervlan(star_table,end_table,table_title,whippletree_list_1,show_info_list_line)
    def dut_show_autoget_form_show_supervlan(self, star_num, end_num,title_value,x_list,show_info_list_line,title_value2="subvlan id",one_key_none_flag=1):
        '''
        对设备有关杆号的列表进行字典的遍历
        '''
        dict_value ={}
        address_list = []
        title_list =[]
        supervlan_id_list=[]
        subvlan_id = []
        for i in range (star_num,end_num):    #line_len-1:上面删除“-----”这一行了
            ##print show_info_list_line[i]
            x_len = len(x_list)
            cut_star = 0
            cut_end=0
            new_list = []
            show_info_list_line[i] = show_info_list_line[i]
            ##print show_info_list_line[i]
            if show_info_list_line[i] != "" :
                for j in range(x_len):
                    cut_end = cut_end+int(x_list[j])
                    col_value = show_info_list_line[i][cut_star:cut_end]
                    cut_star = cut_end
                    col_value = col_value.lstrip()
                    col_value = col_value.rstrip()
                    new_list.append(col_value)
                #获取表头的列，用于组合
                ##print col_value_list
                for i in range(len(new_list)) :
                    if new_list[i] == title_value :
                        new_list_title_key = i
                    if title_value2 is not None :
                        if new_list[i] == title_value2 :
                            new_list_title_key_2 = i
                new_list_title_value = new_list[new_list_title_key]         #需要变参的地方


                if new_list_title_value == title_value:
                    title_list = new_list
                elif new_list_title_value!= title_value:
                    if str(new_list_title_value).strip()!="":
                        one_key_value = new_list_title_value
                        supervlan_id_list.append(one_key_value)
                    if one_key_none_flag is not None:
                        if str(new_list_title_value).strip()=="":
                            new_list_title_value =one_key_value
                    #生成字典
                    if title_value2 is not None :
                        new_list_title_value = new_list_title_value+"/"+new_list[new_list_title_key_2]
                    address_list.append(new_list_title_value)
                    #遍历列头右边的值
                    if new_list_title_key+1 < x_len :
                        for s in range(new_list_title_key+1,x_len):  #需要变参的地方
                            #key_name = '%s/%s' % (title_col,title_row[s])
                            if title_value2 is not None :
                                if s == new_list_title_key_2 :
                                    continue
                            if str(title_list[s]).strip() == "supervlan arp-proxy":
                                if new_list[s].strip() != "":
                                    key_name = '%s/%s'%(one_key_value,title_list[s])
                                    dict_value[key_name]=new_list[s]
                            else :
                                key_name = '%s/%s'%(new_list_title_value,title_list[s])
                                dict_value[key_name]=new_list[s]
                    if new_list_title_key > 0 :
                        for s in range(0,new_list_title_key):  #需要变参的地方
                            ##遍历列头边的值
                            if title_value2 is not None :
                                if s == new_list_title_key_2 :
                                    continue
                            key_name = '%s/%s' % (new_list_title_value, title_list[s])
                            dict_value[key_name]=new_list[s]
                dict_value[title_value2+"_list"]=address_list
                dict_value[title_value+"_list"]=supervlan_id_list
        return dict_value

    def dut_show_autoget_form_show_mac(self, star_num, end_num,title_value,x_list,show_info_list_line,title_value2=None):
        '''
        对设备有关杆号的列表进行字典的遍历
        '''
        dict_value ={}
        address_list = []
        title_list =[]
        flag_vsivni =0
        for value in show_info_list_line:
            if re.match('\d+\/\d+\/\d+\s+(.*)',value):
                flag_vsivni = 1
                break
            if re.match('\d+\/-\/\d+\s+(.*)',value):
                flag_vsivni = 1
                break
            if re.match('\d+\/\d+\/-\s+(.*)',value):
                flag_vsivni = 1
                break
        for i in range (star_num,end_num):    #line_len-1:上面删除“-----”这一行了
            ##print show_info_list_line[i]
            x_len = len(x_list)
            cut_star = 0
            cut_end=0
            new_list = []
            show_info_list_line[i] = show_info_list_line[i]
            ##print show_info_list_line[i]
            if show_info_list_line[i] != "" :
                for j in range(x_len):
                    cut_end = cut_end+int(x_list[j])
                    col_value = show_info_list_line[i][cut_star:cut_end]
                    cut_star = cut_end
                    col_value = col_value.lstrip()
                    col_value = col_value.rstrip()
                    if flag_vsivni == 0 :
                        if "VLAN/VSI/VNI" == str(col_value).upper() or "/-/-" in col_value:
                            col_value=str(col_value).split("/")[0]
                    new_list.append(col_value)
                #获取表头的列，用于组合
                ##print col_value_list
                for i in range(len(new_list)) :
                    if new_list[i] == title_value :
                        new_list_title_key = i
                    if title_value2 is not None :
                        if new_list[i] == title_value2 :
                            new_list_title_key_2 = i
                new_list_title_value = new_list[new_list_title_key]          #需要变参的地方

                if new_list_title_value == title_value:
                    title_list = new_list
                elif new_list_title_value!= title_value:
                    #生成字典
                    if title_value2 is not None :
                        new_list_title_value = new_list_title_value+"/"+new_list[new_list_title_key_2]
                    address_list.append(new_list_title_value)
                    #遍历列头右边的值
                    if new_list_title_key+1 < x_len :
                        for s in range(new_list_title_key+1,x_len):  #需要变参的地方
                            #key_name = '%s/%s' % (title_col,title_row[s])
                            if title_value2 is not None :
                                if s == new_list_title_key_2 :
                                    continue
                            key_name = '%s/%s'%(new_list_title_value,title_list[s])
                            dict_value[key_name]=new_list[s]
                    if new_list_title_key > 0 :
                        for s in range(0,new_list_title_key):  #需要变参的地方
                            ##遍历列头边的值
                            if title_value2 is not None :
                                if s == new_list_title_key_2 :
                                    continue
                            key_name = '%s/%s' % (new_list_title_value, title_list[s])
                            dict_value[key_name]=new_list[s]
                dict_value[title_value]=address_list
        return dict_value
    def dut_get_show_upgrade_autosync(self,show_info):
        """
        Function:show upgrade auto-sync回显解析函数
        CLI命令:show upgrade auto-sync
        回显信息示例:
18K_508#show upgrade auto-sync 
auto-sync range      : vsu
auto-sync policy     : none 
auto-sync package    : tmp:N18000_CMII_9PL1.bin 
auto-sync patch      :

        Returns:
{'auto-sync patch': ''
'auto-sync range': 'vsu'
'auto-sync policy': 'none'
'auto-sync package': 'tmp:N18000_CMII_9PL1.bin'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show upgrade auto-sync | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        str_arg ="show"
        return self.dut_get_show_info_analy_all_colon(show_info,str_arg)
    def dut_get_show_ms_mc(self,show_info):
        """
        Function:show ms mc回显解析函数
        CLI命令:show ms mc
        回显信息示例:
Ruijie#show  ms mc 
ms mc register list:
  1
    state: REALTIME
    sd: 33
    cur_batch_num: 0
    key_ent_exit_num: 0
    pack_size: 8
    key entity: security_zone MS_EID_FW_GROUP MS_EID_VFW
    mc info:
      System description      : S8600E
      Device id               : 1
      Slot id                 : 1
      Card type               : 95
      Card state              : 7
      Mac address             : 00:D0:F8:54:DE:D8
      System product id       : 20240010
      System serial number    : 1234942570010
      System hardware version : 1.00
      System software version : S8600E_RGOS 11.0(4)B52
      System boot version     : 1.2.9.427f031(141031)
      System core version     : 2.6.32.a7bf07442205f4
      System main version     : 1.0.0.69ce4075
    own entity:
     1) rlog info:
       entity state: REALTIME
       entity devid: 1
       entity slotid: 1
       entity buffer size: 262144 B
       entity version: 0x1
       entity ent_reg: 0x55634242a0
       entity mc_reg_node_on_ent_reg: 0x5563435040
     2) MS_EID_NAT_LOG info:
       entity state: REALTIME
       entity devid: 1
       entity slotid: 1
       entity buffer size: 262144 B
       entity version: 0x1
       entity ent_reg: 0x55634243e0
       entity mc_reg_node_on_ent_reg: 0x5563435060
     3) security_zone info:
       entity state: REALTIME
       entity devid: 1
       entity slotid: 1
       entity buffer size: 10485760 B
       entity version: 0x1
       entity ent_reg: 0x5563424480
       entity mc_reg_node_on_ent_reg: 0x55634352c0
     4) NAT_MS info:
       entity state: REALTIME
       entity devid: 1
       entity slotid: 1
       entity buffer size: 2097152 B
       entity version: 0x100
       entity ent_reg: 0x5563424160
       entity mc_reg_node_on_ent_reg: 0x5563435080
     5) net info:
       entity state: REALTIME
       entity devid: 1
       entity slotid: 1
       entity buffer size: 15728640 B
       entity version: 0x100
       entity ent_reg: 0x55634245c0
       entity mc_reg_node_on_ent_reg: 0x5563435240
     6) LSM info:
       entity state: REALTIME
       entity devid: 1
       entity slotid: 1
       entity buffer size: 262144 B
       entity version: 0x1
       entity ent_reg: 0x55634247a0
       entity mc_reg_node_on_ent_reg: 0x55634350a0
     7) fpm_ms info:
       entity state: REALTIME
       entity devid: 1
       entity slotid: 1
       entity buffer size: 262144 B
       entity version: 0x1
       entity ent_reg: 0x5563424520
       entity mc_reg_node_on_ent_reg: 0x55634350c0
     8) SYSLOGD info:
       entity state: REALTIME
       entity devid: 1
       entity slotid: 1
       entity buffer size: 262144 B
       entity version: 0x1
       entity ent_reg: 0x5563424020
       entity mc_reg_node_on_ent_reg: 0x55634350e0
     9) NSM info:
       entity state: REALTIME
       entity devid: 1
       entity slotid: 1
       entity buffer size: 6291456 B
       entity version: 0x1
       entity ent_reg: 0x5563424340
       entity mc_reg_node_on_ent_reg: 0x5563435200
     10) MS_EID_FW_GROUP info:
       entity state: REALTIME
       entity devid: 1
       entity slotid: 1
       entity buffer size: 262144 B
       entity version: 0x1
       entity ent_reg: 0x5563424980
       entity mc_reg_node_on_ent_reg: 0x5563435340
     11) PBR_PROXY info:
       entity state: REALTIME
       entity devid: 1
       entity slotid: 1
       entity buffer size: 6291456 B
       entity version: 0x100
       entity ent_reg: 0x5563424660
       entity mc_reg_node_on_ent_reg: 0x5563435100
     12) MS_EID_VFW info:
       entity state: REALTIME
       entity devid: 1
       entity slotid: 1
       entity buffer size: 819200 B
       entity version: 0x1
       entity ent_reg: 0x5563424840
       entity mc_reg_node_on_ent_reg: 0x5563435300
     13) ACL info:
       entity state: REALTIME
       entity devid: 1
       entity slotid: 1
       entity buffer size: 20971520 B
       entity version: 0x0
       entity ent_reg: 0x55634240c0
       entity mc_reg_node_on_ent_reg: 0x5563435280
ms mc register number: 1.

        Returns:
{'1/ACL info/entity state': 'REALTIME'
'1/MS_EID_VFW info/entity ent_reg': '0x5563424840'
'1/MS_EID_NAT_LOG info/entity ent_reg': '0x55634243e0'
'1/net info/entity buffer size': '15728640 B'
'1/rlog info/entity buffer size': '262144 B'
'1/rlog info/entity ent_reg': '0x55634242a0'
'1/MS_EID_VFW info/entity buffer size': '819200 B'
'1/fpm_ms info/entity devid': '1'
'1/System description': 'S8600E'
'1/MS_EID_NAT_LOG info/entity buffer size': '262144 B'
'1/NSM info/entity ent_reg': '0x5563424340'
'1/PBR_PROXY info/entity state': 'REALTIME'
'1/SYSLOGD info/entity buffer size': '262144 B'
'1/PBR_PROXY info/entity mc_reg_node_on_ent_reg': '0x5563435100'
'1/LSM info/entity mc_reg_node_on_ent_reg': '0x55634350a0'
'1/ACL info/entity devid': '1'
'1/MS_EID_VFW info/entity slotid': '1'
'1/ACL info/entity slotid': '1'
'1/NAT_MS info/entity slotid': '1'
'1/MS_EID_FW_GROUP info/entity buffer size': '262144 B'
'1/fpm_ms info/entity state': 'REALTIME'
'1/LSM info/entity buffer size': '262144 B'
'1/rlog info/entity mc_reg_node_on_ent_reg': '0x5563435040'
'1/state': 'REALTIME'
'1/NSM info/entity devid': '1'
'1/MS_EID_VFW info/entity version': '0x1'
'1/own entity': ''
'1/System serial number': '1234942570010'
'1/rlog info/entity version': '0x1'
'1/rlog info/entity state': 'REALTIME'
'1/NAT_MS info/entity devid': '1'
'1/security_zone info/entity devid': '1'
'1/MS_EID_FW_GROUP info/entity state': 'REALTIME'
'1/PBR_PROXY info/entity ent_reg': '0x5563424660'
'1/SYSLOGD info/entity mc_reg_node_on_ent_reg': '0x55634350e0'
'1/net info/entity mc_reg_node_on_ent_reg': '0x5563435240'
'1/NAT_MS info/entity buffer size': '2097152 B'
'1/MS_EID_FW_GROUP info/entity devid': '1'
'1/Card state': '7'
'1/security_zone info/entity ent_reg': '0x5563424480'
'1/System hardware version': '1.00'
'1/sd': '33'
'1/security_zone info/entity buffer size': '10485760 B'
'1/LSM info/entity ent_reg': '0x55634247a0'
'1/pack_size': '8'
'1/fpm_ms info/entity ent_reg': '0x5563424520'
'1/LSM info/entity version': '0x1'
'1/rlog info/entity devid': '1'
'1/NAT_MS info/entity version': '0x100'
'1/NAT_MS info/entity mc_reg_node_on_ent_reg': '0x5563435080'
'ms mc register number': '1'
'1/MS_EID_NAT_LOG info/entity slotid': '1'
'1/PBR_PROXY info/entity slotid': '1'
'1/fpm_ms info/entity buffer size': '262144 B'
'1/rlog info/entity slotid': '1'
'1/MS_EID_NAT_LOG info/entity state': 'REALTIME'
'1/NSM info/entity buffer size': '6291456 B'
'1/ACL info/entity mc_reg_node_on_ent_reg': '0x5563435280'
'1/NSM info/entity version': '0x1'
'1/PBR_PROXY info/entity version': '0x100'
'1/System software version': 'S8600E_RGOS 11.0(4)B52'
'1/key entity': 'security_zone MS_EID_FW_GROUP MS_EID_VFW'
'1/System main version': '1.0.0.69ce4075'
'1/security_zone info/entity slotid': '1'
'1/Card type': '95'
'1/MS_EID_NAT_LOG info/entity mc_reg_node_on_ent_reg': '0x5563435060'
'1/net info/entity slotid': '1'
'1/Device id': '1'
'1/SYSLOGD info/entity slotid': '1'
'1/security_zone info/entity mc_reg_node_on_ent_reg': '0x55634352c0'
'1/LSM info/entity devid': '1'
'1/Mac address': '00:D0:F8:54:DE:D8'
'1/MS_EID_FW_GROUP info/entity ent_reg': '0x5563424980'
'1/System boot version': '1.2.9.427f031(141031)'
'1/ACL info/entity version': '0x0'
'1/net info/entity state': 'REALTIME'
'1/SYSLOGD info/entity state': 'REALTIME'
'1/Slot id': '1'
'1/NSM info/entity state': 'REALTIME'
'1/mc info': ''
'1/fpm_ms info/entity slotid': '1'
'1/ACL info/entity buffer size': '20971520 B'
'1/System core version': '2.6.32.a7bf07442205f4'
'1/NSM info/entity mc_reg_node_on_ent_reg': '0x5563435200'
'1/System product id': '20240010'
'1/MS_EID_VFW info/entity devid': '1'
'1/MS_EID_NAT_LOG info/entity devid': '1'
'1/MS_EID_FW_GROUP info/entity version': '0x1'
'1/cur_batch_num': '0'
'1/ACL info/entity ent_reg': '0x55634240c0'
'1/security_zone info/entity version': '0x1'
'1/net info/entity version': '0x100'
'1/SYSLOGD info/entity version': '0x1'
'1/MS_EID_FW_GROUP info/entity slotid': '1'
'1/LSM info/entity state': 'REALTIME'
'1/MS_EID_NAT_LOG info/entity version': '0x1'
'1/MS_EID_VFW info/entity mc_reg_node_on_ent_reg': '0x5563435300'
'1/MS_EID_FW_GROUP info/entity mc_reg_node_on_ent_reg': '0x5563435340'
'1/NAT_MS info/entity state': 'REALTIME'
'1/fpm_ms info/entity version': '0x1'
'1/net info/entity ent_reg': '0x55634245c0'
'1/security_zone info/entity state': 'REALTIME'
'1/SYSLOGD info/entity ent_reg': '0x5563424020'
'ms mc register list': ''
'1/LSM info/entity slotid': '1'
'1/net info/entity devid': '1'
'1/SYSLOGD info/entity devid': '1'
'1/key_ent_exit_num': '0'
'1/PBR_PROXY info/entity buffer size': '6291456 B'
'1/NSM info/entity slotid': '1'
'1/fpm_ms info/entity mc_reg_node_on_ent_reg': '0x55634350c0'
'1/PBR_PROXY info/entity devid': '1'
'1/NAT_MS info/entity ent_reg': '0x5563424160'
'1/MS_EID_VFW info/entity state': 'REALTIME'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ms mc | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        new_list=[]

        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        key_1_flag=key_1=key_0=0
        line_len = len (show_info_list_line)
        for line_num in range(line_len):
            if str(show_info_list_line[line_num]).strip().isdigit()==True:
                key_0=show_info_list_line[line_num].strip()
                continue
            if re.match(r'^\s+\d+\).*', show_info_list_line[line_num]):
                list1 = show_info_list_line[line_num].split (":",1)
                list2 = list1[0].split(")")
                key_1 = list2[1].strip()
                key_1_flag = 1
            elif key_1_flag==1 and re.match(r'^\s+.*', show_info_list_line[line_num]):
                list3 = show_info_list_line[line_num].split (":",1)
                dict_value[key_0 + "/"+key_1 + "/"+list3[0].strip()] = list3[1].strip()
            elif re.match(r'^\w.*', show_info_list_line[line_num]):
                list4 = show_info_list_line[line_num].split (":",1)
                dict_value[list4[0].strip()] = list4[1].strip().rstrip(".")
            else:
                list4 = show_info_list_line[line_num].split (":",1)
                dict_value[key_0 + "/"+list4[0].strip()] = list4[1].strip().rstrip(".")
        return dict_value
    def dut_get_show_ip_dhcp_server_statistics(self,show_info):
        """
        Function:show ip dhcp server statistics回显解析函数
        CLI命令:show ip dhcp server statistics
        回显信息示例:
Ruijie#show ip dhcp server statistics 
Address pools             0
Lease counter             0
Dynamic address pools     0
Active  Lease Counter     0
Expired Lease Counter     0
Malformed messages        0
Dropped messages          0

Message                   Received 
BOOTREQUEST               0
DHCPDISCOVER              0
DHCPREQUEST               0
DHCPDECLINE               0
DHCPRELEASE               0
DHCPINFORM                0

Message                   Sent
BOOTREPLY                 0
DHCPOFFER                 0
DHCPACK                   0
DHCPNAK                   0
Ruijie#

        Returns:
{'Address pools': '0'
'DHCPDISCOVER': '0'
'DHCPREQUEST': '0'
'Expired Lease Counter': '0'
'DHCPDECLINE': '0'
'Malformed messages': '0'
'BOOTREQUEST': '0'
'Dropped messages': '0'
'DHCPACK': '0'
'DHCPOFFER': '0'
'DHCPNAK': '0'
'Lease counter': '0'
'DHCPINFORM': '0'
'Dynamic address pools': '0'
'Active': 'Lease Counter'
'Message': 'Sent'
'BOOTREPLY': '0'
'DHCPRELEASE': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip dhcp server statistics | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        str_arg ="show"
        return self.dut_get_show_info_analy_all_more_blank(show_info,str_arg)
    def dut_get_show_capwap_state(self,show_info):
        """
        Function:show capwap state回显解析函数
        CLI命令:show capwap state
        回显信息示例:
AC1_5708#show capwap state
CAPWAP tunnel state, 3 peers, 3 is run:
Index     Peer IP              Port      State         Mac Address   
1         13.0.3.3             10000     Run           5869.6c7a.685e
2         13.0.3.4             10000     Run           5869.6c24.017f
3         13.0.7.2             10000     Run           00d0.f822.33de

        Returns:
{'Mac Address/1': '5869.6c7a.685e'
'Mac Address/3': '00d0.f822.33de'
'Mac Address/2': '5869.6c24.017f'
'State/1': 'Run'
'State/3': 'Run'
'State/2': 'Run'
'CAPWAP tunnel state/peers': '3'
'CAPWAP tunnel state/run:': '3'
'Port/2': '10000'
'Port/3': '10000'
'Port/1': '10000'
'Peer IP/3': '13.0.7.2'
'Peer IP/2': '13.0.3.4'
'Peer IP/1': '13.0.3.3'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show capwap state | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        #########################################################################################
        # 用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split

        # 处理去除#之后的第一行的回显信息
        # 先去掉冒号
        show_info_split[0].strip(':')
        first_line_split = show_info_split[0].split(',') #按逗号拆成三个元素
        for i in range(len(first_line_split)):
            first_line_split[i].strip()  # 去除前后不必要的空格
        first_line_split_1 = first_line_split[1].split(' ') # 提取peer信息
        key_name = first_line_split[0] + '/' + first_line_split_1[2]
        dict_value[key_name] = first_line_split_1[1] # 添加第一个元素
        first_line_split_2 = first_line_split[2].split(' ') # 提取run信息
        key_name = first_line_split[0] + '/' + first_line_split_2[3]
        dict_value[key_name] = first_line_split_2[1].strip()
        if "Mac Address" in show_info_split[1]:
            show_info_split.remove(show_info_split[0]) # 处理完成之后及时删除,优化for搜索性能
            length = len(show_info_split) #重新计算长度

            # 处理Index及其之后的行,存入row_split
            for i in range(length):
                if re.match("Index", show_info_split[i]):
                    row_split = show_info_split[i].split('   ')  #切割行,例如Peer IP等
            while '' in row_split: # 删除列表空元素
                row_split.remove('')
            show_info_split.remove(show_info_split[0]) # 处理完之后删除

            # 处理 1 2 3所在的行
            row_split_1 = []
            length = len(show_info_split)
            for i in range(length):
                row_split_1 = show_info_split[i].split('    ')
                while '' in row_split_1:  # 删除列表空元素
                    row_split_1.remove('')
                for j in range(len(row_split_1)-1): # 防止后续操作出现数组越界，做一些小处理
                    key_name = row_split[j+1].lstrip().rstrip() + '/' + row_split_1[0].lstrip().rstrip()
                    dict_value[key_name] = row_split_1[j+1].lstrip().rstrip()  # 应该与Peer IP 等相对应
            return dict_value
        else:
            dict_value2 = self.dut_show_autoget_blank_list(show_info,"Peer IP")
            dict_value3=dict(dict_value.items()+dict_value2.items())
            return dict_value3
    def dut_get_virtualac_role(self,show_info):
        return self.dut_show_autoget_blank_list(show_info,"Device_id")
    def dut_get_show_rdnd_pairs(self,show_info):
        """
        Function:show rdnd pairs回显解析函数
        CLI命令:show rdnd pairs
        回显信息示例:
Ruijie#show rdnd pairs
Redundancy element pairs information:
name             pair seq   ISSU result   stage
==================================================
SNOOPING4        58         1             realtime
SAVI             57         1             realtime
REUP             56         1             realtime
net_rdnd         55         1             realtime
WEBAUTH          54         1             realtime
urpf_rdnd        53         1             realtime
SCC              52         1             realtime
of_rdnd          51         1             realtime
RLDP             50         1             realtime
RIP              49         1             realtime
RIPng            48         1             realtime
BFD_HA           47         1             realtime
TELNET_RDND      46         1             realtime
OSPF             45         1             realtime
NSM_HA           44         1             realtime
NSM_MCAST_RDND   43         1             realtime
NSM_MCAST6_RDND  42         1             realtime
SNMPD            41         1             realtime
OSPFv3           40         1             realtime
ISIS             39         1             realtime
PIM-SM           38         1             realtime
PIM-SMv6         37         1             realtime
DHCP-Server      36         1             realtime
LSM              35         1             realtime
BGP              34         1             realtime
LLDP             33         1             realtime
RNS_HA           32         1             realtime
MSTP_HA          31         1             realtime
RPI              30         1             realtime
zam              29         1             realtime
TRACK_HA         28         1             realtime
AAA              27         1             realtime
PARAM            26         1             realtime
LACP             25         1             realtime
RADIUS           24         1             realtime
ERPS             23         1             realtime
PDM_RDND         22         1             realtime
GVRP             21         1             realtime
RMON_RDND        20         1             realtime
TTY              19         1             realtime
MLD              18         1             realtime
IGMP             17         1             realtime
DLDP             16         1             realtime
SYSLOG_RDND      15         1             realtime
MLAG             14         1             realtime
MSF6_RDND        13         1             realtime
qosd_rdnd        12         1             realtime
acl              11         1             realtime
DHCP6            10         1             realtime
IGMP_SNP_RDND    9          1             realtime
BRIDGE           8          1             realtime
PASSWORD_RDND    7          1             realtime
MLD_SNP_RDND     6          1             realtime
SSH_RDND         5          1             realtime
MSF_RDND         4          1             realtime
TECH_RDND        3          1             realtime
CWMP_RDND        2          1             realtime
DOT1X            1          1             realtime
total paired count : 58

Local unpaired elements:

Peer unpaired elements:

        Returns:
{"RLDP/stage": "realtime", "RADIUS/stage": "realtime", "PDM_RDND/stage": "realtime", "TELNET_RDND/pair seq": "46", "TECH_RDND/stage": "realtime", "ERPS/pair seq": "23", "ISIS/stage": "realtime", "REUP/stage": "realtime", "GVRP/ISSU result": "1", "Peer unpaired elements": [], "SCC/ISSU result": "1", "DLDP/stage": "realtime", "OSPFv3/pair seq": "40", "NSM_MCAST6_RDND/pair seq": "42", "OSPF/ISSU result": "1", "BGP/pair seq": "34", "PIM-SM/stage": "realtime", "RNS_HA/ISSU result": "1", "LACP/pair seq": "25", "of_rdnd/pair seq": "51", "DHCP-Server/stage": "realtime", "TTY/pair seq": "19", "PARAM/stage": "realtime", "ERPS/ISSU result": "1", "SNOOPING4/pair seq": "58", "MLD_SNP_RDND/ISSU result": "1", "MLAG/stage": "realtime", "OSPF/pair seq": "45", "PIM-SM/pair seq": "38", "zam/ISSU result": "1", "TRACK_HA/stage": "realtime", "NSM_HA/pair seq": "44", "RIP/stage": "realtime", "DHCP6/stage": "realtime", "PDM_RDND/ISSU result": "1", "SAVI/ISSU result": "1", "TTY/ISSU result": "1", "RPI/stage": "realtime", "WEBAUTH/stage": "realtime", "SYSLOG_RDND/pair seq": "15", "RIP/pair seq": "49", "LACP/ISSU result": "1", "MSF_RDND/pair seq": "4", "PIM-SMv6/pair seq": "37", "BFD_HA/ISSU result": "1", "zam/stage": "realtime", "Local unpaired elements": [], "RLDP/ISSU result": "1", "RLDP/pair seq": "50", "TECH_RDND/ISSU result": "1", "WEBAUTH/ISSU result": "1", "SAVI/pair seq": "57", "RNS_HA/stage": "realtime", "SSH_RDND/ISSU result": "1", "net_rdnd/pair seq": "55", "IGMP/pair seq": "17", "DOT1X/stage": "realtime", "NSM_MCAST_RDND/pair seq": "43", "LSM/stage": "realtime", "PARAM/ISSU result": "1", "BFD_HA/pair seq": "47", "LLDP/pair seq": "33", "IGMP/ISSU result": "1", "REUP/pair seq": "56", "MSF6_RDND/pair seq": "13", "GVRP/pair seq": "21", "BFD_HA/stage": "realtime", "MLAG/pair seq": "14", "IGMP/stage": "realtime", "RIPng/ISSU result": "1", "PASSWORD_RDND/stage": "realtime", "OSPFv3/ISSU result": "1", "IGMP_SNP_RDND/pair seq": "9", "NSM_MCAST6_RDND/ISSU result": "1", "BRIDGE/stage": "realtime", "REUP/ISSU result": "1", "SNOOPING4/ISSU result": "1", "AAA/stage": "realtime", "SCC/stage": "realtime", "GVRP/stage": "realtime", "NSM_MCAST_RDND/stage": "realtime", "LSM/pair seq": "35", "MSF_RDND/stage": "realtime", "TELNET_RDND/ISSU result": "1", "LLDP/stage": "realtime", "qosd_rdnd/stage": "realtime", "SYSLOG_RDND/ISSU result": "1", "BRIDGE/pair seq": "8", "zam/pair seq": "29", "AAA/pair seq": "27", "DOT1X/pair seq": "1", "PASSWORD_RDND/ISSU result": "1", "of_rdnd/ISSU result": "1", "TELNET_RDND/stage": "realtime", "NSM_HA/ISSU result": "1", "RIPng/pair seq": "48", "ISIS/pair seq": "39", "urpf_rdnd/ISSU result": "1", "BGP/ISSU result": "1", "MSTP_HA/ISSU result": "1", "SNOOPING4/stage": "realtime", "SNMPD/pair seq": "41", "SNMPD/stage": "realtime", "NSM_MCAST6_RDND/stage": "realtime", "RNS_HA/pair seq": "32", "RADIUS/ISSU result": "1", "LSM/ISSU result": "1", "NSM_HA/stage": "realtime", "RMON_RDND/ISSU result": "1", "LACP/stage": "realtime", "DHCP6/pair seq": "10", "net_rdnd/ISSU result": "1", "DLDP/pair seq": "16", "urpf_rdnd/stage": "realtime", "MSTP_HA/pair seq": "31", "SNMPD/ISSU result": "1", "TRACK_HA/pair seq": "28", "net_rdnd/stage": "realtime", "OSPFv3/stage": "realtime", "MLD/pair seq": "18", "CWMP_RDND/pair seq": "2", "ISIS/ISSU result": "1", "MSF6_RDND/stage": "realtime", "MSTP_HA/stage": "realtime", "PASSWORD_RDND/pair seq": "7", "MLD_SNP_RDND/stage": "realtime", "MLD/stage": "realtime", "MLAG/ISSU result": "1", "acl/pair seq": "11", "of_rdnd/stage": "realtime", "acl/stage": "realtime", "CWMP_RDND/stage": "realtime", "LLDP/ISSU result": "1", "OSPF/stage": "realtime", "urpf_rdnd/pair seq": "53", "RMON_RDND/pair seq": "20", "DLDP/ISSU result": "1", "RADIUS/pair seq": "24", "SYSLOG_RDND/stage": "realtime", "MSF_RDND/ISSU result": "1", "IGMP_SNP_RDND/ISSU result": "1", "SSH_RDND/stage": "realtime", "DOT1X/ISSU result": "1", "DHCP-Server/ISSU result": "1", "RIP/ISSU result": "1", "SAVI/stage": "realtime", "PDM_RDND/pair seq": "22", "MSF6_RDND/ISSU result": "1", "RPI/pair seq": "30", "BGP/stage": "realtime", "MLD/ISSU result": "1", "WEBAUTH/pair seq": "54", "RPI/ISSU result": "1", "acl/ISSU result": "1", "DHCP-Server/pair seq": "36", "name_list": ["SNOOPING4", "SAVI", "REUP", "net_rdnd", "WEBAUTH", "urpf_rdnd", "SCC", "of_rdnd", "RLDP", "RIP", "RIPng", "BFD_HA", "TELNET_RDND", "OSPF", "NSM_HA", "NSM_MCAST_RDND", "NSM_MCAST6_RDND", "SNMPD", "OSPFv3", "ISIS", "PIM-SM", "PIM-SMv6", "DHCP-Server", "LSM", "BGP", "LLDP", "RNS_HA", "MSTP_HA", "RPI", "zam", "TRACK_HA", "AAA", "PARAM", "LACP", "RADIUS", "ERPS", "PDM_RDND", "GVRP", "RMON_RDND", "TTY", "MLD", "IGMP", "DLDP", "SYSLOG_RDND", "MLAG", "MSF6_RDND", "qosd_rdnd", "acl", "DHCP6", "IGMP_SNP_RDND", "BRIDGE", "PASSWORD_RDND", "MLD_SNP_RDND", "SSH_RDND", "MSF_RDND", "TECH_RDND", "CWMP_RDND", "DOT1X"], "NSM_MCAST_RDND/ISSU result": "1", "MLD_SNP_RDND/pair seq": "6", "CWMP_RDND/ISSU result": "1", "TECH_RDND/pair seq": "3", "PIM-SM/ISSU result": "1", "PIM-SMv6/ISSU result": "1", "DHCP6/ISSU result": "1", "ERPS/stage": "realtime", "TRACK_HA/ISSU result": "1", "RMON_RDND/stage": "realtime", "RIPng/stage": "realtime", "PARAM/pair seq": "26", "AAA/ISSU result": "1", "SCC/pair seq": "52", "PIM-SMv6/stage": "realtime", "IGMP_SNP_RDND/stage": "realtime", "SSH_RDND/pair seq": "5", "BRIDGE/ISSU result": "1", "qosd_rdnd/pair seq": "12", "TTY/stage": "realtime", "qosd_rdnd/ISSU result": "1"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show rdnd pairs | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value1 = self.dut_show_autoget_blank_list(show_info,"name","total paired count")
        dict_value2 = {}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        line_len = len(show_info_list_line)
        local_flag=0
        for line_num in range(line_len):
            if "Local unpaired elements" in show_info_list_line[line_num]:
                local_flag = 1
                local_list=[]
                continue
            if local_flag==1 and "Peer unpaired elements" not in show_info_list_line[line_num]:
                local_list.append(show_info_list_line[line_num].strip())
            if "Peer unpaired elements" in show_info_list_line[line_num]:
                local_flag = 2
                peer_list=[]
                continue
            if local_flag==2:
                peer_list.append(show_info_list_line[line_num].strip())
        dict_value2["Local unpaired elements"]=local_list
        dict_value2["Peer unpaired elements"] = peer_list
        dict_value3=dict(dict_value1.items()+dict_value2.items())
        return dict_value3




    def dut_get_show_webauth_directhost(self, show_info):
        """
        Function:show web-auth direct-host回显解析函数
        CLI命令:show web-auth direct-host
        回显信息示例:
Ruijie#show web-auth direct-host

        Returns:
{'1.1.1.1/Port': ''
'1.1.2.0/Port': ''
'Direct hosts': '2'
'1.1.2.0/ARP Binding': 'Off'
'1.1.1.1/Mask': '255.255.255.255'
'1.1.2.0/Mask': '255.255.255.0'
'1.1.1.1/ARP Binding': 'Off'
'Address_list': ['1.1.1.1'
'1.1.2.0']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show web-auth direct-host | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="Address"     #需要变参的地方
        col_len_list = []
        #创建字典
        dict_value3={}
        address_list = []

        table_2 = 0
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*web-auth direct-host.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        direct_arps_list = show_info_list_line[0].split(":")
        key_name = '%s' % (direct_arps_list[0])
        dict_value3[key_name]=direct_arps_list[1].replace(" ","").replace("\r","")
        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if "ARP Binding" in show_info_list_line[line_len_num]:              #***********
                table_1 = line_len_num
            if "Index" in show_info_list_line[line_len_num]:              #***********
                table_2 = line_len_num
        if table_2 != 0 :
            (whippletree_list_1,cut_del_1) = self.dut_show_autoget_whippletree(table_1,table_2,show_info_list_line)
            (whippletree_list_2,cut_del_2) = self.dut_show_autoget_whippletree(table_2,line_len,show_info_list_line)
            show_info_list_line.remove(show_info_list_line[cut_del_1])
            show_info_list_line.remove(show_info_list_line[cut_del_2-1])
            new_show_info_num = len(show_info_list_line)
            for line_len_num in range(0,new_show_info_num):
                if "ARP Binding" in show_info_list_line[line_len_num]:              #***********
                    table_3 = line_len_num
                if "Index" in show_info_list_line[line_len_num]:              #***********
                    table_4 = line_len_num
            dict_value1 = self.dut_show_autoget_form(table_3,table_4,"Address",whippletree_list_1,show_info_list_line)
            dict_value2 = self.dut_show_autoget_form(table_4,new_show_info_num,"Index",whippletree_list_2,show_info_list_line)
            dict_value =dict(dict_value1.items()+dict_value2.items()+dict_value3.items())
            return dict_value
        if table_2 == 0 :
            (whippletree_list_1,cut_del_1) = self.dut_show_autoget_whippletree(table_1,line_len,show_info_list_line)
            show_info_list_line.remove(show_info_list_line[cut_del_1])
            new_show_info_num = len(show_info_list_line)
            for line_len_num in range(0,new_show_info_num):
                if "ARP Binding" in show_info_list_line[line_len_num]:              #***********
                    table_3 = line_len_num
            dict_value1 = self.dut_show_autoget_form(table_3,new_show_info_num,"Address",whippletree_list_1,show_info_list_line)
            dict_value =dict(dict_value1.items()+dict_value3.items())
            return dict_value
    def dut_get_show_webauth_directsite(self, show_info):
        """
        Function:show web-auth direct-site回显解析函数
        CLI命令:show web-auth direct-site
        回显信息示例:
Ruijie#show web-auth direct-site 
Direct sites: 2
  Address         Mask            ARP Binding
  --------------- --------------- -----------
  10.0.0.1        255.255.255.255 On

        Returns:
{"10.0.0.1/Mask": "255.255.255.255"
"Direct sites": "2"
"10.0.0.1/ARP Binding": "On"
"Address_list": ["10.0.0.1"]}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show web-auth direct-site | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="Address"     #需要变参的地方
        col_len_list = []
        #创建字典
        dict_value3={}
        address_list = []

        table_2 = 0
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*web-auth direct-site.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        direct_arps_list = show_info_list_line[0].split(":")
        key_name = '%s' % (direct_arps_list[0])
        dict_value3[key_name]=direct_arps_list[1].replace(" ","").replace("\r","")
        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if "ARP Binding" in show_info_list_line[line_len_num]:              #***********
                table_1 = line_len_num
            if "Index" in show_info_list_line[line_len_num]:              #***********
                table_2 = line_len_num
        if table_2 != 0 :
            (whippletree_list_1,cut_del_1) = self.dut_show_autoget_whippletree(table_1,table_2,show_info_list_line)
            (whippletree_list_2,cut_del_2) = self.dut_show_autoget_whippletree(table_2,line_len,show_info_list_line)
            show_info_list_line.remove(show_info_list_line[cut_del_1])
            show_info_list_line.remove(show_info_list_line[cut_del_2-1])
            new_show_info_num = len(show_info_list_line)
            for line_len_num in range(0,new_show_info_num):
                if "ARP Binding" in show_info_list_line[line_len_num]:              #***********
                    table_3 = line_len_num
                if "Index" in show_info_list_line[line_len_num]:              #***********
                    table_4 = line_len_num
            dict_value1 = self.dut_show_autoget_form(table_3,table_4,"Address",whippletree_list_1,show_info_list_line)
            dict_value2 = self.dut_show_autoget_form(table_4,new_show_info_num,"Index",whippletree_list_2,show_info_list_line)
            dict_value =dict(dict_value1.items()+dict_value2.items()+dict_value3.items())
            return dict_value
        if table_2 == 0 :
            (whippletree_list_1,cut_del_1) = self.dut_show_autoget_whippletree(table_1,line_len,show_info_list_line)
            show_info_list_line.remove(show_info_list_line[cut_del_1])
            new_show_info_num = len(show_info_list_line)
            for line_len_num in range(0,new_show_info_num):
                if "ARP Binding" in show_info_list_line[line_len_num]:              #***********
                    table_3 = line_len_num
            dict_value1 = self.dut_show_autoget_form(table_3,new_show_info_num,"Address",whippletree_list_1,show_info_list_line)
            dict_value =dict(dict_value1.items()+dict_value3.items())
            return dict_value

    def dut_get_show_defend_word_drop(self,show_info):
        """
        Function:show defend (word) drop回显解析函数
        CLI命令:show defend (word) drop
        回显信息示例:
N18012_VSU_CMII(config)#show defend vfw drop
    Drop packet:               1389055
        Land:                  513983
        Fraggle:               51571  
        Icmp-unreachable:      1410
        Winnuke:               256896
        Other:                 539505
        Zone 'def1':           25690
    Drop flow:                 0

        Returns:
{"Land": "513983"
"Fraggle": "51571  "
"Winnuke": "256896"
"Zone 'def1'": "25690"
"Icmp-unreachable": "1410"
"Other": "539505"
"Drop flow": "0"
"Drop packet": "1389055"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show defend (word) drop | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*defend.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        #print show_info_list_line
        for list_value in show_info_list_line:
            list_value_split = list_value.split(":")
            key_name = '%s'%(list_value_split[0].lstrip().replace("\r",""))
            dict_value[key_name] = list_value_split[1].lstrip().replace("\r","")
        #print u"------》解析结果："
        #print dict_value
        return dict_value
    def dut_get_show_defendzone_word_word_counters(self,show_info):
        """
        Function:show defend-zone (word)(word) counter回显解析函数
        CLI命令:show defend-zone (word)(word) counter
        回显信息示例:
N18012_VSU_CMII(config)#show defend-zone vfw def1 counter
    Counters:                  31305315
        Received:              31260074
        Forwarded:             45241  
        Dropped(packets):      0
        Dropped(flows):        0
        Replied:              
    Dropped: 
        Black-list:            45241
        Rate-limit:            0
        Policy-drop(packets):  0
        Policy-drop(flows):    0  
        Session-limit:         0

        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show defend-zone (word)(word) counter | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*defend-zone.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        #print show_info_list_line
        for list_value in show_info_list_line:
            list_value_split = list_value.split(":")
            key_name = '%s'%(list_value_split[0].lstrip().replace("\r",""))
            dict_value[key_name] = list_value_split[1].lstrip().replace("\r","")
        ##print u"------》解析结果："
        ##print dict_value
        return dict_value
    def dut_get_show_securityzone_word_word(self,show_info):
        """
        Function:show security-zone (word)(word)回显解析函数
        CLI命令:show security-zone (word)(word)
        回显信息示例:
S86E(config)#show security-zone sec1 vfw
security-zone:sec1
description:
level:not defined
inner-zone access:off
ip access-group no defined

        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show security-zone (word)(word) | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*defend-zone.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        #print show_info_list_line
        for list_value in show_info_list_line:
            if re.match(".*:.*",list_value) :
                list_value_split = list_value.split (":")
                key_name = '%s'%(list_value_split[0].lstrip().replace("\r",""))
                dict_value[key_name] = list_value_split[1].lstrip().replace("\r","")
        ##print u"------》解析结果："
        ##print dict_value
        return dict_value
    def dut_get_show_ip_fpm_statistics(self,show_info):
        str_arg ="fpm statistics"
        return self.dut_get_show_info_analy_all_colon(show_info,str_arg)
    def dut_get_show_accesslists_summary(self,show_info):
        """
        Function:show access-lists summary回显解析函数
        CLI命令:show access-lists summary
        回显信息示例:
22(config)#show access-lists summary 

Total 4 access-lists configurated in system.
Total 7 rules configurated in system.
-------------------------------------------------
  acl id/name                        rule count
-------------------------------------------------
  1                                  4
  100                                0
  700                                2
  2699                               1

        Returns:
{"700": "2"
"1": "4"
"Total rules configurated": "7"
"2699": "1"
"100": "0"
"Total access-lists configurated": "4"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show access-lists summary | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value ={}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*access-lists summary.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for show_info_list_value in show_info_list_line:
            if re.match(".*-----.*",show_info_list_value) ==None :
                if show_info_list_value != "":
                    ##print show_info_list_value
                    if re.match(".*access-lists configurated.*",show_info_list_value):
                         acc_num = re.findall(r"\d+",show_info_list_value)[0]
                         key_name = "Total access-lists configurated"
                         dict_value[key_name] = acc_num
                    elif re.match(".*rules configurated.*",show_info_list_value):
                        rule_num = re.findall(r"\d+",show_info_list_value)[0]
                        key_name = "Total rules configurated"
                        dict_value[key_name] = rule_num
                    elif re.match(".*id/name.*",show_info_list_value):
                        pass
                    else:
                        list_line = show_info_list_value.split()
                        ##print list_line
                        if list_line != []:
                            key_name = list_line[0]
                            dict_value[key_name] = list_line[1]
        ##print dict_value
        return dict_value
    def dut_get_show_webauth_rdport(self,show_info):
        """
        Function:show web-auth rdport回显解析函数
        CLI命令:show web-auth rdport
        回显信息示例:
Ruijie#show web-auth rdport 
Rd-Port:
80 443

        Returns:
{"Rd-Port": "80 443"
"Rd-Port_num": "2"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show web-auth rdport | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value ={}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*web-auth rdport.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])

        show_info_line_str =  "".join(show_info_list_line)
        show_info_list_line = show_info_line_str.split(":")
        ##print show_info_list_line
        key_name = show_info_list_line[0].strip()
        dict_value[key_name] = show_info_list_line[1].strip()

        port_num = len(show_info_list_line [1].split())
        key_name = "Rd-Port_num"
        dict_value[key_name] = str(port_num).strip()

        ##print dict_value
        return dict_value
    def dut_get_show_firewallgroup(self,show_info):
        """
        Function:show firewall-group回显解析函数
        CLI命令:show firewall-group
        回显信息示例:
N18012_VSU_CMII(config)#show firewall-group
Group ID:1
Group Member:
  FW-Module:dev/slow 2/10; Status:Active, Normal
  FW-Module:dev/slow 1/9; Status:Active, Normal
Aggregateport ID:31
Failover Vlan ID:2
Mode: Active-Active
Bypass:Automatic
Traffic:traffic-in-firewall
Flow-lead Mode:normal mode

        Returns:
{"dev/slow 2/10/Status": "Active, Normal"
"dev/slow 1/9/Status": "Active, Normal"
"Aggregateport ID": "31"
"Failover Vlan ID": "2"
"Group ID": "1"
"Traffic": "traffic-in-firewall"
"Mode": "Active-Active"
"Bypass": "Automatic"
"Flow-lead Mode": "normal mode"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show firewall-group | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value ={}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*firewall-group.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])

        ##print show_info_list_line
        list_line = len(show_info_list_line)
        for i in range (list_line):
            ##print "********"
            if show_info_list_line[i] != "":
                if re.match(".*Group Member.*",show_info_list_line[i]):
                    pass
                elif re.match("^\s",show_info_list_line[i]) :
                    list_value = show_info_list_line[i]
                    list_value_list1 = re.split("[:;]",list_value)
                    ##print "456"
                    ##print list_value_list1
                    key_name1 = list_value_list1[1]
                    key_name2 = list_value_list1[2].lstrip()
                    key_name = "%s/%s"%(key_name1,key_name2)
                    dict_value[key_name] = list_value_list1[3]
                    #key_name = "%s/%s"%(key_name1,list_value_list2[0].lstrip())
                    #dict_value[key_name] = list_value_list2[1]
                    ##print key_name
                    ##print dict_value[key_name]
                else:
                    ##print "123"
                    ##print show_info_list_line[i]
                    if re.search(":",show_info_list_line[i]) != None :
                        list_value_list3 = show_info_list_line[i].split(":")
                        ##print list_value_list3
                        key_name = list_value_list3[0].lstrip()
                        dict_value[key_name] = list_value_list3[1].lstrip()
                    else:
                        pass
        ##print dict_value
        return dict_value

    #20180226
    def dut_get_show_directvlan(self,show_info):
        """
        Function:show direct-vlan回显解析函数
        CLI命令:show direct-vlan
        回显信息示例:
Ruijie#show direct-vlan
direct-vlan 1508-1608

Port       direct-vlan     
--------   ----------------
Gi1/2/18   direct-vlan 22

        Returns:
{'direct-vlan': '1508-1608'
'Port': 'direct-vlan'
'Gi1/2/18': 'direct-vlan'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show direct-vlan | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show direct-vlan.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for show_info_list_value in show_info_list_line:
            if re.match(".*-----.*", show_info_list_value) == None:
                if show_info_list_value.strip() != "" and "Port  " not in show_info_list_value:
                    if re.match("direct-vlan (.*)", show_info_list_value):
                        obj = re.match("direct-vlan (.*)", show_info_list_value)
                        dict_value["direct-vlan"] = obj.group(1).strip()
                        continue
                    list_line = re.split("\s{2,}", show_info_list_value)
                    key_name = list_line[0]
                    dict_value[key_name] = list_line[1]
        return dict_value
    def dut_get_show_aaa_methodlist(self,show_info):
        """
        Function:show aaa method-list回显解析函数
        CLI命令:show aaa method-list
        回显信息示例:
Ruijie#show aaa method-list 
Authentication method-list:
aaa authentication dot1x default group radius
aaa authentication web-auth default group radius
aaa authentication web-auth webv1 group radius
aaa authentication web-auth webv2 group radius
aaa authentication web-auth webv2-2 group radius

Accounting method-list:
aaa accounting network default start-stop group radius
aaa accounting network webv1 start-stop group radius
aaa accounting network webv2 start-stop group radius
aaa accounting network webv2-2 start-stop group radius

Authorization method-list:

        Returns:
{'Authentication method-list': ['aaa authentication dot1x default group radius'
'aaa authentication web-auth default group radius'
'aaa authentication web-auth webv1 group radius'
'aaa authentication web-auth webv2 group radius'
'aaa authentication web-auth webv2-2 group radius'], 'Accounting method-list': ['aaa accounting network default start-stop group radius'
'aaa accounting network webv1 start-stop group radius'
'aaa accounting network webv2 start-stop group radius'
'aaa accounting network webv2-2 start-stop group radius'], 'Authorization method-list': ''}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show aaa method-list | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value ={}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*aaa method-list.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        show_info_str = "\n".join(show_info_list_line)
        show_info_str_list = show_info_str.split("\n\n")
        for show_info_str_list_value in show_info_str_list:
            str_list_value_list = show_info_str_list_value.split(":")
            key_name = str_list_value_list[0].replace("\n","")
            if str_list_value_list[1] != "" :
                dict_value_list = []
                dict_value_list= str_list_value_list[1].split("\n")
                for i in dict_value_list:
                    if '' in dict_value_list:
                        dict_value_list.remove('')
                dict_value[key_name] = dict_value_list
            else:
                dict_value[key_name]= str_list_value_list[1]

        return dict_value
    def dut_get_show_arp_static(self,show_info):
        """
        Function:show arp static回显解析函数
        CLI命令:show arp static
        回显信息示例:
Ruijie#show arp static  
Protocol  Address          Age(min)  Hardware        Type   Interface                Origin      
Internet  5.0.0.2          <static>  e005.c5ef.e20d  arpa   VLAN 1600                Authentication
 1  static arp entries exist.

        Returns:
{'5.0.0.2/Protocol': 'Internet'
'static arp entries exist.': '1'
'5.0.0.2/Age(min)': '<static>'
'5.0.0.2/Interface': 'VLAN 1600'
'5.0.0.2/Origin': 'Authentication'
'5.0.0.2/Type': 'arpa'
'5.0.0.2/Hardware': 'e005.c5ef.e20d'
'Address_list': ['5.0.0.2']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show arp static | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        rol_title_list = []
        rol_title_list_name ="Address_list"
        title_valeu = "Address"

        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show arp static.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        ##print show_info_list_line


        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')

        col_value_list_last = re.split(r'\s{2,}', show_info_list_line[-1])
        key_name = col_value_list_last[1]
        dict_value[key_name] = col_value_list_last[0].lstrip()
        show_info_list_line.pop(-1)

        for show_info_list_value in show_info_list_line :
            ##print show_info_list_value
            col_value_list = re.split(r'\s{2,}', show_info_list_value)
            ##print col_value_list
            title_col = col_value_list[1]           #*****
            if title_valeu in col_value_list :
                ##print u"000"
                ##print col_value_list
                title_row = col_value_list
                ##print title_row
            else:
                if col_value_list != "":
                    rol_title_list.append(title_col)
                    for s in range (2,len(col_value_list)):           #*****
                        key_name = '%s/%s'%(title_col,title_row[s])
                        dict_value[key_name]=col_value_list[s]
                    key_name = '%s/%s' % (title_col, title_row[0])
                    dict_value[key_name]=col_value_list[0]
        dict_value[rol_title_list_name] = rol_title_list
        return  dict_value
    def dut_get_show_version_slot(self,show_info):
        """
        Function:show version slot回显解析函数
        CLI命令:show version slot
        回显信息示例:
Ruijie#show version slot
  Dev Slot Port Configured Module            Online Module                Software Status
  --- ---- ---- ---------------------------- ---------------------------- ---------------
  1   1    48   M8600E-24GT20SFP4XS-ED       M8600E-24GT20SFP4XS-ED       ok             
  1   2    44   M8600E-24XS4QXS-DC           M8600E-24XS4QXS-DC           ok             
  1   3    24   M8600E-24GT/8SFP-EB          M8600E-24GT/8SFP-EB          ok             
  1   M1   0    N/A                          M8600E-CM                    master         
  1   M2   0    N/A                          none                         none           
  2   1    48   M8600E-24GT20SFP4XS-ED       M8600E-24GT20SFP4XS-ED       ok             
  2   2    0    none                         none                         none           
  2   3    0    none                         none                         none           
  2   M1   0    N/A                          M18010-CM                    backup         
  2   M2   0    N/A                          none                         cannot startup 
Ruijie#

        Returns:
{'1/Port': '48'
'M1/Software Status': 'backup'
'2/Software Status': 'none'
'2/Port': '0'
'2/Dev': '2'
'Slot_list': ['1'
'2'
'3'
'M1'
'M2'
'1'
'2'
'3'
'M1'
'M2'], '1/Configured Module': 'M8600E-24GT20SFP4XS-ED'
'1/Online Module': 'M8600E-24GT20SFP4XS-ED'
'M2/Software Status': 'cannot startup'
'2/Configured Module': 'none'
'M2/Configured Module': 'N/A'
'M1/Dev': '2'
'3/Port': '0'
'M2/Online Module': 'none'
'3/Online Module': 'none'
'M1/Online Module': 'M18010-CM'
'M1/Configured Module': 'N/A'
'3/Software Status': 'none'
'M2/Port': '0'
'M1/Port': '0'
'M2/Dev': '2'
'3/Configured Module': 'none'
'1/Software Status': 'ok'
'1/Dev': '2'
'Slot_ok': ['1'
'2'
'3'
'M1'
'1'
'M1'
'M2'], '3/Dev': '2'
'2/Online Module': 'none'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show version slot | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="Slot"     #需要变参的地方
        col_len_list = []
        #创建字典
        dict_value={}
        address_list = []
        slot_list_ok = []

        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show version slot.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        ##print show_info_list_line

        cut_flag = 0
        for cut_value in show_info_list_line :
            cut_flag = cut_flag+1
            if cut_value != "":
                if re.match(".*---.*",cut_value) :
                    cut_del = cut_flag
                    cut_value_list = cut_value.split()
                    col_len_list = []
                    for cut_value_list_value in cut_value_list:
                        col_len_list.append(len(cut_value_list_value)+1)
        #将最后一位设成固定32位
        ##print col_len_list[0]
        col_len_list[0] = col_len_list[0] + 1
        col_len_list.pop(-1)
        col_len_list.append(32)

        show_info_list_line.remove(show_info_list_line[cut_del-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')

        #列宽
        #col_len_list = [9,17,15,11]         #需要变参的地方
        col_list_all_num = len(col_len_list)
        row_list_all_num = len(show_info_list_line)
        ##print col_list_all_num
        ##print row_list_all_num

        title_row =[]
        #for i in range(row_list_all_num):
        #    dut_info_split[i].lstrip()
        for i in range(0,row_list_all_num):
            cut_star = 0
            cut_end=0
            col_value_list = []
            show_info_list_line[i] = show_info_list_line[i]
            ##print u"每行"
            ##print show_info_list_line[i]
            if show_info_list_line[i] != "" :
                for j in range(col_list_all_num):
                    cut_end = cut_end+int(col_len_list[j])
                    ##print u"qie end-----"
                    ##print cut_end
                    col_value = show_info_list_line[i][cut_star:cut_end]
                    ##print col_value
                    cut_star = cut_end
                    ##print cut_star
                    col_value = col_value.lstrip()
                    col_value = col_value.rstrip()
                    col_value_list.append(col_value)
                #获取表头的列，用于组合
                ##print u"biaotou "
                ##print col_value_list
                title_col = col_value_list[1]          #需要变参的地方
                ##print title_col
                if title_col==value_title:
                    title_row = col_value_list
                elif title_col!=value_title:
                    #生成字典
                    address_list.append(title_col)
                    if col_value_list[-1].strip() != "none":
                        #print title_row[-1].strip()
                        slot_list_ok.append(title_col)
                    #遍历列头右边的值
                    for s in range(2,col_list_all_num):  #需要变参的地方
                        #key_name = '%s/%s' % (title_col,title_row[s])
                        key_name = '%s/%s'%(title_col,title_row[s])
                        dict_value[key_name]=col_value_list[s]
                    ##遍历列头右边的值
                    key_name = '%s/%s' % (title_col, title_row[0])
                    dict_value[key_name]=col_value_list[0]
                dict_value["Slot_list"]=address_list
                dict_value["Slot_ok"]=slot_list_ok
        return dict_value
    def dut_get_show_mac(self,show_info):
        """
        Function:show mac回显解析函数
        CLI命令:show mac
        回显信息示例:
Ruijie#show mac
Vlan        MAC Address          Type     Interface
----------  -------------------- -------- -------------------
   1        001a.a917.ffff       DYNAMIC  GigabitEthernet 2/2/11     
   1        001a.a97f.5a1c       DYNAMIC  GigabitEthernet 2/2/11     
   1        00d0.f822.33cd       DYNAMIC  GigabitEthernet 2/2/13     
1600        e005.c5ef.e20d       OTHER    GigabitEthernet 2/2/17     
2222        001a.a9bf.a47f       DYNAMIC  GigabitEthernet 2/2/23

        Returns:
{'001a.a917.ffff/Interface': 'GigabitEthernet 2/2/11'
'00d0.f822.33cd/Vlan': '1'
'001a.a97f.5a1c/Interface': 'GigabitEthernet 2/2/11'
'001a.a917.ffff/Type': 'DYNAMIC'
'00d0.f822.33cd/Interface': 'GigabitEthernet 2/2/13'
'00d0.f822.33cd/Type': 'DYNAMIC'
'e005.c5ef.e20d/Interface': 'GigabitEthernet 2/2/17'
'001a.a97f.5a1c/Type': 'DYNAMIC'
'MAC Address_list': ['001a.a917.ffff'
'001a.a97f.5a1c'
'00d0.f822.33cd'
'e005.c5ef.e20d'
'001a.a9bf.a47f'], 'e005.c5ef.e20d/Vlan': '1600'
'001a.a9bf.a47f/Interface': 'GigabitEthernet 2/2/23'
'001a.a97f.5a1c/Vlan': '1'
'001a.a9bf.a47f/Type': 'DYNAMIC'
'001a.a9bf.a47f/Vlan': '2222'
'e005.c5ef.e20d/Type': 'OTHER'
'001a.a917.ffff/Vlan': '1'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mac | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="MAC Address"     #需要变参的地方
        col_len_list = []
        #创建字典
        dict_value={}
        address_list = []
        show_info_list_line = show_info.split("\n")

        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show mac.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        ##print show_info_list_line

        cut_flag = 0
        for cut_value in show_info_list_line :
            cut_flag = cut_flag+1
            if cut_value != "":
                if re.match(".*---.*",cut_value) :
                    cut_del = cut_flag
                    cut_value_list = cut_value.split()
                    col_len_list = []
                    for cut_value_list_value in cut_value_list:
                        col_len_list.append(len(cut_value_list_value)+1)
        #将最后一位设成固定32位
        ##print col_len_list[0]
        col_len_list[0] = col_len_list[0] +1
        col_len_list.pop(-1)
        col_len_list.append(32)
        show_info_list_line.remove(show_info_list_line[cut_del-1])
        ##print u"分片"
        ##print col_len_list
        ##print show_info_list_line
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        #列宽
        #col_len_list = [9,17,15,11]         #需要变参的地方
        col_list_all_num = len(col_len_list)
        row_list_all_num = len(show_info_list_line)
        ##print col_list_all_num
        ##print row_list_all_num

        title_row =[]
        #for i in range(row_list_all_num):
        #    dut_info_split[i].lstrip()
        for i in range(0,row_list_all_num):
            cut_star = 0
            cut_end=0
            col_value_list = []
            show_info_list_line[i] = show_info_list_line[i]
            ##print u"每行"
            ##print show_info_list_line[i]
            if show_info_list_line[i] != "" :
                for j in range(col_list_all_num):
                    cut_end = cut_end+int(col_len_list[j])
                    ##print u"qie end-----"
                    ##print cut_end
                    col_value = show_info_list_line[i][cut_star:cut_end]
                    ##print col_value
                    cut_star = cut_end
                    ##print cut_star
                    col_value = col_value.lstrip()
                    col_value = col_value.rstrip()
                    col_value_list.append(col_value)
                #获取表头的列，用于组合
                ##print u"biaotou "
                ##print col_value_list
                title_col = col_value_list[1]          #需要变参的地方
                ##print title_col
                if title_col==value_title:
                    title_row = col_value_list
                    ##print "12313131"
                    ##print title_row
                elif title_col!=value_title:
                    #生成字典
                    address_list.append(title_col)
                    #遍历列头右边的值
                    for s in range(2,col_list_all_num):  #需要变参的地方
                        #key_name = '%s/%s' % (title_col,title_row[s])
                        key_name = '%s/%s'%(title_col,title_row[s])
                        dict_value[key_name]=col_value_list[s]
                    ##遍历列头右边的值
                    key_name = '%s/%s' % (title_col, title_row[0])
                    dict_value[key_name]=col_value_list[0]
                dict_value["MAC Address_list"]=address_list
        return  dict_value
    #20180305
    def dut_get_show_macaddresstable_count(self,show_info):
        """
        Function:show mac-address-table count回显解析函数
        CLI命令:show mac-address-table count
        回显信息示例:
5848VAC#show mac-address-table count 
Dynamic Address Count  : 11
Static  Address Count  : 0
Filtering Address Count: 0
Other   Address Count  : 0
Total Mac Addresses    : 11
Total Mac Address Space Available: 524277

        Returns:
{'Total Mac Address Space Available': '524277'
'Dynamic Address Count': '11'
'Other Address Count': '0'
'Total Mac Addresses': '11'
'Filtering Address Count': '0'
'Static Address Count': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mac-address-table count | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        str_arg = "mac-address-table count"
        dict_value={}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        line_len = len (show_info_list_line)
        for i in range (line_len):
            if re.match(r'.*Dot1q Address Count',show_info_list_line[i]):
                type=1
                break
            else:
                type=2
        if type==2:
            dict_value = {}
            for list_value in show_info_list_line:
                if re.match(".*:.*", list_value):
                    list_value_split = list_value.split(":", 1)  # 以冒号分割一次
                    key_name = '%s' % (" ".join(list_value_split[0].strip().replace("\r", "").split()))
                    dict_value[key_name] = list_value_split[1].lstrip().rstrip().replace("\r", "")
            return dict_value
        if type==1:
            for i in range (line_len):
                if re.match(r'.*:.*',show_info_list_line[i]):
                    if re.match(r'^(\w+.*Address.*)',show_info_list_line[i]):
                        matchObj=re.match(r'^(\w+.*Address.*):\s(\d+)',show_info_list_line[i])
                        key=matchObj.group(1).strip()
                        dict_value[key]=matchObj.group(2).strip()
                    else:
                        matchObj=re.match(r'^(.*):\s(\d+)',show_info_list_line[i])
                        dict_value[key+'/'+matchObj.group(1).strip()]=matchObj.group(2).strip()
            return dict_value
    def dut_get_show_dot1x(self,show_info):
        """
        Function:show dot1x回显解析函数
        CLI命令:show dot1x
        回显信息示例:
Ruijie(config)#show dot1x         

802.1X basic information:
  802.1X Status ......................... enable
  Authentication Mode ................... eap
  Authorization mode .................... disable
  Total User Number ..................... 0 (exclude dynamic user)
  Authenticated User Number ............. 0 (exclude dynamic user)
  Dynamic User Number ................... 0
  Re-authentication ..................... disable
  Re-authentication Period .............. 3600 seconds
  Re-authentication max ................. 3 times
  Quiet Period .......................... 10 seconds
  Tx Period ............................. 3 seconds
  Supplicant Timeout .................... 3 seconds
  Server Timeout ........................ 5 seconds
  Maximum Request ....................... 3 times
  Client Online Probe ................... disable
  Eapol Tag ............................. disable
  802.1x redirect ....................... disable
  Private supplicant only ............... disable

        Returns:
{'Supplicant Timeout': '3'
'Eapol Tag': 'disable'
'Authentication Mode': 'eap'
'Total User Number': '0'
'Dynamic User Number': '0'
'Private supplicant only': 'disable'
'Authorization mode': 'disable'
'Quiet Period': '10'
'Re-authentication': 'disable'
'Maximum Request': '3'
'Re-authentication Period': '3600'
'Authenticated User Number': '0'
'802.1x redirect': 'disable'
'Tx Period': '3'
'802.1X Status': 'enable'
'Client Online Probe': 'disable'
'Server Timeout': '5'
'Re-authentication max': '3'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show dot1x | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        if re.match(r'.*basic\sinformation.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        line_len = len (show_info_list_line)
        for i in range (line_len):
            if re.match(".*\.\.\.*",show_info_list_line[i]) :
                list_value_split = show_info_list_line[i].split("...",1)
                key_value=list_value_split[1].strip('.').strip().replace("\r","")
                key_value=key_value.split(' ',1)
                key_name = '%s'%(list_value_split[0]).strip().replace("\r","")
                dict_value[key_name] = key_value[0].strip().replace("\r","")
        return dict_value
    def dut_get_show_arp_counter(self,show_info):
        """
        Function:show arp counter回显解析函数
        CLI命令:show arp counter
        回显信息示例:
lyq5848VAC#show arp counter 
ARP Limit:                262144
Count of static entries:  0
Count of dynamic entries: 1 (complete: 0  incomplete: 1)
Total:                    1
lyq5848VAC#

        Returns:
{'Count of dynamic entries': '1'
'complete': '0'
'ARP Limit': '262144'
'Count of static entries': '0'
'Total': '1'
'incomplete': '1'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show arp counter | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show arp counter.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        ##print show_info_list_line
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        for list_value in show_info_list_line:
            if "(" in list_value :
                list_value_split = list_value.split ("(")
                for list_value_split_value in list_value_split:
                    if ")" in list_value_split_value:
                        list_2 = re.split(r'\s{2,}',list_value_split_value)
                        for list_2_value in list_2:
                            if re.match(".*:.*",list_2_value) :
                                list_3 = list_2_value.replace(")","").split (":",1)
                                ##print list_3[0],list_3[1]
                            key_name = '%s'%(list_3[0].lstrip().rstrip().replace("\r",""))
                            dict_value[key_name] = list_3[1].lstrip().rstrip().replace("\r","")
                    else:
                        if re.match(".*:.*",list_value_split_value) :
                            list_value_split = list_value_split_value.split (":",1)   #以冒号分割一次
                            key_name = '%s'%(list_value_split[0].lstrip().rstrip().replace("\r",""))
                            dict_value[key_name] = list_value_split[1].lstrip().rstrip().replace("\r","")
            else :
                if re.match(".*:.*",list_value) :
                    list_value_split = list_value.split (":",1)   #以冒号分割一次
                    key_name = '%s'%(list_value_split[0].lstrip().rstrip().replace("\r",""))
                    dict_value[key_name] = list_value_split[1].lstrip().rstrip().replace("\r","")
        return dict_value
    def dut_get_show_apconfig_summary(self,show_info):
        """
        Function:show ap-config summary回显解析函数
        CLI命令:show ap-config summary
        回显信息示例:
AC1_5708#show ap-config summary 
========= show ap status =========
Radio: Radio ID or Band: 2.4G = 1#, 5G = 2#
       E = enabled, D = disabled, N = Not exist, V = Virtual AP
       Current Sta number
       Channel: * = Global
       Power Level = Percent

Online AP number: 2
Offline AP number: 4

AP Name                                  IP Address      Mac Address    Radio               Radio               Up/Off time   State
---------------------------------------- --------------- -------------- ------------------- ------------------- ------------- -----
AP1-520-Limin                            13.0.3.4        5869.6c24.017f 1  E   4    1*  100 2  E   0  149*  100   18:19:17:29 Run
AP2-740                                  13.0.3.3        5869.6c7a.685e 1  E   0   11*  100 2  E   0  165*  100   18:19:17:33 Run
                                                                        3  E   0  165*  100 4  N   -    -     -
AP3-740                                        -         00d0.f822.3344 1  N   -    -     - 2  N   -    -     -   18:19:31:35 Quit
AP730-DR                                       -         0003.7f11.2cab 1  N   -    -     - 2  N   -    -     -   18:19:31:35 Quit
AP740-oy                                       -         5869.6c88.6833 1  N   -    -     - 2  N   -    -     -   18:19:31:35 Quit
AP9-730-TR                                     -         00d0.f822.33b6 1  N   -    -     - 2  N   -    -     -   18:19:31:35 Quit

        Returns:
{'00d0.f822.33b6/Radio': '2  N   -    -     -'
'0003.7f11.2cab/State': 'Quit'
'5869.6c7a.685e/Up/Off time': '18:19:17:33'
'5869.6c24.017f/Radio': '2  E   0  149*  100'
'5869.6c7a.685e/IP Address': '13.0.3.3'
'5869.6c24.017f/State': 'Run'
'00d0.f822.3344/Up/Off time': '18:19:31:35'
'5869.6c88.6833/Radio': '2  N   -    -     -'
'5869.6c88.6833/State': 'Quit'
'5869.6c7a.685e/State': 'Run'
'5869.6c24.017f/Up/Off time': '18:19:17:29'
'0003.7f11.2cab/IP Address': '-'
'5869.6c88.6833/IP Address': '-'
'00d0.f822.3344/State': 'Quit'
'5869.6c88.6833/Up/Off time': '18:19:31:35'
'00d0.f822.33b6/Up/Off time': '18:19:31:35'
'5869.6c7a.685e/AP Name': 'AP2-740'
'Offline AP number': '4'
'00d0.f822.3344/AP Name': 'AP3-740'
'0003.7f11.2cab/Radio': '2  N   -    -     -'
'0003.7f11.2cab/AP Name': 'AP730-DR'
'5869.6c24.017f/AP Name': 'AP1-520-Limin'
'0003.7f11.2cab/Up/Off time': '18:19:31:35'
'00d0.f822.3344/IP Address': '-'
'00d0.f822.33b6/State': 'Quit'
'5869.6c7a.685e/Radio': '2  E   0  165*  100'
'5869.6c24.017f/IP Address': '13.0.3.4'
'Online AP number': '2'
'00d0.f822.3344/Radio': '2  N   -    -     -'
'5869.6c88.6833/AP Name': 'AP740-oy'
'00d0.f822.33b6/AP Name': 'AP9-730-TR'
'00d0.f822.33b6/IP Address': '-'
'mac_list': ['5869.6c24.017f'
'5869.6c7a.685e'
'00d0.f822.3344'
'0003.7f11.2cab'
'5869.6c88.6833'
'00d0.f822.33b6']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ap-config summary | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*ap-config summary.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')

        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if "Online AP number" in show_info_list_line[line_len_num]:              #***********
                Total_Sta_num = line_len_num
                list_1 = show_info_list_line[line_len_num].split(":")
                key_name = '%s'%list_1[0].lstrip().rstrip()
                dict_value[key_name] = '%s'%list_1[1].lstrip().rstrip()
            if "Offline AP number" in show_info_list_line[line_len_num]:              #***********
                Offline_num = line_len_num
                list_1 = show_info_list_line[line_len_num].split(":")
                key_name = '%s'%list_1[0].lstrip().rstrip()
                dict_value[key_name] = '%s'%list_1[1].lstrip().rstrip()


        cut_flag = 0
        for cut_value in show_info_list_line :
            cut_flag = cut_flag+1
            if cut_value != "":
                if re.match(".*---.*",cut_value) :
                    cut_del = cut_flag
                    cut_value_list = cut_value.split()
                    col_len_list = []
                    for cut_value_list_value in cut_value_list:
                        col_len_list.append(len(cut_value_list_value)+1)
        show_info_list_line.remove(show_info_list_line[cut_del-1])

        ##print col_len_list
        col_list_all_num = len(col_len_list)
        row_list_all_num = len(show_info_list_line)
        ##print col_list_all_num
        ##print row_list_all_num

        value_title="Mac Address"
        address_list = []
        title_row =[]

        for i in range (Offline_num+1,line_len-1):    #line_len-1:remove了一行
            ##print show_info_list_line[i]
            cut_star = 0
            cut_end=0
            col_value_list = []
            show_info_list_line[i] = show_info_list_line[i].lstrip()
            ##print show_info_list_line[i]
            if show_info_list_line[i] != "" :
                for j in range(col_list_all_num):
                    cut_end = cut_end+int(col_len_list[j])
                    col_value = show_info_list_line[i][cut_star:cut_end]
                    cut_star = cut_end
                    col_value = col_value.lstrip()
                    col_value = col_value.rstrip()
                    col_value_list.append(col_value)
                #获取表头的列，用于组合
                ##print col_value_list
                title_col = col_value_list[2]          #需要变参的地方
                if title_col==value_title:
                    title_row = col_value_list
                elif title_col!=value_title:
                    if title_col != "":                 #除掉列表中Mac Address为空的行
                        #生成字典
                        address_list.append(title_col)
                        #遍历列头右边的值
                        for s in range(3,col_list_all_num):  #需要变参的地方
                            #key_name = '%s/%s' % (title_col,title_row[s])
                            key_name = '%s/%s'%(title_col,title_row[s])
                            dict_value[key_name]=col_value_list[s]
                        ##遍历列头右边的值
                        for s in range(0,2):  #需要变参的地方
                            #key_name = '%s/%s' % (title_col,title_row[s])
                            key_name = '%s/%s'%(title_col,title_row[s])
                            dict_value[key_name]=col_value_list[s]
                dict_value["mac_list"]=address_list
        return dict_value
    def dut_get_show_acconfig_client(self,show_info):
        """
        Function:show ac-config client回显解析函数
        CLI命令:show ac-config client
        回显信息示例:
AC1_5708#show ac-config client
========= show sta status =========
AP    : ap name/radio id
Status: Speed/Power Save/Work Mode/Roaming State/MU MIMO, E = enable power save, D = disable power save

Total Sta Num : 4
STA MAC        IPV4 Address    AP                                       Wlan Vlan Status          Asso Auth       Net Auth        Up time     
-------------- --------------- ---------------------------------------- ---- ---- --------------- --------------- --------------- ------------
0001.0000.0001 17.1.0.2        AP1-520-Limin/1                          101  101     1.0M/D/bgn   OPEN            WEB               0:00:25:12
0810.7a0a.4794 17.3.0.1        AP1-520-Limin/1                          103  103    58.5M/D/bgn   OPEN            WEB               1:05:11:33
d85d.4c7e.cb52 17.5.0.2        AP1-520-Limin/1                          105  105    58.5M/D/bgn   OPEN            WEB               0:00:45:55
ec17.2fcd.f775 17.5.0.1        AP1-520-Limin/1                          105  105    78.0M/D/bgn   OPEN            WEB               4:04:43:26

        Returns:
{'ec17.2fcd.f775/Net Auth': 'WEB'
'0001.0000.0001/Asso Auth': 'OPEN'
'0810.7a0a.4794/Asso Auth': 'OPEN'
'0001.0000.0001/IPV4 Address': '17.1.0.2'
'0001.0000.0001/Wlan': '101'
'ec17.2fcd.f775/AP': 'AP1-520-Limin/1'
'ec17.2fcd.f775/Status': '78.0M/D/bgn'
'd85d.4c7e.cb52/Asso Auth': 'OPEN'
'ec17.2fcd.f775/Wlan': '105'
'ec17.2fcd.f775/Asso Auth': 'OPEN'
'ec17.2fcd.f775/IPV4 Address': '17.5.0.1'
'd85d.4c7e.cb52/Up time': '0:00:45:55'
'0810.7a0a.4794/Status': '58.5M/D/bgn'
'd85d.4c7e.cb52/Status': '58.5M/D/bgn'
'0001.0000.0001/AP': 'AP1-520-Limin/1'
'0001.0000.0001/Net Auth': 'WEB'
'ec17.2fcd.f775/Up time': '4:04:43:26'
'0810.7a0a.4794/IPV4 Address': '17.3.0.1'
'0810.7a0a.4794/Wlan': '103'
'd85d.4c7e.cb52/Vlan': '105'
'Total Sta Num': '4'
'0001.0000.0001/Status': '1.0M/D/bgn'
'd85d.4c7e.cb52/Wlan': '105'
'0001.0000.0001/Vlan': '101'
'ec17.2fcd.f775/Vlan': '105'
'd85d.4c7e.cb52/IPV4 Address': '17.5.0.2'
'0810.7a0a.4794/Vlan': '103'
'MAC_list': ['0001.0000.0001'
'0810.7a0a.4794'
'd85d.4c7e.cb52'
'ec17.2fcd.f775'], '0810.7a0a.4794/Net Auth': 'WEB'
'd85d.4c7e.cb52/Net Auth': 'WEB'
'0001.0000.0001/Up time': '0:00:25:12'
'd85d.4c7e.cb52/AP': 'AP1-520-Limin/1'
'0810.7a0a.4794/AP': 'AP1-520-Limin/1'
'0810.7a0a.4794/Up time': '1:05:11:33'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ac-config client | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*ac-config client.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')

        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if "Total Sta Num" in show_info_list_line[line_len_num]:
                Total_Sta_num = line_len_num
                list_1 = show_info_list_line[line_len_num].split(":")
                key_name = '%s'%list_1[0].lstrip().rstrip()
                dict_value[key_name] = '%s'%list_1[1].lstrip().rstrip()
            if "Backup Sta Num" in show_info_list_line[line_len_num]:
                Total_Sta_num = line_len_num
                list_1 = show_info_list_line[line_len_num].split(":")
                key_name = '%s'%list_1[0].lstrip().rstrip()
                dict_value[key_name] = '%s'%list_1[1].lstrip().rstrip()

        cut_flag = 0
        for cut_value in show_info_list_line :
            cut_flag = cut_flag+1
            if cut_value != "":
                if re.match(".*---.*",cut_value) :
                    cut_del = cut_flag
                    cut_value_list = cut_value.split()
                    col_len_list = []
                    for cut_value_list_value in cut_value_list:
                        col_len_list.append(len(cut_value_list_value)+1)
        show_info_list_line.remove(show_info_list_line[cut_del-1])

        ##print col_len_list
        col_list_all_num = len(col_len_list)
        row_list_all_num = len(show_info_list_line)
        ##print col_list_all_num
        ##print row_list_all_num

        value_title="STA MAC"
        address_list = []
        title_row =[]

        for i in range (Total_Sta_num+1,line_len-1):    #line_len-1:remove了一行
            ##print show_info_list_line[i]
            cut_star = 0
            cut_end=0
            col_value_list = []
            show_info_list_line[i] = show_info_list_line[i].lstrip()
            ##print show_info_list_line[i]
            if show_info_list_line[i] != "" :
                for j in range(col_list_all_num):
                    cut_end = cut_end+int(col_len_list[j])
                    col_value = show_info_list_line[i][cut_star:cut_end]
                    cut_star = cut_end
                    col_value = col_value.lstrip()
                    col_value = col_value.rstrip()
                    col_value_list.append(col_value)
                #获取表头的列，用于组合
                ##print col_value_list
                title_col = col_value_list[0]          #需要变参的地方
                if title_col==value_title:
                    title_row = col_value_list
                elif title_col!=value_title:
                    #生成字典
                    address_list.append(title_col)
                    #遍历列头右边的值
                    for s in range(1,col_list_all_num):  #需要变参的地方
                        #key_name = '%s/%s' % (title_col,title_row[s])
                        key_name = '%s/%s'%(title_col,title_row[s])
                        dict_value[key_name]=col_value_list[s]
                    ##遍历列头右边的值
                dict_value["MAC_list"]=address_list
        ##print dict_value
        return dict_value
    def dut_get_show_ip_dhcp_binding_ip(self,show_info):
        """
        Function:show ip dhcp binding x.x.x.x回显解析函数
        CLI命令:show ip dhcp binding x.x.x.x
        回显信息示例:
11_0PJ56#show ip dhcp binding 2.0.1.2
IP address        Hardware address       Lease expiration            Type
2.0.1.2           0000.779f.bf96         000 days 23 hours 59 mins   Solidify

        Returns:
{"0000.779f.bf96/Type": "Solidify"
"0000.779f.bf96/IP address": "2.0.1.2"
"mac_list": ["0000.779f.bf96"], "0000.779f.bf96/Lease expiration": "000 days 23 hours 59 mins"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip dhcp binding x.x.x.x | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="Hardware address"     #需要变参的地方
        col_len_list = []
        #创建字典
        dict_value={}
        rol_title_list = []
        title_row =[]

        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show ip dhcp bind.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])

        length = len(show_info_list_line)
        #for i in range(length):
        #    if "System Name" in show_info_list_line[i] :
        #        label_i= i
        for k in range(0,length):
            col_value_list = re.split(r'\s{2,}', show_info_list_line[k])
            title_col = col_value_list[1]           #*****
            if value_title in col_value_list :
                title_row = col_value_list
            else:
                if col_value_list != "":
                    rol_title_list.append(title_col)
                    for s in range (2,len(col_value_list)):           #*****
                        key_name = '%s/%s'%(title_col,title_row[s])
                        dict_value[key_name]=col_value_list[s]
                    key_name = '%s/%s' % (title_col, title_row[0])
                    dict_value[key_name]=col_value_list[0]
        dict_value["mac_list"] = rol_title_list
        return dict_value
    def dut_get_show_ip_dhcp_binding(self,show_info):
        """
        Function:show ip dhcp binding回显解析函数
        CLI命令:show ip dhcp binding
        回显信息示例:
show ip dhcp binding 

Total number of clients   : 3
Expired clients           : 0
Running clients           : 3

IP address        Hardware address       Lease expiration            Type

        Returns:
{'Expired clients': '0'
'Running clients': '3'
'mac_list': [], 'Total number of clients': '3'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip dhcp binding | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="IP address"     #需要变参的地方
        col_len_list = []
        #创建字典
        dict_value={}
        rol_title_list = []
        title_row =[]

        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show ip dhcp bind.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')

        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if "Total number of clients" in show_info_list_line[line_len_num]:              #***********
                list_1 = show_info_list_line[line_len_num].split(":")
                key_name = '%s'%list_1[0].lstrip().rstrip()
                dict_value[key_name] = '%s'%list_1[1].lstrip().rstrip()
            if "Expired clients" in show_info_list_line[line_len_num]:              #***********
                list_1 = show_info_list_line[line_len_num].split(":")
                key_name = '%s'%list_1[0].lstrip().rstrip()
                dict_value[key_name] = '%s'%list_1[1].lstrip().rstrip()
            if "Running clients" in show_info_list_line[line_len_num]:              #***********
                end_num = line_len_num
                list_1 = show_info_list_line[line_len_num].split(":")
                key_name = '%s'%list_1[0].lstrip().rstrip()
                dict_value[key_name] = '%s'%list_1[1].lstrip().rstrip()

        #for i in range(length):
        #    if "System Name" in show_info_list_line[i] :
        #        label_i= i
        for k in range(end_num+1,line_len):
            col_value_list = re.split(r'\s{3,}', show_info_list_line[k])
            title_col = col_value_list[1]           #*****
            if value_title in col_value_list :
                title_row = col_value_list
            else:
                if col_value_list != "":
                    rol_title_list.append(title_col)
                    for s in range (2,len(col_value_list)):           #*****
                        key_name = '%s/%s'%(title_col,title_row[s])
                        dict_value[key_name]=col_value_list[s]
                    key_name = '%s/%s' % (title_col, title_row[0])
                    dict_value[key_name]=col_value_list[0]
        dict_value["mac_list"] = rol_title_list
        return dict_value
    def dut_get_show_ip_dhcp_snooping_binding(self,show_info):
        """
        Function:show ip dhcp snooping binding回显解析函数
        CLI命令:show ip dhcp snooping binding
        回显信息示例:
11_0PJ56#show ip dhcp snooping binding 

Total number of bindings: 1 

NO.   MACADDRESS         IPADDRESS       LEASE(SEC)   TYPE          VLAN  INNER-VLAN VXLAN    INTERFACE
----- ------------------ --------------- ------------ ------------- ----- ---------- -------- --------------------
1     0010.9400.0033     2.0.0.5         34           DHCP-Snooping 8     0          0        GigabitEthernet 1/5/19

        Returns:
{'0010.9400.0033/NO.': '1'
'mac_list': ['0010.9400.0033'], '0010.9400.0033/TYPE': 'DHCP-Snooping'
'0010.9400.0033/VXLAN': '0'
'0010.9400.0033/INNER-VLAN': '0'
'0010.9400.0033/LEASE(SEC)': '34'
'0010.9400.0033/VLAN': '8'
'0010.9400.0033/INTERFACE': 'GigabitEthernet 1/5/19'
'0010.9400.0033/IPADDRESS': '2.0.0.5'
'Total number of bindings': '1'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip dhcp snooping binding | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*ip dhcp snooping binding.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')

        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if "Total number" in show_info_list_line[line_len_num]:              #***********
                Total_Sta_num = line_len_num
                list_1 = show_info_list_line[line_len_num].split(":")
                key_name = '%s'%list_1[0].lstrip().rstrip()
                dict_value[key_name] = '%s'%list_1[1].lstrip().rstrip()

        cut_flag = 0
        for cut_value in show_info_list_line :
            cut_flag = cut_flag+1
            if cut_value != "":
                if re.match(".*---.*",cut_value) :
                    cut_del = cut_flag
                    cut_value_list = cut_value.split()
                    col_len_list = []
                    for cut_value_list_value in cut_value_list:
                        col_len_list.append(len(cut_value_list_value)+1)
        col_len_list.remove(col_len_list[-1])
        col_len_list.append(32)
        ##print col_len_list
        show_info_list_line.remove(show_info_list_line[cut_del-1])

        ##print col_len_list
        col_list_all_num = len(col_len_list)
        row_list_all_num = len(show_info_list_line)
        ##print col_list_all_num
        ##print row_list_all_num

        value_title="MACADDRESS"
        address_list = []
        title_row =[]

        for i in range (Total_Sta_num+1,line_len-1):    #line_len-1:remove了一行
            ##print show_info_list_line[i]
            cut_star = 0
            cut_end=0
            col_value_list = []
            show_info_list_line[i] = show_info_list_line[i].lstrip()
            ##print show_info_list_line[i]
            if show_info_list_line[i] != "" :
                for j in range(col_list_all_num):
                    cut_end = cut_end+int(col_len_list[j])
                    col_value = show_info_list_line[i][cut_star:cut_end]
                    cut_star = cut_end
                    col_value = col_value.lstrip()
                    col_value = col_value.rstrip()
                    col_value_list.append(col_value)
                #获取表头的列，用于组合
                ##print col_value_list
                title_col = col_value_list[1]          #需要变参的地方
                if title_col==value_title:
                    title_row = col_value_list
                elif title_col!=value_title:
                    #生成字典
                    address_list.append(title_col)
                    #遍历列头右边的值
                    for s in range(2,col_list_all_num):  #需要变参的地方
                        #key_name = '%s/%s' % (title_col,title_row[s])
                        key_name = '%s/%s'%(title_col,title_row[s])
                        dict_value[key_name]=col_value_list[s]
                    ##遍历列头右边的值
                    key_name = '%s/%s' % (title_col, title_row[0])
                    dict_value[key_name]=col_value_list[0]
                dict_value["mac_list"]=address_list
        return dict_value
    def dut_get_show_interface_status(self,show_info):
        """
        Function:show interfaces status回显解析函数
        CLI命令:show interfaces status
        回显信息示例:
lyq5848VAC#show interfaces status 
Interface                                Status    Vlan   Duplex   Speed     Type  
---------------------------------------- --------  ----   -------  --------- ------
GigabitEthernet 1/0/1                    up        1995   Full     1000M     copper
GigabitEthernet 1/0/2                    up               Full     1000M     copper
GigabitEthernet 1/0/3                    down      1      Unknown  Unknown   copper
GigabitEthernet 1/0/4                    down      1      Unknown  Unknown   copper
GigabitEthernet 1/0/5                    down      1      Unknown  Unknown   copper
GigabitEthernet 1/0/6                    down      1      Unknown  Unknown   copper
GigabitEthernet 1/0/7                    down      1      Unknown  Unknown   copper
GigabitEthernet 1/0/8                    down      1      Unknown  Unknown   copper
GigabitEthernet 2/0/1                    up        1995   Full     1000M     copper
GigabitEthernet 2/0/2                    up               Full     1000M     copper
GigabitEthernet 2/0/3                    down      1      Unknown  Unknown   copper
GigabitEthernet 2/0/4                    down      1      Unknown  Unknown   copper
GigabitEthernet 2/0/5                    down      1      Unknown  Unknown   copper
GigabitEthernet 2/0/6                    down      1      Unknown  Unknown   copper
GigabitEthernet 2/0/7                    down      1      Unknown  Unknown   copper
GigabitEthernet 2/0/8                    down      1      Unknown  Unknown   copper
GigabitEthernet 3/0/1                    up        1995   Full     1000M     copper

        Returns:
{"GigabitEthernet 2/0/4/Status": "down"
"GigabitEthernet 1/0/6/Speed": "Unknown"
"GigabitEthernet 1/0/5/Type": "copper"
"GigabitEthernet 2/0/5/Vlan": "1"
"GigabitEthernet 1/0/4/Vlan": "1"
"GigabitEthernet 2/0/1/Speed": "1000M"
"GigabitEthernet 2/0/6/Status": "down"
"GigabitEthernet 2/0/3/Speed": "Unknown"
"GigabitEthernet 1/0/7/Status": "down"
"GigabitEthernet 2/0/8/Status": "down"
"GigabitEthernet 2/0/6/Vlan": "1"
"GigabitEthernet 2/0/3/Vlan": "1"
"GigabitEthernet 1/0/6/Duplex": "Unknown"
"GigabitEthernet 1/0/8/Type": "copper"
"GigabitEthernet 1/0/7/Type": "copper"
"GigabitEthernet 2/0/1/Status": "up"
"GigabitEthernet 2/0/6/Type": "copper"
"GigabitEthernet 1/0/4/Speed": "Unknown"
"GigabitEthernet 1/0/3/Type": "copper"
"GigabitEthernet 1/0/2/Type": "copper"
"GigabitEthernet 1/0/6/Type": "copper"
"GigabitEthernet 2/0/2/Vlan": ""
"GigabitEthernet 1/0/2/Vlan": ""
"GigabitEthernet 2/0/4/Speed": "Unknown"
"GigabitEthernet 2/0/8/Speed": "Unknown"
"GigabitEthernet 1/0/8/Vlan": "1"
"GigabitEthernet 1/0/6/Status": "down"
"GigabitEthernet 2/0/3/Status": "down"
"GigabitEthernet 1/0/5/Speed": "Unknown"
"GigabitEthernet 2/0/4/Duplex": "Unknown"
"GigabitEthernet 1/0/7/Speed": "Unknown"
"GigabitEthernet 2/0/3/Duplex": "Unknown"
"GigabitEthernet 2/0/1/Vlan": "1995"
"GigabitEthernet 3/0/1/Vlan": "1995"
"GigabitEthernet 3/0/1/Speed": "1000M"
"GigabitEthernet 2/0/5/Status": "down"
"GigabitEthernet 1/0/7/Duplex": "Unknown"
"GigabitEthernet 1/0/5/Duplex": "Unknown"
"GigabitEthernet 1/0/3/Vlan": "1"
"GigabitEthernet 1/0/5/Status": "down"
"GigabitEthernet 2/0/8/Duplex": "Unknown"
"GigabitEthernet 1/0/8/Status": "down"
"GigabitEthernet 1/0/5/Vlan": "1"
"GigabitEthernet 2/0/8/Type": "copper"
"GigabitEthernet 3/0/1/Status": "up"
"GigabitEthernet 1/0/1/Duplex": "Full"
"GigabitEthernet 1/0/3/Duplex": "Unknown"
"GigabitEthernet 1/0/2/Status": "up"
"GigabitEthernet 2/0/7/Type": "copper"
"GigabitEthernet 1/0/1/Vlan": "1995"
"GigabitEthernet 2/0/6/Duplex": "Unknown"
"GigabitEthernet 1/0/1/Speed": "1000M"
"GigabitEthernet 2/0/8/Vlan": "1"
"GigabitEthernet 2/0/7/Vlan": "1"
"GigabitEthernet 2/0/1/Duplex": "Full"
"GigabitEthernet 2/0/4/Type": "copper"
"GigabitEthernet 2/0/5/Speed": "Unknown"
"GigabitEthernet 2/0/7/Duplex": "Unknown"
"GigabitEthernet 3/0/1/Duplex": "Full"
"GigabitEthernet 2/0/2/Type": "copper"
"GigabitEthernet 3/0/1/Type": "copper"
"GigabitEthernet 1/0/3/Status": "down"
"GigabitEthernet 1/0/7/Vlan": "1"
"GigabitEthernet 1/0/1/Status": "up"
"GigabitEthernet 1/0/4/Status": "down"
"GigabitEthernet 2/0/2/Speed": "1000M"
"GigabitEthernet 1/0/8/Duplex": "Unknown"
"GigabitEthernet 1/0/4/Duplex": "Unknown"
"GigabitEthernet 2/0/7/Speed": "Unknown"
"GigabitEthernet 2/0/2/Duplex": "Full"
"GigabitEthernet 2/0/1/Type": "copper"
"GigabitEthernet 1/0/1/Type": "copper"
"GigabitEthernet 2/0/6/Speed": "Unknown"
"GigabitEthernet 2/0/4/Vlan": "1"
"GigabitEthernet 2/0/2/Status": "up"
"GigabitEthernet 2/0/7/Status": "down"
"GigabitEthernet 2/0/5/Duplex": "Unknown"
"GigabitEthernet 1/0/8/Speed": "Unknown"
"GigabitEthernet 1/0/2/Duplex": "Full"
"GigabitEthernet 1/0/3/Speed": "Unknown"
"GigabitEthernet 1/0/4/Type": "copper"
"GigabitEthernet 1/0/2/Speed": "1000M"
"GigabitEthernet 2/0/5/Type": "copper"
"GigabitEthernet 2/0/3/Type": "copper"
"GigabitEthernet 1/0/6/Vlan": "1"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interfaces status | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """
        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Interface")
    def dut_get_show_interfaces_status(self,show_info):
        """
        Function:show interfaces status回显解析函数
        CLI命令:show interfaces status
        回显信息示例:
lyq5848VAC#show interfaces status 
Interface                                Status    Vlan   Duplex   Speed     Type  
---------------------------------------- --------  ----   -------  --------- ------
GigabitEthernet 1/0/1                    up        1995   Full     1000M     copper
GigabitEthernet 1/0/2                    up               Full     1000M     copper
GigabitEthernet 1/0/3                    down      1      Unknown  Unknown   copper
GigabitEthernet 1/0/4                    down      1      Unknown  Unknown   copper
GigabitEthernet 1/0/5                    down      1      Unknown  Unknown   copper
GigabitEthernet 1/0/6                    down      1      Unknown  Unknown   copper
GigabitEthernet 1/0/7                    down      1      Unknown  Unknown   copper
GigabitEthernet 1/0/8                    down      1      Unknown  Unknown   copper
GigabitEthernet 2/0/1                    up        1995   Full     1000M     copper
GigabitEthernet 2/0/2                    up               Full     1000M     copper
GigabitEthernet 2/0/3                    down      1      Unknown  Unknown   copper
GigabitEthernet 2/0/4                    down      1      Unknown  Unknown   copper
GigabitEthernet 2/0/5                    down      1      Unknown  Unknown   copper
GigabitEthernet 2/0/6                    down      1      Unknown  Unknown   copper
GigabitEthernet 2/0/7                    down      1      Unknown  Unknown   copper
GigabitEthernet 2/0/8                    down      1      Unknown  Unknown   copper
GigabitEthernet 3/0/1                    up        1995   Full     1000M     copper

        Returns:
{'GigabitEthernet 2/0/4/Status': 'down'
'GigabitEthernet 1/0/6/Speed': 'Unknown'
'GigabitEthernet 1/0/5/Type': 'copper'
'GigabitEthernet 2/0/5/Vlan': '1'
'GigabitEthernet 1/0/4/Vlan': '1'
'GigabitEthernet 2/0/1/Speed': '1000M'
'GigabitEthernet 2/0/6/Status': 'down'
'GigabitEthernet 2/0/3/Speed': 'Unknown'
'GigabitEthernet 1/0/7/Status': 'down'
'GigabitEthernet 2/0/8/Status': 'down'
'GigabitEthernet 2/0/6/Vlan': '1'
'GigabitEthernet 2/0/3/Vlan': '1'
'GigabitEthernet 1/0/6/Duplex': 'Unknown'
'GigabitEthernet 1/0/8/Type': 'copper'
'GigabitEthernet 1/0/7/Type': 'copper'
'GigabitEthernet 2/0/1/Status': 'up'
'GigabitEthernet 2/0/6/Type': 'copper'
'GigabitEthernet 1/0/4/Speed': 'Unknown'
'GigabitEthernet 1/0/3/Type': 'copper'
'GigabitEthernet 1/0/2/Type': 'copper'
'GigabitEthernet 1/0/6/Type': 'copper'
'GigabitEthernet 2/0/2/Vlan': ''
'GigabitEthernet 1/0/2/Vlan': ''
'GigabitEthernet 2/0/4/Speed': 'Unknown'
'GigabitEthernet 2/0/8/Speed': 'Unknown'
'GigabitEthernet 1/0/8/Vlan': '1'
'GigabitEthernet 1/0/6/Status': 'down'
'GigabitEthernet 2/0/3/Status': 'down'
'GigabitEthernet 1/0/5/Speed': 'Unknown'
'GigabitEthernet 2/0/4/Duplex': 'Unknown'
'GigabitEthernet 1/0/7/Speed': 'Unknown'
'GigabitEthernet 2/0/3/Duplex': 'Unknown'
'GigabitEthernet 2/0/1/Vlan': '1995'
'GigabitEthernet 3/0/1/Vlan': '1995'
'GigabitEthernet 3/0/1/Speed': '1000M'
'GigabitEthernet 2/0/5/Status': 'down'
'GigabitEthernet 1/0/7/Duplex': 'Unknown'
'GigabitEthernet 1/0/5/Duplex': 'Unknown'
'GigabitEthernet 1/0/3/Vlan': '1'
'GigabitEthernet 1/0/5/Status': 'down'
'GigabitEthernet 2/0/8/Duplex': 'Unknown'
'GigabitEthernet 1/0/8/Status': 'down'
'GigabitEthernet 1/0/5/Vlan': '1'
'GigabitEthernet 2/0/8/Type': 'copper'
'GigabitEthernet 3/0/1/Status': 'up'
'GigabitEthernet 1/0/1/Duplex': 'Full'
'GigabitEthernet 1/0/3/Duplex': 'Unknown'
'GigabitEthernet 1/0/2/Status': 'up'
'GigabitEthernet 2/0/7/Type': 'copper'
'GigabitEthernet 1/0/1/Vlan': '1995'
'GigabitEthernet 2/0/6/Duplex': 'Unknown'
'GigabitEthernet 1/0/1/Speed': '1000M'
'GigabitEthernet 2/0/8/Vlan': '1'
'GigabitEthernet 2/0/7/Vlan': '1'
'GigabitEthernet 2/0/1/Duplex': 'Full'
'GigabitEthernet 2/0/4/Type': 'copper'
'GigabitEthernet 2/0/5/Speed': 'Unknown'
'GigabitEthernet 2/0/7/Duplex': 'Unknown'
'GigabitEthernet 3/0/1/Duplex': 'Full'
'GigabitEthernet 2/0/2/Type': 'copper'
'GigabitEthernet 3/0/1/Type': 'copper'
'GigabitEthernet 1/0/3/Status': 'down'
'GigabitEthernet 1/0/7/Vlan': '1'
'GigabitEthernet 1/0/1/Status': 'up'
'GigabitEthernet 1/0/4/Status': 'down'
'GigabitEthernet 2/0/2/Speed': '1000M'
'GigabitEthernet 1/0/8/Duplex': 'Unknown'
'GigabitEthernet 1/0/4/Duplex': 'Unknown'
'GigabitEthernet 2/0/7/Speed': 'Unknown'
'GigabitEthernet 2/0/2/Duplex': 'Full'
'GigabitEthernet 2/0/1/Type': 'copper'
'GigabitEthernet 1/0/1/Type': 'copper'
'GigabitEthernet 2/0/6/Speed': 'Unknown'
'GigabitEthernet 2/0/4/Vlan': '1'
'GigabitEthernet 2/0/2/Status': 'up'
'GigabitEthernet 2/0/7/Status': 'down'
'GigabitEthernet 2/0/5/Duplex': 'Unknown'
'GigabitEthernet 1/0/8/Speed': 'Unknown'
'GigabitEthernet 1/0/2/Duplex': 'Full'
'GigabitEthernet 1/0/3/Speed': 'Unknown'
'GigabitEthernet 1/0/4/Type': 'copper'
'GigabitEthernet 1/0/2/Speed': '1000M'
'GigabitEthernet 2/0/5/Type': 'copper'
'GigabitEthernet 2/0/3/Type': 'copper'
'GigabitEthernet 1/0/6/Vlan': '1'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interfaces status | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Interface")
    def dut_get_show_ip_interface_brief(self,show_info):
        """
        Function:show ip interface brief回显解析函数
        CLI命令:show ip interface brief
        回显信息示例:
11#show ip interface brief 
Interface                                IP-Address(Pri)      IP-Address(Sec)      Status                 Protocol 
VLAN 1                                   12.12.0.59/16        no address           up                     up       
VLAN 4094                                192.168.32.55/28     no address           up                     up

        Returns:
{'VLAN 1/Interface': 'VLAN 1'
'VLAN 4094/IP-Address(Sec)': 'no address'
'VLAN 1/Status': 'up'
'VLAN 4094/Protocol': 'up'
'VLAN 4094/Interface': 'VLAN 4094'
'inf_list': ['VLAN 1'
'VLAN 4094'], 'VLAN 1/IP-Address(Sec)': 'no address'
'VLAN 4094/IP-Address(Pri)': '192.168.32.55/28'
'VLAN 1/IP-Address(Pri)': '12.12.0.59/16'
'VLAN 1/Protocol': 'up'
'VLAN 4094/Status': 'up'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip interface brief | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="Interface"     #需要变参的地方
        col_len_list = []
        #创建字典
        dict_value={}
        rol_title_list = []
        title_row =[]

        show_info_list_line = show_info.replace("multilink  ","multilink ").split("\n")
        if re.match(r'.*show ip interface brief.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')

        length = len(show_info_list_line)
        for k in range(0,length):
            col_value_list = re.split(r'\s{2,}', show_info_list_line[k].lstrip().rstrip())
            title_col = col_value_list[0]           #表头的列值位*****
            if value_title in col_value_list :
                title_row = col_value_list
            else:
                if col_value_list != "":
                    rol_title_list.append(title_col)
                    for s in range (1,len(col_value_list)):           #表头的列值位右边开始*****
                        key_name = '%s/%s'%(title_col,title_row[s])
                        dict_value[key_name]=col_value_list[s]
                    key_name = '%s/%s' % (title_col, title_row[0])
                    dict_value[key_name]=col_value_list[0]
        dict_value["inf_list"] = rol_title_list
        return dict_value
    def dut_get_show_virtualac_dualactive_bfd(self,show_info):
        """
        Function:show virtual-ac dual-active bfd回显解析函数
        CLI命令:show virtual-ac dual-active bfd
        回显信息示例:
lyq5848VAC#show virtual-ac dual-active bfd 
BFD dual-active detection enabled: Yes
BFD dual-active interface configured:
  GigabitEthernet 1/0/3: UP
  GigabitEthernet 1/0/4: UP
  GigabitEthernet 2/0/3: UP
  GigabitEthernet 2/0/4: UP
  GigabitEthernet 3/0/3: UP
  GigabitEthernet 3/0/4: UP

        Returns:
{'BFD dual-active detection enabled': 'Yes'
'GigabitEthernet 3/0/3': 'UP'
'GigabitEthernet 1/0/3': 'UP'
'GigabitEthernet 1/0/4': 'UP'
'GigabitEthernet 3/0/4': 'UP'
'BFD dual-active interface configured': ''
'GigabitEthernet 2/0/3': 'UP'
'GigabitEthernet 2/0/4': 'UP'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show virtual-ac dual-active bfd | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        str_arg = "virtual-ac dual-active"
        return self.dut_get_show_info_analy_all_colon(show_info,str_arg)
    def dut_get_show_virtualac_dualactive_aggregateport(self,show_info):
        """
        Function:show virtual-ac dual-active aggregateport回显解析函数
        CLI命令:show virtual-ac dual-active aggregateport
        回显信息示例:
lyq5848VAC#show virtual-ac dual-active aggregateport 
Aggregateport dual-active detection enabled: Yes
Aggregateport dual-active interface configured:
  AggregatePort 2: DOWN
    GigabitEthernet 1/0/8: DOWN
    GigabitEthernet 2/0/8: DOWN
    GigabitEthernet 3/0/8: DOWN

        Returns:
{'GigabitEthernet 1/0/8': 'DOWN'
'GigabitEthernet 3/0/8': 'DOWN'
'AggregatePort 2': 'DOWN'
'Aggregateport dual-active interface configured': ''
'GigabitEthernet 2/0/8': 'DOWN'
'Aggregateport dual-active detection enabled': 'Yes'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show virtual-ac dual-active aggregateport | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        str_arg = "virtual-ac dual-active"
        return self.dut_get_show_info_analy_all_colon(show_info,str_arg)
    def dut_get_show_ip_route_ospf(self,show_info):
        """
        Function:show ip route ospf回显解析函数
        CLI命令:show ip route ospf
        回显信息示例:
Ruijie#show ip route ospf  
O     1.1.1.2/32 [110/1] via 172.16.1.2, 00:00:11, VLAN 1

        Returns:
{"1.1.1.2/32/time": "00:00:11"
"1.1.1.2/32/AD": "[110/1]"
"1.1.1.2/32/AD/me": "1"
"1.1.1.2/32/intf": "VLAN 1"
"1.1.1.2/32/mode": "O"
"1.1.1.2/32/via": "172.16.1.2"
"1.1.1.2/32/AD/pri": "110"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip route ospf | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        key_list = ['mode','ip','AD','via','time','intf']
        #创建字典
        dict_value={}
        #show_info = show_info.replace("I  L2","I L2")
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        for list_num in range (len(show_info_list_line)):
            #list_1 = re.split(r'\s{1,}|,', show_info_list_line[list_num])
            list_1 = show_info_list_line[list_num].split(',')
            list_1 = list_1
            list_2 = list_1[0].split()
            if len(list_2) == 6:
                list2_1 = re.split("\s{2,}",list_1[0])[1].split()
                #print re.split("\s{2,}",list_1[0])
                list2_2=[]
                list2_2_value =re.split("\s{2,}",list_1[0])[0]
                list2_2.append(list2_2_value)
                list_2 = list2_2+list2_1
            list_2.append(list_1[1])
            list_2.append(list_1[2])
            del list_2[3]
            for list_2_num in range (2,len(list_2)):
                key_name = '%s/%s'%(list_2[1].lstrip().rstrip(),key_list[list_2_num].lstrip().rstrip())
                dict_value[key_name]=list_2[list_2_num].lstrip().rstrip()
                if key_list[list_2_num] == "AD":
                    dict_value[key_name+"/pri"]=list_2[list_2_num].lstrip("[").rstrip("]").split("/")[0]
                    dict_value[key_name+"/me"]=list_2[list_2_num].lstrip("[").rstrip("]").split("/")[1]
            key_name = '%s/%s'%(list_2[1].lstrip().rstrip(),key_list[0].lstrip().rstrip())
            dict_value[key_name]=list_2[0].lstrip().rstrip()
        return dict_value
    def dut_get_show_ip_route_isis(self,show_info):
        """
        Function:show ip route isis回显解析函数
        CLI命令:show ip route isis
        回显信息示例:
eg-3#show ip route isis
I L2  60.0.51.0/24 [115/2] via 4.1.1.2, 00:09:28, VLAN 4

        Returns:
{"60.0.51.0/24/via": "4.1.1.2"
"60.0.51.0/24/time": "00:09:28"
"60.0.51.0/24/AD": "[115/2]"
"60.0.51.0/24/AD/me": "2"
"60.0.51.0/24/intf": "VLAN 4"
"60.0.51.0/24/AD/pri": "115"
"60.0.51.0/24/mode": "I L2"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip route isis | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_ip_route_ospf(show_info)

    def dut_get_show_interface_vlan(self,show_info):
        """
        Function:show interface vlan 2回显解析函数
        CLI命令:show interface vlan 2
        回显信息示例:
Ruijie#show interface vlan 2
Index(dec):4098 (hex):1002
VLAN 2 is UP  , line protocol is DOWN    
  Hardware is VLAN, address is 00d0.f822.3533 (bia 00d0.f822.3533)
  Interface address is: 2.2.2.1/24
  ARP type: ARPA, ARP Timeout: 3600 seconds
  Interface IPv6 address is:
    2::1/64
    fe80::2d0:f8ff:fe22:3533/64
  MTU 1500 bytes, BW 1000000 Kbit
  Encapsulation protocol is Ethernet-II, loopback not set
  Keepalive interval is 10 sec , set
  Carrier delay is 2 sec
  Rxload is 0/255, Txload is 0/255

        Returns:
{"BW": "1000000 Kbit"
"Rxload": "0/255"
"ARP Timeout": "3600 seconds"
"Txload": "0/255"
"Encapsulation protocol": "Ethernet-II"
"loopback": "not set"
"ARP type": "ARPA"
"Keepalive interval": "10 sec , set"
"Hardware": "VLAN"
"fe80::2d0:f8ff:fe22": "3533/64"
"VLAN 2": "UP"
"MTU": "1500 bytes"
"address": "00d0.f822.3533"
"(hex)": "1002"
"Interface IPv6 address": "2::1/64"
"Index(dec)": "4098"
"Interface address": "2.2.2.1/24"
"Carrier delay": "2 sec"
"line protocol": "DOWN"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interface vlan 2 | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        ################################################################################################
        #  打印回显信息
        ###############################################################################################

        #####################################################################

        length = len(show_info_split)
        ###########################################################
        # 去除Interface IPv6 address is:
        # No IPv6 address
        #############################################################
        for i in range(length):
            if re.match(r'  Interface IPv6 address',show_info_split[i]):
                matchObj = re.match('  (Interface IPv6 address) is:', show_info_split[i])
                key = matchObj.group(1)
                vaule = show_info_split[i+1]
                key = key.lstrip()
                key = key.rstrip()
                value = vaule.lstrip()
                value = value.rstrip()
                dict_value[key] = value
                show_info_split.remove(show_info_split[i+1])
                show_info_split.remove(show_info_split[i])
                break
        ################################################################
        # 去除 Index(dec):4097 (hex):1001
        #####################################################################
        length = len(show_info_split)
        for i in range(length):
            if re.match('Index',show_info_split[i]):
                matchObj = re.match('(.*):(\d*) (.*):(\d*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                dict_value[matchObj.group(3)] = matchObj.group(4)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        #########################################################################
        # 去除 Keepalive interval is 10 sec , set
        #############################################################################
        for i in range(length):
            if re.match(r'  Keepalive interval', show_info_split[i]):
                matchObj = re.match('  (Keepalive interval) is (.*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        ##########################################################################
        # 以逗号为分隔号重新组合成字符串 newString
        ###########################################################################
        newString = ' '
        for i in range(length):
            newString = newString + show_info_split[i] + ','
        #################################################################################
        #   开始处理
        ##############################################################################
        dut_info_split = newString.split(',')
        length = len(dut_info_split)
        for i in range(length):
            if re.search(r'(.*):(.*)',dut_info_split[i]):
                if re.search(r'(.*)is:(.*)',dut_info_split[i]):
                    type1 = re.search(r'(.*)is:(.*)', dut_info_split[i])
                    key = type1.group(1)
                    value = type1.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
                else:
                    type1 = re.search(r'(.*):(.*)', dut_info_split[i])
                    key = type1.group(1)
                    value = type1.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
            elif re.search(r'(.*)is(.*)',dut_info_split[i]):
                if re.match(r' address is',dut_info_split[i]):
                    type2 = re.match(r' (address) is (.*) \(bia .*\)', dut_info_split[i])
                    dict_value[type2.group(1)] = type2.group(2)
                else:
                    type2 = re.search(r'(.*)is(.*)',dut_info_split[i])
                    key = type2.group(1)
                    value = type2.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
            elif re.search(r'(MTU|BW|loopback) (.*)',dut_info_split[i]):
                type3 = re.search(r'(MTU|BW|loopback) (.*)' ,dut_info_split[i])
                key = type3.group(1)
                value = type3.group(2)
                key = key.lstrip()
                key = key.rstrip()
                value = value.lstrip()
                value = value.rstrip()
                dict_value[key] = value
        return dict_value
    def dut_get_show_interfaces_vlan(self,show_info):
        dict_value = {}
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        ################################################################################################
        #  打印回显信息
        ###############################################################################################

        #####################################################################

        length = len(show_info_split)
        ###########################################################
        # 去除Interface IPv6 address is:
        # No IPv6 address
        #############################################################
        for i in range(length):
            if re.match(r'  Interface IPv6 address',show_info_split[i]):
                matchObj = re.match('  (Interface IPv6 address) is:', show_info_split[i])
                key = matchObj.group(1)
                vaule = show_info_split[i+1]
                key = key.lstrip()
                key = key.rstrip()
                value = vaule.lstrip()
                value = value.rstrip()
                dict_value[key] = value
                show_info_split.remove(show_info_split[i+1])
                show_info_split.remove(show_info_split[i])
                break
        ################################################################
        # 去除 Index(dec):4097 (hex):1001
        #####################################################################
        length = len(show_info_split)
        for i in range(length):
            if re.match('Index',show_info_split[i]):
                matchObj = re.match('(.*):(\d*) (.*):(\d*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                dict_value[matchObj.group(3)] = matchObj.group(4)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        #########################################################################
        # 去除 Keepalive interval is 10 sec , set
        #############################################################################
        for i in range(length):
            if re.match(r'  Keepalive interval', show_info_split[i]):
                matchObj = re.match('  (Keepalive interval) is (.*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        ##########################################################################
        # 以逗号为分隔号重新组合成字符串 newString
        ###########################################################################
        newString = ' '
        for i in range(length):
            newString = newString + show_info_split[i] + ','
        #################################################################################
        #   开始处理
        ##############################################################################
        dut_info_split = newString.split(',')
        length = len(dut_info_split)
        for i in range(length):
            if re.search(r'(.*):(.*)',dut_info_split[i]):
                if re.search(r'(.*)is:(.*)',dut_info_split[i]):
                    type1 = re.search(r'(.*)is:(.*)', dut_info_split[i])
                    key = type1.group(1)
                    value = type1.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
                else:
                    type1 = re.search(r'(.*):(.*)', dut_info_split[i])
                    key = type1.group(1)
                    value = type1.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
            elif re.search(r'(.*)is(.*)',dut_info_split[i]):
                if re.match(r' address is',dut_info_split[i]):
                    type2 = re.match(r' (address) is (.*) \(bia .*\)', dut_info_split[i])
                    dict_value[type2.group(1)] = type2.group(2)
                else:
                    type2 = re.search(r'(.*)is(.*)',dut_info_split[i])
                    key = type2.group(1)
                    value = type2.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
            elif re.search(r'(MTU|BW|loopback) (.*)',dut_info_split[i]):
                type3 = re.search(r'(MTU|BW|loopback) (.*)' ,dut_info_split[i])
                key = type3.group(1)
                value = type3.group(2)
                key = key.lstrip()
                key = key.rstrip()
                value = value.lstrip()
                value = value.rstrip()
                dict_value[key] = value


        return dict_value
    def dut_get_show_interface_bvi_num(self,show_info):
        """
        Function:show interface bVI <num>回显解析函数
        CLI命令:show interface bVI <num>
        回显信息示例:
AP720I#show interface bVI 1
Index(dec):9 (hex):9
BVI 1 is UP  , line protocol is UP    
  Hardware is BVI, address is 5869.6ce7.ab94 (bia 5869.6ce7.ab94)
  Interface address is: 10.1.1.2/24
  ARP type: ARPA, ARP Timeout: 3600 seconds
  Interface IPv6 address is:
    fe80::5a69:6cff:fee7:ab94/64
  MTU 1500 bytes, BW 1000000 Kbit
  Encapsulation protocol is Ethernet-II, loopback not set
  Keepalive interval is 10 sec , set
  Carrier delay is 2 sec
  Rxload is 0/255, Txload is 0/255
AP720I#


AC上查看：
5848VAC#sho ap-config summary 
========= show ap status =========
Radio: Radio ID or Band: 2.4G = 1#, 5G = 2#
       E = enabled, D = disabled, N = Not exist, V = Virtual AP
       Current Sta number
       Channel: * = Global
       Power Level = Percent

Online AP number: 1
Offline AP number: 0

AP Name                                  IP Address      Mac Address    Radio               Radio               Up/Off time   State
---------------------------------------- --------------- -------------- ------------------- ------------------- ------------- -----
AP720I                                   10.1.1.2        5869.6ce7.ab93 1  E   0    1*  100 2  E   0  149*  100    0:01:25:36 Run   
5848VAC#

        Returns:
{'D = d': 'abled'
'Txload': '0/255'
'N = Not ex': 't'
'BW': '1000000 Kbit'
'AP720I                                   10.1.1.2        5869.6ce7.ab93 1  E   0    1*  100 2  E   0  149*  100    0:01:25': '36 Run'
'Channel': '* = Global'
'line protocol': 'UP'
'Rxload': '0/255'
'loopback': 'not set'
'Carrier delay': '2 sec'
'(hex)': '9'
'Offline AP number': '0'
'MTU': '1500 bytes'
'BVI 1': 'UP'
'address': '5869.6ce7.ab94'
'Interface IPv6 address': 'fe80::5a69:6cff:fee7:ab94/64'
'Interface address': '10.1.1.2/24'
'Index(dec)': '9'
'Online AP number': '1'
'Encapsulation protocol': 'Ethernet-II'
'ARP type': 'ARPA'
'Hardware': 'BVI'
'Keepalive interval': '10 sec , set'
'Radio: Radio ID or Band': '2.4G = 1#'
'ARP Timeout': '3600 seconds'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interface bVI <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        ################################################################################################
        #  打印回显信息
        ###############################################################################################

        #####################################################################

        length = len(show_info_split)
        ###########################################################
        # 去除Interface IPv6 address is:
        # No IPv6 address
        #############################################################
        for i in range(length):
            if re.match(r'  Interface IPv6 address',show_info_split[i]):
                matchObj = re.match('  (Interface IPv6 address) is:', show_info_split[i])
                key = matchObj.group(1)
                vaule = show_info_split[i+1]
                key = key.lstrip()
                key = key.rstrip()
                value = vaule.lstrip()
                value = value.rstrip()
                dict_value[key] = value
                show_info_split.remove(show_info_split[i+1])
                show_info_split.remove(show_info_split[i])
                break
        ################################################################
        # 去除 Index(dec):4097 (hex):1001
        #####################################################################
        length = len(show_info_split)
        for i in range(length):
            if re.match('Index',show_info_split[i]):
                matchObj = re.match('(.*):(\d*) (.*):(\d*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                dict_value[matchObj.group(3)] = matchObj.group(4)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        #########################################################################
        # 去除 Keepalive interval is 10 sec , set
        #############################################################################
        for i in range(length):
            if re.match(r'  Keepalive interval', show_info_split[i]):
                matchObj = re.match('  (Keepalive interval) is (.*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        ##########################################################################
        # 以逗号为分隔号重新组合成字符串 newString
        ###########################################################################
        newString = ' '
        for i in range(length):
            newString = newString + show_info_split[i] + ','
        #################################################################################
        #   开始处理
        ##############################################################################
        dut_info_split = newString.split(',')
        length = len(dut_info_split)
        for i in range(length):
            if re.search(r'(.*):(.*)',dut_info_split[i]):
                if re.search(r'(.*)is:(.*)',dut_info_split[i]):
                    type1 = re.search(r'(.*)is:(.*)', dut_info_split[i])
                    key = type1.group(1)
                    value = type1.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
                else:
                    type1 = re.search(r'(.*):(.*)', dut_info_split[i])
                    key = type1.group(1)
                    value = type1.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
            elif re.search(r'(.*)is(.*)',dut_info_split[i]):
                if re.match(r' address is',dut_info_split[i]):
                    type2 = re.match(r' (address) is (.*) \(bia .*\)', dut_info_split[i])
                    dict_value[type2.group(1)] = type2.group(2)
                else:
                    type2 = re.search(r'(.*)is(.*)',dut_info_split[i])
                    key = type2.group(1)
                    value = type2.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
            elif re.search(r'(MTU|BW|loopback) (.*)',dut_info_split[i]):
                type3 = re.search(r'(MTU|BW|loopback) (.*)' ,dut_info_split[i])
                key = type3.group(1)
                value = type3.group(2)
                key = key.lstrip()
                key = key.rstrip()
                value = value.lstrip()
                value = value.rstrip()
                dict_value[key] = value


        return dict_value

    #20180306
    def dut_get_show_bfd_neighbors(self, show_info):
        """
        Function:show bfd neighbors回显解析函数
        CLI命令:show bfd neighbors
        回显信息示例:
DUT_2(config-router)#show bfd neighbors
IPV4 sessions: 1, UP: 1
IPV6 sessions: 0, UP: 0
OurAddr                         NeighAddr                             LD/RD      RH/RS     Holdown(mult)  State  Int
12.1.1.1                        12.1.1.2                            8192/8192    Up              0(3   )  Up     FortyGigabitEthernet 5/111

        Returns:
{"12.1.1.1/Int": "FortyGigabitEthernet 5/111"
"12.1.1.1/Holdown(mult)": "0(3)"
"IPV4 sessions": "1"
"12.1.1.1/NeighAddr": "12.1.1.2"
"12.1.1.1/LD/RD": "8192/8192"
"ip_address_list": ["12.1.1.1"], "IPV6 sessions": "0"
"12.1.1.1/RH/RS": "Up"
"IPV4 sessions/UP": "1"
"IPV6 sessions/ UP": "0"
"12.1.1.1/State": "Up"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bfd neighbors | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """
        if "Holdown(mult)" in show_info:
            value_title = "OurAddr"  # 需要变参的地方
            col_len_list = []
            # 创建字典
            dict_value = {}
            rol_title_list = []
            title_row = []
            show_info_list_line = show_info.split("\n")
            if re.match(r'.*show bfd neighbors.*', show_info_list_line[0]):
                show_info_list_line.remove(show_info_list_line[0])
            if re.match(r'.*#.*', show_info_list_line[-1]):
                show_info_list_line.remove(show_info_list_line[-1])
            for i in show_info_list_line:
                if '' in show_info_list_line:
                    show_info_list_line.remove('')

            length = len(show_info_list_line)
            for i in range(length):
                if "IPV4 sessions" in show_info_list_line[i]:
                    list_1 = show_info_list_line[i].split(",")
                    for list_1_value in list_1:
                        list_2 = list_1_value.split(":")
                        if list_2[0] == "IPV4 sessions":
                            key_name = list_2[0].lstrip().rstrip()
                            dict_value[key_name] = list_2[1].lstrip().rstrip()
                        else:
                            key_name = "IPV4 sessions/%s" % list_2[0].lstrip().rstrip()
                            dict_value[key_name] = list_2[1].lstrip().rstrip()
                if "IPV6 sessions" in show_info_list_line[i]:
                    label_i = i
                    list_1 = show_info_list_line[i].split(",")
                    for list_1_value in list_1:
                        list_2 = list_1_value.split(":")
                        if list_2[0] == "IPV6 sessions":
                            key_name = list_2[0].lstrip().rstrip()
                            dict_value[key_name] = list_2[1].lstrip().rstrip()
                        else:
                            key_name = "IPV6 sessions/%s" % list_2[0]
                            dict_value[key_name] = list_2[1].lstrip().rstrip()
            for k in range(label_i + 1, length):
                show_info_list_line_1 = show_info_list_line[k].split(")", 1)
                show_info_list_line_2 = show_info_list_line_1[0].rstrip() + ")" + show_info_list_line_1[1]
                col_value_list = re.split(r'\s{2,}', show_info_list_line_2)
                title_col = col_value_list[0]  # *****
                if value_title in col_value_list:
                    title_row = col_value_list
                else:
                    if col_value_list != "":
                        rol_title_list.append(title_col)
                        for s in range(1, len(col_value_list)):  # *****
                            key_name = '%s/%s' % (title_col, title_row[s])
                            dict_value[key_name] = col_value_list[s]
                        # key_name = '%s/%s' % (title_col, title_row[0])
                        # dict_value[key_name]=col_value_list[0]
            dict_value["ip_address_list"] = rol_title_list
            return dict_value
        else:
            dict_value = {}
            show_info_list = self.dut_get_start_show_info(show_info)
            new_list = []
            for value in show_info_list:
                if re.match("IPV4 sessions: (\S+), UP: (\S+)", value):
                    obj = re.match("IPV4 sessions: (\S+), UP: (\S+)", value)
                    dict_value["IPV4 sessions"] = obj.group(1)
                    dict_value["IPV4 sessions/UP"] = obj.group(2)
                elif re.match("IPV6 sessions: (\S+), UP: (\S+)", value):
                    obj = re.match("IPV6 sessions: (\S+), UP: (\S+)", value)
                    dict_value["IPV6 sessions"] = obj.group(1)
                    dict_value["IPV6 sessions/UP"] = obj.group(2)
                    dict_value["IPV6 sessions/ UP"] = obj.group(2)
                # else:
                #     if len(re.split("\s{2,}", value.strip())) == 6:
                #         new_list.append(value)

            star,end,show_len_list,show_info_list_line = self.dut_common_get_linelist(show_info,"OurAddr",split_num=2)
            show_len_list[1] = show_len_list[1] - 5
            show_len_list[2] = show_len_list[2] + 5
            dict_value_2 = self.dut_show_autoget_form(star,end,"OurAddr",show_len_list,show_info_list_line)
            #new_show_info = "\n".join(new_list)
            #dict_value_2 = self.dut_show_autoget_blank_list(new_show_info, "OurAddr")
            for k, v in dict_value_2.items():
                if "Interface" in k:
                    k_tmp = k.replace("Interface", "Int")
                    v_tmp = self._dut_get_show_bfd_neighbors_details_format_intf(v)
                    if "(" in str(v_tmp):
                        v_tmp = str(v_tmp).replace("("," (")
                    dict_value[k_tmp] = v_tmp
                elif "OurAddr_list" in k:
                    k = "ip_address_list"
                dict_value[k] = v
            return dict_value
    def dut_get_show_bfd_neighbors_vrf_word(self,show_info):
        """
        Function:show bfd neighbors vrf 1回显解析函数
        CLI命令:show bfd neighbors vrf 1
        回显信息示例:
DUT1#show bfd neighbors vrf 1
IPV4 sessions: 1, UP: 1
IPV6 sessions: 0, UP: 0
OurAddr                         NeighAddr                             LD/RD      RH/RS     Holdown(mult)  State  Int                 
192.168.1.1                     192.168.1.2                         8192/8192    Up              0(3   )  Up     GigabitEthernet 3/8

        Returns:
{"192.168.1.1/LD/RD": "8192/8192"
"IPV4 sessions": "1"
"192.168.1.1/NeighAddr": "192.168.1.2"
"ip_address_list": ["192.168.1.1"], "IPV6 sessions": "0"
"192.168.1.1/RH/RS": "Up"
"192.168.1.1/State": "Up"
"IPV4 sessions/UP": "1"
"IPV6 sessions/ UP": "0"
"192.168.1.1/Int": "GigabitEthernet 3/8 "
"192.168.1.1/Holdown(mult)": "0(3)"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bfd neighbors vrf 1 | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """
        return self.dut_get_show_bfd_neighbors(show_info)
    def dut_get_show_clock(self,show_info):
        """
        Function:show clock回显解析函数
        CLI命令:show clock
        回显信息示例:
5848VAC#show clock 
07:12:40 UTC Thu, Mar  1, 2018
5848VAC#

        Returns:
{'week': 'Thu'
'hour': '07'
'time_zone': 'UTC'
'month': 'Mar'
'time_format': '2018-03-1 07:12:40'
'second': '40'
'year': '2018'
'day': '1'
'minute': '12'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show clock | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*config.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*show clock.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        for list_value in show_info_list_line:
            #07:12:40 UTC Thu, Mar  1, 2018
            time_list = ['hour','minute','second','time_zone','week','month','day','year']
            str_re = re.search('(.*):(.*):(.*)\s(.*)\s(.*)\,(.*)\s+(.*)\,(.*)',list_value)
            for i in range(len(time_list)):
                dict_value[time_list[i]] = str_re.group(i+1).lstrip().rstrip()
        dict_yuefen = {"Jan":"01","Feb":"02","Mar":"03","Apr":"04","May":"05","Jun":"06","Jul":"07","Aug":"08","Sep":"09","Oct":"10","Nov":"11","Dec":"12"}
        yuefen = dict_yuefen[dict_value['month']]
        time_format = dict_value['year']+"-"+yuefen+"-"+dict_value['day']+" "+dict_value['hour']+":"+dict_value['minute']+":"+dict_value['second']
        dict_value["time_format"] = time_format
        return dict_value
    def dut_get_debug_scc_sta(self,show_info):  # 函数名由锐捷提供
        """
        Function:debug scc status回显解析函数
        CLI命令:debug scc status
        回显信息示例:
Ruijie#debug scc sta
================== sccd server info =================
rdnd role       : 2/2.
ready notify    : CLI LSM BRIDGE SS ACLK BRIDGE-READY VFW PGSQL 
aclk-socket info: async - 6, sync - 9, alive - 5. snd_cnt:1258. rcv_cnt:1258
data sync info  : depend/ready(0x8001e/0x8001e) aclk(req:0) ss(req:0) mac(req:0) pgsql(req:0)
current scc mode: AUTHEN MODE, new mode(AUTHEN MODE).
ability         : 0x3f.
detect_status   :[Global] open, interval:480 min, threshold:0 bytes.
station move    : open.
ipam status     : enable.
dot1x cpp       : unset.   author mode:None.
auth reboot     : close.
proc status     : svrid:631 todo-cnt:0 ret-cnt:0.
max wait        : client:-1, cost:29017(ms)
max proc        : client:7, svrid:37, tlvtype:105, ss-cnt:0, aclk-cnt:0 rv:0. cost:3343(ms).
cnt-stat        : web-query-add-arp:[4], web-query-del-arp:[0].
                : add-arp:[0], del-arp:[0].
                : add-mac:[184], del-mac:[184].

        Returns:
{"proc status/svrid": "631"
"dot1x cpp/author mode": "None"
"data sync info/mac/req": "0"
"aclk-socket info/snd_cnt": "1258"
"cnt-stat/web-query-add-arp": "[4]"
"rdnd role": "2/2"
"max wait/client": "-1"
"max proc/aclk-cnt/rv": "0"
"aclk-socket info/rcv_cnt": "1258"
"station move": "open"
"cnt-stat/add-arp": "[0]"
"aclk-socket info/async": "6"
"max proc/client": "7"
"cnt-stat/web-query-del-arp": "[0]"
"max proc/tlvtype": "105"
"detect_status/interval": "480 min"
"max wait/cost": "29017(ms)"
"proc status/ret-cnt": "0"
"cnt-stat/del-arp": "[0]"
"max proc/cost": "3343(ms)"
"ability": "0x3f"
"ready notify": "CLI LSM BRIDGE SS ACLK BRIDGE-READY VFW PGSQL "
"max proc/svrid": "37"
"max proc/ss-cnt": "0"
"ipam status": "enable"
"data sync info": "depend/ready(0x8001e/0x8001e)"
"detect_status": "[Global] open"
"aclk-socket info/sync": "9"
"aclk-socket info/alive": "5"
"data sync info/aclk/req": "0"
"detect_status/threshold": "0 bytes"
"auth reboot": "close"
"data sync info/ss/req": "0"
"dot1x cpp": "unset"
"current scc mode": "AUTHEN MODE, new mode(AUTHEN MODE)"
"cnt-stat/del-mac": "[184]"
"cnt-stat/add-mac": "[184]"
"proc status/todo-cnt": "0"
"data sync info/pgsql/req": "0"
"max proc/aclk-cnt": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=debug scc status | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        # value_title定义主键的id，即列表中的唯一值
        dict_value = {}
        #########################################################################################
        # 用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
                ##########################################################################
        # 开始判断
        ##########################################################################
        length = len(dut_info_split)


        # 经验证，此种裁剪方式下  需要单独加入的键值对
        for ii in range(length):
            if re.match(r'data sync info',dut_info_split[ii]):
                alone_join = re.match('(.*?):(.*)',dut_info_split[ii])
                dict_value[alone_join.group(1).rstrip()] = re.split(' ',alone_join.group(2).lstrip())[0]

            if re.match(r'detect_status',dut_info_split[ii]):
                alone_join = re.match('(.*?):(.*)', dut_info_split[ii])
                dict_value[alone_join.group(1).rstrip()] = re.split(',',alone_join.group(2))[0]

            if re.match(r'dot1x cpp',dut_info_split[ii]):
                alone_join = re.match('(.*?):(.*)', dut_info_split[ii])
                dict_value[alone_join.group(1).rstrip()] = re.split(' ',alone_join.group(2))[1].strip('.')


        # 需要单独处理的proc status行
        for ii in range(length):
            if re.match(r'proc status',dut_info_split[ii]):
                matchObj_out = re.match(r'(.*?):(.*)', dut_info_split[ii])  #首先匹配左边第一个冒号
                temp_num = ii
                tempList = re.split(r' ',matchObj_out.group(2).lstrip()) #存储右边各元素，以空格分隔(lstrip()过滤左边空格)
                for jj in range(len(tempList)):
                    matchObj_in = re.match(r'(.*?):(.*)', tempList[jj])
                    # 拼接key
                    key_name = matchObj_out.group(1).strip() + '/' + matchObj_in.group(1).strip()
                    dict_value[key_name] = matchObj_in.group(2).strip().strip('.')  # 最简单类型的字典添加
        dut_info_split.remove(dut_info_split[temp_num]) # 删除处理之后的行
        length = len(dut_info_split)

        # 需要单独处理的data sync info行
        for ii in range(length):
            if re.match(r"data sync info",dut_info_split[ii]):
                matchObj_out = re.match(r'(.*?):(.*)', dut_info_split[ii])  #首先匹配左边第一个冒号
                temp_num = ii
                tempList = re.split(r' ',matchObj_out.group(2).lstrip()) #存储右边各元素，以空格分隔(lstrip()过滤左边空格)
                for jj in range(len(tempList)-1):
                    matchObj_in = re.match(r'(.*?):(.*)', tempList[jj+1])
                    # 拼接key
                    key_name = matchObj_out.group(1).strip() + '/' + matchObj_in.group(1).replace(r'(','/').strip()
                    dict_value[key_name] = matchObj_in.group(2).strip(')').strip()  # 最简单类型的字典添加
        dut_info_split.remove(dut_info_split[temp_num]) # 删除处理之后的行

        length = len(dut_info_split)
        # 需要单独处理的cnt-stat及其后两行
        for ii in range(length):
            if re.match(r"cnt-stat", dut_info_split[ii]):
                while ii<length:
                    matchObj_out = re.match(r'(.*?):(.*)', dut_info_split[ii])  # 首先匹配左边第一个冒号
                    tempList = re.split(r', ', matchObj_out.group(2).lstrip())  # 存储右边各元素，以空格分隔(lstrip()过滤左边空格)
                    for jj in range(len(tempList)):
                        matchObj_in = re.match(r'(.*?):(.*)', tempList[jj])
                        # 拼接key
                        key_name = 'cnt-stat' + '/' + matchObj_in.group(1)
                        dict_value[key_name] = matchObj_in.group(2).strip().strip('.')  # 字典添加
                    ii = ii+1

        dut_info_split.remove(dut_info_split[-1])  # 删除处理之后的行
        dut_info_split.remove(dut_info_split[-1])
        dut_info_split.remove(dut_info_split[-1])

        length = len(dut_info_split) # 删除后长度减小，重新计算
        for i in range(length):
            if re.match(r'^(.*):(.*)', dut_info_split[i]):
                matchObj = re.match(r'(.*?):(.*)', dut_info_split[i]) #非贪婪匹配,只匹配每行第一个冒号
                if not re.match(r'.*:.*',matchObj.group(2)): #如果组2没有冒号
                    dict_value[matchObj.group(1).rstrip()] = matchObj.group(2).lstrip().strip('.') #最简单类型的字典添加(去除.)
                else:
                    # matchObj.group(2).strip('.') #删除头尾多余的.
                    tempStr = re.split(r",|\.",matchObj.group(2)) # 要记得转义. 不然匹配失败
                    length = len(tempStr)
                    for j in range(length):
                        if re.match(r'(.*?)- (.*)', tempStr[j]):  # 分情况讨论 -后面不能忘记空格,以免和后面类似于add-arp类型混淆
                            matchObj1 = re.match(r'(.*?)- (.*)', tempStr[j])  #
                            # 拼接key
                            key_name = matchObj.group(1).strip() + '/' + matchObj1.group(1).strip()
                            dict_value[key_name] = matchObj1.group(2).strip()  # 最简单类型的字典添加

                        if re.match(r'(.*?):(.*)', tempStr[j]):  # 第二种情况
                            matchObj1 = re.match(r'(.*?):(.*)', tempStr[j])  #
                            # 拼接key
                            key_name = matchObj.group(1).strip() + '/' + matchObj1.group(1).strip()
                            dict_value[key_name] = matchObj1.group(2).strip()  # 最简单类型的字典添加

                            if matchObj1.group(2) == '0 rv:0': #这种情况需单独列出
                                key_name = matchObj.group(1).strip() + '/' + matchObj1.group(1).strip()
                                dict_value[key_name] = matchObj1.group(2)[0]  # 添加
                                key_name = key_name + '/' + 'rv'
                                dict_value[key_name] = matchObj1.group(2)[-1]  # 添加


        return dict_value

    def dut_get_show_addressmanage(self,show_info):
        """
        Function:show address-manage回显解析函数
        CLI命令:show address-manage
        回显信息示例:
Ruijie#show address-manage 
Current ip loose mode is enable.
Default IP       Default MASK     
--------------- --------------- 
2.2.0.0         255.255.0.0    

IP              MASK            Ports     VLAN-SET
--------------- --------------- --------- --------------------
3.3.0.0         255.255.0.0               1000
4.4.0.0         255.255.0.0     Gi2/2/2   220

        Returns:
{'2.2.0.0/Default MASK': '255.255.0.0'
'IP_list': ['3.3.0.0'
'4.4.0.0'], 'Default_IP_list': ['2.2.0.0'], '4.4.0.0/VLAN-SET': '220'
'3.3.0.0/VLAN-SET': '1000'
'4.4.0.0/MASK': '255.255.0.0'
'4.4.0.0/Ports': 'Gi2/2/2'
'3.3.0.0/MASK': '255.255.0.0'
'3.3.0.0/Ports': ''}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show address-manage | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show add.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')

        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if "Default IP" in show_info_list_line[line_len_num]:              #***********
                table_1 = line_len_num
            if "VLAN-SET" in show_info_list_line[line_len_num]:              #***********
                table_2 = line_len_num

        cut_flag = 0
        for cut_value_num in range(table_1,table_2):
            cut_flag = cut_value_num+1
            cut_value = show_info_list_line[cut_value_num]
            if cut_value != "":
                if re.match(".*---.*",cut_value) :
                    cut_del_1 = cut_flag
                    cut_value_list = cut_value.split()
                    col_len_list_1 = []
                    for cut_value_list_value in cut_value_list:
                        col_len_list_1.append(len(cut_value_list_value)+1)
        cut_flag = 0
        for cut_value_num in range(table_2,line_len):
            cut_flag = cut_value_num+1
            cut_value = show_info_list_line[cut_value_num]
            if cut_value != "":
                if re.match(".*---.*",cut_value) :
                    cut_del_2 = cut_flag
                    cut_value_list = cut_value.split()
                    col_len_list_2 = []
                    for cut_value_list_value in cut_value_list:
                        col_len_list_2.append(len(cut_value_list_value)+1)
        show_info_list_line.remove(show_info_list_line[cut_del_1-1])
        show_info_list_line.remove(show_info_list_line[cut_del_2-2])
        ##print col_len_list
        col_list_all_num_1 = len(col_len_list_1)
        col_list_all_num_2 = len(col_len_list_2)
        row_list_all_num = len(show_info_list_line)

        for line_len_num in range(0,row_list_all_num):
            if "Default IP" in show_info_list_line[line_len_num]:              #***********
                table_3 = line_len_num
            if "VLAN-SET" in show_info_list_line[line_len_num]:              #***********
                table_4 = line_len_num


        value_title="Default IP"
        address_list = []
        title_row =[]

        for i in range (table_3,table_4):    #line_len-1:上面删除“-----”这一行了
            ##print show_info_list_line[i]
            cut_star = 0
            cut_end=0
            col_value_list = []
            show_info_list_line[i] = show_info_list_line[i].lstrip()
            ##print show_info_list_line[i]
            if show_info_list_line[i] != "" :
                for j in range(col_list_all_num_1):
                    cut_end = cut_end+int(col_len_list_1[j])
                    col_value = show_info_list_line[i][cut_star:cut_end]
                    cut_star = cut_end
                    col_value = col_value.lstrip()
                    col_value = col_value.rstrip()
                    col_value_list.append(col_value)
                #获取表头的列，用于组合
                ##print col_value_list
                title_col = col_value_list[0]          #需要变参的地方
                if title_col==value_title:
                    title_row = col_value_list
                elif title_col!=value_title:
                    #生成字典
                    address_list.append(title_col)
                    #遍历列头右边的值
                    for s in range(1,col_list_all_num_1):  #需要变参的地方
                        #key_name = '%s/%s' % (title_col,title_row[s])
                        key_name = '%s/%s'%(title_col,title_row[s])
                        dict_value[key_name]=col_value_list[s]
                    ##遍历列头右边的值
                    #key_name = '%s/%s' % (title_col, title_row[0])
                    #dict_value[key_name]=col_value_list[0]
                dict_value["Default_IP_list"]=address_list


        value_title_2="IP"
        address_list_2 = []
        title_row_2 =[]

        for i in range (table_4,row_list_all_num):    #line_len-1:上面删除“-----”这一行了
            ##print show_info_list_line[i]
            cut_star = 0
            cut_end=0
            col_value_list_2 = []
            show_info_list_line[i] = show_info_list_line[i].lstrip()
            ##print show_info_list_line[i]
            if show_info_list_line[i] != "" :
                for j in range(col_list_all_num_2):
                    cut_end = cut_end+int(col_len_list_2[j])
                    col_value = show_info_list_line[i][cut_star:cut_end]
                    cut_star = cut_end
                    col_value = col_value.lstrip()
                    col_value = col_value.rstrip()
                    col_value_list_2.append(col_value)
                #获取表头的列，用于组合
                ##print col_value_list
                title_col = col_value_list_2[0]          #需要变参的地方
                if title_col==value_title_2:
                    title_row_2 = col_value_list_2
                elif title_col!=value_title_2:
                    #生成字典
                    address_list_2.append(title_col)
                    #遍历列头右边的值
                    ##print title_row_2
                    for s in range(1,col_list_all_num_2):  #需要变参的地方
                        key_name = '%s/%s'%(title_col,title_row_2[s])
                        dict_value[key_name]=col_value_list_2[s]
                    ##遍历列头右边的值
                    #key_name = '%s/%s' % (title_col, title_row[0])
                    #dict_value[key_name]=col_value_list[0]
                dict_value["IP_list"]=address_list_2

        return dict_value
    def dut_get_show_ip_ref_route_statistics(self,show_info):
        """
        Function:show ip ref route statistics回显解析函数
        CLI命令:show ip ref route statistics
        回显信息示例:
5848VAC#show ip ref route statistics 
global route table statistic:
    Common route         : 5
    Direct net route     : 0
    Direct net addr route: 1
    Net bcast route      : 1
    Local route          : 2
    Default route        : 0
    Drop route           : 0
    MPLS FTN route       : 0
5848VAC#

        Returns:
{'Net bcast route': '1'
'Direct net addr route': '1'
'global route table statistic': ''
'MPLS FTN route': '0'
'Direct net route': '0'
'Common route': '5'
'Default route': '0'
'Local route': '2'
'Drop route': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip ref route statistics | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        str_arg = "show ip ref"
        return self.dut_get_show_info_analy_all_colon(show_info,str_arg)
    def dut_get_debug_acl_efacl_nacshow_webauth(self,show_info):
        """
        Function:debug acl efacl nac-show webauth回显解析函数
        CLI命令:debug acl efacl nac-show webauth
        回显信息示例:
Ruijie#*Feb  7 07:47:42: %7: VSD0000:
*Feb  7 07:47:42: %7: ==========================================================
*Feb  7 07:47:42: %7:  Webauth port open    :
*Feb  7 07:47:42: %7:       13      17      24  
*Feb  7 07:47:43: %7:   Total 3 port(s) open webauth.
*Feb  7 07:47:43: %7: 
*Feb  7 07:47:43: %7:  Webauth user sumary :
*Feb  7 07:47:43: %7:   NAC-APP-NAME            MAC-NUM   IPv4-NUM   IPv4+MAC-NUM   IPv6-NUM   IPv6+MAC-NUM VLAN-NUM
*Feb  7 07:47:43: %7:   -----------------------------------------------------------------------------------
*Feb  7 07:47:43: %7:   WEB Authentication      0         0          1              0          0              0        
*Feb  7 07:47:43: %7:   ---------------------------------END-----------------------------------------------
*Feb  7 07:47:43: %7:  Webauth user detail info :
*Feb  7 07:47:43: %7:   IPv4(IPv6)                               MAC                  VID            INNER_VID        IFX   
*Feb  7 07:47:43: %7:   ----------------------------------------------------------------------------------------------------
*Feb  7 07:47:43: %7:   5.0.0.2                                  e0:05:c5:ef:e2:0d  1600     0      17
*Feb  7 07:47:43: %7:   ---------------------------------END----------------------------------------

        Returns:
{'Webauth user sumary/WEB Authentication/VLAN-NUM': '0'
'Webauth user sumary/WEB Authentication/MAC-NUM': '0'
'Webauth user detail info/ MAC': 'e0:05:c5:ef:e2:0d'
'Webauth port open': ['13'
'17'
'24'], 'Webauth port open/Total': 'Total 3 port(s)'
'Webauth user sumary/WEB Authentication/IPv6-NUM': '0'
'Webauth user detail info/VID': '1600'
'Webauth user sumary/WEB Authentication/IPv6+MAC-NUM': '0'
'Webauth user detail info/INNER_VID': '0'
'Webauth user detail info/IPv4(IPv6)': '5.0.0.2'
'Webauth user detail info/IFX': '17'
'Webauth user sumary/WEB Authentication/IPv4+MAC-NUM': '1'
'Webauth user sumary/WEB Authentication/IPv4-NUM': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=debug acl efacl nac-show webauth | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        # 用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split

        # 删除类似于*Feb  7 07:47:42: %7:的字符串
        for i in range(len(show_info_split)):
            if re.match(r'(^\*[a-zA-Z]+.*%\d:\s)', show_info_split[i]):  # 进行通用匹配
                preMatchObj = re.match(r'(^\*[a-zA-Z]+.*%\d:)(.*)', show_info_split[i])
                dut_info_split[i] = preMatchObj.group(2)

        # 去除  ===，---  ---END---所在及空行
        temp_info = []
        for i in range(len(dut_info_split)):
            if not re.match(r'====+', dut_info_split[i].strip()):
                # temp_info.append(dut_info_split[i])
                if not re.match(r'----*', dut_info_split[i].strip()):
                    # temp_info.append(dut_info_split[i])
                    if not re.match(r'-*END-*', dut_info_split[i].strip()):
                        if not dut_info_split[i].strip() == '':
                            temp_info.append(dut_info_split[i])
        dut_info_split = temp_info

        # 开始分情况讨论

        # 1.单独处理 Webauth port open:
        for i in range(len(dut_info_split)):
            if re.match('Webauth port open', dut_info_split[i].strip()): # 匹配第一段
                key_name = dut_info_split[i].strip(':').strip()
                temp_list = dut_info_split[i+1].strip().split(' ')
                for temp in range(len(temp_list)):
                    temp_list[temp].strip()
                while '' in temp_list: # 删除列表空元素
                    temp_list.remove('')
                temp_list2 = dut_info_split[i+2].strip().split(' ') # 获取元素
                temp_str = temp_list2[0] + ' ' +temp_list2[1]+' '+temp_list2[2]
                dict_value[key_name+'/'+temp_list2[0]] = temp_str # 端口总数 total
                dict_value[key_name] = temp_list # 端口列表list

        # 处理完成之后，删除前三行
        dut_info_split.remove(dut_info_split[0])
        dut_info_split.remove(dut_info_split[0])
        dut_info_split.remove(dut_info_split[0])

        # 2.第二段情况 Webauth user sumary
        for i in range(len(dut_info_split)):
            if re.match('Webauth user sumary', dut_info_split[i].strip()): # 匹配第一段
                out_name = dut_info_split[i].strip(':').strip() # 形如Webauth user sumary

                temp_list_2 = dut_info_split[i+1].strip().split(' ') # 切分表头行
                for temp in range(len(temp_list_2)):
                    temp_list_2[temp].strip()
                while '' in temp_list_2:  # 删除列表空元素
                    temp_list_2.remove('')  #得到纯净的表头行

                temp_list2_2 = dut_info_split[i+2].strip().split('   ') # 原理同上
                for temp in range(len(temp_list2_2)):
                    temp_list2_2[temp].strip()
                while '' in temp_list2_2:  # 删除列表空元素
                    temp_list2_2.remove('')

                # 拼接key_name ,NAC-APP-NAME未列进来，在temp_list_2[0]处
                for i in range(len(temp_list_2)-1):
                    key_name = out_name + '/' + temp_list2_2[0] + '/' + temp_list_2[i+1]
                    dict_value[key_name] = temp_list2_2[i+1].strip()
        # 处理完成之后，删除前三行
        dut_info_split.remove(dut_info_split[0])
        dut_info_split.remove(dut_info_split[0])
        dut_info_split.remove(dut_info_split[0])

        # 3.第三段情况 Webauth user detail info
        for i in range(len(dut_info_split)):
            if re.match('Webauth user detail info', dut_info_split[i].strip()):  # 匹配第一段
                out_name = dut_info_split[i].strip(':').strip()  # 形如Webauth user detail info
                temp_list_3 = dut_info_split[i+1].strip().split('  ')  # 切分表头行
                for temp in range(len(temp_list_3)):
                    temp_list_3[temp].strip()
                while '' in temp_list_3:  # 删除列表空元素
                    temp_list_3.remove('')  # 得到纯净的表头行

                temp_list2_3 = dut_info_split[i+2].strip().split(' ')  # 原理同上
                for temp in range(len(temp_list2_3)):
                    temp_list2_3[temp].strip()
                while '' in temp_list2_3:  # 删除列表空元素
                    temp_list2_3.remove('')

                # 拼接key_name
                for i in range(len(temp_list_3)):
                    key_name = out_name + '/' + temp_list_3[i]
                    dict_value[key_name] = temp_list2_3[i]

        o = 0
        return dict_value
    def dut_get_show_ip_ref_adjacency_statistics(self,show_info):
        """
        Function:show ip ref adjacency statistics回显解析函数
        CLI命令:show ip ref adjacency statistics
        回显信息示例:
5848VAC#show ip ref adjacency statistics 
adjacency balance table statistic:
    dest-address load-sharing
    balance: 0

adjacency node table statistic:
    total  : 6
    local  : 1
    glean  : 1
    forward: 1
    discard: 0
    mcast  : 1
    punt   : 1
    bcast  : 1

        Returns:
{'balance': '0'
'glean': '1'
'mcast': '1'
'punt': '1'
'forward': '1'
'discard': '0'
'adjacency node table statistic': ''
'total': '6'
'local': '1'
'adjacency balance table statistic': 'dest-address load-sharing'
'bcast': '1'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip ref adjacency statistics | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        length = len(dut_info_split)

        for i in range(length):
            if re.match('adjacency balance',dut_info_split[i]):
                key = dut_info_split[i].strip(':')
                value = dut_info_split[i+1]
                value = value.strip()
                dict_value[key] = value
                dut_info_split.remove(dut_info_split[i+1])
                dut_info_split.remove(dut_info_split[i])
                break

        length = len(dut_info_split)
        for i in range(length):
            if re.match('(.*):(.*)',dut_info_split[i]):
                matchObj = re.match('(.*):(.*)',dut_info_split[i])
                key = matchObj.group(1).strip()
                if matchObj.group(2)=='':
                    value = ''
                else:
                    value = matchObj.group(2).strip()
                dict_value[key] = value
        return dict_value

    def dut_get_show_device_id(self,show_info):
        """
        Function:show device id回显解析函数
        CLI命令:show device id
        回显信息示例:
lyq5848VAC#show device id 
Device ID is 1

        Returns:
{"Device ID": "1"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show device id | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value ={}
        dut_info_split = show_info.split("\n")
        if re.match(r'.*device id.*',dut_info_split[0]):
            dut_info_split.remove(dut_info_split[0])
        if re.match(r'.*#.*', dut_info_split[-1]):
            dut_info_split.remove(dut_info_split[-1])
        dut_info_split1 =[]
        for value in dut_info_split:
            if "is" in value:
                dut_info_split1 = value.split("is")
        key_name = dut_info_split1[0].strip()
        dict_value[key_name] = dut_info_split1[1].lstrip().rstrip()
        return dict_value
    def dut_get_show_virtualac_topology(self,show_info):
        """
        Function:show virtual-ac topology回显解析函数
        CLI命令:show virtual-ac topology
        回显信息示例:
AC#show virtual-ac topology 
Switch[1]: master, MAC: 5869.483c.a127, Description: 18K-1-AC1
Switch[2]: candidate, MAC: 5869.6c12.a0c2, Description: 18K-2-AC2
Switch[3]: standby, MAC: 1414.4b7f.7bff, Description: 18K-2-AC3
AC#

        Returns:
{'Switch[2]/MAC': '5869.6c12.a0c2'
'Switch[2]/Description': '18K-2-AC2'
'Switch[3]/MAC': '1414.4b7f.7bff'
'Switch[3]/Description': '18K-2-AC3'
'Switch[1]/MAC': '5869.483c.a127'
'Switch[2]/Switch[2]': 'candidate'
'Switch[3]/Switch[3]': 'standby'
'Switch[1]/Switch[1]': 'master'
'Switch[1]/Description': '18K-1-AC1'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show virtual-ac topology | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value ={}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*virtual-ac topology.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        ##print show_info_list_line

        for show_info_list_line_value in show_info_list_line:
            list_1 = show_info_list_line_value.split(",")
            for list_1_value in list_1:
                list_2 = list_1_value.split(":")
                if 'Switch' in list_2[0]:
                    title = list_2[0]
                key_name = "%s/%s"%(title,list_2[0].lstrip().rstrip())
                dict_value[key_name] = list_2[1].lstrip().rstrip()
        return dict_value

    def dut_get_show_vlan(self,show_info):
        """
        Function:show vlan回显解析函数
        CLI命令:show vlan
        回显信息示例:
11#show vlan
VLAN       Name                             Status    Ports
---------- -------------------------------- --------- -----------------------------------
         1 VLAN0001                         STATIC    Fa0/1, Fa0/2, Fa0/3, Fa0/4            
                                                      Fa0/5, Fa0/6, Fa0/7, Fa0/8            
                                                      Fa0/9, Fa0/10, Fa0/11, Fa0/12         
                                                      Fa0/13, Fa0/14, Fa0/15, Fa0/16        
                                                      Fa0/17, Fa0/18, Fa0/19, Fa0/20        
                                                      Fa0/21, Fa0/22, Fa0/24, Gi0/25        
                                                      Gi0/26, Gi0/27, Gi0/28                
      4094 VLAN4094                         STATIC    Fa0/23

        Returns:
{'1/Name': 'VLAN0001'
'4094/Status': 'STATIC'
'1/Status': 'STATIC'
'11#sh vlan/Name': ''
'11#sh vlan/Ports': [''], '4094/Ports': ['Fa0/23'], '4094/Name': 'VLAN4094'
'1/Ports': ['Fa0/1'
'Fa0/2'
'Fa0/3'
'Fa0/4'
'Fa0/5'
'Fa0/6'
'Fa0/7'
'Fa0/8'
'Fa0/9'
'Fa0/10'
'Fa0/11'
'Fa0/12'
'Fa0/13'
'Fa0/14'
'Fa0/15'
'Fa0/16'
'Fa0/17'
'Fa0/18'
'Fa0/19'
'Fa0/20'
'Fa0/21'
'Fa0/22'
'Fa0/24'
'Gi0/25'
'Gi0/26'
'Gi0/27'
'Gi0/28'], '11#sh vlan/Status': ''}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show vlan | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """


        dict_value = {}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show vlan.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')

        line_len = len (show_info_list_line)
        cut_flag = 0
        for cut_value in show_info_list_line :
            cut_flag = cut_flag+1
            if cut_value != "":
                if re.match(".*---.*",cut_value) :
                    cut_del = cut_flag
                    cut_value_list = cut_value.split()
                    col_len_list = []
                    for cut_value_list_value in cut_value_list:
                        col_len_list.append(len(cut_value_list_value)+1)
        col_len_list.pop()
        col_len_list.append(40)
        show_info_list_line.remove(show_info_list_line[cut_del-1])

        col_list_all_num = len(col_len_list)
        row_list_all_num = len(show_info_list_line)
        ##print col_list_all_num
        ##print row_list_all_num
        value_title="VLAN"
        address_list = []
        title_row =[]
        a = 0
        for i in range (0,line_len-1):    #line_len-1:上面删除“-----”这一行了
            ##print show_info_list_line[i]
            cut_star = 0
            cut_end=0
            col_value_list = []
            show_info_list_line[i] = show_info_list_line[i]
            ###print show_info_list_line[i]
            if show_info_list_line[i] != "" :
                for j in range(col_list_all_num):
                    cut_end = cut_end+int(col_len_list[j])
                    col_value = show_info_list_line[i][cut_star:cut_end]
                    cut_star = cut_end
                    col_value = col_value.lstrip()
                    col_value = col_value.rstrip()
                    col_value_list.append(col_value)
                #获取表头的列，用于组合
                ###print col_value_list
                title_col = col_value_list[0]          #需要变参的地方
                ###print title_col
                if title_col==value_title:
                    title_row = col_value_list
                    # ##print "99999999999"
                    # ##print title_row
                elif title_col!=value_title:
                    #生成字典
                    if title_col != "" :
                        ###print "123"
                        if a == 1 :
                            #遍历列头右边的值
                            for s in range(1,len(new_list)):  #需要变参的地方
                                key_name = '%s/%s'%(new_list[0],title_row[s])
                                if s == len(new_list)-1 :
                                    port_list = []
                                    port_list = re.split(",",new_list[s].replace(" ",""))
                                    dict_value[key_name]=port_list
                                else:
                                    dict_value[key_name]=new_list[s]
                            ###print new_list
                            a = 0
                        if i == line_len-2 :   #如果最后一行为完整的
                            new_list = []
                            ###print len(col_value_list)
                            for list_1_num in range (len(col_value_list)):
                                ###print col_value_list[list_1_num]
                                new_list.append(col_value_list[list_1_num])
                            for s in range(1,len(new_list)):  #遍历右边    需要变参的地方
                                key_name = '%s/%s'%(new_list[0],title_row[s])
                                if s == len(new_list)-1 :
                                    port_list = []
                                    port_list = re.split(",",new_list[s].replace(" ",""))
                                    dict_value[key_name]=port_list
                                else:
                                    dict_value[key_name]=new_list[s]
                        else:
                            a = 1
                            new_list = []
                            ##print len(col_value_list)
                            for list_1_num in range (len(col_value_list)):
                                ##print col_value_list[list_1_num]
                                new_list.append(col_value_list[list_1_num])
                    else:
                        ###print "456"
                        for list_1_num in range (len(col_value_list)):
                            ##print new_list[list_1_num]
                            ##print col_value_list[list_1_num]
                            if "/" in col_value_list[list_1_num] :    #**********************
                                new_list[list_1_num] =new_list[list_1_num]+","+col_value_list[list_1_num]
                            else:
                                new_list[list_1_num] =new_list[list_1_num]+col_value_list[list_1_num]
                        if i == line_len-2 :   #如果最后一行为不完整的
                            for s in range(1,len(new_list)):           #遍历右边    需要变参的地方
                                key_name = '%s/%s'%(new_list[0],title_row[s])
                                ##print title_col,title_row[s]
                                if s == len(new_list)-1 :
                                    port_list = re.split(",",new_list[s].replace(" ",""))
                                    dict_value[key_name]=port_list
                                else:
                                    dict_value[key_name]=new_list[s]
        return dict_value
    def dut_get_show_bgp_cidronly(self,show_info):
        value_title="Network"     #需要变参的地方
        col_len_list = []
        #创建字典
        dict_value={}
        rol_title_list = []
        title_row =[]
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show bgp.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if "BGP table" in show_info_list_line[line_len_num]:              #***********
                list_1 = show_info_list_line[line_len_num].split(",")
                for list_1_value in list_1:
                    list_2 = list_1_value.split("is")
                    key_name = '%s'%list_2[0].lstrip().rstrip()
                    dict_value[key_name] = '%s'%list_2[1].lstrip().rstrip()
            if "Total number" in show_info_list_line[line_len_num]:              #***********
                ojb = re.match(r"Total number of prefixes(.*)",show_info_list_line[line_len_num])
                dict_value["Total number of prefixes"] = ojb.group(1).lstrip().rstrip()
            if "Next Hop" in show_info_list_line[line_len_num]:              #***********
                end_num = line_len_num
        #for i in range(length):
        #    if "System Name" in show_info_list_line[i] :
        #        label_i= i
        for k in range(end_num,line_len):
            col_value_list = re.split(r'\s{1,}', show_info_list_line[k].lstrip() )
            ##print col_value_list
            title_col = col_value_list[0]           #*****
            ##print title_col
            if value_title in col_value_list :
                title_row = col_value_list
            else:
                if col_value_list != "":
                    rol_title_list.append(title_col)
                    for s in range (1,len(col_value_list)-1):           #*****
                        key_name = '%s/%s'%(title_col,title_row[s])
                        dict_value[key_name]=col_value_list[s]
                    #key_name = '%s/%s' % (title_col, title_row[0])
                    #dict_value[key_name]=col_value_list[0]
        dict_value["Network_list"] = rol_title_list
        return dict_value

    def dut_get_show_net_statistic(self,show_info):
        """
        Function:show net statistic回显解析函数
        CLI命令:show net statistic
        回显信息示例:
18k/DUT1#show net statistic
--------------- VRF STATISTIC INFO --------------
vrf_sys_max_instances:    500
vrf_max_index:            4096
current_vrfs:             0

------------ NETIF STATISTIC INFO ---------------
L3 interface count:       10

----------- IP ADDRESS STATISTIC INFO -----------
ipv4_address_limit:       4000
ipv4_address_count:       2

--------------- ARP STATISTIC INFO --------------
g_arp_total_cnt:          7
g_arp_dyn_static_cnt:     4
g_arp_static_cnt:         0
g_arp_incmp_cnt:          0
g_arp_trusted_cnt:        0
g_trusted_arp_max_num:    4096
config_arp_count:         75000

---------- IPv6 ADDRESS STATISTIC INFO ----------
ipv6_address_limit:       4000
ipv6_address_count:       1

--------------- ND STATISTIC INFO ---------------
Neighbors Upper Limit (GLOBAL):    45000
Neighbors count (GLOBAL) :         10571
Neighbors drop count :             0
-------------------------------------
Neighbors LINKLOCAL Upper Limit:   45000
Neighbors count (LINKLOCAL):       0
Neighbors drop count :             0
-------------------------------------
Neighbors TOTAL Upper Limit:       90000
Active Neighbors:                 10571
Active Dynamic Neighbors:         10571
Active Static Neighbors:          0
-------------------------------------
Static Neighbors Limit:           90000
Total Static Neighbors:           0
-------------------------------------
Incomplete Neighbors limit:        0
Incomplete Neighbors:              0
-------------------------------------
Local Host Neighbors:             2
Total Neighbors Inuse:             10573
Total nd proxy conflict num:       0
Total nd proxy incomplete num:     0

Total scc static netif wrong:     0

-------------------------------------
syslog_get_snd_queue_data:
  snd_success_num:     3932399
  snd_fail_num:        498787468
  snd_total_num:       502719867
-------------------------------------

        Returns:
{"Incomplete Neighbors": "0"
"vrf_max_index": "4096"
"Static Neighbors Limit": "90000"
"snd_fail_num": "498787468"
"g_arp_trusted_cnt": "0"
"Total nd proxy conflict num": "0"
"g_arp_dyn_static_cnt": "4"
"snd_success_num": "3932399"
"ipv6_address_count": "1"
"Incomplete Neighbors limit": "0"
"config_arp_count": "75000"
"Total Neighbors Inuse": "10573"
"Neighbors TOTAL Upper Limit": "90000"
"Active Neighbors": "10571"
"Total Static Neighbors": "0"
"ipv6_address_limit": "4000"
"Local Host Neighbors": "2"
"Neighbors count (LINKLOCAL)": "0"
"g_arp_total_cnt": "7"
"g_arp_static_cnt": "0"
"ipv4_address_limit": "4000"
"g_trusted_arp_max_num": "4096"
"L3 interface count": "10"
"Neighbors LINKLOCAL Upper Limit": "45000"
"syslog_get_snd_queue_data": ""
"vrf_sys_max_instances": "500"
"Total scc static netif wrong": "0"
"current_vrfs": "0"
"ipv4_address_count": "2"
"Active Dynamic Neighbors": "10571"
"Total nd proxy incomplete num": "0"
"Neighbors Upper Limit (GLOBAL)": "45000"
"Neighbors count (GLOBAL)": "10571"
"Neighbors drop count": "0"
"Active Static Neighbors": "0"
"g_arp_incmp_cnt": "0"
"snd_total_num": "502719867"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show net statistic | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        str_arg = 'show net'
        return self.dut_get_show_info_analy_all_colon(show_info,str_arg)
    def dut_get_show_ipv6_interface_vlan_num(self,show_info):
        """
        Function:show ipv6 interface vlan <num>回显解析函数
        CLI命令:show ipv6 interface vlan <num>
        回显信息示例:
DUT1# show ipv6 interface vlan 10 
interface VLAN 10 is Up, ifindex: 4106, vrf_id 0
  address(es):
    Mac Address: 00:d0:f8:22:34:5d
    INET6: 2001::1 , subnet is 2001::/64
    INET6: FE80::2D0:F8FF:FE22:345D , subnet is FE80::/64
  Joined group address(es):
    FF01::1
    FF02::1
    FF02::2
    FF02::1:FF00:0
    FF02::1:FF00:1
    FF02::1:FF22:345D
  MTU is 1500 bytes
  ICMP error messages limited to one every 100 milliseconds
  ICMP redirects are enabled
  ND DAD is enabled, number of DAD attempts: 1
  ND reachable time is 30000 milliseconds
  ND advertised reachable time is 0 milliseconds
  ND retransmit interval is 1000 milliseconds
  ND advertised retransmit interval is 0 milliseconds
  ND router advertisements are sent every 200 seconds<160--240>
  ND router advertisements live for 1800 seconds

        Returns:
{"Joined group address(es)": ["FF02::1"
"FF02::2"
"FF02::1:FF00:0"
"FF02::1:FF00:1"
"FF02::1:FF22:345D"], "subnet": "2001::/64"
"ND reachable time": "30000"
"ND advertised retransmit interval": "0"
"Mac Address": "00:d0:f8:22:34:5d"
"INET6-local": "FE80::2D0:F8FF:FE22:345D"
"interface VLAN 10": "Up"
"number of DAD attempts": "1"
"subnet-local": "FE80::/64"
"vrf_id": "0"
"ND retransmit interval": "1000"
"ND advertised reachable time": "0"
"ND DAD": "enabled"
"ND router advertisements live for": "1800"
"ifindex": "4106"
"ND router advertisements": "200"
"ICMP redirects": "enabled"
"MTU": "1500"
"INET6": "2001::1"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 interface vlan <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        one_key = ''
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'(interface VLAN \d+) is (\w+), (ifindex): (\d+), (vrf_id) (\d+)', show_info_split[i]):
                matchObj = re.match(r'(interface VLAN \d+) is (\w+), (ifindex): (\d+), (vrf_id) (\d+)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                dict_value[matchObj.group(3)] = matchObj.group(4)
                dict_value[matchObj.group(5)] = matchObj.group(6)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'    INET6: FE(.*)', show_info_split[i]):
                matchObj = re.match(r'    (INET6): (.*) , (subnet) is (.*)', show_info_split[i])
                dict_value[matchObj.group(1)+'-local'] = matchObj.group(2)
                dict_value[matchObj.group(3)+'-local'] = matchObj.group(4)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'    INET6: \d+(.*)', show_info_split[i]):
                matchObj = re.match(r'    (INET6): (.*) , (.*) is (.*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                dict_value[matchObj.group(3)] = matchObj.group(4)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'  ICMP error', show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)

        for i in range(length):
            if re.match('  address\(es\):$', show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)

        for i in range(length):
            if re.match(r'  Joined group address', show_info_split[i]):
                one_key = 'Joined group address(es)'
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)

        for i in range(length):
            if re.match(r'  ND router advertisements live', show_info_split[i]):
                matchObj = re.match(r'  (ND router advertisements live for) (\d+) seconds', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)

        for i in range(length):
            if re.match(r'    (Mac Address): (.*)', show_info_split[i]):
                matchObj = re.match(r'    (Mac Address): (.*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)

        for i in range(length):
            if re.match(r'  ND router advertisements are sent ', show_info_split[i]):
                matchObj = re.match(r'  (ND router advertisements) are sent every (\d+) seconds', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)

        #######################################################################
        newString = ' '
        for i in range(length):
            newString = newString + show_info_split[i] + ','
        ######################################################################
        dut_info_split = newString.split(',')
        length = len(dut_info_split)
        value_list = []
        for i in range(length):
            if re.match('    FF\d+::',dut_info_split[i]):
                matchObj = re.match('    FF\d+::.+',dut_info_split[i])
                value_list.append(dut_info_split[i].strip())
            elif re.match('(.*) is (.*)',dut_info_split[i]):
                if re.match('(.*) is (\d+) \w+',dut_info_split[i]):
                    matchObj = re.match('(.*) is (\d+) \w+.*',dut_info_split[i])
                    dict_value[matchObj.group(1).strip()] = matchObj.group(2)
                else:
                    matchObj = re.match('(.*) is (.*)', dut_info_split[i])
                    dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
            elif re.match('(.*) are (.*)', dut_info_split[i]):
                matchObj = re.match('(.*) are (.*)', dut_info_split[i])
                dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
            elif re.match('(.*):(.*)',dut_info_split[i]):
                if re.match('(.*)::(.*)',dut_info_split[i]):
                    pass
                else:
                    matchObj = re.match('(.*):(.*)', dut_info_split[i])
                    dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
            else:pass

        dict_value[one_key] = value_list
        return dict_value
    def dut_get_show_hosts(self,show_info):
        """
        Function:show hosts回显解析函数
        CLI命令:show hosts
        回显信息示例:
5848VAC#show hosts 
Name servers are:

Host                                     type    Address                                  TTL(sec)       
www.test.com                             static  10.1.1.254                               ---            
www.testv6.com                           static  10::2                                    ---            
5848VAC#

        Returns:
{'www.testv6.com/type': 'static'
'Name_servers_list': [], 'www.test.com/Address': '10.1.1.254'
'host_list': ['www.test.com'
'www.testv6.com'], 'www.test.com/TTL(sec)': '---'
'www.testv6.com/Address': '10::2'
'www.testv6.com/TTL(sec)': '---'
'www.test.com/type': 'static'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show hosts | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="Host"     #需要变参的地方
        col_len_list = []
        #创建字典
        dict_value={}
        rol_title_list = []
        title_row =[]
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')

        length = len(show_info_list_line)
        for i in range(length):
            if "type" in show_info_list_line[i] :
                label_i= i
        for i in range(length):
            if "Name servers are" in show_info_list_line[i] :
                label_y = i
        if label_i-1 != label_y:
            str_2 = ""
            for j in range(label_y+1,label_i):
                str_2 =str_2 + ","+show_info_list_line[j].strip()
            list_1 = str_2.split(",")
            list_1.remove('')
            dict_value["Name_servers_list"] = list_1
        else:
            dict_value["Name_servers_list"] = []

        for k in range(label_i,length):
            col_value_list = re.split(r'\s{1,}', show_info_list_line[k].strip())
            title_col = col_value_list[0]           #*****
            if value_title in col_value_list :
                title_row = col_value_list
            else:
                if col_value_list != "":
                    rol_title_list.append(title_col)
                    for s in range (1,len(col_value_list)):           #*****
                        key_name = '%s/%s'%(title_col,title_row[s])
                        dict_value[key_name]=col_value_list[s]
        dict_value["host_list"] = rol_title_list
        return dict_value

    #0321
    def dut_get_dir_flash(self,show_info):
        """
        Function:dir flash回显解析函数
        CLI命令:dir flash
        回显信息示例:
5848VAC#dir flash 
Directory of flash:/
Number  Properties   Size               Time                    Name
------  ----------  ------    ------------------------  --------------------
  1       ----      244.8k    Mon Jan 29 08:14:33 2018  a                   
  2       drwx      160B      Wed Sep 20 19:57:51 2017  dev                 
  3       drwx      384B      Thu Dec 28 03:05:10 2017  lyh                 
  4       drwx      160B      Wed Sep 20 19:57:41 2017  rep                 
  5       drwx      224B      Wed Sep 20 19:57:42 2017  var                 
  6       -rw-      1.4M      Wed Jan  9 11:47:30 2019  tech_vsd0_20190109194730.tar.gz
  7       drwx      160B      Mon Feb  5 10:01:36 2018  flash2:layer_ac_bin 
  8       drwx      160B      Wed Sep 20 19:57:54 2017  addr                
  9       -r--      4.1k      Thu Jan 10 01:10:24 2019  tmp_env.txt         
 10       drwx      280B      Tue Feb  6 12:02:53 2018  layer_ac_bin        
 11       -rw-      6.4k      Tue Feb  6 05:46:53 2018  virtual_switch.text 
 12       drwx      304B      Wed Sep 20 19:57:57 2017  security            
 13       -rwx      154B      Tue Apr 10 17:16:59 2018  config_vac.dat      
 14       -rw-      773.9k    Fri Oct 27 09:16:54 2017  ref_frame.ko        
 15       -rw-      3.4k      Tue Apr 10 17:16:59 2018  config.text         
 16       -rwx      120.2k    Tue Apr 10 18:33:16 2018  rf-syslog.txt       
 17       -rw-      702.8k    Thu May  6 06:34:11 2066  ref_ip.ko           
 18       -rw-      132.0k    Tue Jan  5 04:22:52 2021  AC1_lsm.bin         
 19       -rw-      1B        Fri Sep 22 10:54:54 2017  a.txt               
 20       -rw-      867.7k    Wed Dec  6 13:53:14 2017  wangzhijian-octeon-mac.ko
 21       -rw-      8B        Tue Feb  6 05:46:30 2018  ap-standalone.text  
 22       -rwx      696B      Wed Sep 20 19:57:52 2017  httpd_cert.crt      
 23       drwx      160B      Fri Dec  8 10:01:50 2017  pkgmgmt             
 24       -rwx      21B       Tue Apr 10 17:16:59 2018  syslog_rfc5424_flag.txt
 25       drwx      352B      Wed Sep 20 19:57:58 2017  portal              
 26       -rw-      96.6k     Mon Jan 22 10:41:55 2018  bakconfig.text      
 27       -rw-      4.2k      Sun Mar 25 11:55:14 2018  20180325config.text 
 28       drwx      160B      Wed Mar 14 19:39:29 2018  upgrade_storage     
 29       -rwx      812B      Thu Jan 10 00:52:31 2019  rsa_private.bin     
 30       -rwx      336B      Thu Jan  1 00:51:51 1970  dsa_private.bin     
 31       -rwx      1.1k      Thu Jan  1 02:30:45 1970  bridge.bak          
 32       -rw-      3.3k      Thu Jan 10 01:33:43 2019  config.bak          
 33       -rwx      816B      Thu Jan 10 00:52:31 2019  rsa1_private.bin    
 34       drwx      528B      Tue Jan  8 02:45:18 2019  upgrade             
 35       drwx      456B      Wed Sep 20 20:25:08 2017  rg_licns            
 36       drwx      392B      Tue Apr 10 18:03:22 2018  syslog              
 37       -rw-      602.4k    Mon Dec 25 11:45:14 2017  wangzhijian-ef_bridge_ko.ko
 38       drwx      160B      Thu Mar 15 09:51:29 2018  upgrade_ram         
 39       drwx      160B      Mon Feb  5 08:58:01 2018  upgrade_rep         
 40       drwx      160B      Thu Jan 18 08:27:41 2018  storage             
 41       -rw-      593B      Tue Feb  6 04:37:48 2018  ap-virtual_switch.text
 42       -rw-      53B       Tue Apr 10 17:16:59 2018  ap-config.text      
 43       drwx      384B      Thu Dec 28 03:06:15 2017  lyh-new             
 44       -rwx      887B      Wed Sep 20 19:57:52 2017  httpd_key.pem       
 45       -rw-      1.9k      Tue Feb  6 05:55:16 2018  standalone.text     
27 files, 18 directories
281,903,104 bytes data total (105,349,120 bytes free)
536,870,912 bytes flash total (105,349,120 bytes free)
5848VAC#

        Returns:
{'var/Time': 'Wed Sep 20 19:57:42 2017'
'upgrade/Size': '528B'
'ref_ip.ko/Properties': '-rw-'
'upgrade_ram/Number': '38'
'ap-virtual_switch.text/Properties': '-rw-'
'rg_licns/Size': '456B'
'bakconfig.text/Size': '96.6k'
'rg_licns/Time': 'Wed Sep 20 20:25:08 2017'
'wangzhijian-ef_bridge_ko.ko/Time': 'Mon Dec 25 11:45:14 2017'
'ap-standalone.text/Properties': '-rw-'
'tech_vsd0_20190109194730.tar.gz/Properties': '-rw-'
'ref_frame.ko/Size': '773.9k'
'AC1_lsm.bin/Number': '18'
'rep/Properties': 'drwx'
'httpd_key.pem/Properties': '-rwx'
'ref_frame.ko/Properties': '-rw-'
'tech_vsd0_20190109194730.tar.gz/Size': '1.4M'
'upgrade/Time': 'Tue Jan  8 02:45:18 2019'
'flash2:layer_ac_bin/Size': '160B'
'layer_ac_bin/Time': 'Tue Feb  6 12:02:53 2018'
'addr/Size': '160B'
'pkgmgmt/Time': 'Fri Dec  8 10:01:50 2017'
'rg_licns/Properties': 'drwx'
'dsa_private.bin/Number': '30'
'rsa1_private.bin/Size': '816B'
'config.bak/Properties': '-rw-'
'config_vac.dat/Properties': '-rwx'
'pkgmgmt/Size': '160B'
'dev/Time': 'Wed Sep 20 19:57:51 2017'
'20180325config.text/Number': '27'
'config.bak/Time': 'Thu Jan 10 01:33:43 2019'
'upgrade_rep/Number': '39'
'var/Number': '5'
'lyh/Number': '3'
'addr/Number': '8'
'httpd_key.pem/Number': '44'
'wangzhijian-ef_bridge_ko.ko/Number': '37'
'rsa1_private.bin/Time': 'Thu Jan 10 00:52:31 2019'
'upgrade_storage/Number': '28'
'rep/Number': '4'
'httpd_cert.crt/Properties': '-rwx'
'storage/Size': '160B'
'httpd_key.pem/Size': '887B'
'a.txt/Number': '19'
'tech_vsd0_20190109194730.tar.gz/Number': '6'
'ap-standalone.text/Time': 'Tue Feb  6 05:46:30 2018'
'ap-config.text/Time': 'Tue Apr 10 17:16:59 2018'
'lyh/Time': 'Thu Dec 28 03:05:10 2017'
'data total_free': '105349120'
'ap-config.text/Size': '53B'
'layer_ac_bin/Size': '280B'
'ref_ip.ko/Time': 'Thu May  6 06:34:11 2066'
'pkgmgmt/Number': '23'
'rf-syslog.txt/Size': '120.2k'
'wangzhijian-octeon-mac.ko/Properties': '-rw-'
'bakconfig.text/Number': '26'
'rsa_private.bin/Properties': '-rwx'
'config.bak/Number': '32'
'dsa_private.bin/Size': '336B'
'upgrade_rep/Size': '160B'
'security/Number': '12'
'ref_frame.ko/Number': '14'
'directories_num': '18'
'a/Number': '1'
'lyh-new/Size': '384B'
'tmp_env.txt/Number': '9'
'upgrade/Number': '34'
'rsa1_private.bin/Properties': '-rwx'
'20180325config.text/Size': '4.2k'
'upgrade_rep/Time': 'Mon Feb  5 08:58:01 2018'
'virtual_switch.text/Time': 'Tue Feb  6 05:46:53 2018'
'standalone.text/Number': '45'
'virtual_switch.text/Properties': '-rw-'
'standalone.text/Size': '1.9k'
'pkgmgmt/Properties': 'drwx'
'virtual_switch.text/Size': '6.4k'
'syslog/Time': 'Tue Apr 10 18:03:22 2018'
'lyh-new/Number': '43'
'a.txt/Size': '1B'
'upgrade_storage/Properties': 'drwx'
'storage/Number': '40'
'tmp_env.txt/Properties': '-r--'
'bridge.bak/Size': '1.1k'
'var/Size': '224B'
'rep/Size': '160B'
'dev/Properties': 'drwx'
'ap-standalone.text/Size': '8B'
'flash2:layer_ac_bin/Properties': 'drwx'
'files_num': '27'
'config_vac.dat/Size': '154B'
'dev/Number': '2'
'AC1_lsm.bin/Size': '132.0k'
'standalone.text/Time': 'Tue Feb  6 05:55:16 2018'
'security/Properties': 'drwx'
'dsa_private.bin/Time': 'Thu Jan  1 00:51:51 1970'
'flash2:layer_ac_bin/Number': '7'
'config_vac.dat/Time': 'Tue Apr 10 17:16:59 2018'
'bakconfig.text/Properties': '-rw-'
'lyh-new/Properties': 'drwx'
'config.bak/Size': '3.3k'
'tmp_env.txt/Size': '4.1k'
'syslog_rfc5424_flag.txt/Properties': '-rwx'
'var/Properties': 'drwx'
'portal/Size': '352B'
'wangzhijian-ef_bridge_ko.ko/Properties': '-rw-'
'config.text/Size': '3.4k'
'config.text/Time': 'Tue Apr 10 17:16:59 2018'
'addr/Properties': 'drwx'
'a/Properties': '----'
'a/Time': 'Mon Jan 29 08:14:33 2018'
'20180325config.text/Time': 'Sun Mar 25 11:55:14 2018'
'wangzhijian-octeon-mac.ko/Size': '867.7k'
'layer_ac_bin/Number': '10'
'rf-syslog.txt/Number': '16'
'portal/Time': 'Wed Sep 20 19:57:58 2017'
'virtual_switch.text/Number': '11'
'upgrade_storage/Time': 'Wed Mar 14 19:39:29 2018'
'ref_ip.ko/Size': '702.8k'
'bridge.bak/Number': '31'
'ap-virtual_switch.text/Time': 'Tue Feb  6 04:37:48 2018'
'standalone.text/Properties': '-rw-'
'upgrade_rep/Properties': 'drwx'
'upgrade/Properties': 'drwx'
'syslog/Number': '36'
'httpd_cert.crt/Size': '696B'
'layer_ac_bin/Properties': 'drwx'
'dev/Size': '160B'
'Name_list': ['a'
'dev'
'lyh'
'rep'
'var'
'tech_vsd0_20190109194730.tar.gz'
'flash2:layer_ac_bin'
'addr'
'tmp_env.txt'
'layer_ac_bin'
'virtual_switch.text'
'security'
'config_vac.dat'
'ref_frame.ko'
'config.text'
'rf-syslog.txt'
'ref_ip.ko'
'AC1_lsm.bin'
'a.txt'
'wangzhijian-octeon-mac.ko'
'ap-standalone.text'
'httpd_cert.crt'
'pkgmgmt'
'syslog_rfc5424_flag.txt'
'portal'
'bakconfig.text'
'20180325config.text'
'upgrade_storage'
'rsa_private.bin'
'dsa_private.bin'
'bridge.bak'
'config.bak'
'rsa1_private.bin'
'upgrade'
'rg_licns'
'syslog'
'wangzhijian-ef_bridge_ko.ko'
'upgrade_ram'
'upgrade_rep'
'storage'
'ap-virtual_switch.text'
'ap-config.text'
'lyh-new'
'httpd_key.pem'
'standalone.text'], 'tech_vsd0_20190109194730.tar.gz/Time': 'Wed Jan  9 11:47:30 2019'
'rsa1_private.bin/Number': '33'
'storage/Time': 'Thu Jan 18 08:27:41 2018'
'rsa_private.bin/Time': 'Thu Jan 10 00:52:31 2019'
'20180325config.text/Properties': '-rw-'
'ap-standalone.text/Number': '21'
'addr/Time': 'Wed Sep 20 19:57:54 2017'
'AC1_lsm.bin/Time': 'Tue Jan  5 04:22:52 2021'
'config.text/Number': '15'
'security/Size': '304B'
'ap-config.text/Number': '42'
'httpd_cert.crt/Time': 'Wed Sep 20 19:57:52 2017'
'rg_licns/Number': '35'
'ref_ip.ko/Number': '17'
'httpd_cert.crt/Number': '22'
'rf-syslog.txt/Time': 'Tue Apr 10 18:33:16 2018'
'security/Time': 'Wed Sep 20 19:57:57 2017'
'rsa_private.bin/Number': '29'
'ref_frame.ko/Time': 'Fri Oct 27 09:16:54 2017'
'portal/Properties': 'drwx'
'upgrade_ram/Time': 'Thu Mar 15 09:51:29 2018'
'upgrade_storage/Size': '160B'
'lyh/Properties': 'drwx'
'wangzhijian-octeon-mac.ko/Number': '20'
'rf-syslog.txt/Properties': '-rwx'
'lyh/Size': '384B'
'tmp_env.txt/Time': 'Thu Jan 10 01:10:24 2019'
'config_vac.dat/Number': '13'
'syslog/Size': '392B'
'rsa_private.bin/Size': '812B'
'lyh-new/Time': 'Thu Dec 28 03:06:15 2017'
'syslog_rfc5424_flag.txt/Size': '21B'
'upgrade_ram/Properties': 'drwx'
'syslog/Properties': 'drwx'
'config.text/Properties': '-rw-'
'a.txt/Time': 'Fri Sep 22 10:54:54 2017'
'AC1_lsm.bin/Properties': '-rw-'
'upgrade_ram/Size': '160B'
'ap-virtual_switch.text/Number': '41'
'wangzhijian-octeon-mac.ko/Time': 'Wed Dec  6 13:53:14 2017'
'syslog_rfc5424_flag.txt/Time': 'Tue Apr 10 17:16:59 2018'
'ap-virtual_switch.text/Size': '593B'
'bridge.bak/Properties': '-rwx'
'ap-config.text/Properties': '-rw-'
'a.txt/Properties': '-rw-'
'flash2:layer_ac_bin/Time': 'Mon Feb  5 10:01:36 2018'
'syslog_rfc5424_flag.txt/Number': '24'
'dsa_private.bin/Properties': '-rwx'
'storage/Properties': 'drwx'
'portal/Number': '25'
'bakconfig.text/Time': 'Mon Jan 22 10:41:55 2018'
'rep/Time': 'Wed Sep 20 19:57:41 2017'
'a/Size': '244.8k'
'httpd_key.pem/Time': 'Wed Sep 20 19:57:52 2017'
'wangzhijian-ef_bridge_ko.ko/Size': '602.4k'
'data total': '281903104'
'bridge.bak/Time': 'Thu Jan  1 02:30:45 1970'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=dir flash | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="Name"     #需要变参的地方
        col_len_list = []
        #创建字典
        dict_value3={}
        address_list = []
        show_info =show_info.replace("\t","  ")
        show_info_list_line = show_info.split("\n")
        dict_value2={}
        for value in show_info_list_line:
            if re.match("(\d+) files, (\d+) directories",value):
                obj1 = re.match("(\d+) files, (\d+) directories",value)
                dict_value2["files_num"] = obj1.group(1).replace(",","")
                dict_value2["directories_num"] = obj1.group(2).replace(",","")
            elif re.match("(.*) bytes data total \((.*) bytes free\)",value):
                obj2=re.match("(.*) bytes data total \((.*) bytes free\)",value)
                dict_value2["data total"] = obj2.group(1).replace(",","")
                dict_value2["data total_free"] = obj2.group(2).replace(",","")
            elif re.match("(\d+) bytes flash total \((.*) bytes free\)",value):
                obj3 = re.match("(\d+) bytes flash total \((.*) bytes free\)",value)
                dict_value2["flash total"] = obj3.group(1).replace(",","")
                dict_value2["flash total_free"] = obj3.group(2).replace(",","")
        if re.match(r'.*dir.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if "Name" in show_info_list_line[line_len_num]:              #***********
                table_1 = line_len_num


        (whippletree_list_1,cut_del_1) = self.dut_show_autoget_whippletree(table_1,line_len,show_info_list_line)

        show_info_list_line.remove(show_info_list_line[cut_del_1])

        ##print whippletree_list_1,cut_del_1
        #whippletree_list_1 = [8,12,10,26,20]
        ##print show_info_list_line
        #show_info_list_line.remove(show_info_list_line[2])
        ##print show_info_list_line
        new_show_info_num = len(show_info_list_line)
        for line_len_num in range(0,new_show_info_num):
            if "Name" in show_info_list_line[line_len_num]:              #***********
                table_2 = line_len_num
            if "directories" in show_info_list_line[line_len_num]:              #***********
                table_3 = line_len_num
        dict_value = self.dut_show_autoget_form(table_2,table_3,value_title,whippletree_list_1,show_info_list_line)
        return dict(dict_value.items()+dict_value2.items())
    def dut_get_show_webauth_control(self,show_info):
        """
        Function:show web-auth control回显解析函数
        CLI命令:show web-auth control
        回显信息示例:
Ruijie#show web-auth control 
 Port                      Control  Server Name           Online User Count Arp-detect Vlan Control List Apply-mapping
 ------------------------- -------- --------------------- ----------------- ---------- ----------------- -------------
 GigabitEthernet 1/2/17    On       eportalv2             0                 On                                                                
 AggregatePort 10          On       eportalv2             0                 On

        Returns:
{"AggregatePort 10/Arp-detect": "On"
"AggregatePort 10/Control": "On"
"GigabitEthernet 1/2/17/Vlan Control List": ""
"GigabitEthernet 1/2/17/Control": "On"
"AggregatePort 10/Vlan Control List": ""
"GigabitEthernet 1/2/17/Apply-mapping": ""
"AggregatePort 10/Online User Count": "0"
"GigabitEthernet 1/2/17/Arp-detect": "On"
"Port_list": ["GigabitEthernet 1/2/17"
"AggregatePort 10"], "GigabitEthernet 1/2/17/Server Name": "eportalv2"
"AggregatePort 10/Server Name": "eportalv2"
"AggregatePort 10/Apply-mapping": ""
"GigabitEthernet 1/2/17/Online User Count": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show web-auth control | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="Port"     #需要变参的地方
        col_len_list = []
        #创建字典
        dict_value3={}
        address_list = []

        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if "Server Name" in show_info_list_line[line_len_num]:              #***********
                table_1 = line_len_num

        (whippletree_list_1,cut_del_1) = self.dut_show_autoget_whippletree(table_1,line_len,show_info_list_line)
        show_info_list_line.remove(show_info_list_line[cut_del_1])
        new_show_info_num = len(show_info_list_line)
        for line_len_num in range(0,new_show_info_num):
            if "Server Name" in show_info_list_line[line_len_num]:              #***********
                table_2 = line_len_num
        dict_value = self.dut_show_autoget_form(table_2,new_show_info_num,value_title,whippletree_list_1,show_info_list_line)
        return dict_value
    def dut_get_show_arp(self,show_info):
        """
        Function:show arp回显解析函数
        CLI命令:show arp
        回显信息示例:
5848VAC#show arp 
Protocol  Address          Age(min)  Hardware        Type   Interface               
Internet  10.1.1.10        <static>  0000.1100.0000  arpa   VLAN 10                 
Internet  10.1.1.1         --        00d0.f999.933b  arpa   VLAN 10                 
Internet  10.1.1.11        0         0000.1100.0001  arpa   VLAN 10                 
Internet  10.1.1.12        0         0000.1100.0002  arpa   VLAN 10                 
Internet  10.1.1.13        0         0000.1100.0003  arpa   VLAN 10                 
Internet  10.1.1.14        0         0000.1100.0004  arpa   VLAN 10                 
Internet  10.1.1.15        0         0000.1100.0005  arpa   VLAN 10                 
Internet  10.1.1.16        0         0000.1100.0006  arpa   VLAN 10                 
Internet  10.1.1.17        0         0000.1100.0007  arpa   VLAN 10                 
Internet  10.1.1.18        0         0000.1100.0008  arpa   VLAN 10                 
Internet  10.1.1.19        0         0000.1100.0009  arpa   VLAN 10                 
Total number of ARP entries: 11
5848VAC#

        Returns:
{'10.1.1.1/Age(min)': '--'
'10.1.1.18/Type': 'arpa'
'10.1.1.15/Interface': 'VLAN 10'
'10.1.1.18/Protocol': 'Internet'
'10.1.1.15/Age(min)': '0'
'10.1.1.1/Hardware': '00d0.f999.933b'
'10.1.1.10/Interface': 'VLAN 10'
'10.1.1.19/Age(min)': '0'
'10.1.1.18/Hardware': '0000.1100.0008'
'10.1.1.14/Hardware': '0000.1100.0004'
'10.1.1.14/Age(min)': '0'
'10.1.1.13/Type': 'arpa'
'10.1.1.19/Hardware': '0000.1100.0009'
'10.1.1.11/Interface': 'VLAN 10'
'10.1.1.17/Protocol': 'Internet'
'10.1.1.12/Hardware': '0000.1100.0002'
'10.1.1.13/Protocol': 'Internet'
'10.1.1.17/Age(min)': '0'
'10.1.1.12/Age(min)': '0'
'10.1.1.11/Type': 'arpa'
'10.1.1.16/Type': 'arpa'
'10.1.1.1/Protocol': 'Internet'
'10.1.1.12/Type': 'arpa'
'10.1.1.13/Hardware': '0000.1100.0003'
'10.1.1.11/Protocol': 'Internet'
'10.1.1.10/Age(min)': '<static>'
'10.1.1.14/Protocol': 'Internet'
'10.1.1.1/Interface': 'VLAN 10'
'Address_list': ['10.1.1.10'
'10.1.1.1'
'10.1.1.11'
'10.1.1.12'
'10.1.1.13'
'10.1.1.14'
'10.1.1.15'
'10.1.1.16'
'10.1.1.17'
'10.1.1.18'
'10.1.1.19'], '10.1.1.10/Protocol': 'Internet'
'10.1.1.13/Interface': 'VLAN 10'
'10.1.1.13/Age(min)': '0'
'10.1.1.18/Interface': 'VLAN 10'
'10.1.1.15/Type': 'arpa'
'10.1.1.15/Hardware': '0000.1100.0005'
'10.1.1.18/Age(min)': '0'
'10.1.1.17/Hardware': '0000.1100.0007'
'10.1.1.12/Interface': 'VLAN 10'
'10.1.1.11/Hardware': '0000.1100.0001'
'10.1.1.1/Type': 'arpa'
'10.1.1.19/Type': 'arpa'
'10.1.1.11/Age(min)': '0'
'10.1.1.10/Hardware': '0000.1100.0000'
'Total number of ARP': '11'
'10.1.1.19/Protocol': 'Internet'
'10.1.1.15/Protocol': 'Internet'
'10.1.1.14/Interface': 'VLAN 10'
'10.1.1.14/Type': 'arpa'
'10.1.1.10/Type': 'arpa'
'10.1.1.16/Hardware': '0000.1100.0006'
'10.1.1.16/Interface': 'VLAN 10'
'10.1.1.16/Protocol': 'Internet'
'10.1.1.17/Type': 'arpa'
'10.1.1.19/Interface': 'VLAN 10'
'10.1.1.12/Protocol': 'Internet'
'10.1.1.17/Interface': 'VLAN 10'
'10.1.1.16/Age(min)': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show arp | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="Address"     #需要变参的地方
        col_len_list = []
        #创建字典
        dict_value3={}
        address_list = []

        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if "Address" in show_info_list_line[line_len_num]:              #***********
                table_1 = line_len_num
            if "Total number of ARP" in show_info_list_line[line_len_num]:              #***********
                table_2 = line_len_num
                direct_arps_list = show_info_list_line[line_len_num].split(":")
                dict_value3["Total number of ARP"]=direct_arps_list[1].replace(" ","").replace("\r","")
        star, end, show_len_list, show_info_list_line = self.dut_common_get_linelist(show_info, value_title,"Total number of ARP")
        whippletree_list_1 = show_len_list
        # whippletree_list_1 = [10,17,10,16,7,32]
        dict_value2 = self.dut_show_autoget_form(table_1,table_2,value_title,whippletree_list_1,show_info_list_line)
        dict_value =dict(dict_value2.items()+dict_value3.items())
        return dict_value
    def dut_get_show_radius_dynamicauthorizationextension_statistics(self,show_info):
        """
        Function:show radius dynamic-authorization-extension statistics回显解析函数
        CLI命令:show radius dynamic-authorization-extension statistics
        回显信息示例:
S86#show radius dynamic-authorization-extension statistics
Disconnect-Request Received:                              1
Incorrect Disconnect-Request Received:                    0
Disconnect-Request Dropped for Queue Full:                0
Disconnect-Request Process Timeout:                       0
Charge-of-authortication Process Timeout:                 0
Disconnect-Request Process Success:                       1
Charge-of-authortication Process Success:                 0
Disconnect-ACK Sent:                                      1
Disconnect-ACK Sent Failed:                               0
Disconnect-NAK Sent:                                      0
Disconnect-NAK Sent Failed:                               0
CoA-ACK Sent:                                             0
CoA-ACK Sent Failed:                                      0
CoA-NAK Sent:                                             0
CoA-NAK Sent Failed:                                      0
Dm/CoA result index Invild:                               0

        Returns:
{'CoA-NAK Sent': '0'
'Disconnect-NAK Sent': '0'
'Disconnect-Request Dropped for Queue Full': '0'
'Disconnect-ACK Sent': '1'
'CoA-NAK Sent Failed': '0'
'Disconnect-ACK Sent Failed': '0'
'Dm/CoA result index Invild': '0'
'Disconnect-Request Received': '1'
'Disconnect-Request Process Success': '1'
'Incorrect Disconnect-Request Received': '0'
'CoA-ACK Sent Failed': '0'
'Charge-of-authortication Process Success': '0'
'Charge-of-authortication Process Timeout': '0'
'Disconnect-NAK Sent Failed': '0'
'Disconnect-Request Process Timeout': '0'
'CoA-ACK Sent': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show radius dynamic-authorization-extension statistics | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        str_arg = "show"
        return self.dut_get_show_info_analy_all_colon(show_info,str_arg)
    def dut_get_show_ip_ospf_neighbor(self,show_info):
        """
        Function:show ip ospf neighbor回显解析函数
        CLI命令:show ip ospf neighbor
        回显信息示例:
Ruijie#show ip ospf neighbor
OSPF process 1, 1 Neighbors, 1 is Full:
Neighbor ID     Pri   State                BFD State  Dead Time   Address         Interface
192.168.2.1       1   Full/BDR             -          00:00:32    12.1.1.1        VLAN 12

OSPF process 2, 1 Neighbors, 1 is Full:
Neighbor ID     Pri   State                BFD State  Dead Time   Address         Interface
13.1.1.1          1   Full/BDR             -          00:00:32    13.1.1.1        VLAN 13

        Returns:
{"192.168.2.1/BFD State": "-"
"13.1.1.1/Neighbor ID": "13.1.1.1"
"13.1.1.1/Dead Time": "00:00:32"
"13.1.1.1/State/2": "BDR"
"192.168.2.1/Dead Time": "00:00:32"
"192.168.2.1/Pri": "1"
"13.1.1.1/Pri": "1"
"192.168.2.1/State/2": "BDR"
"Full": "1"
"13.1.1.1/Interface": "VLAN 13"
"13.1.1.1/BFD State": "-"
"OSPF process": "2"
"13.1.1.1/State/1": "Full"
"192.168.2.1/Interface": "VLAN 12"
"Neighbor_ID_list": ["192.168.2.1"
"13.1.1.1"], "13.1.1.1/State": "Full/BDR"
"Neighbors": "1"
"192.168.2.1/State/1": "Full"
"192.168.2.1/Address": "12.1.1.1"
"192.168.2.1/Neighbor ID": "192.168.2.1"
"13.1.1.1/Address": "13.1.1.1"
"192.168.2.1/State": "Full/BDR"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip ospf neighbor | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="Neighbor ID"     #需要变参的地方
        col_len_list = []
        #创建字典
        dict_value={}
        rol_title_list = []
        title_row =[]
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        length = len(show_info_list_line)
        for line_len_num in range(0,length):
            if "OSPF process" in show_info_list_line[line_len_num]:              #***********
                match = re.search("OSPF process(.*),(.*)Neighbors,(.*)is(.*)",show_info_list_line[line_len_num])
                dict_value["OSPF process"] = match.group(1).strip()
                dict_value["Neighbors"] = match.group(2).strip()
                dict_value["Full"] = match.group(3).strip()
        for k in range(1,length):
            if "OSPF process" in show_info_list_line[k]:
                continue
            col_value_list = re.split(r'\s{2,}', show_info_list_line[k])
            title_col = col_value_list[0]           #表头的列值位*****
            if value_title in col_value_list :
                title_row = col_value_list
            else:
                if col_value_list != "":
                    rol_title_list.append(title_col)
                    for s in range (1,len(col_value_list)):           #表头的列值位右边开始*****
                        key_name = '%s/%s'%(title_col,title_row[s])
                        dict_value[key_name]=col_value_list[s]
                        if "State" == title_row[s]:
                            if "/" in col_value_list[s]:
                                list_state = col_value_list[s].split("/")
                                dict_value[key_name+"/"+"1"]=list_state[0]
                                dict_value[key_name+"/"+"2"]=list_state[1]
                    key_name = '%s/%s' % (title_col, title_row[0])
                    dict_value[key_name]=col_value_list[0]
        dict_value["Neighbor_ID_list"] = rol_title_list
        return dict_value
    def dut_get_show_ip_ospf_neighbo(self,show_info):
        """
        Function:show ip ospf neighbo回显解析函数
        CLI命令:show ip ospf neighbo
        回显信息示例:
Ruijie#show ip ospf neighbo
OSPF process 1, 1 Neighbors, 1 is Full:
Neighbor ID     Pri   State                BFD State  Dead Time   Address         Interface
192.168.2.1       1   Full/BDR             -          00:00:32    12.1.1.1        VLAN 12

OSPF process 2, 1 Neighbors, 1 is Full:
Neighbor ID     Pri   State                BFD State  Dead Time   Address         Interface
13.1.1.1          1   Full/BDR             -          00:00:32    13.1.1.1        VLAN 13

        Returns:
{"Neighbors": "1"
"OSPF process 2/VLAN 13/Pri": "1"
"Full": "1"
"OSPF process 2/VLAN 13/State/1": "Full"
"OSPF process 2/VLAN 13/State/2": "BDR"
"OSPF process 1/VLAN 12/Address": "12.1.1.1"
"OSPF process 1/VLAN 12/State": "Full/BDR"
"OSPF process 2/VLAN 13/BFD State": "-"
"OSPF process 2/VLAN 13/Neighbor ID": "13.1.1.1"
"OSPF process 2/VLAN 13/Address": "13.1.1.1"
"OSPF process 1/VLAN 12/BFD State": "-"
"OSPF process 1/VLAN 12/Dead Time": "00:00:32"
"Neighbor_ID_list": ["VLAN 12"
"VLAN 13"], "OSPF process 2/VLAN 13/Dead Time": "00:00:32"
"OSPF process 1/VLAN 12/Pri": "1"
"OSPF process 2/VLAN 13/State": "Full/BDR"
"OSPF process": "2"
"OSPF process 1/VLAN 12/State/2": "BDR"
"OSPF process 1/VLAN 12/Neighbor ID": "192.168.2.1"
"OSPF process 1/VLAN 12/State/1": "Full"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip ospf neighbo | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="Neighbor ID"     #需要变参的地方
        col_len_list = []
        #创建字典
        dict_value={}
        rol_title_list = []
        title_row =[]
        show_info_list_line = self.dut_get_start_show_info(show_info)
        length = len(show_info_list_line)
        for line_len_num in range(0,length):
            if "OSPF process" in show_info_list_line[line_len_num]:              #***********
                match = re.search("OSPF process(.*),(.*)Neighbors,(.*)is(.*)",show_info_list_line[line_len_num])
                dict_value["OSPF process"] = match.group(1).strip()
                dict_value["Neighbors"] = match.group(2).strip()
                dict_value["Full"] = match.group(3).strip()
        key0 =""
        for k in range(0,length):
            show_info_list_line[k] = show_info_list_line[k].strip()
            if "OSPF process" in show_info_list_line[k]:
                key0 = show_info_list_line[k].split(",")[0].strip()
                continue
            col_value_list = re.split(r'\s{2,}', show_info_list_line[k])
            title_col = col_value_list[-1]           #表头的列值位*****
            if value_title in col_value_list :
                title_row = col_value_list
            else:
                if col_value_list != "":
                    rol_title_list.append(title_col)
                    for s in range (0,len(col_value_list)-1):           #表头的列值位右边开始*****
                        key_name = '%s/%s'%(title_col,title_row[s])
                        dict_value[key0+"/"+key_name]=col_value_list[s]
                        if "State" in title_row[s]:
                            if "/" in col_value_list[s]:
                                list_state = col_value_list[s].split("/")
                                dict_value[key0+"/"+key_name+"/"+"1"]=list_state[0]
                                dict_value[key0+"/"+key_name+"/"+"2"]=list_state[1]
                    #key_name = '%s/%s' % (title_col, title_row[0])
                    #dict_value[key_name]=col_value_list[0]
        dict_value["Neighbor_ID_list"] = rol_title_list
        return dict_value
    def dut_get_show_ip_pim_sparsemode_neighbor(self,show_info):
        """
        Function:show ip pim sparse-mode neighbor回显解析函数
        CLI命令:show ip pim sparse-mode neighbor
        回显信息示例:
RGOS_12_1#show ip pim sparse-mode neighbor
Neighbor          Interface                     Uptime/Expires      Ver   DR
Address                                                                   Priority/Mode
10.1.1.2          GigabitEthernet 0/1           00:10:00/00:01:44   v2    1 / DR

        Returns:
{"Neighbor-Address_list": ["10.1.1.2"], "10.1.1.2/Neighbor": "10.1.1.2"
"10.1.1.2/DR": "1 / DR"
"10.1.1.2/Interface": "GigabitEthernet 0/1"
"10.1.1.2/Ver": "v2"
"10.1.1.2/Uptime/Expires": "00:10:00/00:01:44"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip pim sparse-mode neighbor | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="Neighbor-Address"     #需要变参的地方
        col_len_list = []
        #创建字典
        dict_value={}
        rol_title_list = []
        title_row =[]
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        length = len(show_info_list_line)
        for line_len_num in range(0,length):
            if "Address" in show_info_list_line[line_len_num]:              #***********
                show_info_list_line.remove(show_info_list_line[line_len_num])
                break
        new_show_list=[]
        for i in range(len(show_info_list_line)):
            if "Neighbor" in show_info_list_line[i]:
                new_show_list.append(show_info_list_line[i])
            elif ":" in show_info_list_line[i] and str(show_info_list_line[i]).count(":")>1:
                if i+1 < len(show_info_list_line):
                    if ":" not in show_info_list_line[i+1]:
                        obj_1 = re.match("(.*)(\s+\d+:.*)",show_info_list_line[i])
                        value_1 =obj_1.group(1).strip()+" "+show_info_list_line[i+1].strip()+"   "+obj_1.group(2).strip()
                        new_show_list.append(value_1)
                    else:
                        new_show_list.append(show_info_list_line[i])
                else:
                        new_show_list.append(show_info_list_line[i])
        show_info_list_line =  new_show_list
        length = len(show_info_list_line)
        for k in range(0,length):
            col_value_list = re.split(r'\s{2,}', show_info_list_line[k])
            title_col = col_value_list[0]           #表头的列值位*****
            if "Neighbor" in col_value_list :
                title_row = col_value_list
            else:
                if col_value_list != "":
                    rol_title_list.append(title_col)
                    for s in range (1,len(col_value_list)):           #表头的列值位右边开始*****
                        key_name = '%s/%s'%(title_col,title_row[s])
                        dict_value[key_name]=col_value_list[s]
                    key_name = '%s/%s' % (title_col, title_row[0])
                    dict_value[key_name]=col_value_list[0]
        dict_value[value_title+"_list"] = rol_title_list
        return dict_value
    def dut_get_show_ip_pim_densemode_neighbor(self,show_info):
        """
        Function:show ip pim dense-mode neighbor回显解析函数
        CLI命令:show ip pim dense-mode neighbor
        回显信息示例:
RGOS_12_1#show ip pim dense-mode neighbor
Neighbor-Address Interface                     Uptime/Expires      Ver
192.168.2.2      GigabitEthernet 0/1           00:00:49/00:01:28   v2

        Returns:
{"192.168.2.2/Interface": "GigabitEthernet 0/1"
"192.168.2.2/Neighbor-Address": "192.168.2.2"
"192.168.2.2/Uptime/Expires": "00:00:49/00:01:28"
"192.168.2.2/Ver": "v2"
"Neighbor-Address_list": ["192.168.2.2"]}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip pim dense-mode neighbor | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="Neighbor-Address"     #需要变参的地方
        col_len_list = []
        #创建字典
        dict_value={}
        rol_title_list = []
        title_row =[]
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        length = len(show_info_list_line)
        for line_len_num in range(0,length):
            if "Neighbor-Address" in show_info_list_line[line_len_num]:              #***********
                show_info_list_line[line_len_num] = show_info_list_line[line_len_num].replace("Neighbor-Address","Neighbor-Address  ")
        new_show_list=[]
        for i in range(len(show_info_list_line)):
            if "Neighbor" in show_info_list_line[i]:
                new_show_list.append(show_info_list_line[i])
            elif ":" in show_info_list_line[i]:
                if i+1 < len(show_info_list_line):
                    if ":" not in show_info_list_line[i+1]:
                        obj_1 = re.match("(.*)(\s+\d+:.*)",show_info_list_line[i])
                        value_1 =obj_1.group(1).strip()+" "+show_info_list_line[i+1].strip()+"   "+obj_1.group(2).strip()
                        new_show_list.append(value_1)
                    else:
                        new_show_list.append(show_info_list_line[i])
                else:
                        new_show_list.append(show_info_list_line[i])
        show_info_list_line =  new_show_list
        length = len(show_info_list_line)
        for k in range(0,length):
            col_value_list = re.split(r'\s{2,}', show_info_list_line[k])
            title_col = col_value_list[0]           #表头的列值位*****
            if value_title in col_value_list :
                title_row = col_value_list
            else:
                if col_value_list != "":
                    rol_title_list.append(title_col)
                    for s in range (1,len(col_value_list)):           #表头的列值位右边开始*****
                        key_name = '%s/%s'%(title_col,title_row[s])
                        dict_value[key_name]=col_value_list[s]
                    key_name = '%s/%s' % (title_col, title_row[0])
                    dict_value[key_name]=col_value_list[0]
        dict_value[value_title+"_list"] = rol_title_list
        return dict_value
    def dut_get_show_ipv6_ref_route_statistics(self,show_info):
        """
        Function:show ipv6 ref route statistics回显解析函数
        CLI命令:show ipv6 ref route statistics
        回显信息示例:
5848VAC#show ipv6 ref route statistics 
global route table statistic:
    Common route         : 1
    Direct net route     : 0
    Direct net addr route: 0
    Local route          : 0
    Default route        : 0
    Drop route           : 0
    MPLS FTN route       : 0
5848VAC#

        Returns:
{'Direct net addr route': '0'
'global route table statistic': ''
'MPLS FTN route': '0'
'Direct net route': '0'
'Common route': '1'
'Default route': '0'
'Local route': '0'
'Drop route': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 ref route statistics | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        str_arg = "show"
        return self.dut_get_show_info_analy_all_colon(show_info,str_arg)
    def dut_get_show_ipv6_ref_adjacency_statistics(self,show_info):
        """
        Function:show ipv6 ref adjacency statistics回显解析函数
        CLI命令:show ipv6 ref adjacency statistics
        回显信息示例:
5848VAC#show ipv6 ref adjacency statistics 
adjacency balance table statistic:
    dest-address load-sharing
    balance: 0

adjacency node table statistic:
    total  : 2
    local  : 1
    glean  : 0
    forward: 0
    discard: 0
    mcast  : 0
    punt   : 1
5848VAC#

        Returns:
{'balance': '0'
'glean': '0'
'mcast': '0'
'punt': '1'
'forward': '0'
'discard': '0'
'adjacency node table statistic': ''
'total': '2'
'local': '1'
'adjacency balance table statistic': 'dest-address load-sharing'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 ref adjacency statistics | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        length = len(dut_info_split)

        for i in range(length):
            if re.match('adjacency balance',dut_info_split[i]):
                key = dut_info_split[i].strip(':')
                value = dut_info_split[i+1]
                value = value.strip()
                dict_value[key] = value
                dut_info_split.remove(dut_info_split[i+1])
                dut_info_split.remove(dut_info_split[i])
                break

        length = len(dut_info_split)
        for i in range(length):
            if re.match('(.*):(.*)',dut_info_split[i]):
                matchObj = re.match('(.*):(.*)',dut_info_split[i])
                key = matchObj.group(1).strip()
                if matchObj.group(2)=='':
                    value = ''
                else:
                    value = matchObj.group(2).strip()
                dict_value[key] = value
        return dict_value
    def dut_get_show_ip_dhcp_snooping(self,show_info):     #函数名由锐捷提供
        """
        Function:show ip dhcp snooping回显解析函数
        CLI命令:show ip dhcp snooping
        回显信息示例:
Ruijie#show ip dhcp snooping 

Switch DHCP snooping status                     :   ENABLE
DHCP snooping Verification of hwaddr status     :   DISABLE
DHCP snooping database write-delay time         :   0 seconds
DHCP snooping option 82 status                  :   ENABLE
DHCP snooping Support bootp bind status         :   ENABLE

Interface                       Trusted         Rate limit (pps)
------------------------        -------         ----------------
Default                         No              unlimited

        Returns:
{'DHCP snooping Support bootp bind status': 'ENABLE'
'DHCP snooping Verification of hwaddr status': 'DISABLE'
'Switch DHCP snooping status': 'ENABLE'
'Default/Trusted': 'No'
'Interface_list': ['Default'], 'Default/Rate limit (pps)': 'unlimited'
'DHCP snooping database write-delay time': '0 seconds'
'DHCP snooping option 82 status': 'ENABLE'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip dhcp snooping | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="Interface"     #需要变参的地方
        col_len_list = []
        #创建字典
        dict_value3={}
        address_list = []
        table_2 = 0
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')

        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if "Interface" in show_info_list_line[line_len_num]:              #***********
                table_1 = line_len_num
                #print table_1
            if ":" in show_info_list_line[line_len_num]:              #***********
                list_1 = show_info_list_line[line_len_num].split(":")
                dict_value3[list_1[0].strip()]=list_1[1].strip()
        (whippletree_list_1,cut_del_1) = self.dut_show_autoget_whippletree(table_1,line_len,show_info_list_line)
        show_info_list_line.remove(show_info_list_line[cut_del_1])
        new_show_info_num = len(show_info_list_line)
        for line_len_num in range(0,new_show_info_num):
            if "Interface" in show_info_list_line[line_len_num]:              #***********
                table_3 = line_len_num
        dict_value2 = self.dut_show_autoget_form(table_3,new_show_info_num,value_title,whippletree_list_1,show_info_list_line)
        dict_value =dict(dict_value2.items()+dict_value3.items())
        return dict_value
    def dut_get_show_ip_igmp_snooping_querier(self,show_info):
        """
        Function:show ip igmp snooping querier回显解析函数
        CLI命令:show ip igmp snooping querier
        回显信息示例:
Ruijie#show ip igmp snooping querier 
Vlan      IP Address           IGMP Version           Port
-----------------------------------------------------------
10        192.168.5.1              2                   switch

        Returns:
{"192.168.5.1/IGMP Version": "2"
"192.168.5.1/Port": "switch"
"192.168.5.1/Vlan": "10"
"IP Address_list": ["192.168.5.1"]}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip igmp snooping querier | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="IP Address"     #需要变参的地方
        col_len_list = []
        #创建字典
        dict_value={}
        rol_title_list = []
        title_row =[]
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        length = len(show_info_list_line)
        for line_len_num in range(0,length):
            if "-----" in show_info_list_line[line_len_num]:              #***********
                show_info_list_line.remove(show_info_list_line[line_len_num])
                break
        length = len(show_info_list_line)
        for k in range(0,length):
            col_value_list = re.split(r'\s{2,}', show_info_list_line[k])
            title_col = col_value_list[1]           #表头的列值位*****
            if value_title in col_value_list :
                title_row = col_value_list
            else:
                if col_value_list != "":
                    rol_title_list.append(title_col)
                    for s in range (2,len(col_value_list)):           #表头的列值位右边开始*****
                        key_name = '%s/%s'%(title_col,title_row[s])
                        dict_value[key_name]=col_value_list[s]
                    key_name = '%s/%s'%(title_col,title_row[0])
                    dict_value[key_name]=col_value_list[0]
        dict_value[value_title+"_list"] = rol_title_list
        return dict_value
    def dut_get_show_webauth_user_all(self, show_info):
        """
        Function:show web-auth user all回显解析函数
        CLI命令:show web-auth user all
        回显信息示例:
Ruijie#show web-auth user all
Current user num: 1, Online 1
Address                                 Online  Time Limit     Time Used      Status  Name              
----------------------------------- ------- -------------- -------------- ------- ------------------
131.0.72.201                            On      240d 00:00:00  0d 00:06:09    Active  106_31_PC

        Returns:
{"131.0.72.201/Time Used": "00  0d 00:06:09"
"131.0.72.201/Stat": "Acti"
"131.0.72.201/us  Name": "ve  106_31_PC"
"131.0.72.201/ne  Time Limit": "240d 00:00:"
"131.0.72.201/Onli": "On"
"Online": "1"
"Current user num": "1"
"Address_list": ["131.0.72.201"]}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show web-auth user all | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="Address"     #需要变参的地方
        col_len_list = []
        #创建字典
        dict_value={}
        address_list = []

        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if "Address" in show_info_list_line[line_len_num]:              #***********
                table_1 = line_len_num
            if "Current user" in show_info_list_line[line_len_num]:              #***********
                matchObj = re.match('(Current user num): (\d+), (Online) (\d+)',show_info_list_line[line_len_num])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                dict_value[matchObj.group(3)]=matchObj.group(4)

        (whippletree_list_1,cut_del_1) = self.dut_show_autoget_whippletree(table_1,line_len,show_info_list_line)
        show_info_list_line.remove(show_info_list_line[cut_del_1])
        new_show_info_num = len(show_info_list_line)
        for line_len_num in range(0,new_show_info_num):
            if "Address" in show_info_list_line[line_len_num]:              #***********
                table_2 = line_len_num
        dict_value1 = self.dut_show_autoget_form(table_2,new_show_info_num,value_title,whippletree_list_1,show_info_list_line)
        dict_value2 = dict(dict_value1.items()+dict_value.items())
        return dict_value2
    def dut_get_show_webauth_template(self, show_info):
        """
        Function:show web-auth template回显解析函数
        CLI命令:show web-auth template
        回显信息示例:
Ruijie#show web-auth template
Webauth Template Settings: 
------------------------------------------------------------
  Name:      eportalv2
  Url:       http://20.1.1.3:8080/eportal/index.jsp
  Ip:        20.1.1.3
  BindMode:  ip-mac-mode
  Type:      v2
  Port:      50100
  Acctmlist: default
  Authmlist: default
  Portalsrv: Enable
  Radiusrv:  Enable

        Returns:
{"eportalv2/BindMode": "ip-mac-mode"
"eportalv2/Type": "v2"
"eportalv2/Port": "50100"
"eportalv2/Url": "http://20.1.1.3:8080/eportal/index.jsp"
"eportalv2/Portalsrv": "Enable"
"eportalv2/Ip": "20.1.1.3"
"eportalv2/Authmlist": "default"
"eportalv2/Acctmlist": "default"
"eportalv2/Radiusrv": "Enable"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show web-auth template | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        # 创建字典
        dict_value={}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        show_info_list_line.remove(show_info_list_line[0])
        show_info_list_line.remove(show_info_list_line[0])
        for i in range(len(show_info_list_line)):
            if re.match(r'^Name',show_info_list_line[i].strip()):
                te1 = show_info_list_line[i].split(':')
                name = te1[1].strip()
                for j in range(i+1,len(show_info_list_line)):
                    if re.match(r'^Name',show_info_list_line[j].strip()):
                        break
                    if re.match(r'----',show_info_list_line[j].strip()):
                        continue
                    te2 = show_info_list_line[j].split(':',1)
                    key = name + '/' + te2[0].strip()
                    dict_value[key] = te2[1].strip()
        return dict_value
    def dut_get_show_webauth_user_name_word(self,show_info):
        """
        Function:show web-auth user name (word)回显解析函数
        CLI命令:show web-auth user name (word)
        回显信息示例:
Ruijie#show web-auth user name yhx
Address:        5.0.0.2
Mac:            e005.c5ef.e20d
Port:           GigabitEthernet 2/2/17
Online:         On
Time Limit:     240d 00:00:00
Time used:      0d 00:05:38
Time Start:     2018-2-7 05:29:55
Flow Up:        0
Flow Down:      0
Status:         Active

        Returns:
{'Flow Up': '0'
'Status': 'Active'
'Address': '5.0.0.2'
'Time used': '0d 00:05:38'
'Mac': 'e005.c5ef.e20d'
'Online': 'On'
'Time Limit': '240d 00:00:00'
'Time Start': '2018-2-7 05:29:55'
'Port': 'GigabitEthernet 2/2/17'
'Flow Down': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show web-auth user name (word) | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        str_arg = "show"
        return self.dut_get_show_info_analy_all_colon(show_info,str_arg)

    def dut_get_show_addressbind(self,show_info):
        """
        Function:show address-bind回显解析函数
        CLI命令:show address-bind
        回显信息示例:
Ruijie(config)#show address-bind 
Total Bind Addresses in System : 1
IpAddress                                BindingMacAddr
---------------------------------------- --------------
1.1.1.1                                  0000.0000.0001

        Returns:
{"IpAddress_list": ["1.1.1.1"], "Total Bind Addresses in System": "1"
"1.1.1.1/BindingMacAddr": "0000.0000.0001"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show address-bind | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title = 'IpAddress'
        dict_value = {}
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        while '' in dut_info_split:
            dut_info_split.remove('')
        length = len(dut_info_split)
        for i in range(length):
            if re.match('Total Bind',dut_info_split[i]):
                matchObj = re.match('(.*):(.*)',dut_info_split[i])
                dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
                dut_info_split.remove(dut_info_split[i])
                break
        length = len(dut_info_split)
        (whippletree_list_1, cut_del_1) = self.dut_show_autoget_whippletree(0, length,show_info_split)
        show_info_split.remove(show_info_split[cut_del_1])
        length = len(show_info_split)
        dict_value1 = self.dut_show_autoget_form(0, length, value_title, whippletree_list_1,show_info_split)
        dict_value = dict(dict_value.items() + dict_value1.items())
        return dict_value
    def dut_get_show_interface_arpcheck_list(self,show_info):
        """
        Function:show interface arp-check list回显解析函数
        CLI命令:show interface arp-check list
        回显信息示例:
Ruijie(config)#show interface arp-check list 
INTERFACE                SENDER MAC           SENDER IP            POLICY SOURCE       
------------------------ -------------------- -------------------- --------------------
GigabitEthernet 1/0/15   0000.0000.0001       1.1.1.1              address-bind

        Returns:
{"GigabitEthernet 1/0/15/POLICY SOURCE": "address-bind"
"INTERFACE_list": ["GigabitEthernet 1/0/15"], "GigabitEthernet 1/0/15/SENDER IP": "1.1.1.1"
"GigabitEthernet 1/0/15/SENDER MAC": "0000.0000.0001"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interface arp-check list | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title = 'INTERFACE'
        dict_value = {}
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        while '' in dut_info_split:
            dut_info_split.remove('')
        length = len(dut_info_split)
        (whippletree_list_1, cut_del_1) = self.dut_show_autoget_whippletree(0, length,show_info_split)
        show_info_split.remove(show_info_split[cut_del_1])
        length = len(show_info_split)
        dict_value = self.dut_show_autoget_form(0, length, value_title, whippletree_list_1,show_info_split)
        return dict_value
    def dut_get_show_dot1x_guardipsegment(self, show_info):
        """
        Function:show dot1x guard-ip-segment回显解析函数
        CLI命令:show dot1x guard-ip-segment
        回显信息示例:
Ruijie(config)#show dot1x guard-ip-segment 
total ip segment num: 2

      IP              Mask     
--------------- ---------------
5.0.0.0         255.255.0.0    
1.0.0.1         255.255.255.255
Ruijie(config)#

        Returns:
{'1.0.0.1/Mask': '255.255.255.255'
'total ip segment num': '2'
'5.0.0.0/Mask': '255.255.0.0'
'IP_list': ['5.0.0.0'
'1.0.0.1']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show dot1x guard-ip-segment | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title = 'IP'
        dict_value = {}
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        while '' in dut_info_split:
            dut_info_split.remove('')
        length = len(dut_info_split)
        for i in range(length):
            if re.match('total ip', dut_info_split[i]):
                matchObj = re.match('(.*):(.*)', dut_info_split[i])
                dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
                dut_info_split.remove(dut_info_split[i])
                break
        length = len(dut_info_split)
        (whippletree_list_1, cut_del_1) = self.dut_show_autoget_whippletree(0, length, show_info_split)
        show_info_split.remove(show_info_split[cut_del_1])
        length = len(show_info_split)
        dict_value1 = self.dut_show_autoget_form(0, length, value_title, whippletree_list_1, show_info_split)
        dict_value = dict(dict_value.items() + dict_value1.items())
        return dict_value
    def dut_get_show_antiarpspoofing(self,show_info):
        """
        Function:show anti-arp-spoofing回显解析函数
        CLI命令:show anti-arp-spoofing
        回显信息示例:
Ruijie(config-if-GigabitEthernet 1/0/15)#show anti-arp-spoofing      
NO    PORT       IP               STATUS    
----- ---------- ---------------- ----------
1     Gi1/0/15   2.0.0.1          active    
Ruijie(config-if-GigabitEthernet 1/0/15)#

        Returns:
{'1/STATUS': 'active'
'1/PORT': 'Gi1/0/15'
'1/IP': '2.0.0.1'
'NO_list': ['1']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show anti-arp-spoofing | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title = 'NO'
        dict_value = {}
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        while '' in dut_info_split:
            dut_info_split.remove('')
        length = len(dut_info_split)
        (whippletree_list_1, cut_del_1) = self.dut_show_autoget_whippletree(0, length,show_info_split)
        show_info_split.remove(show_info_split[cut_del_1])
        length = len(show_info_split)
        dict_value = self.dut_show_autoget_form(0, length, value_title, whippletree_list_1,show_info_split)
        return dict_value
    def dut_get_show_webauth_guardipsegment(self,show_info):
        """
        Function:show web-auth guard-ip-segment回显解析函数
        CLI命令:show web-auth guard-ip-segment
        回显信息示例:
Ruijie(config)#show web-auth guard-ip-segment 
Total ip segment num: 10
  Address         Mask           
  --------------- ---------------
  5.0.0.0         255.255.0.0    
  223.0.0.0       255.255.255.0  
  223.255.255.0   255.255.255.0  
  223.255.255.255 255.255.255.255
  1.0.0.0         255.255.255.255
  1.0.0.0         255.0.0.0      
  128.0.0.0       128.0.0.0      
  128.0.0.0       255.0.0.0      
  5.1.5.0         255.255.255.0  
  192.0.0.0       255.255.255.255

        Returns:
{"Total ip segment num": "10"
"1.0.0.0/255.255.255.255": "255.255.255.255"
"1.0.0.0/255.0.0.0": "255.0.0.0"
"Address/Mask": ["5.0.0.0/255.255.0.0"
"223.0.0.0/255.255.255.0"
"223.255.255.0/255.255.255.0"
"223.255.255.255/255.255.255.255"
"1.0.0.0/255.255.255.255"
"1.0.0.0/255.0.0.0"
"128.0.0.0/128.0.0.0"
"128.0.0.0/255.0.0.0"
"5.1.5.0/255.255.255.0"
"192.0.0.0/255.255.255.255"], "192.0.0.0/255.255.255.255": "255.255.255.255"
"223.255.255.0/255.255.255.0": "255.255.255.0"
"128.0.0.0/255.0.0.0": "255.0.0.0"
"128.0.0.0/128.0.0.0": "128.0.0.0"
"5.1.5.0/255.255.255.0": "255.255.255.0"
"223.0.0.0/255.255.255.0": "255.255.255.0"
"223.255.255.255/255.255.255.255": "255.255.255.255"
"5.0.0.0/255.255.0.0": "255.255.0.0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show web-auth guard-ip-segment | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title = 'Address'
        length_list = []
        dict_value = {}
        table_info = []
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        while '' in dut_info_split:
            dut_info_split.remove('')
        length = len(dut_info_split)
        ######################################################################################
        for i in range(length):
            if re.match('Total ip',dut_info_split[i]):
                matchObj = re.match('(.*):(.*)',dut_info_split[i])
                dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
                dut_info_split.remove(dut_info_split[i])
                break
        table_info = dut_info_split
        length = len(table_info)
        for i in range(length):
            if re.match('.*---+.*', table_info[i]):
                line_split = table_info[i].split(' ')
                sum = 0
                space_length_list = []
                word_lenggth_list = []
                for j in range(len(line_split)):
                    if j == 0:
                        pass
                    else:
                        if line_split[j] != '':
                            space_length_list.append(sum + 1)
                            sum = 0
                        else:
                            sum = sum + 1
                while '' in line_split:
                    line_split.remove('')
                for j in line_split:
                    word_lenggth_list.append(len(j))
                for j in range(len(space_length_list)):
                    length_list.append(word_lenggth_list[j] + space_length_list[j])
                table_info.remove(table_info[i])
                break
        length_list_len = len(length_list)
        length = len(table_info)
        OurAddr_list = []
        for i in range(length):
            sight = 0
            sight_sum = 0
            list_len = []
            for j in range(length_list_len):
                sight_sum = sight_sum + int(length_list[j])
                row_value = table_info[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.strip()
                list_len.append(row_value)
            if list_len[0] == value_title:
                title = list_len
            elif list_len[0] != value_title:
                OurAddr_list.append(list_len[0]+'/'+list_len[1])
                for s in range(1, length_list_len):
                    key_name = list_len[0]+'/'+list_len[s].strip()
                    dict_value[key_name] = list_len[s].strip()
            dict_value['Address/Mask'] = OurAddr_list
        return dict_value
    def dut_get_traceroute_ip(self,show_info):
        ip_list = []
        dict_value = {}
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        while '' in dut_info_split:
            dut_info_split.remove('')
        length = len(dut_info_split)
        for i in range(length):
            if re.match('\s*\d+\s+\d+.\d+.\d+.\d+',dut_info_split[i]):
                matchObj = re.match('\s*\d+\s+(\d+.\d+.\d+.\d+)(.*)',dut_info_split[i])
                key = matchObj.group(1)
                ip_list.append(key)
                msec_num = 0
                value_str = matchObj.group(2).strip()
                value = value_str.split(' ')
                value_length = len(value)
                for i in range(value_length):
                    if value[i] == 'msec':
                        msec_num = msec_num + 1
                    else:pass
                dict_value[key] = msec_num
            elif re.match('\s*\d+\s+(\S+)\s+(.*)',dut_info_split[i]):
                matchObj = re.match('\s*\d+\s+(\S+)\s+(.*)',dut_info_split[i])
                key = matchObj.group(1)
                ip_list.append(key)
                msec_num = 0
                value_str = matchObj.group(2).strip()
                value = value_str.split(' ')
                value_length = len(value)
                for i in range(value_length):
                    if value[i] == 'msec':
                        msec_num = msec_num + 1
                    else:pass
                dict_value[key] = msec_num
            else:
                pass
        dict_value["ip_list"]=ip_list
        return dict_value
    def dut_get_traceroute_oob_ip(self,show_info):
        ip_list = []
        dict_value = {}
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        while '' in dut_info_split:
            dut_info_split.remove('')
        length = len(dut_info_split)
        for i in range(length):
            if re.match('\s*\d+\s+\d+.\d+.\d+.\d+',dut_info_split[i]):
                matchObj = re.match('\s*\d+\s+(\d+.\d+.\d+.\d+)(.*)',dut_info_split[i])
                key = matchObj.group(1)
                ip_list.append(key)
                msec_num = 0
                value_str = matchObj.group(2).strip()
                value = value_str.split(' ')
                value_length = len(value)
                for i in range(value_length):
                    if value[i] == 'msec':
                        msec_num = msec_num + 1
                    else:pass
                dict_value[key] = msec_num
            else:
                pass
        dict_value["ip_list"]=ip_list
        return dict_value
    def dut_get_rdnd_status(self,show_info):
        str_arg ="rdnd status"
        return self.dut_get_show_info_analy_all_colon(show_info,str_arg)
    def dut_get_show_switch_virtual_dualactive_bfd(self,show_info):
        """
        Function:show switch virtual dual-active bfd回显解析函数
        CLI命令:show switch virtual dual-active bfd
        回显信息示例:
Ruijie#show switch virtual dual-active bfd
BFD dual-active detection enabled: Yes
BFD dual-active interface configured:
  GigabitEthernet 2/8/21: UP
  GigabitEthernet 1/1/21: UP

        Returns:
{'GigabitEthernet 2/8/21': 'UP'
'BFD dual-active interface configured': ''
'GigabitEthernet 1/1/21': 'UP'
'BFD dual-active detection enabled': 'Yes'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show switch virtual dual-active bfd | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        str_arg ="switch virtual"
        return self.dut_get_show_info_analy_all_colon(show_info,str_arg)
    def dut_get_show_switch_virtual_dualactive_aggregateport(self,show_info):
        """
        Function:show switch virtual dual-active aggregateport回显解析函数
        CLI命令:show switch virtual dual-active aggregateport
        回显信息示例:
Ruijie#show switch virtual dual-active aggregateport 
Aggregateport dual-active detection enabled: Yes
Aggregateport dual-active interface configured:
  AggregatePort 1: Yes
    GigabitEthernet 1/1/2: Yes
    GigabitEthernet 1/1/3: Yes

        Returns:
{'AggregatePort 1': 'Yes'
'GigabitEthernet 1/1/2': 'Yes'
'Aggregateport dual-active detection enabled': 'Yes'
'GigabitEthernet 1/1/3': 'Yes'
'Aggregateport dual-active interface configured': ''}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show switch virtual dual-active aggregateport | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        str_arg ="switch virtual"
        return self.dut_get_show_info_analy_all_colon(show_info,str_arg)

    def dut_get_show_ipv6_route_vrf_word_summary(self, show_info):
        """
        Function:show ipv6 route vrf (word)回显解析函数
        CLI命令:show ipv6 route vrf (word)
        回显信息示例:
Ruijie(config-router)#show ipv6 route vrf （test2） summary
IPv6 routing table name is - test2 - 106 entries
IPv6 routing table default maximum-paths is 32
Local           2
Connected       3
Static          0
RIP             0
OSPF            0
ISIS            0
BGP             101
------------------------
Total           106

        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 route vrf (word) | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        if "NORMAL" in show_info:
            show_info_list = self.dut_get_start_show_info(show_info)
            new_list = []
            for value in show_info_list:
                if re.match("Entries: (\d+), ((based on route prefixes|based on route nexthops))", value.strip()):
                    obj = re.match("Entries: (\d+), ((based on route prefixes|based on route nexthops))",
                                   value.strip())
                    dict_value[obj.group(2)] = obj.group(1)
                elif "NORMAL" in value and "TOTAL" in value:
                    value = "title_name  " + value
                elif re.match("(\S+)\s+\d+\s+\d+\s+\d+\s+(\d+)", value.strip()):
                    obj_2 = re.match("(\S+)\s+\d+\s+\d+\s+\d+\s+(\d+)", value.strip())
                    dict_value[obj_2.group(1)] = obj_2.group(2)
                new_list.append(value.strip())
            new_show = "\n".join(new_list)
            dict_value_2 = self.dut_show_autoget_blank_list(new_show, "title_name", split_one=1)
            return dict(dict_value.items() + dict_value_2.items())

        else:
            show_info_split = show_info.split("\n")
            if re.match(r'.*#.*', show_info_split[0]):
                show_info_split.remove(show_info_split[0])
            if re.match(r'.*show.*', show_info_split[0]):
                show_info_split.remove(show_info_split[0])
            if re.match(r'.*#.*', show_info_split[-1]):
                show_info_split.remove(show_info_split[-1])
            for i in show_info_split:
                if '' in show_info_split:
                    show_info_split.remove('')
            for value in show_info_split:
                if "---" in value:
                    pass
                elif "IPv6 routing table name" in value:
                    re_match = re.match(".*-(.*)-.*", value)
                    dict_value['IPv6 routing table name'] = re_match.group(1).strip()
                elif "default maximum-paths" in value:
                    list1 = value.split("is")
                    dict_value[list1[0].strip()] = list1[1].strip()
                else:
                    list2 = re.split(r'\s{2,}', value)
                    dict_value[list2[0].strip()] = list2[1].strip()
            return dict_value
    def dut_get_show_interface_description(self,show_info):
        """
        Function:show interface description回显解析函数
        CLI命令:show interface description
        回显信息示例:
Ruijie(config)#show interface description 
Interface                                Status   Administrative Description
---------------------------------------- -------- -------------- -----------
GigabitEthernet 2/1/1                    down     down           
GigabitEthernet 2/1/2                    down     down           
GigabitEthernet 2/1/3                    down     down           
GigabitEthernet 2/1/4                    down     down           
GigabitEthernet 2/1/5                    down     down           
GigabitEthernet 2/1/6                    down     down           
GigabitEthernet 2/1/7                    down     down           
GigabitEthernet 2/1/8                    down     down           
GigabitEthernet 2/1/9                    down     down           
GigabitEthernet 2/1/10                   down     down           
GigabitEthernet 2/1/11                   down     down           
GigabitEthernet 2/1/12                   down     down           
GigabitEthernet 2/1/13                   down     down           
GigabitEthernet 2/1/14                   down     down           
GigabitEthernet 2/1/15                   down     down           
GigabitEthernet 2/1/16                   down     down           
GigabitEthernet 2/1/17                   down     down           
GigabitEthernet 2/1/18                   down     down           
GigabitEthernet 2/1/19                   down     down           
GigabitEthernet 2/1/20                   down     down           
GigabitEthernet 2/1/21                   down     down           
GigabitEthernet 2/1/22                   down     down           
GigabitEthernet 2/1/23                   down     down           
GigabitEthernet 2/1/24                   down     down           
GigabitEthernet 2/1/25                   down     down           
GigabitEthernet 2/1/26                   down     down           
GigabitEthernet 2/1/27                   down     down           
GigabitEthernet 2/1/28                   down     down           
GigabitEthernet 2/1/29                   down     down           
GigabitEthernet 2/1/30                   down     down           
GigabitEthernet 2/1/31                   down     down           
GigabitEthernet 2/1/32                   down     down           
GigabitEthernet 2/1/33                   down     down           
GigabitEthernet 2/1/34                   down     down           
GigabitEthernet 2/1/35                   down     down           
GigabitEthernet 2/1/36                   down     down           
GigabitEthernet 2/1/37                   down     down           
GigabitEthernet 2/1/38                   down     down           
GigabitEthernet 2/1/39                   down     down           
GigabitEthernet 2/1/40                   down     down           
GigabitEthernet 2/1/41                   down     down           
GigabitEthernet 2/1/42                   down     down           
GigabitEthernet 2/1/43                   down     down           
GigabitEthernet 2/1/44                   down     down           
TenGigabitEthernet 2/1/45                down     down           
TenGigabitEthernet 2/1/46                down     down           
TenGigabitEthernet 2/1/47                down     down           
TenGigabitEthernet 2/1/48                down     down           
TenGigabitEthernet 2/6/1                 down     down           
TenGigabitEthernet 2/6/2                 down     down           
TenGigabitEthernet 2/6/3                 down     down           
TenGigabitEthernet 2/6/4                 down     down           
TenGigabitEthernet 2/6/5                 down     down           
TenGigabitEthernet 2/6/6                 down     down           
TenGigabitEthernet 2/6/7                 down     down           
Mgmt 2/0                                 up       up             IP management Console
Ruijie(config)#

        Returns:
{'GigabitEthernet 2/1/30/Description': ''
'TenGigabitEthernet 2/1/48/Description': ''
'TenGigabitEthernet 2/6/5/Administrative': 'down'
'GigabitEthernet 2/1/18/Status': 'down'
'GigabitEthernet 2/1/35/Administrative': 'down'
'GigabitEthernet 2/1/30/Status': 'down'
'GigabitEthernet 2/1/19/Administrative': 'down'
'TenGigabitEthernet 2/6/3/Administrative': 'down'
'TenGigabitEthernet 2/6/7/Description': ''
'GigabitEthernet 2/1/42/Status': 'down'
'TenGigabitEthernet 2/6/1/Status': 'down'
'GigabitEthernet 2/1/7/Administrative': 'down'
'GigabitEthernet 2/1/1/Administrative': 'down'
'GigabitEthernet 2/1/43/Description': ''
'GigabitEthernet 2/1/19/Status': 'down'
'GigabitEthernet 2/1/6/Administrative': 'down'
'GigabitEthernet 2/1/44/Description': ''
'GigabitEthernet 2/1/28/Administrative': 'down'
'GigabitEthernet 2/1/14/Description': ''
'TenGigabitEthernet 2/6/6/Description': ''
'GigabitEthernet 2/1/28/Description': ''
'GigabitEthernet 2/1/5/Status': 'down'
'GigabitEthernet 2/1/5/Description': ''
'GigabitEthernet 2/1/32/Administrative': 'down'
'GigabitEthernet 2/1/33/Description': ''
'TenGigabitEthernet 2/6/5/Status': 'down'
'TenGigabitEthernet 2/6/7/Status': 'down'
'TenGigabitEthernet 2/6/4/Status': 'down'
'TenGigabitEthernet 2/6/6/Status': 'down'
'GigabitEthernet 2/1/2/Administrative': 'down'
'TenGigabitEthernet 2/6/7/Administrative': 'down'
'TenGigabitEthernet 2/1/45/Administrative': 'down'
'GigabitEthernet 2/1/17/Status': 'down'
'GigabitEthernet 2/1/18/Description': ''
'Mgmt 2/0/Status': 'up'
'TenGigabitEthernet 2/6/3/Description': ''
'TenGigabitEthernet 2/6/2/Description': ''
'GigabitEthernet 2/1/33/Administrative': 'down'
'GigabitEthernet 2/1/24/Description': ''
'TenGigabitEthernet 2/6/5/Description': ''
'GigabitEthernet 2/1/4/Status': 'down'
'GigabitEthernet 2/1/12/Administrative': 'down'
'GigabitEthernet 2/1/23/Administrative': 'down'
'GigabitEthernet 2/1/25/Status': 'down'
'GigabitEthernet 2/1/9/Description': ''
'GigabitEthernet 2/1/12/Description': ''
'GigabitEthernet 2/1/22/Administrative': 'down'
'GigabitEthernet 2/1/40/Description': ''
'Mgmt 2/0/Description': 'IP management Console'
'GigabitEthernet 2/1/10/Description': ''
'GigabitEthernet 2/1/15/Administrative': 'down'
'GigabitEthernet 2/1/24/Administrative': 'down'
'GigabitEthernet 2/1/25/Description': ''
'GigabitEthernet 2/1/27/Administrative': 'down'
'TenGigabitEthernet 2/1/46/Administrative': 'down'
'GigabitEthernet 2/1/8/Status': 'down'
'TenGigabitEthernet 2/1/48/Status': 'down'
'GigabitEthernet 2/1/6/Status': 'down'
'GigabitEthernet 2/1/13/Description': ''
'GigabitEthernet 2/1/13/Status': 'down'
'GigabitEthernet 2/1/9/Status': 'down'
'GigabitEthernet 2/1/8/Administrative': 'down'
'GigabitEthernet 2/1/25/Administrative': 'down'
'TenGigabitEthernet 2/1/47/Administrative': 'down'
'GigabitEthernet 2/1/36/Status': 'down'
'GigabitEthernet 2/1/29/Description': ''
'TenGigabitEthernet 2/1/48/Administrative': 'down'
'GigabitEthernet 2/1/3/Description': ''
'TenGigabitEthernet 2/1/46/Status': 'down'
'GigabitEthernet 2/1/1/Description': ''
'TenGigabitEthernet 2/6/2/Status': 'down'
'GigabitEthernet 2/1/20/Description': ''
'GigabitEthernet 2/1/6/Description': ''
'TenGigabitEthernet 2/1/46/Description': ''
'GigabitEthernet 2/1/31/Administrative': 'down'
'GigabitEthernet 2/1/10/Status': 'down'
'GigabitEthernet 2/1/40/Status': 'down'
'GigabitEthernet 2/1/16/Description': ''
'GigabitEthernet 2/1/2/Description': ''
'GigabitEthernet 2/1/31/Description': ''
'GigabitEthernet 2/1/38/Description': ''
'GigabitEthernet 2/1/22/Status': 'down'
'GigabitEthernet 2/1/21/Administrative': 'down'
'GigabitEthernet 2/1/1/Status': 'down'
'GigabitEthernet 2/1/43/Status': 'down'
'GigabitEthernet 2/1/21/Status': 'down'
'GigabitEthernet 2/1/13/Administrative': 'down'
'GigabitEthernet 2/1/14/Administrative': 'down'
'GigabitEthernet 2/1/44/Administrative': 'down'
'GigabitEthernet 2/1/26/Description': ''
'GigabitEthernet 2/1/4/Administrative': 'down'
'GigabitEthernet 2/1/8/Description': ''
'Interface_list': ['GigabitEthernet 2/1/1'
'GigabitEthernet 2/1/2'
'GigabitEthernet 2/1/3'
'GigabitEthernet 2/1/4'
'GigabitEthernet 2/1/5'
'GigabitEthernet 2/1/6'
'GigabitEthernet 2/1/7'
'GigabitEthernet 2/1/8'
'GigabitEthernet 2/1/9'
'GigabitEthernet 2/1/10'
'GigabitEthernet 2/1/11'
'GigabitEthernet 2/1/12'
'GigabitEthernet 2/1/13'
'GigabitEthernet 2/1/14'
'GigabitEthernet 2/1/15'
'GigabitEthernet 2/1/16'
'GigabitEthernet 2/1/17'
'GigabitEthernet 2/1/18'
'GigabitEthernet 2/1/19'
'GigabitEthernet 2/1/20'
'GigabitEthernet 2/1/21'
'GigabitEthernet 2/1/22'
'GigabitEthernet 2/1/23'
'GigabitEthernet 2/1/24'
'GigabitEthernet 2/1/25'
'GigabitEthernet 2/1/26'
'GigabitEthernet 2/1/27'
'GigabitEthernet 2/1/28'
'GigabitEthernet 2/1/29'
'GigabitEthernet 2/1/30'
'GigabitEthernet 2/1/31'
'GigabitEthernet 2/1/32'
'GigabitEthernet 2/1/33'
'GigabitEthernet 2/1/34'
'GigabitEthernet 2/1/35'
'GigabitEthernet 2/1/36'
'GigabitEthernet 2/1/37'
'GigabitEthernet 2/1/38'
'GigabitEthernet 2/1/39'
'GigabitEthernet 2/1/40'
'GigabitEthernet 2/1/41'
'GigabitEthernet 2/1/42'
'GigabitEthernet 2/1/43'
'GigabitEthernet 2/1/44'
'TenGigabitEthernet 2/1/45'
'TenGigabitEthernet 2/1/46'
'TenGigabitEthernet 2/1/47'
'TenGigabitEthernet 2/1/48'
'TenGigabitEthernet 2/6/1'
'TenGigabitEthernet 2/6/2'
'TenGigabitEthernet 2/6/3'
'TenGigabitEthernet 2/6/4'
'TenGigabitEthernet 2/6/5'
'TenGigabitEthernet 2/6/6'
'TenGigabitEthernet 2/6/7'
'Mgmt 2/0'], 'GigabitEthernet 2/1/38/Administrative': 'down'
'GigabitEthernet 2/1/4/Description': ''
'GigabitEthernet 2/1/29/Administrative': 'down'
'TenGigabitEthernet 2/1/47/Description': ''
'GigabitEthernet 2/1/41/Administrative': 'down'
'GigabitEthernet 2/1/20/Administrative': 'down'
'TenGigabitEthernet 2/1/45/Description': ''
'GigabitEthernet 2/1/16/Status': 'down'
'GigabitEthernet 2/1/17/Administrative': 'down'
'GigabitEthernet 2/1/7/Description': ''
'GigabitEthernet 2/1/3/Administrative': 'down'
'GigabitEthernet 2/1/41/Description': ''
'GigabitEthernet 2/1/43/Administrative': 'down'
'GigabitEthernet 2/1/31/Status': 'down'
'GigabitEthernet 2/1/33/Status': 'down'
'GigabitEthernet 2/1/39/Administrative': 'down'
'GigabitEthernet 2/1/17/Description': ''
'GigabitEthernet 2/1/32/Status': 'down'
'GigabitEthernet 2/1/39/Description': ''
'GigabitEthernet 2/1/35/Description': ''
'GigabitEthernet 2/1/30/Administrative': 'down'
'GigabitEthernet 2/1/35/Status': 'down'
'GigabitEthernet 2/1/15/Description': ''
'TenGigabitEthernet 2/1/45/Status': 'down'
'GigabitEthernet 2/1/42/Administrative': 'down'
'GigabitEthernet 2/1/27/Status': 'down'
'GigabitEthernet 2/1/44/Status': 'down'
'GigabitEthernet 2/1/11/Administrative': 'down'
'Mgmt 2/0/Administrative': 'up'
'TenGigabitEthernet 2/6/4/Description': ''
'GigabitEthernet 2/1/28/Status': 'down'
'TenGigabitEthernet 2/6/6/Administrative': 'down'
'GigabitEthernet 2/1/3/Status': 'down'
'GigabitEthernet 2/1/29/Status': 'down'
'GigabitEthernet 2/1/11/Status': 'down'
'GigabitEthernet 2/1/10/Administrative': 'down'
'GigabitEthernet 2/1/16/Administrative': 'down'
'GigabitEthernet 2/1/15/Status': 'down'
'GigabitEthernet 2/1/24/Status': 'down'
'GigabitEthernet 2/1/38/Status': 'down'
'GigabitEthernet 2/1/14/Status': 'down'
'TenGigabitEthernet 2/6/1/Administrative': 'down'
'GigabitEthernet 2/1/7/Status': 'down'
'TenGigabitEthernet 2/6/2/Administrative': 'down'
'GigabitEthernet 2/1/37/Description': ''
'GigabitEthernet 2/1/34/Status': 'down'
'GigabitEthernet 2/1/2/Status': 'down'
'GigabitEthernet 2/1/5/Administrative': 'down'
'TenGigabitEthernet 2/6/1/Description': ''
'GigabitEthernet 2/1/27/Description': ''
'GigabitEthernet 2/1/21/Description': ''
'GigabitEthernet 2/1/39/Status': 'down'
'GigabitEthernet 2/1/12/Status': 'down'
'GigabitEthernet 2/1/40/Administrative': 'down'
'GigabitEthernet 2/1/23/Description': ''
'GigabitEthernet 2/1/9/Administrative': 'down'
'GigabitEthernet 2/1/26/Administrative': 'down'
'GigabitEthernet 2/1/23/Status': 'down'
'GigabitEthernet 2/1/37/Status': 'down'
'GigabitEthernet 2/1/19/Description': ''
'GigabitEthernet 2/1/22/Description': ''
'GigabitEthernet 2/1/26/Status': 'down'
'GigabitEthernet 2/1/37/Administrative': 'down'
'GigabitEthernet 2/1/36/Description': ''
'GigabitEthernet 2/1/34/Administrative': 'down'
'TenGigabitEthernet 2/1/47/Status': 'down'
'GigabitEthernet 2/1/18/Administrative': 'down'
'TenGigabitEthernet 2/6/3/Status': 'down'
'GigabitEthernet 2/1/42/Description': ''
'GigabitEthernet 2/1/41/Status': 'down'
'GigabitEthernet 2/1/34/Description': ''
'GigabitEthernet 2/1/36/Administrative': 'down'
'GigabitEthernet 2/1/32/Description': ''
'GigabitEthernet 2/1/20/Status': 'down'
'TenGigabitEthernet 2/6/4/Administrative': 'down'
'GigabitEthernet 2/1/11/Description': ''}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interface description | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="Address"     #需要变参的地方
        col_len_list = []
        #创建字典
        dict_value3={}
        address_list = []

        table_2 = 0
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*description.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if "Interface" in show_info_list_line[line_len_num]:              #***********
                table_1 = line_len_num
        (whippletree_list_1,cut_del_1) = self.dut_show_autoget_whippletree(table_1,line_len,show_info_list_line)
        show_info_list_line.remove(show_info_list_line[cut_del_1])
        new_show_info_num = len(show_info_list_line)
        for line_len_num in range(0,new_show_info_num):
            if "Interface" in show_info_list_line[line_len_num]:              #***********
                table_3 = line_len_num
        dict_value1 = self.dut_show_autoget_form(table_3,new_show_info_num,"Interface",whippletree_list_1,show_info_list_line)
        return dict_value1
    def dut_get_show_interfaces_description(self,show_info):
        """
        Function:show interface description回显解析函数
        CLI命令:show interface description
        回显信息示例:
Ruijie(config)#show interface description 
Interface                                Status   Administrative Description
---------------------------------------- -------- -------------- -----------
GigabitEthernet 2/1/1                    down     down           
GigabitEthernet 2/1/2                    down     down           
GigabitEthernet 2/1/3                    down     down           
GigabitEthernet 2/1/4                    down     down           
GigabitEthernet 2/1/5                    down     down           
GigabitEthernet 2/1/6                    down     down           
GigabitEthernet 2/1/7                    down     down           
GigabitEthernet 2/1/8                    down     down           
GigabitEthernet 2/1/9                    down     down           
GigabitEthernet 2/1/10                   down     down           
GigabitEthernet 2/1/11                   down     down           
GigabitEthernet 2/1/12                   down     down           
GigabitEthernet 2/1/13                   down     down           
GigabitEthernet 2/1/14                   down     down           
GigabitEthernet 2/1/15                   down     down           
GigabitEthernet 2/1/16                   down     down           
GigabitEthernet 2/1/17                   down     down           
GigabitEthernet 2/1/18                   down     down           
GigabitEthernet 2/1/19                   down     down           
GigabitEthernet 2/1/20                   down     down           
GigabitEthernet 2/1/21                   down     down           
GigabitEthernet 2/1/22                   down     down           
GigabitEthernet 2/1/23                   down     down           
GigabitEthernet 2/1/24                   down     down           
GigabitEthernet 2/1/25                   down     down           
GigabitEthernet 2/1/26                   down     down           
GigabitEthernet 2/1/27                   down     down           
GigabitEthernet 2/1/28                   down     down           
GigabitEthernet 2/1/29                   down     down           
GigabitEthernet 2/1/30                   down     down           
GigabitEthernet 2/1/31                   down     down           
GigabitEthernet 2/1/32                   down     down           
GigabitEthernet 2/1/33                   down     down           
GigabitEthernet 2/1/34                   down     down           
GigabitEthernet 2/1/35                   down     down           
GigabitEthernet 2/1/36                   down     down           
GigabitEthernet 2/1/37                   down     down           
GigabitEthernet 2/1/38                   down     down           
GigabitEthernet 2/1/39                   down     down           
GigabitEthernet 2/1/40                   down     down           
GigabitEthernet 2/1/41                   down     down           
GigabitEthernet 2/1/42                   down     down           
GigabitEthernet 2/1/43                   down     down           
GigabitEthernet 2/1/44                   down     down           
TenGigabitEthernet 2/1/45                down     down           
TenGigabitEthernet 2/1/46                down     down           
TenGigabitEthernet 2/1/47                down     down           
TenGigabitEthernet 2/1/48                down     down           
TenGigabitEthernet 2/6/1                 down     down           
TenGigabitEthernet 2/6/2                 down     down           
TenGigabitEthernet 2/6/3                 down     down           
TenGigabitEthernet 2/6/4                 down     down           
TenGigabitEthernet 2/6/5                 down     down           
TenGigabitEthernet 2/6/6                 down     down           
TenGigabitEthernet 2/6/7                 down     down           
Mgmt 2/0                                 up       up             IP management Console
Ruijie(config)#

        Returns:
{"GigabitEthernet 2/1/30/Description": ""
"TenGigabitEthernet 2/1/48/Description": ""
"TenGigabitEthernet 2/6/5/Administrative": "down"
"GigabitEthernet 2/1/18/Status": "down"
"GigabitEthernet 2/1/35/Administrative": "down"
"GigabitEthernet 2/1/30/Status": "down"
"GigabitEthernet 2/1/19/Administrative": "down"
"TenGigabitEthernet 2/6/3/Administrative": "down"
"TenGigabitEthernet 2/6/7/Description": ""
"GigabitEthernet 2/1/42/Status": "down"
"TenGigabitEthernet 2/6/1/Status": "down"
"GigabitEthernet 2/1/7/Administrative": "down"
"GigabitEthernet 2/1/1/Administrative": "down"
"GigabitEthernet 2/1/43/Description": ""
"GigabitEthernet 2/1/19/Status": "down"
"GigabitEthernet 2/1/6/Administrative": "down"
"GigabitEthernet 2/1/44/Description": ""
"GigabitEthernet 2/1/28/Administrative": "down"
"GigabitEthernet 2/1/14/Description": ""
"TenGigabitEthernet 2/6/6/Description": ""
"GigabitEthernet 2/1/28/Description": ""
"GigabitEthernet 2/1/5/Status": "down"
"GigabitEthernet 2/1/5/Description": ""
"GigabitEthernet 2/1/32/Administrative": "down"
"GigabitEthernet 2/1/33/Description": ""
"TenGigabitEthernet 2/6/5/Status": "down"
"TenGigabitEthernet 2/6/7/Status": "down"
"TenGigabitEthernet 2/6/4/Status": "down"
"TenGigabitEthernet 2/6/6/Status": "down"
"GigabitEthernet 2/1/2/Administrative": "down"
"TenGigabitEthernet 2/6/7/Administrative": "down"
"TenGigabitEthernet 2/1/45/Administrative": "down"
"GigabitEthernet 2/1/17/Status": "down"
"GigabitEthernet 2/1/18/Description": ""
"Mgmt 2/0/Status": "up"
"TenGigabitEthernet 2/6/3/Description": ""
"TenGigabitEthernet 2/6/2/Description": ""
"GigabitEthernet 2/1/33/Administrative": "down"
"GigabitEthernet 2/1/24/Description": ""
"TenGigabitEthernet 2/6/5/Description": ""
"GigabitEthernet 2/1/4/Status": "down"
"GigabitEthernet 2/1/12/Administrative": "down"
"GigabitEthernet 2/1/23/Administrative": "down"
"GigabitEthernet 2/1/25/Status": "down"
"GigabitEthernet 2/1/9/Description": ""
"GigabitEthernet 2/1/12/Description": ""
"GigabitEthernet 2/1/22/Administrative": "down"
"GigabitEthernet 2/1/40/Description": ""
"Mgmt 2/0/Description": "IP management Console"
"GigabitEthernet 2/1/10/Description": ""
"GigabitEthernet 2/1/15/Administrative": "down"
"GigabitEthernet 2/1/24/Administrative": "down"
"GigabitEthernet 2/1/25/Description": ""
"GigabitEthernet 2/1/27/Administrative": "down"
"TenGigabitEthernet 2/1/46/Administrative": "down"
"GigabitEthernet 2/1/8/Status": "down"
"TenGigabitEthernet 2/1/48/Status": "down"
"GigabitEthernet 2/1/6/Status": "down"
"GigabitEthernet 2/1/13/Description": ""
"GigabitEthernet 2/1/13/Status": "down"
"GigabitEthernet 2/1/9/Status": "down"
"GigabitEthernet 2/1/8/Administrative": "down"
"GigabitEthernet 2/1/25/Administrative": "down"
"TenGigabitEthernet 2/1/47/Administrative": "down"
"GigabitEthernet 2/1/36/Status": "down"
"GigabitEthernet 2/1/29/Description": ""
"TenGigabitEthernet 2/1/48/Administrative": "down"
"GigabitEthernet 2/1/3/Description": ""
"TenGigabitEthernet 2/1/46/Status": "down"
"GigabitEthernet 2/1/1/Description": ""
"TenGigabitEthernet 2/6/2/Status": "down"
"GigabitEthernet 2/1/20/Description": ""
"GigabitEthernet 2/1/6/Description": ""
"TenGigabitEthernet 2/1/46/Description": ""
"GigabitEthernet 2/1/31/Administrative": "down"
"GigabitEthernet 2/1/10/Status": "down"
"GigabitEthernet 2/1/40/Status": "down"
"GigabitEthernet 2/1/16/Description": ""
"GigabitEthernet 2/1/2/Description": ""
"GigabitEthernet 2/1/31/Description": ""
"GigabitEthernet 2/1/38/Description": ""
"GigabitEthernet 2/1/22/Status": "down"
"GigabitEthernet 2/1/21/Administrative": "down"
"GigabitEthernet 2/1/1/Status": "down"
"GigabitEthernet 2/1/43/Status": "down"
"GigabitEthernet 2/1/21/Status": "down"
"GigabitEthernet 2/1/13/Administrative": "down"
"GigabitEthernet 2/1/14/Administrative": "down"
"GigabitEthernet 2/1/44/Administrative": "down"
"GigabitEthernet 2/1/26/Description": ""
"GigabitEthernet 2/1/4/Administrative": "down"
"GigabitEthernet 2/1/8/Description": ""
"Interface_list": ["GigabitEthernet 2/1/1"
"GigabitEthernet 2/1/2"
"GigabitEthernet 2/1/3"
"GigabitEthernet 2/1/4"
"GigabitEthernet 2/1/5"
"GigabitEthernet 2/1/6"
"GigabitEthernet 2/1/7"
"GigabitEthernet 2/1/8"
"GigabitEthernet 2/1/9"
"GigabitEthernet 2/1/10"
"GigabitEthernet 2/1/11"
"GigabitEthernet 2/1/12"
"GigabitEthernet 2/1/13"
"GigabitEthernet 2/1/14"
"GigabitEthernet 2/1/15"
"GigabitEthernet 2/1/16"
"GigabitEthernet 2/1/17"
"GigabitEthernet 2/1/18"
"GigabitEthernet 2/1/19"
"GigabitEthernet 2/1/20"
"GigabitEthernet 2/1/21"
"GigabitEthernet 2/1/22"
"GigabitEthernet 2/1/23"
"GigabitEthernet 2/1/24"
"GigabitEthernet 2/1/25"
"GigabitEthernet 2/1/26"
"GigabitEthernet 2/1/27"
"GigabitEthernet 2/1/28"
"GigabitEthernet 2/1/29"
"GigabitEthernet 2/1/30"
"GigabitEthernet 2/1/31"
"GigabitEthernet 2/1/32"
"GigabitEthernet 2/1/33"
"GigabitEthernet 2/1/34"
"GigabitEthernet 2/1/35"
"GigabitEthernet 2/1/36"
"GigabitEthernet 2/1/37"
"GigabitEthernet 2/1/38"
"GigabitEthernet 2/1/39"
"GigabitEthernet 2/1/40"
"GigabitEthernet 2/1/41"
"GigabitEthernet 2/1/42"
"GigabitEthernet 2/1/43"
"GigabitEthernet 2/1/44"
"TenGigabitEthernet 2/1/45"
"TenGigabitEthernet 2/1/46"
"TenGigabitEthernet 2/1/47"
"TenGigabitEthernet 2/1/48"
"TenGigabitEthernet 2/6/1"
"TenGigabitEthernet 2/6/2"
"TenGigabitEthernet 2/6/3"
"TenGigabitEthernet 2/6/4"
"TenGigabitEthernet 2/6/5"
"TenGigabitEthernet 2/6/6"
"TenGigabitEthernet 2/6/7"
"Mgmt 2/0"], "GigabitEthernet 2/1/38/Administrative": "down"
"GigabitEthernet 2/1/4/Description": ""
"GigabitEthernet 2/1/29/Administrative": "down"
"TenGigabitEthernet 2/1/47/Description": ""
"GigabitEthernet 2/1/41/Administrative": "down"
"GigabitEthernet 2/1/20/Administrative": "down"
"TenGigabitEthernet 2/1/45/Description": ""
"GigabitEthernet 2/1/16/Status": "down"
"GigabitEthernet 2/1/17/Administrative": "down"
"GigabitEthernet 2/1/7/Description": ""
"GigabitEthernet 2/1/3/Administrative": "down"
"GigabitEthernet 2/1/41/Description": ""
"GigabitEthernet 2/1/43/Administrative": "down"
"GigabitEthernet 2/1/31/Status": "down"
"GigabitEthernet 2/1/33/Status": "down"
"GigabitEthernet 2/1/39/Administrative": "down"
"GigabitEthernet 2/1/17/Description": ""
"GigabitEthernet 2/1/32/Status": "down"
"GigabitEthernet 2/1/39/Description": ""
"GigabitEthernet 2/1/35/Description": ""
"GigabitEthernet 2/1/30/Administrative": "down"
"GigabitEthernet 2/1/35/Status": "down"
"GigabitEthernet 2/1/15/Description": ""
"TenGigabitEthernet 2/1/45/Status": "down"
"GigabitEthernet 2/1/42/Administrative": "down"
"GigabitEthernet 2/1/27/Status": "down"
"GigabitEthernet 2/1/44/Status": "down"
"GigabitEthernet 2/1/11/Administrative": "down"
"Mgmt 2/0/Administrative": "up"
"TenGigabitEthernet 2/6/4/Description": ""
"GigabitEthernet 2/1/28/Status": "down"
"TenGigabitEthernet 2/6/6/Administrative": "down"
"GigabitEthernet 2/1/3/Status": "down"
"GigabitEthernet 2/1/29/Status": "down"
"GigabitEthernet 2/1/11/Status": "down"
"GigabitEthernet 2/1/10/Administrative": "down"
"GigabitEthernet 2/1/16/Administrative": "down"
"GigabitEthernet 2/1/15/Status": "down"
"GigabitEthernet 2/1/24/Status": "down"
"GigabitEthernet 2/1/38/Status": "down"
"GigabitEthernet 2/1/14/Status": "down"
"TenGigabitEthernet 2/6/1/Administrative": "down"
"GigabitEthernet 2/1/7/Status": "down"
"TenGigabitEthernet 2/6/2/Administrative": "down"
"GigabitEthernet 2/1/37/Description": ""
"GigabitEthernet 2/1/34/Status": "down"
"GigabitEthernet 2/1/2/Status": "down"
"GigabitEthernet 2/1/5/Administrative": "down"
"TenGigabitEthernet 2/6/1/Description": ""
"GigabitEthernet 2/1/27/Description": ""
"GigabitEthernet 2/1/21/Description": ""
"GigabitEthernet 2/1/39/Status": "down"
"GigabitEthernet 2/1/12/Status": "down"
"GigabitEthernet 2/1/40/Administrative": "down"
"GigabitEthernet 2/1/23/Description": ""
"GigabitEthernet 2/1/9/Administrative": "down"
"GigabitEthernet 2/1/26/Administrative": "down"
"GigabitEthernet 2/1/23/Status": "down"
"GigabitEthernet 2/1/37/Status": "down"
"GigabitEthernet 2/1/19/Description": ""
"GigabitEthernet 2/1/22/Description": ""
"GigabitEthernet 2/1/26/Status": "down"
"GigabitEthernet 2/1/37/Administrative": "down"
"GigabitEthernet 2/1/36/Description": ""
"GigabitEthernet 2/1/34/Administrative": "down"
"TenGigabitEthernet 2/1/47/Status": "down"
"GigabitEthernet 2/1/18/Administrative": "down"
"TenGigabitEthernet 2/6/3/Status": "down"
"GigabitEthernet 2/1/42/Description": ""
"GigabitEthernet 2/1/41/Status": "down"
"GigabitEthernet 2/1/34/Description": ""
"GigabitEthernet 2/1/36/Administrative": "down"
"GigabitEthernet 2/1/32/Description": ""
"GigabitEthernet 2/1/20/Status": "down"
"TenGigabitEthernet 2/6/4/Administrative": "down"
"GigabitEthernet 2/1/11/Description": ""}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interface description | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="Address"     #需要变参的地方
        col_len_list = []
        #创建字典
        dict_value3={}
        address_list = []

        table_2 = 0
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*description.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if "Interface" in show_info_list_line[line_len_num]:              #***********
                table_1 = line_len_num
        (whippletree_list_1,cut_del_1) = self.dut_show_autoget_whippletree(table_1,line_len,show_info_list_line)
        show_info_list_line.remove(show_info_list_line[cut_del_1])
        new_show_info_num = len(show_info_list_line)
        for line_len_num in range(0,new_show_info_num):
            if "Interface" in show_info_list_line[line_len_num]:              #***********
                table_3 = line_len_num
        dict_value1 = self.dut_show_autoget_form(table_3,new_show_info_num,"Interface",whippletree_list_1,show_info_list_line)
        return dict_value1
    def dut_get_show_aaa_domain_word(self,show_info):
        """
        Function:show aaa domain (word)回显解析函数
        CLI命令:show aaa domain (word)
        回显信息示例:
Ruijie#show aaa domain .com

=============Domain com=============
State: Active
Username format: With-domain
Access limit: No limit
802.1X Access statistic: 0

Selected method list:
 authentication dot1x default
 authorization network default
 accounting network default

        Returns:
{'Selected method list': ['authentication dot1x default'
'authorization network default'
'accounting network default'], 'State': 'Active'
'Access limit': 'No limit'
'802.1X Access statistic': '0'
'Username format': 'With-domain'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show aaa domain (word) | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        new_list=[]

        show_info_list_line = show_info.split("\n")
        if re.match(r'.*aaa domain.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        line_len = len (show_info_list_line)
        for line_len_num in range (0,line_len):
            if "Selected method list" in show_info_list_line[line_len_num]:
                for new_num in range (line_len_num+1,line_len):
                    new_list.append(show_info_list_line[new_num].strip())
                dict_value["Selected method list"]=new_list
                break
            else:
                if re.match(".*:.*",show_info_list_line[line_len_num]) :
                    list_value_split = show_info_list_line[line_len_num].split (":",1)   #以冒号分割一次
                    key_name = '%s'%(list_value_split[0].lstrip().rstrip().replace("\r",""))
                    dict_value[key_name] = list_value_split[1].lstrip().rstrip().replace("\r","")
        return dict_value
    def dut_get_show_mac_vlan_num(self,show_info):
        dict_value1 = self.dut_get_show_macaddresstable(show_info)
        return dict_value1
    def dut_get_show_webauth_user_ip_ip(self,show_info):
        """
        Function:show web-auth user ip 131.0.60.2回显解析函数
        CLI命令:show web-auth user ip 131.0.60.2
        回显信息示例:
RGOS_12_1#show web-auth user ip 131.0.60.2
Address:        131.0.60.2
Mac:            0050.5691.613e
Port:           GigabitEthernet 0/1
Online:         On
Time Limit:     240d 00:00:00
Time used:      0d 00:01:47
Time Start:     2020-8-3 14:29:45
Flow Up:        0
Flow Down:      0
Status:         Active

        Returns:
{"Flow Up": "0"
"Status": "Active"
"Address": "131.0.60.2"
"Time used": "0d 00:01:47"
"Mac": "0050.5691.613e"
"Online": "On"
"Time Limit": "240d 00:00:00"
"Time Start": "2020-8-3 14:29:45"
"Port": "GigabitEthernet 0/1"
"Flow Down": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show web-auth user ip 131.0.60.2 | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        str_arg = "show"
        return self.dut_get_show_info_analy_all_colon(show_info,str_arg)
    def dut_get_show_macaddresstable_vlan_num(self,show_info):
        """
        Function:show mac-address-table vlan <num>回显解析函数
        CLI命令:show mac-address-table vlan <num>
        回显信息示例:
S57-Server-Gi0/1-6#show mac-address-table vlan 20
Vlan        MAC Address          Type     Interface
----------  -------------------- -------- -------------------
  20        0000.779e.fbeb       DYNAMIC  GigabitEthernet 0/5        
  20        000e.04b7.7cdf       DYNAMIC  GigabitEthernet 0/2        
  20        b8ca.3a98.60cb       DYNAMIC  GigabitEthernet 0/1        
S57-Server-Gi0/1-6#

        Returns:
{'GigabitEthernet 0/5/Type': 'DYNAMIC'
'GigabitEthernet 0/1/MAC Address': 'b8ca.3a98.60cb'
'GigabitEthernet 0/2/MAC Address': '000e.04b7.7cdf'
'GigabitEthernet 0/1/Vlan': '20'
'GigabitEthernet 0/2/Vlan': '20'
'GigabitEthernet 0/2/Type': 'DYNAMIC'
'GigabitEthernet 0/1/Type': 'DYNAMIC'
'GigabitEthernet 0/5/Vlan': '20'
'Interface_list': ['GigabitEthernet 0/5'
'GigabitEthernet 0/2'
'GigabitEthernet 0/1'], 'GigabitEthernet 0/5/MAC Address': '0000.779e.fbeb'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mac-address-table vlan <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_only_blank_list(show_info,"MAC Address")
    def dut_get_show_ip_source_binding(self,show_info):
        """
        Function:show ip source binding回显解析函数
        CLI命令:show ip source binding
        回显信息示例:
5848VAC#show ip source binding 
NO.   MACADDRESS         IPADDRESS       LEASE(SEC)   TYPE          VLAN  INTERFACE
----- ------------------ --------------- ------------ ------------- ----- --------------------
1     0000.0000.0001     10.1.1.10       Infinite     Static        10    GigabitEthernet 1/0/5

Total number of bindings: 1 

5848VAC#

        Returns:
{'0000.0000.0001/LEASE(SEC)': 'Infinite'
'0000.0000.0001/INTERFACE': 'GigabitEthernet 1/0/5'
'0000.0000.0001/TYPE': 'Static'
'MACADDRESS_list': ['0000.0000.0001'], '0000.0000.0001/IPADDRESS': '10.1.1.10'
'0000.0000.0001/NO.': '1'
'0000.0000.0001/VLAN': '10'
'Total number of bindings': '1'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip source binding | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="MACADDRESS"     #需要变参的地方
        col_len_list = []
        #创建字典
        dict_value3={}
        address_list = []

        table_2 = 0
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if value_title in show_info_list_line[line_len_num]:              #***********
                table_1 = line_len_num
            if "Total number of bindings" in show_info_list_line[line_len_num]:
                list1 = show_info_list_line[line_len_num].split(":")
                dict_value3["Total number of bindings"] = list1[1].strip()
        (whippletree_list_1,cut_del_1) = self.dut_show_autoget_whippletree(table_1,line_len,show_info_list_line)
        show_info_list_line.remove(show_info_list_line[cut_del_1])
        new_show_info_num = len(show_info_list_line)
        for line_len_num in range(0,new_show_info_num):
            if value_title in show_info_list_line[line_len_num]:              #***********
                table_3 = line_len_num
        dict_value1 = self.dut_show_autoget_form(table_3,new_show_info_num-1,"MACADDRESS",whippletree_list_1,show_info_list_line)
        dict_value = dict(dict_value1.items()+dict_value3.items())
        return dict_value
    def dut_get_show_bgp_l2vpn_evpn_evi_num_macip_ip_detail(self,show_info):
        """
        Function:show bgp l2vpn evpn evi <num> mac-ip x.x.x.x detail回显解析函数
        CLI命令:show bgp l2vpn evpn evi <num> mac-ip x.x.x.x detail
        回显信息示例:
TOR1-X#show bgp l2vpn evpn evi 400 mac-ip 10.2.1.2 detail 
Route Distinguisher: 10.1.1.1:400 (Default for EVI 400)
BGP routing table entry for 2:0:48:0021.9400.0002:32:10.2.1.2/128
  Local
    5.5.5.5 from 3.3.3.3 (20.20.20.21)
      Origin IGP, metric 0, localpref 100, valid, internal, best
      Extended Community: RT:10:10 RT:400:400 Encapsulation: VXLAN(8) Router's MAC: 5869.6C9D.B4EC
      ESI: 00.00.00.00.00.00.00.00.00.00 label1: 10 label2: 400 
      Originator: 20.20.20.21, Cluster list: 108.1.1.2 
      Last update: Tue Dec 25 17:33:41 2018


Total number of prefixes 1
TOR1-X#

        Returns:
{"2:0:48:0021.9400.0002:32:10.2.1.2/128/Router's MAC": '5869.6C9D.B4EC'
'Route Distinguisher': '10.1.1.1:400'
'2:0:48:0021.9400.0002:32:10.2.1.2/128/Originator': '20.20.20.21'
'2:0:48:0021.9400.0002:32:10.2.1.2/128/Extended Community': 'RT:10:10 RT:400:400'
'Total number of prefixes': '1'
'2:0:48:0021.9400.0002:32:10.2.1.2/128/Cluster list': '108.1.1.2'
'2:0:48:0021.9400.0002:32:10.2.1.2/128/Encapsulation': 'VXLAN(8)'
'2:0:48:0021.9400.0002:32:10.2.1.2/128/ESI': '00.00.00.00.00.00.00.00.00.00'
'2:0:48:0021.9400.0002:32:10.2.1.2/128/label1': '10'
'2:0:48:0021.9400.0002:32:10.2.1.2/128/label2': '400'
'Default for': 'EVI 400'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bgp l2vpn evpn evi <num> mac-ip x.x.x.x detail | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value ={}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        for value in show_info_list_line:
            if "Route Distinguisher" in value:
                obj1 = re.match("Route Distinguisher:(.*)\(Default for(.*)\)",value.strip())
                dict_value["Route Distinguisher"] = obj1.group(1).strip()
                dict_value["Default for"] = obj1.group(2).strip()
            elif "BGP routing table entry" in value:
                list1 = value.split("for")
                title =list1[1].strip()
                #dict_value["BGP routing table entry for"] = title
            elif "Extended Community" in value:
                if "Router's MAC" in value:
                    obj2 = re.match("Extended Community:(.*) Encapsulation:(.*) Router's MAC:(.*)",value.strip())
                    dict_value[title+"/"+"Extended Community"] = obj2.group(1).strip()
                    dict_value[title+"/"+"Encapsulation"] = obj2.group(2).strip()
                    dict_value[title+"/"+"Router's MAC"] = obj2.group(3).strip()
                else:
                    obj2 = re.match("Extended Community:(.*) Encapsulation:(.*) Default Gateway:(.*) MAC Mobility:(.*)",value.strip())
                    dict_value[title+"/"+"Extended Community"] = obj2.group(1).strip()
                    dict_value[title+"/"+"Encapsulation"] = obj2.group(2).strip()
                    dict_value[title+"/"+"Default Gateway"] = obj2.group(3).strip()
                    dict_value[title+"/"+"MAC Mobility"] = obj2.group(4).strip()
            elif "ESI" in value:
                obj3 = re.match("ESI:(.*) label1:(.*) label2:(.*)",value.strip())
                dict_value[title+"/"+"ESI"] = obj3.group(1).strip()
                dict_value[title+"/"+"label1"] = obj3.group(2).strip()
                dict_value[title+"/"+"label2"] = obj3.group(3).strip()
            elif "Total number of prefixes" in value:
                obj4 = re.match("Total number of prefixes(.*)",value.strip())
                dict_value["Total number of prefixes"] = obj4.group(1).strip()
            elif "," in value :
                list2 = value.split(",")
                for list2_value in list2 :
                    if list2_value.count(":") == 1 :
                        list3 = list2_value.split(":")
                        dict_value[title+"/"+list3[0].strip()] = list3[1].strip()
        return dict_value
    def dut_get_show_bgp_l2vpn_evpn_evi_num_macip_detail(self,show_info):
        """
        Function:show bgp l2vpn evpn evi <num> mac-ip detail回显解析函数
        CLI命令:show bgp l2vpn evpn evi <num> mac-ip detail
        回显信息示例:
TOR1-X#show bgp l2vpn evpn evi 400 mac-ip detail 
Route Distinguisher: 10.1.1.1:400 (Default for EVI 400)
BGP routing table entry for 2:0:48:0000.0000.0001:32:10.1.1.1/128
  Local
    0.0.0.0 from 0.0.0.0 (1.1.1.1)
      Origin IGP, localpref 100, weight 32768, valid, sourced, local, gateway, best
      Extended Community: RT:10:10 RT:400:400 Encapsulation: VXLAN(8) Default Gateway: 0000.0000.0000 MAC Mobility: 0.0 Router's MAC: 0074.9C28.6F01
      ESI: 00.00.00.00.00.00.00.00.00.00 label1: 10 label2: 400 
      Last update: Tue Dec 25 17:12:40 2018

BGP routing table entry for 2:0:48:0000.0000.0001:32:10.1.1.1/128
  Local
    5.5.5.5 from 3.3.3.3 (20.20.20.21)
      Origin IGP, metric 0, localpref 100, valid, internal, gateway, backup
      Extended Community: RT:10:10 RT:400:400 Encapsulation: VXLAN(8) Default Gateway: 0000.0000.0000 MAC Mobility: 0.0 Router's MAC: 5869.6C9D.B4EC
      ESI: 00.00.00.00.00.00.00.00.00.00 label1: 10 label2: 400 
      Originator: 20.20.20.21, Cluster list: 108.1.1.2 
      Last update: Tue Dec 25 17:31:41 2018

BGP routing table entry for 2:0:48:0000.0000.0001:32:20.1.1.1/128
  Local
    0.0.0.0 from 0.0.0.0 (1.1.1.1)
      Origin IGP, localpref 100, weight 32768, valid, sourced, local, gateway, best
      Extended Community: RT:20:20 RT:400:400 Encapsulation: VXLAN(8) Default Gateway: 0000.0000.0000 MAC Mobility: 0.0 Router's MAC: 0074.9C28.6F01
      ESI: 00.00.00.00.00.00.00.00.00.00 label1: 20 label2: 400 
      Last update: Tue Dec 25 17:12:40 2018

BGP routing table entry for 2:0:48:0000.0000.0001:32:20.1.1.1/128
  Local
    5.5.5.5 from 3.3.3.3 (20.20.20.21)
      Origin IGP, metric 0, localpref 100, valid, internal, gateway, backup
      Extended Community: RT:20:20 RT:400:400 Encapsulation: VXLAN(8) Default Gateway: 0000.0000.0000 MAC Mobility: 0.0 Router's MAC: 5869.6C9D.B4EC
      ESI: 00.00.00.00.00.00.00.00.00.00 label1: 20 label2: 400 
      Originator: 20.20.20.21, Cluster list: 108.1.1.2 
      Last update: Tue Dec 25 17:31:41 2018

BGP routing table entry for 2:0:48:0021.9400.0002:32:10.2.1.2/128
  Local
    5.5.5.5 from 3.3.3.3 (20.20.20.21)
      Origin IGP, metric 0, localpref 100, valid, internal, best
      Extended Community: RT:10:10 RT:400:400 Encapsulation: VXLAN(8) Router's MAC: 5869.6C9D.B4EC
      ESI: 00.00.00.00.00.00.00.00.00.00 label1: 10 label2: 400 
      Originator: 20.20.20.21, Cluster list: 108.1.1.2 
      Last update: Tue Dec 25 17:31:41 2018

BGP routing table entry for 2:0:48:0021.9400.0003:32:10.2.1.3/128
  Local
    5.5.5.5 from 3.3.3.3 (20.20.20.21)
      Origin IGP, metric 0, localpref 100, valid, internal, best
      Extended Community: RT:10:10 RT:400:400 Encapsulation: VXLAN(8) Router's MAC: 5869.6C9D.B4EC
      ESI: 00.00.00.00.00.00.00.00.00.00 label1: 10 label2: 400 
      Originator: 20.20.20.21, Cluster list: 108.1.1.2 
      Last update: Tue Dec 25 17:31:41 2018

BGP routing table entry for 2:0:48:0074.9c28.6f01:0:0.0.0.0/96
  Local
    0.0.0.0 from 0.0.0.0 (1.1.1.1)
      Origin IGP, localpref 100, weight 32768, valid, sourced, local, static-mac, gateway, best
      Extended Community: RT:400:400 Encapsulation: VXLAN(8) Default Gateway: 0000.0000.0000 MAC Mobility: 1.0
      ESI: 00.00.00.00.00.00.00.00.00.00 label1: 400 label2: 0 
      Last update: Tue Dec 25 17:10:35 2018

BGP routing table entry for 2:0:48:5869.6c9d.b4ec:0:0.0.0.0/96
  Local
    5.5.5.5 from 3.3.3.3 (20.20.20.21)
      Origin IGP, metric 0, localpref 100, valid, internal, static-mac, gateway, best
      Extended Community: RT:400:400 Encapsulation: VXLAN(8) Default Gateway: 0000.0000.0000 MAC Mobility: 1.0
      ESI: 00.00.00.00.00.00.00.00.00.00 label1: 400 label2: 0 
      Originator: 20.20.20.21, Cluster list: 108.1.1.2 
      Last update: Tue Dec 25 17:31:41 2018

BGP routing table entry for 2:0:48:5869.6cb4.a84d:0:0.0.0.0/96
  Local
    3.3.3.3 from 3.3.3.3 (108.1.1.2)
      Origin IGP, metric 0, localpref 100, valid, internal, static-mac, gateway, best
      Extended Community: RT:400:400 Encapsulation: VXLAN(8) Default Gateway: 0000.0000.0000 MAC Mobility: 1.0
      ESI: 00.00.00.00.00.00.00.00.00.00 label1: 400 label2: 0 
      Last update: Tue Dec 25 17:31:41 2018


Total number of prefixes 7
TOR1-X#

        Returns:
{'2:0:48:5869.6cb4.a84d:0:0.0.0.0/96/Extended Community': 'RT:400:400'
'2:0:48:5869.6c9d.b4ec:0:0.0.0.0/96/Cluster list': '108.1.1.2'
'2:0:48:0021.9400.0002:32:10.2.1.2/128/Originator': '20.20.20.21'
'2:0:48:0000.0000.0001:32:10.1.1.1/128/Extended Community': 'RT:10:10 RT:400:400'
'2:0:48:0000.0000.0001:32:20.1.1.1/128/label2': '400'
'2:0:48:0000.0000.0001:32:20.1.1.1/128/Encapsulation': 'VXLAN(8) Default Gateway: 0000.0000.0000 MAC Mobility: 0.0', "2:0:48:0021.9400.0003:32:10.2.1.3/128/Router's MAC": '5869.6C9D.B4EC'
'2:0:48:0000.0000.0001:32:10.1.1.1/128/Cluster list': '108.1.1.2'
'2:0:48:5869.6c9d.b4ec:0:0.0.0.0/96/Default Gateway': '0000.0000.0000'
'2:0:48:5869.6c9d.b4ec:0:0.0.0.0/96/ESI': '00.00.00.00.00.00.00.00.00.00'
'2:0:48:0021.9400.0003:32:10.2.1.3/128/Extended Community': 'RT:10:10 RT:400:400'
'2:0:48:0021.9400.0003:32:10.2.1.3/128/label1': '10'
'2:0:48:0021.9400.0003:32:10.2.1.3/128/label2': '400'
'Total number of prefixes': '7'
'2:0:48:0021.9400.0002:32:10.2.1.2/128/ESI': '00.00.00.00.00.00.00.00.00.00'
'2:0:48:5869.6cb4.a84d:0:0.0.0.0/96/ESI': '00.00.00.00.00.00.00.00.00.00'
'2:0:48:5869.6c9d.b4ec:0:0.0.0.0/96/Originator': '20.20.20.21'
'2:0:48:0074.9c28.6f01:0:0.0.0.0/96/Encapsulation': 'VXLAN(8)'
'2:0:48:0000.0000.0001:32:20.1.1.1/128/Cluster list': '108.1.1.2'
'2:0:48:0000.0000.0001:32:20.1.1.1/128/label1': '20', "2:0:48:0021.9400.0002:32:10.2.1.2/128/Router's MAC": '5869.6C9D.B4EC'
'Route Distinguisher': '10.1.1.1:400'
'2:0:48:5869.6c9d.b4ec:0:0.0.0.0/96/Extended Community': 'RT:400:400'
'2:0:48:0000.0000.0001:32:20.1.1.1/128/Extended Community': 'RT:20:20 RT:400:400'
'2:0:48:0000.0000.0001:32:10.1.1.1/128/ESI': '00.00.00.00.00.00.00.00.00.00'
'2:0:48:5869.6cb4.a84d:0:0.0.0.0/96/Default Gateway': '0000.0000.0000'
'2:0:48:0000.0000.0001:32:20.1.1.1/128/ESI': '00.00.00.00.00.00.00.00.00.00'
'2:0:48:0000.0000.0001:32:10.1.1.1/128/Originator': '20.20.20.21'
'2:0:48:0074.9c28.6f01:0:0.0.0.0/96/Default Gateway': '0000.0000.0000'
'2:0:48:0021.9400.0002:32:10.2.1.2/128/label1': '10'
'2:0:48:0021.9400.0002:32:10.2.1.2/128/label2': '400'
'2:0:48:0000.0000.0001:32:10.1.1.1/128/label2': '400'
'2:0:48:0000.0000.0001:32:10.1.1.1/128/label1': '10'
'2:0:48:5869.6c9d.b4ec:0:0.0.0.0/96/Encapsulation': 'VXLAN(8)'
'2:0:48:0074.9c28.6f01:0:0.0.0.0/96/Extended Community': 'RT:400:400'
'2:0:48:5869.6c9d.b4ec:0:0.0.0.0/96/MAC Mobility': '1.0'
'2:0:48:0021.9400.0002:32:10.2.1.2/128/Cluster list': '108.1.1.2'
'2:0:48:0021.9400.0003:32:10.2.1.3/128/ESI': '00.00.00.00.00.00.00.00.00.00'
'2:0:48:5869.6cb4.a84d:0:0.0.0.0/96/Encapsulation': 'VXLAN(8)'
'2:0:48:0074.9c28.6f01:0:0.0.0.0/96/label2': '0'
'2:0:48:5869.6c9d.b4ec:0:0.0.0.0/96/label1': '400'
'2:0:48:5869.6c9d.b4ec:0:0.0.0.0/96/label2': '0'
'2:0:48:0074.9c28.6f01:0:0.0.0.0/96/label1': '400'
'2:0:48:0000.0000.0001:32:10.1.1.1/128/Encapsulation': 'VXLAN(8) Default Gateway: 0000.0000.0000 MAC Mobility: 0.0'
'2:0:48:5869.6cb4.a84d:0:0.0.0.0/96/label2': '0'
'2:0:48:0021.9400.0003:32:10.2.1.3/128/Cluster list': '108.1.1.2'
'2:0:48:5869.6cb4.a84d:0:0.0.0.0/96/label1': '400'
'2:0:48:0000.0000.0001:32:20.1.1.1/128/Originator': '20.20.20.21'
'2:0:48:0074.9c28.6f01:0:0.0.0.0/96/ESI': '00.00.00.00.00.00.00.00.00.00'
'2:0:48:0074.9c28.6f01:0:0.0.0.0/96/MAC Mobility': '1.0', "2:0:48:0000.0000.0001:32:20.1.1.1/128/Router's MAC": '5869.6C9D.B4EC'
'2:0:48:0021.9400.0003:32:10.2.1.3/128/Encapsulation': 'VXLAN(8)'
'2:0:48:0021.9400.0002:32:10.2.1.2/128/Encapsulation': 'VXLAN(8)'
'2:0:48:0021.9400.0002:32:10.2.1.2/128/Extended Community': 'RT:10:10 RT:400:400'
'2:0:48:0021.9400.0003:32:10.2.1.3/128/Originator': '20.20.20.21'
'Default for': 'EVI 400'
'2:0:48:5869.6cb4.a84d:0:0.0.0.0/96/MAC Mobility': '1.0', "2:0:48:0000.0000.0001:32:10.1.1.1/128/Router's MAC": '5869.6C9D.B4EC'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bgp l2vpn evpn evi <num> mac-ip detail | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value ={}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        for value in show_info_list_line:
            if "Route Distinguisher" in value:
                obj1 = re.match("Route Distinguisher:(.*)\(Default for(.*)\)",value.strip())
                dict_value["Route Distinguisher"] = obj1.group(1).strip()
                dict_value["Default for"] = obj1.group(2).strip()
            elif "BGP routing table entry" in value:
                list1 = value.split("for")
                title =list1[1].strip()
                #dict_value["BGP routing table entry for"] = title
            elif "Extended Community" in value:
                if "Router's MAC" in value:
                    obj2 = re.match("Extended Community:(.*) Encapsulation:(.*) Router's MAC:(.*)",value.strip())
                    dict_value[title+"/"+"Extended Community"] = obj2.group(1).strip()
                    dict_value[title+"/"+"Encapsulation"] = obj2.group(2).strip()
                    dict_value[title+"/"+"Router's MAC"] = obj2.group(3).strip()
                else:
                    obj2 = re.match("Extended Community:(.*) Encapsulation:(.*) Default Gateway:(.*) MAC Mobility:(.*)",value.strip())
                    dict_value[title+"/"+"Extended Community"] = obj2.group(1).strip()
                    dict_value[title+"/"+"Encapsulation"] = obj2.group(2).strip()
                    dict_value[title+"/"+"Default Gateway"] = obj2.group(3).strip()
                    dict_value[title+"/"+"MAC Mobility"] = obj2.group(4).strip()
            elif "ESI" in value:
                obj3 = re.match("ESI:(.*) label1:(.*) label2:(.*)",value.strip())
                dict_value[title+"/"+"ESI"] = obj3.group(1).strip()
                dict_value[title+"/"+"label1"] = obj3.group(2).strip()
                dict_value[title+"/"+"label2"] = obj3.group(3).strip()
            elif "Total number of prefixes" in value:
                obj4 = re.match("Total number of prefixes(.*)",value.strip())
                dict_value["Total number of prefixes"] = obj4.group(1).strip()
            elif "," in value :
                list2 = value.split(",")
                for list2_value in list2 :
                    if list2_value.count(":") == 1 :
                        list3 = list2_value.split(":")
                        dict_value[title+"/"+list3[0].strip()] = list3[1].strip()
        return dict_value
    def dut_get_show_ip_route_summary(self,show_info):
        """
        Function:show ip route summary回显解析函数
        CLI命令:show ip route summary
        回显信息示例:
Ruijie(config-router)#show ip route summary 

Codes:  NORMAL - Normal route  ECMP - ECMP route  FRR - Fast-Reroute route

  Memory: 600 bytes
  Entries: 3, based on route prefixes

                 NORMAL     ECMP       FRR        TOTAL     
       Connected 2          0          0          2         
       Static    1          0          0          1         
       RIP       0          0          0          0         
       OSPF      0          0          0          0         
       ISIS      0          0          0          0         
       BGP       0          0          0          0         
       TOTAL     3          0          0          3         

Ruijie(config-router)#

        Returns:
{'/ECMP': ''
'RIP/NORMAL': '0'
'TOTAL/ECMP': '0'
'Connected/NORMAL': '2'
'ISIS/ECMP': '0'
'BGP/NORMAL': '0'
'TOTAL/NORMAL': '3'
'Static/ECMP': '0'
'OSPF/FRR': '0'
'RIP/TOTAL': '0'
'OSPF/ECMP': '0'
'RIP/ECMP': '0'
'RIP/FRR': '0'
'TOTAL/FRR': '0'
'OSPF/TOTAL': '0'
'TOTAL/TOTAL': '3'
'/TOTAL': ''
'/NORMAL': ''
'Connected/ECMP': '0'
'BGP/TOTAL': '0'
'ISIS/NORMAL': '0'
'BGP/FRR': '0'
'ISIS/FRR': '0'
'Static/FRR': '0'
'Connected/TOTAL': '2'
'ISIS/TOTAL': '0'
'Static/NORMAL': '1'
'BGP/ECMP': '0'
'Connected/FRR': '0'
'/FRR': ''
'OSPF/NORMAL': '0'
'Static/TOTAL': '1'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip route summary | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="NORMAL"
        dut_info_split = []
        show_info_split = show_info.split("\n")
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for num in range (len(show_info_split)):
            if "NORMAL     ECMP" in show_info_split[num]:
                star = num
        end = len(show_info_split)
        for i in range (star,end):
            dut_info_split.append(show_info_split[i])
        length = len(dut_info_split)
        for i in range(length):
            re.sub(r' ',"",dut_info_split[i],7)
        #列宽
        length_list = [7,10,11,11,11,10]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        ##print dut_info_split
        #创建字典
        dict={}
        device_list = []
        for i in range(length):
            sight = 0
            sight_sum=0
            list = []
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                a = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                a = a.lstrip()
                a = a.rstrip()
                list.append(a)
            #获取表头，用于组合
            if list[2]==value_title:
                title = list
            elif list[0]!=value_title:
                #生成字典
                for s in range(2,length_list_len):
                    name = '%s/%s' % (list[1],title[s])
                    dict[name]=list[s]
        return  dict
    def dut_get_show_bgp_all_updategroup_num_hamod_adjout(self,show_info):
        """
        Function:show bgp all update-group <num> ha-mod adj-out回显解析函数
        CLI命令:show bgp all update-group <num> ha-mod adj-out
        回显信息示例:
DUT1-STANDBY#show bgp all update-group 7 ha-mod adj-out
Update-group 7(10.1.1.2) ha adj out:

 ADJ_OUT RD:              0:0, AFI:   IPv4, SAFI:      Unicast, Prefix: 18.1.1.0/24
 ADJ_OUT RD:              0:0, AFI:   IPv4, SAFI:      Unicast, Prefix: 19.1.1.0/24
 ADJ_OUT RD:              0:0, AFI:   IPv4, SAFI:      Unicast, Prefix: 101.1.1.0/24
 ADJ_OUT RD:              0:0, AFI:   IPv4, SAFI:      Unicast, Prefix: 101.1.2.0/24
 ADJ_OUT RD:              0:0, AFI:   IPv4, SAFI:      Unicast, Prefix: 101.1.3.0/24
 ADJ_OUT RD:              0:0, AFI:   IPv4, SAFI:      Unicast, Prefix: 101.1.4.0/24
 ADJ_OUT RD:              0:0, AFI:   IPv4, SAFI:      Unicast, Prefix: 101.1.5.0/24
 ADJ_OUT RD:              0:0, AFI:   IPv4, SAFI:      Unicast, Prefix: 103.1.1.0/24
 ADJ_OUT RD:              0:0, AFI:   IPv4, SAFI:      Unicast, Prefix: 103.1.2.0/24
 ADJ_OUT RD:              0:0, AFI:   IPv4, SAFI:      Unicast, Prefix: 103.1.3.0/24
 ADJ_OUT RD:              0:0, AFI:   IPv4, SAFI:      Unicast, Prefix: 103.1.4.0/24
 ADJ_OUT RD:              0:0, AFI:   IPv4, SAFI:      Unicast, Prefix: 103.1.5.0/24
 Total count: 12, key_len: 384

        Returns:
{'18.1.1.0/24/SAFI': 'Unicast'
'101.1.3.0/24/ADJ_OUT RD': '0:0'
'101.1.1.0/24/ADJ_OUT RD': '0:0'
'101.1.1.0/24/SAFI': 'Unicast'
'101.1.5.0/24/SAFI': 'Unicast'
'101.1.5.0/24/AFI': 'IPv4'
'101.1.5.0/24/ADJ_OUT RD': '0:0'
'19.1.1.0/24/SAFI': 'Unicast'
'101.1.2.0/24/AFI': 'IPv4'
'key_len': '384'
'103.1.1.0/24/SAFI': 'Unicast'
'103.1.3.0/24/SAFI': 'Unicast'
'103.1.5.0/24/AFI': 'IPv4'
'103.1.1.0/24/AFI': 'IPv4'
'19.1.1.0/24/AFI': 'IPv4'
'103.1.4.0/24/SAFI': 'Unicast'
'103.1.4.0/24/AFI': 'IPv4'
'103.1.4.0/24/ADJ_OUT RD': '0:0'
'101.1.4.0/24/ADJ_OUT RD': '0:0'
'103.1.5.0/24/SAFI': 'Unicast'
'18.1.1.0/24/ADJ_OUT RD': '0:0'
'101.1.2.0/24/SAFI': 'Unicast'
'103.1.3.0/24/AFI': 'IPv4'
'101.1.2.0/24/ADJ_OUT RD': '0:0'
'101.1.4.0/24/AFI': 'IPv4'
'101.1.3.0/24/SAFI': 'Unicast'
'103.1.2.0/24/AFI': 'IPv4'
'101.1.3.0/24/AFI': 'IPv4'
'103.1.2.0/24/SAFI': 'Unicast'
'103.1.5.0/24/ADJ_OUT RD': '0:0'
'Prefix_list': ['18.1.1.0/24'
'19.1.1.0/24'
'101.1.1.0/24'
'101.1.2.0/24'
'101.1.3.0/24'
'101.1.4.0/24'
'101.1.5.0/24'
'103.1.1.0/24'
'103.1.2.0/24'
'103.1.3.0/24'
'103.1.4.0/24'
'103.1.5.0/24'], '103.1.2.0/24/ADJ_OUT RD': '0:0'
'Total count': '12'
'103.1.1.0/24/ADJ_OUT RD': '0:0'
'103.1.3.0/24/ADJ_OUT RD': '0:0'
'101.1.1.0/24/AFI': 'IPv4'
'101.1.4.0/24/SAFI': 'Unicast'
'18.1.1.0/24/AFI': 'IPv4'
'19.1.1.0/24/ADJ_OUT RD': '0:0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bgp all update-group <num> ha-mod adj-out | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        address_list=[]
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        for value in show_info_list_line:
            if "Prefix" in value :
                list1 = value.split(",")
                for list1_value in list1:
                    if "Prefix" in list1_value :
                        list_title = list1_value.split(":", 1)
                        value_title = list_title[1].strip()
                        address_list.append(value_title)
                for list1_value2 in list1:
                    if "Prefix" not in list1_value2 :
                        if ":" in list1_value2:
                            list2 = list1_value2.split(":",1)
                            dict_value[value_title+"/"+list2[0].strip()] = list2[1].strip()
                        else:
                            dict_value[value_title+"/"+"status"] = list1_value2.strip()
            if "Total count" in value :
                list3 = value.split(",")
                for list3_value in list3 :
                    list4 = list3_value.split(":")
                    dict_value[list4[0].strip()] = list4[1].strip()
        dict_value["Prefix_list"] = address_list
        return dict_value
    def dut_get_show_ip_route(self, show_info):  # 定义函数，函数名由锐捷提供
        """
        Function:show ip route回显解析函数
        CLI命令:show ip route
        回显信息示例:
57H-2(config)#show ip route 

Codes:  C - Connected, L - Local, S - Static
        R - RIP, O - OSPF, B - BGP, I - IS-IS, V - Overflow route
        N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
        E1 - OSPF external type 1, E2 - OSPF external type 2
        SU - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2
        IA - Inter area, EV - BGP EVPN, * - candidate default

Gateway of last resort is no set
S     3.1.1.0/24 [1/0] via 11.11.11.1
C     10.10.10.0/24 is directly connected, GigabitEthernet 1/0/2
C     10.10.10.1/32 is local host. 
C     11.11.11.0/24 is directly connected, GigabitEthernet 1/0/1
C     11.11.11.2/32 is local host. 
C     13.13.13.0/24 is directly connected, GigabitEthernet 1/0/3
C     13.13.13.1/32 is local host. 
C     20.1.2.0/24 is directly connected, VLAN 1
C     20.1.2.1/32 is local host. 
S     100.0.5.0/24 [1/0] via 10.10.10.2
                   [1/0] via 13.13.13.2
C     172.18.7.0/24 is directly connected, GigabitEthernet 1/0/15
C     172.18.7.40/32 is local host. 
S     192.168.231.0/24 [1/0] via 172.18.7.1
57H-2(config)#

        Returns:
{'20.1.2.1/32/status': 'local host'
'172.18.7.40/32/Codes': 'C'
'192.168.231.0/24/mea': '0'
'100.0.5.0/24/pri_mea_list': ['1/0'
'1/0'], 'addr_list': ['3.1.1.0/24/S'
'10.10.10.0/24/C'
'10.10.10.1/32/C'
'11.11.11.0/24/C'
'11.11.11.2/32/C'
'13.13.13.0/24/C'
'13.13.13.1/32/C'
'20.1.2.0/24/C'
'20.1.2.1/32/C'
'100.0.5.0/24/S'
'172.18.7.0/24/C'
'172.18.7.40/32/C'
'192.168.231.0/24/S'], '192.168.231.0/24/pri': '1'
'11.11.11.0/24/Codes': 'C'
'10.10.10.0/24/status': 'directly connected'
'10.10.10.0/24/Codes': 'C'
'100.0.5.0/24/mea': '0'
'100.0.5.0/24/via': '10.10.10.2'
'172.18.7.40/32/status': 'local host'
'192.168.231.0/24/via': '172.18.7.1'
'11.11.11.2/32/Codes': 'C'
'10.10.10.0/24/interface': 'GigabitEthernet 1/0/2'
'100.0.5.0/24/pri': '1'
'172.18.7.0/24/status': 'directly connected'
'13.13.13.0/24/Codes': 'C'
'100.0.5.0/24/Codes': 'S'
'10.10.10.1/32/status': 'local host'
'11.11.11.0/24/status': 'directly connected'
'3.1.1.0/24/via': '11.11.11.1'
'100.0.5.0/24/via_list': ['10.10.10.2'
'13.13.13.2'], '20.1.2.1/32/Codes': 'C'
'20.1.2.0/24/interface': 'VLAN 1'
'172.18.7.0/24/interface': 'GigabitEthernet 1/0/15'
'10.10.10.1/32/Codes': 'C'
'13.13.13.0/24/interface': 'GigabitEthernet 1/0/3'
'192.168.231.0/24/Codes': 'S'
'13.13.13.1/32/status': 'local host'
'20.1.2.0/24/status': 'directly connected'
'3.1.1.0/24/pri': '1'
'3.1.1.0/24/Codes': 'S'
'11.11.11.2/32/status': 'local host'
'13.13.13.0/24/status': 'directly connected'
'172.18.7.0/24/Codes': 'C'
'20.1.2.0/24/Codes': 'C'
'13.13.13.1/32/Codes': 'C'
'11.11.11.0/24/interface': 'GigabitEthernet 1/0/1'
'3.1.1.0/24/mea': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip route | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """
        via_list=[]
        pri_mea=[]

        dict_value = {}
        dut_info_split = []
        dut_info_split_1 = self.dut_get_start_show_info(show_info)
        for value in dut_info_split_1:
            if re.match("(.*is local host), \d\d:\d\d:\d\d\Z", value):
                obj = re.match("(.*is local host), \d\d:\d\d:\d\d", value)
                value = obj.group(1)+"."
            elif re.match("(.*), \d\d:\d\d:\d\d\Z", value):
                obj = re.match("(.*), (\d\d:\d\d:\d\d)\Z", value)
                value_1 = value
                value = obj.group(1)
                time_1 = obj.group(2)
                if re.match("(.*\[\d+/\d+\] via \S+, )((gigabitethernet|tengigabitethernet|fortygigabitethernet|hundredgigabitethernet|tfgigabitethernet|thgigabitethernet|fhgigabitethernet|mgmt|aggregate|vlan|loopback|tunnel|Virtual-ppp|Virtual-templatet) \S+), \d\d:\d\d:\d\d\Z",value_1, flags=re.I):
                    obj2 = re.match("(.*\[\d+/\d+\] via \S+, )((gigabitethernet|tengigabitethernet|fortygigabitethernet|hundredgigabitethernet|tfgigabitethernet|thgigabitethernet|fhgigabitethernet|mgmt|aggregate|vlan|loopback|tunnel|Virtual-ppp|Virtual-template) \S+), \d\d:\d\d:\d\d",value_1, flags=re.I)
                    value = obj2.group(1) + time_1 + "," + obj2.group(2)
            dut_info_split.append(value)
        for i in range(len(dut_info_split)):
            dut_info_split[i] = dut_info_split[i].strip()
            if re.match('.*Gateway of last resort.*', dut_info_split[i]):
                index = i
        dut_info_split = dut_info_split[index + 1:]
        # print(dut_info_split)
        addr_list = []
        for i in range(len(dut_info_split)):
            if re.match('.*is.*,.*', dut_info_split[i]):
                #print "111111111111111"
                #print(dut_info_split[i])
                via_list=[]
                pri_mea=[]
                mainobj = re.match('(.*)is(.*),(.*)', dut_info_split[i])
                Codes = mainobj.group(1)[0].strip()
                addr = mainobj.group(1)[1:].strip()
                type = mainobj.group(2).strip()
                interface = mainobj.group(3).strip()
                dict_value[addr + '/' + 'status'] = type
                dict_value[addr + '/' + 'interface'] = interface
                dict_value[addr + '/' + 'Codes'] = Codes
                addr_list.append(addr + '/' + Codes)
            elif re.match('(.*)is(.*)\..*', dut_info_split[i]):
                #print "2222222222222222"
                #print(dut_info_split[i])
                via_list=[]
                pri_mea=[]
                mainobj = re.match('(.*)is(.*)\..*', dut_info_split[i])
                Codes = mainobj.group(1)[0].strip()
                addr = mainobj.group(1)[1:].strip()
                type = mainobj.group(2).strip()
                dict_value[addr + '/' + 'status'] = type
                dict_value[addr + '/' + 'Codes'] = Codes
                addr_list.append(addr + '/' + Codes)
            elif re.match('(.*)\s{2,}(\S+)\s+\[(\d+)/(\d+)\] via(.*),(.*),(.*)', dut_info_split[i]):
                #print "3333333333333333333"
                #print(dut_info_split[i])
                via_list=[]
                pri_mea=[]
                mainobj = re.match('(.*)\s{2,}(\S+)\s+\[(\d+)/(\d+)\] via(.*),(.*),(.*)', dut_info_split[i])
                Codes_list = mainobj.group(1).split(' ')
                # print(Codes_list)
                Codes = ''
                for i in Codes_list:
                    Codes = Codes.strip() + ',' + i
                Codes = Codes.strip(',')
                addr = mainobj.group(2).strip()
                via = mainobj.group(5).strip()
                if "," in via:
                    via = via.split(",")[0]
                pri = mainobj.group(3).strip()
                mea = mainobj.group(4).strip()
                dict_value[addr + '/' + 'pri'] = pri
                dict_value[addr + '/' + 'mea'] = mea
                interface = mainobj.group(7).strip()
                dict_value[addr + '/' + 'via'] = via
                dict_value[addr + '/' + 'interface'] = interface
                dict_value[addr + '/' + 'Codes'] = Codes
                addr_list.append(addr + '/' + Codes)
            elif re.match('(.*)\s{2,}(\S+)\s+\[(\d+)/(\d+)\] via.*,.*', dut_info_split[i]):
                #print "444444444444"
                #print(dut_info_split[i])
                via_list=[]
                pri_mea=[]
                mainobj = re.match('(.*)\s{2,}(\S+)\s+\[(\d+)/(\d+)\] via(.*),(.*)', dut_info_split[i])
                Codes_list = mainobj.group(1).split(' ')
                # print(Codes_list)
                Codes = ''
                for i in Codes_list:
                    Codes = Codes.strip() + ',' + i
                Codes = Codes.strip(',')
                addr = mainobj.group(2).strip()
                via = mainobj.group(5).strip()
                if "," in via:
                    via = via.split(",")[0]
                pri = mainobj.group(3).strip()
                mea = mainobj.group(4).strip()
                dict_value[addr + '/' + 'pri'] = pri
                dict_value[addr + '/' + 'mea'] = mea
                dict_value[addr + '/' + 'via'] = via
                dict_value[addr + '/' + 'Codes'] = Codes
                addr_list.append(addr + '/' + Codes)
            elif re.match('(.*)\s{2,}(\S+)\s+\[(\d+)/(\d+)\] via.*,.*', dut_info_split[i]):
                #print "55555555555555"
                #print(dut_info_split[i])
                via_list=[]
                pri_mea=[]
                mainobj = re.match('(.*)\s{2,}(\S+)\s+\[(\d+)/(\d+)\] via(.*),(.*)', dut_info_split[i])
                Codes_list = mainobj.group(1).split(' ')
                # print(Codes_list)
                Codes = ''
                for i in Codes_list:
                    Codes = Codes.strip() + ',' + i
                Codes = Codes.strip(',')
                addr = mainobj.group(2).strip()
                via = mainobj.group(5).strip()
                if "," in via:
                    via = via.split(",")[0]
                pri = mainobj.group(3).strip()
                mea = mainobj.group(4).strip()
                dict_value[addr + '/' + 'pri'] = pri
                dict_value[addr + '/' + 'mea'] = mea
                dict_value[addr + '/' + 'via'] = via
                dict_value[addr + '/' + 'Codes'] = Codes
                addr_list.append(addr + '/' + Codes)
            elif re.match('(.*)\s{2,}(\S+)\s+\[(\d+)/(\d+)\] via(.*)', dut_info_split[i].strip()):
                #print "6666666666666666666"
                #print(dut_info_split[i])
                via_list=[]
                pri_mea=[]
                mainobj = re.match('(.*)\s{2,}(\S+)\s+\[(\d+)/(\d+)\] via(.*)', dut_info_split[i].strip())
                Codes_list = mainobj.group(1).split(' ')
                # print(Codes_list)
                Codes = ''
                for i in Codes_list:
                    Codes = Codes.strip() + ',' + i
                Codes = Codes.strip(',')
                addr = mainobj.group(2).strip()
                via = mainobj.group(5).strip()
                if "," in via:
                    via = via.split(",")[0]
                pri = mainobj.group(3).strip()
                mea = mainobj.group(4).strip()
                dict_value[addr + '/' + 'pri'] = pri
                dict_value[addr + '/' + 'mea'] = mea
                dict_value[addr + '/' + 'via'] = via
                dict_value[addr + '/' + 'Codes'] = Codes
                addr_list.append(addr + '/' + Codes)
            elif re.match('\[(\d+)/(\d+)\] via(.*)', dut_info_split[i]):
                #print "66666666666666666667777"
                #print(dut_info_split[i])
                if "via" not  in dut_info_split[i-1]:
                    if dut_info_split[i].count(",") == 2:
                        mainobj = re.match('\[(\d+)/(\d+)\] via(.*),(.*),(.*)', dut_info_split[i])
                    else:
                        mainobj = re.match('\[(\d+)/(\d+)\] via(.*)', dut_info_split[i])
                    via = mainobj.group(3).strip()
                    if "," in via:
                        intf = via.split(",")[1]
                        via = via.split(",")[0]
                        dict_value[addr + '/' + via +'/'+"interface"] = intf
                    pri = mainobj.group(1).strip()
                    mea = mainobj.group(2).strip()
                    dict_value[addr + '/' + 'pri'] = pri
                    dict_value[addr + '/' + 'mea'] = mea
                    dict_value[addr + '/' + 'via'] = via
                else:
                    via_list.append(via)
                    pri_mea.append(pri+"/"+mea)
                    if dut_info_split[i].count(",") == 2:
                        mainobj = re.match('\[(\d+)/(\d+)\] via(.*),(.*),(.*)', dut_info_split[i])
                    else:
                        mainobj = re.match('\[(\d+)/(\d+)\] via(.*)', dut_info_split[i])
                    via = mainobj.group(3).strip()
                    if "," in via:
                        via = via.split(",")[0]
                    via_list.append(via)
                    pri = mainobj.group(1).strip()
                    mea = mainobj.group(2).strip()
                    pri_mea.append(pri+"/"+mea)
                    dict_value[addr + '/' + 'pri_mea_list'] = pri_mea
                    dict_value[addr + '/' + 'via_list'] = via_list
        dict_value['addr_list'] = addr_list
        return dict_value


    def dut_get_show_queueing_wred_interface_dutport(self,show_info):
        dict_value1 =  self.dut_show_autoget_blank_list(show_info,value_title="qid",value_title_end="threshold_id",split_one=1,star_num_count_flag=1)
        dict_value2 =  self.dut_show_autoget_blank_list(show_info,value_title="qid",split_one=1,star_num_count_flag=2)
        return dict(dict_value1.items()+dict_value2.items())
    def dut_get_show_efm_packet(self,show_info):
        """
        Function:show efm packet回显解析函数
        CLI命令:show efm packet
        回显信息示例:
EG-2010#show efm packet 
GigabitEthernet 0/1:
OAMPDU statistic:               Tx         Rx
---------------------------------------------------
  Information OAMPDU:           605        0       
  Unique Event OAMPDU:          0          0       
  Duplicate Event OAMPDU:       0          0       
  Loopback Control OAMPDU:      0          0       
  Variable Request OAMPDU:      0          0       
  Variable Response OAMPDU:     0          0       
  Organization Specific OAMPDU: 0          0       
  Unsupported OAMPDU:           0          0       
  Losted OAMPDU:                0          -

GigabitEthernet 0/5:
OAMPDU statistic:               Tx         Rx
---------------------------------------------------
  Information OAMPDU:           88         86      
  Unique Event OAMPDU:          0          0       
  Duplicate Event OAMPDU:       0          0       
  Loopback Control OAMPDU:      0          2       
  Variable Request OAMPDU:      0          0       
  Variable Response OAMPDU:     0          0       
  Organization Specific OAMPDU: 0          0       
  Unsupported OAMPDU:           0          0       
  Losted OAMPDU:                0          -

EG-2010#

        Returns:
{'GigabitEthernet 0/5/Duplicate Event OAMPDU/Rx': '0'
'GigabitEthernet 0/1/Losted OAMPDU/Rx': '-'
'GigabitEthernet 0/1/Duplicate Event OAMPDU/Tx': '0'
'GigabitEthernet 0/1/Duplicate Event OAMPDU/Rx': '0'
'GigabitEthernet 0/5/Loopback Control OAMPDU/Rx': '2'
'GigabitEthernet 0/5/Variable Request OAMPDU/Tx': '0'
'GigabitEthernet 0/5/Unsupported OAMPDU/Tx': '0'
'GigabitEthernet 0/5/Unique Event OAMPDU/Rx': '0'
'GigabitEthernet 0/5/Losted OAMPDU/Rx': '-'
'GigabitEthernet 0/5/Unsupported OAMPDU/Rx': '0'
'GigabitEthernet 0/5/Duplicate Event OAMPDU/Tx': '0'
'GigabitEthernet 0/1/Losted OAMPDU/Tx': '0'
'GigabitEthernet 0/1/Information OAMPDU/Tx': '605'
'GigabitEthernet 0/1/Organization Specific OAMPDU/Rx': '0'
'GigabitEthernet 0/1/Variable Request OAMPDU/Tx': '0'
'GigabitEthernet 0/1/Unsupported OAMPDU/Tx': '0'
'GigabitEthernet 0/1/Loopback Control OAMPDU/Tx': '0'
'GigabitEthernet 0/5/Variable Response OAMPDU/Tx': '0'
'GigabitEthernet 0/1/Unsupported OAMPDU/Rx': '0'
'GigabitEthernet 0/5/Loopback Control OAMPDU/Tx': '0'
'GigabitEthernet 0/1/Variable Request OAMPDU/Rx': '0'
'GigabitEthernet 0/5/Variable Response OAMPDU/Rx': '0'
'GigabitEthernet 0/5/Losted OAMPDU/Tx': '0'
'GigabitEthernet 0/5/Information OAMPDU/Rx': '86'
'GigabitEthernet 0/5/Variable Request OAMPDU/Rx': '0'
'GigabitEthernet 0/5/Organization Specific OAMPDU/Tx': '0'
'GigabitEthernet 0/1/Loopback Control OAMPDU/Rx': '0'
'GigabitEthernet 0/1/Unique Event OAMPDU/Rx': '0'
'GigabitEthernet 0/1/Unique Event OAMPDU/Tx': '0'
'GigabitEthernet 0/1/Organization Specific OAMPDU/Tx': '0'
'GigabitEthernet 0/5/Information OAMPDU/Tx': '88'
'GigabitEthernet 0/5/Unique Event OAMPDU/Tx': '0'
'GigabitEthernet 0/5/Organization Specific OAMPDU/Rx': '0'
'GigabitEthernet 0/1/Variable Response OAMPDU/Rx': '0'
'GigabitEthernet 0/1/Information OAMPDU/Rx': '0'
'GigabitEthernet 0/1/Variable Response OAMPDU/Tx': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show efm packet | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        show_info_list = self.dut_get_start_show_info(show_info)
        for info_list_value in show_info_list:
            if "OAMPDU statistic" in info_list_value:
                list_0 = re.split(r'\s{2,}',info_list_value.strip())
                key_3_1 = list_0[1].strip()
                key_3_2 = list_0[2].strip()
            elif ":" in info_list_value :
                list_1 = info_list_value.split(":")
                if list_1[1].strip() == "":
                    key_1 = list_1[0].strip()
                else:
                    key_2 = list_1[0].strip()
                    list_2 = list_1[1].strip().split()
                    value_1 = list_2[0].strip()
                    value_2 = list_2[1].strip()
                    dict_value[key_1+"/"+key_2+"/"+key_3_1] = value_1
                    dict_value[key_1+"/"+key_2+"/"+key_3_2] = value_2
        return dict_value
    def dut_get_show_interface_status_errdisabled(self,show_info):
        """
        Function:show interface status err-disabled回显解析函数
        CLI命令:show interface status err-disabled
        回显信息示例:
6120_2011(config)#show interface status err-disabled 
Interface                                Status           Reason
---------------------------------------- ---------------- ----------------
TenGigabitEthernet 0/2                   err-disabled     REUP

        Returns:
{'Interface_list': ['TenGigabitEthernet 0/2'], 'TenGigabitEthernet 0/2/Status': 'err-disabled'
'TenGigabitEthernet 0/2/Reason': 'REUP'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interface status err-disabled | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Interface")
    def dut_get_show_mls_qos_capacity(self,show_info):
        """
        Function:show mls qos capacity回显解析函数
        CLI命令:show mls qos capacity
        回显信息示例:
Ruijie#show mls qos capacity 
supp_ap_pxe       : 1
supp_svi          : 1
supp_dc_vxlan     : 0
Ruijie#

        Returns:
{'supp_svi': '1'
'supp_ap_pxe': '1'
'supp_dc_vxlan': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mls qos capacity | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_ip_dhcp_snoop_binding(self,show_info):
        """
        Function:show ip dhcp snoop binding回显解析函数
        CLI命令:show ip dhcp snoop binding
        回显信息示例:
57_2012(config)#show ip dhcp snoop binding
    
 Total number of bindings: 3 

 NO.   MACADDRESS         IPADDRESS       LEASE(SEC)   TYPE          VLAN  INTERFACE
----- ------------------ --------------- ------------ ------------- ----- --------------------
 1     0002.0000.0001     17.1.255.1      86333        DHCP-Snooping 701   GigabitEthernet 0/2 
 2     0001.0000.0001     17.0.255.1      86350        DHCP-Snooping 700   GigabitEthernet 0/1 
 3     0001.0000.0001     17.1.255.2      86371        DHCP-Snooping 701   GigabitEthernet 0/2

        Returns:
{'0001.0000.0001/17.0.255.1/TYPE': 'DHCP-Snooping'
'Total number of bindings': '3'
'0001.0000.0001/17.0.255.1/INTERFACE': 'GigabitEthernet 0/1'
'0001.0000.0001/17.1.255.2/VLAN': '701'
'0002.0000.0001/17.1.255.1/INTERFACE': 'GigabitEthernet 0/2'
'0001.0000.0001/17.0.255.1/LEASE(SEC)': '86350'
'0001.0000.0001/17.1.255.2/LEASE(SEC)': '86371'
'MACADDRESS_list': ['0002.0000.0001/17.1.255.1'
'0001.0000.0001/17.0.255.1'
'0001.0000.0001/17.1.255.2'], '0001.0000.0001/17.1.255.2/NO.': '3'
'0001.0000.0001/17.1.255.2/INTERFACE': 'GigabitEthernet 0/2'
'0002.0000.0001/17.1.255.1/NO.': '1'
'0001.0000.0001/17.0.255.1/NO.': '2'
'0001.0000.0001/17.1.255.2/TYPE': 'DHCP-Snooping'
'0001.0000.0001/17.0.255.1/VLAN': '700'
'0002.0000.0001/17.1.255.1/TYPE': 'DHCP-Snooping'
'0002.0000.0001/17.1.255.1/VLAN': '701'
'0002.0000.0001/17.1.255.1/LEASE(SEC)': '86333'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip dhcp snoop binding | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"MACADDRESS","IPADDRESS",ago_colon_last_str=1)
    def dut_get_show_rdnd_status(self,show_info):
        """
        Function:show rdnd status回显解析函数
        CLI命令:show rdnd status
        回显信息示例:
Ruijie#show rdnd status 
Redundancy role: master
Redundancy state: realtime
Auto-sync time-period: 3600 s

        Returns:
{'Redundancy role': 'master'
'Auto-sync time-period': '3600 s'
'Redundancy state': 'realtime'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show rdnd status | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_accessgroup(self,show_info):
        """
        Function:show access-group回显解析函数
        CLI命令:show access-group
        回显信息示例:
Ruijie#show access-group 
ip access-group 1 in 
Applied On interface FastEthernet 0/1
ip access-group 100 in 
Applied On interface FastEthernet 0/2
mac access-group mac-acl in 
Applied On interface FastEthernet 0/3

        Returns:
{'FastEthernet 0/2': ['ip access-group 100 in '],
 'FastEthernet 0/3': ['mac access-group mac-acl in '], 
'FastEthernet 0/1': ['ip access-group 1 in ']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show access-group | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_split = show_info.split("\n")
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        value_list = []
        for value_1 in show_info_split:
            if "Applied On" not in value_1:
                value_list.append(value_1)
            else:
                if "interface" in value_1:
                    key = re.match("Applied On interface (.*)",value_1).group(1).strip()
                else:
                    key = value_1.strip()
                dict_value[key] = value_list
                value_list = []
        return dict_value

    def dut_get_show_patch(self,show_info):
        """
        Function:show patch回显解析函数
        CLI命令:show patch
        回显信息示例:
5848VAC#show patch 
[Slot 1/0]:
Patch package SP[5848] installed in the system, version:pa5848
    ----------------------------------------
    Patch       : patch_lsm
    Status      : install
    Version     : 1.0.0.%patch
    Size        : 454324
    Build time  : Tue Mar 13 07:26:23 2018
    Install time: Mon Jan  4 01:13:19 2021
    Description : lsm patch
    ----------------------------------------
    Patch       : patch_security
    Status      : install
    Version     : 1.0.0.%patch
    Size        : 439471
    Build time  : Tue Mar 13 07:26:11 2018
    Install time: Mon Jan  4 01:13:19 2021
    Description : security patch

[Slot 2/0]:
No patch package installed in the system

[Slot 3/0]:
Patch package security[5848] installed in the system, version:pa5848
    ----------------------------------------
    Patch       : patch_security
    Status      : install
    Version     : 1.0.0.%patch
    Size        : 439471
    Build time  : Tue Mar 13 07:09:54 2018
    Install time: Mon Jan  4 18:45:10 2021
    Description : security patch

        Returns:
{'Slot 3/0/patch_security/Build time': 'Tue Mar 13 07:09:54 2018'
'Slot 2/0': 'No patch'
'Slot 1/0/patch_security/Description': 'security patch'
'Slot 1/0/patch_lsm/Size': '454324'
'Slot 1/0/patch_security/Version': '1.0.0.%patch'
'Slot 1/0/patch_lsm/Build time': 'Tue Mar 13 07:26:23 2018'
'Slot 3/0/patch_security/Version': '1.0.0.%patch'
'Slot 1/0/patch_lsm/Status': 'install'
'Slot 1/0/patch_security/Size': '439471'
'Slot 1/0/patch_lsm/Install time': 'Mon Jan  4 01:13:19 2021'
'Slot 1/0/patch_security/Status': 'install'
'Slot 1/0/patch_lsm/Version': '1.0.0.%patch'
'Slot 3/0/patch_security/Status': 'install'
'Slot 1/0/patch_security/Build time': 'Tue Mar 13 07:26:11 2018'
'patchlist': ['Slot 1/0/Patch:patch_lsm'
'Slot 1/0/Patch:patch_security'
'Slot 3/0/Patch:patch_security'], 'Slot 3/0/patch_security/Description': 'security patch'
'Slot 1/0/patch_security/Install time': 'Mon Jan  4 01:13:19 2021'
'Slot 3/0/patch_security/Size': '439471'
'Slot 3/0/patch_security/Install time': 'Mon Jan  4 18:45:10 2021'
'Slot 1/0/patch_lsm/Description': 'lsm patch'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show patch | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        patchlist=[]
        dict_value = {}

        show_info_split = show_info.split("\n")
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])

        dut_info_split = show_info_split
        length = len(dut_info_split)
        for i in range(length):
            if re.match(r'.*installed in the system.*', dut_info_split[i]):
                dut_info_split[i]=' '
            if re.match(r'.*----+.*', dut_info_split[i]):
                dut_info_split[i]=' '
        # 去掉dut_info_split中的空值以及只包含空格符的值
        for i in dut_info_split:
            if '' in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' ' in dut_info_split:
                dut_info_split.remove(' ')
        newlength = len(dut_info_split)
        index = []
        Slot=[]
        count_Pacth_list = []
        for i in range(newlength):
            if re.match(r'.*Slot.*', dut_info_split[i]):
                index.append(i)
        for i in range(len(index)):
            if i<len(index)-1:
                    info=dut_info_split[index[i]:index[i+1]]
            else:
                    info=dut_info_split[index[i]:]
            info_title=info[0].strip(':').strip('[').strip(']')
            Slot.append(info[0])
            del info[0]
            count_Pacth = 0
            count_Pacth_list = []
            for i in range(len(info)):
                if re.match(r'.* Patch*.', info[i]):
                    count_Pacth = count_Pacth + 1
                    count_Pacth_list.append(i)
            if count_Pacth == 0:
                dict_value[info_title] = 'No patch'
            elif count_Pacth > 1:
                for i in range(len(count_Pacth_list)):
                    if i < len(count_Pacth_list) - 1:
                        Pacth1_info = []
                        Pacth1_info = info[count_Pacth_list[i]:count_Pacth_list[i + 1]]
                        Pacth1_info[0] = Pacth1_info[0].strip(' ')
                        a = Pacth1_info[0].find(':')
                        patchlist.append(
                            info_title + '/' + Pacth1_info[0][:a].strip(' ') + ':' + Pacth1_info[0][a + 1:].strip(' '))
                        title = info_title + '/' + Pacth1_info[0][a + 1:].strip(' ')
                        del Pacth1_info[0]
                        for i in Pacth1_info:
                            i = i.strip(' ')
                            b = i.find(':')
                            s_title = title + '/' + i[:b].strip(' ')
                            newinfo = i[b + 1:].strip(' ')
                            dict_value[s_title] = newinfo
                        #     #print(s_title)
                        #     #print(info)
                        # #print(title)
                        # #print(patchlist)
                        # del Pacth1_info[0]
                    else:
                        Pacth1_info = []
                        Pacth1_info = info[count_Pacth_list[i]:]
                        Pacth1_info[0] = Pacth1_info[0].strip(' ')
                        a = Pacth1_info[0].find(':')
                        patchlist.append(
                            info_title + '/' + Pacth1_info[0][:a].strip(' ') + ':' + Pacth1_info[0][a + 1:].strip(' '))
                        title = info_title + '/' + Pacth1_info[0][a + 1:].strip(' ')
                        del Pacth1_info[0]
                        for i in Pacth1_info:
                            i = i.strip(' ')
                            b = i.find(':')
                            s_title = title + '/' + i[:b].strip(' ')
                            newinfo = i[b + 1:].strip(' ')
                            dict_value[s_title] = newinfo
            elif count_Pacth == 1:
                Pacth1_info = []
                Pacth1_info = info
                Pacth1_info[0] = Pacth1_info[0].strip(' ')
                a = Pacth1_info[0].find(':')
                patchlist.append(
                    info_title + '/' + Pacth1_info[0][:a].strip(' ') + ':' + Pacth1_info[0][a + 1:].strip(' '))
                title = info_title + '/' + Pacth1_info[0][a + 1:].strip(' ')
                del Pacth1_info[0]
                for i in Pacth1_info:
                    i = i.strip(' ')
                    b = i.find(':')
                    s_title = title + '/' + i[:b].strip(' ')
                    newinfo = i[b + 1:].strip(' ')
                    dict_value[s_title] = newinfo
        dict_value['patchlist'] = patchlist
        return dict_value
    def dut_get_show_ip_rip(self,show_info):
        """
        Function:show ip rip回显解析函数
        CLI命令:show ip rip
        回显信息示例:
57-H(config-router)#show ip rip
Routing Protocol is "rip"
  Sending updates every 30 seconds
  Invalid after 180 seconds, flushed after 120 seconds
  Outgoing update filter list for all interface is: not set
  Incoming update filter list for all interface is: not set
  Redistribution default metric is 1
  Redistributing:
  Default version control: send version 2, receive version 2 
    Interface                      Send  Recv
    GigabitEthernet 0/1            2     2  
    GigabitEthernet 0/2            2     2  
  Routing for Networks:
    110.24.20.0 255.255.255.0
    110.24.30.0 255.255.255.0
  Distance: 120 (default is 120)
  Graceful-restart enabled
    Restart grace period 60 secs
57-H(config-router)#

        Returns:
{'Incoming update': 'not set'
'Distance': '120'
'GigabitEthernet 0/2/Recv': '2'
'Sending updates': '30'
'Default version control/receive': '2'
'GigabitEthernet 0/1/Recv': '2'
'Restart grace': '60'
'Routing for Networks': ['110.24.20.0 255.255.255.0'
'110.24.30.0 255.255.255.0'], 'GigabitEthernet 0/1/Send': '2'
'Invalid': '180'
'GigabitEthernet 0/2/Send': '2'
'Redistributing': ''
'Default version control/send': '2'
'Routing Protocol': 'rip'
'flushed': '120'
'Graceful-restart': 'enabled'
'Outgoing update': 'not set'
'Redistribution default metric': '1'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip rip | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        # value_title="IP address"     #需要变参的地方
        # col_len_list = []
        #创建字典
        dict_value={}
        # rol_title_list = []
        # title_row =[]
        # 删除无用信息
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line: # 删除空行
            if '' in show_info_list_line:
                show_info_list_line.remove('')

        line_len = len(show_info_list_line) # 计算长度

        for i in range(line_len):
            if re.match('Routing Protocol',show_info_list_line[i]):
                temp_split = re.split('is',show_info_list_line[i])
                dict_value[temp_split[0].strip()] = temp_split[1].strip().strip('"')
                break
        show_info_list_line.remove(show_info_list_line[i])


        line_len = len(show_info_list_line) # 计算长度
        for i in range(line_len):
            if re.match('Sending updates',show_info_list_line[i].strip()):
                temp_split = re.split('every',show_info_list_line[i])
                value = temp_split[1].strip().split(' ')
                dict_value[temp_split[0].strip()] = value[0].strip()
                break
        show_info_list_line.remove(show_info_list_line[i])

        line_len = len(show_info_list_line)  # 计算长度
        for i in range(line_len):
            if re.match('Invalid after', show_info_list_line[i].strip()):
                temp_split = re.split(', ', show_info_list_line[i])
                temp_split1 = re.split('after',temp_split[0])
                value = temp_split1[1].strip().split(' ')
                dict_value[temp_split1[0].strip()] = value[0].strip()
                temp_split2 = re.split('after',temp_split[1])
                value = temp_split2[1].strip().split(' ')
                dict_value[temp_split2[0].strip()] = value[0].strip()
                break
        show_info_list_line.remove(show_info_list_line[i])

        line_len = len(show_info_list_line)  # 计算长度
        for i in range(line_len):
            if re.match('Outgoing update', show_info_list_line[i].strip()):
                temp_split = re.split('is:', show_info_list_line[i])
                temp_split1 = re.split('filter',temp_split[0])
                key_name = temp_split1[0].strip()
                dict_value[key_name] = temp_split[1].strip()
                break
        show_info_list_line.remove(show_info_list_line[i])

        line_len = len(show_info_list_line)  # 计算长度
        for i in range(line_len):
            if re.match('Incoming update', show_info_list_line[i].strip()):
                temp_split = re.split('is:', show_info_list_line[i])
                temp_split1 = re.split('filter',temp_split[0])
                key_name = temp_split1[0].strip()
                dict_value[key_name] = temp_split[1].strip()
                break
        show_info_list_line.remove(show_info_list_line[i])

        line_len = len(show_info_list_line)  # 计算长度
        for i in range(line_len):
            if re.match('Redistribution', show_info_list_line[i].strip()):
                temp_split = re.split(' is ', show_info_list_line[i])
                dict_value[temp_split[0].strip()] = temp_split[1].strip()
                break
        show_info_list_line.remove(show_info_list_line[i])

        line_len = len(show_info_list_line)  # 计算长度
        for i in range(line_len):
            if re.match('Redistributing', show_info_list_line[i].strip()):
                temp_split = re.split(':', show_info_list_line[i])
                dict_value[temp_split[0].strip()] = temp_split[1].strip()
                break
        show_info_list_line.remove(show_info_list_line[i])

        line_len = len(show_info_list_line)  # 计算长度
        for i in range(line_len):
            if re.match('Default version', show_info_list_line[i].strip()):
                temp_split = re.split(':', show_info_list_line[i])
                temp_split1 = re.split(',',temp_split[1])
                temp_split2 = re.split('version',temp_split1[0])
                key_name = temp_split[0].strip() + '/' + temp_split2[0].strip()
                dict_value[key_name] = temp_split2[1].strip()
                temp_split3 = re.split('version',temp_split1[1])
                key_name = temp_split[0].strip() + '/' + temp_split3[0].strip()
                dict_value[key_name] = temp_split3[1].strip()
                break
        show_info_list_line.remove(show_info_list_line[i])
        line_len = len(show_info_list_line)  # 计算长度
        for i in range(line_len):
            if re.match('Interface', show_info_list_line[i].strip()):
                j = i+1
                first_tag = re.split('  ', show_info_list_line[i].strip())
                while '' in first_tag:
                    first_tag.remove('')
                while ' ' in first_tag:
                    first_tag.remove(' ')
                while not re.match('Routing', show_info_list_line[j].strip()):
                    sec_tag = re.split('  ', show_info_list_line[j].strip())
                    while '' in sec_tag:
                        sec_tag.remove('')
                    while ' ' in sec_tag:
                        sec_tag.remove(' ')
                    key_name = sec_tag[0].strip() + '/' + first_tag[1].strip()
                    dict_value[key_name] = sec_tag[1].strip()
                    key_name = sec_tag[0].strip() + '/' + first_tag[2].strip()
                    dict_value[key_name] = sec_tag[2].strip()
                    j = j+1
                break

        line_len = len(show_info_list_line)  # 计算长度
        for i in range(line_len):
            if re.match('Routing for', show_info_list_line[i].strip()):
                key_name = show_info_list_line[i].strip().strip(':')
                j = i +1
                value = []
                while not re.match('Distance:', show_info_list_line[j].strip()):
                    value.append(show_info_list_line[j].strip())
                    j = j+1
                dict_value[key_name] = value

        line_len = len(show_info_list_line)  # 计算长度
        for i in range(line_len):
            if re.match('Distance:', show_info_list_line[i].strip()):
                temp_split = show_info_list_line[i].split(":")
                temp_split1 = temp_split[1].strip().split(" ")
                dict_value[temp_split[0].strip()] = temp_split1[0]

        for i in range(line_len):
            if re.match('Graceful-', show_info_list_line[i].strip()):
                temp_split = show_info_list_line[i].strip().split(" ")
                dict_value[temp_split[0].strip()] = temp_split[1]

        for i in range(line_len):
            if re.match('Restart', show_info_list_line[i].strip()):
                temp_split = show_info_list_line[i].strip().split("period")
                value = temp_split[1].strip().split(' ')
                dict_value[temp_split[0].strip()] = value[0]

        return dict_value
    def dut_get_show_isis_interface(self,show_info):
        """
        Function:show isis <dutport>回显解析函数
        CLI命令:show isis <dutport>
        回显信息示例:
6000C#show isis interface GigabitEthernet 0/2 

Area (null):
GigabitEthernet 0/2 is up, line protocol is up
  Routing Protocol: IS-IS ((null))
    Network Type: Broadcast
    Circuit Type: level-1-2
    Local circuit ID: 0x02
    Extended Local circuit ID: 0x00000002
    Local SNPA: 00d0.f822.36cb
    IP interface address:
      20.1.1.1/24
    IPv6 interface address:
    Level-1 MTID: Standard
    Level-2 MTID: Standard
    Level-1 Metric: 10/10, Priority: 64, Circuit ID: 6000C.02
    Level-1 Timer intervals configured, Hello: 10s, Lsp: 33ms, Psnp: 2s, Csnp: 10s, Retransmit: 5s
    Level-1 LSPs in queue: 0
    Number of active level-1 adjacencies: 1
    Level-2 Metric: 10/10, Priority: 64, Circuit ID: 6000C.02
    Level-2 Timer intervals configured, Hello: 10s, Lsp: 33ms, Psnp: 2s, Csnp: 10s, Retransmit: 5s
    Level-2 LSPs in queue: 0
    Number of active level-2 adjacencies: 1
    Next IS-IS LAN Level-1 Hello in 2 seconds
    Next IS-IS LAN Level-2 Hello in 2 seconds

        Returns:
{"Level-1 LSPs in queue": "0"
"Level-1/Priority": "64"
"IP interface address": "20.1.1.1/24"
"Level-2/Priority": "64"
"Routing Protocol": "IS-IS ((null))"
"Network Type": "Broadcast"
"Level-2/Circuit ID": "6000C.02"
"line protocol": "up"
"Level-2 Timer intervals/Hello": "10"
"Local circuit ID": "0x02"
"Level-1 Timer intervals/Retransmit": "5"
"IPv6 interface address": ""
"Level-1 Timer intervals/Hello": "10"
"GigabitEthernet 0/2": "up"
"Level-2 Timer intervals/Csnp": "10"
"Extended Local circuit ID": "0x00000002"
"Level-1 Timer intervals/Psnp": "2"
"Level-2 Timer intervals/Lsp": "33"
"Number of active level-1 adjacencies": "1"
"Level-1 MTID": "Standard"
"Circuit Type": "level-1-2"
"Level-2 Timer intervals/Psnp": "2"
"Next IS-IS LAN Level-1 Hello": "2"
"Level-1/Circuit ID": "6000C.02"
"Next IS-IS LAN Level-2 Hello": "2"
"Number of active level-2 adjacencies": "1"
"Level-2 Timer intervals/Retransmit": "5"
"Local SNPA": "00d0.f822.36cb"
"Level-2/Metric": "10/10"
"Level-2 LSPs in queue": "0"
"Level-1/Metric": "10/10"
"Level-1 Timer intervals/Csnp": "10"
"Level-1 Timer intervals/Lsp": "33"
"Level-2 MTID": "Standard"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show isis <dutport> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        one_key = ''
        value_list = []
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        length = len(show_info_split)

        for i in range(length):
            if re.match('    IP interface', show_info_split[i]):
                if re.match('    IPv6', show_info_split[i + 1]):
                    dict_value['IP interface address'] = ''
                    show_info_split.remove(show_info_split[i])
                else:
                    dict_value['IP interface address'] = show_info_split[i + 1].strip()
                    show_info_split.remove(show_info_split[i + 1])
                    show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)

        for i in range(length):
            if re.match('    IPv6 interface', show_info_split[i]):
                if re.match('    Level', show_info_split[i + 1]):
                    dict_value['IPv6 interface address'] = ''
                    show_info_split.remove(show_info_split[i])
                else:
                    dict_value['IPv6 interface address'] = show_info_split[i + 1].strip()
                    show_info_split.remove(show_info_split[i + 1])
                    show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)

        for i in range(length):
            if re.match('Area \(null\)', show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)

        newString = ' '
        for i in range(length):
            newString = newString + show_info_split[i] + ','

        dut_info_split = newString.split(',')
        length = len(dut_info_split)

        for i in range(length):
            if re.match('    Level-\d+ Metric', dut_info_split[i]):
                matchObj = re.match('    (Level-\d+) (Metric): (.*)', dut_info_split[i])
                one_key = matchObj.group(1)
                key = one_key + '/' + matchObj.group(2)
                dict_value[key] = matchObj.group(3)
            elif re.match('( Priority)|( Circuit ID)|( Hello)|( Lsp)|( Psnp)|( Csnp)|( Retransmit)', dut_info_split[i]):
                matchObj = re.match('(.*):(.*)', dut_info_split[i])
                key = one_key + '/' + matchObj.group(1).strip()
                dict_value[key] = matchObj.group(2).strip()
            elif re.match('    Level-\d+ Timer intervals', dut_info_split[i]):
                matchObj = re.match('    (Level-\d+ Timer intervals)', dut_info_split[i])
                one_key = matchObj.group(1)
            else:
                if re.match('.*:.*', dut_info_split[i]):
                    matchObj = re.match('(.*?):(.*)', dut_info_split[i])
                    dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
                elif re.match('(.*) in (.*)|(.*) is (.*)', dut_info_split[i]):
                    matchObj = re.match('(.*) is?n? (.*)', dut_info_split[i])
                    key = matchObj.group(1).strip()
                    value = matchObj.group(2).strip()
                    if re.match('\d+ seconds', value):
                        ss = re.match('(\d+) seconds', value)
                        value = ss.group(1)
                    dict_value[key] = value
                else:
                    pass
        for i in dict_value:
            if re.match('\d+s|\d+ms', dict_value[i]):
                matchObj = re.match('(\d+)', dict_value[i])
                dict_value[i] = matchObj.group(1)

        return dict_value
    def dut_get_show_nfpp_arpguard_summary(self, show_info):
        """
        Function:show nfpp arp-guard summary回显解析函数
        CLI命令:show nfpp arp-guard summary
        回显信息示例:
5848VAC#show nfpp arp-guard summary 

(Format of column Rate-limit and Attack-threshold is per-src-ip/per-src-mac/per-port.)
Interface Status  Isolate-period Rate-limit      Attack-threshold Scan-threshold 
Global    Enable  0              30/30/1920      60/60/3840       100            

Maximum count of monitored hosts: 1000
Monitor period: 600s

5848VAC#

        Returns:
{'Status': 'Enable'
'Attack-threshold': ['60'
'60'
'3840'], 'Scan-threshold': '100'
'Rate-limit': ['30'
'30'
'1920'], 'Isolate-period': '0'
'Interface': 'Global'
'Maximum count of monitored hosts': '1000'
'Monitor period': '600'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show nfpp arp-guard summary | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        # 创建字典
        dict_value = {}
        # 删除无用信息
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:  # 删除空行
            if '' in show_info_list_line:
                show_info_list_line.remove('')

        line_len = len(show_info_list_line)  # 计算长度

        # 删除以(Format开头的行
        for i in range(line_len):
            if re.match(r'\(Format', show_info_list_line[i]):
                show_info_list_line.remove(show_info_list_line[i])
                break

        # 开始处理以Interface开始的行，考虑可能不只一行的情况
        line_len = len(show_info_list_line)
        for i in range(line_len):
            if re.match(r'Interface', show_info_list_line[i]):
                temp_list = show_info_list_line[i].strip().split(' ') # 以空格分隔
                continue
            temp_list2 = show_info_list_line[i].strip().split(' ')
            for kk in range(len(temp_list2)):
                temp_list2[kk].strip()
            while '' in temp_list2:
                temp_list2.remove('')
            if re.match(r'Maximum', show_info_list_line[i].strip()):
                break
            temp_value1 = temp_list2[3].split('/')
            temp_value2 = temp_list2[4].split('/')
            # 处理分隔列表中的空元素
            for kk in range(len(temp_list)):
                temp_list[kk].strip()
            while '' in temp_list:
                temp_list.remove('')

            for j in range(len(temp_list2)):
                dict_value[temp_list[j].strip()] = temp_list2[j].strip()
            dict_value[temp_list[3].strip()] = temp_value1
            dict_value[temp_list[4].strip()] = temp_value2

        # 处理 Maximum 和 Monitor所在行
        for i in range(line_len):
            if re.match(r'^Maximum',show_info_list_line[i].strip()):
                temp_list3 = show_info_list_line[i].strip().split(':')
                dict_value[temp_list3[0].strip()] = temp_list3[1].strip()
            elif ":" in show_info_list_line[i].strip():
                temp_list4 = show_info_list_line[i].strip().split(':')
                value = temp_list4[1].strip().strip('pps').strip('s')
                dict_value[temp_list4[0]] = value
        return dict_value
    def dut_get_show_ssh(self, show_info):
        """
        Function:show ssh回显解析函数
        CLI命令:show ssh
        回显信息示例:
sw#show ssh
Connection Version Encryption       Hmac         Compress   State           Username
         0     2.0 aes128-ctr       hmac-md5     none       Session started ruijie
         1     2.0 aes128-ctr       hmac-md5     none       Session started ruijie

        Returns:
{'0/Hmac': 'hmac-md5'
'0/Username': 'ruijie'
'1/Compress': 'none'
'1/Username': 'ruijie'
'0/Connection': '0'
'1/Encryption': 'aes128-ctr'
'0/Version': '2.0'
'0/Compress': 'none'
'0/State': 'Session started'
'0/Encryption': 'aes128-ctr'
'1/State': 'Session started'
'1/Hmac': 'hmac-md5'
'1/Version': '2.0'
'1/Connection': '1'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ssh | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}  # 定义字典
        templist = []
        num_list = []
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        ############### 大写分割开始  ########################
        split_sample = show_info_split[0]  # 以大写字母为模板来进行分割
        length1 = len(split_sample) # 计算长度
        for i in range(length1):
            if re.match('[A-Z]',show_info_split[0][i]):  # 对第一行的每一个字符进行匹配
                num_list.append(i)  # <type 'list'>: [0, 11, 19, 36, 49, 60, 76]  # 得到长度
        ###################   按照长度对字符串每一行进行切片  ###################

        for i in range(len(show_info_split)):
                for k in range(len(num_list)-1):
                    templist.append(show_info_split[i][num_list[k]:num_list[k+1]])
                templist.append(show_info_split[i][num_list[-1]:-1]+show_info_split[i][-1])
        ###################### 首行大写分割匹配函数代码结束，可按照需求抽象出函数############
        # 本案例的泛化实现
        split_len = len(num_list)
        value_num = split_len
        key_num = split_len

        for_times = len(templist)/split_len - 1    # 添加次数

        for i in range(for_times):
            for j in range(split_len):
                key = templist[key_num].strip() + '/' + templist[j].strip()
                dict_value[key] = templist[value_num].strip()
                value_num = value_num + 1
            key_num = split_len + key_num
        return dict_value
    def dut_get_show_virtualac_dualactive_summary(self, show_info):  # 定义函数，函数名由锐捷提供
        """
        Function:show virtual-ac dual-active summary回显解析函数
        CLI命令:show virtual-ac dual-active summary
        回显信息示例:
Ruijie#show virtual-ac dual-active summary 
BFD dual-active detection enabled: No
Aggregateport dual-active detection enabled: Yes
Interfaces excluded from shutdown in recovery mode:
GigabitEthernet 1/0/3
GigabitEthernet 1/0/4
In dual-active recovery mode: No

        Returns:
{'Interfaces excluded from shutdown in recovery mode': ['GigabitEthernet 1/0/3'
'GigabitEthernet 1/0/4'], 'In dual-active recovery mode': 'No'
'Aggregateport dual-active detection enabled': 'Yes'
'BFD dual-active detection enabled': 'No'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show virtual-ac dual-active summary | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        length_list = []  # 定义列表
        dict_value = {}  # 定义字典
        value = []
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])

        dut_info_split = show_info_split
        length = len(dut_info_split)
        for i in range(length):
            if re.match(r'Interfaces excluded', dut_info_split[i]):
                secondrow = re.match('(.*):', dut_info_split[i])

                # 将所有可能的接口全部添加进value列表
                j = i + 1
                while not re.match(r'In dual', dut_info_split[j].strip()):
                    if not dut_info_split[j].strip() == '':  # 遇到空元素跳过
                        value.append(dut_info_split[j])
                    j = j + 1
                dict_value[secondrow.group(1)] = value
                break
        length = len(dut_info_split)
        for i in range(length):
            try:
                endrow = re.match(r'(.*):\s+(\w+)', dut_info_split[i])
                key_name = endrow.group(1)
                dict_value[key_name] = endrow.group(2)
            except:
                pass
        return dict_value
    def dut_get_show_radius_server(self,show_info):
        """
        Function:show radius server回显解析函数
        CLI命令:show radius server
        回显信息示例:
AC2-5708(config)#show radius server 

Server IP:    172.18.31.212
Accounting Port:  1813
Authen  Port:     1812
Test Username:    <Not Configured>
Test Idle Time:   60 Minutes
Test Ports:       Authen and Accounting
Server State:     Active
    Current duration 2707210s, previous duration 0s
    Dead: total time 0s, count 0
    Statistics:
        Authen: request 0, timeouts 0
        Author: request 0, timeouts 0
        Account: request 1, timeouts 3



Server IP:    192.168.32.202
Accounting Port:  1813
Authen  Port:     1812
Test Username:    <Not Configured>
Test Idle Time:   60 Minutes
Test Ports:       Authen and Accounting
Server State:     Active
    Current duration 868286s, previous duration 120s
    Dead: total time 960s, count 8
    Statistics:
        Authen: request 18, timeouts 28
        Author: request 18, timeouts 28
        Account: request 1, timeouts 3



Server IP:    192.168.32.179
Accounting Port:  1813
Authen  Port:     1812
Test Username:    ac1
Test Idle Time:   1 Minutes
Test Ports:       Accounting
Server State:     Active
    Current duration 226082s, previous duration 45s
    Dead: total time 989031s, count 39
    Statistics:
        Authen: request 3, timeouts 0
        Author: request 3, timeouts 0
        Account: request 35052, timeouts 25615


          
Server IP:    172.18.105.9
Accounting Port:  1813
Authen  Port:     1812
Test Username:    <Not Configured>
Test Idle Time:   60 Minutes
Test Ports:       Authen and Accounting
Server State:     Active
    Current duration 2707210s, previous duration 0s
    Dead: total time 0s, count 0
    Statistics:
        Authen: request 0, timeouts 0
        Author: request 0, timeouts 0
        Account: request 1, timeouts 3

        Returns:
{'172.18.31.212/Current duration': '2707210'
'172.18.31.212/Accounting Port': '1813'
'172.18.31.212/Authen  Port': '1812'
'192.168.32.202/Authen  Port': '1812'
'192.168.32.202/previous duration': '120'
'192.168.32.179/Authen  Port': '1812'
'172.18.105.9/Accounting Port': '1813'
'192.168.32.202/Test Username': '<Not Configured>'
'172.18.105.9/Test Ports': 'Authen and Accounting'
'172.18.31.212/Server State': 'Active'
'172.18.105.9/Current duration': '2707210'
'172.18.31.212/Statistics': ['Authen: request 0, timeouts 0'
'Author: request 0, timeouts 0'
'Account: request 1, timeouts 3'], '192.168.32.202/Test Idle Time': '60'
'172.18.105.9/previous duration': '0'
'172.18.105.9/Dead': 'total time 0s, count 0'
'172.18.31.212/Dead': 'total time 0s, count 0'
'192.168.32.179/Test Ports': 'Accounting'
'192.168.32.179/Current duration': '226082'
'192.168.32.202/Accounting Port': '1813'
'172.18.31.212/previous duration': '0'
'192.168.32.179/Server State': 'Active'
'172.18.105.9/Statistics': ['Authen: request 0, timeouts 0'
'Author: request 0, timeouts 0'
'Account: request 1, timeouts 3'], '172.18.105.9/Test Username': '<Not Configured>'
'192.168.32.202/Server State': 'Active'
'172.18.105.9/Server State': 'Active'
'192.168.32.179/Test Idle Time': '1'
'192.168.32.179/Statistics': ['Authen: request 3, timeouts 0'
'Author: request 3, timeouts 0'
'Account: request 35052, timeouts 25615'], '192.168.32.202/Statistics': ['Authen: request 18, timeouts 28'
'Author: request 18, timeouts 28'
'Account: request 1, timeouts 3'], '192.168.32.202/Current duration': '868286'
'172.18.31.212/Test Username': '<Not Configured>'
'172.18.105.9/Test Idle Time': '60'
'192.168.32.179/Test Username': 'ac1'
'172.18.31.212/Test Ports': 'Authen and Accounting'
'192.168.32.202/Dead': 'total time 960s, count 8'
'192.168.32.179/Accounting Port': '1813'
'Server IP': ['172.18.31.212'
'192.168.32.202'
'192.168.32.179'
'172.18.105.9'], '192.168.32.179/previous duration': '45'
'192.168.32.202/Test Ports': 'Authen and Accounting'
'172.18.31.212/Test Idle Time': '60'
'192.168.32.179/Dead': 'total time 989031s, count 39'
'172.18.105.9/Authen  Port': '1812'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show radius server | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        one_key = ''
        value_list = []
        Server_IP_list = []
        show_info_split = show_info.split("\n")
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        length = len(show_info_split)
        #########################################################
        newString = ' '
        for i in range(length):
            newString = newString + show_info_split[i] + ','
        ##########################################################
        dut_info_split = newString.split(',')
        length = len(dut_info_split)
        for i in range(length):
            if re.match('Server IP', dut_info_split[i]):
                matchObj = re.match('Server IP:(.*)', dut_info_split[i])
                one_key = matchObj.group(1).strip()
                Server_IP_list.append(one_key)
            elif re.match('        Authen|        Author|        Account| timeouts| count', dut_info_split[i]):
                pass
            else:
                if re.match('    Statistics', dut_info_split[i]):
                    value_list.append(dut_info_split[i + 1].strip() + ', ' + dut_info_split[i + 2].strip())
                    value_list.append(dut_info_split[i + 3].strip() + ', ' + dut_info_split[i + 4].strip())
                    value_list.append(dut_info_split[i + 5].strip() + ', ' + dut_info_split[i + 6].strip())
                    key = one_key + '/' + 'Statistics'
                    dict_value[key] = value_list
                    value_list = []
                elif re.match('    Dead', dut_info_split[i]):
                    matchObj = re.match('    (Dead): (.*)', dut_info_split[i])
                    key = one_key + '/' + matchObj.group(1)
                    value = matchObj.group(2) + ', ' + dut_info_split[i + 1].strip()
                    dict_value[key] = value
                else:
                    if re.match('(.*):(.*)', dut_info_split[i]):
                        matchObj = re.match('(.*):(.*)', dut_info_split[i])
                        key = one_key + '/' + matchObj.group(1).strip()
                        dict_value[key] = matchObj.group(2).strip()
                    else:
                        if re.match('(.*\w+) (\d+.*)', dut_info_split[i]):
                            matchObj = re.match('(.*\w+) (\d+.*)', dut_info_split[i])
                            key = one_key + '/' + matchObj.group(1).strip()
                            dict_value[key] = matchObj.group(2).strip()
                        else:
                            pass
        for i in dict_value:
            if type(dict_value[i]) == type([1, 2]):
                pass
            elif re.match('\d+s|\d+ Minutes', dict_value[i]):
                matchObj = re.match('(\d+).*', dict_value[i])
                dict_value[i] = matchObj.group(1)
        dict_value["Server IP"]= Server_IP_list
        return dict_value
    def dut_get_show_webauth_portal(self, show_info):  # 定义函数，函数名由锐捷提供
        """
        Function:show web-auth portal回显解析函数
        CLI命令:show web-auth portal
        回显信息示例:
Ruijie#show web-auth portal
Portal Servers Settings: 
------------------------------------------------------------
  Ip:        192.168.32.180
  Key:       ruijie
  ref:       2
------------------------------------------------------------
  Ip:        172.18.31.212
  Key:       ruijie
  ref:       1
------------------------------------------------------------
  Ip:        192.168.32.202
  Key:       ruijie
  ref:       2
------------------------------------------------------------
  Ip:        112.124.31.88
  Key:       ruijie
  ref:       1
------------------------------------------------------------
  Ip:        13.0.13.2
  Key:       ruijie
  ref:       2

 portalv2 list show 
------------------------------------------------------------
  Ip:        192.168.32.180
  port:       50100
  ref:        1
  URL format: default
  Status:     Enable

  Ip:        172.18.31.212
  port:       50100
  ref:        1
  URL format: default
  Status:     Disable

  Ip:        192.168.32.202
  port:       50100
  ref:        1
  URL format: default
  Status:     Enable

  Ip:        13.0.13.2
  port:       50100
  ref:        1
  URL format: cmcc-ext1
  Status:     Enable

  Ip:        13.0.13.2
  port:       50100
  ref:        1
  URL format: custom
  Status:     Enable


 portalv1 list show 
------------------------------------------------------------
  Ip:        192.168.32.180
  ref:        1
  URL format: default
  Status:     Enable
  port:       8080

  Ip:        192.168.32.202
  ref:        1
  URL format: default
  Status:     Enable
  port:       80

        Returns:
{"portalv2 list/192.168.32.180/port": "50100"
"Portal Servers/192.168.32.202/ref": "2"
"Portal Servers/13.0.13.2/Key": "ruijie"
"portalv1 list/192.168.32.202/port": "80"
"portalv2 list/192.168.32.202/ref": "1"
"Portal Servers/192.168.32.180/Key": "ruijie"
"portalv2 list/172.18.31.212/URL format": "default"
"portalv1 list/192.168.32.180/Status": "Enable"
"Portal Servers/112.124.31.88/ref": "1"
"portalv2 list/13.0.13.2/URL format": "custom"
"Portal Servers/172.18.31.212/Key": "ruijie"
"Portal Servers/112.124.31.88/Key": "ruijie"
"Portal Servers/192.168.32.180/ref": "2"
"portalv1 list/192.168.32.202/URL format": "default"
"portalv2 list/192.168.32.202/URL format": "default"
"portalv2 list/172.18.31.212/ref": "1"
"portalv2 list/192.168.32.180/URL format": "default"
"portalv2 list/192.168.32.180/Status": "Enable"
"Portal Servers/192.168.32.202/Key": "ruijie"
"Portal Servers/13.0.13.2/ref": "2"
"portalv2 list/192.168.32.202/Status": "Enable"
"portalv2 list/192.168.32.202/port": "50100"
"portalv1 list": ["192.168.32.180"
"192.168.32.202"], "portalv2 list/13.0.13.2/port": "50100"
"portalv1 list/192.168.32.202/Status": "Enable"
"portalv2 list/13.0.13.2/ref": "1"
"portalv1 list/192.168.32.202/ref": "1"
"portalv2 list": ["192.168.32.180"
"172.18.31.212"
"192.168.32.202"
"13.0.13.2"
"13.0.13.2"], "portalv1 list/192.168.32.180/URL format": "default"
"portalv1 list/192.168.32.180/ref": "1"
"portalv2 list/13.0.13.2/Status": "Enable"
"portalv2 list/172.18.31.212/Status": "Disable"
"Portal Servers/172.18.31.212/ref": "1"
"portalv2 list/192.168.32.180/ref": "1"
"Portal Servers": ["192.168.32.180"
"172.18.31.212"
"192.168.32.202"
"112.124.31.88"
"13.0.13.2"], "portalv1 list/192.168.32.180/port": "8080"
"portalv2 list/172.18.31.212/port": "50100"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show web-auth portal | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}  # 定义字典
        show_info_split1 = []
        ip_list1 = []
        show_info_split2 = []
        ip_list2 = []
        show_info_split3 = []
        ip_list3 = []
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])

        length = len(show_info_split)

        for i in range(length):
            if not re.match('portalv2 list show', show_info_split[i].strip()):
                show_info_split1.append(show_info_split[i])
                if re.match('Ip:', show_info_split[i].strip()):
                    temp = show_info_split[i].split('      ')
                    ip_list1.append(temp[-1].strip())
            else:
                break
        for j in range(i, length):
            if not re.match('portalv1 list show', show_info_split[j].strip()):
                show_info_split2.append(show_info_split[j])
                if re.match('Ip:', show_info_split[j].strip()):
                    temp = show_info_split[j].split('    ')
                    ip_list2.append(temp[-1].strip())
            else:
                break
        for k in range(j, length):
            show_info_split3.append(show_info_split[k])
            if re.match('Ip:', show_info_split[k].strip()):
                temp = show_info_split[k].split('    ')
                ip_list3.append(temp[-1].strip())

        length1 = len(show_info_split1)
        temp = show_info_split1[0].split('Settings:')
        key1 = temp[0].strip()
        for i in range(length1):
            if re.match('Ip:', show_info_split1[i].strip()):
                temp = show_info_split1[i].split('     ')
                key1_2 = key1 + '/' + temp[-1].strip()
            if re.match('Key:', show_info_split1[i].strip()):
                key1_3 = key1_2 + '/' + 'Key'
                temp = show_info_split1[i].split(':')
                value = temp[-1].strip()
                dict_value[key1_3] = value
            if re.match('ref:', show_info_split1[i].strip()):
                key1_3 = key1_2 + '/' + 'ref'
                temp = show_info_split1[i].split(':')
                value = temp[-1].strip()
                dict_value[key1_3] = value

        dict_value[key1] = ip_list1

        length2 = len(show_info_split2)
        temp = show_info_split2[0].split('show')
        key1 = temp[0].strip()
        for i in range(length2):
            if re.match('Ip:', show_info_split2[i].strip()):
                temp = show_info_split2[i].split('     ')
                key1_2 = key1 + '/' + temp[-1].strip()
            if re.match('port:', show_info_split2[i].strip()):
                key1_3 = key1_2 + '/' + 'port'
                temp = show_info_split2[i].split(':    ')
                value = temp[-1].strip()
                dict_value[key1_3] = value
            if re.match('ref:', show_info_split2[i].strip()):
                key1_3 = key1_2 + '/' + 'ref'
                temp = show_info_split2[i].split(':')
                value = temp[-1].strip()
                dict_value[key1_3] = value
            if re.match('URL format:', show_info_split2[i].strip()):
                key1_3 = key1_2 + '/' + 'URL format'
                temp = show_info_split2[i].split(':')
                value = temp[-1].strip()
                dict_value[key1_3] = value
            if re.match('Status:', show_info_split2[i].strip()):
                key1_3 = key1_2 + '/' + 'Status'
                temp = show_info_split2[i].split(':')
                value = temp[-1].strip()
                dict_value[key1_3] = value

        dict_value[key1] = ip_list2

        length3 = len(show_info_split3)
        temp = show_info_split3[0].split('show')
        key1 = temp[0].strip()
        for i in range(length3):
            if re.match('Ip:', show_info_split3[i].strip()):
                temp = show_info_split3[i].split('     ')
                key1_2 = key1 + '/' + temp[-1].strip()
            if re.match('ref:', show_info_split3[i].strip()):
                key1_3 = key1_2 + '/' + 'ref'
                temp = show_info_split3[i].split(':')
                value = temp[-1].strip()
                dict_value[key1_3] = value
            if re.match('URL format:', show_info_split3[i].strip()):
                key1_3 = key1_2 + '/' + 'URL format'
                temp = show_info_split3[i].split(':')
                value = temp[-1].strip()
                dict_value[key1_3] = value
            if re.match('Status:', show_info_split3[i].strip()):
                key1_3 = key1_2 + '/' + 'Status'
                temp = show_info_split3[i].split(':')
                value = temp[-1].strip()
                dict_value[key1_3] = value
            if re.match('port:', show_info_split3[i].strip()):
                key1_3 = key1_2 + '/' + 'port'
                temp = show_info_split3[i].split(':')
                value = temp[-1].strip()
                dict_value[key1_3] = value

        dict_value[key1] = ip_list3

        jj = 0
        return dict_value
    # 4月4日下午： 对应
    def dut_get_show_ip_igmp_groups(self,show_info):
        """
        Function:show ip igmp groups回显解析函数
        CLI命令:show ip igmp groups
        回显信息示例:
Ruijie#show ip igmp groups
IGMP Connected Group Membership
Group Address    Interface               Uptime    Expires   Last Reporter
225.0.0.1        GigabitEthernet 3/7     00:00:03  00:04:16  192.168.1.2

        Returns:
{"225.0.0.1/Interface": "GigabitEthernet 3/7"
"225.0.0.1/Expires": "00:04:16"
"225.0.0.1/Last Reporter": "192.168.1.2"
"225.0.0.1/Uptime": "00:00:03"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip igmp groups | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        # 创建字典
        dict_value={}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        show_info_list_line.remove(show_info_list_line[0])
        for i in range(len(show_info_list_line)):
            if re.match(r'^Gr',show_info_list_line[i]):
                temp = show_info_list_line[i].split('  ')
                for m in range(len(temp)):
                    temp[m].strip()
                while '' in temp:
                    temp.remove('')
        show_info_list_line.remove(show_info_list_line[0])
        for i in range(len(show_info_list_line)):
            temp1 = show_info_list_line[i].split('  ')
            for m in range(len(temp1)):
                temp1[m].strip()
            while '' in temp1:
                temp1.remove('')
            key = temp1[0].strip() + '/' + temp[1].strip()
            dict_value[key] = temp1[1].strip()
            key = temp1[0].strip() + '/' + temp[2].strip()
            dict_value[key] = temp1[2].strip()
            key = temp1[0].strip() + '/' + temp[3].strip()
            dict_value[key] = temp1[3].strip()
            key = temp1[0].strip() + '/' + temp[4].strip()
            dict_value[key] = temp1[4].strip()

        return dict_value
    def dut_get_show_wlan_hotbackup(self,show_info):
        """
        Function:show wlan hot-backup回显解析函数
        CLI命令:show wlan hot-backup
        回显信息示例:
AC2-5708(config)#show wlan hot-backup 
wlan hot-backup peer list:
  ip address           hot-backup state            description
  -------------------- ---------- ---------------- -----------
  1.5.0.1              Enable     PROBE            AC2

        Returns:
{'1.5.0.1/hot-backup': 'Enable'
'1.5.0.1/state': 'PROBE'
'1.5.0.1/description': 'AC2'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show wlan hot-backup | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        # 创建字典
        dict_value={}
        temp1 = []
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        show_info_list_line.remove(show_info_list_line[0])
        cut_list = self.dut_get_show_len(show_info_list_line[1])
        show_info_list_line.remove(show_info_list_line[1])
        t0 = cut_list[0]
        t1 = cut_list[0] + cut_list[1]
        t2 = cut_list[0] + cut_list[1] + cut_list[2]
        t3 = cut_list[0] + cut_list[1] + cut_list[2] + cut_list[3]
        temp1.append(show_info_list_line[0][0:t0].strip())
        temp1.append(show_info_list_line[0][t0:t1].strip())
        temp1.append(show_info_list_line[0][t1:t2].strip())
        temp1.append(show_info_list_line[0][t2:t3].strip())
        show_info_list_line.remove(show_info_list_line[0])
        for i in range(len(show_info_list_line)):
            temp2 = show_info_list_line[i].split('   ')
            for j in range(len(temp2)):
                temp2[j].strip()
            while '' in temp2:
                temp2.remove('')
            key = temp2[0] + '/' + temp1[1]
            dict_value[key.strip()] = temp2[1].strip()
            key = temp2[0] + '/' + temp1[2]
            dict_value[key.strip()] = temp2[2].strip()
            key = temp2[0] + '/' + temp1[3]
            dict_value[key.strip()] = temp2[3].strip()
        return dict_value
    def dut_get_show_accesssharemonitor_statistics(self,show_info):
        """
        Function:show access-share-monitor statistics回显解析函数
        CLI命令:show access-share-monitor statistics
        回显信息示例:
Ruijie#show access-share-monitor statistics 
Access-share monitor statistics:
        Monitor time: 2:29:20
        Monitor user capacity :
                available 60000
                license   65000(default 5000 and installed 60000)
                max       60000
        Online user : 1 (Max 1)
        Notify record counter : 0

ASME#
aaa accounting network default start-stop group radius
aaa accounting network webv1 start-stop group radius
aaa accounting network webv2 start-stop group radius
aaa accounting network webv2-2 start-stop group radius

Authorization method-list:

        Returns:
{'Access-share monitor statistics/Monitor user capacity /available': '60000'
'Access-share monitor statistics/Online user': '1 (Max 1)'
'Access-share monitor statistics/Monitor user capacity /max': '60000'
'Access-share monitor statistics/Notify record counter': '0'
'Access-share monitor statistics/Monitor time': '2:29:20'
'Access-share monitor statistics/Monitor user capacity /license': '65000(default 5000 and installed 60000)'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show access-share-monitor statistics | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        one_key = ''
        two_key = ''
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        length = len(show_info_split)
        for i in range(length):
            if re.match('\w', show_info_split[i]):
                one_key = show_info_split[i].strip(':')
            elif re.match('        \w', show_info_split[i]):
                if re.match('.*:$', show_info_split[i]):
                    two_key = show_info_split[i].strip().strip(':')
                else:
                    matchObj = re.match('(.*?):(.*)', show_info_split[i])
                    key = one_key + '/' + matchObj.group(1).strip()
                    dict_value[key] = matchObj.group(2).strip()
            elif re.match('                \w', show_info_split[i]):
                if re.match(' +(\w+) +(\d+.*)', show_info_split[i]):
                    matchObj = re.match(' +(\w+) +(\d+.*)', show_info_split[i])
                    key = one_key + '/' + two_key + '/' + matchObj.group(1).strip()
                    dict_value[key] = matchObj.group(2).strip()
            else:
                pass
        return dict_value
    def dut_get_show_sflow(self, show_info):
        """
        Function:show sflow回显解析函数
        CLI命令:show sflow
        回显信息示例:
RUIJIE-18010(config)#show sflow 
sflow datagram version 5
Global information:
Agent IP: NULL
sflow counter interval:30
sflow flow max-header:64
sflow sampling-rate:8192
Collector information:
ID   IP                                           Port  Size VPN                             
1    NULL                                         0     1400                                 
2    NULL                                         0     1400                                 
Port information
Interface                       CID       FID       Enable         
GigabitEthernet 3/1             0         0         Y              
RUIJIE-18010(config)#

        Returns:
{'GigabitEthernet 3/1/CID': '0'
'1/IP': 'NULL'
'sflow datagram version': '5'
'Agent IP': 'NULL'
'GigabitEthernet 3/1/FID': '0'
'2/Port': '0'
'1/Size VPN': '1400'
'GigabitEthernet 3/1/Enable': 'Y'
'2/IP': 'NULL'
'1/Port': '0'
'sflow counter interval': '30'
'sflow flow max-header': '64'
'sflow sampling-rate': '8192'
'Interface': ['GigabitEthernet 3/1'], '2/Size VPN': '1400'
'ID': ['1'
'2']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show sflow | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        one_key = ''
        value_list = []
        tag = 0
        length_list = []
        top_list = []
        top = ''
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        length = len(show_info_split)

        for i in range(length):
            if re.match('Global', show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break

        length = len(show_info_split)
        for i in range(length):
            if tag == 0:
                if re.match('Collecto|Port', show_info_split[i]):
                    length_list = []
                    value_list = []
                    if top != '':
                        dict_value[top] = top_list
                    tag = 1
                    top = ''
                    top_list = []
                    pass
                else:
                    if re.search(':', show_info_split[i]):
                        matchObj = re.match('(.*):(.*)', show_info_split[i])
                        dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
                    elif re.match('.*\w \d', show_info_split[i]):
                        matchObj = re.match('(.*\w) (\d)', show_info_split[i])
                        dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
            elif tag == 1:
                strS = show_info_split[i]
                Slen = len(strS)
                strS_split = strS.split(' ')
                while '' in strS_split:
                    strS_split.remove('')
                matchObj = re.match('\w+( +)\w+( +)\w+( +)', show_info_split[i])
                num1 = matchObj.group(1).count(' ') + len(strS_split[0])
                num2 = matchObj.group(2).count(' ') + len(strS_split[1])
                num3 = matchObj.group(3).count(' ') + len(strS_split[2])
                length_list.append(num1)
                length_list.append(num2)
                length_list.append(num3)
                value_list.append(show_info_split[i][0:num1].strip())
                value_list.append(show_info_split[i][num1:num1 + num2].strip())
                value_list.append(show_info_split[i][num1 + num2:num1 + num2 + num3].strip())
                value_list.append(show_info_split[i][num1 + num2 + num3:-1].strip())
                top = show_info_split[i][0:num1].strip()
                tag = 2
            elif tag == 2:
                if i + 1 < length:
                    if re.match('Port', show_info_split[i + 1]):
                        tag = 0
                top_list.append(show_info_split[i][0:num1].strip())
                key = show_info_split[i][0:length_list[0]].strip() + '/' + value_list[1]
                dict_value[key] = show_info_split[i][length_list[0]:length_list[0] + length_list[1]].strip()
                key = show_info_split[i][0:num1].strip() + '/' + value_list[2]
                dict_value[key] = show_info_split[i][
                                  length_list[0] + length_list[1]:length_list[0] + length_list[1] + length_list[
                                      2]].strip()
                key = show_info_split[i][0:num1].strip() + '/' + value_list[3]
                dict_value[key] = show_info_split[i][length_list[0] + length_list[1] + length_list[2]:-1].strip()
        dict_value[top] = top_list
        return dict_value
    def dut_get_show_lacp_summary(self, show_info):  # 定义函数，函数名由锐捷提供
        """
        Function:show lacp summary回显解析函数
        CLI命令:show lacp summary
        回显信息示例:
WS5708#show lacp summary 

System Id:32768, 5425.4826.1789

Flags:  S - Device is requesting Slow LACPDUs   F - Device is requesting Fast LACPDUs.
A - Device is in active mode.        P - Device is in passive mode.

Aggregate port 1:

Local information:
                                     LACP port       Oper    Port    Port
Port           Flags     State       Priority        Key     Number  State
---------------------------------------------------------------------------
Gi0/1          SA        susp        32768           0x1     0x1     0x45
Gi0/4          SA        down        32768           0x1     0x4     0x45

Partner information:
                         LACP port                  Oper    Port     Port
Port           Flags     Priority      Dev ID       Key     Number   State
--------------------------------------------------------------------------
Gi0/1          SP        0         0000.0000.0000   0x0     0x0      0x0
Gi0/4          SP        0         0000.0000.0000   0x0     0x0      0x0

Aggregate port 2:

Local information:
                                     LACP port       Oper    Port    Port
Port           Flags     State       Priority        Key     Number  State
---------------------------------------------------------------------------
Gi0/5          SA        down        32768           0x2     0x5     0x45

Partner information:
                         LACP port                  Oper    Port     Port
Port           Flags     Priority      Dev ID       Key     Number   State
--------------------------------------------------------------------------
Gi0/5          SP        0         0000.0000.0000   0x0     0x0      0x0
WS5708#

        Returns:
{"AP1/Local/Gi0/4/Port Number": "0x4"
"AP1/Partner/Gi0/4/Flags": "SP"
"AP1/Local/Gi0/4/Flags": "SA"
"AP2/Local/Gi0/5/Port State": "0x45"
"AP1/Local/Gi0/1/Flags": "SA"
"AP1/Partner/Gi0/1/Oper Key": "0x0"
"AP1/Local/Gi0/4/LACP port Priority": "32768"
"AP1/Partner/Gi0/1/Port State": "0x0"
"AP1/Local/Gi0/4/State": "down"
"AP2/Partner/Gi0/5/Port State": "0x0"
"AP2/Local/Gi0/5/Port Number": "0x5"
"AP1/Local/Gi0/1/Port State": "0x45"
"AP2/Local/Gi0/5/LACP port Priority": "32768"
"AP1/Local/Gi0/4/Port State": "0x45"
"AP2/Local/Gi0/5/Flags": "SA"
"AP1/Partner/Gi0/1/Dev ID": "0000.0000.0000"
"AP2/Partner/Gi0/5/Dev ID": "0000.0000.0000"
"AP2/Partner/Gi0/5/Port Number": "0x0"
"AP2/Partner/Gi0/5/Flags": "SP"
"AP1/Partner/Gi0/4/Port Number": "0x0"
"AP1/Local/Gi0/1/State": "susp"
"AP1/Partner/Gi0/4/Port State": "0x0"
"AP1/Partner/Gi0/4/Dev ID": "0000.0000.0000"
"AP1/Partner/Gi0/4/LACP port Priority": "0"
"AP1/Local/Gi0/1/Port Number": "0x1"
"AP2/Local/Gi0/5/State": "down"
"AP1/Local/Gi0/1/Oper Key": "0x1"
"System Id": ["32768"
"5425.4826.1789"], "AP1/Local/Gi0/1/LACP port Priority": "32768"
"AP1/Partner/Gi0/1/Port Number": "0x0"
"AP1/Partner/Gi0/4/Oper Key": "0x0"
"AP1/Local/Gi0/4/Oper Key": "0x1"
"AP2/Local/Gi0/5/Oper Key": "0x2"
"AP1/Partner/Gi0/1/Flags": "SP"
"AP2/Partner/Gi0/5/LACP port Priority": "0"
"AP1/Partner/Gi0/1/LACP port Priority": "0"
"AP2/Partner/Gi0/5/Oper Key": "0x0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show lacp summary | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}  # 定义字典
        templist = []
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])

        # 去除空行
        for i in range(len(show_info_split)):
            if not show_info_split[i].strip() == '':
                templist.append(show_info_split[i])
        fir = templist[0].split(':')
        list1 = fir[1].split(', ')
        dict_value[fir[0].strip()] = list1
        length = len(templist)
        for i in range(length):
            if re.match(r'^Aggregate',templist[i]):
                num = templist[i].split('t ')
                ap_num = num[1].strip(':')
                AP = 'AP'+str(ap_num)
                for j in range(i+1,length):
                    if re.match(r'^Aggregate',templist[j]):
                        break
                    if re.match(r'^Local',templist[j]):
                        key_1 = templist[j+2].split('  ')
                        while '' in key_1:
                            key_1.remove('')
                        key_1[3] = 'LACP port ' + key_1[3].strip()
                        key_1[4] = 'Oper ' + key_1[4].strip()
                        key_1[5] = 'Port ' + key_1[5].strip()
                        key_1[6] = 'Port ' + key_1[6].strip()
                    if re.match(r'^Local',templist[j]):
                        for k in range(j+4,length):
                            if re.match(r'^Partner', templist[k]):
                                break
                            te = templist[k].split('  ')
                            while '' in te:
                                te.remove('')
                            key_2 = AP + '/' + 'Local' + '/' + te[0].strip()
                            key_3 = key_2 + '/' + key_1[1].strip()
                            dict_value[key_3] = te[1].strip()
                            key_3 = key_2 + '/' + key_1[2].strip()
                            dict_value[key_3] = te[2].strip()
                            key_3 = key_2 + '/' + key_1[3].strip()
                            dict_value[key_3] = te[3].strip()
                            key_3 = key_2 + '/' + key_1[4].strip()
                            dict_value[key_3] = te[4].strip()
                            key_3 = key_2 + '/' + key_1[5].strip()
                            dict_value[key_3] = te[5].strip()
                            key_3 = key_2 + '/' + key_1[6].strip()
                            dict_value[key_3] = te[6].strip()

                    if re.match(r'^Partner', templist[j]):
                        key_1 = templist[j+2].split('  ')
                        while '' in key_1:
                            key_1.remove('')
                        key_1[2] = 'LACP port ' + key_1[2].strip()
                        key_1[4] = 'Oper ' + key_1[4].strip()
                        key_1[5] = 'Port ' + key_1[5].strip()
                        key_1[6] = 'Port ' + key_1[6].strip()
                    if re.match(r'^Partner', templist[j]):
                        for k in range(j+4, length):
                            te = templist[k].split('  ')
                            if re.match(r'^Aggre', templist[k].strip()):
                                break
                            while '' in te:
                                te.remove('')
                            key_2 = AP + '/' + 'Partner' + '/' + te[0].strip()
                            key_3 = key_2 + '/' + key_1[1].strip()
                            dict_value[key_3] = te[1].strip()
                            key_3 = key_2 + '/' + key_1[2].strip()
                            dict_value[key_3] = te[2].strip()
                            key_3 = key_2 + '/' + key_1[3].strip()
                            dict_value[key_3] = te[3].strip()
                            key_3 = key_2 + '/' + key_1[4].strip()
                            dict_value[key_3] = te[4].strip()
                            key_3 = key_2 + '/' + key_1[5].strip()
                            dict_value[key_3] = te[5].strip()
                            key_3 = key_2 + '/' + key_1[6].strip()
                            dict_value[key_3] = te[6].strip()
        return dict_value
        # show_info_56
    def dut_get_show_erps_rapsvlan_num(self,show_info):
        """
        Function:show erps raps-vlan <num>回显解析函数
        CLI命令:show erps raps-vlan <num>
        回显信息示例:
S6200-S#show erps raps-vlan 4028
-------------------------------------------
R-APS VLAN                  : 4028
Ring Status                 : Enabled
West Port                   : Te1/0/8      (Link Failure)
East Port                   : Te2/0/8      (Forwarding)
RPL Port                    : None
Protected VLANs             : ALL
RPL Owner                   : Disabled
Holdoff Time                : 0 milliseconds
Guard Time                  : 500 milliseconds
WTR Time                    : 2 minutes
Current Ring State          : protection
Associate R-APS VLAN        :

        Returns:
{"Guard Time": "500 milliseconds"
"RPL Owner": "Disabled"
"Ring Status": "Enabled"
"Associate R-APS VLAN": ""
"WTR Time": "2 minutes"
"East Port": "Te2/0/8      (Forwarding)"
"West Port": "Te1/0/8      (Link Failure)"
"Protected VLANs": "ALL"
"R-APS VLAN": "4028"
"Holdoff Time": "0 milliseconds"
"RPL Port": "None"
"Current Ring State": "protection"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show erps raps-vlan <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}  # 定义字典
        templist = []
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])

        # 去除空行
        for i in range(len(show_info_split)):
            if not show_info_split[i].strip() == '':
                templist.append(show_info_split[i])
        templist.remove(templist[0])
        for i in range(len(templist)):
            tem = templist[i].split(':')
            key = tem[0].strip()
            value = tem[1].strip()
            dict_value[key] = value
        return dict_value
    def dut_get_show_gvrp_configuration(self,show_info):
        """
        Function:show gvrp configuration回显解析函数
        CLI命令:show gvrp configuration
        回显信息示例:
Ruijie# show gvrp configuration
Global GVRP Configuration:
GVRP Feature:enabled
GVRP dynamic VLAN creation:enabled
Join Timers(ms):200
Join Timers(ms):600
Join Timers(ms):10000
Port based GVRP Configuration:
Port:GigabitEthernet 3/1 app mode:normal reg mode:normal
Port:GigabitEthernet 3/2 app mode:normal reg mode:normal
Port:GigabitEthernet 3/3 app mode:normal reg mode:normal
Port:GigabitEthernet 3/4 app mode:normal reg mode:normal
Port:GigabitEthernet 3/5 app mode:normal reg mode:normal
Port:GigabitEthernet 3/6 app mode:normal reg mode:normal
Port:GigabitEthernet 3/7 app mode:normal reg mode:normal
Port:GigabitEthernet 3/8 app mode:normal reg mode:normal
Port:GigabitEthernet 3/9 app mode:normal reg mode:normal
Port:GigabitEthernet 3/10 app mode:normal reg 
mode:normal
Port:GigabitEthernet 3/11 app mode:normal reg 
mode:normal
Port:GigabitEthernet 3/12 app mode:normal reg 
mode:normal

        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show gvrp configuration | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        value_title = "PORT"
        length_list = []

        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        length = len(dut_info_split)
        one_key = ''
        two_key = ''
        for i in range(length):
            if re.search(r'Global GVRP Configuration:', dut_info_split[i]):
                one_key = dut_info_split[i].strip(':')
                dut_info_split.remove(show_info_split[i])
                break
        for i in range(length):
            if re.match(r'GVRP Feature', dut_info_split[i]):
                matchObj01 = re.match('(GVRP Feature):(\w+)', dut_info_split[i])
                key01 = one_key + '/' + matchObj01.group(1).strip()
                dict_value[key01] = matchObj01.group(2)
                dut_info_split.remove(dut_info_split[i])
                break
        for i in range(length):
            if re.match(r'GVRP Dynamic VLAN Creation', dut_info_split[i]):
                matchObj02 = re.match('(GVRP Dynamic VLAN Creation):(\w+)', dut_info_split[i])
                key02 = one_key + '/' + matchObj02.group(1).strip()
                dict_value[key02] = matchObj02.group(2)
                dut_info_split.remove(dut_info_split[i])
                break
        for i in range(length):
            if re.match(r"Join Timers", dut_info_split[i]):
                matchObj03 = re.match('(Join Timers.*):(\w+)', dut_info_split[i])
                key03 = one_key + '/' + matchObj03.group(1).strip()
                dict_value[key03] = matchObj03.group(2)
                dut_info_split.remove(dut_info_split[i])
                break
        for i in range(length):
            if re.match(r'Leave Timers', dut_info_split[i]):
                matchObj04 = re.match('(Leave Timers.*):(\w+)', dut_info_split[i])
                key04 = one_key + '/' + matchObj04.group(1).strip()
                dict_value[key04] = matchObj04.group(2)
                dut_info_split.remove(dut_info_split[i])
                break
        for i in range(length):
            if re.match(r'Leaveall Timers', dut_info_split[i]):
                matchObj05 = re.match('(Leaveall Timers.*):(\w+)', dut_info_split[i])
                key05 = one_key + '/' + matchObj05.group(1).strip()
                dict_value[key05] = matchObj05.group(2)
                dut_info_split.remove(dut_info_split[i])
                break
        for i in range(length):
            if re.match(r'Port based GVRP Configuration:', dut_info_split[i]):
                two_key = dut_info_split[i].strip(':')
                dut_info_split.remove(show_info_split[i])
                break

        for i in range(len(dut_info_split)):
            if re.match(r'PORT', dut_info_split[i].strip()):
                temp1 = dut_info_split[i].split('  ')
                for i in range(len(temp1)):
                    temp1[i].strip()
                while '' in temp1:
                    temp1.remove('')

        for index in range(len(dut_info_split)):
            if re.match(r'^---', dut_info_split[index]):
                break
        for i in range(index + 1, len(dut_info_split)):
            temp2 = dut_info_split[i].split('  ')
            for i in range(len(temp2)):
                temp2[i].strip()
            while '' in temp2:
                temp2.remove('')
            key = two_key + temp2[0] + '/' + temp1[1]
            dict_value[key] = temp2[1]
            key = two_key + temp2[0] + '/' + temp1[2]
            dict_value[key] = temp2[2]

        return dict_value
    def dut_get_show_gvrp_statistics(self, show_info):
        """
        Function:show gvrp statistics <dutport>回显解析函数
        CLI命令:show gvrp statistics <dutport>
        回显信息示例:
Ruijie# show gvrp statistics gigabitethernet 1/1
Interface       GigabitEthernet 3/1
RecValidGvrpPdu         0
RecInvalidGvrpPdu       0
RecJoinEmpty    0
RecJoinIn       0
RecEmpty        0
RecLeaveEmpty   0
RecLeaveIn      0
RecLeaveAll     0
SentGvrpPdu     0
SentJoinEmpty   0
SentJoinIn      0
SentEmpty       0
SentLeaveEmpty  0
SentLeaveIn     0
SentLeaveAll    0
JoinIndicated   0
LeaveIndicated  0
JoinPropagated  0
LeavePropagated  0

        Returns:
{"JoinIndicated": "0"
"SentGvrpPdu": "0"
"RecLeaveIn": "0"
"RecEmpty": "0"
"RecValidGvrpPdu": "0"
"RecJoinIn": "0"
"SentJoinIn": "0"
"Interface_list": ["RecValidGvrpPdu"
"RecInvalidGvrpPdu"
"RecJoinEmpty"
"RecJoinIn"
"RecEmpty"
"RecLeaveEmpty"
"RecLeaveIn"
"RecLeaveAll"
"SentGvrpPdu"
"SentJoinEmpty"
"SentJoinIn"
"SentEmpty"
"SentLeaveEmpty"
"SentLeaveIn"
"SentLeaveAll"
"JoinIndicated"
"LeaveIndicated"
"JoinPropagated"
"LeavePropagated"], "SentEmpty": "0"
"LeaveIndicated": "0"
"SentLeaveAll": "0"
"LeavePropagated": "0"
"SentLeaveIn": "0"
"SentJoinEmpty": "0"
"RecJoinEmpty": "0"
"RecInvalidGvrpPdu": "0"
"RecLeaveAll": "0"
"SentLeaveEmpty": "0"
"JoinPropagated": "0"
"RecLeaveEmpty": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show gvrp statistics <dutport> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}  # 定义字典
        templist = []
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])

        # 去除空行
        for i in range(len(show_info_split)):
            if not show_info_split[i].strip() == '':
                templist.append(show_info_split[i])
        for i in range(len(templist)):
            tem = templist[i].split('  ')
            for te in range(len(tem)):
                tem[te].strip()
            while '' in tem:
                tem.remove('')
            key = tem[0].strip()
            value = tem[1].strip()
            dict_value[key] = value
        return dict_value
    def dut_get_show_accesssharemonitor_feature_rule_all(self,show_info):
        """
        Function:show access-share-monitor feature rule all回显解析函数
        CLI命令:show access-share-monitor feature rule all
        回显信息示例:
ASME(config)#show access-share-monitor feature rule all
Feature local version   :2018.02.05.1953
Feature expect version  :2018.02.05.1953
Feature expect md5      :
Feature expect rule num :78
Feature analy rule num  :78
Feature analy file      :success
Feature update state    :ready
ASME(config)#

        Returns:
{'Feature expect rule num': '78'
'Feature analy file': 'success'
'Feature local version': '2018.02.05.1953'
'Feature expect version': '2018.02.05.1953'
'Feature expect md5': ''
'Feature update state': 'ready'
'Feature analy rule num': '78'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show access-share-monitor feature rule all | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}  # 定义字典
        templist = []
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])

        # 去除空行
        for i in range(len(show_info_split)):
            if not show_info_split[i].strip() == '':
                templist.append(show_info_split[i])
        for i in range(len(templist)):
            tem = templist[i].split(':')
            key = tem[0].strip()
            value = tem[1].strip()
            dict_value[key] = value
        return dict_value
    def dut_get_show_httpupdate_info_version(self,show_info):
        """
        Function:show http-update info version回显解析函数
        CLI命令:show http-update info version
        回显信息示例:
ASME#show http-update info version
app-id             app-name                        version           
------ ------------------------------- ------------------------------
0      asme-feature                    2018.02.05.1953                
ASME#

        Returns:
{'0/app-name': 'asme-feature'
'0/version': '2018.02.05.1953'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show http-update info version | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}  # 定义字典
        templist = []
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])

        # 去除空行
        for i in range(len(show_info_split)):
            if not show_info_split[i].strip() == '':
                templist.append(show_info_split[i])

        for i in range(len(templist)):
            if re.match(r'^app',templist[i].strip()):
                tem = templist[i].split('   ')
                for j in range(len(tem)):
                    tem[j].strip()
                while '' in tem:
                    tem.remove('')
        templist.remove(templist[0])
        templist.remove(templist[0])
        for i in range(len(templist)):
            tem2 = templist[i].split('   ')
            for j in range(len(tem2)):
                tem2[j].strip()
            while '' in tem2:
                tem2.remove('')
            for j in range(len(tem2)):
                tem2[j].strip()
                key = tem2[0].strip() + '/' + tem[1].strip()
                dict_value[key] = tem2[1].strip()
                key = tem2[0].strip() + '/' + tem[2].strip()
                dict_value[key] = tem2[2].strip()
        return dict_value
    def dut_get_show_proxyarp(self,show_info):
        """
        Function:show proxy-arp回显解析函数
        CLI命令:show proxy-arp
        回显信息示例:
5848VAC#show proxy-arp 
total entry: 10
ip                      vid      mac                    interface               type
----------------        ----    ----------------        -------------           ----
10.1.1.10               10      0000.1100.0000          Gi1/0/5                 DYNAMIC
10.1.1.11               10      0000.1100.0001          Gi1/0/5                 DYNAMIC
10.1.1.13               10      0000.1100.0003          Gi1/0/5                 DYNAMIC
10.1.1.16               10      0000.1100.0006          Gi1/0/5                 DYNAMIC
10.1.1.17               10      0000.1100.0007          Gi1/0/5                 DYNAMIC
10.1.1.12               10      0000.1100.0002          Gi1/0/5                 DYNAMIC
10.1.1.15               10      0000.1100.0005          Gi1/0/5                 DYNAMIC
10.1.1.14               10      0000.1100.0004          Gi1/0/5                 DYNAMIC
10.1.1.18               10      0000.1100.0008          Gi1/0/5                 DYNAMIC
10.1.1.19               10      0000.1100.0009          Gi1/0/5                 DYNAMIC
5848VAC#

        Returns:
{'10.1.1.15/type': 'DYNAMIC'
'10.1.1.13/vid': '10'
'10.1.1.17/vid': '10'
'10.1.1.16/type': 'DYNAMIC'
'10.1.1.12/type': 'DYNAMIC'
'10.1.1.11/vid': '10'
'10.1.1.19/interface': 'Gi1/0/5'
'10.1.1.18/vid': '10'
'10.1.1.13/mac': '0000.1100.0003'
'10.1.1.18/mac': '0000.1100.0008'
'10.1.1.11/mac': '0000.1100.0001'
'10.1.1.18/interface': 'Gi1/0/5'
'10.1.1.15/vid': '10'
'10.1.1.10/interface': 'Gi1/0/5'
'10.1.1.19/vid': '10'
'10.1.1.12/interface': 'Gi1/0/5'
'10.1.1.17/interface': 'Gi1/0/5'
'10.1.1.14/vid': '10'
'10.1.1.19/mac': '0000.1100.0009'
'10.1.1.11/interface': 'Gi1/0/5'
'10.1.1.14/interface': 'Gi1/0/5'
'10.1.1.13/interface': 'Gi1/0/5'
'10.1.1.12/vid': '10'
'10.1.1.14/type': 'DYNAMIC'
'10.1.1.12/mac': '0000.1100.0002'
'10.1.1.11/type': 'DYNAMIC'
'10.1.1.16/interface': 'Gi1/0/5'
'10.1.1.17/type': 'DYNAMIC'
'10.1.1.17/mac': '0000.1100.0007'
'10.1.1.16/vid': '10'
'total entry': '10'
'10.1.1.10/vid': '10'
'10.1.1.15/interface': 'Gi1/0/5'
'10.1.1.16/mac': '0000.1100.0006'
'10.1.1.18/type': 'DYNAMIC'
'10.1.1.14/mac': '0000.1100.0004'
'10.1.1.10/mac': '0000.1100.0000'
'10.1.1.19/type': 'DYNAMIC'
'10.1.1.13/type': 'DYNAMIC'
'10.1.1.10/type': 'DYNAMIC'
'10.1.1.15/mac': '0000.1100.0005'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show proxy-arp | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}  # 定义字典
        templist = []
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])

        # 去除空行
        for i in range(len(show_info_split)):
            if not show_info_split[i].strip() == '':
                templist.append(show_info_split[i])

        tt1 = templist[0].split(':')
        dict_value[tt1[0].strip()] = tt1[1].strip()
        templist.remove(templist[0])
        templist.remove(templist[1])

        for i in range(len(templist)):
            if re.match(r'^ip', templist[i]):
                temp1 = templist[i].split('  ')
                for j in range(len(temp1)):
                    temp1[j].strip()
                while '' in temp1:
                    temp1.remove('')
        templist.remove(templist[0])
        for i in range(len(templist)):
            temp2 = templist[i].split('  ')
            for j in range(len(temp2)):
                temp2[j].strip()
            while '' in temp2:
                temp2.remove('')
            key = temp2[0].strip() + '/' + temp1[1].strip()
            dict_value[key] = temp2[1].strip()
            key = temp2[0].strip() + '/' + temp1[2].strip()
            dict_value[key] = temp2[2].strip()
            key = temp2[0].strip() + '/' + temp1[3].strip()
            dict_value[key] = temp2[3].strip()
            key = temp2[0].strip() + '/' + temp1[4].strip()
            dict_value[key] = temp2[4].strip()
        return dict_value
    def dut_get_show_proxyarp_statistics(self,show_info):
        """
        Function:show proxy-arp statistics回显解析函数
        CLI命令:show proxy-arp statistics
        回显信息示例:
5848VAC#show proxy-arp statistics 
Limit entry:       262144
Total entry:       10
Next aging time:   1258 seconds
Dropped packets:   0
Anti-check dropped packets: 0
5848VAC#

        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show proxy-arp statistics | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}  # 定义字典
        templist = []
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])

        # 去除空行
        for i in range(len(show_info_split)):
            if not show_info_split[i].strip() == '':
                templist.append(show_info_split[i])

        for i in range(len(templist)):
            temp1 = templist[i].split(':')
            for j in range(len(temp1)):
                temp1[j].strip()
            while '' in temp1:
                temp1.remove('')
            dict_value[temp1[0].strip()] = temp1[1].strip()

        return dict_value
    def dut_get_show_arp_detail(self,show_info):
        """
        Function:show arp detail回显解析函数
        CLI命令:show arp detail
        回显信息示例:
5848VAC#show arp detail
IP Address       MAC Address     Type     Age(min) Interface    Port       SubVlan   
10.1.1.10        0000.1100.0000  Static   --       VLAN 10      Gi1/0/5    10        
10.1.1.1         00d0.f999.933b  Local    --       VLAN 10      --         --        
10.1.1.11        0000.1100.0001  Dynamic  11       VLAN 10      Gi1/0/5    10        
10.1.1.12        0000.1100.0002  Dynamic  11       VLAN 10      Gi1/0/5    10        
10.1.1.13        0000.1100.0003  Dynamic  11       VLAN 10      Gi1/0/5    10        
10.1.1.14        0000.1100.0004  Dynamic  11       VLAN 10      Gi1/0/5    10        
10.1.1.15        0000.1100.0005  Dynamic  11       VLAN 10      Gi1/0/5    10        
10.1.1.16        0000.1100.0006  Dynamic  11       VLAN 10      Gi1/0/5    10        
10.1.1.17        0000.1100.0007  Dynamic  11       VLAN 10      Gi1/0/5    10        
10.1.1.18        0000.1100.0008  Dynamic  11       VLAN 10      Gi1/0/5    10        
10.1.1.19        0000.1100.0009  Dynamic  11       VLAN 10      Gi1/0/5    10
Total number of ARP entries: 11
5848VAC#

        Returns:
{'10.1.1.1/Age(min)': '--'
'10.1.1.14/Port': 'Gi1/0/5'
'10.1.1.15/Interface': 'VLAN 10'
'10.1.1.19/Port': 'Gi1/0/5'
'Total number of ARP entries': '11'
'10.1.1.10/MAC Address': '0000.1100.0000'
'10.1.1.18/Type': 'Dynamic'
'10.1.1.15/Age(min)': '11'
'10.1.1.10/Interface': 'VLAN 10'
'10.1.1.1/SubVlan': '--'
'10.1.1.18/MAC Address': '0000.1100.0008'
'10.1.1.15/MAC Address': '0000.1100.0005'
'10.1.1.12/Port': 'Gi1/0/5'
'10.1.1.18/Interface': 'VLAN 10'
'10.1.1.14/Age(min)': '11'
'10.1.1.13/Type': 'Dynamic'
'10.1.1.14/SubVlan': '10'
'10.1.1.11/Port': 'Gi1/0/5'
'10.1.1.18/Port': 'Gi1/0/5'
'10.1.1.17/Port': 'Gi1/0/5'
'10.1.1.11/Interface': 'VLAN 10'
'10.1.1.17/Age(min)': '11'
'10.1.1.12/Age(min)': '11'
'10.1.1.11/Type': 'Dynamic'
'10.1.1.16/Type': 'Dynamic'
'10.1.1.12/Type': 'Dynamic'
'10.1.1.10/Age(min)': '--'
'10.1.1.17/MAC Address': '0000.1100.0007'
'10.1.1.14/MAC Address': '0000.1100.0004'
'10.1.1.10/Port': 'Gi1/0/5'
'10.1.1.1/Interface': 'VLAN 10'
'10.1.1.14/Interface': 'VLAN 10'
'10.1.1.10/SubVlan': '10'
'10.1.1.18/SubVlan': '10'
'10.1.1.13/Interface': 'VLAN 10'
'10.1.1.13/Port': 'Gi1/0/5'
'10.1.1.13/Age(min)': '11'
'10.1.1.12/SubVlan': '10'
'10.1.1.15/Type': 'Dynamic'
'10.1.1.1/Port': '--'
'10.1.1.19/Age(min)': '11'
'10.1.1.17/SubVlan': '10'
'10.1.1.18/Age(min)': '11'
'10.1.1.12/Interface': 'VLAN 10'
'10.1.1.16/Port': 'Gi1/0/5'
'10.1.1.1/Type': 'Local'
'10.1.1.11/SubVlan': '10'
'10.1.1.19/MAC Address': '0000.1100.0009'
'10.1.1.11/Age(min)': '11'
'10.1.1.15/Port': 'Gi1/0/5'
'10.1.1.10/Type': 'Static'
'10.1.1.15/SubVlan': '10'
'IP Address_list': ['10.1.1.10'
'10.1.1.1'
'10.1.1.11'
'10.1.1.12'
'10.1.1.13'
'10.1.1.14'
'10.1.1.15'
'10.1.1.16'
'10.1.1.17'
'10.1.1.18'
'10.1.1.19'], '10.1.1.13/SubVlan': '10'
'10.1.1.16/SubVlan': '10'
'10.1.1.1/MAC Address': '00d0.f999.933b'
'10.1.1.11/MAC Address': '0000.1100.0001'
'10.1.1.13/MAC Address': '0000.1100.0003'
'10.1.1.14/Type': 'Dynamic'
'10.1.1.19/SubVlan': '10'
'10.1.1.19/Type': 'Dynamic'
'10.1.1.16/Interface': 'VLAN 10'
'10.1.1.17/Type': 'Dynamic'
'10.1.1.19/Interface': 'VLAN 10'
'10.1.1.16/MAC Address': '0000.1100.0006'
'10.1.1.17/Interface': 'VLAN 10'
'10.1.1.16/Age(min)': '11'
'10.1.1.12/MAC Address': '0000.1100.0002'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show arp detail | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        list_info =[]
        dict_value1 = {}
        for value in show_info_list:
            if "Total number" in value and ":" in value:
                list1 = value.split(":")
                dict_value1[list1[0].strip()] = list1[1].strip()
            elif re.match("Interface: (\d+)\s+Static: (\d+)\s+Dynamic: (\d+)\s+Trust: (\d+)",value.strip()):
                obj = re.match("Interface: (\d+)\s+Static: (\d+)\s+Dynamic: (\d+)\s+Trust: (\d+)",value.strip())
                dict_value1["Interface"] = obj.group(1)
                dict_value1["Static"] = obj.group(2)
                dict_value1["Dynamic"] = obj.group(3)
                dict_value1["Trust"] = obj.group(4)
            else:
                if "Age(min) Interface" in value:
                    value = value.replace("Age(min) Interface","Age(min)    Interface")
                # else:
                #     value = value.replace(" ","  ")
                list_info.append(value)
        show_info2 = "\n".join(list_info)
        dict_value2 = self.dut_show_autoget_blank_list(show_info2,"IP Address")

        return dict(dict_value1.items()+dict_value2.items())
    def dut_get_show_macaddresstable(self,show_info):
        """
        Function:show mac-address-table回显解析函数
        CLI命令:show mac-address-table
        回显信息示例:
5848VAC#show mac-address-table 
Vlan        MAC Address          Type     Interface                     
----------  -------------------- -------- ------------------------------
  10        0000.0200.0a00       STATIC   GigabitEthernet 1/0/5          
  10        0000.0200.0a01       DYNAMIC  GigabitEthernet 1/0/5          
  10        0000.0200.0a02       DYNAMIC  GigabitEthernet 1/0/5          
  10        0000.0200.0a03       DYNAMIC  GigabitEthernet 1/0/5          
  10        0000.0200.0a04       DYNAMIC  GigabitEthernet 1/0/5          
  10        0000.0200.0a05       DYNAMIC  GigabitEthernet 1/0/5          
  10        0000.0200.0a06       DYNAMIC  GigabitEthernet 1/0/5          
  10        0000.0200.0a07       DYNAMIC  GigabitEthernet 1/0/5          
  10        0000.0200.0a08       DYNAMIC  GigabitEthernet 1/0/5          
  10        0000.0200.0a09       DYNAMIC  GigabitEthernet 1/0/5          
5848VAC#

        Returns:
{'0000.0200.0a01/Type': 'DYNAMIC'
'0000.0200.0a08/Vlan': '10'
'0000.0200.0a08/Type': 'DYNAMIC'
'0000.0200.0a07/Type': 'DYNAMIC'
'0000.0200.0a04/Vlan': '10'
'0000.0200.0a03/Vlan': '10'
'/Type': ''
'0000.0200.0a06/Interface': 'GigabitEthernet 1/0/5'
'0000.0200.0a00/Interface': 'GigabitEthernet 1/0/5'
'0000.0200.0a07/Vlan': '10'
'0000.0200.0a07/Interface': 'GigabitEthernet 1/0/5'
'0000.0200.0a02/Interface': 'GigabitEthernet 1/0/5'
'0000.0200.0a05/Vlan': '10'
'0000.0200.0a01/Vlan': '10'
'0000.0200.0a00/Vlan': '10'
'0000.0200.0a04/Interface': 'GigabitEthernet 1/0/5'
'0000.0200.0a09/Vlan': '10'
'0000.0200.0a04/Type': 'DYNAMIC'
'0000.0200.0a05/Interface': 'GigabitEthernet 1/0/5'
'0000.0200.0a02/Vlan': '10'
'0000.0200.0a05/Type': 'DYNAMIC'
'0000.0200.0a02/Type': 'DYNAMIC'
'0000.0200.0a03/Interface': 'GigabitEthernet 1/0/5'
'/Interface': ''
'0000.0200.0a08/Interface': 'GigabitEthernet 1/0/5'
'0000.0200.0a03/Type': 'DYNAMIC'
'0000.0200.0a00/Type': 'STATIC'
'0000.0200.0a01/Interface': 'GigabitEthernet 1/0/5'
'MAC Address': ['0000.0200.0a00'
'0000.0200.0a01'
'0000.0200.0a02'
'0000.0200.0a03'
'0000.0200.0a04'
'0000.0200.0a05'
'0000.0200.0a06'
'0000.0200.0a07'
'0000.0200.0a08'
'0000.0200.0a09'
''], '/Vlan': '5848VAC#'
'0000.0200.0a06/Vlan': '10'
'0000.0200.0a09/Type': 'DYNAMIC'
'0000.0200.0a06/Type': 'DYNAMIC'
'0000.0200.0a09/Interface': 'GigabitEthernet 1/0/5'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mac-address-table | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="MAC Address"     #需要变参的地方
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if value_title in show_info_list_line[line_len_num]:              #***********
                table_1 = line_len_num
                break
        (whippletree_list_1,cut_del_1) = self.dut_show_autoget_whippletree(table_1,line_len,show_info_list_line)
        show_info_list_line.remove(show_info_list_line[cut_del_1])
        new_show_info_num = len(show_info_list_line)
        for line_len_num in range(0,new_show_info_num):
            if value_title in show_info_list_line[line_len_num]:              #***********
                table_3 = line_len_num
        dict_value1 = self.dut_show_autoget_form_show_mac(table_3,new_show_info_num,value_title,whippletree_list_1,show_info_list_line)
        return dict_value1
    def dut_get_show_ip_dhcp_bind(self,show_info):
        """
        Function:show ip dhcp binding回显解析函数
        CLI命令:show ip dhcp binding
        回显信息示例:
Ruijie(config)#show ip dhcp binding     

Total number of clients   : 2
Expired clients           : 1
Running clients           : 1

IP address        Hardware address       Lease expiration            Type
21.1.1.3          0000.003d.7225         000 days 21 hours 49 mins   Automatic
Ruijie(config)#

        Returns:
{"Expired clients": "1"
"mac_list": ["0000.003d.7225"], "Running clients": "1"
"0000.003d.7225/Type": "Automatic"
"0000.003d.7225/Lease expiration": "000 days 21 hours 49 mins"
"0000.003d.7225/IP address": "21.1.1.3"
"Total number of clients": "2"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip dhcp binding | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}  # 定义字典
        templist = []
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        # 去除空行
        for i in range(len(show_info_split)):
            if not show_info_split[i].strip() == '':
                templist.append(show_info_split[i])
        for i in range(len(templist)):
            te = templist[i].split(':')
            dict_value[te[0].strip()] = te[1].strip()

        return dict_value
    def dut_get_show_ntp_server(self, show_info):
        """
        Function:show ntp  server回显解析函数
        CLI命令:show ntp  server
        回显信息示例:
S29-11.X(config)#show ntp  server 
ntp-server                                source    keyid        prefer  version
----------------------------------------  --------  -----------  ------  -------
2.2.2.2                                   None      None         FALSE   3

        Returns:
{"2.2.2.2/keyid": "None"
"2.2.2.2/version": "3"
"2.2.2.2/source": "None"
"2.2.2.2/prefer": "FALSE"
"ntp-server_list": ["2.2.2.2"]}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ntp  server | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*config.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for i in range(len(show_info_split)):
            show_info_split[i].strip()
        while '' in show_info_split:
            show_info_split.remove('')
        len_list, cutd = self.dut_show_autoget_whippletree(0,len(show_info_split),show_info_list_line=show_info_split)
        show_info_split.remove(show_info_split[cutd])
        dict_value = self.dut_show_autoget_form(0,len(show_info_split),'ntp-server',len_list,show_info_split)
        return dict_value
    def dut_get_show_ip_dhcp_pool(self,show_info):
        """
        Function:show ip dhcp pool回显解析函数
        CLI命令:show ip dhcp pool
        回显信息示例:
S29-11.X(config)#show ip dhcp pool 
Pool  name       Total     Distributed  Remained   Percentage
------------  -----------  -----------  --------   -----------
te1           1            0            1          0.00000
020/0         0            0            0          0.00000
test1         2            0            2          0.00000
ct            0            0            0          0.00000
test2         2            0            2          0.00000
test3         2            0            2          0.00000
test4         2            0            2          0.00000
S29-11.X(config)#

        Returns:
{"test1/Remained": "2"
"te1/Remained": "1"
"test1/Total": "2"
"020/0/Distributed": "0"
"020/0/Total": "0"
"test4/Total": "2"
"test2/Total": "2"
"020/0/Remained": "0"
"test1/Percentage": "0.00000"
"ct/Distributed": "0"
"test3/Distributed": "0"
"test3/Total": "2"
"test3/Remained": "2"
"test4/Distributed": "0"
"test1/Distributed": "0"
"test3/Percentage": "0.00000"
"te1/Distributed": "0"
"ct/Percentage": "0.00000"
"020/0/Percentage": "0.00000"
"test2/Remained": "2"
"ct/Total": "0"
"te1/Percentage": "0.00000"
"test4/Percentage": "0.00000"
"test2/Distributed": "0"
"test2/Percentage": "0.00000"
"te1/Total": "1"
"test4/Remained": "2"
"ct/Remained": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip dhcp pool | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}  # 定义字典
        templist = []
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])

        # 去除空行
        for i in range(len(show_info_split)):
            if not show_info_split[i].strip() == '':
                templist.append(show_info_split[i])
        for i in range(len(templist)):
            if re.match(r'^Pool', templist[i].strip()):
                temp1 = templist[i].split('  ')
                for j in range(len(temp1)):
                    temp1[j].strip()
                while '' in temp1:
                    temp1.remove('')
                temp1[0] = temp1[0] + '  ' + temp1[1]
                temp1.remove(temp1[1])
        templist.remove(templist[0])
        templist.remove(templist[0])
        for i in range(len(templist)):
            temp2 = templist[i].split('  ')
            for j in range(len(temp2)):
                temp2[j].strip()
            while '' in temp2:
                temp2.remove('')
            key = temp2[0] + '/' + temp1[1].strip()
            dict_value[key] = temp2[1].strip()
            key = temp2[0] + '/' + temp1[2].strip()
            dict_value[key] = temp2[2].strip()
            key = temp2[0] + '/' + temp1[3].strip()
            dict_value[key] = temp2[3].strip()
            key = temp2[0] + '/' + temp1[4].strip()
            dict_value[key] = temp2[4].strip()

        return dict_value
    def dut_get_show_web_auth_parameter(self,show_info):
        """
        Function:show web-auth parameter回显解析函数
        CLI命令:show web-auth parameter
        回显信息示例:
S86#show web-auth parameter 
  session-limit: 255
  timeout:       3

        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show web-auth parameter | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}  # 定义字典
        templist = []
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])

        # 去除空行
        for i in range(len(show_info_split)):
            if not show_info_split[i].strip() == '':
                templist.append(show_info_split[i])

        for i in range(len(templist)):
            temp = templist[i].split(':')
            dict_value[temp[0].strip()] = temp[1].strip()

        return dict_value
    def dut_get_show_monitor(self,show_info):
        """
        Function:show monitor回显解析函数
        CLI命令:show monitor
        回显信息示例:
WS5708#show monitor 
sess-num: 1
span-type: LOCAL_SPAN
src-intf:
AggregatePort 1             frame-type RX Only
src-intf:
GigabitEthernet 0/8         frame-type TX Only
src-intf:
GigabitEthernet 0/7         frame-type Both
dest-intf:
GigabitEthernet 0/3        
mtp_switch on

        Returns:
{"sess-num 1/span-type": "LOCAL_SPAN"
"sess-num 1/src-intf": ["AggregatePort 1             frame-type RX Only"
"GigabitEthernet 0/8         frame-type TX Only"
"GigabitEthernet 0/7         frame-type Both"], "sess-num 1/mtp_switch": "on"
"sess-num 1/dest-intf": ["GigabitEthernet 0/3"]}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show monitor | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}  # 定义字典
        show_info_list = self.dut_get_start_show_info(show_info)
        src_list=[]
        dest_list=[]
        scr_flag = 0
        dest_flag = 0
        erspan_flag = 0
        sess_num = "0"
        for i in range(len(show_info_list)):
            if "sess-num:" in show_info_list[i] :
                list_1 =show_info_list[i].split(":")
                sess_num = list_1[1].strip()
                scr_flag = 0
                dest_flag = 0
                erspan_flag = 0
                dest_list = []
                src_list = []
            elif "span-type:" in show_info_list[i]:
                list_3 =show_info_list[i].split(":")
                dict_value["sess-num "+sess_num+"/"+list_3[0].strip()] = list_3[1].strip()
            elif "src-intf:" in show_info_list[i]:
                scr_flag = 1
            elif "dest-intf:" in show_info_list[i]:
                dict_value["sess-num "+sess_num+"/"+"src-intf"] =src_list
                scr_flag = 0
                dest_flag = 1
            elif "remote vlan" in show_info_list[i]:
                matchObj = re.match(r'(.*vlan)\s+(\d+)', show_info_list[i])
                dict_value["sess-num " + sess_num + "/" + matchObj.group(1).strip()] = matchObj.group(2).strip()
                dict_value["sess-num " + sess_num + "/" + "src-intf"] = src_list
                scr_flag = 0
                dict_value["sess-num " + sess_num + "/" + "dest-intf"] = dest_list
                dest_flag = 0
            elif "mtp" in show_info_list[i]:
                list_sw_on = show_info_list[i].strip().split()
                dict_value["sess-num " + sess_num + "/" + list_sw_on[0].strip()] = list_sw_on[1].strip()
                dict_value["sess-num " + sess_num + "/" + "src-intf"] = src_list
                scr_flag = 0
                dict_value["sess-num " + sess_num + "/" + "dest-intf"] = dest_list
                dest_flag = 0
            elif "Source vlans" in show_info_list[i] or "Filter vlans" in show_info_list[i]:
                dict_value["sess-num " + sess_num + "/" + re.match(r'(.*vlans).*', show_info_list[i]).group(1).strip()] = show_info_list[i+1].strip()
                dict_value["sess-num " + sess_num + "/" + "src-intf"] = src_list
                scr_flag = 0
                dict_value["sess-num " + sess_num + "/" + "dest-intf"] = dest_list
                dest_flag = 0
            elif "header-type" in show_info_list[i]:
                list_22 = show_info_list[i].split(":")
                dict_value["sess-num " + sess_num + "/" + list_22[0].strip()] = list_22[1].strip()
            elif "original ip address" in show_info_list[i]:
                if ":" in show_info_list[i]:
                    list_ori_ip = show_info_list[i].split(":")
                    dict_value["sess-num " + sess_num + "/" + list_ori_ip[0].strip()] = list_ori_ip[1].strip()
                dict_value["sess-num " + sess_num + "/" + "src-intf"] = src_list
                scr_flag = 0
                dict_value["sess-num " + sess_num + "/" + "dest-intf"] = dest_list
                dest_flag = 0
                erspan_flag = 1
            else:
                if scr_flag == 1 :
                    src_list.append(show_info_list[i].strip())
                    dict_value["sess-num " + sess_num + "/" + "src-intf"] = src_list
                if dest_flag == 1 :
                    dest_list.append(show_info_list[i].strip())
                    dict_value["sess-num " + sess_num + "/" + "dest-intf"] = dest_list
                if erspan_flag == 1 :
                    if ":" in show_info_list[i] :
                        list_erspan = show_info_list[i].split(":")
                        dict_value["sess-num " + sess_num + "/" + list_erspan[0].strip()] = list_erspan[1].strip()
        return dict_value
    def dut_get_show_usergroup_summary(self,show_info):
        """
        Function:show user-group summary回显解析函数
        CLI命令:show user-group summary
        回显信息示例:
PJ80-CORE(config)#show user-group summary 

Total 128 user-groups record in system.
Total 2 user-group users record in system.
----------------------------------------------------------------------------
 user numbers   source           user-group name                            
----------------------------------------------------------------------------
 2              Configured       1                               
 0              Configured       2                               
 0              Configured       3

        Returns:
{'3/user numbers': '0'
'3/source': 'Configured'
'2/source': 'Configured'
'1/source': 'Configured'
'2/user numbers': '0'
'user-group users record': '2'
'user-groups record': '128'
'1/user numbers': '2'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show user-group summary | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}  # 定义字典
        templist = []
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])

        # 去除空行
        for i in range(len(show_info_split)):
            if not show_info_split[i].strip() == '':
                templist.append(show_info_split[i])
        t1 = templist[0].split(' ',1)
        t2 = t1[1].split(' ')
        dict_value[t2[1]+' '+t2[2]] = t2[0]
        templist.remove(templist[0])
        t1 = templist[0].split(' ',1)
        t2 = t1[1].split(' ')
        dict_value[t2[1]+' '+t2[2]+' '+t2[3]] = t2[0]
        templist.remove(templist[0])
        templist.remove(templist[0])
        templist.remove(templist[1])
        for i in range(len(templist)):
            if re.match(r'^us', templist[i].strip()):
                temp1 = templist[i].split('  ')
                for j in range(len(temp1)):
                    temp1[j].strip()
                while '' in temp1:
                    temp1.remove('')
        templist.remove(templist[0])
        for i in range(len(templist)):
            temp2 = templist[i].split('  ')
            for j in range(len(temp2)):
                temp2[j].strip()
            while '' in temp2:
                temp2.remove('')
            key = (temp2[2] + '/' + temp1[0].strip()).strip()
            dict_value[key] = temp2[0].strip()
            key = (temp2[2] + '/' + temp1[1].strip()).strip()
            dict_value[key] = temp2[1].strip()
        return dict_value
    def dut_get_show_accesssharemonitor_feature_upgrade_history(self,show_info):
        """
        Function:show access-share-monitor feature upgrade history回显解析函数
        CLI命令:show access-share-monitor feature upgrade history
        回显信息示例:
ASME#show access-share-monitor feature upgrade history
time                 version              rule num   mode    result          md5
2018-02-07 15:22:49  2018.02.05.1953      78         start   success         
2018-02-07 15:25:45  2017.12.11.0001      65         local   success         
2018-02-07 15:41:00  2018.02.05.1953      78         http    success         79e5f45c7dfeae3eafaa5926c9ef9e95
2018-02-07 15:41:17  2017.12.24.0001      999999     local   success         
2018-02-07 15:41:33  2018.01.05.1558      93         local   success         
2018-02-07 15:41:35  2018.02.05.1953      78         http    success         79e5f45c7dfeae3eafaa5926c9ef9e95
2018-02-07 15:42:05  2018.01.05.1558      93         local   success         
2018-02-07 15:42:26  2018.02.05.1953      78         http    success         79e5f45c7dfeae3eafaa5926c9ef9e95
2018-02-07 15:42:27  2017.12.24.0001      999999     local   success         
2018-02-07 15:43:34  2018.01.05.1558      93         local   success         
2018-02-07 15:44:13  2018.02.05.1953      78         http    success         79e5f45c7dfeae3eafaa5926c9ef9e95
2018-02-07 15:44:47  2018.01.05.1558      93         local   success         
2018-02-07 15:44:48  2018.01.05.1558      93         local   same version    
2018-02-07 15:45:02  2018.02.05.1953      78         http    success         79e5f45c7dfeae3eafaa5926c9ef9e95
2018-02-07 23:28:07  2018.01.05.1558      93         local   success         
2018-02-07 23:28:50  2018.02.05.1953      78         http    success         79e5f45c7dfeae3eafaa5926c9ef9e95
2018-02-07 23:29:17  2018.01.05.1558      93         local   success         
2018-02-07 23:29:23  2018.02.05.1953      78         http    success         79e5f45c7dfeae3eafaa5926c9ef9e95
2018-02-07 23:30:21  2018.02.05.1953      78         start   success         
2018-02-07 23:33:34  2018.01.05.1558      93         local   success         
2018-02-07 23:34:17  2018.02.05.1953      78         http    success         79e5f45c7dfeae3eafaa5926c9ef9e95
2018-02-08 01:06:02  2018.01.05.1558      93         local   success         
2018-02-08 01:06:32  2017.12.24.0001      999999     local   success         
2018-02-08 01:06:33  2017.12.24.0001      999999     local   same version    
2018-02-08 01:12:29  2018.02.05.1953      78         http    success         79e5f45c7dfeae3eafaa5926c9ef9e95
2018-02-08 01:13:09  2017.12.24.0001      999999     local   success         
2018-02-08 01:13:09  2017.12.24.0001      999999     local   same version    
2018-02-08 01:13:31  2018.02.05.1953      78         http    success         79e5f45c7dfeae3eafaa5926c9ef9e95
2018-02-08 01:13:51  2017.12.24.0001      999999     local   success         
2018-02-08 01:13:51  2017.12.24.0001      999999     local   same version    
2018-02-08 01:14:17  2018.02.05.1953      78         http    success         79e5f45c7dfeae3eafaa5926c9ef9e95
2018-02-08 01:15:12  2017.12.24.0001      999999     local   success         
2018-02-08 01:15:26  2018.02.05.1953      78         http    success         79e5f45c7dfeae3eafaa5926c9ef9e95
2018-02-08 01:17:02  2017.12.24.0001      999999     local   success         
2018-02-08 01:17:18  2018.02.05.1953      78         http    success         79e5f45c7dfeae3eafaa5926c9ef9e95
2018-02-08 01:17:32  2017.12.24.0001      999999     local   success         
2018-02-08 01:17:39  2018.02.05.1953      78         http    success         79e5f45c7dfeae3eafaa5926c9ef9e95
2018-02-08 01:18:40  2017.12.24.0001      999999     local   success         
2018-02-08 01:19:39  2018.02.05.1953      78         http    incomplete      79e5f45c7dfeae3eafaa5926c9ef9e95
2018-02-08 01:20:28  2018.02.05.1953      78         http    analy failed    79e5f45c7dfeae3eafaa5926c9ef9e95
2018-02-08 09:47:26  2018.02.05.1953      78         start   success         
2018-02-08 10:04:28  2017.12.24.0001      999999     local   success         
2018-02-08 10:22:20  2018.02.05.1953      78         http    success         79e5f45c7dfeae3eafaa5926c9ef9e95
2018-02-08 10:22:48  2017.12.24.0001      999999     local   success         
2018-02-08 10:24:22  2018.02.05.1953      78         http    success         79e5f45c7dfeae3eafaa5926c9ef9e95
2018-02-08 10:58:56  2018.02.05.1953      78         start   success         
2018-02-08 11:01:26  2018.01.05.1558      93         local   success         
2018-02-08 11:07:31  2018.02.05.1953      78         http    success         79e5f45c7dfeae3eafaa5926c9ef9e95
2018-02-08 11:13:17  2017.12.24.0001      999999     local   success         
2018-02-08 11:23:10  2017.12.24.0001      999999     start   success         
2018-02-08 11:30:10  2018.02.05.1953      78         local   success         
2018-02-08 11:31:38  2018.02.05.1953      78         start   success         
2018-02-08 11:33:58  2017.12.24.0001      999999     local   success         
2018-02-08 11:37:03  2017.12.24.0001      999999     local   same version    
2018-02-08 11:50:26  2017.12.24.0001      999999     start   success         
2018-02-08 11:53:42  2017.12.24.0001      999999     start   success         
2018-02-08 11:59:08  2017.12.24.0001      999999     start   success         
2018-02-08 14:28:58  2017.12.24.0001      999999     start   success         
2018-02-08 14:31:31  2017.12.24.0001      999999     start   success         
2018-02-08 14:32:48  2017.12.24.0001      999999     start   success         
2018-02-08 14:36:45  2017.12.24.0001      999999     start   success         
2018-02-11 09:24:59  2017.12.24.0001      999999     start   success         
2018-02-23 13:24:28  2017.12.24.0001      999999     start   success         
2018-03-23 17:26:01  2017.12.24.0001      999999     start   success         
2018-03-26 10:23:00  2017.12.24.0001      999999     start   success         
2018-03-26 16:09:08  2017.12.24.0001      999999     start   success         
2018-03-27 19:25:41  2017.12.21.0001      76         local   success         
2018-03-27 19:30:24  2018.02.05.1953      78         local   success         
2018-03-28 14:07:00  2018.02.05.1953      78         start   success         
2018-03-31 20:51:54  2018.02.05.1953      78         start   success         
ASME#

        Returns:
{'2018-02-08 01:12:29/result': 'success'
'2018-02-08 01:19:39/rule num': '78'
'2018-02-07 15:42:26/md5': '79e5f45c7dfeae3eafaa5926c9ef9e95'
'2018-02-08 14:31:31/rule num': '999999'
'2018-02-07 15:41:35/result': 'success'
'2018-02-08 01:12:29/mode': 'http'
'2018-02-08 14:32:48/mode': 'start'
'2018-02-08 11:33:58/version': '2017.12.24.0001'
'2018-02-08 01:18:40/result': 'success'
'2018-02-07 23:28:07/version': '2018.01.05.1558'
'2018-03-26 16:09:08/rule num': '999999'
'2018-02-08 11:31:38/mode': 'start'
'2018-02-07 23:30:21/version': '2018.02.05.1953'
'2018-02-07 23:34:17/md5': '79e5f45c7dfeae3eafaa5926c9ef9e95'
'2018-02-08 01:17:18/md5': '79e5f45c7dfeae3eafaa5926c9ef9e95'
'2018-02-08 14:28:58/mode': 'start'
'2018-02-07 15:42:27/mode': 'local'
'2018-02-08 01:17:39/version': '2018.02.05.1953'
'2018-02-11 09:24:59/md5': ''
'2018-02-08 01:06:32/result': 'success'
'2018-02-08 01:06:32/rule num': '999999'
'2018-02-08 14:31:31/md5': ''
'2018-02-08 11:13:17/version': '2017.12.24.0001'
'2018-02-08 01:18:40/rule num': '999999'
'2018-02-07 23:30:21/result': 'success'
'2018-02-11 09:24:59/result': 'success'
'time_list': ['2018-02-07 15:22:49'
'2018-02-07 15:25:45'
'2018-02-07 15:41:00'
'2018-02-07 15:41:17'
'2018-02-07 15:41:33'
'2018-02-07 15:41:35'
'2018-02-07 15:42:05'
'2018-02-07 15:42:26'
'2018-02-07 15:42:27'
'2018-02-07 15:43:34'
'2018-02-07 15:44:13'
'2018-02-07 15:44:47'
'2018-02-07 15:44:48'
'2018-02-07 15:45:02'
'2018-02-07 23:28:07'
'2018-02-07 23:28:50'
'2018-02-07 23:29:17'
'2018-02-07 23:29:23'
'2018-02-07 23:30:21'
'2018-02-07 23:33:34'
'2018-02-07 23:34:17'
'2018-02-08 01:06:02'
'2018-02-08 01:06:32'
'2018-02-08 01:06:33'
'2018-02-08 01:12:29'
'2018-02-08 01:13:09'
'2018-02-08 01:13:09'
'2018-02-08 01:13:31'
'2018-02-08 01:13:51'
'2018-02-08 01:13:51'
'2018-02-08 01:14:17'
'2018-02-08 01:15:12'
'2018-02-08 01:15:26'
'2018-02-08 01:17:02'
'2018-02-08 01:17:18'
'2018-02-08 01:17:32'
'2018-02-08 01:17:39'
'2018-02-08 01:18:40'
'2018-02-08 01:19:39'
'2018-02-08 01:20:28'
'2018-02-08 09:47:26'
'2018-02-08 10:04:28'
'2018-02-08 10:22:20'
'2018-02-08 10:22:48'
'2018-02-08 10:24:22'
'2018-02-08 10:58:56'
'2018-02-08 11:01:26'
'2018-02-08 11:07:31'
'2018-02-08 11:13:17'
'2018-02-08 11:23:10'
'2018-02-08 11:30:10'
'2018-02-08 11:31:38'
'2018-02-08 11:33:58'
'2018-02-08 11:37:03'
'2018-02-08 11:50:26'
'2018-02-08 11:53:42'
'2018-02-08 11:59:08'
'2018-02-08 14:28:58'
'2018-02-08 14:31:31'
'2018-02-08 14:32:48'
'2018-02-08 14:36:45'
'2018-02-11 09:24:59'
'2018-02-23 13:24:28'
'2018-03-23 17:26:01'
'2018-03-26 10:23:00'
'2018-03-26 16:09:08'
'2018-03-27 19:25:41'
'2018-03-27 19:30:24'
'2018-03-28 14:07:00'
'2018-03-31 20:51:54'], '2018-02-07 15:45:02/mode': 'http'
'2018-02-08 01:17:02/mode': 'local'
'2018-02-08 01:13:09/result': 'same version'
'2018-02-08 11:23:10/result': 'success'
'2018-02-08 14:32:48/rule num': '999999'
'2018-02-08 11:53:42/result': 'success'
'2018-02-08 01:14:17/version': '2018.02.05.1953'
'2018-03-26 16:09:08/result': 'success'
'2018-02-23 13:24:28/result': 'success'
'2018-02-08 11:01:26/md5': ''
'2018-02-08 11:07:31/md5': '79e5f45c7dfeae3eafaa5926c9ef9e95'
'2018-02-08 01:14:17/md5': '79e5f45c7dfeae3eafaa5926c9ef9e95'
'2018-03-31 20:51:54/version': '2018.02.05.1953'
'2018-02-07 23:29:23/result': 'success'
'2018-02-07 15:44:47/rule num': '93'
'2018-02-23 13:24:28/md5': ''
'2018-02-07 15:45:02/rule num': '78'
'2018-02-07 15:41:00/result': 'success'
'2018-02-08 01:18:40/mode': 'local'
'2018-02-07 23:30:21/rule num': '78'
'2018-02-08 01:20:28/mode': 'http'
'2018-02-08 09:47:26/mode': 'start'
'2018-02-08 11:37:03/mode': 'local'
'2018-02-08 11:59:08/version': '2017.12.24.0001'
'2018-02-07 15:44:47/result': 'success'
'2018-02-07 23:34:17/version': '2018.02.05.1953'
'2018-03-28 14:07:00/md5': ''
'2018-03-28 14:07:00/version': '2018.02.05.1953'
'2018-02-08 01:15:26/result': 'success'
'2018-03-27 19:25:41/mode': 'local'
'2018-02-07 23:29:17/md5': ''
'2018-02-08 10:22:48/rule num': '999999'
'2018-02-08 11:07:31/result': 'success'
'2018-02-07 15:42:26/version': '2018.02.05.1953'
'2018-03-27 19:30:24/mode': 'local'
'2018-02-08 01:13:51/md5': ''
'2018-03-23 17:26:01/result': 'success'
'2018-02-07 15:22:49/version': '2018.02.05.1953'
'2018-02-08 01:13:51/result': 'same version'
'2018-02-08 11:23:10/md5': ''
'2018-02-08 11:33:58/md5': ''
'2018-02-07 23:33:34/rule num': '93'
'2018-02-07 23:28:50/rule num': '78'
'2018-02-08 01:06:33/mode': 'local'
'2018-02-07 23:33:34/mode': 'local'
'2018-02-07 23:29:23/mode': 'http'
'2018-02-08 11:01:26/mode': 'local'
'2018-02-07 15:45:02/result': 'success'
'2018-03-23 17:26:01/version': '2017.12.24.0001'
'2018-02-08 01:14:17/result': 'success'
'2018-02-08 01:06:02/version': '2018.01.05.1558'
'2018-02-07 23:30:21/md5': ''
'2018-02-08 10:22:48/result': 'success'
'2018-02-08 10:24:22/md5': '79e5f45c7dfeae3eafaa5926c9ef9e95'
'2018-02-23 13:24:28/mode': 'start'
'2018-02-08 10:22:20/rule num': '78'
'2018-02-08 10:24:22/result': 'success'
'2018-02-07 15:42:05/mode': 'local'
'2018-02-07 15:44:47/mode': 'local'
'2018-02-07 23:29:17/version': '2018.01.05.1558'
'2018-02-08 11:23:10/mode': 'start'
'2018-02-08 01:13:31/rule num': '78'
'2018-03-28 14:07:00/result': 'success'
'2018-02-07 15:41:00/md5': '79e5f45c7dfeae3eafaa5926c9ef9e95'
'2018-03-26 16:09:08/md5': ''
'2018-03-27 19:30:24/result': 'success'
'2018-02-08 01:17:18/result': 'success'
'2018-02-07 15:41:35/rule num': '78'
'2018-02-08 01:06:32/version': '2017.12.24.0001'
'2018-02-07 15:42:26/rule num': '78'
'2018-02-07 15:41:17/version': '2017.12.24.0001'
'2018-02-07 23:34:17/result': 'success'
'2018-02-08 01:13:31/md5': '79e5f45c7dfeae3eafaa5926c9ef9e95'
'2018-02-08 11:37:03/result': 'same version'
'2018-02-07 15:42:27/result': 'success'
'2018-02-07 23:28:07/md5': ''
'2018-02-07 15:44:13/result': 'success'
'2018-02-08 09:47:26/result': 'success'
'2018-02-07 15:41:33/mode': 'local'
'2018-02-07 15:43:34/result': 'success'
'2018-02-07 15:25:45/rule num': '65'
'2018-02-08 10:24:22/version': '2018.02.05.1953'
'2018-02-07 23:29:23/version': '2018.02.05.1953'
'2018-02-08 11:23:10/rule num': '999999'
'2018-02-07 15:41:17/result': 'success'
'2018-02-07 23:28:07/result': 'success'
'2018-02-08 14:36:45/result': 'success'
'2018-02-07 15:43:34/mode': 'local'
'2018-02-07 23:29:23/rule num': '78'
'2018-02-07 15:22:49/result': 'success'
'2018-02-08 10:22:48/version': '2017.12.24.0001'
'2018-02-07 15:41:33/version': '2018.01.05.1558'
'2018-02-07 15:44:47/version': '2018.01.05.1558'
'2018-02-07 15:43:34/version': '2018.01.05.1558'
'2018-02-07 15:42:05/version': '2018.01.05.1558'
'2018-02-08 14:36:45/version': '2017.12.24.0001'
'2018-02-07 15:41:33/rule num': '93'
'2018-02-08 01:15:12/version': '2017.12.24.0001'
'2018-02-07 15:41:17/rule num': '999999'
'2018-02-08 10:22:48/mode': 'local'
'2018-02-08 14:36:45/mode': 'start'
'2018-02-11 09:24:59/rule num': '999999'
'2018-02-08 01:17:18/version': '2018.02.05.1953'
'2018-02-07 15:42:26/result': 'success'
'2018-03-31 20:51:54/mode': 'start'
'2018-02-08 10:58:56/mode': 'start'
'2018-03-31 20:51:54/result': 'success'
'2018-02-08 01:17:02/result': 'success'
'2018-02-08 01:06:02/result': 'success'
'2018-02-08 11:59:08/rule num': '999999'
'2018-02-07 15:41:35/md5': '79e5f45c7dfeae3eafaa5926c9ef9e95'
'2018-02-08 01:19:39/result': 'incomplete'
'2018-02-08 01:17:02/rule num': '999999'
'2018-02-08 10:04:28/result': 'success'
'2018-02-08 01:12:29/rule num': '78'
'2018-02-08 11:50:26/version': '2017.12.24.0001'
'2018-02-08 01:13:09/version': '2017.12.24.0001'
'2018-02-08 01:19:39/mode': 'http'
'2018-02-07 15:42:26/mode': 'http'
'2018-02-08 01:17:18/mode': 'http'
'2018-02-07 23:33:34/version': '2018.01.05.1558'
'2018-02-08 14:31:31/result': 'success'
'2018-02-07 15:41:00/version': '2018.02.05.1953'
'2018-02-08 11:13:17/md5': ''
'2018-02-08 01:06:32/mode': 'local'
'2018-02-07 23:28:50/version': '2018.02.05.1953'
'2018-02-08 09:47:26/md5': ''
'2018-02-08 14:31:31/version': '2017.12.24.0001'
'2018-02-08 14:32:48/md5': ''
'2018-02-07 15:42:27/rule num': '999999'
'2018-02-08 11:50:26/mode': 'start'
'2018-02-08 01:17:02/version': '2017.12.24.0001'
'2018-02-08 11:37:03/rule num': '999999'
'2018-02-08 11:53:42/mode': 'start'
'2018-02-08 10:22:48/md5': ''
'2018-02-08 11:01:26/rule num': '93'
'2018-02-08 01:20:28/version': '2018.02.05.1953'
'2018-02-07 15:41:33/result': 'success'
'2018-03-31 20:51:54/md5': ''
'2018-02-08 11:53:42/rule num': '999999'
'2018-02-08 01:15:12/rule num': '999999'
'2018-02-08 01:12:29/md5': '79e5f45c7dfeae3eafaa5926c9ef9e95'
'2018-02-07 23:34:17/rule num': '78'
'2018-02-08 11:53:42/md5': ''
'2018-03-26 16:09:08/mode': 'start'
'2018-02-07 15:22:49/mode': 'start'
'2018-03-26 10:23:00/mode': 'start'
'2018-02-08 11:31:38/result': 'success'
'2018-03-27 19:30:24/rule num': '78'
'2018-02-08 01:17:18/rule num': '78'
'2018-02-08 14:32:48/version': '2017.12.24.0001'
'2018-02-08 01:17:32/version': '2017.12.24.0001'
'2018-02-07 15:41:00/rule num': '78'
'2018-02-07 23:29:17/rule num': '93'
'2018-02-08 01:18:40/md5': ''
'2018-02-08 01:15:26/version': '2018.02.05.1953'
'2018-02-08 01:06:33/md5': ''
'2018-03-31 20:51:54/rule num': '78'
'2018-02-08 01:15:12/result': 'success'
'2018-02-07 15:44:13/mode': 'http'
'2018-02-07 15:41:33/md5': ''
'2018-02-08 10:58:56/version': '2018.02.05.1953'
'2018-02-08 01:14:17/mode': 'http'
'2018-02-08 10:22:20/version': '2018.02.05.1953'
'2018-02-08 01:17:32/result': 'success'
'2018-02-07 23:28:07/mode': 'local'
'2018-02-08 14:28:58/result': 'success'
'2018-02-08 01:12:29/version': '2018.02.05.1953'
'2018-02-08 10:58:56/result': 'success'
'2018-03-23 17:26:01/mode': 'start'
'2018-02-07 15:41:35/mode': 'http'
'2018-02-08 10:04:28/version': '2017.12.24.0001'
'2018-02-07 15:41:17/md5': ''
'2018-02-07 15:45:02/version': '2018.02.05.1953'
'2018-02-08 01:13:09/rule num': '999999'
'2018-02-08 11:53:42/version': '2017.12.24.0001'
'2018-02-08 01:13:31/result': 'success'
'2018-02-08 01:20:28/rule num': '78'
'2018-02-07 23:28:50/md5': '79e5f45c7dfeae3eafaa5926c9ef9e95'
'2018-02-07 15:41:35/version': '2018.02.05.1953'
'2018-02-07 15:44:48/md5': ''
'2018-02-08 01:17:32/mode': 'local'
'2018-02-08 09:47:26/rule num': '78'
'2018-02-07 23:29:17/result': 'success'
'2018-02-08 01:17:32/rule num': '999999'
'2018-02-07 23:28:07/rule num': '93'
'2018-02-08 10:22:20/md5': '79e5f45c7dfeae3eafaa5926c9ef9e95'
'2018-02-07 15:44:13/rule num': '78'
'2018-02-07 15:25:45/md5': ''
'2018-02-08 10:04:28/rule num': '999999'
'2018-02-08 11:30:10/mode': 'local'
'2018-02-08 01:15:12/md5': ''
'2018-02-07 15:42:05/result': 'success'
'2018-02-08 01:13:51/version': '2017.12.24.0001'
'2018-02-08 01:13:09/mode': 'local'
'2018-02-08 01:15:26/md5': '79e5f45c7dfeae3eafaa5926c9ef9e95'
'2018-03-26 10:23:00/version': '2017.12.24.0001'
'2018-02-11 09:24:59/mode': 'start'
'2018-03-26 16:09:08/version': '2017.12.24.0001'
'2018-02-08 01:06:33/result': 'same version'
'2018-02-08 01:14:17/rule num': '78'
'2018-02-08 14:31:31/mode': 'start'
'2018-02-07 23:30:21/mode': 'start'
'2018-02-08 11:01:26/result': 'success'
'2018-03-27 19:25:41/rule num': '76'
'2018-02-07 23:33:34/md5': ''
'2018-02-08 01:17:32/md5': ''
'2018-03-26 10:23:00/result': 'success'
'2018-02-08 11:31:38/md5': ''
'2018-02-08 01:19:39/version': '2018.02.05.1953'
'2018-02-08 11:31:38/rule num': '78'
'2018-02-07 15:44:48/rule num': '93'
'2018-02-07 23:33:34/result': 'success'
'2018-03-28 14:07:00/rule num': '78'
'2018-02-08 01:17:39/md5': '79e5f45c7dfeae3eafaa5926c9ef9e95'
'2018-02-08 01:13:51/rule num': '999999'
'2018-02-08 11:13:17/mode': 'local'
'2018-02-08 01:15:26/rule num': '78'
'2018-03-27 19:30:24/version': '2018.02.05.1953'
'2018-02-07 23:29:17/mode': 'local'
'2018-02-08 01:13:51/mode': 'local'
'2018-02-08 01:13:09/md5': ''
'2018-02-07 15:44:48/mode': 'local'
'2018-02-08 11:30:10/result': 'success'
'2018-03-26 10:23:00/md5': ''
'2018-02-08 01:15:12/mode': 'local'
'2018-02-08 01:17:39/rule num': '78'
'2018-02-08 11:30:10/rule num': '78'
'2018-02-08 10:58:56/rule num': '78'
'2018-02-08 11:33:58/result': 'success'
'2018-02-08 01:20:28/result': 'analy failed'
'2018-02-07 15:43:34/md5': ''
'2018-02-07 23:29:23/md5': '79e5f45c7dfeae3eafaa5926c9ef9e95'
'2018-02-08 10:22:20/result': 'success'
'2018-02-08 11:59:08/md5': ''
'2018-02-08 10:24:22/rule num': '78'
'2018-02-08 11:50:26/md5': ''
'2018-02-08 14:28:58/rule num': '999999'
'2018-02-08 11:30:10/version': '2018.02.05.1953'
'2018-02-08 11:37:03/md5': ''
'2018-02-08 11:59:08/result': 'success'
'2018-02-08 10:04:28/md5': ''
'2018-02-08 11:31:38/version': '2018.02.05.1953'
'2018-02-08 01:20:28/md5': '79e5f45c7dfeae3eafaa5926c9ef9e95'
'2018-02-07 15:44:13/md5': '79e5f45c7dfeae3eafaa5926c9ef9e95'
'2018-03-26 10:23:00/rule num': '999999'
'2018-02-07 15:44:47/md5': ''
'2018-02-08 01:06:02/rule num': '93'
'2018-02-08 10:22:20/mode': 'http'
'2018-02-08 10:04:28/mode': 'local'
'2018-02-08 01:15:26/mode': 'http'
'2018-02-08 11:07:31/version': '2018.02.05.1953'
'2018-03-27 19:25:41/md5': ''
'2018-02-08 14:28:58/md5': ''
'2018-03-23 17:26:01/rule num': '999999'
'2018-02-08 14:32:48/result': 'success'
'2018-02-07 15:44:13/version': '2018.02.05.1953'
'2018-02-08 11:30:10/md5': ''
'2018-02-08 01:17:02/md5': ''
'2018-02-07 15:45:02/md5': '79e5f45c7dfeae3eafaa5926c9ef9e95'
'2018-03-27 19:30:24/md5': ''
'2018-02-07 15:43:34/rule num': '93'
'2018-02-07 15:22:49/rule num': '78'
'2018-02-07 15:22:49/md5': ''
'2018-02-08 11:50:26/rule num': '999999'
'2018-02-23 13:24:28/rule num': '999999'
'2018-02-08 01:19:39/md5': '79e5f45c7dfeae3eafaa5926c9ef9e95'
'2018-02-07 15:41:00/mode': 'http'
'2018-03-27 19:25:41/version': '2017.12.21.0001'
'2018-03-28 14:07:00/mode': 'start'
'2018-02-08 10:58:56/md5': ''
'2018-02-07 15:44:48/version': '2018.01.05.1558'
'2018-02-07 23:28:50/result': 'success'
'2018-02-11 09:24:59/version': '2017.12.24.0001'
'2018-02-07 15:42:27/version': '2017.12.24.0001'
'2018-03-23 17:26:01/md5': ''
'2018-02-08 01:06:33/rule num': '999999'
'2018-02-07 23:28:50/mode': 'http'
'2018-02-08 11:07:31/mode': 'http'
'2018-02-08 11:50:26/result': 'success'
'2018-02-08 01:06:02/md5': ''
'2018-02-08 14:36:45/md5': ''
'2018-02-08 11:23:10/version': '2017.12.24.0001'
'2018-02-07 15:42:05/md5': ''
'2018-02-08 11:37:03/version': '2017.12.24.0001'
'2018-02-08 14:28:58/version': '2017.12.24.0001'
'2018-02-08 01:18:40/version': '2017.12.24.0001'
'2018-02-08 01:06:02/mode': 'local'
'2018-02-08 11:13:17/rule num': '999999'
'2018-02-08 01:06:33/version': '2017.12.24.0001'
'2018-02-08 11:01:26/version': '2018.01.05.1558'
'2018-02-23 13:24:28/version': '2017.12.24.0001'
'2018-02-07 15:44:48/result': 'same version'
'2018-02-08 11:33:58/rule num': '999999'
'2018-02-07 15:42:05/rule num': '93'
'2018-02-07 23:34:17/mode': 'http'
'2018-02-07 15:41:17/mode': 'local'
'2018-02-08 01:13:31/version': '2018.02.05.1953'
'2018-02-07 15:25:45/result': 'success'
'2018-03-27 19:25:41/result': 'success'
'2018-02-08 11:07:31/rule num': '78'
'2018-02-08 10:24:22/mode': 'http'
'2018-02-08 11:59:08/mode': 'start'
'2018-02-08 09:47:26/version': '2018.02.05.1953'
'2018-02-07 15:42:27/md5': ''
'2018-02-07 15:25:45/mode': 'local'
'2018-02-08 01:17:39/result': 'success'
'2018-02-08 14:36:45/rule num': '999999'
'2018-02-07 15:25:45/version': '2017.12.11.0001'
'2018-02-08 01:17:39/mode': 'http'
'2018-02-08 11:13:17/result': 'success'
'2018-02-08 11:33:58/mode': 'local'
'2018-02-08 01:13:31/mode': 'http'
'2018-02-08 01:06:32/md5': ''}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show access-share-monitor feature upgrade history | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title = 'time'
        length_list = []
        dict_value = {}
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        while '' in dut_info_split:
            dut_info_split.remove('')
        length = len(dut_info_split)
        for i in range(length):
            if re.match('time', dut_info_split[i]):
                line_split = dut_info_split[i].split(' ')
                sum = 0
                space_length_list = []
                word_lenggth_list = []
                for j in range(len(line_split)):
                    if j == 0:
                        pass
                    else:
                        if line_split[j] != '':
                            space_length_list.append(sum + 1)
                            sum = 0
                        else:
                            sum = sum + 1
                while '' in line_split:
                    line_split.remove('')
                for j in line_split:
                    word_lenggth_list.append(len(j))
                for j in range(len(space_length_list)):
                    if j==2:
                        length_list.append(word_lenggth_list[j] + space_length_list[j]+word_lenggth_list[j+1] + space_length_list[j+1])
                    elif j==3:pass
                    else:
                        length_list.append(word_lenggth_list[j] + space_length_list[j])
                length_list.append(32)
                break
        length_list_len = len(length_list)
        length = len(dut_info_split)
        time_list = []
        for i in range(length):
            sight = 0
            sight_sum = 0
            list_len = []
            for j in range(length_list_len):
                sight_sum = sight_sum + int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.strip()
                list_len.append(row_value)
            if list_len[0] == value_title:
                title = list_len
            elif list_len[0] != value_title:
                time_list.append(list_len[0])
                for s in range(1, length_list_len):
                    key_name = '%s/%s' % (list_len[0], title[s])
                    dict_value[key_name] = list_len[s].strip()
            dict_value['time_list'] = time_list
        return dict_value
    def dut_get_show_interface_vlan_num(self,show_info):
        """
        Function:show interface vlan <num>回显解析函数
        CLI命令:show interface vlan <num>
        回显信息示例:
S57H_2013(config)#show interface vlan 1000
    Index(dec):5096 (hex):13e8
    VLAN 1000 is UP  , line protocol is UP    
      Hardware is VLAN, address is 00d0.f822.3553 (bia 00d0.f822.3553)
      Interface address is: 12.1.1.1/24
      ARP type: ARPA, ARP Timeout: 3600 seconds
      Interface IPv6 address is:
        12::1/64
        fe80::2d0:f8ff:fe22:3553/64
      MTU 1500 bytes, BW 1000000 Kbit
      Encapsulation protocol is Ethernet-II, loopback not set
      Keepalive interval is 10 sec , set
      Carrier delay is 2 sec
      IPv4 statistics:
       10 seconds input rate 4455942 bits/sec, 4351 packets/sec
       10 seconds output rate 0 bits/sec, 0 packets/sec
        605748 packets input, 77535744 bytes
        0 packets output, 0 bytes
      IPv6 statistics:
       10 seconds input rate 0 bits/sec, 0 packets/sec
       10 seconds output rate 10612645 bits/sec, 8963 packets/sec
        2 packets input, 172 bytes
        645696 packets output, 95562784 bytes
      Rxload is 0/255, Txload is 0/255
S57H_2013(config)#

        Returns:
{'Txload': '0/255'
'VLAN 1000': 'UP'
'fe80::2d0:f8ff:fe22': '3553/64'
'BW': '1000000 Kbit'
'IPv4/output rate': ['0'
'0'], 'Interface IPv6 address': ''
'line protocol': 'UP'
'Rxload': '0/255'
'loopback': 'not set'
'Carrier delay': '2 sec'
'IPv6/input rate': ['0'
'0'], 'Index(dec):5096 (hex)': '13e8'
'IPv6/packets input': '2'
'IPv6/packets output': '645696'
'IPv6/output rate': ['10612645'
'8963'], 'MTU': '1500 bytes'
'address': '00d0.f822.3553'
'12:': '1/64'
'Interface address': '12.1.1.1/24'
'IPv4 statistics': ''
'Encapsulation protocol': 'Ethernet-II'
'ARP type': 'ARPA'
'Hardware': 'VLAN'
'IPv4/input rate': ['4455942'
'4351'], 'Keepalive interval': '10 sec'
'IPv4/packets input': '605748'
'ARP Timeout': '3600 seconds'
'IPv4/packets output': '0'
'IPv6 statistics': ''}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interface vlan <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        ################################################################################################
        #  打印回显信息
        ###############################################################################################

        #####################################################################
        key_12 = None
        for value in show_info_split:
            value = value.strip()
            if "IPv4 statistics:" in value:
                key_11 = "IPv4"
            elif "IPv6 statistics:" in value:
                key_11 = "IPv6"
            elif re.match("10 seconds (\w+ rate) (\d+) bits/sec, (\d+) packets/sec",value):
                obj1 = re.match("10 seconds (\w+ rate) (\d+) bits/sec, (\d+) packets/sec",value)
                list_11 = []
                list_11.append(obj1.group(2))
                list_11.append(obj1.group(3))
                dict_value[key_11+"/"+obj1.group(1)] = list_11
            elif re.match("(\d+) (packets \w+), (\d+) bytes",value):
                obj1 = re.match("(\d+) (packets \w+), (\d+) bytes",value)
                dict_value[key_11+"/"+obj1.group(2)] = obj1.group(1)
            elif re.match("Input:\s*(\d+) packets, (\d+) bytes", value.strip()):
                obj1 = re.match("Input:\s*(\d+) packets, (\d+) bytes", value.strip())
                key_12 = "Input"
                dict_value[key_11 + "/" + key_12 + "/packets"] = obj1.group(1)
                dict_value[key_11 + "/" + key_12 + "/bytes"] = obj1.group(2)
            elif re.match("Output:\s*(\d+) packets, (\d+) bytes", value.strip()):
                obj1 = re.match("Output:\s*(\d+) packets, (\d+) bytes", value.strip())
                key_12 = "Output"
                dict_value[key_11 + "/" + key_12 + "/packets"] = obj1.group(1)
                dict_value[key_11 + "/" + key_12 + "/bytes"] = obj1.group(2)
            elif re.match("(\d+) unicast packets, (\d+) unicast bytes",value.strip()) and key_12:
                obj1 = re.match("(\d+) unicast packets, (\d+) unicast bytes",value.strip())
                dict_value[key_11 + "/"+key_12+"/unicast packets"] = obj1.group(1)
                dict_value[key_11 + "/"+key_12+"/unicast bytes"] = obj1.group(2)
            elif re.match("(\d+) multicast packets, (\d+) multicast bytes",value.strip()) and key_12:
                obj1 = re.match("(\d+) multicast packets, (\d+) multicast bytes",value.strip())
                dict_value[key_11 + "/"+key_12+"/multicast packets"] = obj1.group(1)
                dict_value[key_11 + "/"+key_12+"/multicast bytes"] = obj1.group(2)
        length = len(show_info_split)
        ###########################################################
        # 去除Interface IPv6 address is:
        # No IPv6 address
        #############################################################
        for i in range(length):
            if re.match(r'  Interface IPv6 address', show_info_split[i]):
                matchObj = re.match('  (Interface IPv6 address) is:', show_info_split[i])
                key = matchObj.group(1)
                vaule = show_info_split[i + 1]
                key = key.lstrip()
                key = key.rstrip()
                value = vaule.lstrip()
                value = value.rstrip()
                dict_value[key] = value
                show_info_split.remove(show_info_split[i + 1])
                show_info_split.remove(show_info_split[i])
                break
        ################################################################
        # 去除 Index(dec):4097 (hex):1001
        #####################################################################
        length = len(show_info_split)
        for i in range(length):
            if re.match('Index', show_info_split[i]):
                matchObj = re.match('(.*):(\d*) (.*):(\d*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                dict_value[matchObj.group(3)] = matchObj.group(4)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        #########################################################################
        # 去除 Keepalive interval is 10 sec , set
        #############################################################################
        for i in range(length):
            if re.match(r'  Keepalive interval', show_info_split[i]):
                matchObj = re.match('  (Keepalive interval) is (.*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        ##########################################################################
        # 以逗号为分隔号重新组合成字符串 newString
        ###########################################################################
        newString = ' '
        for i in range(length):
            newString = newString + show_info_split[i] + ','
        #################################################################################
        #   开始处理
        ##############################################################################
        dut_info_split = newString.split(',')
        length = len(dut_info_split)
        for i in range(length):
            if re.search(r'(.*):(.*)', dut_info_split[i]):
                if re.search(r'(.*)is:(.*)', dut_info_split[i]):
                    type1 = re.search(r'(.*)is:(.*)', dut_info_split[i])
                    key = type1.group(1)
                    value = type1.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
                else:
                    type1 = re.search(r'(.*):(.*)', dut_info_split[i])
                    key = type1.group(1)
                    value = type1.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
            elif re.search(r'(.*)is(.*)', dut_info_split[i]):
                if re.match(r' address is', dut_info_split[i]):
                    type2 = re.match(r' (address) is (.*) \(bia .*\)', dut_info_split[i])
                    dict_value[type2.group(1)] = type2.group(2)
                else:
                    type2 = re.search(r'(.*)is(.*)', dut_info_split[i])
                    key = type2.group(1)
                    value = type2.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
            elif re.search(r'(MTU|BW|loopback) (.*)', dut_info_split[i]):
                type3 = re.search(r'(MTU|BW|loopback) (.*)', dut_info_split[i])
                key = type3.group(1)
                value = type3.group(2)
                key = key.lstrip()
                key = key.rstrip()
                value = value.lstrip()
                value = value.rstrip()
                dict_value[key] = value

        return dict_value
    def dut_get_show_hostname(self, show_info):
        """
        Function:show hostname回显解析函数
        CLI命令:show hostname
        回显信息示例:
5848VAC#show hostname 
5848VAC
5848VAC#

        Returns:
{'show hostname': '5848VAC'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show hostname | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        length_list = []
        dict_value = {}
        show_info_split = show_info.split("\n")

        if re.match(r'.*show.*', show_info_split[0]):
            matchObj = re.match('(.*)#(.*)', show_info_split[0])
            dict_value[matchObj.group(2).strip()] = matchObj.group(1).strip()
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])

        return dict_value
    def dut_get_show_tunnel_information(self, show_info):
        """
        Function:show tunnel information回显解析函数
        CLI命令:show tunnel information
        回显信息示例:
Ruijie(config)#show tunnel information 
Tunnel index: 69, Tunnel num: 0
  Created by Open-flow.
  Protocol/transport: gre ip
  Tunnel source 10.11.1.114, destination 10.11.1.10, routable, reachable
  Tunnel TOS/Traffic Class not set, Tunnel TTL 254
  Tunnel config nested limit is 0, current nested number is 0  
Tunnel transport VPN is no set
    Key disabled, Sequencing disabled
Checksumming of packets disabled

 Tunnel index: 70, Tunnel num: 1
  Created by 6RD DHCPv4 option.
  Protocol/transport: ipv6ip 6rd
  Tunnel source 10.11.1.114, destination 10.11.1.11, routable, unreachable
  Tunnel TOS/Traffic Class not set, Tunnel TTL 254
  Tunnel config nested limit is 0, current nested number is 0  
Tunnel transport VPN is no set
    6rd prefix 2001:B000::/32
    Border relay 10.1.4.1
ipv4 prefix-len 16,  ipv4 suffix-len:0
6rd CE delegated prefix 2001:B000:0101::/48
6rd BR delegated prefix 2001:B000:0401::/48

        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show tunnel information | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        title_Created = 'Created'

        Created_list = []
        dict_value = {}

        show_info_split = show_info.split("\n")

        if re.match(r'.*Ruijie.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        dut_info_split = show_info_split
        # 去掉dut_info_split中的空值以及只包含空格符的值
        for i in dut_info_split:
            if '' in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' ' in dut_info_split:
                dut_info_split.remove(' ')
        for i in range(len(dut_info_split)):
            dut_info_split[i] = dut_info_split[i].strip(' ')

        index = []
        for i in range(len(dut_info_split)):
            if re.match('Tunnel index', dut_info_split[i]):
                index.append(i)

        for j in range(len(index)):
            info = ''
            title = ''
            if j < len(index) - 1:
                info = dut_info_split[index[j]:index[j + 1]]
            else:
                info = dut_info_split[index[j]:]
            title1 = info[1].split('by')
            info.remove(info[1])
            Created_list.append(title1[1].strip(' ').strip('.'))
            title = title1[1].strip(' ').strip('.')
            info1 = []
            info2 = []
            info1 = info[0:6]
            info2 = info[6:]
            t1 = ''
            t2 = ''
            for i in range(len(info1)):
                t1 = info1[i].split(',')
                for i in range(len(t1)):
                    if re.match('Tunnel index', t1[i].strip(' ')):
                        for j in range(len(t1)):
                            t1_index = t1[j].find(':')
                            t_title = t1[j][0:t1_index].strip(' ')
                            t_data = t1[j][t1_index + 1:].strip(' ')
                            dict_value[title + '/' + t_title] = t_data
                    if re.match('Protocol/transport', t1[i].strip(' ')):
                        for j in range(len(t1)):
                            t1_index = t1[j].find(':')
                            t_title = t1[j][0:t1_index].strip(' ')
                            t_data = t1[j][t1_index + 1:].strip(' ')
                            dict_value[title + '/' + t_title] = t_data
                    if re.match('Tunnel source', t1[i].strip(' ')):
                        for j in range(len(t1)):
                            if re.match('Tunnel source', t1[j].strip(' ')):
                                t_title = 'Tunnel source'
                                t_data = t1[j].strip(' ').replace('Tunnel source', '').strip(' ')
                                dict_value[title + '/' + t_title] = t_data
                                continue
                            if re.match('destination', t1[j].strip(' ')):
                                t_title = 'destination'
                                t_data = t1[j].strip(' ').replace('destination', '').strip(' ')
                                dict_value[title + '/' + t_title] = t_data
                                continue
                            else:
                                t_data = t1[j].strip(' ')
                                dict_value[title] = t_data
                                continue
                    if re.match('Tunnel TOS/Traffic Class', t1[i].strip(' ')):
                        for j in range(len(t1)):
                            if re.match('Tunnel TOS/Traffic Class', t1[j].strip(' ')):
                                t_title = 'Tunnel TOS/Traffic Class'
                                t_data = t1[j].strip(' ').replace('Tunnel TOS/Traffic Class', '').strip(' ')
                                dict_value[title + '/' + t_title] = t_data
                                continue
                            if re.match('Tunnel TTL', t1[j].strip(' ')):
                                t_title = 'Tunnel TTL'
                                t_data = t1[j].strip(' ').replace('Tunnel TTL', '').strip(' ')
                                dict_value[title + '/' + t_title] = t_data
                                continue
                    if re.match('Tunnel config nested limit', t1[i].strip(' ')):
                        for j in range(len(t1)):
                            if re.match('Tunnel config nested limit', t1[j].strip(' ')):
                                t_title = 'Tunnel config nested limit'
                                t_data = t1[j].strip(' ').replace('Tunnel config nested limit is', '').strip(' ')
                                dict_value[title + '/' + t_title] = t_data
                                continue
                            if re.match('current nested number', t1[j].strip(' ')):
                                t_title = 'current nested number'
                                t_data = t1[j].strip(' ').replace('current nested number is', '').strip(' ')
                                dict_value[title + '/' + t_title] = t_data
                                continue
                    if re.match('Tunnel transport VPN', t1[i].strip(' ')):
                        t_title = 'Tunnel transport VPN'
                        t_data = t1[i].strip(' ').replace('Tunnel transport VPN is', '').strip(' ')
                        dict_value[title + '/' + t_title] = t_data
            for i in range(len(info2)):
                t2 = info2[i].split(',')
                for i in range(len(t2)):
                    if re.match('Key', t2[i].strip(' ')):
                        for j in range(len(t2)):
                            if re.match('Key', t2[j].strip(' ')):
                                t_title = 'Key'
                                t_data = t2[j].strip(' ').replace('Key', '').strip(' ')
                                dict_value[title + '/' + t_title] = t_data
                            if re.match('Sequencing', t2[j].strip(' ')):
                                t_title = 'Sequencing'
                                t_data = t2[j].strip(' ').replace('Sequencing', '').strip(' ')
                                dict_value[title + '/' + t_title] = t_data
                    if re.match('ipv4 prefix-len', t2[i].strip(' ')):
                        for j in range(len(t2)):
                            if re.match('ipv4 prefix-len', t2[j].strip(' ')):
                                t_title = 'ipv4 prefix-len'
                                t_data = t2[j].strip(' ').replace('ipv4 prefix-len', '').strip(' ')
                                dict_value[title + '/' + t_title] = t_data
                            if re.match('ipv4 suffix-len', t2[j].strip(' ')):
                                t_title = 'ipv4 suffix-len'
                                t_data = t2[j].strip(' ').replace('ipv4 suffix-len', '').strip(' ')
                                dict_value[title + '/' + t_title] = t_data.strip(':')
                    if re.match('6rd prefix', t2[i].strip(' ')):
                        t_title = '6rd prefix'
                        t_data = t2[i].strip(' ').replace('6rd prefix', '').strip(' ')
                        dict_value[title + '/' + t_title] = t_data
                    if re.match('Border relay', t2[i].strip(' ')):
                        t_title = 'Border relay'
                        t_data = t2[i].strip(' ').replace('Border relay', '').strip(' ')
                        dict_value[title + '/' + t_title] = t_data
                    if re.match('6rd CE delegated prefix', t2[i].strip(' ')):
                        t_title = '6rd CE delegated prefix'
                        t_data = t2[i].strip(' ').replace('6rd CE delegated prefix', '').strip(' ')
                        dict_value[title + '/' + t_title] = t_data
                    if re.match('6rd BR delegated prefix', t2[i].strip(' ')):
                        t_title = '6rd BR delegated prefix'
                        t_data = t2[i].strip(' ').replace('6rd BR delegated prefix', '').strip(' ')
                        dict_value[title + '/' + t_title] = t_data

        dict_value[title_Created] = Created_list
        dict_value = str(dict_value).replace("\', \'", "\'\n\'")
        return dict_value
    def dut_get_show_bgp_all_summary(self, show_info):
        """
        Function:show bgp all summary回显解析函数
        CLI命令:show bgp all summary
        回显信息示例:
Ruijie#show bgp all summary 

For address family: IPv4 Unicast
BGP router identifier 0.0.0.0, local AS number 10
BGP table version is 1
0 BGP AS-PATH entries
0 BGP Community entries
0 BGP Prefix entries (Maximum-prefix:4294967295)

Neighbor        V          AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd
1.1.1.1         4         100       0       0        0    0    0    never Idle       

Total number of neighbors 1

For address family: IPv4 Multicast

For address family: IPv6 Unicast

For address family: IPv6 Multicast

For address family: VPNv4 Unicast
BGP router identifier 0.0.0.0, local AS number 10
BGP VRF 1 Route Distinguisher: 1:1
BGP table version is 1
0 BGP AS-PATH entries
0 BGP Community entries
0 BGP Prefix entries (Maximum-prefix:10000)

Neighbor        V          AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd
2.2.2.2         4         100       0       0        0    0    0    never Idle       

Total number of neighbors 1

        Returns:
{'IPv4 Unicast/BGP Prefix entries (Maximum-prefix:4294967295)': '0'
'1.1.1.1/OutQ': '0'
'VPNv4 Unicast/BGP AS-PATH entries': '0'
'VPNv4 Unicast/BGP Community entries': '0'
'2.2.2.2/OutQ': '0'
'IPv4 Unicast/BGP AS-PATH entries': '0'
'2.2.2.2/MsgSent': '0'
'IPv4 Unicast/BGP router identifier': '0.0.0.0'
'1.1.1.1/V': '4'
'1.1.1.1/State/PfxRcd': 'Idle'
'VPNv4 Unicast/ local AS number': '10'
'1.1.1.1/TblVer': '0'
'VPNv4 Unicast/Total number of neighbors': '1'
'2.2.2.2/AS': '100'
'2.2.2.2/V': '4'
'IPv4 Unicast/BGP Community entries': '0'
'For_address_family_list': [' IPv4 Unicast'
' IPv4 Multicast'
' IPv6 Unicast'
' IPv6 Multicast'
' VPNv4 Unicast'], '1.1.1.1/MsgSent': '0'
'2.2.2.2/TblVer': '0'
' IPv4 Unicast/Neighbor_list': ['1.1.1.1'], '1.1.1.1/MsgRcvd': '0'
'VPNv4 Unicast/BGP Prefix entries (Maximum-prefix:10000)': '0'
'2.2.2.2/State/PfxRcd': 'Idle'
' VPNv4 Unicast/Neighbor_list': ['2.2.2.2'], '1.1.1.1/AS': '100'
'2.2.2.2/InQ': '0'
'1.1.1.1/InQ': '0'
'VPNv4 Unicast/BGP VRF 1 Route Distinguisher:': '1:1'
'2.2.2.2/Up/Down': 'never'
'2.2.2.2/MsgRcvd': '0'
'VPNv4 Unicast/BGP table version': '1'
'1.1.1.1/Up/Down': 'never'
'VPNv4 Unicast/BGP router identifier': '0.0.0.0'
'IPv4 Unicast/ local AS number': '10'
'IPv4 Unicast/Total number of neighbors': '1'
'IPv4 Unicast/BGP table version': '1'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bgp all summary | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title = 'Neighbor'
        length_list = []
        dict_value = {}
        one_key = ''
        segment = []
        For_address_family_list = []
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        while '' in dut_info_split:
            dut_info_split.remove('')
        length = len(dut_info_split)
        line = []
        for i in range(length):
            if re.match('For add', dut_info_split[i]):
                segment.append(line)
                line = []
                line.append(dut_info_split[i])
            elif i == length - 1:
                line.append(dut_info_split[i])
                segment.append(line)
            else:
                line.append(dut_info_split[i])
        segment[0] = ''
        while '' in segment:
            segment.remove('')
        segment_length = len(segment)
        for i in range(segment_length):
            segment_sp = segment[i]
            table_info = []
            line_length = len(segment_sp)
            for j in range(line_length):
                if re.match('Neighbor', segment_sp[j]):
                    table_info.append(segment_sp[j])
                    segment_sp[j] = ''
                elif re.match('(\d+.\d+.\d+.\d+|\d+::)', segment_sp[j]):
                    table_info.append(segment_sp[j])
                    segment_sp[j] = ''
                else:
                    pass
            while '' in segment_sp:
                segment_sp.remove('')
            line_length = len(segment_sp)
            newString = ''
            for j in range(line_length):
                newString = newString + segment_sp[j] + ','
            segment_sp = newString.split(',')
            while '' in segment_sp:
                segment_sp.remove('')
            line_length = len(segment_sp)
            print segment_sp
            for j in range(line_length):
                if re.match('For address', segment_sp[j]):
                    matchObj = re.match('.*:(.*)', segment_sp[j])
                    one_key = matchObj.group(1)
                    For_address_family_list.append(one_key)
                else:
                    if re.match('(.*) is (.*)', segment_sp[j]):
                        matchObj = re.match('(.*) is (.*)', segment_sp[j])
                        key = one_key + '/' + matchObj.group(1)
                        dict_value[key.strip()] = matchObj.group(2).strip()
                    else:
                        if re.match('(.*) (\d.*)', segment_sp[j]):
                            matchObj = re.match('(.*) (\d.*)', segment_sp[j])
                            key = one_key + '/' + matchObj.group(1)
                            dict_value[key.strip()] = matchObj.group(2).strip()
                        elif re.match('\d+ BGP .*', segment_sp[j]):
                            matchObj = re.match('(\d+) (BGP .*)', segment_sp[j])
                            key = one_key + '/' + matchObj.group(2)
                            dict_value[key.strip()] = matchObj.group(1).strip()
                        else:
                            pass
            table_length = len(table_info)
            for j in range(table_length):
                if re.match('Neighbor', table_info[j]):
                    line_split = table_info[j].split(' ')
                    sum = 0
                    space_length_list = []
                    word_lenggth_list = []
                    for k in range(len(line_split)):
                        if k == 0:
                            pass
                        else:
                            if line_split[k] != '':
                                space_length_list.append(sum + 1)
                                sum = 0
                            else:
                                sum = sum + 1
                    while '' in line_split:
                        line_split.remove('')
                    for k in line_split:
                        word_lenggth_list.append(len(k))
                    space_length_list[1] = space_length_list[1] - 2
                    word_lenggth_list[2] = word_lenggth_list[2] + 2
                    for k in range(len(space_length_list)):
                        length_list.append(word_lenggth_list[k] + space_length_list[k])
                    length_list.append(32)
                    break
            length_list_len = len(length_list)
            length = len(table_info)
            Neighbor_list = []
            for j in range(length):
                sight = 0
                sight_sum = 0
                list_len = []
                for k in range(length_list_len):
                    sight_sum = sight_sum + int(length_list[k])
                    row_value = table_info[j][sight:sight_sum]
                    sight = sight_sum
                    row_value = row_value.strip()
                    list_len.append(row_value)
                if list_len[0] == value_title:
                    title = list_len
                elif list_len[0] != value_title:
                    Neighbor_list.append(list_len[0])
                    for s in range(1, length_list_len):
                        key_name = '%s/%s' % (list_len[0], title[s])
                        dict_value[key_name.strip()] = list_len[s].strip()
                dict_value[one_key + '/Neighbor_list'] = Neighbor_list
        for (k, v) in dict_value.items():
            if v == '':
                del dict_value[k]
        dict_value['For_address_family_list'] = For_address_family_list
        return dict_value
    def dut_get_debug_scc_user_mac(self, show_info):
        """
        Function:debug scc user mac回显解析函数
        CLI命令:debug scc user mac
        回显信息示例:
AC3#debug scc user mac

[    port    ][extend_idx][hash_idx][vid][inner_vid][     mac      ][       ipv4       ][ app_flag ][ sta_flag ][  user_type ][band][   owner  ][setup]
 ------------  ----------  --------  ---  ---------  --------------  ------------------  ----------  ----------  ------------  ----  ----------  ------ 
[wlan 1      ][0         ][681     ][256][0        ][0001.0000.0001][0.0.0.0        /0 ][0x2       ][0x0       ][BindMacOnly ][0   ][d1x       ][nMNK-----]
 ------------  ----------  --------  ---  ---------  --------------  ------------------  ----------  ----------  ------------  ----  ----------  ------ 
 All secu mac: 1

        Returns:
{'0001.0000.0001/port': 'wlan 1'
'0001.0000.0001/inner_vid': '0'
'0001.0000.0001/vid': '256'
'0001.0000.0001/band': '0'
'0001.0000.0001/owner': 'd1x'
'0001.0000.0001/app_flag': '0x2'
'0001.0000.0001/sta_flag': '0x0'
'All secu mac': '1'
'0001.0000.0001/hash_idx': '681'
'0001.0000.0001/ipv4': '0.0.0.0        /0'
'0001.0000.0001/setup': 'nMNK'
'0001.0000.0001/user_type': 'BindMacOnly'
'0001.0000.0001/extend_idx': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=debug scc user mac | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}  # 定义字典
        templist = []
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*debug.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        # 去除空行
        flag = 0
        for i in range(len(show_info_split)):
            if not show_info_split[i].strip() == '':
                if "[" in show_info_split[i]:
                    flag = 1
                if flag == 1 :
                    templist.append(show_info_split[i])
        t1 = templist[0].split('][')
        for i in range(len(t1)):
            t1[i] = t1[i].strip('[').strip(']').strip()
            if "mac" in t1[i] :
                mac_num = int(i)
        fin = templist[-1].split(':')
        dict_value[fin[0].strip()] = fin[1].strip()
        templist.remove(templist[0])
        templist.remove(templist[0])
        templist.remove(templist[-1])
        templist.remove(templist[-1])
        for i in range(len(templist)):
            t2 = templist[i].split('][')
            for j in range(len(t1)):
                t2[j] = t2[j].strip('[').strip(']').strip().strip('-')
            for k in range(len(t2)):
                if k != mac_num:
                    key = t2[mac_num].strip() + '/' + t1[k].strip()
                    dict_value[key.strip()] = t2[k].strip()
        return dict_value
    def dut_get_debug_scc_user_bind(self, show_info):
        """
        Function:debug scc user bind回显解析函数
        CLI命令:debug scc user bind
        回显信息示例:
AP2-740#debug scc user bind 

[  port  ][hash_idx][vid][     mac      ][       ipv4       ][ app_flag ][ sta_flag ][  user_type ][band][   owner  ][setup]
 --------  --------  ---  --------------  ------------------  ----------  ----------  ------------  ----  ----------  ------ 
[wlan 2  ][8       ][259][14cf.9203.bc83][131.1.51.2     /32][0x28      ][0x0       ][BindIpv4Mac ][0   ][None      ][o-NK--k]
 --------  --------  ---  --------------  ------------------  ----------  ----------  ------------  ----  ----------  ------ 
 All ipv4 bind user: 1

[  port  ][hash_idx][vid][     mac      ][                  ipv6                 ][ app_flag ][ sta_flag ][  user_type ][band][   owner  ][setup]
 --------  --------  ---  --------------  ---------------------------------------  ----------  ----------  ------------  ----  ----------  ------ 
 --------  --------  ---  --------------  ---------------------------------------  ----------  ----------  ------------  ----  ----------  ------ 
 All ipv6 bind user: 0

        Returns:
{'ipv4/14cf.9203.bc83/ipv4': '131.1.51.2     /32'
'ipv4/14cf.9203.bc83/hash_idx': '8'
'ipv4/14cf.9203.bc83/sta_flag': '0x0'
'ipv4/14cf.9203.bc83/band': '0'
'ipv4/14cf.9203.bc83/user_type': 'BindIpv4Mac'
'ipv4/14cf.9203.bc83/vid': '259'
'ipv4/14cf.9203.bc83/owner': 'None'
'All ipv4 bind user': '1'
'All ipv6 bind user': '0'
'ipv4/14cf.9203.bc83/port': 'wlan 2'
'ipv4/14cf.9203.bc83/setup': 'o-NK--k'
'ipv4/14cf.9203.bc83/app_flag': '0x28'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=debug scc user bind | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}  # 定义初始字典
        list_temp = []
        list_temp2 = []
        # 删除无用信息
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*#debug.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for h in range(len(show_info_list_line)):
            show_info_list_line[h] = show_info_list_line[h].strip()

        for i in show_info_list_line:  # 删除空行
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        line_len = len(show_info_list_line)  # 计算长度

        show_info_list_line_temp = []  # 指定一个临时空间,方便后续操作

        # 删除----所在的行
        for i in range(line_len):
            if not re.match(r'^---',show_info_list_line[i].strip()):
                show_info_list_line_temp.append(show_info_list_line[i])

        line_len = len(show_info_list_line_temp)
        # 先统计IPV4和IPV6 用户数
        for i in range(line_len):
            if re.match(r'All', show_info_list_line_temp[i].strip()):
                temp_list = show_info_list_line_temp[i].split(':')
                dict_value[temp_list[0].strip()] = temp_list[1].strip()
        if re.match('^All ipv', temp_list[0].strip()):  # 无线
            for t in range(line_len):
                if not re.match('All ipv4', show_info_list_line_temp[t].strip()):
                    list_temp.append(show_info_list_line_temp[t])
                else:
                    list_temp.append(show_info_list_line_temp[t])
                    break
            for tt in range(t+1,line_len):
                if not re.match('All ipv6', show_info_list_line_temp[tt].strip()):
                    list_temp2.append(show_info_list_line_temp[tt])
                else:
                    list_temp2.append(show_info_list_line_temp[tt])
                    break

            # 开始第二阶段key拼接,先处理IPV4情况
            line_lenv4 = len(list_temp)
            line_lenv6 = len(list_temp2)
            temp_list3 = []
            temp_list4 = []
            for i in range(line_lenv4):
                if re.match(r'^\[', list_temp[i].strip()):
                    temp_list2 = list_temp[i].split('][')
                    temp_list3 = []
                    for temp in range(len(temp_list2)):
                        temp_list3.append(temp_list2[temp].strip('[').strip(']').strip())
                    for temp_mac_num in range(len(temp_list3)):
                        if "mac" in temp_list3[temp_mac_num] :
                            temp_mac_num_flag = temp_mac_num
                    temp_list3.remove(temp_list3[temp_mac_num_flag])
                    if 'ipv4' in temp_list3:
                        for ii in range(i+1, line_lenv4):
                            temp_list2 = list_temp[ii].split('][')
                            while not re.match(r'All', list_temp[ii].strip()):
                                for j in range(len(temp_list2)):
                                    temp_list4.append(temp_list2[j].strip('[').strip(']').strip())
                                temp_mac = temp_list4[temp_mac_num_flag]
                                key_name_first = 'ipv4' + '/' + temp_mac


                                temp_list4.remove(temp_list4[temp_mac_num_flag])
                                for k in range(len(temp_list3)):
                                    key_name = key_name_first + '/' + temp_list3[k]
                                    dict_value[key_name] = temp_list4[k]
                                ii = ii + 1
                                temp_list4 = [] # Bug在这，找了半天
            temp_list3 = []
            temp_list4 = []
            for i in range(line_lenv6):
                if re.match(r'^\[', list_temp2[i].strip()):
                    temp_list2 = list_temp2[i].split('][')
                    temp_list3 = []
                    for temp in range(len(temp_list2)):
                        temp_list3.append(temp_list2[temp].strip('[').strip(']').strip())
                    for temp_mac_num in range(len(temp_list3)):
                        if "mac" in temp_list3[temp_mac_num] :
                            temp_mac_num_flag = temp_mac_num
                    temp_list3.remove(temp_list3[temp_mac_num_flag])
                    if 'ipv6' in temp_list3:
                        for ii in range(i + 1, line_lenv6):
                            temp_list2 = list_temp2[ii].split('][')
                            while not re.match(r'All', list_temp2[ii].strip()):
                                for j in range(len(temp_list2)):
                                    temp_list4.append(temp_list2[j].strip('[').strip(']').strip())
                                temp_mac = temp_list4[temp_mac_num_flag]
                                key_name_first = 'ipv6' + '/' + temp_mac


                                temp_list4.remove(temp_list4[temp_mac_num_flag])
                                for k in range(len(temp_list3)):
                                    key_name = key_name_first + '/' + temp_list3[k]
                                    dict_value[key_name] = temp_list4[k]
                                ii = ii + 1
                                temp_list4 = []  # Bug在这，找了半天

        else:  # 交换，以Ag开头
            list_temp = show_info_list_line_temp
            list_temp2 = list_temp
            # 开始第二阶段key拼接,先处理IPV4情况
            line_lenv4 = len(list_temp)
            line_lenv6 = len(list_temp2)
            temp_list3 = []
            temp_list4 = []
            for i in range(line_lenv4):
                if re.match(r'^\[', list_temp[i].strip()):
                    temp_list2 = list_temp[i].split('][')
                    temp_list3 = []
                    for temp in range(len(temp_list2)):
                        temp_list3.append(temp_list2[temp].strip('[').strip(']').strip())
                    for temp_mac_num in range(len(temp_list3)):
                        if "mac" in temp_list3[temp_mac_num] :
                            temp_mac_num_flag = temp_mac_num
                    temp_list3.remove(temp_list3[temp_mac_num_flag])
                    if 'ipv4' in temp_list3:
                        for ii in range(i+1, line_lenv4):
                            temp_list2 = list_temp[ii].split('][')
                            while not re.match(r'All', list_temp[ii].strip()):
                                for j in range(len(temp_list2)):
                                    temp_list4.append(temp_list2[j].strip('[').strip(']').strip())
                                temp_mac = temp_list4[temp_mac_num_flag]
                                key_name_first = 'ipv4' + '/' + temp_mac
                                temp_list4.remove(temp_list4[temp_mac_num_flag])
                                for k in range(len(temp_list3)):
                                    key_name = key_name_first + '/' + temp_list3[k]
                                    dict_value[key_name] = temp_list4[k]
                                ii = ii + 1
                                temp_list4 = []  # Bug在这，找了半天
            temp_list3 = []
            temp_list4 = []
            for i in range(line_lenv6):
                if re.match(r'^\[', list_temp2[i].strip()):
                    temp_list2 = list_temp2[i].split('][')
                    temp_list3 = []
                    for temp in range(len(temp_list2)):
                        temp_list3.append(temp_list2[temp].strip('[').strip(']').strip())
                    for temp_mac_num in range(len(temp_list3)):
                        if "mac" in temp_list3[temp_mac_num] :
                            temp_mac_num_flag = temp_mac_num
                    temp_list3.remove(temp_list3[temp_mac_num_flag])
                    if 'ipv6' in temp_list3:
                        for ii in range(i+1, line_lenv6):
                            temp_list2 = list_temp2[ii].split('][')
                            while not re.match(r'All', list_temp2[ii].strip()):
                                for j in range(len(temp_list2)):
                                    temp_list4.append(temp_list2[j].strip('[').strip(']').strip())
                                temp_mac = temp_list4[temp_mac_num_flag]
                                key_name_first = 'ipv6' + '/' + temp_mac
                                temp_list4.remove(temp_list4[temp_mac_num_flag])
                                for k in range(len(temp_list3)):
                                    key_name = key_name_first + '/' + temp_list3[k]
                                    dict_value[key_name] = temp_list4[k]
                                ii = ii + 1
                                temp_list4 = []  # Bug在这，找了半天
        return dict_value
    def dut_get_debug_scc_user_author(self,show_info):
        """
        Function:debug scc user author回显解析函数
        CLI命令:debug scc user author
        回显信息示例:
AC3#debug scc user author 

[    port    ][extend_idx][hash_idx][vid][inner_vid][     mac      ][       ipv4       ][ app_flag ][ sta_flag ][  user_type ][band][   owner  ][setup]
 ------------  ----------  --------  ---  ---------  --------------  ------------------  ----------  ----------  ------------  ----  ----------  ------ 
[wlan 1      ][0         ][95      ][256][0        ][0001.0000.0001][13.0.5.4       /32][0x20      ][0x0       ][BindIpv4Mac ][0   ][snooping  ][n-NK---k-]
 ------------  ----------  --------  ---  ---------  --------------  ------------------  ----------  ----------  ------------  ----  ----------  ------ 
 All ipv4 bind user: 1

[    port    ][extend_idx][hash_idx][vid][inner_vid][     mac      ][       ipv6       ][ app_flag ][ sta_flag ][  user_type ][band][   owner  ][setup]
 ------------  ----------  --------  ---  ---------  --------------  ------------------  ----------  ----------  ------------  ----  ----------  ------ 
 ------------  ----------  --------  ---  ---------  --------------  ------------------  ----------  ----------  ------------  ----  ----------  ------ 
 All ipv6 bind user: 0

        Returns:
{'ipv4/0001.0000.0001/app_flag': '0x20'
'ipv4/0001.0000.0001/sta_flag': '0x0'
'All ipv4 bind user': '1'
'ipv4/0001.0000.0001/owner': 'snooping'
'ipv4/0001.0000.0001/user_type': 'BindIpv4Mac'
'ipv4/0001.0000.0001/setup': 'n-NK---k-'
'ipv4/0001.0000.0001/inner_vid': '0'
'ipv4/0001.0000.0001/vid': '256'
'ipv4/0001.0000.0001/port': 'wlan 1'
'ipv4/0001.0000.0001/hash_idx': '95'
'All ipv6 bind user': '0'
'ipv4/0001.0000.0001/band': '0'
'ipv4/0001.0000.0001/ipv4': '13.0.5.4       /32'
'ipv4/0001.0000.0001/extend_idx': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=debug scc user author | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_debug_scc_user_bind(show_info)

    def dut_get_show_wlan_arpcheck_list(self, show_info):
        """
        Function:show wlan arp-check list回显解析函数
        CLI命令:show wlan arp-check list
        回显信息示例:
AC3#show wlan arp-check list 
INTERFACE                SENDER MAC           SENDER IP            POLICY SOURCE       
------------------------ -------------------- -------------------- --------------------
Wlan 1                   0001.0000.0001       13.0.5.4             DHCP snooping       
Wlan 1                   ec17.2fcd.f775       13.0.5.2             DHCP snooping

        Returns:
{'0001.0000.0001/INTERFACE': 'Wlan 1'
'ec17.2fcd.f775/INTERFACE': 'Wlan 1'
'0001.0000.0001/POLICY SOURCE': 'DHCP snooping'
'ec17.2fcd.f775/POLICY SOURCE': 'DHCP snooping'
'0001.0000.0001/SENDER IP': '13.0.5.4'
'ec17.2fcd.f775/SENDER IP': '13.0.5.2'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show wlan arp-check list | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}  # 定义字典
        templist = []
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for i in range(len(show_info_split)):
            if re.match(r'^-----', show_info_split[i].strip()):
                show_info_split[i] = ' '
        for i in range(len(show_info_split)):
            if re.match('IN',show_info_split[i]):
                t1 = show_info_split[i].split('    ')
                for j in range(len(t1)):
                    t1[j] = t1[j].strip()
                while '' in t1:
                    t1.remove('')
                show_info_split[i] = ' '
        # 去除空行
        for i in range(len(show_info_split)):
            if not show_info_split[i].strip() == '':
                templist.append(show_info_split[i])
        for i in range(len(templist)):
            t2 = templist[i].split('    ')
            for j in range(len(t2)):
                t2[j] = t2[j].strip()
            while '' in t2:
                t2.remove('')
            for k in range(len(t2)):
                if k != 1:
                    key = t2[1].strip() + '/' + t1[k].strip()
                    dict_value[key.strip()] = t2[k].strip()
        return dict_value
    def dut_get_show_logging_mnemoniclist(self, show_info):
        """
        Function:show logging mnemonic-list回显解析函数
        CLI命令:show logging mnemonic-list
        回显信息示例:
5848VAC#show logging mnemonic-list 
Mnemonic Name                     Subname                          Cycle   Param   Timer   Function
======================================================================================================
  ROAM_STAT                         .syslog-roam                     15      1       ON      NULL
  TUNNEL_STAT                       .CAPWAP                          15      1       ON      NULL
  AP_STAT                           .wbs_mng                         15      1       ON      NULL
  RADIO_STAT                        .wbs_mng                         15      1       ON      NULL
  TEST                              NULL                             15      2       OFF     NULL
------------------------------------------------------------------------------------------------------
 Mnemonic num is 5.
 Delay-send timer is ON.
======================================================================================================

5848VAC#

        Returns:
{'RADIO_STAT/Cycle': '15'
'TUNNEL_STAT/Cycle': '15'
'ROAM_STAT/Timer': 'ON'
'TEST/Timer': 'OFF'
'AP_STAT/Function': 'NULL'
'RADIO_STAT/Subname': '.wbs_mng'
'RADIO_STAT/Param': '1'
'ROAM_STAT/Param': '1'
'TEST/Subname': 'NULL'
'AP_STAT/Timer': 'ON'
'TEST/Param': '2'
'TUNNEL_STAT/Function': 'NULL'
'ROAM_STAT/Subname': '.syslog-roam'
'Mnemonic num': '5'
'Delay-send timer': 'ON'
'AP_STAT/Param': '1'
'TUNNEL_STAT/Subname': '.CAPWAP'
'ROAM_STAT/Cycle': '15'
'AP_STAT/Subname': '.wbs_mng'
'TUNNEL_STAT/Timer': 'ON'
'TEST/Function': 'NULL'
'TUNNEL_STAT/Param': '1'
'AP_STAT/Cycle': '15'
'OurAddr_list': ['ROAM_STAT'
'TUNNEL_STAT'
'AP_STAT'
'RADIO_STAT'
'TEST'], 'TEST/Cycle': '15'
'RADIO_STAT/Timer': 'ON'
'ROAM_STAT/Function': 'NULL'
'RADIO_STAT/Function': 'NULL'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show logging mnemonic-list | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title = 'Mnemonic Name'
        length_list = []
        dict_value = {}
        table_info = []
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        length = len(dut_info_split)
        for i in range(length):
            if re.match('---+', dut_info_split[i]):
                dut_info_split[i] = ''
            else:
                pass
        length = len(dut_info_split)
        for i in range(length):
            if re.match('Mnemonic Name', dut_info_split[i]):
                table_info.append(dut_info_split[i])
                dut_info_split[i] = ''
            elif re.match('  \w', dut_info_split[i]):
                table_info.append(dut_info_split[i])
                dut_info_split[i] = ''
            else:
                pass
        while '' in dut_info_split:
            dut_info_split.remove('')
        length = len(dut_info_split)
        for i in range(length):
            if re.match('.* is .*', dut_info_split[i]):
                matchObj = re.match('(.*) is (.*)', dut_info_split[i])
                dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip().strip('.')
            else:
                pass
        length = len(table_info)
        for i in range(length):
            if re.match('Mnemonic Name', table_info[i]):
                line_split = table_info[i].split(' ')
                sum = 0
                space_length_list = []
                word_lenggth_list = []
                for j in range(len(line_split)):
                    if j == 0:
                        pass
                    else:
                        if line_split[j] != '':
                            space_length_list.append(sum + 1)
                            sum = 0
                        else:
                            sum = sum + 1
                while '' in line_split:
                    line_split.remove('')
                for j in line_split:
                    word_lenggth_list.append(len(j))
                for j in range(len(space_length_list)):
                    if j == 0:
                        length_list.append(
                            word_lenggth_list[j] + space_length_list[j] + word_lenggth_list[j + 1] + space_length_list[
                                j + 1])
                    elif j == 1:
                        pass
                    else:
                        length_list.append(word_lenggth_list[j] + space_length_list[j])
                length_list.append(32)
                break
        length_list_len = len(length_list)
        length = len(table_info)
        OurAddr_list = []
        for i in range(length):
            sight = 0
            sight_sum = 0
            list_len = []
            for j in range(length_list_len):
                sight_sum = sight_sum + int(length_list[j])
                row_value = table_info[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.strip()
                list_len.append(row_value)
            if list_len[0] == value_title:
                title = list_len
            elif list_len[0] != value_title:
                OurAddr_list.append(list_len[0])
                for s in range(1, length_list_len):
                    key_name = '%s/%s' % (list_len[0], title[s])
                    dict_value[key_name] = list_len[s].strip()
            dict_value['OurAddr_list'] = OurAddr_list
        return dict_value
    def dut_get_show_usergroup_mac_mac(self, show_info):
        """
        Function:show user-group mac xxxx.xxxx.xxxx回显解析函数
        CLI命令:show user-group mac xxxx.xxxx.xxxx
        回显信息示例:
PJ80-CORE#show user-group mac 0000.2222.3334

mac 0000.2222.3334 ip 1.2.3.4 in user-group ddd

PJ80-CORE#

        Returns:
{'0000.2222.3334/user-group': 'ddd'
'0000.2222.3334/ip': '1.2.3.4'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show user-group mac xxxx.xxxx.xxxx | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        length = len(dut_info_split)
        for i in range(length):
            if re.match('mac (.*) ip (.*) in user-group (.*)', dut_info_split[i]):
                matchObj = re.match('mac (.*) ip (.*) in user-group (.*)', dut_info_split[i])
                key = matchObj.group(1).strip() + '/ip'
                dict_value[key] = matchObj.group(2).strip()
                key = matchObj.group(1).strip() + '/user-group'
                dict_value[key] = matchObj.group(3).strip()
                continue
            if re.match('mac (.*) in user-group (.*)', dut_info_split[i]):
                matchObj = re.match('mac (.*) in user-group (.*)', dut_info_split[i])
                key = matchObj.group(1).strip() + '/user-group'
                dict_value[key] = matchObj.group(2).strip()
        return dict_value
    def dut_get_show_usergroup_authentication(self,show_info):
        """
        Function:show user-group authentication回显解析函数
        CLI命令:show user-group authentication
        回显信息示例:
PJ80-CORE#show user-group authentication 

time-list-cnt: 0

PJ80-CORE#

        Returns:
{'time-list-cnt': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show user-group authentication | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_split = show_info.split("\n")
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        dut_info_split = show_info_split
        length = len(dut_info_split)
        for i in range(length):
            if re.match(r'time-list-cnt', dut_info_split[i].strip()):
                t1 = dut_info_split[i].split(':')
                dict_value[t1[0].strip()] = t1[1].strip()
        for i in range(length):
            if re.match('.*mac (.*) ip (.*) in user-group (.*)', dut_info_split[i]):
                matchObj = re.match('.*mac (.*) ip (.*) in user-group ([^*])', dut_info_split[i])
                key = matchObj.group(1).strip() + '/ip'
                dict_value[key] = matchObj.group(2).strip()
                key = matchObj.group(1).strip() + '/user-group'
                dict_value[key] = matchObj.group(3).strip()
                continue
            if re.match('.*mac (.*) in user-group (.*)', dut_info_split[i]):
                matchObj = re.match('.*mac (.*) in user-group (.*)', dut_info_split[i])
                key = matchObj.group(1).strip() + '/user-group'
                dict_value[key] = matchObj.group(2).strip()
                continue
        return dict_value
    def dut_get_show_usergroup(self,show_info):
        """
        Function:show user-group回显解析函数
        CLI命令:show user-group
        回显信息示例:
PJ80-CORE(config-user-group)#show user-group

user-group: ddd
 configured users: 2
  mac 0000.2222.3333
  mac 0000.2222.3334 ip 1.2.3.4

PJ80-CORE(config-user-group)#

        Returns:
{'ddd/mac': ['0000.2222.3333'
'0000.2222.3334 ip 1.2.3.4'], 'ddd/configured users': '2'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show user-group | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        one_key = ''
        mac_list=[]
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        length = len(dut_info_split)
        for i in range(length):
            if re.match('\w',dut_info_split[i]):
                matchObj = re.match('.*:(.*)',dut_info_split[i])
                if mac_list != []:
                    dict_value[(one_key+'/mac').strip()] = mac_list
                mac_list = []
                one_key = matchObj.group(1)
            elif re.match(' \w',dut_info_split[i]):
                matchObj = re.match('(.*):(.*)',dut_info_split[i])
                key = one_key + '/' +matchObj.group(1).strip()
                dict_value[key.strip()] = matchObj.group(2).strip()
            elif re.match('  \w',dut_info_split[i]):
                matchObj = re.match('  (mac)(.*)',dut_info_split[i])
                mac_list.append(matchObj.group(2).strip())
            else:pass
        if mac_list != []:
            dict_value[(one_key + '/mac').strip()] = mac_list
        return dict_value
    def dut_get_show_dot11_mbssid(self,show_info):
        """
        Function:show dot11 mbssid回显解析函数
        CLI命令:show dot11 mbssid
        回显信息示例:
AP1-520-Limin#show dot11 mbssid 
   name: Dot11radio 1/0.1
wlan id: 1
   ssid: HZU-Student
  bssid: 0669.6c24.0182

   name: Dot11radio 1/0.2
wlan id: 2
   ssid: HZU-Student-Auto
  bssid: 0a69.6c24.0182

   name: Dot11radio 1/0.3
wlan id: 3
   ssid: HZU-Teacher
  bssid: 0e69.6c24.0182

   name: Dot11radio 1/0.4
wlan id: 4
   ssid: HZU-Teacher-Auto
  bssid: 1269.6c24.0182

   name: Dot11radio 2/0.1
wlan id: 1
   ssid: HZU-Student
  bssid: 0669.6c24.0183
          
   name: Dot11radio 2/0.2
wlan id: 2
   ssid: HZU-Student-Auto
  bssid: 0a69.6c24.0183

   name: Dot11radio 2/0.3
wlan id: 3
   ssid: HZU-Teacher
  bssid: 0e69.6c24.0183

   name: Dot11radio 2/0.4
wlan id: 4
   ssid: HZU-Teacher-Auto
  bssid: 1269.6c24.0183

        Returns:
{'Dot11radio 2/0.3/name': 'Dot11radio 2/0.3'
'Dot11radio 1/0.2/name': 'Dot11radio 1/0.2'
'Dot11radio 2/0.2/wlan id': '2'
'Dot11radio 2/0.2/ssid': 'HZU-Student-Auto'
'Dot11radio 1/0.2/wlan id': '2'
'Dot11radio 1/0.1/wlan id': '1'
'Dot11radio 1/0.1/bssid': '0669.6c24.0182'
'Dot11radio 1/0.3/name': 'Dot11radio 1/0.3'
'Dot11radio 1/0.4/name': 'Dot11radio 1/0.4'
'Dot11radio 2/0.4/name': 'Dot11radio 2/0.4'
'Dot11radio 1/0.4/bssid': '1269.6c24.0182'
'Dot11radio 2/0.1/name': 'Dot11radio 2/0.1'
'Dot11radio 2/0.2/bssid': '0a69.6c24.0183'
'Dot11radio 2/0.1/wlan id': '1'
'Dot11radio 1/0.2/ssid': 'HZU-Student-Auto'
'Dot11radio 2/0.3/bssid': '0e69.6c24.0183'
'Dot11radio 2/0.2/name': 'Dot11radio 2/0.2'
'Dot11radio 2/0.1/ssid': 'HZU-Student'
'Dot11radio 1/0.3/bssid': '0e69.6c24.0182'
'Dot11radio 2/0.4/ssid': 'HZU-Teacher-Auto'
'Dot11radio 1/0.1/name': 'Dot11radio 1/0.1'
'Dot11radio 1/0.1/ssid': 'HZU-Student'
'Dot11radio 1/0.2/bssid': '0a69.6c24.0182'
'Dot11radio 2/0.3/wlan id': '3'
'name': ['Dot11radio 1/0.1'
'Dot11radio 1/0.2'
'Dot11radio 1/0.3'
'Dot11radio 1/0.4'
'Dot11radio 2/0.1'
'Dot11radio 2/0.2'
'Dot11radio 2/0.3'
'Dot11radio 2/0.4'], 'Dot11radio 1/0.3/wlan id': '3'
'Dot11radio 1/0.4/ssid': 'HZU-Teacher-Auto'
'Dot11radio 1/0.4/wlan id': '4'
'Dot11radio 2/0.4/bssid': '1269.6c24.0183'
'Dot11radio 2/0.4/wlan id': '4'
'Dot11radio 1/0.3/ssid': 'HZU-Teacher'
'Dot11radio 2/0.1/bssid': '0669.6c24.0183'
'Dot11radio 2/0.3/ssid': 'HZU-Teacher'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show dot11 mbssid | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}  # 定义字典
        name_list = []
        templist = []
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        # 去除空行
        for i in range(len(show_info_split)):
            if not show_info_split[i].strip() == '':
                templist.append(show_info_split[i])
        for i in range(len(templist)):
            if re.match(r'^name',templist[i].strip()):
                t1 = templist[i].split(':')
                key1 = t1[1].strip()
                name_list.append(t1[1].strip())
            temp = templist[i].split(':')
            dict_value[key1+'/'+temp[0].strip()] = temp[1].strip()
        dict_value['name'] = name_list # 名字列表
        return dict_value
    def dut_get_show_dldp_statistic(self,show_info):
        """
        Function:show dldp statistic回显解析函数
        CLI命令:show dldp statistic
        回显信息示例:
dut1(config)#show dldp statistic 
Interface  Type         Ip          Record-time   Up-count Down-count
--------- ------- --------------- --------------- -------- ----------
Vl10      Active  20.1.1.2        1h7m32s         0        1         
Gi0/1     Active  20.1.1.2        4m29s           0        1

        Returns:
{'Gi0/1/Up-count': '0'
'Gi0/1/Ip': '20.1.1.2'
'Vl10/Type': 'Active'
'Vl10/Ip': '20.1.1.2'
'Gi0/1/Type': 'Active'
'Vl10/Record-time': '1h7m32s'
'Gi0/1/Record-time': '4m29s'
'Vl10/Up-count': '0'
'Gi0/1/Down-count': '1'
'Vl10/Down-count': '1'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show dldp statistic | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}  # 定义字典
        templist = []
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for i in range(len(show_info_split)):
            if re.match(r'^-----', show_info_split[i].strip()):
                show_info_split[i] = ' '
        # 去除空行
        for i in range(len(show_info_split)):
            if not show_info_split[i].strip() == '':
                templist.append(show_info_split[i])
        for i in range(len(templist)):
            if re.match(r'Interface',templist[i].strip()):
                t1 = templist[i].split(' ')
                for j in range(len(t1)):
                    t1[j].strip()
                while '' in t1:
                    t1.remove('')
                continue
            t2 = templist[i].split('  ')
            for j in range(len(t2)):
                t2[j] = t2[j].strip()
            while '' in t2:
                t2.remove('')
            for k in range(len(t2)):
                if k != 0:
                    key = t2[0].strip() + '/' + t1[k].strip()
                    dict_value[key] = t2[k].strip()
        return dict_value
    def dut_get_show_ip_nat_translations_verbose(self,show_info):
        """
        Function:show ip nat translations verbose回显解析函数
        CLI命令:show ip nat translations verbose
        回显信息示例:
Ruijie# show ip nat translations verbose
timeout for NAT TCP flows: 86400
timeout for NAT TCP flows after a FIN or RST: 60
timeout for NAT TCP flows after a SYN : 60
timeout for NAT UDP flows: 300
timeout for NAT DNS flows: 60
timeout for NAT ICMP flows: 60
Pro Inside global      Inside local       Outside local      Outside global timeout vrf
tcp 192.168.5.103:1987 192.168.211.21 :1987 211.67.71.7    :80    211.67.71.7:80 timeout=85139 1
udp 192.168.5.103:1041 192.168.211.183:1041 202.101.98.55  :53 202.101.98.55:53 timeout=38 1

        Returns:
"{u'192.168.5.103:1041/vrf': u'1', u'192.168.5.103:1987/Outside local': u'211.67.71.7:80', u'192.168.5.103:1041/Outside local': u'202.101.98.55:53', u'192.168.5.103:1987/Inside local': u'192.168.211.21:1987', u'timeout for NAT TCP flows after a SYN': u'60', u'timeout for NAT UDP flows': u'300', u'192.168.5.103:1987/Outside global': u'211.67.71.7:80'\n'Inside global': [u'192.168.5.103:1987', u'192.168.5.103:1041'], u'192.168.5.103:1041/Outside global': u'202.101.98.55:53', u'192.168.5.103:1987/timeout': u'85139', u'192.168.5.103:1041/Pro': u'udp', u'timeout for NAT DNS flows': u'60', u'192.168.5.103:1987/Pro': u'tcp', u'timeout for NAT ICMP flows': u'60', u'timeout for NAT TCP flows': u'86400', u'192.168.5.103:1041/timeout': u'38', u'192.168.5.103:1041/Inside local': u'192.168.211.183:1041', u'192.168.5.103:1987/vrf': u'1', u'timeout for NAT TCP flows after a FIN or RST': u'60'}"
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip nat translations verbose | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        Inside_global_list = []
        title_Pro = 'Pro'
        title_Inside_global = 'Inside global'
        title_Inside_local = 'Inside local'
        title_Outside_local = 'Outside local'
        title_Outside_global = 'Outside global'
        title_timeout = 'timeout'
        title_vrf = 'vrf'

        show_info_split = show_info.split("\n")

        if re.match(r'.*Ruijie.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        dut_info_split = show_info_split

        for i in dut_info_split:
            if '' in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' ' in dut_info_split:
                dut_info_split.remove(' ')
        for i in range(len(dut_info_split)):
            dut_info_split[i] = dut_info_split[i].strip(' ')

        info1 = ''
        info2 = ''
        for i in range(len(dut_info_split)):
            if re.match(r'.*Pro Inside global      Inside local       Outside local      Outside global timeout vrf.*',
                        dut_info_split[i]):
                info1 = dut_info_split[0:i]
                info2 = dut_info_split[i:]

        for i in range(len(info1)):
            index = info1[i].find(':')
            info1_title = info1[i][0:index].strip(' ')
            info1_info = info1[i][index + 1:].strip(' ')
            dict_value[info1_title] = info1_info

        info2.remove(info2[0])
        for i in range(len(info2)):
            info2_info2 = info2[i].strip(' ')
            Pro = ''
            vrf = ''
            timeout = ''
            Inside_global = ''
            Inside_local = ''
            Outside_local = ''
            Outside_global = ''
            for i in range(len(info2_info2)):
                if info2_info2[i] != ' ':
                    Pro = Pro + info2_info2[i]
                if info2_info2[i] == ' ':
                    break

            info2_info2 = info2_info2.strip(' ').replace(Pro, '').strip(' ')

            for i in range(len(info2_info2)):
                if i != 0:
                    if info2_info2[-i] != ' ':
                        vrf = vrf + '' + info2_info2[-i]
                    if info2_info2[-i] == ' ':
                        break
            vrf = vrf[::-1]
            info2_info2 = info2_info2.strip(' ').rstrip(vrf).strip(' ')

            for i in range(len(info2_info2)):
                if i != 0:
                    if info2_info2[-i] != ' ':
                        timeout = timeout + '' + info2_info2[-i]
                    if info2_info2[-i] == ' ':
                        break
            timeout = timeout[::-1]
            info2_info2 = info2_info2.strip(' ').rstrip(timeout).strip(' ')
            t=''
            for i in range(len(timeout)):
                if i != 0:
                    if timeout[-i] != '=':
                        t = t + '' + timeout[-i]
                    if timeout[-i] == '=':
                        break
            t = t[::-1]
            timeout = t

            count_d = 0
            for i in range(len(info2_info2)):
                if info2_info2[i] == '.' or info2_info2[i] == ':':
                    count_d = count_d + 1
                if count_d == 4:
                    if info2_info2[i] == ' ':
                        count_d = 0
                        break
                    else:
                        Inside_global = Inside_global + info2_info2[i]
                if count_d < 4:
                    Inside_global = Inside_global + info2_info2[i]
            info2_info2 = info2_info2.replace(Inside_global, '').strip(' ')
            Inside_global = Inside_global.replace(' ', '')

            for i in range(len(info2_info2)):
                if info2_info2[i] == '.' or info2_info2[i] == ':':
                    count_d = count_d + 1
                if count_d == 4:
                    if info2_info2[i] == ' ':
                        count_d = 0
                        break
                    else:
                        Inside_local = Inside_local + info2_info2[i]
                if count_d < 4:
                    Inside_local = Inside_local + info2_info2[i]
            info2_info2 = info2_info2.strip(' ').replace(Inside_local, '').strip(' ')
            Inside_local = Inside_local.replace(' ', '')

            for i in range(len(info2_info2)):
                if info2_info2[i] == '.' or info2_info2[i] == ':':
                    count_d = count_d + 1
                if count_d == 4:
                    if info2_info2[i] == ' ':
                        count_d = 0
                        break
                    else:
                        Outside_local = Outside_local + info2_info2[i]
                if count_d < 4:
                    Outside_local = Outside_local + info2_info2[i]

            info2_info2 = info2_info2.strip(' ').replace(Outside_local, '').strip(' ')
            Outside_local = Outside_local.replace(' ', '')

            for i in range(len(info2_info2)):
                if info2_info2[i] == '.' or info2_info2[i] == ':':
                    count_d = count_d + 1
                if count_d == 4:
                    if info2_info2[i] == ' ':
                        count_d = 0
                        break
                    else:
                        Outside_global = Outside_global + info2_info2[i]
                if count_d < 4:
                    Outside_global = Outside_global + info2_info2[i]
            info2_info2 = info2_info2.strip(' ').lstrip(Outside_global).strip(' ')
            Outside_global = Outside_global.replace(' ', '')

            Inside_global_list.append(Inside_global)

            title = Inside_global + '/'

            dict_value[title + 'Pro'] = Pro
            dict_value[title + 'Inside local'] = Inside_local
            dict_value[title + 'Outside local'] = Outside_local
            dict_value[title + 'Outside global'] = Outside_global
            dict_value[title + 'timeout'] = timeout
            dict_value[title + 'vrf'] = vrf

        dict_value['Inside global'] = Inside_global_list
        dict_value = str(dict_value).replace("\', \'", "\'\n\'")
        return dict_value

    def _dut_get_show_bfd_neighbors_details_format_intf(self, intf, rm_blank="flase"):
        intf = str(intf).strip()
        name_map = {'TenGigabitEthernet ': 'Te', 'gigabitEthernet ': 'Gi', 'AggregatePort ': 'Ag',
                    'Loopback ': 'Lo ', 'FortyGigabitEthernet ': 'Fo', 'HundredGigabitEthernet ': 'Hu',
                    'TFGigabitEthernet ': 'TF', 'Mgmt ': "Mg", "THGigabitEthernet ": "TH",
                    "FHGigabitEthernet ": "FH","VLAN ":"VL"}
        for arg_key, arg_value in name_map.items():
            # if re.match(r'%s(.*)' % arg_key, str(intf).strip(), re.M | re.I):
            #     change_name = arg_value + re.match(r'%s(.*)' % (arg_key), intf, re.M | re.I).group(1)
            #     if rm_blank.strip() == "true":
            #         return change_name.replace(" ", "")
            #     return change_name
            # else:
            if re.match(r'%s(.*)' % arg_value, intf, re.M | re.I):
                change_name = arg_key + re.match(r'%s(.*)' % (arg_value), intf, re.M | re.I).group(1)
                if rm_blank.strip() == "true":
                    return change_name.replace(" ", "")
                return change_name
        return intf
    def dut_get_show_bfd_neighbors_details(self, show_info):
        """
        Function:show bfd neighbors details回显解析函数
        CLI命令:show bfd neighbors details
        回显信息示例:
Ruijie#show bfd neighbors details
OurAddr                         NeighAddr                             LD/RD      RH/RS     Holdown(mult)  State  Int
192.168.1.1                     192.168.1.2                         8192/8192    Up              0(3   )  Up     GigabitEthernet 3/8
Session state is Up and not using echo function.
Local Diag:   0,        Demand mode:   0,       Poll bit:   0
MinTxInt: 50000,          MinRxInt: 50000,           Multiplier:   3
Received MinRxInt 50000, Multiplier: 3
Holdown (hits): 150(0), Hello (hits): 50(22)
Rx Count: 12821, Rx Interval (ms) min/max/avg: 10/60/50
Tx Count: 12832, Tx Interval (ms) min/max/avg: 50/50/50
Registered protocols: OSPF
Uptime: 0:10:55
Last packet:
 Version          :         1                  - Diagnostic     : 0
 State bit        :        Up                  - Demand bit     : 0
 Poll bit         :         0                  - Final bit      : 0
 Multplier        :         3                  - Length         : 24
 My Discr         :      8192                  - Your Discr     : 8192
 Min tx interval  :     50000                  - Min rx interval: 50000
 Min Echo interval:     50000

Ruijie#

        Returns:
{'Uptime': '0:10:55'
'Registered protocols': 'OSPF'
'Last packet/Final bit': '0'
'Hello (hits)': '50(22)'
'Tx Interval (ms) min/max/avg': '50/50/50'
'192.168.1.1/State': 'Up'
'Received/MinRxInt': '50000'
'MinTxInt': '50000'
'Local Diag': '0'
'MinRxInt': '50000'
'Last packet/Multplier': '3'
'Rx Count': '12821'
'Demand mode': '0'
'Last packet/My Discr': '8192'
'Poll bit': '0'
'192.168.1.1/Holdown(mult)': '0(3   )'
'Last packet/Min tx interval': '50000'
'Holdown (hits)': '150(0)'
'Last packet/Your Discr': '8192'
'Last packet/Poll bit': '0'
'Multiplier': '3'
'Last packet/State bit': 'Up'
'Last packet/Diagnostic': '0'
'Tx Count': '12832'
'192.168.1.1/NeighAddr': '192.168.1.2'
'192.168.1.1/RH/RS': 'Up'
'Last packet/Version': '1'
'192.168.1.1/LD/RD': '8192/8192'
'Received/Multiplier': '3'
'Last packet/Length': '24'
'Min Echo interval': '50000'
'192.168.1.1/Int': 'GigabitEthernet 3/8'
'Last packet/Demand bit': '0'
'Rx Interval (ms) min/max/avg': '10/60/50'
'OurAddr_list': ['192.168.1.1'], 'Last packet/Min rx interval': '50000'
'Session state': 'Up and not using echo function.'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bfd neighbors details | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = show_info.split("\n")
        ouraddr_num = 0
        new_info_list = []
        for value in show_info_list:
            if "OurAddr" in value:
                ouraddr_num = ouraddr_num + 1
            if ouraddr_num > 1:
                break
            else:
                new_info_list.append(value)
        show_info = "\n".join(new_info_list)

        value_title = 'OurAddr'
        length_list = []
        dict_value = {}
        table_info = []
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        length = len(dut_info_split)
        for i in range(length):
            if re.match('Last packet:', dut_info_split[i]):
                dut_info_split[i] = ''
                break
        for i in range(length):
            if re.match('Received MinRxInt', dut_info_split[i]):
                matchObj = re.match('Received (MinRxInt)(.*), (Multiplier):(.*)', dut_info_split[i])
                dict_value['Received/' + matchObj.group(1).strip()] = matchObj.group(2).strip()
                dict_value['Received/' + matchObj.group(3).strip()] = matchObj.group(4).strip()
                dut_info_split[i] = ''
                break
        for i in range(length):
            if re.match('OurAddr', dut_info_split[i]):
                table_info.append(dut_info_split[i])
                dut_info_split[i] = ''
            elif re.match('\d+.\d+.\d+.\d+', dut_info_split[i]):
                table_info.append(dut_info_split[i])
                dut_info_split[i] = ''
            else:
                pass
        while '' in dut_info_split:
            dut_info_split.remove('')
        length = len(dut_info_split)
        newString = ''
        for i in range(length):
            newString = newString + show_info_split[i] + ','
        dut_info_split = newString.split(',')
        length = len(dut_info_split)
        for i in range(length):
            if re.match('(.*):(.*)-(.*):(.*)', dut_info_split[i]):
                matchObj = re.match('(.*):(.*)-(.*):(.*)', dut_info_split[i])
                dict_value['Last packet/' + matchObj.group(1).strip()] = matchObj.group(2).strip()
                dict_value['Last packet/' + matchObj.group(3).strip()] = matchObj.group(4).strip()
            else:
                if re.match('.* is .*', dut_info_split[i]):
                    matchObj = re.match('(.*) is (.*)', dut_info_split[i])
                    dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
                elif re.match('.*:.*', dut_info_split[i]):
                    matchObj = re.match('(.*?):(.*)', dut_info_split[i])
                    dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
                else:
                    if re.match('.* \d+', dut_info_split[i]):
                        matchObj = re.match('(.*) (\d+)', dut_info_split[i])
                        dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
                    else:
                        pass
        ######################################################################################
        length = len(table_info)
        for i in range(length):
            if re.match('OurAddr', table_info[i]):
                line_split = table_info[i].split(' ')
                sum = 0
                space_length_list = []
                word_lenggth_list = []
                for j in range(len(line_split)):
                    if j == 0:
                        pass
                    else:
                        if line_split[j] != '':
                            space_length_list.append(sum + 1)
                            sum = 0
                        else:
                            sum = sum + 1
                while '' in line_split:
                    line_split.remove('')
                for j in line_split:
                    word_lenggth_list.append(len(j))
                space_length_list[1] = space_length_list[1] - 5
                word_lenggth_list[2] = word_lenggth_list[2] + 5
                for j in range(len(space_length_list)):
                    length_list.append(word_lenggth_list[j] + space_length_list[j])
                length_list.append(32)
                break
        length_list_len = len(length_list)
        print length_list
        length = len(table_info)
        OurAddr_list = []
        for i in range(length):
            sight = 0
            sight_sum = 0
            list_len = []
            for j in range(length_list_len):
                sight_sum = sight_sum + int(length_list[j])
                row_value = table_info[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.strip()
                list_len.append(row_value)
            if list_len[0] == value_title:
                title = list_len
            elif list_len[0] != value_title:
                OurAddr_list.append(list_len[0])
                for s in range(1, length_list_len):
                    key_name = '%s/%s' % (list_len[0], title[s])
                    dict_value[key_name] = list_len[s].strip()
            dict_value['OurAddr_list'] = OurAddr_list
        if "RH/RS" in show_info:
            return dict_value
        dict_value_2 = {}
        for k, v in dict_value.items():
            if k == "Local Diag":
                if re.match("(\d+)\s+Demand mode: (\d+)\s+Poll bit: (\d+)", v.strip()):
                    obj = re.match("(\d+)\s+Demand mode: (\d+)\s+Poll bit: (\d+)", v.strip())
                    dict_value_2[k] = obj.group(1)
                    dict_value_2["Demand mode"] = obj.group(2)
                    dict_value_2["Poll bit"] = obj.group(3)
            # elif k == "Actual TxInt(ms)":
            #     if re.match("(\d+)\s+DetectInt\(ms\): (\d+)", v.strip()):
            #         obj = re.match("(\d+)\s+DetectInt\(ms\): (\d+)", v.strip())
            #         #dict_value_2["Received/MinRxInt"] = str(int(obj.group(1))*1000)
            #         dict_value_2["Actual TxInt(ms)"] = obj.group(1)
            #         dict_value_2["DetectInt(ms)"] = obj.group(2)
            elif k == "Local MinTxInt(ms)":
                if re.match("(\d+)\s+MinRxInt\(ms\): (\d+)\s+Multiplier: (\d+)", v.strip()):
                    obj = re.match("(\d+)\s+MinRxInt\(ms\): (\d+)\s+Multiplier: (\d+)", v.strip())
                    dict_value_2["Local MinTxInt(ms)"] = obj.group(1)
                    dict_value_2["MinRxInt"] = obj.group(2)
                    dict_value_2["Multiplier"] = obj.group(3)
            elif k == "Actual TxInt(ms)":
                if re.match("(\d+)\s+DetectInt(ms): (\d+)", v.strip()):
                    obj = re.match("(\d+)\s+DetectInt(ms): (\d+)", v.strip())
                    dict_value_2["Actual TxInt(ms)"] = obj.group(1)
                    dict_value_2["DetectInt(ms)"] = obj.group(2)
            elif k == "Up Dampening(sec)":
                if re.match("(\d+)\s+Client State: (\S+)", v.strip()):
                    obj = re.match("(\d+)\s+Client State: (\S+)", v.strip())
                    dict_value_2["Up Dampening(sec)"] = obj.group(1)
                    dict_value_2["Client State"] = obj.group(2)
            elif k == "Destination Port":
                if re.match("(\d+)\s+TTL: (\S+)", v.strip()):
                    obj = re.match("(\d+)\s+TTL: (\S+)", v.strip())
                    dict_value_2["Destination Port"] = obj.group(1)
                    dict_value_2["TTL"] = obj.group(2)
            # elif "/Interface" in k:
            #     v = self._dut_get_show_bfd_neighbors_details_format_intf(v)
            else:
                dict_value_2[k] = v
        dict_value_3 = {}
        flag = 0
        for k, v in dict_value_2.items():
            if "/Interface" in k:
                v = self._dut_get_show_bfd_neighbors_details_format_intf(v)
                dict_value_3[k.replace("Interface", "Int")] = v
            elif k == "Local MinTxInt(ms)":
                dict_value_3["MinTxInt"] = str(int(v) * 1000)
            # elif k == "Local MinRxInt(ms)":
            #     dict_value_3["MinRxInt"] = str(int(v)*1000)
            elif k == "MinRxInt":
                flag = 1
                dict_value_3["MinRxInt"] = str(int(v) * 1000)
                dict_value_3["MinRxInt_1"] = v
            elif k == "Multiplier":
                dict_value_3["Multplier"] = v
            # elif k == "Actual TxInt(ms)":
            #     dict_value_3["Received/MinRxInt"] = str(int(v) * 1000)
            # elif k == "DetectInt(ms)":
            #     dict_value_3["Received/Multiplier"] = v
            elif k == "Last packet/Multiplier" or k == "Multiplier":
                dict_value_3["Multplier"] = v
                dict_value_3["Received/Multplier"] = v
                dict_value_3["Received/Multiplier"] = v
                dict_value_3["Last packet/Multplier"] = v
                dict_value_3["Multplier"] = v
            elif k == "Last packet/Min rx interval" or k == "Min rx interval":
                dict_value_3["Received/MinRxInt"] = v
            if flag == 0:
                dict_value_3[k] = v
            flag = 0
        return dict_value_3
    def dut_get_show_bfd_neighbors_details_pl3(self, show_info):
        """
        Function:show bfd neighbors details回显解析函数
        CLI命令:show bfd neighbors details
        回显信息示例:
Ruijie#show bfd neighbors details
OurAddr                         NeighAddr                             LD/RD      RH/RS     Holdown(mult)  State  Int
192.168.1.1                     192.168.1.2                         8192/8192    Up              0(3   )  Up     GigabitEthernet 3/8
Session state is Up and not using echo function.
Local Diag:   0,        Demand mode:   0,       Poll bit:   0
MinTxInt: 50000,          MinRxInt: 50000,           Multiplier:   3
Received MinRxInt 50000, Multiplier: 3
Holdown (hits): 150(0), Hello (hits): 50(22)
Rx Count: 12821, Rx Interval (ms) min/max/avg: 10/60/50
Tx Count: 12832, Tx Interval (ms) min/max/avg: 50/50/50
Registered protocols: OSPF
Uptime: 0:10:55
Last packet:
 Version          :         1                  - Diagnostic     : 0
 State bit        :        Up                  - Demand bit     : 0
 Poll bit         :         0                  - Final bit      : 0
 Multplier        :         3                  - Length         : 24
 My Discr         :      8192                  - Your Discr     : 8192
 Min tx interval  :     50000                  - Min rx interval: 50000
 Min Echo interval:     50000

Ruijie#

        Returns:
{'Uptime': '0:10:55'
'Registered protocols': 'OSPF'
'Last packet/Final bit': '0'
'Hello (hits)': '50(22)'
'Tx Interval (ms) min/max/avg': '50/50/50'
'192.168.1.1/State': 'Up'
'Received/MinRxInt': '50000'
'MinTxInt': '50000'
'Local Diag': '0'
'MinRxInt': '50000'
'Last packet/Multplier': '3'
'Rx Count': '12821'
'Demand mode': '0'
'Last packet/My Discr': '8192'
'Poll bit': '0'
'192.168.1.1/Holdown(mult)': '0(3   )'
'Last packet/Min tx interval': '50000'
'Holdown (hits)': '150(0)'
'Last packet/Your Discr': '8192'
'Last packet/Poll bit': '0'
'Multiplier': '3'
'Last packet/State bit': 'Up'
'Last packet/Diagnostic': '0'
'Tx Count': '12832'
'192.168.1.1/NeighAddr': '192.168.1.2'
'192.168.1.1/RH/RS': 'Up'
'Last packet/Version': '1'
'192.168.1.1/LD/RD': '8192/8192'
'Received/Multiplier': '3'
'Last packet/Length': '24'
'Min Echo interval': '50000'
'192.168.1.1/Int': 'GigabitEthernet 3/8'
'Last packet/Demand bit': '0'
'Rx Interval (ms) min/max/avg': '10/60/50'
'OurAddr_list': ['192.168.1.1'], 'Last packet/Min rx interval': '50000'
'Session state': 'Up and not using echo function.'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bfd neighbors details | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = show_info.split("\n")
        ouraddr_num = 0
        new_info_list = []
        for value in show_info_list:
            if "OurAddr" in value:
                ouraddr_num = ouraddr_num + 1
            if ouraddr_num > 1:
                break
            else:
                new_info_list.append(value)
        show_info = "\n".join(new_info_list)

        value_title = 'OurAddr'
        length_list = []
        dict_value = {}
        table_info = []
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        length = len(dut_info_split)
        for i in range(length):
            if re.match('Last packet:', dut_info_split[i]):
                dut_info_split[i] = ''
                break
        for i in range(length):
            if re.match('Received MinRxInt', dut_info_split[i]):
                matchObj = re.match('Received (MinRxInt)(.*), (Multiplier):(.*)', dut_info_split[i])
                dict_value['Received/' + matchObj.group(1).strip()] = matchObj.group(2).strip()
                dict_value['Received/' + matchObj.group(3).strip()] = matchObj.group(4).strip()
                dut_info_split[i] = ''
                break
        for i in range(length):
            if re.match('OurAddr', dut_info_split[i]):
                table_info.append(dut_info_split[i])
                dut_info_split[i] = ''
            elif re.match('\d+.\d+.\d+.\d+', dut_info_split[i]):
                table_info.append(dut_info_split[i])
                dut_info_split[i] = ''
            else:
                pass
        while '' in dut_info_split:
            dut_info_split.remove('')
        length = len(dut_info_split)
        newString = ''
        for i in range(length):
            newString = newString + show_info_split[i] + ','
        dut_info_split = newString.split(',')
        length = len(dut_info_split)
        for i in range(length):
            if re.match('(.*):(.*)-(.*):(.*)', dut_info_split[i]):
                matchObj = re.match('(.*):(.*)-(.*):(.*)', dut_info_split[i])
                dict_value['Last packet/' + matchObj.group(1).strip()] = matchObj.group(2).strip()
                dict_value['Last packet/' + matchObj.group(3).strip()] = matchObj.group(4).strip()
            else:
                if re.match('.* is .*', dut_info_split[i]):
                    matchObj = re.match('(.*) is (.*)', dut_info_split[i])
                    dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
                elif re.match('.*:.*', dut_info_split[i]):
                    matchObj = re.match('(.*?):(.*)', dut_info_split[i])
                    dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
                else:
                    if re.match('.* \d+', dut_info_split[i]):
                        matchObj = re.match('(.*) (\d+)', dut_info_split[i])
                        dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
                    else:
                        pass
        ######################################################################################
        length = len(table_info)
        for i in range(length):
            if re.match('OurAddr', table_info[i]):
                line_split = table_info[i].split(' ')
                sum = 0
                space_length_list = []
                word_lenggth_list = []
                for j in range(len(line_split)):
                    if j == 0:
                        pass
                    else:
                        if line_split[j] != '':
                            space_length_list.append(sum + 1)
                            sum = 0
                        else:
                            sum = sum + 1
                while '' in line_split:
                    line_split.remove('')
                for j in line_split:
                    word_lenggth_list.append(len(j))
                space_length_list[1] = space_length_list[1] - 5
                word_lenggth_list[2] = word_lenggth_list[2] + 5
                for j in range(len(space_length_list)):
                    length_list.append(word_lenggth_list[j] + space_length_list[j])
                length_list.append(32)
                break
        length_list_len = len(length_list)
        print length_list
        length = len(table_info)
        OurAddr_list = []
        for i in range(length):
            sight = 0
            sight_sum = 0
            list_len = []
            for j in range(length_list_len):
                sight_sum = sight_sum + int(length_list[j])
                row_value = table_info[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.strip()
                list_len.append(row_value)
            if list_len[0] == value_title:
                title = list_len
            elif list_len[0] != value_title:
                OurAddr_list.append(list_len[0])
                for s in range(1, length_list_len):
                    key_name = '%s/%s' % (list_len[0], title[s])
                    dict_value[key_name] = list_len[s].strip()
            dict_value['OurAddr_list'] = OurAddr_list
        dict_value_2 = {}
        for k, v in dict_value.items():
            if k == "Local Diag":
                if re.match("(\d+)\s+Demand mode: (\d+)\s+Poll bit: (\d+)", v.strip()):
                    obj = re.match("(\d+)\s+Demand mode: (\d+)\s+Poll bit: (\d+)", v.strip())
                    dict_value_2[k] = obj.group(1)
                    dict_value_2["Demand mode"] = obj.group(2)
                    dict_value_2["Poll bit"] = obj.group(3)
            # elif k == "Actual TxInt(ms)":
            #     if re.match("(\d+)\s+DetectInt\(ms\): (\d+)", v.strip()):
            #         obj = re.match("(\d+)\s+DetectInt\(ms\): (\d+)", v.strip())
            #         #dict_value_2["Received/MinRxInt"] = str(int(obj.group(1))*1000)
            #         dict_value_2["Actual TxInt(ms)"] = obj.group(1)
            #         dict_value_2["DetectInt(ms)"] = obj.group(2)
            elif k == "Local MinTxInt(ms)":
                if re.match("(\d+)\s+MinRxInt\(ms\): (\d+)\s+Multiplier: (\d+)", v.strip()):
                    obj = re.match("(\d+)\s+MinRxInt\(ms\): (\d+)\s+Multiplier: (\d+)", v.strip())
                    dict_value_2["Local MinTxInt(ms)"] = obj.group(1)
                    dict_value_2["MinRxInt"] = obj.group(2)
                    dict_value_2["Multiplier"] = obj.group(3)
            elif k == "Actual TxInt(ms)":
                if re.match("(\d+)\s+DetectInt(ms): (\d+)", v.strip()):
                    obj = re.match("(\d+)\s+DetectInt(ms): (\d+)", v.strip())
                    dict_value_2["Actual TxInt(ms)"] = obj.group(1)
                    dict_value_2["DetectInt(ms)"] = obj.group(2)
            elif k == "Up Dampening(sec)":
                if re.match("(\d+)\s+Client State: (\S+)", v.strip()):
                    obj = re.match("(\d+)\s+Client State: (\S+)", v.strip())
                    dict_value_2["Up Dampening(sec)"] = obj.group(1)
                    dict_value_2["Client State"] = obj.group(2)
            elif k == "Destination Port":
                if re.match("(\d+)\s+TTL: (\S+)", v.strip()):
                    obj = re.match("(\d+)\s+TTL: (\S+)", v.strip())
                    dict_value_2["Destination Port"] = obj.group(1)
                    dict_value_2["TTL"] = obj.group(2)
            # elif "/Interface" in k:
            #     v = self._dut_get_show_bfd_neighbors_details_format_intf(v)
            else:
                dict_value_2[k] = v
        dict_value_3 = {}
        flag = 0
        for k, v in dict_value_2.items():
            if "/Interface" in k:
                v = self._dut_get_show_bfd_neighbors_details_format_intf(v)
                dict_value_3[k.replace("Interface", "Int")] = v
            elif k == "Local MinTxInt(ms)":
                dict_value_3["MinTxInt"] = str(int(v) * 1000)
            # elif k == "Local MinRxInt(ms)":
            #     dict_value_3["MinRxInt"] = str(int(v)*1000)
            elif k == "MinRxInt":
                flag = 1
                dict_value_3["MinRxInt"] = str(int(v) * 1000)
                dict_value_3["MinRxInt_1"] = v
            # elif k == "Multiplier":
            #     dict_value_3["Multplier"] = v
            # elif k == "Actual TxInt(ms)":
            #     dict_value_3["Received/MinRxInt"] = str(int(v) * 1000)
            # elif k == "DetectInt(ms)":
            #     dict_value_3["Received/Multiplier"] = v
            elif k == "Last packet/Multiplier" or k == "Multiplier":
                dict_value_3["Received/Multplier"] = v
                dict_value_3["Received/Multiplier"] = v
                dict_value_3["Last packet/Multplier"] = v
                dict_value_3["Multplier"] = v
            elif k == "Last packet/Min rx interval" or k == "Min rx interval":
                dict_value_3["Received/MinRxInt"] = v
            if flag == 0:
                dict_value_3[k] = v
            flag = 0
        return dict_value_3
    def dut_get_show_bfd_neighbors_details_bak(self,show_info):
        show_info_split = show_info.split("\n")
        dict_value={}
        ouraddr_list=[]
        show_info_split_2 = []
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        # print show_info_split
        show_info_line = ""
        for line in show_info_split:
            if line == "":
                show_info_split_2.append(show_info_line)
                show_info_line=""
            elif "More" in line:
                matchObj = re.search(' --More--           (.*)',line)
                if show_info_line== "":
                    show_info_line = matchObj.group(1)
                else:
                    show_info_line = show_info_line+"\n"+matchObj.group(1)
            else:
                if show_info_line== "":
                    show_info_line = line
                else:
                    show_info_line = show_info_line+"\n"+line
        show_info_split_2.append(show_info_line)
        # print show_info_split_2
        for value in show_info_split_2:
            show_info_split_value = value.split("\n")
            print show_info_split_value
            length = len(show_info_split_value)
            for i in range(length):
                if re.search('OurAddr',show_info_split_value[i]):
                    value_title = show_info_split_value[i+1].split(" ")[0]
                    ouraddr_list.append(value_title)
                    value_title_split = re.split('\s+',show_info_split_value[i])
                    matchObj = re.match('(\d+\.\d+\.\d+\.\d+)\s+(\d+\.\d+\.\d+\.\d+)\s+(\d+\/\d+)\s+(\w+)\s+(\d+\(\d+\s+\))\s+(\w+)\s+(\w+\s\d+\/\d+)',show_info_split_value[i+1])
                    dict_value[value_title+"/"+value_title_split[0].strip()] = matchObj.group(1).strip()
                    dict_value[value_title+"/"+value_title_split[1].strip()] = matchObj.group(2).strip()
                    dict_value[value_title+"/"+value_title_split[2].strip()] = matchObj.group(3).strip()
                    dict_value[value_title+"/"+value_title_split[3].strip()] = matchObj.group(4).strip()
                    dict_value[value_title+"/"+value_title_split[4].strip()] = matchObj.group(5).strip()
                    dict_value[value_title+"/"+value_title_split[5].strip()] = matchObj.group(6).strip()
                    dict_value[value_title+"/"+value_title_split[6].strip()] = matchObj.group(7).strip()
                elif re.match('(.*):(.*)-(.*):(.*)',show_info_split_value[i]):
                    matchObj = re.match('(.*):(.*)-(.*):(.*)',show_info_split_value[i])
                    dict_value[value_title+'/Last packet/'+matchObj.group(1).strip()] = matchObj.group(2).strip()
                    dict_value[value_title+'/Last packet/'+matchObj.group(3).strip()] = matchObj.group(4).strip()
                elif value_title in show_info_split_value[i]:
                    pass
                else:
                    if re.match('.* is .*',show_info_split_value[i]):
                        matchObj = re.match('(.*) is (.*)', show_info_split_value[i])
                        dict_value[value_title+"/"+matchObj.group(1).strip()] = matchObj.group(2).strip()
                    elif re.match('.*:.*,.*:.*,.*:.*',show_info_split_value[i]):
                        matchObj = re.match('(.*):(.*),(.*):(.*),(.*):(.*)', show_info_split_value[i])
                        dict_value[value_title+"/"+matchObj.group(1).strip()] = matchObj.group(2).strip()
                        dict_value[value_title+"/"+matchObj.group(3).strip()] = matchObj.group(4).strip()
                        dict_value[value_title+"/"+matchObj.group(5).strip()] = matchObj.group(6).strip()
                    elif re.match('.*:.*,.*:.*',show_info_split_value[i]):
                        matchObj = re.match('(.*):(.*),(.*):(.*)', show_info_split_value[i])
                        dict_value[value_title+"/"+matchObj.group(1).strip()] = matchObj.group(2).strip()
                        dict_value[value_title+"/"+matchObj.group(3).strip()] = matchObj.group(4).strip()
                    elif re.match('.*:.*',show_info_split_value[i]):
                        matchObj = re.match('(.*?):(.*)', show_info_split_value[i])
                        dict_value[value_title+"/"+matchObj.group(1).strip()] = matchObj.group(2).strip()
                    else:
                        if re.match('.* \d+',show_info_split_value[i]):
                            matchObj = re.match('(.*) (\d+)', show_info_split_value[i])
                            dict_value[value_title+"/"+matchObj.group(1).strip()] = matchObj.group(2).strip()
                        else:pass
                    # print value_title
        # print dict_value
        return dict_value
    def dut_get_show_bfd_neighbors_vrf_word_details(self,show_info):
        """
        Function:show bfd neighbors vrf 1 details回显解析函数
        CLI命令:show bfd neighbors vrf 1 details
        回显信息示例:
DUT1#show bfd neighbors vrf 1 details 
OurAddr                         NeighAddr                             LD/RD      RH/RS     Holdown(mult)  State  Int                 
192.168.1.1                     192.168.1.2                         8192/8192    Up              0(3   )  Up     GigabitEthernet 3/8 
Session state is Up and not using echo function.
Local Diag:   0,        Demand mode:   0,       Poll bit:   0
MinTxInt: 50000,          MinRxInt: 50000,           Multiplier:   3
Received MinRxInt 50000, Multiplier: 3
Holdown (hits): 150(0), Hello (hits): 50(52)
Rx Count: 24015, Rx Interval (ms) min/max/avg: 40/60/50 
Tx Count: 24062, Tx Interval (ms) min/max/avg: 50/50/50 
Registered protocols: VRRP 
Uptime: 0:20:13
Last packet:
 Version          :         1                  - Diagnostic     : 0
 State bit        :        Up                  - Demand bit     : 0
 Poll bit         :         0                  - Final bit      : 0
 Multplier        :         3                  - Length         : 24
 My Discr         :      8192                  - Your Discr     : 8192
 Min tx interval  :     50000                  - Min rx interval: 50000
 Min Echo interval:     50000

        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bfd neighbors vrf 1 details | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = show_info.split("\n")
        ouraddr_num = 0
        new_info_list = []
        for value in show_info_list:
            if "OurAddr" in value:
                ouraddr_num = ouraddr_num + 1
            if ouraddr_num > 1:
                break
            else:
                new_info_list.append(value)
        show_info = "\n".join(new_info_list)

        value_title = 'OurAddr'
        length_list = []
        dict_value = {}
        table_info = []
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        length = len(dut_info_split)
        for i in range(length):
            if re.match('Last packet:',dut_info_split[i]):
                dut_info_split[i]=''
                break
        for i in range(length):
            if re.match('Received MinRxInt',dut_info_split[i]):
                matchObj = re.match('Received (MinRxInt)(.*), (Multiplier):(.*)', dut_info_split[i])
                dict_value['Received/' + matchObj.group(1).strip()] = matchObj.group(2).strip()
                dict_value['Received/' + matchObj.group(3).strip()] = matchObj.group(4).strip()
                dut_info_split[i] = ''
                break
        for i in range(length):
            if re.match('OurAddr', dut_info_split[i]):
                table_info.append(dut_info_split[i])
                dut_info_split[i] = ''
            elif re.match('\d+.\d+.\d+.\d+', dut_info_split[i]):
                table_info.append(dut_info_split[i])
                dut_info_split[i] = ''
            else:
                pass
        while '' in dut_info_split:
            dut_info_split.remove('')
        length = len(dut_info_split)
        newString = ''
        for i in range(length):
            newString = newString + show_info_split[i] + ','
        dut_info_split = newString.split(',')
        length = len(dut_info_split)
        for i in range(length):
            if re.match('(.*):(.*)-(.*):(.*)',dut_info_split[i]):
                matchObj = re.match('(.*):(.*)-(.*):(.*)',dut_info_split[i])
                dict_value['Last packet/'+matchObj.group(1).strip()] = matchObj.group(2).strip()
                dict_value['Last packet/'+matchObj.group(3).strip()] = matchObj.group(4).strip()
            else:
                if re.match('.* is .*',dut_info_split[i]):
                    matchObj = re.match('(.*) is (.*)', dut_info_split[i])
                    dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
                elif re.match('.*:.*',dut_info_split[i]):
                    matchObj = re.match('(.*?):(.*)', dut_info_split[i])
                    dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
                else:
                    if re.match('.* \d+',dut_info_split[i]):
                        matchObj = re.match('(.*) (\d+)', dut_info_split[i])
                        dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
                    else:pass
        ######################################################################################
        length = len(table_info)
        for i in range(length):
            if re.match('OurAddr', table_info[i]):
                line_split = table_info[i].split(' ')
                sum = 0
                space_length_list = []
                word_lenggth_list = []
                for j in range(len(line_split)):
                    if j == 0:
                        pass
                    else:
                        if line_split[j] != '':
                            space_length_list.append(sum + 1)
                            sum = 0
                        else:
                            sum = sum + 1
                while '' in line_split:
                    line_split.remove('')
                for j in line_split:
                    word_lenggth_list.append(len(j))
                space_length_list[1] = space_length_list[1]-5
                word_lenggth_list[2] = word_lenggth_list[2]+5
                for j in range(len(space_length_list)):
                    length_list.append(word_lenggth_list[j] + space_length_list[j])
                length_list.append(32)
                break
        length_list_len = len(length_list)
        length = len(table_info)
        OurAddr_list = []
        for i in range(length):
            sight = 0
            sight_sum = 0
            list_len = []
            for j in range(length_list_len):
                sight_sum = sight_sum + int(length_list[j])
                row_value = table_info[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.strip()
                list_len.append(row_value)
            if list_len[0] == value_title:
                title = list_len
            elif list_len[0] != value_title:
                OurAddr_list.append(list_len[0])
                for s in range(1, length_list_len):
                    key_name = '%s/%s' % (list_len[0], title[s])
                    dict_value[key_name] = list_len[s].strip()
            dict_value['OurAddr_list'] = OurAddr_list
        if "RH/RS" in show_info:
            return dict_value
        dict_value_2 = {}
        for k, v in dict_value.items():
            if k == "Local Diag":
                if re.match("(\d+)\s+Demand mode: (\d+)\s+Poll bit: (\d+)", v.strip()):
                    obj = re.match("(\d+)\s+Demand mode: (\d+)\s+Poll bit: (\d+)", v.strip())
                    dict_value_2[k] = obj.group(1)
                    dict_value_2["Demand mode"] = obj.group(2)
                    dict_value_2["Poll bit"] = obj.group(3)
            # elif k == "Actual TxInt(ms)":
            #     if re.match("(\d+)\s+DetectInt\(ms\): (\d+)", v.strip()):
            #         obj = re.match("(\d+)\s+DetectInt\(ms\): (\d+)", v.strip())
            #         #dict_value_2["Received/MinRxInt"] = str(int(obj.group(1))*1000)
            #         dict_value_2["Actual TxInt(ms)"] = obj.group(1)
            #         dict_value_2["DetectInt(ms)"] = obj.group(2)
            elif k == "Local MinTxInt(ms)":
                if re.match("(\d+)\s+MinRxInt\(ms\): (\d+)\s+Multiplier: (\d+)", v.strip()):
                    obj = re.match("(\d+)\s+MinRxInt\(ms\): (\d+)\s+Multiplier: (\d+)", v.strip())
                    dict_value_2["Local MinTxInt(ms)"] = obj.group(1)
                    dict_value_2["MinRxInt"] = obj.group(2)
                    dict_value_2["Multiplier"] = obj.group(3)
            elif k == "Actual TxInt(ms)":
                if re.match("(\d+)\s+DetectInt(ms): (\d+)", v.strip()):
                    obj = re.match("(\d+)\s+DetectInt(ms): (\d+)", v.strip())
                    dict_value_2["Actual TxInt(ms)"] = obj.group(1)
                    dict_value_2["DetectInt(ms)"] = obj.group(2)
            elif k == "Up Dampening(sec)":
                if re.match("(\d+)\s+Client State: (\S+)", v.strip()):
                    obj = re.match("(\d+)\s+Client State: (\S+)", v.strip())
                    dict_value_2["Up Dampening(sec)"] = obj.group(1)
                    dict_value_2["Client State"] = obj.group(2)
            elif k == "Destination Port":
                if re.match("(\d+)\s+TTL: (\S+)", v.strip()):
                    obj = re.match("(\d+)\s+TTL: (\S+)", v.strip())
                    dict_value_2["Destination Port"] = obj.group(1)
                    dict_value_2["TTL"] = obj.group(2)
            # elif "/Interface" in k:
            #     v = self._dut_get_show_bfd_neighbors_details_format_intf(v)
            else:
                dict_value_2[k] = v
        dict_value_3 = {}
        flag = 0
        for k, v in dict_value_2.items():
            if "/Interface" in k:
                v = self._dut_get_show_bfd_neighbors_details_format_intf(v)
                dict_value_3[k.replace("Interface", "Int")] = v
            elif k == "Local MinTxInt(ms)":
                dict_value_3["MinTxInt"] = str(int(v) * 1000)
            # elif k == "Local MinRxInt(ms)":
            #     dict_value_3["MinRxInt"] = str(int(v)*1000)
            elif k == "MinRxInt":
                flag = 1
                dict_value_3["MinRxInt"] = str(int(v) * 1000)
                dict_value_3["MinRxInt_1"] = v
            # elif k == "Multiplier":
            #     dict_value_3["Multplier"] = v
            # elif k == "Actual TxInt(ms)":
            #     dict_value_3["Received/MinRxInt"] = str(int(v) * 1000)
            # elif k == "DetectInt(ms)":
            #     dict_value_3["Received/Multiplier"] = v
            elif k == "Last packet/Multiplier" or k == "Multiplier":
                dict_value_3["Received/Multplier"] = v
                dict_value_3["Received/Multiplier"] = v
                dict_value_3["Last packet/Multplier"] = v
                dict_value_3["Multplier"] = v
            elif k == "Last packet/Min rx interval" or k == "Min rx interval":
                dict_value_3["Received/MinRxInt"] = v
            if flag == 0:
                dict_value_3[k] = v
            flag = 0
        return dict_value_3
    def dut_get_show_ip_urpf_interface_dutport(self,show_info):
        """
        Function:show ip urpf interface <dutport>回显解析函数
        CLI命令:show ip urpf interface <dutport>
        回显信息示例:
Ruijie# show ip urpf interface gigabitEthernet 0/0/1
IP verify source reachable-via RX
IP verify URPF drop-rate notify disabled
IP verify URPF notification threshold is 1000pps 
Number of drop packets in this interface is 124
Number of drop-rate notification counts in this interface is 0

        Returns:
{"Number of drop packets in this interface": "124"
"IP verify source reachable-via": "RX"
"Number of drop-rate notification counts in this interface": "0"
"IP verify URPF notification threshold": "1000pps"
"IP verify URPF drop-rate notify": "disabled"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip urpf interface <dutport> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        length = len(dut_info_split)
        for i in range(length):
            if re.match('IP verify source',dut_info_split[i]):
                matchObj = re.match('(IP verify source.*) (.*)',dut_info_split[i])
                dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
            elif re.match('IP verify URPF drop-rate',dut_info_split[i]):
                matchObj = re.match('(IP verify URPF drop-rate.*) (.*)',dut_info_split[i])
                dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
            elif re.match('.* is .*',dut_info_split[i]):
                matchObj = re.match('(.*) is (.*)',dut_info_split[i])
                dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
            else:pass
        return dict_value
    def dut_get_show_snmp_user(self, show_info):
        """
        Function:show snmp user回显解析函数
        CLI命令:show snmp user
        回显信息示例:
WS5708#show snmp user 

User name: admin
Engine ID: 8000131103542548261789
storage-type: permanent     active
Security level: auth priv
Auth protocol: SHA
Auth key: b7 15 f2 9e f0 bc c1 ca 21 f2 78 2c 70 52 4a 3b f1 aa e7 f0 
Priv protocol: DES
Priv key:  b7 15 f2 9e f0 bc c1 ca 21 f2 78 2c 70 52 4a 3b 
Group-name: group1



User name: admin1
Engine ID: 8000131103542548261789
storage-type: permanent     active
Security level: no auth no priv
Auth protocol: None
Auth key: 
Priv protocol: None
Priv key:  
Group-name: group1

        Returns:
{'admin1/Auth key': ''
'admin1/Security level': 'no auth no priv'
'admin/Auth protocol': 'SHA'
'User_name_list': ['admin'
'admin1'], 'admin1/Auth protocol': 'None'
'admin/Security level': 'auth priv'
'admin1/Priv protocol': 'None'
'admin/storage-type': 'permanent     active'
'admin/Priv key': 'b7 15 f2 9e f0 bc c1 ca 21 f2 78 2c 70 52 4a 3b'
'admin1/Engine ID': '8000131103542548261789'
'admin/Group-name': 'group1'
'admin1/Priv key': ''
'admin1/Group-name': 'group1'
'admin/Priv protocol': 'DES'
'admin1/storage-type': 'permanent     active'
'admin/Auth key': 'b7 15 f2 9e f0 bc c1 ca 21 f2 78 2c 70 52 4a 3b f1 aa e7 f0'
'admin/Engine ID': '8000131103542548261789'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show snmp user | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        User_name_list = []
        one_key = ''
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        length = len(show_info_split)
        for i in range(length):
            if re.match('User name',show_info_split[i]):
                matchObj = re.match('(.*):(.*)',show_info_split[i])
                one_key = matchObj.group(2).strip()
                User_name_list.append(one_key)
            else:
                if re.match('.*:.*', show_info_split[i]):
                    matchObj = re.match('(.*):(.*)', show_info_split[i])
                    dict_value[one_key+'/'+matchObj.group(1).strip()] = matchObj.group(2).strip()
                else:
                    pass
            dict_value['User_name_list'] = User_name_list
        return dict_value
    def dut_get_show_bfd_neighbors_ipv6_ipv6_details(self,show_info):
        show_list = self.dut_get_start_show_info(show_info)
        show_list_1 = []
        show_list_2 = []
        flag = 0
        for value in show_list:
            if "Session state is" in value or "Session Name" in value:
                flag = 1
                continue
            if flag == 0 :
                if ")" in value:
                    value_list = value.split(")")
                    value = value_list[0].strip()+")"+ value_list[1]
                show_list_1.append(value)
            else:
                show_list_2.append(value)
        show_1 = "\n".join(show_list_1)
        dict_value_1 = self.dut_show_autoget_blank_list(show_1,"OurAddr")
        dict_value_2 = {}
        for value in show_list_2:
            if "," in value:
                list1 = value.split(",")
                for list1_value in list1:
                    if ":" in list1_value:
                        list2 = list1_value.split(":")
                        dict_value_2[list2[0].strip()]= list2[1].strip()
            elif "-" in value:
                list1 = value.split("-")
                for list1_value in list1:
                    if ":" in list1_value:
                        list2 = list1_value.split(":")
                        dict_value_2[list2[0].strip()]= list2[1].strip()
            elif ":" in value:
                list2 = value.split(":")
                dict_value_2[list2[0].strip()]= list2[1].strip()
        dict_value = dict(dict_value_1.items()+dict_value_2.items())
        if "RH/RS" in show_info:
            return dict_value
        dict_value_2 = {}
        for k, v in dict_value.items():
            if k == "Local Diag":
                if re.match("(\d+)\s+Demand mode: (\d+)\s+Poll bit: (\d+)", v.strip()):
                    obj = re.match("(\d+)\s+Demand mode: (\d+)\s+Poll bit: (\d+)", v.strip())
                    dict_value_2[k] = obj.group(1)
                    dict_value_2["Demand mode"] = obj.group(2)
                    dict_value_2["Poll bit"] = obj.group(3)
            # elif k == "Actual TxInt(ms)":
            #     if re.match("(\d+)\s+DetectInt\(ms\): (\d+)", v.strip()):
            #         obj = re.match("(\d+)\s+DetectInt\(ms\): (\d+)", v.strip())
            #         #dict_value_2["Received/MinRxInt"] = str(int(obj.group(1))*1000)
            #         dict_value_2["Actual TxInt(ms)"] = obj.group(1)
            #         dict_value_2["DetectInt(ms)"] = obj.group(2)
            elif k == "Local MinTxInt(ms)":
                if re.match("(\d+)\s+MinRxInt\(ms\): (\d+)\s+Multiplier: (\d+)", v.strip()):
                    obj = re.match("(\d+)\s+MinRxInt\(ms\): (\d+)\s+Multiplier: (\d+)", v.strip())
                    dict_value_2["Local MinTxInt(ms)"] = obj.group(1)
                    dict_value_2["MinRxInt"] = obj.group(2)
                    dict_value_2["Multiplier"] = obj.group(3)
            elif k == "Actual TxInt(ms)":
                if re.match("(\d+)\s+DetectInt(ms): (\d+)", v.strip()):
                    obj = re.match("(\d+)\s+DetectInt(ms): (\d+)", v.strip())
                    dict_value_2["Actual TxInt(ms)"] = obj.group(1)
                    dict_value_2["DetectInt(ms)"] = obj.group(2)
            elif k == "Up Dampening(sec)":
                if re.match("(\d+)\s+Client State: (\S+)", v.strip()):
                    obj = re.match("(\d+)\s+Client State: (\S+)", v.strip())
                    dict_value_2["Up Dampening(sec)"] = obj.group(1)
                    dict_value_2["Client State"] = obj.group(2)
            elif k == "Destination Port":
                if re.match("(\d+)\s+TTL: (\S+)", v.strip()):
                    obj = re.match("(\d+)\s+TTL: (\S+)", v.strip())
                    dict_value_2["Destination Port"] = obj.group(1)
                    dict_value_2["TTL"] = obj.group(2)
            # elif "/Interface" in k:
            #     v = self._dut_get_show_bfd_neighbors_details_format_intf(v)
            else:
                dict_value_2[k] = v
        dict_value_3 = {}
        flag = 0
        for k, v in dict_value_2.items():
            if "/Interface" in k:
                v = self._dut_get_show_bfd_neighbors_details_format_intf(v)
                dict_value_3[k.replace("Interface", "Int")] = v
            elif k == "Local MinTxInt(ms)":
                dict_value_3["MinTxInt"] = str(int(v) * 1000)
            # elif k == "Local MinRxInt(ms)":
            #     dict_value_3["MinRxInt"] = str(int(v)*1000)
            elif k == "MinRxInt":
                flag = 1
                dict_value_3["MinRxInt"] = str(int(v) * 1000)
                dict_value_3["MinRxInt_1"] = v
            elif k == "Multiplier":
                dict_value_3["Multplier"] = v
                dict_value_3["Received/Multplier"] = v
                dict_value_3["Received/Multiplier"] = v
                dict_value_3["Last packet/Multplier"] = v
            # elif k == "Actual TxInt(ms)":
            #     dict_value_3["Received/MinRxInt"] = str(int(v) * 1000)
            # elif k == "DetectInt(ms)":
            #     dict_value_3["Received/Multiplier"] = v
            elif k == "Last packet/Multiplier" or k == "Multiplier":
                dict_value_3["Received/Multplier"] = v
                dict_value_3["Received/Multiplier"] = v
                dict_value_3["Last packet/Multplier"] = v
            elif k == "Last packet/Min rx interval" or k == "Min rx interval":
                dict_value_3["Received/MinRxInt"] = v
            if flag == 0:
                dict_value_3[k] = v
            flag = 0
        return dict_value_3
    def dut_get_show_bfd_neighbors_ipv4_ip_details(self,show_info):
        """
        Function:show bfd neighbors ipv4 x.x.x.x details回显解析函数
        CLI命令:show bfd neighbors ipv4 x.x.x.x details
        回显信息示例:
Ruijie#dut_get_show_bfd_neighbors_ipv6_ipv6_details4 192.168.1.2 details
OurAddr                         NeighAddr                             LD/RD      RH/RS     Holdown(mult)  State  Int                 
192.168.1.1                     192.168.1.2                         8192/8192    Up              0(3   )  Up     GigabitEthernet 3/8 
Session state is Up and not using echo function.
Local Diag:   0,        Demand mode:   0,       Poll bit:   0
MinTxInt: 50000,          MinRxInt: 50000,           Multiplier:   3
Received MinRxInt 50000, Multiplier: 3
Holdown (hits): 150(0), Hello (hits): 50(22)
Rx Count: 12821, Rx Interval (ms) min/max/avg: 10/60/50 
Tx Count: 12832, Tx Interval (ms) min/max/avg: 50/50/50 
Registered protocols: OSPF 
Uptime: 0:10:55
Last packet:
 Version          :         1                  - Diagnostic     : 0
 State bit        :        Up                  - Demand bit     : 0
 Poll bit         :         0                  - Final bit      : 0
 Multplier        :         3                  - Length         : 24
 My Discr         :      8192                  - Your Discr     : 8192
 Min tx interval  :     50000                  - Min rx interval: 50000
 Min Echo interval:     50000

        Returns:
{"Uptime": "0:10:55"
"Registered protocols": "OSPF"
"Hello (hits)": "50(22)"
"Final bit": "0"
"Tx Interval (ms) min/max/avg": "50/50/50"
"State bit": "Up"
"192.168.1.1/State": "Up"
"Received/MinRxInt": "50000"
"Version": "1"
"Local Diag": "0"
"MinRxInt": "50000"
"Rx Count": "12821"
"Demand mode": "0"
"Poll bit": "0"
"192.168.1.1/Holdown(mult)": "0(3   )"
"Holdown (hits)": "150(0)"
"Diagnostic": "0"
"Multiplier": "3"
"Your Discr": "8192"
"Min rx interval": "50000"
"Tx Count": "12832"
"192.168.1.1/RH/RS": "Up"
"192.168.1.1/LD/RD": "8192/8192"
"Received/Multiplier": "3"
"Min Echo interval": "50000"
"192.168.1.1/Int": "GigabitEthernet 3/8"
"192.168.1.1/NeighAddr": "192.168.1.2"
"Min tx interval": "50000"
"Rx Interval (ms) min/max/avg": "10/60/50"
"OurAddr_list": ["192.168.1.1"], "Length": "24"
"MinTxInt": "50000"
"Demand bit": "0"
"Multplier": "3"
"My Discr": "8192"
"Session state": "Up and not using echo function"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bfd neighbors ipv4 x.x.x.x details | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title = 'OurAddr'
        length_list = []
        dict_value = {}
        table_info = []
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        length = len(dut_info_split)
        for i in range(length):
            if re.match('Last packet:',dut_info_split[i]):
                dut_info_split[i]=''
                break
        for i in range(length):
            if re.match('Received MinRxInt',dut_info_split[i]):
                matchObj = re.match('Received (MinRxInt)(.*), (Multiplier):(.*)',dut_info_split[i])
                dict_value['Received/'+matchObj.group(1).strip()] = matchObj.group(2).strip()
                dict_value['Received/'+matchObj.group(3).strip()] = matchObj.group(4).strip()
                dut_info_split[i] = ''
                break
        for i in range(length):
            if re.match('OurAddr', dut_info_split[i]):
                table_info.append(dut_info_split[i])
                dut_info_split[i] = ''
            elif re.match('\d+.\d+.\d+.\d+', dut_info_split[i]):
                table_info.append(dut_info_split[i])
                dut_info_split[i] = ''
            else:
                pass
        while '' in dut_info_split:
            dut_info_split.remove('')
        length = len(dut_info_split)
        newString = ''
        for i in range(length):
            newString = newString + show_info_split[i] + ','
        dut_info_split = newString.split(',')
        length = len(dut_info_split)
        for i in range(length):
            if re.match('(.*):(.*)-(.*):(.*)',dut_info_split[i]):
                matchObj = re.match('(.*):(.*)-(.*):(.*)',dut_info_split[i])
                dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
                dict_value[matchObj.group(3).strip()] = matchObj.group(4).strip()
            else:
                if re.match('.* is .*',dut_info_split[i]):
                    matchObj = re.match('(.*) is (.*)', dut_info_split[i])
                    dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip().strip('.')
                elif re.match('.*:.*',dut_info_split[i]):
                    matchObj = re.match('(.*?):(.*)', dut_info_split[i])
                    dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
                else:
                    if re.match('.* \d+',dut_info_split[i]):
                        matchObj = re.match('(.*) (\d+)', dut_info_split[i])
                        dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
                    else:pass
        ######################################################################################
        length = len(table_info)
        for i in range(length):
            if re.match('OurAddr', table_info[i]):
                line_split = table_info[i].split(' ')
                sum = 0
                space_length_list = []
                word_lenggth_list = []
                for j in range(len(line_split)):
                    if j == 0:
                        pass
                    else:
                        if line_split[j] != '':
                            space_length_list.append(sum + 1)
                            sum = 0
                        else:
                            sum = sum + 1
                while '' in line_split:
                    line_split.remove('')
                for j in line_split:
                    word_lenggth_list.append(len(j))
                space_length_list[1] = space_length_list[1] - 5
                word_lenggth_list[2] = word_lenggth_list[2] + 5
                for j in range(len(space_length_list)):
                    length_list.append(word_lenggth_list[j] + space_length_list[j])
                length_list.append(32)
                break
        length_list_len = len(length_list)
        length = len(table_info)
        OurAddr_list = []
        for i in range(length):
            sight = 0
            sight_sum = 0
            list_len = []
            for j in range(length_list_len):
                sight_sum = sight_sum + int(length_list[j])
                row_value = table_info[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.strip()
                list_len.append(row_value)
            if list_len[0] == value_title:
                title = list_len
            elif list_len[0] != value_title:
                OurAddr_list.append(list_len[0])
                for s in range(1, length_list_len):
                    key_name = '%s/%s' % (list_len[0], title[s])
                    dict_value[key_name] = list_len[s].strip()
            dict_value['OurAddr_list'] = OurAddr_list
        if "RH/RS" in show_info:
            return dict_value
        dict_value_2 = {}
        for k, v in dict_value.items():
            if k == "Local Diag":
                if re.match("(\d+)\s+Demand mode: (\d+)\s+Poll bit: (\d+)", v.strip()):
                    obj = re.match("(\d+)\s+Demand mode: (\d+)\s+Poll bit: (\d+)", v.strip())
                    dict_value_2[k] = obj.group(1)
                    dict_value_2["Demand mode"] = obj.group(2)
                    dict_value_2["Poll bit"] = obj.group(3)
            # elif k == "Actual TxInt(ms)":
            #     if re.match("(\d+)\s+DetectInt\(ms\): (\d+)", v.strip()):
            #         obj = re.match("(\d+)\s+DetectInt\(ms\): (\d+)", v.strip())
            #         #dict_value_2["Received/MinRxInt"] = str(int(obj.group(1))*1000)
            #         dict_value_2["Actual TxInt(ms)"] = obj.group(1)
            #         dict_value_2["DetectInt(ms)"] = obj.group(2)
            elif k == "Local MinTxInt(ms)":
                if re.match("(\d+)\s+MinRxInt\(ms\): (\d+)\s+Multiplier: (\d+)", v.strip()):
                    obj = re.match("(\d+)\s+MinRxInt\(ms\): (\d+)\s+Multiplier: (\d+)", v.strip())
                    dict_value_2["Local MinTxInt(ms)"] = obj.group(1)
                    dict_value_2["MinRxInt"] = obj.group(2)
                    dict_value_2["Multiplier"] = obj.group(3)
            elif k == "Actual TxInt(ms)":
                if re.match("(\d+)\s+DetectInt(ms): (\d+)", v.strip()):
                    obj = re.match("(\d+)\s+DetectInt(ms): (\d+)", v.strip())
                    dict_value_2["Actual TxInt(ms)"] = obj.group(1)
                    dict_value_2["DetectInt(ms)"] = obj.group(2)
            elif k == "Up Dampening(sec)":
                if re.match("(\d+)\s+Client State: (\S+)", v.strip()):
                    obj = re.match("(\d+)\s+Client State: (\S+)", v.strip())
                    dict_value_2["Up Dampening(sec)"] = obj.group(1)
                    dict_value_2["Client State"] = obj.group(2)
            elif k == "Destination Port":
                if re.match("(\d+)\s+TTL: (\S+)", v.strip()):
                    obj = re.match("(\d+)\s+TTL: (\S+)", v.strip())
                    dict_value_2["Destination Port"] = obj.group(1)
                    dict_value_2["TTL"] = obj.group(2)
            # elif "/Interface" in k:
            #     v = self._dut_get_show_bfd_neighbors_details_format_intf(v)
            else:
                dict_value_2[k] = v
        dict_value_3 = {}
        flag = 0
        for k, v in dict_value_2.items():
            if "/Interface" in k:
                v = self._dut_get_show_bfd_neighbors_details_format_intf(v)
                dict_value_3[k.replace("Interface", "Int")] = v
            elif k == "Local MinTxInt(ms)":
                dict_value_3["MinTxInt"] = str(int(v) * 1000)
            # elif k == "Local MinRxInt(ms)":
            #     dict_value_3["MinRxInt"] = str(int(v)*1000)
            elif k == "MinRxInt":
                flag = 1
                dict_value_3["MinRxInt"] = str(int(v) * 1000)
                dict_value_3["MinRxInt_1"] = v
            # elif k == "Multiplier":
            #     dict_value_3["Multplier"] = v
            # elif k == "Actual TxInt(ms)":
            #     dict_value_3["Received/MinRxInt"] = str(int(v) * 1000)
            # elif k == "DetectInt(ms)":
            #     dict_value_3["Received/Multiplier"] = v
            elif k == "Last packet/Multiplier" or k == "Multiplier":
                dict_value_3["Received/Multplier"] = v
                dict_value_3["Received/Multiplier"] = v
                dict_value_3["Last packet/Multplier"] = v
                dict_value_3["Multplier"] = v
            elif k == "Last packet/Min rx interval" or k == "Min rx interval":
                dict_value_3["Received/MinRxInt"] = v
            if flag == 0:
                dict_value_3[k] = v
            flag = 0
        return dict_value_3

    def dut_get_show_logging_config(self,show_info):
        """
        Function:show logging config回显解析函数
        CLI命令:show logging config
        回显信息示例:
5848VAC#show logging config 
Syslog logging: disabled
  Console logging: level debugging, 4000 messages logged
  Monitor logging: level debugging, 0 messages logged
  Buffer logging: level debugging, 4729 messages logged
  Statistic log messages: disable 
  Statistic log messages to terminal: disable 
  Delay-send log messages to terminal: disable 
  Delay-send file name:syslog_ftp_server, Current write index:3, Current send index:3, Cycle:3600 seconds 
  Count log messages: disable 
  Trap logging: level informational, 0 message lines logged,0 fail 
  Delay-send logging: 729 message lines logged

        Returns:
{"Console logging/messages logged": "4000"
"Buffer logging/messages logged": "4729"
"Trap logging": "level informational"
"Buffer logging": "level debugging"
"Monitor logging/messages logged": "0"
"Statistic log messages to terminal": "disable"
"Trap logging/fail": "0"
"Count log messages": "disable"
"Statistic log messages": "disable"
"Syslog logging": "disabled"
"Delay-send file name": "syslog_ftp_server"
"Delay-send logging": "729 message lines logged"
"Console logging": "level debugging"
"Monitor logging": "level debugging"
"Delay-send log messages to terminal": "disable"
"Current send index": "3"
"Current write index": "3"
"Trap logging/message lines logged": "0"
"Cycle": "3600 seconds"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show logging config | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        logging_to_list = []
        show_info_split = show_info.split("\n")
        while '' in show_info_split:
            show_info_split.remove('')
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        length = len(dut_info_split)
        for i in range(length):
            if re.match('  Trap logging',dut_info_split[i]):
                matchObj = re.match('  (Trap logging):(.*),(.*\d+) (.*),(\d+) (.*)',dut_info_split[i])
                dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
                dict_value['Trap logging/'+matchObj.group(4).strip()] = matchObj.group(3).strip()
                dict_value['Trap logging/' + matchObj.group(6).strip()] = matchObj.group(5).strip()
                dut_info_split[i] = ''
                break
        while '' in show_info_split:
            show_info_split.remove('')
        length = len(dut_info_split)
        newString = ''
        for i in range(length):
            newString = newString + show_info_split[i] + ','
        dut_info_split = newString.split(',')
        length = len(dut_info_split)
        for i in range(length):
            if re.match('(.*):(.*)',dut_info_split[i]):
                matchObj = re.match('(.*):(.*)',dut_info_split[i])
                dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
            elif re.match('.*messages logged',dut_info_split[i]):
                matchObj = re.match('(.*\d+) (\w.*)',dut_info_split[i])
                if re.match('(.*):(.*)',dut_info_split[i-1]):
                    matchObj1 = re.match('(.*):(.*)', dut_info_split[i-1])
                    key = matchObj1.group(1).strip()+'/'+matchObj.group(2).strip()
                    dict_value[key] = matchObj.group(1).strip()
                else:pass
            elif re.match('    logging to',dut_info_split[i]):
                matchObj =re.match('(.*\w+)  (\d+.*)',dut_info_split[i])
                logging_to_list.append(matchObj.group(2).strip())
            else:pass
        if logging_to_list!=[]:
            dict_value['logging_to_list'] = logging_to_list
        return dict_value
    def dut_get_show_portsecurity_address(self,show_info):
        """
        Function:show port-security address回显解析函数
        CLI命令:show port-security address
        回显信息示例:
Ruijie(config-if-GigabitEthernet 1/0/15)#show port-security address 
NO.  VLAN  MacAddress      PORT                      TYPE       RemainingAge(mins)  STATUS   
---- ----- --------------- ------------------------- ---------- ------------------  ---------
1    1     5869.6c9d.b2d8  GigabitEthernet 1/0/15    Dynamic            --          active   
2    2     0000.779f.bf96  GigabitEthernet 1/0/15    Dynamic            --          active   
Ruijie(config-if-GigabitEthernet 1/0/15)#

        Returns:
{'5869.6c9d.b2d8/NO.': '1'
'5869.6c9d.b2d8/PORT': 'GigabitEthernet 1/0/15'
'0000.779f.bf96/STATUS': 'active'
'5869.6c9d.b2d8/TYPE': 'Dynamic'
'5869.6c9d.b2d8/VLAN': '1'
'MacAddress_list': ['5869.6c9d.b2d8'
'0000.779f.bf96'], '5869.6c9d.b2d8/RemainingAge(mins)': '--'
'0000.779f.bf96/TYPE': 'Dynamic'
'0000.779f.bf96/VLAN': '2'
'0000.779f.bf96/PORT': 'GigabitEthernet 1/0/15'
'0000.779f.bf96/NO.': '2'
'5869.6c9d.b2d8/STATUS': 'active'
'0000.779f.bf96/RemainingAge(mins)': '--'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show port-security address | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title = 'MacAddress'
        dict_value = {}
        table_start = 0
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        length = len(dut_info_split)
        for i in range(length):
            if re.search(value_title,dut_info_split[i]):
                table_start = i
                break
        (whippletree_list_1, cut_del_1) = self.dut_show_autoget_whippletree(table_start, length,dut_info_split)
        dut_info_split.remove(dut_info_split[cut_del_1])
        length = len(dut_info_split)
        dict_value = self.dut_show_autoget_form(table_start, length, value_title, whippletree_list_1,dut_info_split)
        return dict_value
    def dut_get_show_portsecurity_binding(self,show_info):
        value_title = 'MacAddress'
        dict_value = {}
        table_start = -1
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        length = len(dut_info_split)
        for i in range(length):
            if re.search(value_title,dut_info_split[i]):
                table_start = i
                break
        (whippletree_list_1, cut_del_1) = self.dut_show_autoget_whippletree(table_start, length,dut_info_split)
        dut_info_split.remove(dut_info_split[cut_del_1])
        length = len(dut_info_split)
        dict_value = self.dut_show_autoget_form(table_start, length, value_title, whippletree_list_1,dut_info_split)
        return dict_value
    def dut_get_show_dldp(self,show_info):
        """
        Function:show dldp回显解析函数
        CLI命令:show dldp
        回显信息示例:
dut1(config)#show dldp 
Interface  Type         Ip           Next-hop     Interval Retry Resume State
--------- ------- --------------- --------------- -------- ----- ------ -----
Vl10      Active  20.1.1.2        0.0.0.0         100      4     3      Down 
Gi0/1     Active  20.1.1.2        0.0.0.0         100      4     3      Down

        Returns:
{'Gi0/1/20.1.1.2/Ip': '20.1.1.2'
'Gi0/1/20.1.1.2/Type': 'Active'
'Gi0/1/20.1.1.2/Resume': '3'
'Gi0/1/20.1.1.2/Interval': '100'
'Gi0/1/20.1.1.2/Retry': '4'
'Gi0/1/20.1.1.2/State': 'Down'
'Vl10/20.1.1.2/Next-hop': '0.0.0.0'
'Gi0/1/20.1.1.2/Next-hop': '0.0.0.0'
'Vl10/20.1.1.2/Type': 'Active'
'Vl10/20.1.1.2/Ip': '20.1.1.2'
'Vl10/20.1.1.2/State': 'Down'
'Vl10/20.1.1.2/Retry': '4'
'Vl10/20.1.1.2/Resume': '3'
'Interface/Ip_list': ['Vl10/20.1.1.2'
'Gi0/1/20.1.1.2'], 'Vl10/20.1.1.2/Interval': '100'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show dldp | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title = 'Interface/Ip'
        length_list = []
        dict_value = {}
        table_info = []
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        while '' in dut_info_split:
            dut_info_split.remove('')
        length = len(dut_info_split)
        for i in range(length):
            if re.match('---+',dut_info_split[i]):
                line_info = dut_info_split[i]
                line_info_split = line_info.split(' ')
                while '' in line_info_split:
                    line_info_split.remove('')
                for j in line_info_split:
                    length_list.append(len(j)+1)
                length_list[-1] = 32
                dut_info_split.remove(dut_info_split[i])
                break
        length_list_len = len(length_list)
        length = len(dut_info_split)
        top_list = []
        for i in range(length):
            sight = 0
            sight_sum = 0
            list_len = []
            for j in range(length_list_len):
                sight_sum = sight_sum + int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.strip()
                list_len.append(row_value)
            if list_len[0] == 'Interface':
                title = list_len
            elif list_len[0] != 'Interface':
                top_list.append(list_len[0]+'/'+list_len[2])
                for s in range(1, length_list_len):
                    if s == 2:
                        pass
                    key_name = list_len[0]+'/'+list_len[2]+'/'+title[s]
                    dict_value[key_name] = list_len[s].strip()
            dict_value['Interface/Ip_list'] = top_list
        return dict_value
    def dut_get_show_usergroup_authentication_more(self,show_info):
        """
        Function:show user-group authentication more回显解析函数
        CLI命令:show user-group authentication more
        回显信息示例:
Ruijie#show user-group authentication more

time-list-cnt: 70
NO.    MAC address     set dhcp  online  last login time            user-group             
------ --------------- --------- ------- -------------------------- -----------------------
     1 6666.6666.6667  yes       off     Thu Oct 26 14:52:57 2017   root
     2 6666.6666.6668  yes       off     Thu Oct 26 14:52:57 2017   root

        Returns:
{'6666.6666.6668/online': 'off'
'6666.6666.6667/set dhcp': 'yes'
'time-list-cnt': '70'
'6666.6666.6668/NO.': '2'
'6666.6666.6667/user-group': 'root'
'6666.6666.6668/last login time': 'Thu Oct 26 14:52:57 2017'
'MAC address_list': ['6666.6666.6667'
'6666.6666.6668'], '6666.6666.6668/set dhcp': 'yes'
'6666.6666.6667/last login time': 'Thu Oct 26 14:52:57 2017'
'6666.6666.6667/NO.': '1'
'6666.6666.6668/user-group': 'root'
'6666.6666.6667/online': 'off'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show user-group authentication more | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title = 'MAC address'
        dict_value = {}
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        while '' in dut_info_split:
            dut_info_split.remove('')
        length = len(dut_info_split)
        for i in range(length):
            if re.match('.*:.*',dut_info_split[i]):
                matchObj = re.match('(.*):(.*)',dut_info_split[i])
                dict_value[matchObj.group(1).strip()]=matchObj.group(2).strip()
                dut_info_split.remove(dut_info_split[i])
                break
        length = len(dut_info_split)
        (whippletree_list_1, cut_del_1) = self.dut_show_autoget_whippletree(0, length,dut_info_split)
        dut_info_split.remove(dut_info_split[cut_del_1])
        length = len(dut_info_split)
        dict_value1 = self.dut_show_autoget_form(0, length, value_title, whippletree_list_1,dut_info_split)
        dict_value = dict(dict_value.items()+dict_value1.items())
        return dict_value
    def dut_get_show_memory(self,show_info):
        """
        Function:show memory回显解析函数
        CLI命令:show memory
        回显信息示例:
WS5708#show memory 
System Memory: 2097152KB total, 1067116KB used, 1030036KB free, 50.8% used rate
Used detail:   237592KB active, 67956KB inactive, 66372KB mapped, 710528KB slab, 81416KB core, 1088KB others

PID     Vsd     Text    Rss     Data    Stack   Total   Process
13062   0       928     584     656     84      4508    sleep
10907   0       176     1956    45312   84      49880   rl-con/0
2545    0       176     1828    45312   84      49880   rl-con/1459
2526    0       192     2696    148052  84      152804  sysha
2519    0       64      2056    8520    84      12968   sntp.elf
2511    0       40      2236    33384   84      37860   mtdoops-cli
2466    0       392     6584    193492  84      206684  app_idyu_main
2429    0       176     1572    24960   84      29272   rl-con/1458
2423    0       832     23696   94928   84      131980  snooping.elf
2415    0       244     4840    1348    84      16128   wds_proc
2408    0       96      4424    9504    84      22636   wvas_med.elf
2398    0       644     10768   121316  84      140792  wvas_wis.elf
2388    0       44      3852    9160    84      21812   wvas_wloc.elf
2372    0       1480    1616    132     84      4584    cls-sshd
2361    0       44      4032    9256    84      22484   wvas_hwd.elf
2350    0       72      3852    8580    84      21472   wvas_fss.elf
2349    0       16      1588    8252    84      12348   lua
2340    0       36      3908    964     84      13724   wvas_sa.elf
2334    0       208     20480   45612   84      80184   dns_snp.elf
2328    0       604     6140    62328   84      78472   wvas_wids.elf
2315    0       48      3952    9236    84      21660   exec_cmd.elf
2311    0       224     4416    1224    84      14808   sfn_thread
2301    0       48      3884    948     84      13708   wvas_bt.elf
2257    0       156     4188    8620    84      22380   wlan-intf-mib.e
2238    0       112     2368    33348   84      38112   tftpd.elf
2205    0       240     2524    33164   84      38288   ms_cm
2188    0       180     2716    33128   84      39308   ftp_server.elf
2162    0       184     3532    33112   84      39140   rmond
2141    0       64      2164    20804   84      25160   ftpc_cli.elf
2113    0       200     2988    20900   84      27156   ntp.elf
2048    0       272     18280   33684   84      63452   wbs_sec.elf
1984    0       396     4392    53740   84      61620   local_eap
1971    0       68      19608   21152   84      56440   arp_proxy.elf
1962    0       312     3516    20876   84      27252   dhcp6c.elf
1956    0       208     4552    20904   84      34416   dhcpc.elf
1947    0       80      716     204     84      2932    ftpd-tipc
1946    0       460     19612   37772   84      70352   dhcp6.elf
1938    0       60      18200   8656    84      40112   nd_proxy.elf
1928    0       492     18440   8768    84      40464   vrrp.elf
1918    0       736     23068   55852   84      93568   dhcp.elf
1906    0       1744    25232   191464  84      232388  dot1x
1899    0       156     3500    34812   84      43112   tacplusd
1894    0       760     5776    151680  84      162704  rdsd
1889    0       2344    50692   266652  84      309144  wbamain
1884    0       184     11020   81532   84      99988   termid.elf
1880    0       592     5280    47188   84      63320   acld
1876    0       228     5928    8704    84      27128   gsnd.elf
1871    0       1920    21640   68140   84      104272  sccd
1867    0       336     20700   91260   84      127596  bonjour_gateway
1788    0       172     17128   8604    84      32492   span.elf
1779    0       192     2884    33544   84      38900   nat.elf
1739    0       24      868     252     84      2924    tftp_tipc_serve
1733    0       212     17792   8708    84      33524   lacp.elf
1724    0       416     20200   21204   84      56296   igmp_snp.elf
1723    0       264     18232   21096   84      48664   msf.elf
1708    0       60      3904    1068    84      13904   data_plane.e
1692    0       664     7432    10140   84      28624   wbs_ctl.elf
1688    0       1632    22964   10716   84      47648   wbs_mng.elf
1680    0       92      6024    9664    84      24680   app_auth.elf
1675    0       152     4880    42308   84      57040   apdm_ac.elf
1671    0       412     4908    1308    84      17104   rrm_ac.elf
1667    0       960     5480    82776   84      91264   snmpd
1663    0       136     3156    33136   84      44244   http_client.elf
1659    0       484     5412    1572    84      17932   wqosd.elf
1645    0       296     5788    57800   84      78548   httpd.elf
1641    0       36      1948    8516    84      12920   http_fpm.elf
1637    0       308     6632    62028   84      82196   wlogd.elf
1633    0       672     21504   62200   84      97888   roam.elf
1627    0       40      2588    16788   84      26560   ita.elf
1623    0       1072    3144    33364   84      41124   cwmp_gsoap.elf
1619    0       32      3964    71264   84      85724   acmg.elf
1615    0       36      3976    8572    84      21244   stamg_ui.elf
1614    0       1636    23892   63364   84      101040  stamgd.elf
1610    0       660     6176    128132  84      152840  cwmp.elf
1606    0       2720    9616    74436   84      97104   apmgd.elf
1602    0       152     5364    62044   84      77196   ript.elf
1592    0       744     4084    20976   84      32300   wlan_hbd.elf
1569    0       32      1788    520     84      10460   flinfod
1567    0       248     3624    66500   84      77496   fsui
1554    0       108     2400    57996   84      62812   psh_server
1547    0       244     2300    8716    84      13628   rdnd_server.
1541    0       104     5208    70276   84      85904   wlan_cli.elf
1535    0       824     3888    25044   84      36356   redis_server.el
1534    0       824     4144    25044   84      36356   redis_server.el
1533    0       824     4376    25044   84      36356   redis_server.el
1532    0       824     4468    25044   84      36356   redis_server.el
1531    0       824     4120    25044   84      36356   redis_server.el
1526    0       28      3012    61936   84      72452   redis_ctrl.elf
1518    0       1576    24956   66304   84      112856  capwap_server.e
1464    0       208     23288   66120   84      99128   wvlan.elf
1447    0       456     1492    8888    84      17664   klogd
1446    0       456     5368    88824   84      97784   syslogd
1441    0       56      4204    49996   84      65148   upgrade_mgmt
1440    0       328     5972    91356   84      112048  upgrade
1431    0       2460    7596    625104  84      638448  dm_app
1422    0       32      2856    33100   84      39808   password_policy
1416    0       456     1904    8888    84      17664   log-guard
1393    0       72      1992    480     84      4736    fpm_cli
1384    0       208     3276    90620   84      96248   tech-support
1380    0       180     3204    49884   84      61324   licns
1371    0       244     2656    8572    84      14100   tunnel.elf
1352    0       156     5200    295812  84      301472  telnetc
1348    0       720     4372    94808   84      103656  sshd
1323    0       60      2384    33132   84      38064   telnetd
1314    0       48      1720    8812    84      12376   octeon_demo
1305    0       276     2652    45424   84      50424   ping.elf
1298    0       1292    5448    8716    84      19424   ospfv3.elf
1294    0       152     4160    22304   84      36868   dns_client.elf
1290    0       500     5104    8716    84      18504   rip.elf
1286    0       1756    5864    8716    84      20008   ospf.elf
1282    0       228     4648    8700    84      18080   rpi.elf
1276    0       28      1880    16832   84      20796   af-key-cmd
1270    0       884     4312    21020   84      29332   nsm.elf
1254    0       472     19492   8888    84      39516   mstp.elf
1250    0       2184    23416   21736   84      59892   tcpip.elf
1246    0       792     23656   45604   84      75852   bridge.elf
1229    0       1092    5312    17744   84      26300   lsm.elf
1225    0       88      2264    8516    84      13536   timerange
1170    0       96      1900    476     84      4768    efmp_demo
1141    0       56      4024    9196    84      22292   wbs_dev.elf
1057    0       532     1072    29192   84      41008   cli-dump
1042    0       300     1780    33476   84      41212   tty_secu_enable
1026    0       932     10968   168692  84      184644  aaad
1006    0       392     4772    190012  84      201712  sysmon
997     0       300     4688    136196  84      143932  tty-admin
996     0       532     7288    176648  84      188648  cli-server
899     0       20      928     196     84      2976    coredump-mon
877     0       152     3832    114928  84      117884  ham
1       0       48      704     164     84      2016    init
WS5708#

        Returns:
{'1971/Data': '21152'
'1956/Stack': '84'
'1170/Rss': '1900'
'2311/Stack': '84'
'System Memory/used': '1067116'
'1270/Total': '29332'
'1431/Process': 'dm_app'
'1422/Total': '39808'
'2334/Text': '208'
'2408/Stack': '84'
'1637/Vsd': '0'
'2349/Process': 'lua'
'2429/Rss': '1572'
'System Memory/used rate': '50.8'
'1526/Vsd': '0'
'1675/Vsd': '0'
'Used detail/core': '81416'
'1464/Data': '66120'
'1246/Text': '792'
'2340/Stack': '84'
'1534/Data': '25044'
'1680/Rss': '6024'
'1534/Text': '824'
'1614/Total': '101040'
'1170/Data': '476'
'996/Text': '532'
'1447/Text': '456'
'1899/Vsd': '0'
'1229/Process': 'lsm.elf'
'1671/Data': '1308'
'1/Vsd': '0'
'1899/Text': '156'
'1290/Vsd': '0'
'2388/Stack': '84'
'1671/Vsd': '0'
'1928/Data': '8768'
'2340/Vsd': '0'
'1416/Process': 'log-guard'
'2361/Vsd': '0'
'1880/Text': '592'
'Used detail/others': '1088'
'1535/Total': '36356'
'1724/Data': '21204'
'1667/Rss': '5480'
'1348/Text': '720'
'1884/Stack': '84'
'1569/Rss': '1788'
'1371/Stack': '84'
'1592/Stack': '84'
'1633/Process': 'roam.elf'
'2349/Data': '8252'
'1229/Data': '17744'
'1708/Total': '13904'
'2257/Data': '8620'
'2301/Rss': '3884'
'1906/Process': 'dot1x'
'1876/Total': '27128'
'1348/Stack': '84'
'1688/Total': '47648'
'PID_list': ['13062'
'10907'
'2545'
'2526'
'2519'
'2511'
'2466'
'2429'
'2423'
'2415'
'2408'
'2398'
'2388'
'2372'
'2361'
'2350'
'2349'
'2340'
'2334'
'2328'
'2315'
'2311'
'2301'
'2257'
'2238'
'2205'
'2188'
'2162'
'2141'
'2113'
'2048'
'1984'
'1971'
'1962'
'1956'
'1947'
'1946'
'1938'
'1928'
'1918'
'1906'
'1899'
'1894'
'1889'
'1884'
'1880'
'1876'
'1871'
'1867'
'1788'
'1779'
'1739'
'1733'
'1724'
'1723'
'1708'
'1692'
'1688'
'1680'
'1675'
'1671'
'1667'
'1663'
'1659'
'1645'
'1641'
'1637'
'1633'
'1627'
'1623'
'1619'
'1615'
'1614'
'1610'
'1606'
'1602'
'1592'
'1569'
'1567'
'1554'
'1547'
'1541'
'1535'
'1534'
'1533'
'1532'
'1531'
'1526'
'1518'
'1464'
'1447'
'1446'
'1441'
'1440'
'1431'
'1422'
'1416'
'1393'
'1384'
'1380'
'1371'
'1352'
'1348'
'1323'
'1314'
'1305'
'1298'
'1294'
'1290'
'1286'
'1282'
'1276'
'1270'
'1254'
'1250'
'1246'
'1229'
'1225'
'1170'
'1141'
'1057'
'1042'
'1026'
'1006'
'997'
'996'
'899'
'877'
'1'], '1554/Process': 'psh_server'
'2328/Process': 'wvas_wids.elf'
'2511/Process': 'mtdoops-cli'
'1170/Text': '96'
'1876/Stack': '84'
'1984/Vsd': '0'
'997/Stack': '84'
'996/Rss': '7288'
'1441/Stack': '84'
'1567/Text': '248'
'997/Process': 'tty-admin'
'1627/Text': '40'
'2301/Vsd': '0'
'1298/Total': '19424'
'1947/Rss': '716'
'2328/Total': '78472'
'2113/Vsd': '0'
'1352/Process': 'telnetc'
'1286/Process': 'ospf.elf'
'1918/Stack': '84'
'1947/Data': '204'
'13062/Stack': '84'
'1282/Text': '228'
'1276/Total': '20796'
'1246/Total': '75852'
'1547/Data': '8716'
'1286/Data': '8716'
'1547/Rss': '2300'
'1928/Rss': '18440'
'2350/Total': '21472'
'1416/Rss': '1904'
'1290/Text': '500'
'1884/Total': '99988'
'1/Text': '48'
'1884/Rss': '11020'
'1352/Stack': '84'
'1464/Rss': '23288'
'1422/Rss': '2856'
'1532/Rss': '4468'
'1323/Rss': '2384'
'2423/Process': 'snooping.elf'
'1294/Rss': '4160'
'1623/Data': '33364'
'1246/Data': '45604'
'1984/Data': '53740'
'1298/Vsd': '0'
'2349/Stack': '84'
'1723/Rss': '18232'
'1/Stack': '84'
'2398/Process': 'wvas_wis.elf'
'1446/Rss': '5368'
'1290/Rss': '5104'
'1641/Vsd': '0'
'1876/Text': '228'
'1667/Text': '960'
'1947/Total': '2932'
'1614/Text': '1636'
'1680/Process': 'app_auth.elf'
'1971/Vsd': '0'
'1518/Process': 'capwap_server.e'
'13062/Total': '4508'
'1534/Rss': '4144'
'1532/Process': 'redis_server.el'
'2048/Data': '33684'
'1680/Stack': '84'
'1276/Rss': '1880'
'1692/Data': '10140'
'2205/Rss': '2524'
'2188/Text': '180'
'1567/Process': 'fsui'
'1554/Vsd': '0'
'1246/Process': 'bridge.elf'
'10907/Total': '49880'
'2545/Process': 'rl-con/1459'
'1645/Process': 'httpd.elf'
'2361/Process': 'wvas_hwd.elf'
'2188/Process': 'ftp_server.elf'
'1619/Vsd': '0'
'13062/Vsd': '0'
'1250/Process': 'tcpip.elf'
'1393/Data': '480'
'1314/Process': 'octeon_demo'
'1270/Process': 'nsm.elf'
'1554/Total': '62812'
'1871/Rss': '21640'
'1569/Process': 'flinfod'
'2315/Process': 'exec_cmd.elf'
'1393/Rss': '1992'
'1645/Total': '78548'
'1645/Rss': '5788'
'1962/Stack': '84'
'1270/Text': '884'
'1894/Data': '151680'
'2545/Rss': '1828'
'877/Rss': '3832'
'2545/Stack': '84'
'1440/Vsd': '0'
'1290/Process': 'rip.elf'
'2311/Rss': '4416'
'1447/Rss': '1492'
'1294/Stack': '84'
'1323/Data': '33132'
'2315/Total': '21660'
'1946/Text': '460'
'1788/Text': '172'
'1708/Rss': '3904'
'2113/Data': '20900'
'1956/Total': '34416'
'1779/Stack': '84'
'1518/Rss': '24956'
'1739/Vsd': '0'
'1416/Stack': '84'
'2141/Process': 'ftpc_cli.elf'
'1042/Total': '41212'
'1645/Text': '296'
'1724/Process': 'igmp_snp.elf'
'1962/Process': 'dhcp6c.elf'
'1675/Text': '152'
'996/Process': 'cli-server'
'1671/Rss': '4908'
'1286/Vsd': '0'
'1606/Stack': '84'
'996/Vsd': '0'
'2257/Process': 'wlan-intf-mib.e'
'1254/Data': '8888'
'1971/Total': '56440'
'1889/Process': 'wbamain'
'1393/Vsd': '0'
'1867/Rss': '20700'
'2526/Text': '192'
'1526/Text': '28'
'1788/Total': '32492'
'1393/Stack': '84'
'2526/Vsd': '0'
'1384/Vsd': '0'
'1305/Vsd': '0'
'System Memory/total': '2097152'
'1170/Vsd': '0'
'997/Total': '143932'
'2340/Total': '13724'
'1623/Process': 'cwmp_gsoap.elf'
'2328/Rss': '6140'
'1671/Process': 'rrm_ac.elf'
'1623/Total': '41124'
'2415/Vsd': '0'
'2372/Rss': '1616'
'1671/Total': '17104'
'997/Vsd': '0'
'1518/Total': '112856'
'1663/Rss': '3156'
'1962/Total': '27252'
'1535/Vsd': '0'
'1956/Vsd': '0'
'1688/Process': 'wbs_mng.elf'
'2188/Stack': '84'
'1447/Stack': '84'
'2466/Vsd': '0'
'2519/Data': '8520'
'2328/Text': '604'
'1899/Process': 'tacplusd'
'1956/Data': '20904'
'1971/Text': '68'
'1352/Vsd': '0'
'1619/Text': '32'
'1298/Data': '8716'
'1441/Text': '56'
'1314/Vsd': '0'
'2238/Rss': '2368'
'2511/Data': '33384'
'2141/Data': '20804'
'2048/Stack': '84'
'1894/Vsd': '0'
'1547/Vsd': '0'
'1680/Data': '9664'
'1323/Process': 'telnetd'
'1348/Vsd': '0'
'2350/Text': '72'
'1633/Total': '97888'
'1971/Rss': '19608'
'1170/Stack': '84'
'1876/Process': 'gsnd.elf'
'2429/Stack': '84'
'899/Vsd': '0'
'1526/Stack': '84'
'2415/Text': '244'
'899/Stack': '84'
'1659/Stack': '84'
'1637/Rss': '6632'
'1663/Text': '136'
'1290/Data': '8716'
'2350/Rss': '3852'
'1422/Process': 'password_policy'
'1464/Total': '99128'
'1416/Vsd': '0'
'1250/Rss': '23416'
'1692/Stack': '84'
'1422/Vsd': '0'
'2188/Total': '39308'
'1641/Text': '36'
'1371/Vsd': '0'
'1276/Vsd': '0'
'1057/Process': 'cli-dump'
'1286/Total': '20008'
'1867/Text': '336'
'1906/Text': '1744'
'2048/Process': 'wbs_sec.elf'
'2398/Total': '140792'
'1675/Stack': '84'
'1615/Text': '36'
'13062/Rss': '584'
'1384/Data': '90620'
'1733/Vsd': '0'
'1416/Text': '456'
'1659/Text': '484'
'1348/Total': '103656'
'2466/Text': '392'
'1282/Stack': '84'
'1141/Text': '56'
'1290/Stack': '84'
'1531/Rss': '4120'
'2162/Rss': '3532'
'2361/Rss': '4032'
'1229/Total': '26300'
'1229/Vsd': '0'
'2415/Data': '1348'
'2334/Data': '45612'
'1938/Total': '40112'
'1569/Vsd': '0'
'1057/Vsd': '0'
'1/Data': '164'
'1918/Process': 'dhcp.elf'
'877/Total': '117884'
'1633/Text': '672'
'2388/Vsd': '0'
'2361/Total': '22484'
'1739/Rss': '868'
'1246/Vsd': '0'
'1956/Text': '208'
'2466/Stack': '84'
'1141/Total': '22292'
'2388/Total': '21812'
'1534/Vsd': '0'
'1532/Stack': '84'
'2205/Process': 'ms_cm'
'2257/Stack': '84'
'2238/Total': '38112'
'2372/Text': '1480'
'1880/Total': '63320'
'1610/Data': '128132'
'1225/Total': '13536'
'1688/Text': '1632'
'2188/Vsd': '0'
'2466/Process': 'app_idyu_main'
'1610/Total': '152840'
'1294/Vsd': '0'
'1464/Process': 'wvlan.elf'
'1675/Rss': '4880'
'1633/Rss': '21504'
'2205/Data': '33164'
'1535/Process': 'redis_server.el'
'1006/Process': 'sysmon'
'1602/Total': '77196'
'1042/Process': 'tty_secu_enable'
'1876/Vsd': '0'
'1535/Stack': '84'
'2372/Total': '4584'
'1384/Rss': '3276'
'1534/Stack': '84'
'1633/Stack': '84'
'1918/Total': '93568'
'2048/Text': '272'
'1225/Stack': '84'
'2257/Text': '156'
'1779/Vsd': '0'
'1884/Vsd': '0'
'1602/Rss': '5364'
'1739/Total': '2924'
'1006/Stack': '84'
'10907/Rss': '1956'
'1393/Process': 'fpm_cli'
'1627/Data': '16788'
'2398/Vsd': '0'
'1645/Stack': '84'
'2361/Stack': '84'
'1440/Data': '91356'
'877/Text': '152'
'1928/Total': '40464'
'2162/Stack': '84'
'1518/Stack': '84'
'2423/Rss': '23696'
'1606/Data': '74436'
'1779/Rss': '2884'
'1380/Stack': '84'
'2545/Text': '176'
'System Memory/free': '1030036'
'2141/Vsd': '0'
'1723/Total': '48664'
'2349/Total': '12348'
'1371/Data': '8572'
'1541/Stack': '84'
'2519/Stack': '84'
'1663/Stack': '84'
'1286/Text': '1756'
'1739/Process': 'tftp_tipc_serve'
'1348/Data': '94808'
'1938/Data': '8656'
'1659/Rss': '5412'
'1692/Rss': '7432'
'1569/Stack': '84'
'1270/Stack': '84'
'1447/Vsd': '0'
'2311/Total': '14808'
'Used detail/inactive': '67956'
'1947/Vsd': '0'
'1627/Rss': '2588'
'1779/Text': '192'
'1884/Text': '184'
'1380/Text': '180'
'1006/Vsd': '0'
'2519/Text': '64'
'1659/Total': '17932'
'1/Process': 'init'
'996/Total': '188648'
'1946/Stack': '84'
'1446/Total': '97784'
'1298/Stack': '84'
'1723/Process': 'msf.elf'
'1541/Text': '104'
'2423/Data': '94928'
'1431/Stack': '84'
'1663/Data': '33136'
'1141/Vsd': '0'
'1880/Process': 'acld'
'877/Stack': '84'
'1567/Vsd': '0'
'2238/Vsd': '0'
'1464/Text': '208'
'1906/Vsd': '0'
'1663/Vsd': '0'
'1323/Text': '60'
'1422/Text': '32'
'1667/Process': 'snmpd'
'1446/Data': '88824'
'2350/Process': 'wvas_fss.elf'
'1623/Stack': '84'
'1446/Stack': '84'
'1534/Process': 'redis_server.el'
'1906/Total': '232388'
'1141/Data': '9196'
'1614/Data': '63364'
'1889/Data': '266652'
'2257/Vsd': '0'
'1229/Text': '1092'
'899/Data': '196'
'1663/Process': 'http_client.elf'
'1294/Process': 'dns_client.elf'
'1884/Process': 'termid.elf'
'1447/Data': '8888'
'1535/Data': '25044'
'1042/Rss': '1780'
'1871/Data': '68140'
'1384/Total': '96248'
'1547/Stack': '84'
'1569/Text': '32'
'1894/Rss': '5776'
'1614/Process': 'stamgd.elf'
'2350/Vsd': '0'
'1352/Rss': '5200'
'2334/Total': '80184'
'1294/Text': '152'
'2205/Vsd': '0'
'2328/Vsd': '0'
'1880/Data': '47188'
'2205/Total': '38288'
'1026/Total': '184644'
'1739/Stack': '84'
'Used detail/mapped': '66372'
'2162/Process': 'rmond'
'1708/Data': '1068'
'1928/Stack': '84'
'2429/Total': '29272'
'2511/Vsd': '0'
'1946/Data': '37772'
'1938/Process': 'nd_proxy.elf'
'1250/Vsd': '0'
'1733/Stack': '84'
'1723/Data': '21096'
'1928/Process': 'vrrp.elf'
'1567/Data': '66500'
'2328/Stack': '84'
'1533/Process': 'redis_server.el'
'2311/Text': '224'
'1380/Total': '61324'
'1724/Rss': '20200'
'2048/Vsd': '0'
'1688/Stack': '84'
'1141/Process': 'wbs_dev.elf'
'1526/Rss': '3012'
'1533/Rss': '4376'
'1602/Vsd': '0'
'1606/Process': 'apmgd.elf'
'1057/Stack': '84'
'1371/Total': '14100'
'1286/Stack': '84'
'1518/Text': '1576'
'1440/Rss': '5972'
'1254/Vsd': '0'
'1606/Vsd': '0'
'1871/Text': '1920'
'13062/Process': 'sleep'
'1645/Data': '57800'
'899/Rss': '928'
'1623/Vsd': '0'
'1947/Process': 'ftpd-tipc'
'1675/Total': '57040'
'1659/Process': 'wqosd.elf'
'1314/Rss': '1720'
'1547/Text': '244'
'1614/Rss': '23892'
'1788/Data': '8604'
'1884/Data': '81532'
'1348/Rss': '4372'
'1393/Total': '4736'
'1889/Vsd': '0'
'877/Data': '114928'
'1250/Total': '59892'
'13062/Text': '928'
'1619/Process': 'acmg.elf'
'1610/Process': 'cwmp.elf'
'2372/Stack': '84'
'1282/Vsd': '0'
'1906/Stack': '84'
'1305/Rss': '2652'
'2141/Stack': '84'
'1006/Rss': '4772'
'1688/Vsd': '0'
'1688/Data': '10716'
'1532/Data': '25044'
'1614/Stack': '84'
'1610/Text': '660'
'1637/Text': '308'
'1615/Total': '21244'
'1447/Process': 'klogd'
'1141/Stack': '84'
'1606/Text': '2720'
'2526/Data': '148052'
'1290/Total': '18504'
'1170/Total': '4768'
'2311/Process': 'sfn_thread'
'1788/Stack': '84'
'1569/Total': '10460'
'1610/Rss': '6176'
'2048/Total': '63452'
'1026/Rss': '10968'
'2372/Data': '132'
'1867/Data': '91260'
'1779/Process': 'nat.elf'
'1270/Rss': '4312'
'1270/Vsd': '0'
'1533/Data': '25044'
'1254/Stack': '84'
'1298/Text': '1292'
'1294/Data': '22304'
'1633/Vsd': '0'
'2315/Text': '48'
'1057/Rss': '1072'
'1708/Stack': '84'
'1733/Text': '212'
'899/Total': '2976'
'10907/Vsd': '0'
'1531/Text': '824'
'2113/Text': '200'
'1026/Process': 'aaad'
'2350/Stack': '84'
'1880/Stack': '84'
'2188/Data': '33128'
'1352/Total': '301472'
'1641/Total': '12920'
'1282/Total': '18080'
'1592/Vsd': '0'
'2429/Text': '176'
'1606/Total': '97104'
'1541/Process': 'wlan_cli.elf'
'1675/Process': 'apdm_ac.elf'
'1592/Total': '32300'
'1928/Text': '492'
'1246/Rss': '23656'
'1441/Total': '65148'
'1554/Rss': '2400'
'1531/Stack': '84'
'1592/Text': '744'
'1229/Stack': '84'
'1441/Vsd': '0'
'10907/Stack': '84'
'1384/Stack': '84'
'1876/Rss': '5928'
'1440/Total': '112048'
'1384/Text': '208'
'2238/Data': '33348'
'1946/Vsd': '0'
'1348/Process': 'sshd'
'2301/Process': 'wvas_bt.elf'
'1637/Data': '62028'
'1619/Data': '71264'
'1788/Vsd': '0'
'1441/Process': 'upgrade_mgmt'
'2048/Rss': '18280'
'1867/Process': 'bonjour_gateway'
'1526/Process': 'redis_ctrl.elf'
'1541/Vsd': '0'
'1946/Rss': '19612'
'1880/Rss': '5280'
'1602/Text': '152'
'1276/Text': '28'
'2301/Total': '13708'
'2423/Vsd': '0'
'1671/Stack': '84'
'1371/Text': '244'
'1906/Rss': '25232'
'1518/Data': '66304'
'1962/Vsd': '0'
'1871/Process': 'sccd'
'1/Total': '2016'
'2398/Rss': '10768'
'997/Rss': '4688'
'1627/Total': '26560'
'2511/Text': '40'
'1680/Total': '24680'
'2408/Vsd': '0'
'2388/Rss': '3852'
'1627/Process': 'ita.elf'
'1431/Vsd': '0'
'1305/Stack': '84'
'1567/Stack': '84'
'1938/Text': '60'
'1567/Total': '77496'
'1938/Stack': '84'
'1535/Text': '824'
'1254/Total': '39516'
'2526/Process': 'sysha'
'2113/Total': '27156'
'2372/Process': 'cls-sshd'
'1615/Stack': '84'
'1627/Vsd': '0'
'1141/Rss': '4024'
'1592/Data': '20976'
'1633/Data': '62200'
'2408/Text': '96'
'2315/Rss': '3952'
'2415/Stack': '84'
'1899/Total': '43112'
'1692/Vsd': '0'
'1440/Stack': '84'
'2519/Process': 'sntp.elf'
'1254/Text': '472'
'10907/Data': '45312'
'1659/Data': '1572'
'1641/Data': '8516'
'2340/Rss': '3908'
'1984/Text': '396'
'1723/Vsd': '0'
'1352/Text': '156'
'1554/Data': '57996'
'1026/Stack': '84'
'2429/Data': '24960'
'2301/Data': '948'
'1918/Text': '736'
'1532/Total': '36356'
'2388/Data': '9160'
'1667/Vsd': '0'
'1723/Text': '264'
'1533/Text': '824'
'1724/Vsd': '0'
'1946/Total': '70352'
'1042/Data': '33476'
'1170/Process': 'efmp_demo'
'1692/Total': '28624'
'2238/Stack': '84'
'2257/Total': '22380'
'1867/Total': '127596'
'1541/Total': '85904'
'1880/Vsd': '0'
'2466/Data': '193492'
'2423/Text': '832'
'1431/Data': '625104'
'1984/Process': 'local_eap'
'1276/Data': '16832'
'1906/Data': '191464'
'13062/Data': '656'
'1938/Rss': '18200'
'1380/Rss': '3204'
'1876/Data': '8704'
'1708/Vsd': '0'
'1894/Text': '760'
'2334/Rss': '20480'
'1323/Stack': '84'
'2349/Text': '16'
'1723/Stack': '84'
'1532/Text': '824'
'2334/Process': 'dns_snp.elf'
'1680/Vsd': '0'
'1779/Data': '33544'
'1779/Total': '38900'
'1393/Text': '72'
'2388/Text': '44'
'1733/Total': '33524'
'1531/Process': 'redis_server.el'
'1659/Vsd': '0'
'1918/Vsd': '0'
'2423/Total': '131980'
'2141/Rss': '2164'
'1615/Process': 'stamg_ui.elf'
'1533/Stack': '84'
'1592/Process': 'wlan_hbd.elf'
'1298/Rss': '5448'
'1225/Data': '8516'
'1431/Text': '2460'
'2511/Rss': '2236'
'1305/Text': '276'
'1554/Text': '108'
'1042/Stack': '84'
'1688/Rss': '22964'
'2415/Total': '16128'
'1871/Total': '104272'
'1298/Process': 'ospfv3.elf'
'1894/Total': '162704'
'2141/Total': '25160'
'1733/Data': '8708'
'1464/Vsd': '0'
'2519/Total': '12968'
'1675/Data': '42308'
'1739/Data': '252'
'1276/Stack': '84'
'1323/Vsd': '0'
'1918/Data': '55852'
'1416/Total': '17664'
'2408/Process': 'wvas_med.elf'
'10907/Text': '176'
'1667/Total': '91264'
'1692/Process': 'wbs_ctl.elf'
'1637/Stack': '84'
'1623/Rss': '3144'
'1314/Stack': '84'
'1889/Total': '309144'
'1708/Process': 'data_plane.e'
'1739/Text': '24'
'1446/Text': '456'
'1533/Vsd': '0'
'Used detail/slab': '710528'
'1/Rss': '704'
'1962/Data': '20876'
'2429/Process': 'rl-con/1458'
'2113/Process': 'ntp.elf'
'2188/Rss': '2716'
'2205/Text': '240'
'1984/Stack': '84'
'2388/Process': 'wvas_wloc.elf'
'2315/Data': '9236'
'1282/Rss': '4648'
'1984/Rss': '4392'
'2408/Data': '9504'
'1250/Data': '21736'
'2257/Rss': '4188'
'1899/Rss': '3500'
'Used detail/active': '237592'
'1554/Stack': '84'
'2429/Vsd': '0'
'1254/Process': 'mstp.elf'
'1667/Data': '82776'
'2350/Data': '8580'
'2334/Stack': '84'
'1314/Total': '12376'
'2349/Vsd': '0'
'1667/Stack': '84'
'1547/Total': '13628'
'2361/Text': '44'
'1535/Rss': '3888'
'1788/Process': 'span.elf'
'1541/Data': '70276'
'2511/Total': '37860'
'2315/Vsd': '0'
'2328/Data': '62328'
'1533/Total': '36356'
'2545/Vsd': '0'
'1946/Process': 'dhcp6.elf'
'1531/Total': '36356'
'2349/Rss': '1588'
'1871/Stack': '84'
'1637/Total': '82196'
'997/Data': '136196'
'1619/Rss': '3964'
'1294/Total': '36868'
'2545/Data': '45312'
'1225/Vsd': '0'
'1619/Stack': '84'
'996/Stack': '84'
'1947/Text': '80'
'2340/Text': '36'
'1441/Rss': '4204'
'1026/Text': '932'
'1602/Process': 'ript.elf'
'1026/Data': '168692'
'1447/Total': '17664'
'1441/Data': '49996'
'1276/Process': 'af-key-cmd'
'1899/Data': '34812'
'1619/Total': '85724'
'1724/Stack': '84'
'1606/Rss': '9616'
'1602/Data': '62044'
'2398/Stack': '84'
'2526/Stack': '84'
'1641/Rss': '1948'
'1894/Stack': '84'
'1641/Process': 'http_fpm.elf'
'1692/Text': '664'
'1416/Data': '8888'
'2301/Text': '48'
'1614/Vsd': '0'
'1894/Process': 'rdsd'
'1724/Total': '56296'
'1352/Data': '295812'
'1526/Data': '61936'
'1250/Text': '2184'
'1371/Process': 'tunnel.elf'
'1602/Stack': '84'
'1592/Rss': '4084'
'2519/Vsd': '0'
'1867/Stack': '84'
'1623/Text': '1072'
'1042/Vsd': '0'
'1971/Stack': '84'
'1928/Vsd': '0'
'1057/Data': '29192'
'1871/Vsd': '0'
'1282/Process': 'rpi.elf'
'2526/Total': '152804'
'1615/Data': '8572'
'1956/Process': 'dhcpc.elf'
'1286/Rss': '5864'
'2398/Data': '121316'
'1305/Total': '50424'
'1250/Stack': '84'
'2162/Total': '39140'
'1440/Process': 'upgrade'
'1534/Total': '36356'
'1956/Rss': '4552'
'1708/Text': '60'
'1541/Rss': '5208'
'2238/Process': 'tftpd.elf'
'2238/Text': '112'
'1371/Rss': '2656'
'2141/Text': '64'
'2340/Process': 'wvas_sa.elf'
'1889/Rss': '50692'
'1446/Process': 'syslogd'
'1615/Rss': '3976'
'877/Vsd': '0'
'1733/Process': 'lacp.elf'
'2466/Total': '206684'
'1246/Stack': '84'
'1788/Rss': '17128'
'2398/Text': '644'
'1569/Data': '520'
'2423/Stack': '84'
'1962/Rss': '3516'
'2340/Data': '964'
'1464/Stack': '84'
'2361/Data': '9256'
'1610/Vsd': '0'
'1532/Vsd': '0'
'1971/Process': 'arp_proxy.elf'
'1446/Vsd': '0'
'1026/Vsd': '0'
'1225/Process': 'timerange'
'1431/Rss': '7596'
'2301/Stack': '84'
'2511/Stack': '84'
'2113/Rss': '2988'
'1641/Stack': '84'
'2415/Process': 'wds_proc'
'1518/Vsd': '0'
'1006/Total': '201712'
'1380/Data': '49884'
'1610/Stack': '84'
'1422/Data': '33100'
'1680/Text': '92'
'1889/Stack': '84'
'1314/Text': '48'
'1042/Text': '300'
'1531/Data': '25044'
'1440/Text': '328'
'2408/Rss': '4424'
'1057/Text': '532'
'1984/Total': '61620'
'1671/Text': '412'
'2415/Rss': '4840'
'1380/Vsd': '0'
'899/Text': '20'
'1384/Process': 'tech-support'
'2372/Vsd': '0'
'2311/Data': '1224'
'2162/Text': '184'
'1899/Stack': '84'
'1526/Total': '72452'
'877/Process': 'ham'
'1323/Total': '38064'
'1947/Stack': '84'
'2311/Vsd': '0'
'1305/Process': 'ping.elf'
'2408/Total': '22636'
'2205/Stack': '84'
'1615/Vsd': '0'
'1531/Vsd': '0'
'1380/Process': 'licns'
'2519/Rss': '2056'
'1645/Vsd': '0'
'2162/Data': '33112'
'2315/Stack': '84'
'2162/Vsd': '0'
'1962/Text': '312'
'2466/Rss': '6584'
'1724/Text': '416'
'1057/Total': '41008'
'1733/Rss': '17792'
'1567/Rss': '3624'
'1006/Text': '392'
'1282/Data': '8700'
'1006/Data': '190012'
'1663/Total': '44244'
'1867/Vsd': '0'
'2545/Total': '49880'
'1918/Rss': '23068'
'1637/Process': 'wlogd.elf'
'1889/Text': '2344'
'2526/Rss': '2696'
'1422/Stack': '84'
'996/Data': '176648'
'1431/Total': '638448'
'1305/Data': '45424'
'1547/Process': 'rdnd_server.'
'899/Process': 'coredump-mon'
'1627/Stack': '84'
'2334/Vsd': '0'
'1229/Rss': '5312'
'10907/Process': 'rl-con/0'
'1225/Text': '88'
'1225/Rss': '2264'
'1270/Data': '21020'
'1314/Data': '8812'
'1938/Vsd': '0'
'997/Text': '300'
'2113/Stack': '84'
'1254/Rss': '19492'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show memory | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title = 'PID'
        length_list = []
        dict_value = {}
        table_info = []
        one_key = ''
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        while '' in dut_info_split:
            dut_info_split.remove('')
        length = len(dut_info_split)
        for i in range(length):
            if re.match(value_title, dut_info_split[i]):
                table_info.append(dut_info_split[i])
                dut_info_split[i] = ''
            elif re.match('\d+ ', dut_info_split[i]):
                table_info.append(dut_info_split[i])
                dut_info_split[i] = ''
            else:
                pass
        while '' in dut_info_split:
            dut_info_split.remove('')
        length = len(dut_info_split)
        newString = ''
        for i in range(length):
            newString = newString + show_info_split[i] + ','
        dut_info_split = newString.split(',')
        length = len(dut_info_split)
        for i in range(length):
            if re.match('.*:.*', dut_info_split[i]):
                matchObj = re.match('(.*):(.*)', dut_info_split[i])
                one_key = matchObj.group(1).strip()
                if re.match('.* .*',matchObj.group(2)):
                    matchObj1 = re.match('(.*) (.*)',matchObj.group(2))
                    key = matchObj.group(1).strip()+'/'+matchObj1.group(2).strip()
                    dict_value[key] = matchObj1.group(1).strip()
                else:pass
            elif re.match('.* .*',dut_info_split[i]):
                matchObj = re.match('(.+?) (\w.*)', dut_info_split[i])
                key = one_key + '/' +matchObj.group(2).strip()
                dict_value[key] = matchObj.group(1).strip().strip('%')
            else:
                pass
        for i in dict_value:
            if re.match('.*KB',dict_value[i]):
                matchObj = re.match('(.*)KB',dict_value[i])
                dict_value[i] = matchObj.group(1)
            else:pass
        ######################################################################################
        length = len(table_info)
        for i in range(length):
            if re.match(value_title, table_info[i]):
                line_split = table_info[i].split(' ')
                sum = 0
                space_length_list = []
                word_lenggth_list = []
                for j in range(len(line_split)):
                    if j == 0:
                        pass
                    else:
                        if line_split[j] != '':
                            space_length_list.append(sum + 1)
                            sum = 0
                        else:
                            sum = sum + 1
                while '' in line_split:
                    line_split.remove('')
                for j in line_split:
                    word_lenggth_list.append(len(j))
                for j in range(len(space_length_list)):
                    length_list.append(word_lenggth_list[j] + space_length_list[j])
                length_list.append(32)
                break
        length_list_len = len(length_list)
        length = len(table_info)
        value_title_list = []
        for i in range(length):
            sight = 0
            sight_sum = 0
            list_len = []
            for j in range(length_list_len):
                sight_sum = sight_sum + int(length_list[j])
                row_value = table_info[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.strip()
                list_len.append(row_value)
            if list_len[0] == value_title:
                title = list_len
            elif list_len[0] != value_title:
                value_title_list.append(list_len[0])
                for s in range(1, length_list_len):
                    key_name = '%s/%s' % (list_len[0], title[s])
                    dict_value[key_name] = list_len[s].strip()
            dict_value[value_title+'_list'] = value_title_list
        return dict_value
    def dut_get_show_addressbind_uplink(self,show_info):
        """
        Function:show address-bind uplink回显解析函数
        CLI命令:show address-bind uplink
        回显信息示例:
Ruijie(config)#show address-bind uplink 
Port       State   
---------- ---------
Gi1/0/15   Enabled 
Default    Disabled
Ruijie(config)#

        Returns:
{'interface_enable_num': 1, 'Default/State': 'Disabled'
'Port_list': ['Gi1/0/15'
'Default'], 'Gi1/0/15/State': 'Enabled'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show address-bind uplink | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title = 'Port'
        dict_value = {}
        interface_enable_num = 0
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        while '' in dut_info_split:
            dut_info_split.remove('')
        length = len(dut_info_split)
        (whippletree_list_1, cut_del_1) = self.dut_show_autoget_whippletree(0, length,show_info_split)
        show_info_split.remove(show_info_split[cut_del_1])
        length = len(show_info_split)
        dict_value = self.dut_show_autoget_form(0, length, value_title, whippletree_list_1,show_info_split)
        for i in dict_value:
            if dict_value[i] == 'Enabled':
                interface_enable_num = interface_enable_num+1
            else:pass
        dict_value['interface_enable_num'] = interface_enable_num
        return dict_value
    def dut_get_show_gvrp_statistics_dutport(self,show_info):
        """
        Function:show gvrp statistics  <dutport>回显解析函数
        CLI命令:show gvrp statistics  <dutport>
        回显信息示例:
Ruijie# show gvrp statistics gigabitethernet 1/1
Interface       GigabitEthernet 3/1
RecValidGvrpPdu         0
RecInvalidGvrpPdu       0
RecJoinEmpty    0
RecJoinIn       0
RecEmpty        0
RecLeaveEmpty   0
RecLeaveIn      0
RecLeaveAll     0
SentGvrpPdu     0
SentJoinEmpty   0
SentJoinIn      0
SentEmpty       0
SentLeaveEmpty  0
SentLeaveIn     0
SentLeaveAll    0
JoinIndicated   0
LeaveIndicated  0
JoinPropagated  0
LeavePropagated  0

        Returns:
{'JoinIndicated': '0'
'SentGvrpPdu': '0'
'RecLeaveIn': '0'
'RecEmpty': '0'
'RecValidGvrpPdu': '0'
'RecJoinIn': '0'
'SentJoinIn': '0'
'Interface_list': ['RecValidGvrpPdu'
'RecInvalidGvrpPdu'
'RecJoinEmpty'
'RecJoinIn'
'RecEmpty'
'RecLeaveEmpty'
'RecLeaveIn'
'RecLeaveAll'
'SentGvrpPdu'
'SentJoinEmpty'
'SentJoinIn'
'SentEmpty'
'SentLeaveEmpty'
'SentLeaveIn'
'SentLeaveAll'
'JoinIndicated'
'LeaveIndicated'
'JoinPropagated'
'LeavePropagated'], 'SentEmpty': '0'
'LeaveIndicated': '0'
'SentLeaveAll': '0'
'LeavePropagated': '0'
'SentLeaveIn': '0'
'SentJoinEmpty': '0'
'RecJoinEmpty': '0'
'RecInvalidGvrpPdu': '0'
'RecLeaveAll': '0'
'SentLeaveEmpty': '0'
'JoinPropagated': '0'
'RecLeaveEmpty': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show gvrp statistics  <dutport> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        Interface_list = []
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        while '' in dut_info_split:
            dut_info_split.remove('')
        length = len(dut_info_split)
        for i in range(length):
            dut_info_split[i] = dut_info_split[i].replace('\t','')
        for i in range(length):
            if re.match('Interface',dut_info_split[i]):
                dut_info_split.remove(dut_info_split[i])
                break
        length = len(dut_info_split)
        for i in range(length):
            if re.match('.* \d+',dut_info_split[i]):
                matchObj = re.match('(.*) (\d+)',dut_info_split[i])
                Interface_list.append(matchObj.group(1).strip())
                dict_value[matchObj.group(1).strip()] = matchObj.group(2)
            else:pass
        dict_value['Interface_list']=Interface_list
        return dict_value
    def dut_get_show_ip_dhcp_usergroup_summary(self,show_info):
        """
        Function:show ip dhcp user-group summary回显解析函数
        CLI命令:show ip dhcp user-group summary
        回显信息示例:
RUIJIE-18010(config-user-group)#show ip dhcp user-group summary 

Total number of user group: 1
Total number of user      : 0
user-num    group-name
----------  ------------------------
0           ruijie2
RUIJIE-18010(config-user-group)#

        Returns:
{'Total number of user': '0'
'group-name_list': ['ruijie2'], 'Total number of user group': '1'
'ruijie2/user-num': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip dhcp user-group summary | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict1 = {}
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for i in range(len(show_info_split)):
            show_info_split[i].strip()
        while '' in show_info_split:
            show_info_split.remove('')
        for i in range(2):
            temp = show_info_split[i].split(':')
            dict1[temp[0].strip()] = temp[1].strip()
        show_info_split.remove(show_info_split[0])
        show_info_split.remove(show_info_split[0])
        len_list, cutd = self.dut_show_autoget_whippletree(0,len(show_info_split),show_info_list_line=show_info_split)
        show_info_split.remove(show_info_split[cutd])
        dict2 = self.dut_show_autoget_form(0,len(show_info_split),'group-name',len_list,show_info_split)
        dict_value = dict(dict1.items() + dict2.items())
        return dict_value
    def dut_get_show_rldp_interface_dutport(self,show_info):
        """
        Function:show rldp interface <dutport>回显解析函数
        CLI命令:show rldp interface <dutport>
        回显信息示例:
DUT1#show rldp interface gigabitEthernet 0/34
port state      : error
local bridge    : 5869.6cdc.e8a9
neighbor bridge : 5869.6cdc.e8a9
neighbor port   : GigabitEthernet 0/36
vlan-loop detect information:
     detect vlan: 1-250
     error  vlan: 1,3-53,94-115,117-119,125,128,130,133-134,136,138,140-146,149
                  151-152,154,157,160,164,167,177
     action: isolate-vlan
     state : error

        Returns:
{"local bridge": "5869.6cdc.e8a9"
"vlan-loop detect information/detect vlan": "1-250"
"port state": "error"
"neighbor bridge": "5869.6cdc.e8a9"
"vlan-loop detect information/state": "error,"
"vlan-loop detect information/action": "isolate-vlan"
"vlan-loop detect information/vlan-loop detect information": ""
"vlan-loop detect information/error  vlan": "1,3-53,94-115,117-119,125,128,130,133-134,136,138,140-146,149,151-152,154,157,160,164,167,177"
"neighbor port": "GigabitEthernet 0/36"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show rldp interface <dutport> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for i in range(len(show_info_split)):
            if re.match(r'^vlan-loop',show_info_split[i].strip()):
                break
            temp = show_info_split[i].split(':')
            dict_value[temp[0].strip()] = temp[1].strip()
        key1 = show_info_split[i].split(':')[0].strip()
        for j in range(i,len(show_info_split)):
            temp = show_info_split[j].split(':')
            if len(temp)!=1:
                key = key1+'/'+temp[0].strip()
                value = temp[1].strip()
                dict_value[key] = value
            else:
                dict_value[key] = value + ',' + show_info_split[j].strip()
        return dict_value
    def dut_get_show_rldp(self, show_info):  # 函数名由锐捷提供
        """
        Function:show rldp回显解析函数
        CLI命令:show rldp
        回显信息示例:
SwitchA#show rldp
rldp state         : enable
rldp hello interval: 3
rldp max hello     : 2
rldp local bridge  : 00d0.f822.33aa
-----------------------------------
Interface GigabitEthernet 0/2
port state      : normal
neighbor bridge : 00d0.f800.41b0
neighbor port   : GigabitEthernet 0/3
unidirection detect information:
     action: warning
     state : normal

Interface GigabitEthernet 0/1
port state      : normal
neighbor bridge : 0000.0000.0000
neighbor port   : 
loop detect information   :
     action: block
     state : normal

        Returns:
{"GigabitEthernet 0/2/action": "warning"
"rldp state": "enable"
"rldp max hello": "2"
"GigabitEthernet 0/1/neighbor port": ""
"GigabitEthernet 0/2/neighbor port": "GigabitEthernet 0/3"
"GigabitEthernet 0/1/loop detect information": ""
"GigabitEthernet 0/2/port state": "normal"
"GigabitEthernet 0/1/neighbor bridge": "0000.0000.0000"
"GigabitEthernet 0/1/port state": "normal"
"GigabitEthernet 0/2/neighbor bridge": "00d0.f800.41b0"
"rldp hello interval": "3"
"GigabitEthernet 0/1/state": "normal"
"interface_list": ["GigabitEthernet 0/2"
"GigabitEthernet 0/1"], "rldp local bridge": "00d0.f822.33aa"
"GigabitEthernet 0/2/state": "normal"
"GigabitEthernet 0/2/unidirection detect information": ""
"GigabitEthernet 0/1/action": "block"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show rldp | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """


        show_info_line= self.dut_get_start_show_info(show_info)
        flag = 0
        dict_value={}
        int_list=[]
        for value in show_info_line:
            if flag == 0 :
                if ":" in value:
                    list1 = value.split(":")
                    dict_value[list1[0].strip()] = list1[1].strip()
            if "---" in value:
                flag = 1
                continue
            if flag ==1 :
                if ":" in value:
                    list2 = value.split(":")
                    dict_value[key_1+"/"+list2[0].strip()] = list2[1].strip()
                else :
                    if "face" in value:
                        key_1 = value.split("face")[1].strip()
                    else:
                        key_1=value.strip()
                    int_list.append(key_1)
        dict_value["interface_list"]=int_list
        return dict_value
    def dut_get_show_usergroup_name_word(self,show_info):
        """
        Function:show user-group name (word)回显解析函数
        CLI命令:show user-group name (word)
        回显信息示例:
Ruijie#show user-group name ddd

user-group: ddd
 group-id: 1
 source: Configured
 configured users: 2
 authentication users: 0
  mac 0000.2222.3333 source Configured
  mac 0000.2222.3334 ip 1.2.3.4 source Configured

PJ80-CORE#con

        Returns:
{'user-group': 'ddd'
'mac 0000.2222.3333': 'Configured'
'authentication users': '0'
'configured users': '2'
'source': 'Configured'
'mac 0000.2222.3334 ip 1.2.3.4': 'Configured'
'group-id': '1'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show user-group name (word) | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        length = len(dut_info_split)
        for i in range(length):
            try:
                matchObj01 = re.match('(.*) source (\w+)', dut_info_split[i])
                dict_value[matchObj01.group(1).strip()] = matchObj01.group(2).strip()
            except:
                pass
        for i in range(length):
            try:
                matobj02 = re.match(r'( \w.*):\s+(\w+)', dut_info_split[i])
                dict_value[matobj02.group(1).strip()] = matobj02.group(2).strip()
            except:
                pass
        for i in range(length):
            if re.match(r'user\-group:', dut_info_split[i]):
                matchObj03 = re.match('(user\-group): (.*)', dut_info_split[i])
                dict_value[matchObj03.group(1).strip()] = matchObj03.group(2).strip()
                dut_info_split.remove(dut_info_split[i])
                break
        return dict_value
    def dut_get_show_ip_dhcp_usergroup_pool(self,show_info):
        """
        Function:show ip dhcp user-group pool回显解析函数
        CLI命令:show ip dhcp user-group pool
        回显信息示例:
RUIJIE-18010#show ip dhcp user-group pool 

pool-name                 group-name
------------------------  ------------------------
5                         ruijie4                 
60                        ruijie3                 
50                        ruijie2                 
RUIJIE-18010#

        Returns:
{'50/group-name': 'ruijie2'
'5/group-name': 'ruijie4'
'pool-name_list': ['5'
'60'
'50'], '60/group-name': 'ruijie3'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip dhcp user-group pool | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict1 = {}
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for i in range(len(show_info_split)):
            show_info_split[i].strip()
        while '' in show_info_split:
            show_info_split.remove('')
        len_list, cutd = self.dut_show_autoget_whippletree(0,len(show_info_split),show_info_list_line=show_info_split)
        show_info_split.remove(show_info_split[cutd])
        dict2 = self.dut_show_autoget_form(0,len(show_info_split),'pool-name',len_list,show_info_split)
        dict_value = dict(dict1.items() + dict2.items())
        return dict_value
    def dut_get_show_ip_rns_configuration(self,show_info):
        """
        Function:show ip rns configuration回显解析函数
        CLI命令:show ip rns configuration
        回显信息示例:
xintiao_zj#show ip rns configuration 
Entry number: 1
Tag: 
Type of operation to perform: icmp-echo
Operation timeout (milliseconds): 5000
Operation frequency (milliseconds): 60000
Threshold (milliseconds): 5000
Recurring (Starting Everyday): FALSE
Life (seconds): forever
Next Scheduled Start Time: Start Time already passed
Target address/Source address: 10.1.1.2/0.0.0.0
Request size (ARR data portion): 36

Entry number: 2
Tag: 
Type of operation to perform: icmp-echo
Operation timeout (milliseconds): 5000
Operation frequency (milliseconds): 60000
Threshold (milliseconds): 5000
Recurring (Starting Everyday): FALSE
Life (seconds): 100
Next Scheduled Start Time: Start Time already passed
Target address/Source address: 20.1.1.2/0.0.0.0
Request size (ARR data portion): 36

xintiao_zj#

        Returns:
{'2/Operation frequency (milliseconds)': '60000'
'1/Life (seconds)': 'forever'
'2/Next Scheduled Start Time': 'Start Time already passed'
'2/Target address/Source address': '20.1.1.2/0.0.0.0'
'1/Recurring (Starting Everyday)': 'FALSE'
'1/Request size (ARR data portion)': '36'
'1/Tag': ''
'1/Operation timeout (milliseconds)': '5000'
'2/Recurring (Starting Everyday)': 'FALSE'
'1/Entry number': '1'
'2/Tag': ''
'2/Threshold (milliseconds)': '5000'
'2/Operation timeout (milliseconds)': '5000'
'1/Threshold (milliseconds)': '5000'
'2/Type of operation to perform': 'icmp-echo'
'1/Operation frequency (milliseconds)': '60000'
'1/Type of operation to perform': 'icmp-echo'
'2/Life (seconds)': '100'
'2/Entry number': '2'
'1/Target address/Source address': '10.1.1.2/0.0.0.0'
'1/Next Scheduled Start Time': 'Start Time already passed'
'2/Request size (ARR data portion)': '36'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip rns configuration | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for i in range(len(show_info_split)):
            show_info_split[i].strip()
        while '' in show_info_split:
            show_info_split.remove('')
        k = 0
        for i in range(len(show_info_split)):
            if re.match(r'^Entry number',show_info_split[i].strip()):
                k = k + 1
            t1 = show_info_split[i].split(':',1)
            key = str(k) + '/' + t1[0].strip()
            value = t1[1].strip()
            dict_value[key] = value
        return dict_value
    def dut_get_show_track(self,show_info):
        """
        Function:show track回显解析函数
        CLI命令:show track
        回显信息示例:
xintiao_zj#show track  

Track 1
  Reliable Network Service 1
  The state is Up
    6 change,current state last:547 secs
  Delay up 0 secs,down 0 secs

Track 2
  Reliable Network Service 2
  The state is Unknown
    3 change,current state last:209 secs
  Delay up 0 secs,down 0 secs
xintiao_zj#

        Returns:
{'Track 1/state': 'Up'
'Track 2/current state last': '209'
'track_list': ['Track 1'
'Track 2'], 'Track 2/Delay up 0 secs': '0 secs'
'Track 2/state': 'Unknown'
'Track 1/Reliable Network': 'Service 1'
'Track 1/Delay up 0 secs': '0 secs'
'Track 2/down 0 secs': '0 secs'
'Track 1/down 0 secs': '0 secs'
'Track 2/Reliable Network': 'Service 2'
'Track 2/times': '3 change'
'Track 1/current state last': '547'
'Track 1/times': '6 change'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show track | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        track_list = []
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for i in range(len(show_info_split)):
            show_info_split[i].strip()
        while '' in show_info_split:
            show_info_split.remove('')
        for i in range(len(show_info_split)):
            if re.match(r'^Track',show_info_split[i].strip()):
                track = show_info_split[i].strip()
                track_list.append(track)
            if re.match(r'^Reliable',show_info_split[i].strip()):
                t2 = show_info_split[i].split('rk ')
                dict_value[track + '/' + 'Reliable Network'] = t2[1].strip()
            if re.match(r'^The',show_info_split[i].strip()):
                t3 = show_info_split[i].split('state is ')
                dict_value[track+'/'+'state'] = t3[1].strip()
            if re.match(r'^\d',show_info_split[i].strip()):
                t4 = show_info_split[i].split(',')
                dict_value[track+'/'+'times'] = t4[0].strip()
                t5 = t4[1].split(':')
                dict_value[track+'/'+'current state last'] = t5[1].strip('secs').strip()
            if re.match(r'^Delay',show_info_split[i].strip()):
                t6 = show_info_split[i].split(',')
                t7 = t6[0].split('up')
                dict_value[track + '/' + t6[0].strip()] = t7[1].strip()
                t8 = t6[1].split('down')
                dict_value[track + '/' + t6[1].strip()] = t8[1].strip()
        dict_value['track_list'] = track_list
        return dict_value
    def dut_get_show_ip_rip_peer(self,show_info):
        """
        Function:show ip rip peer回显解析函数
        CLI命令:show ip rip peer
        回显信息示例:
RUIJIE-18010(config-router)#show ip rip peer 
Peer 9.9.9.2:
  Local address: 9.9.9.1
  Input interface: GigabitEthernet 1/3/17
  Peer version: RIPv2
  Received bad packets: 0
  Received bad routes: 0

        Returns:
{"9.9.9.2:/Received bad routes": "0"
"9.9.9.2:/Received bad packets": "0"
"9.9.9.2:/Local address": "9.9.9.1"
"9.9.9.2:/Input interface": "GigabitEthernet 1/3/17"
"9.9.9.2:/Peer 9.9.9.2": ""
"Peer_list": ["9.9.9.2:"], "9.9.9.2:/Peer version": "RIPv2"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip rip peer | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        peer_list = []
        dict_value = {}
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for i in range(len(show_info_split)):
            show_info_split[i].strip()
        while '' in show_info_split:
            show_info_split.remove('')
        for i in range(len(show_info_split)):
            if re.match(r'^Peer',show_info_split[i]):
                t1 = show_info_split[i].split(' ')
                key1 = t1[1].strip()
                peer_list.append(key1)
            t2 = show_info_split[i].split(':')
            dict_value[key1+'/'+t2[0].strip()] = t2[1].strip()
        dict_value['Peer_list'] = peer_list
        return dict_value
    def dut_get_show_isis_neighbors(self,show_info):
        """
        Function:show isis neighbors回显解析函数
        CLI命令:show isis neighbors
        回显信息示例:
6000C#show isis neighbors 

Area (null):
System Id       Type  IP Address        State   Holdtime  Circuit            Interface                 
57-H            L1    20.1.1.2          Up      27        6000C.02           GigabitEthernet 0/2       
                L2    20.1.1.2          Up      27        6000C.02           GigabitEthernet 0/2

        Returns:
{'20.1.1.2/L2/Circuit': '6000C.02'
'20.1.1.2/L1/Interface': 'GigabitEthernet 0/2'
'20.1.1.2/L1/Holdtime': '27'
'20.1.1.2/L1/State': 'Up'
'20.1.1.2/L2/Type': 'L2'
'20.1.1.2/L1/Type': 'L1'
'20.1.1.2/L2/System Id': '57-H'
'20.1.1.2/L2/Holdtime': '27'
'20.1.1.2/L2/IP Address': '20.1.1.2'
'20.1.1.2/L2/State': 'Up'
'20.1.1.2/L1/System Id': '57-H'
'20.1.1.2/L1/Circuit': '6000C.02'
'20.1.1.2/L2/Interface': 'GigabitEthernet 0/2'
'20.1.1.2/L1/IP Address': '20.1.1.2'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show isis neighbors | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for i in range(len(show_info_split)):
            show_info_split[i].strip()
        while '' in show_info_split:
            show_info_split.remove('')
        for i in range(len(show_info_split)):
            if re.match(r'^Syste',show_info_split[i]):
                t1 = show_info_split[i].split('  ')
                for j in range(len(t1)):
                    t1[j] = t1[j].strip()
                while '' in t1:
                    t1.remove('')
                continue
            t2 = show_info_split[i].split('  ')
            for k in range(len(t2)):
                t2[k] = t2[k].strip()
            while '' in t2:
                t2.remove('')
            for kk in range(len(t2)):
                if len(t2) == 7:
                    key1 = t2[2] + '/' + t2[1] + '/' + t1[kk]
                    value = t2[kk]
                    dict_value[key1] = value
                    bak_sys = t2[0]
                if len(t2) == 6:
                    key2 = t2[1] + '/' + t2[0] + '/' + t1[kk+1]
                    value = t2[kk]
                    dict_value[key2] = value
                    dict_value[t2[1] + '/' + t2[0] + '/' + t1[0]] = bak_sys
        return dict_value
    def dut_get_show_ip_rns_statistics(self, show_info):
        """
        Function:show ip rns statistics回显解析函数
        CLI命令:show ip rns statistics
        回显信息示例:
xintiao_zj#show ip rns statistics 
Entry number: 1
Operation time to live: forever
Latest RTT: 2
Latest operation start time: 2018-05-08 20:04:57
Latest operation return code: OK
Number of successes: 11
Number of failures: 5

Entry number: 2
Operation time to live: 0 sec
Latest RTT: 2
Latest operation start time: 2018-05-08 20:03:56
Latest operation return code: OK
Number of successes: 2
Number of failures: 0

        Returns:
{u'2/Latest operation return code': u'OK'
'Entry number': [u'1', u'2'], u'2/Latest operation start time': u'2018-05-08 20:03:56', u'2/Latest RTT': u'2', u'2/Number of successes': u'2', u'1/Latest operation start time': u'2018-05-08 20:04:57', u'1/Operation time to live': u'forever', u'2/Number of failures': u'0', u'1/Latest operation return code': u'OK', u'2/Operation time to live': u'0 sec', u'1/Latest RTT': u'2', u'1/Number of successes': u'11', u'1/Number of failures': u'5'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip rns statistics | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        # 按行读取写入
        show_info_split = show_info.split("\n")
        # print show_info_split
        # 去掉命令行无用表头
        if re.match(r'.*Ruijie.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        # 处理后的数据存入dut_info_split
        dut_info_split = show_info_split
        # 去掉dut_info_split中的空值以及只包含空格符的值
        for i in dut_info_split:
            if '' in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' ' in dut_info_split:
                dut_info_split.remove(' ')
        print(dut_info_split)

        title_list = []
        for i in range(len(dut_info_split)):
            if re.match('Entry number:.*', dut_info_split[i]):
                mainobj = re.match('(Entry number):(.*)', dut_info_split[i])
                title = mainobj.group(2).strip() + '/'
                title_list.append(mainobj.group(2).strip().decode("utf-8"))
                continue
            elif re.match('.*:.*', dut_info_split[i]):
                mainobj = re.match('(.*):\s(.*)', dut_info_split[i])
                name = title + mainobj.group(1)
                value = mainobj.group(2).strip()
                dict_value[name.decode("utf-8")] = value.decode("utf-8")
        dict_value['Entry number'] = title_list

        return dict_value
    def dut_get_show_switch_virtual(self,show_info):
        """
        Function:show switch virtual回显解析函数
        CLI命令:show switch virtual
        回显信息示例:
57H-VSU#show switch virtual 
Switch_id     Domain_id     Priority     Position     Status     Role          Description                      
----------------------------------------------------------------------------------------------------------------
1(1)          100(100)      200(200)     LOCAL        OK         ACTIVE        switch-1                         
2(2)          100(100)      100(100)     REMOTE       OK         STANDBY       switch-2                         
57H-VSU#

        Returns:
{'1(1)/Description': 'switch-1'
'1(1)/Role': 'ACTIVE'
'2(2)/Status': 'OK'
'1(1)/Position': 'LOCAL'
'2(2)/Priority': '100(100)'
'1(1)/Domain_id': '100(100)'
'2(2)/Position': 'REMOTE'
'1(1)/Priority': '200(200)'
'2(2)/Domain_id': '100(100)'
'Switch_id_list': ['1(1)'
'2(2)'], '1(1)/Status': 'OK'
'2(2)/Description': 'switch-2'
'2(2)/Role': 'STANDBY'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show switch virtual | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        id_list = []
        dict_value = {}
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for i in range(len(show_info_split)):
            show_info_split[i].strip()
        while '' in show_info_split:
            show_info_split.remove('')
        show_info_split.remove(show_info_split[1])
        for i in range(len(show_info_split)):
            if re.match(r'^Switch_id',show_info_split[i].strip()):
                t1 = show_info_split[i].split('  ')
                for j in range(len(t1)):
                   t1[j] = t1[j].strip()
                while '' in t1:
                    t1.remove('')
                continue
            t2 = show_info_split[i].split('  ')
            for j in range(len(t2)):
                t2[j] = t2[j].strip()
            while '' in t2:
                t2.remove('')
            id_list.append(str(t2[0]).encode("utf-8"))
            for k in range(len(t2)):
                if k == 0:
                    continue
                key = t2[0] + '/' + t1[k].strip()
                value = t2[k].strip()
                dict_value[key] = value
        dict_value['Switch_id_list'] = id_list
        return dict_value
    def dut_get_show_switch_virtual_topology(self,show_info):
        """
        Function:show switch virtual topology回显解析函数
        CLI命令:show switch virtual topology
        回显信息示例:
57H-VSU#show switch virtual topology 
Introduction: '[num]' means switch num, '(num/num)' means vsl-aggregateport num.

Chain topology:
[1](1/1)---(2/1)[2]

Switch[1]: master, MAC: 0074.9c71.cc71, Description: switch-1
Switch[2]: standby, MAC: 0074.9c72.92f7, Description: switch-2
57H-VSU#

        Returns:
{'Switch[1]/MAC': '0074.9c71.cc71'
'Switch[2]/MAC': '0074.9c72.92f7'
'Switch[2]/Description': 'switch-2'
'Chain topology': '[1](1/1)---(2/1)[2]'
'Switch[1]/state': 'master'
'Switch[2]/state': 'standby'
'Switch[1]/Description': 'switch-1'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show switch virtual topology | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for i in range(len(show_info_split)):
            if re.match(r'^Introduction',show_info_split[i].strip()):
                show_info_split[i] = ''
            if re.match(r'^Chain',show_info_split[i].strip()):
                key = show_info_split[i].strip(':').strip()
                dict_value[key] = show_info_split[i+1].strip()
                show_info_split[i] = ''
                show_info_split[i+1] = ''
            show_info_split[i].strip()
        while '' in show_info_split:
            show_info_split.remove('')
        for i in range(len(show_info_split)):
            if re.match(r'^Switch',show_info_split[i].strip()):
                t2 = re.split(',|:',show_info_split[i])
                key1 = t2[0].strip() + '/' + 'state'
                dict_value[key1] = t2[1].strip()
                key2 = t2[0].strip() + '/' + t2[2].strip()
                dict_value[key2] = t2[3].strip()
                key3 = t2[0].strip() + '/' + t2[4].strip()
                dict_value[key3] = t2[5].strip()
        return dict_value

    def dut_get_show_switch_virtual_link_port(self, show_info):
        """
        Function:show switch virtual link port回显解析函数
        CLI命令:show switch virtual link port
        回显信息示例:
57H-VSU#show switch virtual link port
switch 1:
Port                          AP    State Peer-port                     Rx                    Tx                    Uptime
--------------------------------------------------------------------------------------------------------------------------------
TenGigabitEthernet 1/0/49     1     OK    TenGigabitEthernet 2/0/49     109325358             5263034667            1d,17h,20m
TenGigabitEthernet 1/0/50     1     OK    TenGigabitEthernet 2/0/50     5320043551            28200152              1d,17h,20m
TenGigabitEthernet 1/0/51     -     DOWN  -                             -                     -                     -

switch 2:
Port                          AP    State Peer-port                     Rx                    Tx                    Uptime
--------------------------------------------------------------------------------------------------------------------------------
TenGigabitEthernet 2/0/49     1     OK    TenGigabitEthernet 1/0/49     5263034657            109325333             1d,17h,20m
TenGigabitEthernet 2/0/50     1     OK    TenGigabitEthernet 1/0/50     28200146              5320043551            1d,17h,20m
TenGigabitEthernet 2/0/51     -     DOWN  -                             -                     -                     -

57H-VSU#

        Returns:
{'switch 2/TenGigabitEthernet 2/0/51/Tx': '-'
'switch 2/TenGigabitEthernet 2/0/49/State': 'OK'
'switch 1/TenGigabitEthernet 1/0/49/Uptime': '1d,17h,20m'
'switch 1/TenGigabitEthernet 1/0/50/Uptime': '1d,17h,20m'
'switch 1/TenGigabitEthernet 1/0/50/State': 'OK'
'switch 2/port_list': ['TenGigabitEthernet 2/0/49'
'TenGigabitEthernet 2/0/50'
'TenGigabitEthernet 2/0/51'], 'switch 2/TenGigabitEthernet 2/0/51/Peer-port': '-'
'switch 2/TenGigabitEthernet 2/0/51/Rx': '-'
'switch 1/TenGigabitEthernet 1/0/51/Rx': '-'
'switch 1/TenGigabitEthernet 1/0/51/Uptime': '-'
'switch 2/TenGigabitEthernet 2/0/49/Rx': '5263034657'
'switch 2/TenGigabitEthernet 2/0/51/AP': '-'
'switch 2/TenGigabitEthernet 2/0/51/State': 'DOWN'
'switch 2/TenGigabitEthernet 2/0/50/Rx': '28200146'
'switch 1/port_list': ['TenGigabitEthernet 1/0/49'
'TenGigabitEthernet 1/0/50'
'TenGigabitEthernet 1/0/51'], 'switch 2/TenGigabitEthernet 2/0/49/Uptime': '1d,17h,20m'
'switch 1/TenGigabitEthernet 1/0/51/State': 'DOWN'
'switch 2/TenGigabitEthernet 2/0/50/Uptime': '1d,17h,20m'
'switch 1/TenGigabitEthernet 1/0/50/Peer-port': 'TenGigabitEthernet 2/0/50'
'switch 2/TenGigabitEthernet 2/0/49/Tx': '109325333'
'switch 1/TenGigabitEthernet 1/0/51/Tx': '-'
'switch 1/TenGigabitEthernet 1/0/51/Peer-port': '-'
'switch 2/TenGigabitEthernet 2/0/50/State': 'OK'
'switch 1/TenGigabitEthernet 1/0/49/Tx': '5263034667'
'switch 2/TenGigabitEthernet 2/0/50/Peer-port': 'TenGigabitEthernet 1/0/50'
'switch 2/TenGigabitEthernet 2/0/49/Peer-port': 'TenGigabitEthernet 1/0/49'
'switch 1/TenGigabitEthernet 1/0/50/Tx': '28200152'
'switch 1/TenGigabitEthernet 1/0/49/Peer-port': 'TenGigabitEthernet 2/0/49'
'switch 2/TenGigabitEthernet 2/0/51/Uptime': '-'
'switch 1/TenGigabitEthernet 1/0/49/State': 'OK'
'switch 1/TenGigabitEthernet 1/0/50/AP': '1'
'switch 2/TenGigabitEthernet 2/0/50/Tx': '5320043551'
'vsl_port_slot': ['2/0'
'1/0'], 'switch 1/TenGigabitEthernet 1/0/49/AP': '1'
'Switch_list': ['switch 1'
'switch 2'], 'switch 1/TenGigabitEthernet 1/0/51/AP': '-'
'switch 2/TenGigabitEthernet 2/0/49/AP': '1'
'switch 1/TenGigabitEthernet 1/0/49/Rx': '109325358'
'switch 2/TenGigabitEthernet 2/0/50/AP': '1'
'switch 1/TenGigabitEthernet 1/0/50/Rx': '5320043551'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show switch virtual link port | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """
        switch_list = []
        port_list = []
        dict_value = {}
        vsl_port_slot1 = []
        show_info_list = show_info.split("\n")
        show_list = []
        for value in show_info_list:
            if re.match("switch \d+:", value.strip()):
                if len(show_list) > 0:
                    dict_value_1 = {}
                    show_1 = "\n".join(show_list)
                    star, end, show_len_list, show_info_list_line = self.dut_common_get_linelist(show_1, "Port")
                    dict_value_tmp = self.dut_show_autoget_form(star, end, "Port", show_len_list,
                                                                show_info_list_line)
                    for k, v in dict_value_tmp.items():
                        if k == "Port_list":
                            dict_value_1[switch_key + "/port_list"] = v
                            for i_value in v:
                                if re.search('\d+\/\d+\/\d+', i_value):
                                    obj = re.search('(\d+\/\d+)\/\d+', i_value)
                                    vsl_port_slot1.append(obj.group(1))
                        else:
                            dict_value_1[switch_key + "/" + k] = v
                    dict_value = dict(dict_value.items() + dict_value_1.items())
                show_list = []
                switch_key = re.match("(switch \d+):", value.strip()).group(1)
                switch_list.append(switch_key)
            elif "-------------------------" in value or "show " in value:
                pass
            else:
                show_list.append(value)
        if len(show_list) > 0:
            dict_value_1 = {}
            show_1 = "\n".join(show_list)
            star, end, show_len_list, show_info_list_line = self.dut_common_get_linelist(show_1, "Port")
            dict_value_tmp = self.dut_show_autoget_form(star, end, "Port", show_len_list, show_info_list_line)
            for k, v in dict_value_tmp.items():
                if k == "Port_list":
                    dict_value_1[switch_key + "/port_list"] = v
                    for i_value in v:
                        if re.search('\d+\/\d+\/\d+', i_value):
                            obj = re.search('(\d+\/\d+)\/\d+', i_value)
                            vsl_port_slot1.append(obj.group(1))
                else:
                    dict_value_1[switch_key + "/" + k] = v
            dict_value = dict(dict_value.items() + dict_value_1.items())
        vsl_port_slot = list(set(vsl_port_slot1))
        dict_value['vsl_port_slot'] = vsl_port_slot
        dict_value["Switch_list"] = switch_list
        return dict_value
    def dut_get_show_vsd_detail(self,show_info):
        """
        Function:show vsd detail回显解析函数
        CLI命令:show vsd detail
        回显信息示例:
18K#show vsd detail 
vsd_id: 0
vsd_name: Ruijie
vsd mac address: 0011.2233.4455

vsd_id: 1
vsd_name: vsd1
vsd mac address: 0011.2233.4457

vsd_id: 2
vsd_name: vsd2
vsd mac address: 0011.2233.4459

        Returns:
{'0/vsd_name': 'Ruijie'
'0/vsd mac address': '0011.2233.4455'
'1/vsd mac address': '0011.2233.4457'
'1/vsd_name': 'vsd1'
'2/vsd mac address': '0011.2233.4459'
'2/vsd_name': 'vsd2'
'vsd_id_list': ['0'
'1'
'2']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show vsd detail | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        vsd_list = []
        dict_value = {}
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for i in range(len(show_info_split)):
            show_info_split[i].strip()
        while '' in show_info_split:
            show_info_split.remove('')
        for i in range(len(show_info_split)):
            if re.match(r'^vsd_id',show_info_split[i].strip()):
                key = show_info_split[i].split(':')[1].strip()
                vsd_list.append(key)
                continue
            t1 = show_info_split[i].split(':')
            key1 = key + '/' + t1[0].strip()
            dict_value[key1] = t1[1].strip()
        dict_value['vsd_id_list'] = vsd_list
        return dict_value
    def dut_get_show_vsd_all(self,show_info):
        """
        Function:show vsd all回显解析函数
        CLI命令:show vsd all
        回显信息示例:
18K#show vsd all        
vsd_id: 0
vsd_name: Ruijie
vsd mac address: 0011.2233.4455
interface:
        TenGigabitEthernet 1/9/1                         TenGigabitEthernet 1/9/2                         
        TenGigabitEthernet 1/9/3                         TenGigabitEthernet 1/9/4                         
        TenGigabitEthernet 1/9/5                         TenGigabitEthernet 1/9/6                        

slot:
        NA

vsd_id: 1
vsd_name: vsd1
vsd mac address: 0011.2233.4457
interface:
        NA
slot:
        NA

vsd_id: 2
vsd_name: vsd2
vsd mac address: 0011.2233.4459
interface:
        NA
slot:
        NA

18K#

        Returns:
{'0/interface': ['TenGigabitEthernet 1/9/1'
'TenGigabitEthernet 1/9/2'
'TenGigabitEthernet 1/9/3'
'TenGigabitEthernet 1/9/4'
'TenGigabitEthernet 1/9/5'
'TenGigabitEthernet 1/9/6'], '0/slot': ['NA'], '0/vsd_name': 'Ruijie'
'vsd_id_list': ['0'
'1'
'2'], '0/vsd mac address': '0011.2233.4455'
'1/vsd mac address': '0011.2233.4457'
'1/vsd_name': 'vsd1'
'2/vsd mac address': '0011.2233.4459'
'1/interface': ['NA'], '2/vsd_name': 'vsd2'
'2/slot': ['NA'], '1/slot': ['NA'], '2/interface': ['NA']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show vsd all | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        vsd_list = []
        dict_value = {}
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for i in range(len(show_info_split)):
            show_info_split[i].strip()
        while '' in show_info_split:
            show_info_split.remove('')
        for i in range(len(show_info_split)):
            if re.match(r'^vsd_id',show_info_split[i].strip()):
                key = show_info_split[i].split(':')[1].strip()
                vsd_list.append(key)
                continue
            if re.match(r'^interface',show_info_split[i].strip()):
                interface_list = []
                for ii in range(i+1,len(show_info_split)):
                    if re.match(r'^slot',show_info_split[ii].strip()):
                        break
                    inte = show_info_split[ii].split('  ')
                    for j in range(len(inte)):
                       inte[j] = inte[j].strip()
                    while '' in inte:
                        inte.remove('')
                    interface_list.extend(inte)
                dict_value[key+'/'+'interface'] = interface_list
                continue
            if re.match(r'^slot',show_info_split[i].strip()):
                slot_list = []
                for ii in range(i+1,len(show_info_split)):
                    if re.match(r'^vsd_id',show_info_split[ii].strip()):
                        break
                    slot = show_info_split[ii].split('  ')
                    for j in range(len(slot)):
                       slot[j] = slot[j].strip()
                    while '' in slot:
                        slot.remove('')
                    slot_list.extend(slot)
                dict_value[key+'/'+'slot'] = slot_list
                continue
            t1 = show_info_split[i].split(':')
            if len(t1) >= 2:
                key1 = key + '/' + t1[0].strip()
                dict_value[key1] = t1[1].strip()
        dict_value['vsd_id_list'] = vsd_list
        return dict_value
    def dut_get_show_webserver_status(self,show_info):
        """
        Function:show web-server status回显解析函数
        CLI命令:show web-server status
        回显信息示例:
xintiao_zj#show web-server status
http server status : disabled
http server port: 80
https server status: disabled
https server port: 443
xintiao_zj#

        Returns:
{'https server port': '443'
'http server status': 'disabled'
'https server status': 'disabled'
'http server port': '80'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show web-server status | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for i in range(len(show_info_split)):
            show_info_split[i].strip()
        while '' in show_info_split:
            show_info_split.remove('')
        for i in range(len(show_info_split)):
            t1 = show_info_split[i].split(':')
            dict_value[t1[0].strip()] = t1[1].strip()
        return dict_value
    def dut_get_show_cpu(self,show_info):
        """
        Function:show cpu回显解析函数
        CLI命令:show cpu
        回显信息示例:
11#show cpu
===============================================
[Slot 0: NBS228F-S]
CPU Using Rate Information
CPU utilization in five seconds:  5.50%
CPU utilization in one minute:  7.10%
CPU utilization in five minutes:  6.40%

 NO      5Sec    1Min    5Min Process
    1   0.00%   0.00%   0.00% init
    2   0.00%   0.00%   0.00% kthreadd
    3   0.30%   0.10%   0.10% ksoftirqd/0
    4   0.00%   0.00%   0.00% kworker/0:0
    5   0.00%   0.00%   0.00% kworker/0:0H
    6   0.00%   0.00%   0.00% kworker/u2:0
    7   0.00%   0.00%   0.00% watchdog/0
    8   0.00%   0.00%   0.00% khelper
    9   0.00%   0.00%   0.00% khungtaskd
   10   0.00%   0.00%   0.00% writeback
   11   0.00%   0.00%   0.00% bioset
   12   0.00%   0.00%   0.00% kblockd
   13   0.00%   0.00%   0.00% kswapd0
   14   0.00%   0.00%   0.00% fsnotify_mark
   15   0.00%   0.00%   0.00% kworker/u2:1
   20   0.00%   0.00%   0.00% deferwq
   21   0.00%   0.00%   0.00% ubi_bgt0d
   22   0.00%   0.00%   0.00% ubi_bgt1d
   23   0.00%   0.00%   0.00% ubifs_bgt0_1
   28   0.00%   0.00%   0.00% kworker/0:1
   40   0.00%   0.00%   0.00% ubifs_bgt1_0
   95   0.00%   0.00%   0.00% lmk_ham_mon_thr
   96   0.00%   0.00%   0.00% lmk_event_task
   97   0.00%   0.00%   0.00% lmk_task
  118   0.00%   0.00%   0.00% hamk_cpu0
  119   0.00%   0.00%   0.00% ham
  138   0.00%   0.00%   0.00% coredump-mon
  183   0.00%   0.00%   0.00% cli_start
  184   0.00%   0.10%   0.10% cli-server
  185   0.00%   0.00%   0.00% tty-admin
  192   0.00%   0.00%   0.00% cli-dump
  193   0.00%   0.00%   0.00% tty_secu_enable
  199   0.20%   0.20%   0.20% sysmon
  217   0.00%   0.00%   0.00% aaad
  230   0.00%   0.00%   0.00% dm_krnl_thread
  245   0.00%   0.00%   0.00% lsm-kthread
  270   0.30%   0.40%   0.40% lsm.elf
  273   0.00%   0.00%   0.00% log-guard
  283   0.00%   0.00%   0.00% dm_app
  284   0.00%   0.00%   0.00% syslogd
  286   0.00%   0.00%   0.00% klogd
  298   0.90%   0.70%   0.70% redis-server
  299   0.40%   0.30%   0.30% redis-server
  300   0.60%   0.60%   0.60% redis-server
  309   0.00%   0.40%   0.20% tcpip.elf
  315   0.00%   0.00%   0.00% mstp.elf
  319   0.00%   0.00%   0.00% nsm.elf
  329   0.00%   0.00%   0.00% dns_client.elf
  336   0.00%   0.00%   0.00% ping.elf
  347   0.00%   0.00%   0.00% telnetd
  355   0.00%   0.00%   0.00% telnetc
  359   0.00%   0.00%   0.00% tech-support
  362   0.00%   0.00%   0.00% bridge.elf
  417   0.00%   0.00%   0.00% telnetd_local
  423   1.30%   2.50%   2.10% ssa_process
  429   0.00%   0.00%   0.00% telnetd_local
  431   0.00%   0.00%   0.00% ss_sdm
  434   0.00%   0.00%   0.00% ssc_cap
  445   0.00%   0.00%   0.00% ssd_cap
  457   0.00%   0.00%   0.00% telnetd_local
  460   0.50%   0.80%   0.80% sw_pi_proxy
  469   0.00%   0.00%   0.00% password_policy
  479   0.00%   0.00%   0.00% upgrade
  505   0.00%   0.00%   0.00% fsui
  506   0.00%   0.00%   0.00% flinfod
  511   0.00%   0.10%   0.10% ss_ham_server
  522   0.00%   0.00%   0.00% cwmp.elf
  553   0.00%   0.00%   0.00% cwmp_gsoap.elf
  561   0.00%   0.00%   0.00% httpd.elf
  569   0.00%   0.00%   0.00% snmpd
  572   0.00%   0.00%   0.00% lacp.elf
  580   0.00%   0.00%   0.00% rldp.elf
  585   0.00%   0.00%   0.00% ntp.elf
  592   0.00%   0.00%   0.00% exe
  623   0.00%   0.00%   0.00% mtdoops-cli
  663   0.00%   0.00%   0.00% timerange
  681   0.00%   0.00%   0.00% lldp.elf
  684   0.00%   0.00%   0.00% span.elf
  690   0.00%   0.00%   0.00% sccd
  695   0.00%   0.00%   0.00% acld
  698   0.00%   0.00%   0.00% cpp_cli
  704   0.00%   0.00%   0.00% ss_cpp
  723   0.00%   0.00%   0.00% ssc_ap
  728   0.00%   0.00%   0.00% ssc_l2topo
  734   0.00%   0.00%   0.00% mirror_app
  742   0.00%   0.00%   0.00% poe_app
  749   0.00%   0.00%   0.00% ssc_policy
  752   0.80%   0.80%   0.80% ssc_port
  755   0.00%   0.00%   0.00% protected_app
  758   0.00%   0.00%   0.00% storm_app
  762   0.10%   0.00%   0.00% ssc_vlan
  769   0.00%   0.00%   0.00% ssc_mac
  772   0.00%   0.00%   0.00% snooping.elf
  776   0.00%   0.00%   0.00% dhcpc.elf
  799   0.00%   0.00%   0.00% rl-con/1421
  807   0.10%   0.10%   0.00% rl-con/0
 1523   0.00%   0.00%   0.00% sleep

        Returns:
{'protected_app/NO': '755'
'ss_ham_server/5Min': '0.10%'
'kworker/u2:1/5Min': '0.00%'
'ssc_cap/NO': '434'
'snmpd/1Min': '0.00%'
'poe_app/NO': '742'
'dns_client.elf/NO': '329'
'hamk_cpu0/5Min': '0.00%'
'flinfod/NO': '506'
'Slot 0': 'NBS228F-S'
'mtdoops-cli/5Min': '0.00%'
'kworker/0:1/1Min': '0.00%'
'Slot 0/CPU utilization in five seconds': '5.50%'
'ubifs_bgt1_0/1Min': '0.00%'
'ham/5Min': '0.00%'
'syslogd/5Sec': '0.00%'
'lldp.elf/5Min': '0.00%'
'storm_app/1Min': '0.00%'
'kblockd/1Min': '0.00%'
'sw_pi_proxy/1Min': '0.80%'
'bridge.elf/NO': '362'
'fsui/NO': '505'
'httpd.elf/1Min': '0.00%'
'ubifs_bgt1_0/5Min': '0.00%'
'khelper/5Min': '0.00%'
'init/1Min': '0.00%'
'rldp.elf/NO': '580'
'telnetc/NO': '355'
'syslogd/NO': '284'
'lmk_ham_mon_thr/NO': '95'
'khungtaskd/NO': '9'
'writeback/5Sec': '0.00%'
'ssc_l2topo/1Min': '0.00%'
'ssc_cap/5Sec': '0.00%'
'upgrade/5Sec': '0.00%'
'mirror_app/NO': '734'
'ubi_bgt0d/1Min': '0.00%'
'cwmp_gsoap.elf/5Min': '0.00%'
'tty-admin/1Min': '0.00%'
'ssc_vlan/NO': '762'
'span.elf/5Min': '0.00%'
'redis-server/NO': '300'
'flinfod/5Sec': '0.00%'
'sw_pi_proxy/5Min': '0.80%'
'khelper/1Min': '0.00%'
'sleep/1Min': '0.00%'
'syslogd/5Min': '0.00%'
'rl-con/0/1Min': '0.10%'
'dm_krnl_thread/5Min': '0.00%'
'cli_start/1Min': '0.00%'
'timerange/5Sec': '0.00%'
'cpp_cli/5Min': '0.00%'
'klogd/5Min': '0.00%'
'snmpd/5Sec': '0.00%'
'cli_start/NO': '183'
'lacp.elf/NO': '572'
'log-guard/1Min': '0.00%'
'ssc_mac/5Min': '0.00%'
'sysmon/NO': '199'
'ssc_ap/NO': '723'
'cwmp_gsoap.elf/NO': '553'
'mirror_app/1Min': '0.00%'
'tech-support/NO': '359'
'lacp.elf/5Sec': '0.00%'
'telnetc/5Sec': '0.00%'
'deferwq/5Min': '0.00%'
'exe/5Sec': '0.00%'
'acld/1Min': '0.00%'
'flinfod/1Min': '0.00%'
'lacp.elf/1Min': '0.00%'
'telnetd/NO': '347'
'sw_pi_proxy/NO': '460'
'acld/NO': '695'
'kswapd0/5Sec': '0.00%'
'kworker/0:0H/5Min': '0.00%'
'bioset/5Sec': '0.00%'
'dm_app/5Min': '0.00%'
'dm_app/5Sec': '0.00%'
'sleep/NO': '1523'
'khungtaskd/5Sec': '0.00%'
'aaad/5Min': '0.00%'
'ksoftirqd/0/1Min': '0.10%'
'dhcpc.elf/NO': '776'
'ntp.elf/NO': '585'
'ssc_ap/5Sec': '0.00%'
'cwmp.elf/5Sec': '0.00%'
'khungtaskd/5Min': '0.00%'
'redis-server/5Min': '0.60%'
'Process_list': ['init'
'kthreadd'
'ksoftirqd/0'
'kworker/0:0'
'kworker/0:0H'
'kworker/u2:0'
'watchdog/0'
'khelper'
'khungtaskd'
'writeback'
'bioset'
'kblockd'
'kswapd0'
'fsnotify_mark'
'kworker/u2:1'
'deferwq'
'ubi_bgt0d'
'ubi_bgt1d'
'ubifs_bgt0_1'
'kworker/0:1'
'ubifs_bgt1_0'
'lmk_ham_mon_thr'
'lmk_event_task'
'lmk_task'
'hamk_cpu0'
'ham'
'coredump-mon'
'cli_start'
'cli-server'
'tty-admin'
'cli-dump'
'tty_secu_enable'
'sysmon'
'aaad'
'dm_krnl_thread'
'lsm-kthread'
'lsm.elf'
'log-guard'
'dm_app'
'syslogd'
'klogd'
'redis-server'
'redis-server'
'redis-server'
'tcpip.elf'
'mstp.elf'
'nsm.elf'
'dns_client.elf'
'ping.elf'
'telnetd'
'telnetc'
'tech-support'
'bridge.elf'
'telnetd_local'
'ssa_process'
'telnetd_local'
'ss_sdm'
'ssc_cap'
'ssd_cap'
'telnetd_local'
'sw_pi_proxy'
'password_policy'
'upgrade'
'fsui'
'flinfod'
'ss_ham_server'
'cwmp.elf'
'cwmp_gsoap.elf'
'httpd.elf'
'snmpd'
'lacp.elf'
'rldp.elf'
'ntp.elf'
'exe'
'mtdoops-cli'
'timerange'
'lldp.elf'
'span.elf'
'sccd'
'acld'
'cpp_cli'
'ss_cpp'
'ssc_ap'
'ssc_l2topo'
'mirror_app'
'poe_app'
'ssc_policy'
'ssc_port'
'protected_app'
'storm_app'
'ssc_vlan'
'ssc_mac'
'snooping.elf'
'dhcpc.elf'
'rl-con/1421'
'rl-con/0'
'sleep'], 'writeback/1Min': '0.00%'
'lmk_event_task/NO': '96'
'telnetc/5Min': '0.00%'
'tty_secu_enable/5Min': '0.00%'
'log-guard/NO': '273'
'ssc_mac/NO': '769'
'deferwq/1Min': '0.00%'
'fsnotify_mark/5Min': '0.00%'
'khelper/NO': '8'
'kworker/0:0/5Sec': '0.00%'
'ubi_bgt0d/5Min': '0.00%'
'telnetd_local/1Min': '0.00%'
'kswapd0/NO': '13'
'ham/NO': '119'
'Slot 0/CPU utilization in five minutes': '6.40%'
'aaad/NO': '217'
'ss_sdm/1Min': '0.00%'
'rl-con/0/5Min': '0.00%'
'ssc_port/1Min': '0.80%'
'lmk_event_task/5Sec': '0.00%'
'lmk_task/NO': '97'
'ssa_process/5Min': '2.10%'
'tech-support/1Min': '0.00%'
'ubi_bgt1d/5Sec': '0.00%'
'cli-server/NO': '184'
'ham/1Min': '0.00%'
'lldp.elf/1Min': '0.00%'
'ss_cpp/5Sec': '0.00%'
'telnetd/5Min': '0.00%'
'kworker/u2:0/NO': '6'
'Slot 0/CPU utilization in one minute': '7.10%'
'lsm-kthread/5Min': '0.00%'
'snooping.elf/5Sec': '0.00%'
'poe_app/5Min': '0.00%'
'ping.elf/NO': '336'
'watchdog/0/1Min': '0.00%'
'password_policy/5Min': '0.00%'
'cli-dump/NO': '192'
'kworker/u2:1/NO': '15'
'mirror_app/5Sec': '0.00%'
'kthreadd/NO': '2'
'timerange/1Min': '0.00%'
'cwmp.elf/1Min': '0.00%'
'lmk_ham_mon_thr/5Sec': '0.00%'
'rl-con/1421/5Sec': '0.00%'
'ubifs_bgt0_1/NO': '23'
'tcpip.elf/5Sec': '0.00%'
'fsui/5Min': '0.00%'
'ss_cpp/NO': '704'
'klogd/1Min': '0.00%'
'kblockd/5Min': '0.00%'
'ssc_vlan/5Sec': '0.10%'
'tty_secu_enable/NO': '193'
'bioset/NO': '11'
'telnetd_local/NO': '457'
'telnetc/1Min': '0.00%'
'watchdog/0/NO': '7'
'hamk_cpu0/1Min': '0.00%'
'exe/NO': '592'
'ping.elf/1Min': '0.00%'
'dm_krnl_thread/1Min': '0.00%'
'nsm.elf/5Sec': '0.00%'
'ntp.elf/5Sec': '0.00%'
'cli_start/5Min': '0.00%'
'sleep/5Sec': '0.00%'
'cpp_cli/5Sec': '0.00%'
'telnetd_local/5Sec': '0.00%'
'writeback/5Min': '0.00%'
'dhcpc.elf/1Min': '0.00%'
'exe/1Min': '0.00%'
'ss_ham_server/1Min': '0.10%'
'lsm.elf/1Min': '0.40%'
'ksoftirqd/0/NO': '3'
'klogd/NO': '286'
'fsui/1Min': '0.00%'
'ssc_policy/5Sec': '0.00%'
'mirror_app/5Min': '0.00%'
'watchdog/0/5Min': '0.00%'
'storm_app/5Min': '0.00%'
'init/5Sec': '0.00%'
'nsm.elf/NO': '319'
'ubi_bgt1d/1Min': '0.00%'
'kworker/u2:1/5Sec': '0.00%'
'tty-admin/NO': '185'
'upgrade/5Min': '0.00%'
'ssc_cap/1Min': '0.00%'
'telnetd/1Min': '0.00%'
'bioset/5Min': '0.00%'
'kworker/0:0H/NO': '5'
'span.elf/5Sec': '0.00%'
'upgrade/1Min': '0.00%'
'ham/5Sec': '0.00%'
'coredump-mon/1Min': '0.00%'
'bridge.elf/5Min': '0.00%'
'ssc_mac/1Min': '0.00%'
'cli_start/5Sec': '0.00%'
'ksoftirqd/0/5Sec': '0.30%'
'ss_cpp/5Min': '0.00%'
'telnetd/5Sec': '0.00%'
'cpp_cli/NO': '698'
'cli-dump/1Min': '0.00%'
'span.elf/NO': '684'
'poe_app/1Min': '0.00%'
'lmk_ham_mon_thr/1Min': '0.00%'
'hamk_cpu0/NO': '118'
'rl-con/0/NO': '807'
'span.elf/1Min': '0.00%'
'ubifs_bgt1_0/5Sec': '0.00%'
'rl-con/1421/5Min': '0.00%'
'mtdoops-cli/1Min': '0.00%'
'upgrade/NO': '479'
'klogd/5Sec': '0.00%'
'ubifs_bgt0_1/1Min': '0.00%'
'dhcpc.elf/5Sec': '0.00%'
'kworker/0:0/5Min': '0.00%'
'cli-server/1Min': '0.10%'
'mstp.elf/1Min': '0.00%'
'ubi_bgt1d/5Min': '0.00%'
'lmk_ham_mon_thr/5Min': '0.00%'
'lacp.elf/5Min': '0.00%'
'rl-con/1421/1Min': '0.00%'
'kworker/0:1/5Sec': '0.00%'
'coredump-mon/NO': '138'
'cpp_cli/1Min': '0.00%'
'syslogd/1Min': '0.00%'
'tty_secu_enable/5Sec': '0.00%'
'lsm.elf/5Sec': '0.30%'
'dm_krnl_thread/NO': '230'
'lsm-kthread/5Sec': '0.00%'
'ssc_port/5Sec': '0.80%'
'ss_sdm/5Sec': '0.00%'
'rldp.elf/5Min': '0.00%'
'khelper/5Sec': '0.00%'
'hamk_cpu0/5Sec': '0.00%'
'deferwq/NO': '20'
'httpd.elf/NO': '561'
'kworker/0:0H/1Min': '0.00%'
'protected_app/5Min': '0.00%'
'ssc_mac/5Sec': '0.00%'
'lmk_event_task/1Min': '0.00%'
'tech-support/5Min': '0.00%'
'ssc_vlan/1Min': '0.00%'
'ubifs_bgt1_0/NO': '40'
'ping.elf/5Sec': '0.00%'
'ssa_process/NO': '423'
'ubi_bgt0d/NO': '21'
'snooping.elf/1Min': '0.00%'
'tcpip.elf/1Min': '0.40%'
'nsm.elf/5Min': '0.00%'
'ssc_vlan/5Min': '0.00%'
'storm_app/NO': '758'
'ssc_cap/5Min': '0.00%'
'ssd_cap/NO': '445'
'snooping.elf/NO': '772'
'acld/5Sec': '0.00%'
'sccd/NO': '690'
'ssc_policy/1Min': '0.00%'
'ssd_cap/5Min': '0.00%'
'writeback/NO': '10'
'sccd/5Min': '0.00%'
'lsm.elf/5Min': '0.40%'
'aaad/1Min': '0.00%'
'sleep/5Min': '0.00%'
'dm_krnl_thread/5Sec': '0.00%'
'rl-con/0/5Sec': '0.10%'
'password_policy/NO': '469'
'snmpd/NO': '569'
'ubifs_bgt0_1/5Min': '0.00%'
'bridge.elf/5Sec': '0.00%'
'httpd.elf/5Sec': '0.00%'
'ssc_l2topo/NO': '728'
'coredump-mon/5Sec': '0.00%'
'redis-server/1Min': '0.60%'
'mstp.elf/5Sec': '0.00%'
'ping.elf/5Min': '0.00%'
'sysmon/5Sec': '0.20%'
'lmk_event_task/5Min': '0.00%'
'timerange/5Min': '0.00%'
'kworker/u2:0/5Min': '0.00%'
'ss_cpp/1Min': '0.00%'
'lsm.elf/NO': '270'
'rldp.elf/5Sec': '0.00%'
'ubi_bgt0d/5Sec': '0.00%'
'exe/5Min': '0.00%'
'kswapd0/5Min': '0.00%'
'protected_app/5Sec': '0.00%'
'lmk_task/5Min': '0.00%'
'kthreadd/5Sec': '0.00%'
'init/NO': '1'
'rl-con/1421/NO': '799'
'rldp.elf/1Min': '0.00%'
'bridge.elf/1Min': '0.00%'
'fsnotify_mark/5Sec': '0.00%'
'password_policy/1Min': '0.00%'
'lsm-kthread/1Min': '0.00%'
'nsm.elf/1Min': '0.00%'
'mstp.elf/5Min': '0.00%'
'ssd_cap/5Sec': '0.00%'
'sccd/5Sec': '0.00%'
'dns_client.elf/5Min': '0.00%'
'ssa_process/5Sec': '1.30%'
'lmk_task/1Min': '0.00%'
'timerange/NO': '663'
'httpd.elf/5Min': '0.00%'
'tech-support/5Sec': '0.00%'
'bioset/1Min': '0.00%'
'ssc_l2topo/5Min': '0.00%'
'kworker/0:0H/5Sec': '0.00%'
'cli-dump/5Sec': '0.00%'
'ssc_ap/5Min': '0.00%'
'storm_app/5Sec': '0.00%'
'sccd/1Min': '0.00%'
'ssd_cap/1Min': '0.00%'
'acld/5Min': '0.00%'
'ssc_ap/1Min': '0.00%'
'tty-admin/5Min': '0.00%'
'dns_client.elf/1Min': '0.00%'
'cwmp.elf/NO': '522'
'kworker/u2:0/5Sec': '0.00%'
'poe_app/5Sec': '0.00%'
'fsnotify_mark/NO': '14'
'mstp.elf/NO': '315'
'ssc_port/5Min': '0.80%'
'ss_sdm/5Min': '0.00%'
'ntp.elf/5Min': '0.00%'
'cli-server/5Min': '0.10%'
'lldp.elf/NO': '681'
'dm_app/NO': '283'
'snooping.elf/5Min': '0.00%'
'kworker/0:1/NO': '28'
'mtdoops-cli/5Sec': '0.00%'
'telnetd_local/5Min': '0.00%'
'cli-server/5Sec': '0.00%'
'kworker/u2:1/1Min': '0.00%'
'log-guard/5Min': '0.00%'
'kworker/0:0/1Min': '0.00%'
'kblockd/5Sec': '0.00%'
'kthreadd/5Min': '0.00%'
'password_policy/5Sec': '0.00%'
'deferwq/5Sec': '0.00%'
'kblockd/NO': '12'
'ksoftirqd/0/5Min': '0.10%'
'init/5Min': '0.00%'
'ubifs_bgt0_1/5Sec': '0.00%'
'lmk_task/5Sec': '0.00%'
'coredump-mon/5Min': '0.00%'
'ssc_l2topo/5Sec': '0.00%'
'fsui/5Sec': '0.00%'
'ss_sdm/NO': '431'
'ssc_port/NO': '752'
'protected_app/1Min': '0.00%'
'lsm-kthread/NO': '245'
'tcpip.elf/5Min': '0.20%'
'ssa_process/1Min': '2.50%'
'cwmp_gsoap.elf/5Sec': '0.00%'
'mtdoops-cli/NO': '623'
'sysmon/1Min': '0.20%'
'ntp.elf/1Min': '0.00%'
'khungtaskd/1Min': '0.00%'
'dns_client.elf/5Sec': '0.00%'
'flinfod/5Min': '0.00%'
'fsnotify_mark/1Min': '0.00%'
'kthreadd/1Min': '0.00%'
'dhcpc.elf/5Min': '0.00%'
'cwmp_gsoap.elf/1Min': '0.00%'
'lldp.elf/5Sec': '0.00%'
'tcpip.elf/NO': '309'
'ss_ham_server/NO': '511'
'sysmon/5Min': '0.20%'
'tty-admin/5Sec': '0.00%'
'ssc_policy/NO': '749'
'cwmp.elf/5Min': '0.00%'
'cli-dump/5Min': '0.00%'
'kswapd0/1Min': '0.00%'
'dm_app/1Min': '0.00%'
'aaad/5Sec': '0.00%'
'tty_secu_enable/1Min': '0.00%'
'sw_pi_proxy/5Sec': '0.50%'
'ss_ham_server/5Sec': '0.00%'
'kworker/0:0/NO': '4'
'log-guard/5Sec': '0.00%'
'snmpd/5Min': '0.00%'
'watchdog/0/5Sec': '0.00%'
'kworker/0:1/5Min': '0.00%'
'redis-server/5Sec': '0.60%'
'kworker/u2:0/1Min': '0.00%'
'ubi_bgt1d/NO': '22'
'ssc_policy/5Min': '0.00%'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show cpu | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="Process"     #需要变参的地方
        col_len_list = []
        #创建字典
        dict_value={}
        rol_title_list = []
        title_row =[]

        show_info_list_line = self.dut_get_start_show_info(show_info)
        if re.match(r'.*show cpu.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        line_len = len (show_info_list_line)
        key_name = ""
        for line_len_num in range(0,line_len):
            if "Slot" in show_info_list_line[line_len_num]:              #***********
                list_1 = show_info_list_line[line_len_num].split(":")
                key_name = '%s'%list_1[0].lstrip().rstrip().replace("[","").replace("]","")
                dict_value[key_name] = '%s'%list_1[1].lstrip().rstrip().replace("[","").replace("]","")
            if "five seconds" in show_info_list_line[line_len_num]:              #***********
                list_1 = show_info_list_line[line_len_num].split(":")
                if key_name != "" :
                    key_name1 = key_name+'/'+list_1[0].lstrip().rstrip()
                else:
                    key_name1 = list_1[0].lstrip().rstrip()
                dict_value[key_name1] = '%s'%list_1[1].lstrip().rstrip()
            if "one minute" in show_info_list_line[line_len_num]:              #***********
                list_1 = show_info_list_line[line_len_num].split(":")
                if key_name != "":
                    key_name1 = key_name + '/' + list_1[0].lstrip().rstrip()
                else:
                    key_name1 = list_1[0].lstrip().rstrip()
                dict_value[key_name1] = '%s'%list_1[1].lstrip().rstrip()
            if "five minutes" in show_info_list_line[line_len_num]:              #***********
                end_num = line_len_num
                list_1 = show_info_list_line[line_len_num].split(":")
                if key_name != "":
                    key_name1 = key_name + '/' + list_1[0].lstrip().rstrip()
                else:
                    key_name1 = list_1[0].lstrip().rstrip()
                dict_value[key_name1] = '%s'%list_1[1].lstrip().rstrip()

        for k in range(end_num+1,line_len):
            col_value_list = re.split(r'\s{1,}', show_info_list_line[k].lstrip(),4)
            title_col = col_value_list[4]           #*****
            if value_title in col_value_list :
                title_row = col_value_list
            else:
                if col_value_list != "":
                    rol_title_list.append(title_col)
                    for s in range (0,len(col_value_list)-1):           #*****
                        key_name = '%s/%s'%(title_col,title_row[s])
                        dict_value[key_name]=col_value_list[s]
        dict_value["Process_list"] = rol_title_list
        return dict_value
    def dut_get_show_ip_ssh(self,show_info):
        """
        Function:show ip ssh回显解析函数
        CLI命令:show ip ssh
        回显信息示例:
ws5848#show ip ssh 
SSH Enable - version 2.0
SSH Port:               1025
SSH Cipher Mode:        cbc,ctr,others
SSH HMAC Algorithm:     md5-96,md5,sha1-96,sha1
Authentication timeout: 120 secs
Authentication retries: 3
SSH SCP Server:         disabled
ws5848#

        Returns:
{'SSH Port': '1025'
'Authentication timeout': '120'
'Authentication retries': '3'
'SSH Enable': 'version 2.0'
'SSH HMAC Algorithm': ['md5-96'
'md5'
'sha1-96'
'sha1'], 'SSH SCP Server': 'disabled'
'SSH Cipher Mode': ['cbc'
'ctr'
'others']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip ssh | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for i in range(len(show_info_split)):
            show_info_split[i].strip()
        while '' in show_info_split:
            show_info_split.remove('')
        t1 = show_info_split[0].split('-')
        dict_value[t1[0].strip()] = t1[1].strip()
        show_info_split.remove(show_info_split[0])
        for i in range(len(show_info_split)):
            if 'please enable service ssh-server' in show_info_split[i]:
                dict_value['ssh-server'] = 'disable'
                continue
            if ":" in show_info_split[i]:
                t2 = show_info_split[i].split(':')
                if len(t2[1].split(',')) > 1:
                    value = t2[1].split(',')
                    for j in range(len(value)):
                        value[j] = value[j].strip()
                else:
                    value = t2[1].replace("secs","").strip()
                dict_value[t2[0].strip()] = value
        return dict_value

    def dut_get_show_arp_oob(self, show_info):
        """
        Function:show arp oob回显解析函数
        CLI命令:show arp oob
        回显信息示例:
5848VAC#show arp oob 
Protocol  Address          Age(min)  Hardware        Type   Interface               
Internet  10.1.1.1         --        00d0.f999.933a  arpa   Mgmt 1/0                
Internet  10.1.1.2         2         0074.9c68.a42d  arpa   Mgmt 1/0                
Total number of ARP entries: 2
5848VAC#

        Returns:
{'00d0.f999.933a/Age(min)': '--'
'00d0.f999.933a/Address': '10.1.1.1'
'00d0.f999.933a/Protocol': 'Internet'
'0074.9c68.a42d/Protocol': 'Internet'
'0074.9c68.a42d/Age(min)': '2'
'00d0.f999.933a/Type': 'arpa'
'0074.9c68.a42d/Interface': 'Mgmt 1/0'
'0074.9c68.a42d/Address': '10.1.1.2'
'Total number of ARP entries': '2'
'0074.9c68.a42d/Type': 'arpa'
'mac_list': ['00d0.f999.933a'
'0074.9c68.a42d'], '00d0.f999.933a/Interface': 'Mgmt 1/0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show arp oob | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        mac_list = []
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for i in range(len(show_info_split)):
            show_info_split[i].strip() # 删除空行及纯空格所在行
        while '' in show_info_split:
            show_info_split.remove('')
        for i in range(len(show_info_split)):
            if 'Total number' in show_info_split[i]:
                t0 = show_info_split[i].split(':')
                dict_value[t0[0].strip()] = t0[1].strip()
                continue
            if 'Protocol' in show_info_split[i]:
                t1 = show_info_split[i].split('  ')
                for j in range(len(t1)):
                    t1[j] = t1[j].strip()
                while '' in t1:
                    t1.remove('')
                continue
            t2 = show_info_split[i].split('  ')
            for j in range(len(t2)):
                t2[j] = t2[j].strip()
            while '' in t2:
                t2.remove('')
            for k in range(len(t2)):
                if k == 3:
                    mac_list.append(t2[3])
                    continue
                key = t2[3] + '/' + t1[k]
                dict_value[key] = t2[k]
        dict_value['mac_list'] = mac_list
        return dict_value
    def dut_get_show_ipv6_dhcp(self, show_info):
        """
        Function:show ipv6 dhcp回显解析函数
        CLI命令:show ipv6 dhcp
        回显信息示例:
Ruijie(config)#show ipv6 dhcp         
This device's DHCPv6 unique identifier(DUID): 00:03:00:01:00:74:9c:91:1c:21
Ruijie(config)#

        Returns:
{'unique identifier(DUID)': '00:03:00:01:00:74:9c:91:1c:21'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 dhcp | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for i in range(len(show_info_split)):
            show_info_split[i].strip() # 删除空行及纯空格所在行
        while '' in show_info_split:
            show_info_split.remove('')
        for i in range(len(show_info_split)):
            t1 = show_info_split[i].split(':',1)
            key = t1[0].split('v6 ')[1].strip()
            dict_value[key] = t1[1].strip()
        return dict_value
    def dut_get_show_ip_route_ecmp(self, show_info):  # 定义函数，函数名由锐捷提供
        """
        Function:show ip route ecmp回显解析函数
        CLI命令:show ip route ecmp
        回显信息示例:
7H-2(config)#show ip route ecmp 

Codes:  C - Connected, L - Local, S - Static
        R - RIP, O - OSPF, B - BGP, I - IS-IS, V - Overflow route
        N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
        E1 - OSPF external type 1, E2 - OSPF external type 2
        SU - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2
        IA - Inter area, EV - BGP EVPN, * - candidate default

Gateway of last resort is no set
S     100.0.5.0/24 [1/0] via 10.10.10.2
                   [1/0] via 13.13.13.2
57H-2(config)#

        Returns:
{'100.0.5.0/24/via': ['10.10.10.2'
'13.13.13.2']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip route ecmp | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}  # 定义字典
        templist = []
        templist1 = []
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for i in range(len(show_info_split)):
            if not show_info_split[i].strip() == '':
                templist.append(show_info_split[i])
        for i in range(len(templist)):
            if re.match(r'^Gateway|-----',templist[i]):
                for j in range(i+1,len(templist)):
                    templist1.append(templist[j])
        for i in range(len(templist1)):
            via_list = []
            if re.match(r'^R|S', templist1[i]):
                temp1 = templist1[i].split(' [')
                ip = temp1[0].strip('R').strip('S').strip()
                temp1 = templist1[i].split(' [')
                te = temp1[1].split('via')
                te1 = te[1].split(',')
                via = te1[0].strip()
                via_list.append(via)
                for j in range(i+1,len(templist1)):
                    if not re.match(r'^\s', templist1[j]):
                        break
                    temp1 = templist1[j].split(' [')
                    te = temp1[1].split('via')
                    te1 = te[1].split(',')
                    via = te1[0].strip()
                    via_list.append(via)
                dict_value[ip+'/'+'via'] = via_list
                if len(te1) >=2:
                    interface = te1[-1].strip()
                    dict_value[ip+'/'+'interface'] = interface
            if re.match(r'^C', templist1[i]):
                if re.match(r'local host.$', templist1[i]):
                    temp1 = templist1[i].split('is')
                    ip = temp1[0].strip('C').strip()
                    status = temp1[1].strip().strip('.')
                    dict_value[ip+'/'+'status'] = status
                else:
                    temp1 = templist1[i].split('is')
                    ip = temp1[0].strip('C').strip()
                    te = temp1[1].split(',')
                    status = te[0].strip().strip('.')
                    dict_value[ip+'/'+'status'] = status
                    if len(te) >= 2:
                        dict_value[ip+'/'+'interface'] = te[-1].strip()
        return dict_value
    def dut_get_show_ip_route_weight(self, show_info):  # 定义函数，函数名由锐捷提供
        """
        Function:show ip route weight回显解析函数
        CLI命令:show ip route weight
        回显信息示例:
RUIJIE-18010(config)#show ip route weight                              
 
------------[distance/metric/weight]-----------
S     3.1.1.0/24 [1/0/3] via 10.10.10.1
                 [1/0/2] via 13.13.13.1
RUIJIE-18010(config)#end

        Returns:
{'3.1.1.0/24/arg2': ['1'
'0'
'2'], '3.1.1.0/24/via': ['10.10.10.1'
'13.13.13.1'], '3.1.1.0/24/arg1': ['1'
'0'
'3']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip route weight | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}  # 定义字典
        templist = []
        templist1 = []
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for i in range(len(show_info_split)):
            if not show_info_split[i].strip() == '':
                templist.append(show_info_split[i])
        for i in range(len(templist)):
            if re.match(r'^Gateway|-----',templist[i]):
                for j in range(i+1,len(templist)):
                    templist1.append(templist[j])
        for i in range(len(templist1)):
            via_list = []
            if re.match(r'^(R|S|B)', templist1[i]):
                temp1 = templist1[i].split(' [')
                ip = temp1[0].strip('R').strip('S').strip('B').strip()
                temp1 = templist1[i].split(' [')
                te = temp1[1].split('via')
                te1 = te[1].split(',')
                via = te1[0].strip()
                via_list.append(via)
                if re.match(".* \[(.*)\] .*",templist1[i].strip()):
                    obj1 = re.match(".* \[(.*)\] .*",templist1[i].strip())
                    list_tmp = []
                    list1 = obj1.group(1).split("/")
                    for list1_value in list1:
                        list_tmp.append(str(list1_value).encode("utf-8"))
                    dict_value[ip+"/arg1"] = list_tmp
                for j in range(i+1,len(templist1)):
                    if not re.match(r'^\s', templist1[j]):
                        break
                    temp1 = templist1[j].split(' [')
                    te = temp1[1].split('via')
                    te1 = te[1].split(',')
                    via = te1[0].strip()
                    via_list.append(via)
                    if re.match(".*\[(.*)\] .*",templist1[i+1].strip()):
                        obj1 = re.match(".*\[(.*)\] .*",templist1[i+1].strip())
                        list_tmp = []
                        list1 = obj1.group(1).split("/")
                        for list1_value in list1:
                            list_tmp.append(str(list1_value).encode("utf-8"))
                        dict_value[ip+"/arg2"] = list_tmp
                dict_value[ip+'/'+'via'] = via_list
                if len(te1) >=2:
                    interface = te1[-1].strip()
                    dict_value[ip+'/'+'interface'] = interface
            if re.match(r'^C', templist1[i]):
                if re.match(r'local host.$', templist1[i]):
                    temp1 = templist1[i].split('is')
                    ip = temp1[0].strip('C').strip()
                    status = temp1[1].strip().strip('.')
                    dict_value[ip+'/'+'status'] = status
                else:
                    temp1 = templist1[i].split('is')
                    ip = temp1[0].strip('C').strip()
                    te = temp1[1].split(',')
                    status = te[0].strip().strip('.')
                    dict_value[ip+'/'+'status'] = status
                    if len(te) >= 2:
                        dict_value[ip+'/'+'interface'] = te[-1].strip()
        return dict_value
    def dut_get_show_ip_ospf_database_external_advrouter_ip(self,show_info):
        """
        Function:show ip ospf database external advrouter ip回显解析函数
        CLI命令:show ip ospf database external advrouter ip
        回显信息示例:
57H-2(config-router)#show ip ospf database external adv-router (****)x.x.x.x

            OSPF Router with ID (1.1.1.2) (Process ID 1)

                AS External Link States 

  LS age: 282
  Options: 0x2 (-|-|-|-|-|-|E|-)
  LS Type: AS-external-LSA
  Link State ID: 100.0.1.0 (External Network Number)
  Advertising Router: 1.1.1.1
  LS Seq Number: 80000003
  Checksum: 0x19ce
  Length: 36
  Network Mask: /24
        Metric Type: 1
        TOS: 0
        Metric: 0
        Forward Address: 0.0.0.0
        External Route Tag: 0show ip ospf database external advrouter ip

        Returns:
{"100.0.1.0/Network Mask": "/24"
"100.0.1.0/Checksum": "0x19ce"
"100.0.1.0/LS Seq Number": "80000003"
"100.0.1.0/TOS": "0"
"100.0.1.0/External Route Tag": "0show ip ospf database external advrouter ip"
"100.0.1.0/LS Type": "AS-external-LSA"
"100.0.1.0/Metric": "0"
"100.0.1.0/Length": "36"
"100.0.1.0/LS age": "282"
"100.0.1.0/Options": "0x2 (-|-|-|-|-|-|E|-)"
"Link State ID List": ["100.0.1.0"], "100.0.1.0/Advertising Router": "1.1.1.1"
"100.0.1.0/Forward Address": "0.0.0.0"
"100.0.1.0/Metric Type": "1"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip ospf database external advrouter ip | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        count = 0
        count_index = []
        title_list = []
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for i in range(len(show_info_split)):
            show_info_split[i].strip()
        while '' in show_info_split:
            show_info_split.remove('')
        show_info_split.remove(show_info_split[0])
        show_info_split.remove(show_info_split[0])
        for i in range(len(show_info_split)):
            if re.match('.*LS age.*', show_info_split[i]):
                count = count + 1
                count_index.append(i)
        for j in range(count):
            title = ''
            title_list = []
            if j == count - 1:
                info_list = show_info_split[count_index[j]:]
                for i in info_list:
                    if re.match('.*Link State ID:\s.*\(.*\).*', i):
                        mainobejt = re.match('.*Link State ID:\s(.*)\(.*\).*', i)
                        title = mainobejt.group(1).strip()
                        title_list.append(title)
                for i in info_list:
                    if re.match('.*Link State ID:\s.*\(.*\).*', i):
                        continue
                    elif re.match('.*:.*', i):
                        mainobejt = re.match('(.*):(.*)', i)
                        next_title = title + '/' + mainobejt.group(1).strip()
                        vaule = mainobejt.group(2).strip()
                        dict_value[next_title] = vaule
            else:
                info_list = show_info_split[count_index[j]:count_index[j + 1]]
                for i in info_list:
                    if re.match('.*Link State ID:\s.*\(.*\).*', i):
                        mainobejt = re.match('.*Link State ID:\s(.*)\(.*\).*', i)
                        title = mainobejt.group(1).strip()
                        title_list.append(title)
                for i in info_list:
                    if re.match('.*Link State ID:\s.*\(.*\).*', i):
                        continue
                    elif re.match('.*:.*', i):
                        mainobejt = re.match('(.*):(.*)', i)
                        next_title = title + '/' + mainobejt.group(1).strip()
                        vaule = mainobejt.group(2).strip()
                        dict_value[next_title] = vaule
        dict_value['Link State ID List'] = title_list
        return dict_value
    def dut_get_show_macaddresstable_notification(self,show_info):
        """
        Function:show mac-address-table notification回显解析函数
        CLI命令:show mac-address-table notification
        回显信息示例:
DUT1(config)#show mac-address-table notification 
MAC Notification Feature : Enabled
Interval(Sec): 1
Maximum History Size : 50
Current History Size : 6
DUT1(config)#show mac-address-table notification

        Returns:
{'MAC Notification Feature': 'Enabled'
'Interval(Sec)': '1'
'Current History Size': '6'
'Maximum History Size': '50'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mac-address-table notification | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        str_arg ="mac-address-table"
        return self.dut_get_show_info_analy_all_colon(show_info,str_arg)
    def dut_get_show_ip_route_vrf_word_summary_bak0530(self,show_info):
        value_title = "NORMAL"
        dut_info_split = []
        str_arg='show ip route vrf'
        show_info_split = show_info.split("\n")
        if re.match(r'.*'+str_arg+'.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for i in range(6, 14):
            dut_info_split.append(show_info_split[i])
        length = len(dut_info_split)
        for i in range(length):
            re.sub(r' ', "", dut_info_split[i], 7)
        # 列宽
        length_list = [7, 10, 11, 11, 11, 5]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        ##print dut_info_split
        # 创建字典
        dict = {}
        device_list = []
        for i in range(length):
            sight = 0
            sight_sum = 0
            list = []
            for j in range(length_list_len):
                sight_sum = sight_sum + int(length_list[j])
                a = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                a = a.lstrip()
                a = a.rstrip()
                list.append(a)
            # 获取表头，用于组合
            if list[2] == value_title:
                title = list
            elif list[0] != value_title:
                # 生成字典
                for s in range(2, length_list_len):
                    name = '%s/%s' % (list[1], title[s])
                    dict[name] = list[s]
        return dict
    def dut_get_show_ip_ospf_num_neighbor(self,show_info):
        """
        Function:show ip ospf <num> neighbor回显解析函数
        CLI命令:show ip ospf <num> neighbor
        回显信息示例:
Ruijie#show ip ospf 2 neighbor

OSPF process 2, 1 Neighbors, 1 is Full:
Neighbor ID     Pri   State                BFD State  Dead Time   Address         Interface
172.16.1.1        1   Full/BDR             -          00:01:47    172.16.1.1      VLAN 1

        Returns:
{'Neighbors': '1'
'172.16.1.1/Pri': '1'
'172.16.1.1/Address': '172.16.1.1'
'Full': '1'
'172.16.1.1/Interface': 'VLAN 1'
'172.16.1.1/State': 'Full/BDR'
'172.16.1.1/Neighbor ID': '172.16.1.1'
'Neighbor_ID_list': ['172.16.1.1'], '172.16.1.1/BFD State': '-'
'OSPF process': '2'
'172.16.1.1/Dead Time': '00:01:47'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip ospf <num> neighbor | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title = "Neighbor ID"  # 需要变参的地方
        col_len_list = []
        # 创建字典
        dict_value = {}
        rol_title_list = []
        title_row = []
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        length = len(show_info_list_line)
        for line_len_num in range(0, length):
            if "OSPF process" in show_info_list_line[line_len_num]:  # ***********
                match = re.search("OSPF process(.*),(.*)Neighbors,(.*)is(.*)", show_info_list_line[line_len_num])
                dict_value["OSPF process"] = match.group(1).strip()
                dict_value["Neighbors"] = match.group(2).strip()
                dict_value["Full"] = match.group(3).strip()
        for k in range(1, length):
            col_value_list = re.split(r'\s{2,}', show_info_list_line[k])
            title_col = col_value_list[0]  # 表头的列值位*****
            if value_title in col_value_list:
                title_row = col_value_list
            else:
                if col_value_list != "":
                    rol_title_list.append(title_col)
                    for s in range(1, len(col_value_list)):  # 表头的列值位右边开始*****
                        key_name = '%s/%s' % (title_col, title_row[s])
                        dict_value[key_name] = col_value_list[s]
                    key_name = '%s/%s' % (title_col, title_row[0])
                    dict_value[key_name] = col_value_list[0]
        dict_value["Neighbor_ID_list"] = rol_title_list
        return dict_value
    def dut_get_show_mls_qos_maps_cosdscp(self,show_info):
        """
        Function:show mls qos maps cos-dscp回显解析函数
        CLI命令:show mls qos maps cos-dscp
        回显信息示例:
Ruijie#show mls qos maps cos-dscp 
cos dscp
--- ----
0   10
1   12
2   14
3   18
4   20
5   22
6   26
7   28

        Returns:
{"1/dscp": "12"
"7/dscp": "28"
"cos_list": ["0"
"1"
"2"
"3"
"4"
"5"
"6"
"7"], "6/dscp": "26"
"3/dscp": "18"
"0/dscp": "10"
"4/dscp": "20"
"5/dscp": "22"
"2/dscp": "14"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mls qos maps cos-dscp | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"cos")
    def dut_get_show_mls_qos_maps_dscpcos(self,show_info):
        """
        Function:show mls qos maps dscp-cos回显解析函数
        CLI命令:show mls qos maps dscp-cos
        回显信息示例:
Ruijie#show mls qos maps dscp-cos 
dscp cos     dscp cos     dscp cos     dscp cos
---- ---     ---- ---     ---- ---     ---- ---
 0   0        1   0        2   0        3   0       
 4   0        5   0        6   0        7   0       
 8   1        9   1       10   1       11   1       
12   1       13   1       14   1       15   1       
16   2       17   2       18   1       19   2       
20   1       21   2       22   1       23   2       
24   3       25   3       26   1       27   3       
28   1       29   3       30   3       31   3       
32   4       33   4       34   4       35   4       
36   4       37   4       38   4       39   4       
40   5       41   5       42   5       43   5       
44   5       45   5       46   5       47   5       
48   6       49   6       50   6       51   6       
52   6       53   6       54   6       55   6       
56   7       57   7       58   7       59   7       
60   7       61   7       62   7       63   7

        Returns:
{"25/cos": "3"
"63/cos": "7"
"17/cos": "2"
"47/cos": "5"
"62/cos": "62"
"21/cos": "2"
"34/cos": "34"
"9/cos": "1"
"28/cos": "1"
"36/cos": "4"
"52/cos": "6"
"58/cos": "58"
"27/cos": "3"
"6/cos": "6"
"24/cos": "3"
"60/cos": "7"
"31/cos": "3"
"30/cos": "30"
"48/cos": "6"
"16/cos": "2"
"19/cos": "2"
"0/cos": "0"
"49/cos": "6"
"15/cos": "1"
"40/cos": "5"
"51/cos": "6"
"56/cos": "7"
"53/cos": "6"
"32/cos": "4"
"26/cos": "26"
"7/cos": "0"
"55/cos": "6"
"50/cos": "50"
"10/cos": "10"
"22/cos": "22"
"57/cos": "7"
"1/cos": "0"
"18/cos": "18"
"cos_list": ["0"
"1"
"2"
"3"
"4"
"5"
"6"
"7"
"8"
"9"
"10"
"11"
"12"
"13"
"14"
"15"
"16"
"17"
"18"
"19"
"20"
"21"
"22"
"23"
"24"
"25"
"26"
"27"
"28"
"29"
"30"
"31"
"32"
"33"
"34"
"35"
"36"
"37"
"38"
"39"
"40"
"41"
"42"
"43"
"44"
"45"
"46"
"47"
"48"
"49"
"50"
"51"
"52"
"53"
"54"
"55"
"56"
"57"
"58"
"59"
"60"
"61"
"62"
"63"], "14/cos": "14"
"41/cos": "5"
"8/cos": "1"
"2/cos": "2"
"5/cos": "0"
"29/cos": "3"
"54/cos": "54"
"12/cos": "1"
"39/cos": "4"
"61/cos": "7"
"11/cos": "1"
"44/cos": "5"
"45/cos": "5"
"23/cos": "2"
"46/cos": "46"
"38/cos": "38"
"20/cos": "1"
"35/cos": "4"
"59/cos": "7"
"33/cos": "4"
"3/cos": "0"
"4/cos": "0"
"37/cos": "4"
"13/cos": "1"
"42/cos": "42"
"43/cos": "5"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mls qos maps dscp-cos | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        str_arg = 'show mls qos maps dscp-cos'
        clean_arg=str_arg
        # 创建字典
        dict_value = {}

        # 按行读取信息，并清除空值清除无用信息头信息尾数据
        show_info_split = show_info.split("\n")
        if re.match(r'.*'+clean_arg+'.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        dut_info_split = show_info_split
        # （去掉dut_info_split中的空值以及只包含空格符的值）
        for i in dut_info_split:
            if '' in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' ' in dut_info_split:
                dut_info_split.remove(' ')
        for i in range(len(dut_info_split)):
            dut_info_split[i] = dut_info_split[i].strip(' ')
        #print(dut_info_split)

        title_info=dut_info_split[0].split(' ')
        title1 = title_info[0].strip()
        title2 = title_info[1].strip()
        dut_info_split.remove(dut_info_split[0])
        dut_info_split.remove(dut_info_split[0])

        #
        cos_list=[]
        for i in range(len(dut_info_split)):
            info=dut_info_split[i].split(' ')
            while 1:
                if '' in info:
                    info.remove('')
                else:
                    break
            #print(info)
            info1 =info[0].strip()
            info2 =info[1].strip()
            info3 =info[2].strip()
            info4 =info[3].strip()
            info5 =info[4].strip()
            info6 =info[5].strip()
            info7 =info[6].strip()
            info8 =info[7].strip()
            cos_list.append(info1)
            cos_list.append(info3)
            cos_list.append(info5)
            cos_list.append(info7)
            dict_value[info1+'/'+title2]=info2
            dict_value[info3 + '/' + title2] = info4
            dict_value[info5 + '/' + title2] = info5
            dict_value[info7 + '/' + title2] = info8

        dict_value['cos_list']=cos_list

        return dict_value
    def dut_get_show_mls_qos_maps_ipprecdscp(self,show_info):
        """
        Function:show mls qos maps ip-prec-dscp回显解析函数
        CLI命令:show mls qos maps ip-prec-dscp
        回显信息示例:
Ruijie#show mls qos maps ip-prec-dscp 
ip-precedence dscp
------------- ----
            0 10
            1 12
            2 14
            3 18
            4 20
            5 22
            6 26
            7 28

        Returns:
{"1/dscp": "12"
"7/dscp": "28"
"6/dscp": "26"
"ip-precedence": ["0"
"1"
"2"
"3"
"4"
"5"
"6"
"7"], "3/dscp": "18"
"0/dscp": "10"
"4/dscp": "20"
"5/dscp": "22"
"2/dscp": "14"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mls qos maps ip-prec-dscp | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        str_arg = 'show mls qos maps ip-prec-dscp'
        clean_arg = str_arg
        # 创建字典
        dict_value = {}

        # 按行读取信息，并清除空值清除无用信息头信息尾数据
        show_info_split = show_info.split("\n")
        if re.match(r'.*' + clean_arg + '.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        dut_info_split = show_info_split
        # （去掉dut_info_split中的空值以及只包含空格符的值）
        for i in dut_info_split:
            if '' in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' ' in dut_info_split:
                dut_info_split.remove(' ')
        for i in range(len(dut_info_split)):
            dut_info_split[i] = dut_info_split[i].strip(' ')
        #print(dut_info_split)

        title_info = dut_info_split[0].split(' ')
        title1 = title_info[0].strip()
        title2 = title_info[1].strip()
        dut_info_split.remove(dut_info_split[0])
        dut_info_split.remove(dut_info_split[0])

        #
        cos_list = []
        for i in range(len(dut_info_split)):
            info = dut_info_split[i].split(' ')
            for i in info:
                if '' in info:
                    info.remove('')
            info1 = info[0].strip()
            info2 = info[1].strip()
            cos_list.append(info1)
            dict_value[info1 + '/' + title2] = info2
        dict_value['ip-precedence'] = cos_list

        return dict_value
    def dut_show_autoget_form_show_version_slots(self, star_num, end_num, title_value, x_list, show_info_list_line,title_value2=None):
        '''
        对设备有关杆号的列表进行字典的遍历
        '''
        dict_value = {}
        address_list = []
        title_list = []
        slot_ok_list = []
        candidate_list = []
        slot_none_list = []
        fe_none_list = []
        slot_fe_ok_list = []
        slot_ok_only_one_not_fe_list= []
        slot_ok_not_fe_list = []
        master_ok_list = []
        backup_ok_list = []
        master_match = None
        backup_match = None
        for i in range(star_num, end_num):  # line_len-1:上面删除“-----”这一行了
            ##print show_info_list_line[i]
            x_len = len(x_list)
            cut_star = 0
            cut_end = 0
            new_list = []
            show_info_list_line[i] = show_info_list_line[i]
            ##print show_info_list_line[i]
            if show_info_list_line[i] != "":
                for j in range(x_len):
                    cut_end = cut_end + int(x_list[j])
                    col_value = show_info_list_line[i][cut_star:cut_end]
                    cut_star = cut_end
                    col_value = col_value.lstrip()
                    col_value = col_value.rstrip()
                    new_list.append(col_value)
                # 获取表头的列，用于组合
                ##print col_value_list
                for i in range(len(new_list)):
                    if new_list[i] == title_value:
                        new_list_title_key = i
                    if title_value2 is not None:
                        if new_list[i] == title_value2:
                            new_list_title_key_2 = i
                new_list_title_value = new_list[new_list_title_key]  # 需要变参的地方
                if new_list_title_value == title_value:
                    title_list = new_list
                elif new_list_title_value != title_value:
                    # 生成字典
                    if title_value2 is not None:
                        new_list_title_value = new_list_title_value + "/" + new_list[new_list_title_key_2]
                    address_list.append(new_list_title_value)
                    if str(new_list[-1]).strip() == "ok":
                        slot_ok_list.append(new_list_title_value)
                        if "FE" in new_list_title_value:
                            if "/" in new_list_title_value:
                                slot_fe_ok_list.append(new_list_title_value.split("/")[-1])
                    elif str(new_list[-1]).strip() == "master":
                        dict_value["slot_master"] = new_list_title_value
                        master_ok_list.append(new_list_title_value)
                        master_match = new_list_title_value.split("/")[0]
                    elif str(new_list[-1]).strip() == "backup":
                        dict_value["slot_backup"] = new_list_title_value
                        backup_ok_list.append(new_list_title_value)
                        backup_match = new_list_title_value.split("/")[0]
                    elif str(new_list[-1]).strip() == "candidate":
                        candidate_list.append(new_list_title_value)
                    elif str(new_list[-1]).strip() == "none":
                        slot_none_list.append(new_list_title_value)
                        if "FE" in new_list_title_value:
                            if "/" in new_list_title_value:
                                fe_none_list.append(new_list_title_value.split("/")[-1])
                    # 遍历列头右边的值
                    if new_list_title_key + 1 < x_len:
                        for s in range(new_list_title_key + 1, x_len):  # 需要变参的地方
                            # key_name = '%s/%s' % (title_col,title_row[s])
                            if title_value2 is not None:
                                if s == new_list_title_key_2:
                                    continue
                            key_name = '%s/%s' % (new_list_title_value, title_list[s])
                            dict_value[key_name] = new_list[s]
                    if new_list_title_key > 0:
                        for s in range(0, new_list_title_key):  # 需要变参的地方
                            ##遍历列头边的值
                            if title_value2 is not None:
                                if s == new_list_title_key_2:
                                    continue
                            key_name = '%s/%s' % (new_list_title_value, title_list[s])
                            dict_value[key_name] = new_list[s]
                dict_value[title_value + "_slot_list"] = address_list
                dict_value["slot_candidate_list"] = candidate_list
                dict_value["slot_ok_list"] = slot_ok_list
                dict_value["slot_none_list"] = slot_none_list
                dict_value["fe_none_list"] = fe_none_list
                dict_value["slot_fe_ok_list"] = slot_fe_ok_list
                for slot_ok_list_value in slot_ok_list:
                    if "FE" in slot_ok_list_value:
                        pass
                    else:
                        if slot_ok_list_value not in slot_ok_not_fe_list:
                            slot_ok_not_fe_list.append(slot_ok_list_value)
                        if len(slot_ok_only_one_not_fe_list) == 0:
                            slot_ok_only_one_not_fe_list.append(slot_ok_list_value)
                        else:
                            flag_only_one = 0
                            for slot_ok_only_one_not_fe_list_value in slot_ok_only_one_not_fe_list:
                                if slot_ok_list_value[0] == slot_ok_only_one_not_fe_list_value[0]:
                                    flag_only_one = 1
                                    break
                            if flag_only_one == 0 :
                                slot_ok_only_one_not_fe_list.append(slot_ok_list_value)
                dict_value["slot_ok_only_one_not_fe_list"] = slot_ok_only_one_not_fe_list
                dict_value["slot_ok_not_fe_list"] = slot_ok_not_fe_list
        for slot_ok_list_value in slot_ok_list:
            if master_match:
                if re.match("(%s).*" % (master_match), slot_ok_list_value):
                    master_ok_list.append(slot_ok_list_value)
            if backup_match:
                if re.match("(%s).*" % (master_match), slot_ok_list_value):
                    backup_ok_list.append(slot_ok_list_value)
            dict_value["master_ok_list"] = master_ok_list
            dict_value["backup_ok_list"] = backup_ok_list
        return dict_value
    def dut_get_show_version_slots(self,show_info):
        """
        Function:show version slots回显解析函数
        CLI命令:show version slots
        回显信息示例:
Ruijie#show version slots 
  Dev Slot Port Configured Module            Online Module                Software Status
  --- ---- ---- ---------------------------- ---------------------------- ---------------
  1   0    52   S6000C-48GT4XS-E             S6000C-48GT4XS-E             backup     ====>dev和slot放在一起的话是唯一的（比如dev为1，slot为0，1和0唯一表示一个槽位），之前跟火坤核对过    
  1   1    0    N/A                          none                         none           
  2   0    52   S6000C-48GT4XS-E             S6000C-48GT4XS-E             master         
  2   1    0    N/A                          none                         none

        Returns:
{'slot_ok_list': [], '2/1/Port': '0'
'2/1/Software Status': 'none'
'2/1/Configured Module': 'N/A'
'1/0/Port': '52'
'1/1/Online Module': 'none'
'slot_candidate_list': [], '2/0/Online Module': 'S6000C-48GT4XS-E'
'2/1/Online Module': 'none'
'1/1/Software Status': 'none'
'1/1/Port': '0'
'Dev_slot_list': ['1/0'
'1/1'
'2/0'
'2/1'], '2/0/Configured Module': 'S6000C-48GT4XS-E'
'1/0/Configured Module': 'S6000C-48GT4XS-E'
'1/0/Software Status': 'backup     ====>dev\xe5\x92\x8cslot\xe6\x94\xbe\xe5\x9c\xa8'
'2/0/Software Status': 'master'
'1/0/Online Module': 'S6000C-48GT4XS-E'
'1/1/Configured Module': 'N/A'
'slot_master': '2/0'
'2/0/Port': '52'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show version slots | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """
        if " Sslot " in show_info:
            show_1_list = []
            show_list = self.dut_get_start_show_info(show_info)
            for show_list_value in show_list:
                if re.match(".*(Sslot\s+)\S+.*",show_list_value):
                    obj = re.match(".*(Sslot\s+)\S+.*",show_list_value)
                    # print obj.group(1)
                    Sslot_len = len(obj.group(1))
                    Sslot_star = show_list_value.find("Sslot")
                    Sslot_end = Sslot_star + Sslot_len
                    # print Sslot_len,Sslot_star,Sslot_end
                    # print show_list_value[Sslot_star:Sslot_end]
                    # print show_list_value[0:Sslot_star] + show_list_value[Sslot_end:]
                    # break
            for show_list_value in show_list:
                if str(show_list_value[Sslot_star:Sslot_end]).strip() == "Sslot" or str(show_list_value[Sslot_star:Sslot_end]).strip() == "0" or "---" in str(show_list_value[Sslot_star:Sslot_end]):
                    show_list_value_tmp =  show_list_value[0:Sslot_star] + show_list_value[Sslot_end:]
                    show_1_list.append(show_list_value_tmp)
                else:
                    show_list_value_tmp = show_list_value[0:Sslot_star].rstrip() + "/"+show_list_value[Sslot_star:Sslot_end].strip()+ "  "+ show_list_value[Sslot_end:]
                    show_1_list.append(show_list_value_tmp)
            show_info =  "\n".join(show_1_list)
        value_title="Dev"     #需要变参的地方
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if value_title in show_info_list_line[line_len_num]:              #***********
                table_1 = line_len_num
        (whippletree_list_1,cut_del_1) = self.dut_show_autoget_whippletree(table_1,line_len,show_info_list_line)
        show_info_list_line.remove(show_info_list_line[cut_del_1])
        new_show_info_num = len(show_info_list_line)
        for line_len_num in range(0,new_show_info_num):
            if value_title in show_info_list_line[line_len_num]:              #***********
                table_3 = line_len_num
        dict_value1 = self.dut_show_autoget_form_show_version_slots(table_3,new_show_info_num,value_title,whippletree_list_1,show_info_list_line,"Slot")
        return dict_value1
    def dut_get_show_version_detail(self, show_info):
        """
        Function:show version detail回显解析函数
        CLI命令:show version detail
        回显信息示例:
Ruijie#show ver detail
System description      : Ruijie 10G Ethernet Switch(S5750C-48GT4XS-H) By Ruijie Networks
System start time       : 2018-07-09 19:21:17
System uptime           : 0:00:30:16
System hardware version : 1.10
System software version : S5700H_RGOS 11.4(1)B12P13
System patch number     : NA
System software number  : M05363507082018
System serial number    : G1MQ38C700540
System boot version     : 1.2.28.0c4a1bf(170209)
System core version     : 3.10.18.685d6b09e46118
System cpu partition    : 1
Module information:
  Slot 1/0 : S5750C-48GT4XS-H
  Cpu 0:
    Hardware version    : 1.10
    Boot version        : 1.2.28
    Software version    : S5700H_RGOS 11.4(1)B12P13
    Software number     : M05363507082018
    Serial number       : G1MQ38C700540
  Slot 2/0 : S5750C-48GT4XS-H
  Cpu 0:
    Hardware version    : 1.40
    Boot version        : 1.2.28
    Software version    : S5700H_RGOS 11.4(1)B12P13
    Software number     : M05363507082018
    Serial number       : G1MQ1JZ006395

        Returns:
{'Slot 1/0 ( S5750C-48GT4XS-H)/Cpu 0()/Boot version': '1.2.28'
'System software version': ['S5700H_RGOS 11.4(1)B12P13'], 'Slot 2/0 ( S5750C-48GT4XS-H)/Cpu 0()/Software number': 'M05363507082018'
'System core version': '3.10.18.685d6b09e46118'
'Slot 2/0 ( S5750C-48GT4XS-H)/Cpu 0()/Serial number': 'G1MQ1JZ006395'
'System uptime': '0:00:30:16'
'Slot 1/0 ( S5750C-48GT4XS-H)/Cpu 0()/Software number': 'M05363507082018'
'System hardware version': '1.10'
'System start time': '2018-07-09 19:21:17'
'Slot 1/0 ( S5750C-48GT4XS-H)/Cpu 0()/Hardware version': '1.10'
'Slot 2/0 ( S5750C-48GT4XS-H)/Cpu 0()/Boot version': '1.2.28'
'Slot 2/0 ( S5750C-48GT4XS-H)/Cpu 0()/Hardware version': '1.40'
'System patch number': 'NA'
'System serial number': 'G1MQ38C700540'
'Slot 1/0 ( S5750C-48GT4XS-H)/Cpu 0()/Serial number': 'G1MQ38C700540'
'System boot version': '1.2.28.0c4a1bf(170209)'
'Slot 1/0 ( S5750C-48GT4XS-H)/Cpu 0()/Software version': 'S5700H_RGOS 11.4(1)B12P13'
'System cpu partition': '1'
'Slot 2/0 ( S5750C-48GT4XS-H)/Cpu 0()/Software version': 'S5700H_RGOS 11.4(1)B12P13'
'System software number': 'M05363507082018'
'System description': 'Ruijie 10G Ethernet Switch(S5750C-48GT4XS-H) By Ruijie Networks'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show version detail | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        one_key = ''
        value_list = []
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        length = len(show_info_split)
        for i in range(length):
            if re.match('Module information:', show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match('  \w', show_info_split[i]):
                if re.match('  .*:.*', show_info_split[i]):
                    if re.match('.*Slot.*:.*',show_info_split[i]):
                        matchObj = re.match('.*(Slot.*):(.*)',show_info_split[i])
                        one_key = matchObj.group(1) + '(' + matchObj.group(2) + ')'
                    elif re.match('.*Cpu.*:.*',show_info_split[i]):
                        matchObj = re.match('.*(Cpu.*):(.*)', show_info_split[i])
                        one_key = one_key+'/'+matchObj.group(1) + '(' + matchObj.group(2) + ')'
                # elif re.match('')
            elif re.match('    \w', show_info_split[i]):
                if re.search(',', show_info_split[i]):
                    matchObj = re.match('    (.*):(.*),(.*)', show_info_split[i])
                    key = one_key + '/' + matchObj.group(1).strip()
                    value_list.append(matchObj.group(2).strip())
                    value_list.append(matchObj.group(3).strip())
                    dict_value[key] = value_list
                    value_list = []
                else:
                    if show_info_split[i].count(":") > 1:
                        list1 = show_info_split[i].split(":", 1)
                        dict_value[ one_key + '/'+list1[0].strip()] = list1[1].strip()
                    else:
                        matchObj = re.match('    (.*):(.*)', show_info_split[i])
                        key = one_key + '/' + matchObj.group(1).strip()
                        value = matchObj.group(2).strip()
                        dict_value[key] = value
            else:
                if re.match('.*:.*', show_info_split[i]):
                    if re.search(',', show_info_split[i]):
                        matchObj = re.match('(.*?):(.*),(.*)', show_info_split[i])
                        value_list.append(matchObj.group(2).strip())
                        value_list.append(matchObj.group(3).strip())
                        dict_value[matchObj.group(1).strip()] = value_list
                        value_list = []
                    elif "System software version" in show_info_split[i]:
                        matchObj = re.match('(.*?):(.*)', show_info_split[i])
                        value_list.append(matchObj.group(2).strip())
                        dict_value["System software version"] = value_list
                        dict_value["System software version_list"] = matchObj.group(2).strip().split()
                        value_list = []
                    else:
                        if show_info_split[i].count(":")> 1 :
                            list1 = show_info_split[i].split(":",1)
                            dict_value[list1[0].strip()] = list1[1].strip()
                        else:
                            matchObj = re.match('(.*?):(.*)', show_info_split[i])
                            dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
                else:
                    pass
        return dict_value
    def dut_get_show_ip_igmp_snooping_gdatable(self,show_info):
        """
        Function:show ip igmp snooping gda-table回显解析函数
        CLI命令:show ip igmp snooping gda-table
        回显信息示例:
5848VAC#show ip igmp snooping gda-table 
Multicast Switching Cache Table
  D: DYNAMIC
  S: STATIC
  M: MROUTE
(*, 237.2.3.4, 10):
  VLAN(10) 1 OPORTS:
    GigabitEthernet 2/0/5(D)(0)

(*, 237.2.3.5, 10):
  VLAN(10) 1 OPORTS:
    GigabitEthernet 1/0/5(D)(0)

5848VAC#

        Returns:
{'(*, 237.2.3.4, 10)/VLAN(10) 1 OPORTS': 'GigabitEthernet 2/0/5(D)(0)'
'(*, 237.2.3.5, 10)/VLAN(10) 1 OPORTS': 'GigabitEthernet 1/0/5(D)(0)'
'addr_list': ['(*, 237.2.3.4, 10)'
'(*, 237.2.3.5, 10)']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip igmp snooping gda-table | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        str_arg='show ip igmp snooping gda-table'
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*'+str_arg+'.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in range(4):
            show_info_list_line.remove(show_info_list_line[0])
        #print show_info_list_line

        addr_list=[]
        for i in range(len(show_info_list_line)):
            if re.match('\(.*\):',show_info_list_line[i]):
                title=show_info_list_line[i].strip(':').strip()
                addr_list.append(title)
            elif re.match('.*:',show_info_list_line[i]):
                mainobj=re.match('(.*):',show_info_list_line[i])
                title=title+'/'+mainobj.group(1).strip()
                #print(title)
            else:
                info=show_info_list_line[i].strip()
                if info!='':
                    value=info
                    dict_value[title]=value
                #print(value)
        dict_value['addr_list']=addr_list
        return dict_value
    def dut_get_show_macaddresstable_maxdynamicmaccount_vlan_num(self,show_info):
        """
        Function:show mac-address-table max-dynamic-mac-count vlan <num>回显解析函数
        CLI命令:show mac-address-table max-dynamic-mac-count vlan <num>
        回显信息示例:
DUT1#show mac-address-table max-dynamic-mac-count vlan 1000
Vlan Limit   MAC count Learning
---- ------- --------- --------
1000 100      0          YES

        Returns:
{'1000/Limit': '100'
'Vlan': ['1000'], '1000/MAC count': '0'
'1000/Learning': 'YES'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mac-address-table max-dynamic-mac-count vlan <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        # main_key=main_key
        ########关键key的传入值
        ########寻址key（必填）
        main_key_list = ['Vlan']
        ########若有key分多行写，填完整的key值，不然与寻址key一样就好（必填）
        real_main_key_list = ['Vlan']
        ########

        # 创建字典
        dict_value = {}

        # 按行读取信息，并清除空值清除无用信息头信息尾数据
        show_info_split = show_info.split("\n")
        if re.match(r'.*Ruijie.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*Ruijie.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        # （去掉dut_info_split中的空值以及只包含空格符的值）
        for i in dut_info_split:
            if '' in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' ' in dut_info_split:
                dut_info_split.remove(' ')
        for i in range(len(dut_info_split)):
            dut_info_split[i] = dut_info_split[i]
        # print(dut_info_split)

        #######################参数
        # 表数量
        count = 0
        # 各个横杠长度
        hengang_len = 0
        # 一张表内各个横杠长度集合
        hengang_len_list = []
        # 整个showinfo内每张表内各个横杠长度集合的集合
        hengang_len_list_list = []
        # 横杠位置（用来相对判定key的位置）
        hengang_index_list = []
        # key的位置
        key_index_list = []
        # 表信息的集合
        table = []
        # 所有表信息的集合
        table_list = []
        #######################

        # 主要算法
        # 标识横杠位置并记录参数相关信息
        for i in range(len(dut_info_split)):
            if re.match("-+", dut_info_split[i]):
                # 排除数据中有“-”的情况
                for j in dut_info_split[i]:
                    if j != '-' and j != ' ':
                        cheak = 1
                        break
                    else:
                        cheak = 0
                        continue
                if cheak == 0:
                    hengang_len_list = []
                    count = count + 1
                    hengang_index_list.append(i)
                    #print(dut_info_split[i])
                    # 识别并记录下横杠的长度到list中
                    for k in range(len(dut_info_split[i])):
                        if dut_info_split[i][k] == '-' and k != len(dut_info_split[i]) - 1:
                            hengang_len = hengang_len + 1
                            lianxu = 0
                        elif dut_info_split[i][k] == ' ' and lianxu == 0:
                            hengang_len_list.append(hengang_len)
                            hengang_len = 0
                            lianxu = 1
                        elif k == len(dut_info_split[i]) - 1:
                            hengang_len = hengang_len + 1
                            hengang_len_list.append(hengang_len)
                            hengang_len = 0
                    hengang_len_list_list.append(hengang_len_list)
                else:
                    continue
                # print(hengang_len_list_list)
        # 根据横杠位置和key的传入值标识出key的位置
        #"""一般情况下横杠上一位就是key值，其他情况有横杠上一行为单位，或者有key值过长分行输出显示？"""
        for i in range(len(hengang_index_list)):
            main_key = main_key_list[i]
            k = hengang_index_list[i]
            while 1:
                if re.match('.*' + main_key + '.*', dut_info_split[k]):
                    key_index_list.append(k)
                    break
                else:
                    k = k - 1
        # print(key_index_list)
        # 根据查找的key位置进行分表操作,并存入table_list中
        for i in range(len(key_index_list)):
            if i == len(key_index_list) - 1:
                table = dut_info_split[key_index_list[i]:]
            else:
                table = dut_info_split[key_index_list[i]:key_index_list[i + 1]]
            table_list.append(table)
        # print(table_list)
        # 对各个表中的key、value提取，并删除掉横杠
        # 判定若key与横杠之间有单位之类的数据，进行key与该数据的整合成为一个完整key数据
        for i in range(len(table_list)):
            key_list = []
            value_list = []
            for j in range(len(table_list[i])):
                if re.match('-+', table_list[i][j]):
                    index = j
            key_info = table_list[i][0:index]
            value_info = table_list[i][index + 1:]
            # print(value_info)
            ##单行key的情况
            if index == 1:
                # key
                num1 = 0
                num2 = 0
                key = []
                for k in range(len(hengang_len_list_list[i])):
                    num1 = num2
                    num2 = 1 + hengang_len_list_list[i][k] + num2
                    key.append(key_info[0][num1:num2].strip())
                # value
                for k in range(len(value_info)):
                    value = []
                    num1 = 0
                    num2 = 0
                    # print(hengang_len_list_list[i])
                    for l in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][l] + num2
                        value.append(value_info[k][num1:num2])
                        # print(num1,num2)
                    value_list.append(value)
                # print(value_list)
                # 录入词典
                real_main_key = real_main_key_list[i]
                real_main_key_index = key.index(real_main_key)
                key__list = []
                for q in range(len(value_list)):
                    for w in range(len(value_list[q])):
                        if w == real_main_key_index:
                            key__list.append(value_list[q][w].strip())
                            continue
                        else:
                            title = value_list[q][real_main_key_index].strip() + '/' + key[w].strip()
                            info = value_list[q][w].strip()
                            dict_value[title] = info
                    dict_value[real_main_key] = key__list
                # print(main_key)
                # print(key)
                # print(value_list)
            ##多行key的情况
            elif index > 1:
                # key
                for m in range(len(key_info)):
                    num1 = 0
                    num2 = 0
                    key = []
                    for k in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][k] + num2
                        key.append(key_info[m][num1:num2])
                    key_list.append(key)
                # print(key_list)
                count_key_List = 0
                count_num = 0
                for h in range(len(key_list[0])):
                    count_key_List = count_key_List + 1
                real_key_list = []
                while 1:
                    real_key = ''
                    count_num = count_num + 1
                    if count_num > count_key_List:
                        break
                    else:
                        for f in range(len(key_list)):
                            key_in = key_list[f][count_num - 1]
                            real_key = real_key.strip() + key_in.strip()
                        # print(real_key)
                        real_key_list.append(real_key)
                        continue
                # print(real_key_list)
                # value
                for k in range(len(value_info)):
                    value = []
                    num1 = 0
                    num2 = 0
                    for l in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][l] + num2
                        value.append(value_info[k][num1:num2])
                    value_list.append(value)
                # 录入词典
                real_main_key = real_main_key_list[i]
                real_main_key_index = real_key_list.index(real_main_key)
                key__list = []
                for q in range(len(value_list)):
                    for w in range(len(value_list[q])):
                        if w == real_main_key_index:
                            key__list.append(value_list[q][w].strip())
                            continue
                        else:
                            title = value_list[q][real_main_key_index].strip() + '/' + real_key_list[w].strip()
                            info = value_list[q][w].strip()
                            dict_value[title] = info
                    dict_value[real_main_key] = key__list
                # print(key__list)
                # print(real_main_key_index)
                # print(real_key_list)
                # print(value_list)

        return dict_value
    def dut_get_show_ip_route_vrf_word_count(self,show_info):
        """
        Function:show ip route vrf (word) count回显解析函数
        CLI命令:show ip route vrf (word) count
        回显信息示例:
Ruijie#show ip route vrf test1 count 
Routing Table: test1

--------- route info ----------
the num of active route: 103

        Returns:
{"the num of active route": "103"
"Routing Table": "test1"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip route vrf (word) count | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}

        # 按行读取信息，并清除空值清除无用信息头信息尾数据
        show_info_split = show_info.split("\n")
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        # （去掉dut_info_split中的空值以及只包含空格符的值）
        for i in dut_info_split:
            if '' in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' ' in dut_info_split:
                dut_info_split.remove(' ')
        for i in range(len(dut_info_split)):
            dut_info_split[i] = dut_info_split[i]
        #print(dut_info_split)
        round_info_list=[]
        round_info_index=0
        for i in range(len(dut_info_split)):
            if re.match('.*Routing Table:.*',dut_info_split[i]):
                mainobj=re.match('.*(Routing Table):(.*)',dut_info_split[i])
                dict_value[mainobj.group(1)]=mainobj.group(2).strip()
            elif re.match('.*route info.*',dut_info_split[i]):
                round_info_index=i
        round_info_list=dut_info_split[i:]
        #print(round_info_list)
        for i in range(len(round_info_list)):
            if "(" in round_info_list[i]:
                if re.match('(.*):(.*)\((.*):(.*)\)',round_info_list[i].strip()):
                    mainobj=re.match('(.*):(.*)\((.*):(.*)\)',round_info_list[i].strip())
                    dict_value[mainobj.group(1).strip()]=mainobj.group(2).strip()
                    dict_value[mainobj.group(3).strip()]=mainobj.group(4).strip()
            else:
                if re.match('.*:.*',round_info_list[i]):
                    mainobj=re.match('(.*):(.*)',round_info_list[i])
                    dict_value[mainobj.group(1).strip()]=mainobj.group(2).strip()

        return dict_value
    def dut_get_show_interfaces_counters_rate_up(self,show_info):
        """
        Function:show interfaces counters rate up回显解析函数
        CLI命令:show interfaces counters rate up
        回显信息示例:
Ruijie#show interfaces counters rate up 
Interface    Sampling Time         Input Rate           Input Rate           Output Rate          Output Rate
                                   (bits/sec)           (packets/sec)        (bits/sec)           (packets/sec)
------------ --------------------- -------------------- -------------------- -------------------- --------------------
Gi1/1/3      5 seconds             0                    0                    214                  0                   
Gi1/1/5      5 seconds             557                  0                    218                  0

        Returns:
{"Gi1/1/3/Sampling Time": "5 seconds"
"Gi1/1/5/Input Rate(packets/sec)": "0"
"Gi1/1/5/Output Rate(bits/sec)": "218"
"Gi1/1/5/Input Rate(bits/sec)": "557"
"Gi1/1/3/Input Rate(bits/sec)": "0"
"Gi1/1/3/Input Rate(packets/sec)": "0"
"Gi1/1/5/Sampling Time": "5 seconds"
"Interface": ["Gi1/1/3"
"Gi1/1/5"], "Gi1/1/5/Output Rate(packets/sec)": "0"
"Gi1/1/3/Output Rate(packets/sec)": "0"
"Gi1/1/3/Output Rate(bits/sec)": "214"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interfaces counters rate up | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        # main_key=main_key
        ########关键key的传入值
        ########寻址key（必填）
        main_key_list = ['Interface']
        ########若有key分多行写，填完整的key值，不然与寻址key一样就好（必填）
        real_main_key_list=['Interface']
        ########

        # 创建字典
        dict_value = {}

        # 按行读取信息，并清除空值清除无用信息头信息尾数据
        show_info_split = show_info.split("\n")
        if re.match(r'.*Ruijie.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*Ruijie.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        # （去掉dut_info_split中的空值以及只包含空格符的值）
        for i in dut_info_split:
            if '' in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' ' in dut_info_split:
                dut_info_split.remove(' ')
        for i in range(len(dut_info_split)):
            dut_info_split[i] = dut_info_split[i]
        #print(dut_info_split)

        #######################参数
        # 表数量
        count = 0
        # 各个横杠长度
        hengang_len = 0
        # 一张表内各个横杠长度集合
        hengang_len_list = []
        # 整个showinfo内每张表内各个横杠长度集合的集合
        hengang_len_list_list = []
        # 横杠位置（用来相对判定key的位置）
        hengang_index_list = []
        # key的位置
        key_index_list = []
        # 表信息的集合
        table = []
        # 所有表信息的集合
        table_list = []
        #######################

        # 主要算法
        # 标识横杠位置并记录参数相关信息
        for i in range(len(dut_info_split)):
            if re.match("-+", dut_info_split[i]):
                # 排除数据中有“-”的情况
                for j in dut_info_split[i]:
                    if j != '-' and j != ' ':
                        cheak = 1
                        break
                    else:
                        cheak = 0
                        continue
                if cheak == 0:
                    hengang_len_list = []
                    count = count + 1
                    hengang_index_list.append(i)
                    #print(dut_info_split[i])
                    # 识别并记录下横杠的长度到list中
                    for k in range(len(dut_info_split[i])):
                        if dut_info_split[i][k] == '-' and k != len(dut_info_split[i]) - 1:
                            hengang_len = hengang_len + 1
                            lianxu=0
                        elif dut_info_split[i][k] == ' ' and lianxu==0:
                            hengang_len_list.append(hengang_len)
                            hengang_len = 0
                            lianxu=1
                        elif k == len(dut_info_split[i]) - 1:
                            hengang_len = hengang_len + 1
                            hengang_len_list.append(hengang_len)
                            hengang_len = 0
                    hengang_len_list_list.append(hengang_len_list)
                else:
                    continue
                # print(hengang_len_list_list)
        # 根据横杠位置和key的传入值标识出key的位置
        #"""一般情况下横杠上一位就是key值，其他情况有横杠上一行为单位，或者有key值过长分行输出显示？"""
        for i in range(len(hengang_index_list)):
            main_key = main_key_list[i]
            k = hengang_index_list[i]
            while 1:
                if re.match('.*' + main_key + '.*', dut_info_split[k]):
                    key_index_list.append(k)
                    break
                else:
                    k = k - 1
        # print(key_index_list)
        # 根据查找的key位置进行分表操作,并存入table_list中
        for i in range(len(key_index_list)):
            if i == len(key_index_list) - 1:
                table = dut_info_split[key_index_list[i]:]
            else:
                table = dut_info_split[key_index_list[i]:key_index_list[i + 1]]
            table_list.append(table)
        #print(table_list)
        # 对各个表中的key、value提取，并删除掉横杠
        # 判定若key与横杠之间有单位之类的数据，进行key与该数据的整合成为一个完整key数据
        for i in range(len(table_list)):
            key_list = []
            value_list = []
            for j in range(len(table_list[i])):
                if re.match('-+', table_list[i][j]):
                    index = j
            key_info = table_list[i][0:index]
            value_info = table_list[i][index+1:]
            #print(value_info)
            ##单行key的情况
            if index == 1:
                #key
                num1 = 0
                num2 = 0
                key = []
                for k in range(len(hengang_len_list_list[i])):
                    num1 = num2
                    num2 = 1 + hengang_len_list_list[i][k] + num2
                    key.append(key_info[0][num1:num2].strip())
                #value
                for k in  range(len(value_info)):
                    value = []
                    num1 = 0
                    num2 = 0
                    #print(hengang_len_list_list[i])
                    for l in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][l] + num2
                        value.append(value_info[k][num1:num2])
                        #print(num1,num2)
                    value_list.append(value)
                #print(value_list)
                #录入词典
                real_main_key=real_main_key_list[i]
                real_main_key_index=key.index(real_main_key)
                key__list=[]
                for q in range(len(value_list)):
                    for w in range(len(value_list[q])):
                        if w == real_main_key_index:
                            key__list.append(value_list[q][w].strip())
                            continue
                        else:
                            title=value_list[q][real_main_key_index].strip()+'/'+key[w].strip()
                            info=value_list[q][w].strip()
                            dict_value[title]=info
                    dict_value[real_main_key]=key__list
                # print(main_key)
                # print(key)
                # print(value_list)
            ##多行key的情况
            elif index > 1:
                #key
                for m in range(len(key_info)):
                    num1 = 0
                    num2 = 0
                    key = []
                    for k in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][k] + num2
                        key.append(key_info[m][num1:num2])
                    key_list.append(key)
                #print(key_list)
                count_key_List = 0
                count_num=0
                for h in range(len(key_list[0])):
                    count_key_List=count_key_List+1
                real_key_list=[]
                while 1:
                    real_key=''
                    count_num=count_num+1
                    if count_num>count_key_List:
                        break
                    else:
                        for f in range(len(key_list)):
                            key_in=key_list[f][count_num-1]
                            real_key=real_key.strip()+key_in.strip()
                        #print(real_key)
                        real_key_list.append(real_key)
                        continue
                #print(real_key_list)
                #value
                for k in  range(len(value_info)):
                    value = []
                    num1 = 0
                    num2 = 0
                    for l in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][l] + num2
                        value.append(value_info[k][num1:num2])
                    value_list.append(value)
                #录入词典
                real_main_key=real_main_key_list[i]
                real_main_key_index=real_key_list.index(real_main_key)
                key__list = []
                for q in range(len(value_list)):
                    for w in range(len(value_list[q])):
                        if w == real_main_key_index:
                            key__list.append(value_list[q][w].strip())
                            continue
                        else:
                            title=value_list[q][real_main_key_index].strip()+'/'+real_key_list[w].strip()
                            info=value_list[q][w].strip()
                            dict_value[title]=info
                    dict_value[real_main_key]=key__list
                # print(key__list)
                # print(real_main_key_index)
                # print(real_key_list)
                # print(value_list)


        return dict_value
    def dut_get_show_interfaces_counters_rate(self,show_info):
        """
        Function:show interfaces counters rate回显解析函数
        CLI命令:show interfaces counters rate
        回显信息示例:
5848VAC#show interfaces counters rate 
Interface    Sampling Time         Input Rate           Input Rate           Output Rate          Output Rate
                                   (bits/sec)           (packets/sec)        (bits/sec)           (packets/sec)
------------ --------------------- -------------------- -------------------- -------------------- --------------------
Gi1/0/1      5 seconds             0                    0                    0                    0                   
Gi1/0/2      5 seconds             658107               110                  1687869              180                 
Gi1/0/3      5 seconds             0                    0                    0                    0                   
Gi1/0/4      5 seconds             0                    0                    0                    0                   
Gi1/0/5      5 seconds             0                    0                    5862                 7                   
Gi1/0/6      5 seconds             0                    0                    0                    0                   
Gi1/0/7      5 seconds             0                    0                    0                    0                   
Gi1/0/8      5 seconds             1954                 2                    935                  1                   
Gi2/0/1      5 seconds             0                    0                    0                    0                   
Gi2/0/2      5 seconds             879968               108                  355319               68                  
Gi2/0/3      5 seconds             0                    0                    0                    0                   
Gi2/0/4      5 seconds             0                    0                    0                    0                   
Gi2/0/5      5 seconds             0                    0                    0                    0                   
Gi2/0/6      5 seconds             0                    0                    0                    0                   
Gi2/0/7      5 seconds             0                    0                    0                    0                   
Gi2/0/8      5 seconds             1202                 1                    575                  0                   
Gi3/0/1      5 seconds             0                    0                    0                    0                   
Gi3/0/2      5 seconds             876800               108                  352310               67                  
Gi3/0/3      5 seconds             0                    0                    0                    0                   
Gi3/0/4      5 seconds             0                    0                    0                    0                   
Gi3/0/5      5 seconds             0                    0                    0                    0                   
Gi3/0/6      5 seconds             0                    0                    0                    0                   
Gi3/0/7      5 seconds             0                    0                    0                    0                   
Gi3/0/8      5 seconds             1353                 1                    647                  0                   
Te1/0/1      5 seconds             0                    0                    0                    0                   
Te1/0/2      5 seconds             0                    0                    0                    0                   
Te2/0/1      5 seconds             0                    0                    0                    0                   
Te2/0/2      5 seconds             0                    0                    0                    0                   
Te3/0/1      5 seconds             0                    0                    0                    0                   
Te3/0/2      5 seconds             0                    0                    0                    0                   
Ag1          5 seconds             5185                 5                    2481                 2                   
5848VAC#

        Returns:
{'Gi3/0/8/Sampling Time': '5 seconds'
'Te1/0/1/Input Rate(packets/sec)': '0'
'Gi3/0/5/Output Rate(bits/sec)': '0'
'Te1/0/1/Output Rate(packets/sec)': '0'
'Gi1/0/8/Sampling Time': '5 seconds'
'Gi3/0/8/Input Rate(packets/sec)': '1'
'Gi1/0/3/Input Rate(packets/sec)': '0'
'Gi2/0/4/Output Rate(bits/sec)': '0'
'Gi1/0/3/Output Rate(bits/sec)': '0'
'Gi3/0/8/Output Rate(packets/sec)': '0'
'Te3/0/2/Sampling Time': '5 seconds'
'Gi3/0/6/Sampling Time': '5 seconds'
'Te3/0/1/Output Rate(packets/sec)': '0'
'Te2/0/1/Output Rate(packets/sec)': '0'
'Gi3/0/6/Input Rate(packets/sec)': '0'
'Gi3/0/1/Input Rate(bits/sec)': '0'
'Gi1/0/2/Output Rate(packets/sec)': '180'
'Gi1/0/8/Input Rate(packets/sec)': '2'
'Gi2/0/8/Sampling Time': '5 seconds'
'Te2/0/1/Input Rate(packets/sec)': '0'
'Te3/0/2/Input Rate(packets/sec)': '0'
'Gi2/0/2/Sampling Time': '5 seconds'
'Gi1/0/6/Output Rate(bits/sec)': '0'
'Gi1/0/7/Output Rate(bits/sec)': '0'
'Gi3/0/4/Output Rate(packets/sec)': '0'
'Gi2/0/3/Input Rate(packets/sec)': '0'
'Gi2/0/4/Input Rate(bits/sec)': '0'
'Gi2/0/8/Output Rate(bits/sec)': '575'
'Gi2/0/6/Sampling Time': '5 seconds'
'Gi2/0/3/Sampling Time': '5 seconds'
'Gi1/0/1/Input Rate(bits/sec)': '0'
'Gi1/0/2/Input Rate(bits/sec)': '658107'
'Gi1/0/1/Output Rate(bits/sec)': '0'
'Gi2/0/7/Output Rate(bits/sec)': '0'
'Gi3/0/2/Output Rate(bits/sec)': '352310'
'Gi1/0/3/Input Rate(bits/sec)': '0'
'Gi2/0/8/Output Rate(packets/sec)': '0'
'Gi2/0/2/Output Rate(bits/sec)': '355319'
'Te3/0/1/Input Rate(bits/sec)': '0'
'Gi3/0/7/Input Rate(bits/sec)': '0'
'Gi1/0/6/Input Rate(packets/sec)': '0'
'Gi2/0/4/Output Rate(packets/sec)': '0'
'Gi2/0/2/Output Rate(packets/sec)': '68'
'Gi1/0/5/Output Rate(packets/sec)': '7'
'Te2/0/2/Output Rate(bits/sec)': '0'
'Gi2/0/5/Sampling Time': '5 seconds'
'Gi1/0/7/Output Rate(packets/sec)': '0'
'Gi3/0/3/Output Rate(packets/sec)': '0'
'Te2/0/2/Input Rate(packets/sec)': '0'
'Gi1/0/4/Output Rate(bits/sec)': '0'
'Gi3/0/2/Input Rate(packets/sec)': '108'
'Gi1/0/3/Sampling Time': '5 seconds'
'Gi2/0/2/Input Rate(packets/sec)': '108'
'Gi2/0/6/Input Rate(packets/sec)': '0'
'Interface': ['Gi1/0/1'
'Gi1/0/2'
'Gi1/0/3'
'Gi1/0/4'
'Gi1/0/5'
'Gi1/0/6'
'Gi1/0/7'
'Gi1/0/8'
'Gi2/0/1'
'Gi2/0/2'
'Gi2/0/3'
'Gi2/0/4'
'Gi2/0/5'
'Gi2/0/6'
'Gi2/0/7'
'Gi2/0/8'
'Gi3/0/1'
'Gi3/0/2'
'Gi3/0/3'
'Gi3/0/4'
'Gi3/0/5'
'Gi3/0/6'
'Gi3/0/7'
'Gi3/0/8'
'Te1/0/1'
'Te1/0/2'
'Te2/0/1'
'Te2/0/2'
'Te3/0/1'
'Te3/0/2'
'Ag1'], 'Te3/0/1/Input Rate(packets/sec)': '0'
'Te3/0/2/Input Rate(bits/sec)': '0'
'Gi3/0/7/Output Rate(bits/sec)': '0'
'Te1/0/2/Input Rate(bits/sec)': '0'
'Ag1/Output Rate(packets/sec)': '2'
'Gi2/0/7/Input Rate(bits/sec)': '0'
'Gi1/0/5/Input Rate(bits/sec)': '0'
'Gi2/0/1/Input Rate(bits/sec)': '0'
'Gi2/0/6/Output Rate(bits/sec)': '0'
'Gi1/0/6/Input Rate(bits/sec)': '0'
'Gi2/0/4/Sampling Time': '5 seconds'
'Gi3/0/1/Output Rate(bits/sec)': '0'
'Gi2/0/7/Sampling Time': '5 seconds'
'Te3/0/1/Sampling Time': '5 seconds'
'Gi3/0/4/Sampling Time': '5 seconds'
'Te1/0/2/Sampling Time': '5 seconds'
'Gi1/0/4/Input Rate(bits/sec)': '0'
'Gi2/0/7/Input Rate(packets/sec)': '0'
'Gi3/0/1/Sampling Time': '5 seconds'
'Gi1/0/5/Sampling Time': '5 seconds'
'Gi2/0/4/Input Rate(packets/sec)': '0'
'Gi1/0/4/Sampling Time': '5 seconds'
'Gi3/0/2/Input Rate(bits/sec)': '876800'
'Gi2/0/5/Output Rate(bits/sec)': '0'
'Gi1/0/1/Output Rate(packets/sec)': '0'
'Gi3/0/4/Output Rate(bits/sec)': '0'
'Gi1/0/5/Output Rate(bits/sec)': '5862'
'Gi3/0/5/Input Rate(bits/sec)': '0'
'Gi3/0/3/Input Rate(packets/sec)': '0'
'Te2/0/2/Output Rate(packets/sec)': '0'
'Ag1/Sampling Time': '5 seconds'
'Gi1/0/2/Input Rate(packets/sec)': '110'
'Te2/0/1/Input Rate(bits/sec)': '0'
'Gi3/0/3/Input Rate(bits/sec)': '0'
'Te1/0/1/Output Rate(bits/sec)': '0'
'Gi3/0/7/Sampling Time': '5 seconds'
'Gi3/0/3/Output Rate(bits/sec)': '0'
'Ag1/Input Rate(bits/sec)': '5185'
'Gi2/0/8/Input Rate(bits/sec)': '1202'
'Te3/0/1/Output Rate(bits/sec)': '0'
'Te3/0/2/Output Rate(bits/sec)': '0'
'Gi1/0/2/Output Rate(bits/sec)': '1687869'
'Gi1/0/7/Input Rate(packets/sec)': '0'
'Gi2/0/8/Input Rate(packets/sec)': '1'
'Gi3/0/4/Input Rate(packets/sec)': '0'
'Gi3/0/8/Output Rate(bits/sec)': '647'
'Gi2/0/6/Input Rate(bits/sec)': '0'
'Gi3/0/2/Output Rate(packets/sec)': '67'
'Gi1/0/1/Sampling Time': '5 seconds'
'Gi3/0/7/Input Rate(packets/sec)': '0'
'Gi2/0/1/Output Rate(bits/sec)': '0'
'Gi1/0/7/Input Rate(bits/sec)': '0'
'Te1/0/1/Input Rate(bits/sec)': '0'
'Gi3/0/5/Output Rate(packets/sec)': '0'
'Ag1/Input Rate(packets/sec)': '5'
'Gi1/0/8/Output Rate(bits/sec)': '935'
'Te1/0/2/Output Rate(packets/sec)': '0'
'Gi2/0/1/Output Rate(packets/sec)': '0'
'Gi3/0/2/Sampling Time': '5 seconds'
'Gi1/0/7/Sampling Time': '5 seconds'
'Te1/0/2/Output Rate(bits/sec)': '0'
'Ag1/Output Rate(bits/sec)': '2481'
'Gi3/0/3/Sampling Time': '5 seconds'
'Te1/0/2/Input Rate(packets/sec)': '0'
'Gi2/0/6/Output Rate(packets/sec)': '0'
'Gi3/0/8/Input Rate(bits/sec)': '1353'
'Gi1/0/8/Input Rate(bits/sec)': '1954'
'Gi1/0/5/Input Rate(packets/sec)': '0'
'Gi2/0/5/Input Rate(bits/sec)': '0'
'Gi1/0/6/Output Rate(packets/sec)': '0'
'Gi2/0/2/Input Rate(bits/sec)': '879968'
'Gi2/0/5/Input Rate(packets/sec)': '0'
'Gi3/0/4/Input Rate(bits/sec)': '0'
'Gi1/0/6/Sampling Time': '5 seconds'
'Gi3/0/6/Input Rate(bits/sec)': '0'
'Gi3/0/5/Sampling Time': '5 seconds'
'Te2/0/1/Output Rate(bits/sec)': '0'
'Gi3/0/7/Output Rate(packets/sec)': '0'
'Gi2/0/3/Output Rate(packets/sec)': '0'
'Gi3/0/6/Output Rate(packets/sec)': '0'
'Gi2/0/5/Output Rate(packets/sec)': '0'
'Te2/0/2/Input Rate(bits/sec)': '0'
'Gi2/0/3/Output Rate(bits/sec)': '0'
'Gi3/0/1/Output Rate(packets/sec)': '0'
'Gi1/0/1/Input Rate(packets/sec)': '0'
'Gi2/0/1/Input Rate(packets/sec)': '0'
'Gi1/0/8/Output Rate(packets/sec)': '1'
'Gi3/0/1/Input Rate(packets/sec)': '0'
'Gi1/0/2/Sampling Time': '5 seconds'
'Gi3/0/6/Output Rate(bits/sec)': '0'
'Te2/0/2/Sampling Time': '5 seconds'
'Gi2/0/7/Output Rate(packets/sec)': '0'
'Gi2/0/1/Sampling Time': '5 seconds'
'Te3/0/2/Output Rate(packets/sec)': '0'
'Gi2/0/3/Input Rate(bits/sec)': '0'
'Te2/0/1/Sampling Time': '5 seconds'
'Gi1/0/4/Input Rate(packets/sec)': '0'
'Gi1/0/4/Output Rate(packets/sec)': '0'
'Gi3/0/5/Input Rate(packets/sec)': '0'
'Gi1/0/3/Output Rate(packets/sec)': '0'
'Te1/0/1/Sampling Time': '5 seconds'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interfaces counters rate | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        # main_key=main_key
        ########关键key的传入值
        ########寻址key（必填）
        main_key_list = ['Interface']
        ########若有key分多行写，填完整的key值，不然与寻址key一样就好（必填）
        real_main_key_list=['Interface']
        ########

        # 创建字典
        dict_value = {}

        # 按行读取信息，并清除空值清除无用信息头信息尾数据
        show_info_split = show_info.split("\n")
        if re.match(r'.*Ruijie.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*Ruijie.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        # （去掉dut_info_split中的空值以及只包含空格符的值）
        for i in dut_info_split:
            if '' in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' ' in dut_info_split:
                dut_info_split.remove(' ')
        for i in range(len(dut_info_split)):
            dut_info_split[i] = dut_info_split[i]
        #print(dut_info_split)

        #######################参数
        # 表数量
        count = 0
        # 各个横杠长度
        hengang_len = 0
        # 一张表内各个横杠长度集合
        hengang_len_list = []
        # 整个showinfo内每张表内各个横杠长度集合的集合
        hengang_len_list_list = []
        # 横杠位置（用来相对判定key的位置）
        hengang_index_list = []
        # key的位置
        key_index_list = []
        # 表信息的集合
        table = []
        # 所有表信息的集合
        table_list = []
        #######################

        # 主要算法
        # 标识横杠位置并记录参数相关信息
        for i in range(len(dut_info_split)):
            if re.match("-+", dut_info_split[i]):
                # 排除数据中有“-”的情况
                for j in dut_info_split[i]:
                    if j != '-' and j != ' ':
                        cheak = 1
                        break
                    else:
                        cheak = 0
                        continue
                if cheak == 0:
                    hengang_len_list = []
                    count = count + 1
                    hengang_index_list.append(i)
                    #print(dut_info_split[i])
                    # 识别并记录下横杠的长度到list中
                    for k in range(len(dut_info_split[i])):
                        if dut_info_split[i][k] == '-' and k != len(dut_info_split[i]) - 1:
                            hengang_len = hengang_len + 1
                            lianxu=0
                        elif dut_info_split[i][k] == ' ' and lianxu==0:
                            hengang_len_list.append(hengang_len)
                            hengang_len = 0
                            lianxu=1
                        elif k == len(dut_info_split[i]) - 1:
                            hengang_len = hengang_len + 1
                            hengang_len_list.append(hengang_len)
                            hengang_len = 0
                    hengang_len_list_list.append(hengang_len_list)
                else:
                    continue
                # print(hengang_len_list_list)
        # 根据横杠位置和key的传入值标识出key的位置
        #"""一般情况下横杠上一位就是key值，其他情况有横杠上一行为单位，或者有key值过长分行输出显示？"""
        for i in range(len(hengang_index_list)):
            main_key = main_key_list[i]
            k = hengang_index_list[i]
            while 1:
                if re.match('.*' + main_key + '.*', dut_info_split[k]):
                    key_index_list.append(k)
                    break
                else:
                    k = k - 1
        # print(key_index_list)
        # 根据查找的key位置进行分表操作,并存入table_list中
        for i in range(len(key_index_list)):
            if i == len(key_index_list) - 1:
                table = dut_info_split[key_index_list[i]:]
            else:
                table = dut_info_split[key_index_list[i]:key_index_list[i + 1]]
            table_list.append(table)
        #print(table_list)
        # 对各个表中的key、value提取，并删除掉横杠
        # 判定若key与横杠之间有单位之类的数据，进行key与该数据的整合成为一个完整key数据
        for i in range(len(table_list)):
            key_list = []
            value_list = []
            for j in range(len(table_list[i])):
                if re.match('-+', table_list[i][j]):
                    index = j
            key_info = table_list[i][0:index]
            value_info = table_list[i][index+1:]
            #print(value_info)
            ##单行key的情况
            if index == 1:
                #key
                num1 = 0
                num2 = 0
                key = []
                for k in range(len(hengang_len_list_list[i])):
                    num1 = num2
                    num2 = 1 + hengang_len_list_list[i][k] + num2
                    key.append(key_info[0][num1:num2].strip())
                #value
                for k in  range(len(value_info)):
                    value = []
                    num1 = 0
                    num2 = 0
                    #print(hengang_len_list_list[i])
                    for l in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][l] + num2
                        value.append(value_info[k][num1:num2])
                        #print(num1,num2)
                    value_list.append(value)
                #print(value_list)
                #录入词典
                real_main_key=real_main_key_list[i]
                real_main_key_index=key.index(real_main_key)
                key__list=[]
                for q in range(len(value_list)):
                    for w in range(len(value_list[q])):
                        if w == real_main_key_index:
                            key__list.append(value_list[q][w].strip())
                            continue
                        else:
                            title=value_list[q][real_main_key_index].strip()+'/'+key[w].strip()
                            info=value_list[q][w].strip()
                            dict_value[title]=info
                    dict_value[real_main_key]=key__list
                # print(main_key)
                # print(key)
                # print(value_list)
            ##多行key的情况
            elif index > 1:
                #key
                for m in range(len(key_info)):
                    num1 = 0
                    num2 = 0
                    key = []
                    for k in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][k] + num2
                        key.append(key_info[m][num1:num2])
                    key_list.append(key)
                #print(key_list)
                count_key_List = 0
                count_num=0
                for h in range(len(key_list[0])):
                    count_key_List=count_key_List+1
                real_key_list=[]
                while 1:
                    real_key=''
                    count_num=count_num+1
                    if count_num>count_key_List:
                        break
                    else:
                        for f in range(len(key_list)):
                            key_in=key_list[f][count_num-1]
                            real_key=real_key.strip()+key_in.strip()
                        #print(real_key)
                        real_key_list.append(real_key)
                        continue
                #print(real_key_list)
                #value
                for k in  range(len(value_info)):
                    value = []
                    num1 = 0
                    num2 = 0
                    for l in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][l] + num2
                        value.append(value_info[k][num1:num2])
                    value_list.append(value)
                #录入词典
                real_main_key=real_main_key_list[i]
                real_main_key_index=real_key_list.index(real_main_key)
                key__list = []
                for q in range(len(value_list)):
                    for w in range(len(value_list[q])):
                        if w == real_main_key_index:
                            key__list.append(value_list[q][w].strip())
                            continue
                        else:
                            title=value_list[q][real_main_key_index].strip()+'/'+real_key_list[w].strip()
                            info=value_list[q][w].strip()
                            dict_value[title]=info
                    dict_value[real_main_key]=key__list
                # print(key__list)
                # print(real_main_key_index)
                # print(real_key_list)
                # print(value_list)


        return dict_value
    def dut_get_show_interface_counters_rate(self,show_info):
        """
        Function:show interface counters rate回显解析函数
        CLI命令:show interface counters rate
        回显信息示例:
Ruijie#show interface counters rate 
Interface    Sampling Time         Input Rate           Input Rate           Output Rate          Output Rate
                                   (bits/sec)           (packets/sec)        (bits/sec)           (packets/sec)
------------ --------------------- -------------------- -------------------- -------------------- --------------------
Te1/0/49     5 seconds             19703                6                    88421                7                   
Te1/0/50     5 seconds             409639               53                   17684                9                   
Te2/0/49     5 seconds             87428                7                    20435                6                   
Te2/0/50     5 seconds             16631                8                    305885               41

        Returns:
{'Te1/0/50/Input Rate(packets/sec)': '53'
'Te2/0/50/Sampling Time': '5 seconds'
'Te2/0/49/Input Rate(packets/sec)': '7'
'Te1/0/50/Output Rate(bits/sec)': '17684'
'Te1/0/49/Input Rate(bits/sec)': '19703'
'Te2/0/49/Output Rate(bits/sec)': '20435'
'Te2/0/50/Output Rate(packets/sec)': '41'
'Te2/0/49/Input Rate(bits/sec)': '87428'
'Te1/0/49/Sampling Time': '5 seconds'
'Te2/0/50/Input Rate(bits/sec)': '16631'
'Te1/0/49/Output Rate(bits/sec)': '88421'
'Interface': ['Te1/0/49'
'Te1/0/50'
'Te2/0/49'
'Te2/0/50'], 'Te1/0/49/Input Rate(packets/sec)': '6'
'Te2/0/50/Input Rate(packets/sec)': '8'
'Te1/0/50/Input Rate(bits/sec)': '409639'
'Te2/0/49/Output Rate(packets/sec)': '6'
'Te1/0/49/Output Rate(packets/sec)': '7'
'Te1/0/50/Output Rate(packets/sec)': '9'
'Te2/0/50/Output Rate(bits/sec)': '305885'
'Te1/0/50/Sampling Time': '5 seconds'
'Te2/0/49/Sampling Time': '5 seconds'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interface counters rate | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        # main_key=main_key
        ########关键key的传入值
        ########寻址key（必填）
        main_key_list = ['Interface']
        ########若有key分多行写，填完整的key值，不然与寻址key一样就好（必填）
        real_main_key_list=['Interface']
        ########

        # 创建字典
        dict_value = {}

        # 按行读取信息，并清除空值清除无用信息头信息尾数据
        show_info_split = show_info.split("\n")
        if re.match(r'.*Ruijie.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*Ruijie.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        # （去掉dut_info_split中的空值以及只包含空格符的值）
        for i in dut_info_split:
            if '' in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' ' in dut_info_split:
                dut_info_split.remove(' ')
        for i in range(len(dut_info_split)):
            dut_info_split[i] = dut_info_split[i]
        #print(dut_info_split)

        #######################参数
        # 表数量
        count = 0
        # 各个横杠长度
        hengang_len = 0
        # 一张表内各个横杠长度集合
        hengang_len_list = []
        # 整个showinfo内每张表内各个横杠长度集合的集合
        hengang_len_list_list = []
        # 横杠位置（用来相对判定key的位置）
        hengang_index_list = []
        # key的位置
        key_index_list = []
        # 表信息的集合
        table = []
        # 所有表信息的集合
        table_list = []
        #######################

        # 主要算法
        # 标识横杠位置并记录参数相关信息
        for i in range(len(dut_info_split)):
            if re.match("-+", dut_info_split[i]):
                # 排除数据中有“-”的情况
                for j in dut_info_split[i]:
                    if j != '-' and j != ' ':
                        cheak = 1
                        break
                    else:
                        cheak = 0
                        continue
                if cheak == 0:
                    hengang_len_list = []
                    count = count + 1
                    hengang_index_list.append(i)
                    #print(dut_info_split[i])
                    # 识别并记录下横杠的长度到list中
                    for k in range(len(dut_info_split[i])):
                        if dut_info_split[i][k] == '-' and k != len(dut_info_split[i]) - 1:
                            hengang_len = hengang_len + 1
                            lianxu=0
                        elif dut_info_split[i][k] == ' ' and lianxu==0:
                            hengang_len_list.append(hengang_len)
                            hengang_len = 0
                            lianxu=1
                        elif k == len(dut_info_split[i]) - 1:
                            hengang_len = hengang_len + 1
                            hengang_len_list.append(hengang_len)
                            hengang_len = 0
                    hengang_len_list_list.append(hengang_len_list)
                else:
                    continue
                # print(hengang_len_list_list)
        # 根据横杠位置和key的传入值标识出key的位置
        #"""一般情况下横杠上一位就是key值，其他情况有横杠上一行为单位，或者有key值过长分行输出显示？"""
        for i in range(len(hengang_index_list)):
            main_key = main_key_list[i]
            k = hengang_index_list[i]
            while 1:
                if re.match('.*' + main_key + '.*', dut_info_split[k]):
                    key_index_list.append(k)
                    break
                else:
                    k = k - 1
        # print(key_index_list)
        # 根据查找的key位置进行分表操作,并存入table_list中
        for i in range(len(key_index_list)):
            if i == len(key_index_list) - 1:
                table = dut_info_split[key_index_list[i]:]
            else:
                table = dut_info_split[key_index_list[i]:key_index_list[i + 1]]
            table_list.append(table)
        #print(table_list)
        # 对各个表中的key、value提取，并删除掉横杠
        # 判定若key与横杠之间有单位之类的数据，进行key与该数据的整合成为一个完整key数据
        for i in range(len(table_list)):
            key_list = []
            value_list = []
            for j in range(len(table_list[i])):
                if re.match('-+', table_list[i][j]):
                    index = j
            key_info = table_list[i][0:index]
            value_info = table_list[i][index+1:]
            #print(value_info)
            ##单行key的情况
            if index == 1:
                #key
                num1 = 0
                num2 = 0
                key = []
                for k in range(len(hengang_len_list_list[i])):
                    num1 = num2
                    num2 = 1 + hengang_len_list_list[i][k] + num2
                    key.append(key_info[0][num1:num2].strip())
                #value
                for k in  range(len(value_info)):
                    value = []
                    num1 = 0
                    num2 = 0
                    #print(hengang_len_list_list[i])
                    for l in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][l] + num2
                        value.append(value_info[k][num1:num2])
                        #print(num1,num2)
                    value_list.append(value)
                #print(value_list)
                #录入词典
                real_main_key=real_main_key_list[i]
                real_main_key_index=key.index(real_main_key)
                key__list=[]
                for q in range(len(value_list)):
                    for w in range(len(value_list[q])):
                        if w == real_main_key_index:
                            key__list.append(value_list[q][w].strip())
                            continue
                        else:
                            title=value_list[q][real_main_key_index].strip()+'/'+key[w].strip()
                            info=value_list[q][w].strip()
                            dict_value[title]=info
                    dict_value[real_main_key]=key__list
                # print(main_key)
                # print(key)
                # print(value_list)
            ##多行key的情况
            elif index > 1:
                #key
                for m in range(len(key_info)):
                    num1 = 0
                    num2 = 0
                    key = []
                    for k in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][k] + num2
                        key.append(key_info[m][num1:num2])
                    key_list.append(key)
                #print(key_list)
                count_key_List = 0
                count_num=0
                for h in range(len(key_list[0])):
                    count_key_List=count_key_List+1
                real_key_list=[]
                while 1:
                    real_key=''
                    count_num=count_num+1
                    if count_num>count_key_List:
                        break
                    else:
                        for f in range(len(key_list)):
                            key_in=key_list[f][count_num-1]
                            real_key=real_key.strip()+key_in.strip()
                        #print(real_key)
                        real_key_list.append(real_key)
                        continue
                #print(real_key_list)
                #value
                for k in  range(len(value_info)):
                    value = []
                    num1 = 0
                    num2 = 0
                    for l in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][l] + num2
                        value.append(value_info[k][num1:num2])
                    value_list.append(value)
                #录入词典
                real_main_key=real_main_key_list[i]
                real_main_key_index=real_key_list.index(real_main_key)
                key__list = []
                for q in range(len(value_list)):
                    for w in range(len(value_list[q])):
                        if w == real_main_key_index:
                            key__list.append(value_list[q][w].strip())
                            continue
                        else:
                            title=value_list[q][real_main_key_index].strip()+'/'+real_key_list[w].strip()
                            info=value_list[q][w].strip()
                            dict_value[title]=info
                    dict_value[real_main_key]=key__list
                # print(key__list)
                # print(real_main_key_index)
                # print(real_key_list)
                # print(value_list)


        return dict_value
    def dut_get_show_show_rdnd_pairs(self, show_info):
        """
        Function:show rdnd pairs回显解析函数
        CLI命令:show rdnd pairs
        回显信息示例:
Ruijie#show rdnd pairs
Redundancy element pairs information:
name             pair seq   ISSU result   stage
==================================================
SNOOPING4        58         1             realtime
SAVI             57         1             realtime
REUP             56         1             realtime
net_rdnd         55         1             realtime
WEBAUTH          54         1             realtime
urpf_rdnd        53         1             realtime
SCC              52         1             realtime
of_rdnd          51         1             realtime
RLDP             50         1             realtime
RIP              49         1             realtime
RIPng            48         1             realtime
BFD_HA           47         1             realtime
TELNET_RDND      46         1             realtime
OSPF             45         1             realtime
NSM_HA           44         1             realtime
NSM_MCAST_RDND   43         1             realtime
NSM_MCAST6_RDND  42         1             realtime
SNMPD            41         1             realtime
OSPFv3           40         1             realtime
ISIS             39         1             realtime
PIM-SM           38         1             realtime
PIM-SMv6         37         1             realtime
DHCP-Server      36         1             realtime
LSM              35         1             realtime
BGP              34         1             realtime
LLDP             33         1             realtime
RNS_HA           32         1             realtime
MSTP_HA          31         1             realtime
RPI              30         1             realtime
zam              29         1             realtime
TRACK_HA         28         1             realtime
AAA              27         1             realtime
PARAM            26         1             realtime
LACP             25         1             realtime
RADIUS           24         1             realtime
ERPS             23         1             realtime
PDM_RDND         22         1             realtime
GVRP             21         1             realtime
RMON_RDND        20         1             realtime
TTY              19         1             realtime
MLD              18         1             realtime
IGMP             17         1             realtime
DLDP             16         1             realtime
SYSLOG_RDND      15         1             realtime
MLAG             14         1             realtime
MSF6_RDND        13         1             realtime
qosd_rdnd        12         1             realtime
acl              11         1             realtime
DHCP6            10         1             realtime
IGMP_SNP_RDND    9          1             realtime
BRIDGE           8          1             realtime
PASSWORD_RDND    7          1             realtime
MLD_SNP_RDND     6          1             realtime
SSH_RDND         5          1             realtime
MSF_RDND         4          1             realtime
TECH_RDND        3          1             realtime
CWMP_RDND        2          1             realtime
DOT1X            1          1             realtime
total paired count : 58

Local unpaired elements:

Peer unpaired elements:

        Returns:
{"RLDP/stage": "realtime", "RADIUS/stage": "realtime", "PDM_RDND/stage": "realtime", "TELNET_RDND/pair seq": "46", "TECH_RDND/stage": "realtime", "ERPS/pair seq": "23", "ISIS/stage": "realtime", "REUP/stage": "realtime", "GVRP/ISSU result": "1", "Peer unpaired elements": [], "SCC/ISSU result": "1", "DLDP/stage": "realtime", "OSPFv3/pair seq": "40", "NSM_MCAST6_RDND/pair seq": "42", "OSPF/ISSU result": "1", "BGP/pair seq": "34", "PIM-SM/stage": "realtime", "RNS_HA/ISSU result": "1", "LACP/pair seq": "25", "of_rdnd/pair seq": "51", "DHCP-Server/stage": "realtime", "TTY/pair seq": "19", "PARAM/stage": "realtime", "ERPS/ISSU result": "1", "SNOOPING4/pair seq": "58", "MLD_SNP_RDND/ISSU result": "1", "MLAG/stage": "realtime", "OSPF/pair seq": "45", "PIM-SM/pair seq": "38", "zam/ISSU result": "1", "TRACK_HA/stage": "realtime", "NSM_HA/pair seq": "44", "RIP/stage": "realtime", "DHCP6/stage": "realtime", "PDM_RDND/ISSU result": "1", "SAVI/ISSU result": "1", "TTY/ISSU result": "1", "RPI/stage": "realtime", "WEBAUTH/stage": "realtime", "SYSLOG_RDND/pair seq": "15", "RIP/pair seq": "49", "LACP/ISSU result": "1", "MSF_RDND/pair seq": "4", "PIM-SMv6/pair seq": "37", "BFD_HA/ISSU result": "1", "zam/stage": "realtime", "Local unpaired elements": [], "RLDP/ISSU result": "1", "RLDP/pair seq": "50", "TECH_RDND/ISSU result": "1", "WEBAUTH/ISSU result": "1", "SAVI/pair seq": "57", "RNS_HA/stage": "realtime", "SSH_RDND/ISSU result": "1", "net_rdnd/pair seq": "55", "IGMP/pair seq": "17", "DOT1X/stage": "realtime", "NSM_MCAST_RDND/pair seq": "43", "LSM/stage": "realtime", "PARAM/ISSU result": "1", "BFD_HA/pair seq": "47", "LLDP/pair seq": "33", "IGMP/ISSU result": "1", "REUP/pair seq": "56", "MSF6_RDND/pair seq": "13", "GVRP/pair seq": "21", "BFD_HA/stage": "realtime", "MLAG/pair seq": "14", "IGMP/stage": "realtime", "RIPng/ISSU result": "1", "PASSWORD_RDND/stage": "realtime", "OSPFv3/ISSU result": "1", "IGMP_SNP_RDND/pair seq": "9", "NSM_MCAST6_RDND/ISSU result": "1", "BRIDGE/stage": "realtime", "REUP/ISSU result": "1", "SNOOPING4/ISSU result": "1", "AAA/stage": "realtime", "SCC/stage": "realtime", "GVRP/stage": "realtime", "NSM_MCAST_RDND/stage": "realtime", "LSM/pair seq": "35", "MSF_RDND/stage": "realtime", "TELNET_RDND/ISSU result": "1", "LLDP/stage": "realtime", "qosd_rdnd/stage": "realtime", "SYSLOG_RDND/ISSU result": "1", "BRIDGE/pair seq": "8", "zam/pair seq": "29", "AAA/pair seq": "27", "DOT1X/pair seq": "1", "PASSWORD_RDND/ISSU result": "1", "of_rdnd/ISSU result": "1", "TELNET_RDND/stage": "realtime", "NSM_HA/ISSU result": "1", "RIPng/pair seq": "48", "ISIS/pair seq": "39", "urpf_rdnd/ISSU result": "1", "BGP/ISSU result": "1", "MSTP_HA/ISSU result": "1", "SNOOPING4/stage": "realtime", "SNMPD/pair seq": "41", "SNMPD/stage": "realtime", "NSM_MCAST6_RDND/stage": "realtime", "RNS_HA/pair seq": "32", "RADIUS/ISSU result": "1", "LSM/ISSU result": "1", "NSM_HA/stage": "realtime", "RMON_RDND/ISSU result": "1", "LACP/stage": "realtime", "DHCP6/pair seq": "10", "net_rdnd/ISSU result": "1", "DLDP/pair seq": "16", "urpf_rdnd/stage": "realtime", "MSTP_HA/pair seq": "31", "SNMPD/ISSU result": "1", "TRACK_HA/pair seq": "28", "net_rdnd/stage": "realtime", "OSPFv3/stage": "realtime", "MLD/pair seq": "18", "CWMP_RDND/pair seq": "2", "ISIS/ISSU result": "1", "MSF6_RDND/stage": "realtime", "MSTP_HA/stage": "realtime", "PASSWORD_RDND/pair seq": "7", "MLD_SNP_RDND/stage": "realtime", "MLD/stage": "realtime", "MLAG/ISSU result": "1", "acl/pair seq": "11", "of_rdnd/stage": "realtime", "acl/stage": "realtime", "CWMP_RDND/stage": "realtime", "LLDP/ISSU result": "1", "OSPF/stage": "realtime", "urpf_rdnd/pair seq": "53", "RMON_RDND/pair seq": "20", "DLDP/ISSU result": "1", "RADIUS/pair seq": "24", "SYSLOG_RDND/stage": "realtime", "MSF_RDND/ISSU result": "1", "IGMP_SNP_RDND/ISSU result": "1", "SSH_RDND/stage": "realtime", "DOT1X/ISSU result": "1", "DHCP-Server/ISSU result": "1", "RIP/ISSU result": "1", "SAVI/stage": "realtime", "PDM_RDND/pair seq": "22", "MSF6_RDND/ISSU result": "1", "RPI/pair seq": "30", "BGP/stage": "realtime", "MLD/ISSU result": "1", "WEBAUTH/pair seq": "54", "RPI/ISSU result": "1", "acl/ISSU result": "1", "DHCP-Server/pair seq": "36", "name_list": ["SNOOPING4", "SAVI", "REUP", "net_rdnd", "WEBAUTH", "urpf_rdnd", "SCC", "of_rdnd", "RLDP", "RIP", "RIPng", "BFD_HA", "TELNET_RDND", "OSPF", "NSM_HA", "NSM_MCAST_RDND", "NSM_MCAST6_RDND", "SNMPD", "OSPFv3", "ISIS", "PIM-SM", "PIM-SMv6", "DHCP-Server", "LSM", "BGP", "LLDP", "RNS_HA", "MSTP_HA", "RPI", "zam", "TRACK_HA", "AAA", "PARAM", "LACP", "RADIUS", "ERPS", "PDM_RDND", "GVRP", "RMON_RDND", "TTY", "MLD", "IGMP", "DLDP", "SYSLOG_RDND", "MLAG", "MSF6_RDND", "qosd_rdnd", "acl", "DHCP6", "IGMP_SNP_RDND", "BRIDGE", "PASSWORD_RDND", "MLD_SNP_RDND", "SSH_RDND", "MSF_RDND", "TECH_RDND", "CWMP_RDND", "DOT1X"], "NSM_MCAST_RDND/ISSU result": "1", "MLD_SNP_RDND/pair seq": "6", "CWMP_RDND/ISSU result": "1", "TECH_RDND/pair seq": "3", "PIM-SM/ISSU result": "1", "PIM-SMv6/ISSU result": "1", "DHCP6/ISSU result": "1", "ERPS/stage": "realtime", "TRACK_HA/ISSU result": "1", "RMON_RDND/stage": "realtime", "RIPng/stage": "realtime", "PARAM/pair seq": "26", "AAA/ISSU result": "1", "SCC/pair seq": "52", "PIM-SMv6/stage": "realtime", "IGMP_SNP_RDND/stage": "realtime", "SSH_RDND/pair seq": "5", "BRIDGE/ISSU result": "1", "qosd_rdnd/pair seq": "12", "TTY/stage": "realtime", "qosd_rdnd/ISSU result": "1"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show rdnd pairs | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        # 创建字典
        dict_value = {}

        # 按行读取信息，并清除空值清除无用信息头信息尾数据
        show_info_split = show_info.split("\n")
        if re.match(r'.*Ruijie.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*Ruijie.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        # （去掉dut_info_split中的空值以及只包含空格符的值）
        for i in range(len(dut_info_split)):
            if re.match('.*====.*',dut_info_split[i]):
                index=i
            dut_info_split[i] = dut_info_split[i].strip()
        dut_info_split.remove(dut_info_split[index])
        for i in dut_info_split:
            if '' in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' ' in dut_info_split:
                dut_info_split.remove(' ')
        dut_info_split.remove(dut_info_split[0])
        for i in range(len(dut_info_split)):
            if re.match('.*total paired count.*',dut_info_split[i]):
                mark_index=i
        info=dut_info_split[0:mark_index]
        total_info=dut_info_split[mark_index:]

        tittle_list=info[0].split('  ')
        for i in range(len(tittle_list)):
            if '' in tittle_list:
                tittle_list.remove('')
        info.remove(info[0])

        info_list_list=[]
        for i in range(len(info)):
            info_list=info[i].split(' ')
            for i in range(len(info_list)):
                if '' in info_list:
                    info_list.remove('')
            info_list_list.append(info_list)
        name_list = []
        for i in range(len(info_list_list)):
            for k in range(len(info_list_list[i])):
                if k ==0:
                    name_list.append(info_list_list[i][k].strip())
                    title1 = info_list_list[i][k].strip()
                else:
                    title2=title1+'/'+tittle_list[k].strip()
                    dict_value[title2]=info_list_list[i][k].strip()
        dict_value['name_list']=name_list

        for i in range(len(total_info)):
            if re.match('.*:.*',total_info[i]):
                mainobj=re.match('(.*):(.*)',total_info[i])
                name=mainobj.group(1).strip()
                vaule=mainobj.group(2).strip()
                dict_value[name]=vaule


        return dict_value
    def dut_get_show_rdnd_problems(self, show_info):
        """
        Function:show rdnd problems回显解析函数
        CLI命令:show rdnd problems
        回显信息示例:
Ruijie#show rdnd problems
VSD 0 redundancy state: realtime, switching disabled: no

Current VSD 0 redundancy detail information:
Redundancy role: master
Redundancy state: realtime
Redundancy server control socket: 19
Redundancy client control socket: 127


Local unpaired elements:

Peer unpaired elements:

        Returns:
{"VSD 0 redundancy state": "realtime"
"Local unpaired elements": ""
"Redundancy server control socket": "19"
"switching disabled": "no"
"Redundancy state": "realtime"
"Peer unpaired elements": ""
"Redundancy role": "master"
"Current VSD 0 redundancy detail information": ""
"Redundancy client control socket": "127"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show rdnd problems | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        # 创建字典
        dict_value = {}

        # 按行读取信息，并清除空值清除无用信息头信息尾数据
        show_info_split = show_info.split("\n")
        if re.match(r'.*Ruijie.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*Ruijie.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        # （去掉dut_info_split中的空值以及只包含空格符的值）
        for i in dut_info_split:
            if '' in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' ' in dut_info_split:
                dut_info_split.remove(' ')
        for i in range(len(dut_info_split)):
            dut_info_split[i] = dut_info_split[i]
        #print(dut_info_split)

        for i in range(len(dut_info_split)):
            if re.match('.*:.*,.*:.*',dut_info_split[i]):
                mainobj=re.match('(.*):(.*),(.*):(.*)',dut_info_split[i])
                name1=mainobj.group(1).strip()
                name2=mainobj.group(3).strip()
                vaule1=mainobj.group(2).strip()
                vaule2=mainobj.group(4).strip()
                dict_value[name1]=vaule1
                dict_value[name2]=vaule2
            elif re.match('.*:.*',dut_info_split[i]):
                mainobj = re.match('(.*):(.*)',dut_info_split[i])
                name=mainobj.group(1).strip()
                vaule=mainobj.group(2).strip()
                dict_value[name]=vaule
        return dict_value
    def dut_get_show_ipv6_ospf_word_neighbor(self, show_info):
        """
        Function:show ipv6 ospf 1 neighbor回显解析函数
        CLI命令:show ipv6 ospf 1 neighbor
        回显信息示例:
Ruijie#show ipv6 ospf 1 neighbor


    

    OSPFv3 Process (1), 1 Neighbors, 1 is Full:

    Neighbor ID     Pri   State            BFD State  Dead Time    Instance ID   Interface

    192.0.0.1         0   Full/DROther     -          00:00:35     0             GigabitEthernet 3/31

        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 ospf 1 neighbor | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        # 创建字典
        dict_value = {}
        # 按行读取信息，并清除空值清除无用信息头信息尾数据
        show_info_split = show_info.split("\n")
        if re.match(r'.*Ruijie.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*Ruijie.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        if re.match(r'.*Total number of prefixes.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        # （去掉dut_info_split中的空值以及只包含空格符的值）
        for i in range(len(dut_info_split)):
            dut_info_split[i]=dut_info_split[i].strip()
        for i in dut_info_split:
            while 1:
                if '' in dut_info_split:
                    dut_info_split.remove('')
                else:
                    break
        for i in dut_info_split:
            while 1:
                if ' ' in dut_info_split:
                    dut_info_split.remove(' ')
                else:
                    break
        info=dut_info_split[0].split(',')
        for i in range(len(info)):
            if re.match('.*OSPFv3 Process.*',info[i]):
                mainobj=re.match('.*(OSPFv3 Process)(.*)',info[i])
                key=mainobj.group(1).strip()
                vaule=mainobj.group(2).strip()
                dict_value[key]=vaule
            elif re.match('.*Neighbors.*',info[i]):
                mainobj=re.match('(.*)(Neighbors).*',info[i])
                key=mainobj.group(2).strip()
                vaule=mainobj.group(1).strip()
                dict_value[key]=vaule
            elif re.match('.*is.*',info[i]):
                mainobj=re.match('(.*)is(.*)',info[i])
                key=mainobj.group(1).strip()
                vaule=mainobj.group(2).strip()
                dict_value[key]=vaule
        dut_info_split.remove(dut_info_split[0])
        title=dut_info_split[0].split('  ')
        for i in title:
            while 1:
                if '' in title:
                    title.remove('')
                else:
                    break
        dut_info_split.remove(dut_info_split[0])
        Neighbor_ID_list=[]
        for i in range(len(dut_info_split)):
            vaule_info=dut_info_split[i].split('  ')
            while 1:
                if '' in vaule_info:
                    vaule_info.remove('')
                else:
                    break
            for k in range(len(vaule_info)):
                if k ==0:
                    title1=vaule_info[k].strip()
                    Neighbor_ID_list.append(title1)
                else:
                    title2=title1+'/'+title[k].strip()
                    dict_value[title2]=vaule_info[k].strip()
        dict_value['Neighbor_ID_list']=Neighbor_ID_list

        return  dict_value
    def dut_get_show_cpuprotect_type_dot1x(self,show_info):
        """
        Function:show cpu-protect type dot1x回显解析函数
        CLI命令:show cpu-protect type dot1x
        回显信息示例:
Ruijie#show cpu-protect type dot1x 
Packet Type             Traffic-class  Bandwidth(pps)  Rate(pps)  Drop(pps)  Total         Total Drop    DropTime                    
----------------------  -------------  --------------  ---------  ---------  ---------     ----------    ----------------------------
dot1x                   2              512             0          0          0             0                                         
Ruijie#

        Returns:
{"dot1x/Traffic-class": "2"
"Packet_Type_list": ["dot1x"], "dot1x/Drop(pps)": "0"
"dot1x/Total": "0"
"dot1x/Bandwidth(pps)": "512"
"dot1x/Rate(pps)": "0"
"dot1x/Total Drop": "0"
"dot1x/Packet Type": "dot1x"
"dot1x/DropTime": ""}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show cpu-protect type dot1x | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="Packet Type"     #需要变参的地方
        col_len_list = []
        #创建字典
        dict_value3={}
        address_list = []

        table_2 = 0
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if "Packet Type" in show_info_list_line[line_len_num]:              #***********
                table_1 = line_len_num
        (whippletree_list_1,cut_del_1) = self.dut_show_autoget_whippletree(table_1,line_len,show_info_list_line)
        show_info_list_line.remove(show_info_list_line[cut_del_1])
        new_show_info_num = len(show_info_list_line)
        for line_len_num in range(0,new_show_info_num):
            if "Packet Type" in show_info_list_line[line_len_num]:              #***********
                table_3 = line_len_num
        dict_value1 = self.dut_show_autoget_form(table_3,new_show_info_num,"Packet Type",whippletree_list_1,show_info_list_line)
        return dict_value1
    def dut_get_show_webauth_portalcheck(self,show_info):
        """
        Function:show web-auth portal-check回显解析函数
        CLI命令:show web-auth portal-check
        回显信息示例:
Ruijie#show web-auth portal-check  
Check:         Enable
  Interval:    1s
  Timeout:     1s
  Retransmit:  1
Escape:        Enable
Escape-nokick: on

Off Interval:  5
Off Count:     100

        Returns:
{"Retransmit": "1"
"Interval": "1s"
"Off Interval": "5"
"Timeout": "1s"
"Escape": "Enable"
"Off Count": "100"
"Escape-nokick": "on"
"Check": "Enable"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show web-auth portal-check | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        strarg='show web-auth portal-check'
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*'+strarg+'.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        #print show_info_list_line
        for list_value in show_info_list_line:
            if re.match(".*:.*",list_value) :
                list_value_split = list_value.split (":",1)   #以冒号分割一次
                key_name = '%s'%(list_value_split[0].lstrip().rstrip().replace("\r",""))
                dict_value[key_name] = list_value_split[1].lstrip().rstrip().replace("\r","")
        #print u"------》解析结果："
        #print dict_value
        return dict_value
    def dut_get_show_virtualac(self,show_info):
        # main_key=main_key
        ########关键key的传入值
        ########寻址key（必填）
        main_key_list = ['Device_id']
        ########若有key分多行写，填完整的key值，不然与寻址key一样就好（必填）
        real_main_key_list = ['Device_id']
        ########

        # 创建字典
        dict_value = {}

        # 按行读取信息，并清除空值清除无用信息头信息尾数据
        show_info_split = show_info.split("\n")
        if re.match(r'.*Ruijie.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*Ruijie.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        # （去掉dut_info_split中的空值以及只包含空格符的值）
        for i in dut_info_split:
            if '' in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' ' in dut_info_split:
                dut_info_split.remove(' ')
        for i in range(len(dut_info_split)):
            dut_info_split[i] = dut_info_split[i].lstrip()
        # print(dut_info_split)

        #######################参数
        # 表数量
        count = 0
        # 各个横杠长度
        hengang_len = 0
        # 一张表内各个横杠长度集合
        hengang_len_list = []
        # 整个showinfo内每张表内各个横杠长度集合的集合
        hengang_len_list_list = []
        # 横杠位置（用来相对判定key的位置）
        hengang_index_list = []
        # key的位置
        key_index_list = []
        # 表信息的集合
        table = []
        # 所有表信息的集合
        table_list = []
        #######################

        # 主要算法
        # 标识横杠位置并记录参数相关信息
        for i in range(len(dut_info_split)):
            if re.match("-+", dut_info_split[i]):
                # 排除数据中有“-”的情况
                for j in dut_info_split[i]:
                    if j != '-' and j != ' ':
                        cheak = 1
                        break
                    else:
                        cheak = 0
                        continue
                if cheak == 0:
                    hengang_len_list = []
                    count = count + 1
                    hengang_index_list.append(i)
                    # print(dut_info_split[i])
                    # 识别并记录下横杠的长度到list中
                    for k in range(len(dut_info_split[i])):
                        if dut_info_split[i][k] == '-' and k != len(dut_info_split[i]) - 1:
                            hengang_len = hengang_len + 1
                        elif dut_info_split[i][k] == ' ' and k != len(dut_info_split[i]) - 1 and dut_info_split[i][
                            k + 1] != '-':
                            hengang_len = hengang_len + 1
                        elif dut_info_split[i][k] == ' ' and k != len(dut_info_split[i]) - 1 and dut_info_split[i][
                            k + 1] == '-':
                            hengang_len_list.append(hengang_len)
                            hengang_len = 0
                        elif k == len(dut_info_split[i]) - 1:
                            hengang_len = hengang_len + 1
                            hengang_len_list.append(hengang_len)
                            hengang_len = 0
                    hengang_len_list_list.append(hengang_len_list)
                else:
                    continue
                # print(hengang_len_list_list)
        # 根据横杠位置和key的传入值标识出key的位置
        ##"""一般情况下横杠上一位就是key值，其他情况有横杠上一行为单位，或者有key值过长分行输出显示？"""
        for i in range(len(hengang_index_list)):
            main_key = main_key_list[i]
            k = hengang_index_list[i]
            while 1:
                if re.match('.*' + main_key + '.*', dut_info_split[k]):
                    key_index_list.append(k)
                    break
                else:
                    k = k - 1
        # print(key_index_list)
        # 根据查找的key位置进行分表操作,并存入table_list中
        for i in range(len(key_index_list)):
            if i == len(key_index_list) - 1:
                table = dut_info_split[key_index_list[i]:]
            else:
                table = dut_info_split[key_index_list[i]:key_index_list[i + 1]]
            table_list.append(table)
        # print(table_list)
        # 对各个表中的key、value提取，并删除掉横杠
        # 判定若key与横杠之间有单位之类的数据，进行key与该数据的整合成为一个完整key数据
        for i in range(len(table_list)):
            key_list = []
            value_list = []
            for j in range(len(table_list[i])):
                if re.match('-+', table_list[i][j]):
                    index = j
            key_info = table_list[i][0:index]
            value_info = table_list[i][index + 1:]
            # print(value_info)
            ##单行key的情况
            if index == 1:
                # key
                num1 = 0
                num2 = 0
                key = []
                for k in range(len(hengang_len_list_list[i])):
                    num1 = num2
                    num2 = 1 + hengang_len_list_list[i][k] + num2
                    key.append(key_info[0][num1:num2].strip())
                # value
                for k in range(len(value_info)):
                    value = []
                    num1 = 0
                    num2 = 0
                    # print(hengang_len_list_list[i])
                    for l in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][l] + num2
                        value.append(value_info[k][num1:num2])
                        # print(num1,num2)
                    value_list.append(value)
                # print(value_list)
                # 录入词典
                real_main_key = real_main_key_list[i]
                real_main_key_index = key.index(real_main_key)
                key__list = []
                for q in range(len(value_list)):
                    for w in range(len(value_list[q])):
                        if w == real_main_key_index:
                            key__list.append(value_list[q][w].strip())
                            continue
                        else:
                            title = value_list[q][real_main_key_index].strip() + '/' + key[w].strip()
                            info = value_list[q][w].strip()
                            dict_value[title] = info
                    dict_value[real_main_key] = key__list
                # print(main_key)
                # print(key)
                # print(value_list)
            ##多行key的情况
            elif index > 1:
                # key
                for m in range(len(key_info)):
                    num1 = 0
                    num2 = 0
                    key = []
                    for k in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][k] + num2
                        key.append(key_info[m][num1:num2])
                    key_list.append(key)
                # print(key_list)
                count_key_List = 0
                count_num = 0
                for h in range(len(key_list[0])):
                    count_key_List = count_key_List + 1
                real_key_list = []
                while 1:
                    real_key = ''
                    count_num = count_num + 1
                    if count_num > count_key_List:
                        break
                    else:
                        for f in range(len(key_list)):
                            key_in = key_list[f][count_num - 1]
                            real_key = real_key.strip() + key_in.strip()
                        # print(real_key)
                        real_key_list.append(real_key)
                        continue
                # print(real_key_list)
                # value
                for k in range(len(value_info)):
                    value = []
                    num1 = 0
                    num2 = 0
                    for l in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][l] + num2
                        value.append(value_info[k][num1:num2])
                    value_list.append(value)
                # 录入词典
                real_main_key = real_main_key_list[i]
                real_main_key_index = real_key_list.index(real_main_key)
                key__list = []
                for q in range(len(value_list)):
                    for w in range(len(value_list[q])):
                        if w == real_main_key_index:
                            key__list.append(value_list[q][w].strip())
                            continue
                        else:
                            title = value_list[q][real_main_key_index].strip() + '/' + real_key_list[w].strip()
                            info = value_list[q][w].strip()
                            dict_value[title] = info
                    dict_value[real_main_key] = key__list
                # print(key__list)
                # print(real_main_key_index)
                # print(real_key_list)
                # print(value_list)

        return dict_value
    def dut_get_show_interface_dutport_counters_error(self, show_info):
        """
        Function:show interface <dutport> counters error回显解析函数
        CLI命令:show interface <dutport> counters error
        回显信息示例:
hexin#show interface gi2/1/9 counters error         
Interface    UnderSize            OverSize             Collisions           Fragments
------------ -------------------- -------------------- -------------------- --------------------
Gi2/1/9      0                    0                    0                    0                   
Interface    Jabbers              CRC-Align-Err        Align-Err            FCS-Err
------------ -------------------- -------------------- -------------------- --------------------
Gi2/1/9      0                    0                    0                    0

        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interface <dutport> counters error | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        # main_key=main_key
        ########关键key的传入值
        ########寻址key（必填）
        main_key_list = ['Interface','Interface']
        ########若有key分多行写，填完整的key值，不然与寻址key一样就好（必填）
        real_main_key_list = ['Interface','Interface']
        ########

        # 创建字典
        dict_value = {}

        # 按行读取信息，并清除空值清除无用信息头信息尾数据
        show_info_split = show_info.split("\n")
        if re.match(r'.*Ruijie.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*Ruijie.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        # （去掉dut_info_split中的空值以及只包含空格符的值）
        for i in dut_info_split:
            if '' in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' ' in dut_info_split:
                dut_info_split.remove(' ')
        for i in range(len(dut_info_split)):
            dut_info_split[i] = dut_info_split[i].lstrip()
        # print(dut_info_split)

        #######################参数
        # 表数量
        count = 0
        # 各个横杠长度
        hengang_len = 0
        # 一张表内各个横杠长度集合
        hengang_len_list = []
        # 整个showinfo内每张表内各个横杠长度集合的集合
        hengang_len_list_list = []
        # 横杠位置（用来相对判定key的位置）
        hengang_index_list = []
        # key的位置
        key_index_list = []
        # 表信息的集合
        table = []
        # 所有表信息的集合
        table_list = []
        #######################

        # 主要算法
        # 标识横杠位置并记录参数相关信息
        for i in range(len(dut_info_split)):
            if re.match("-+", dut_info_split[i]):
                # 排除数据中有“-”的情况
                for j in dut_info_split[i]:
                    if j != '-' and j != ' ':
                        cheak = 1
                        break
                    else:
                        cheak = 0
                        continue
                if cheak == 0:
                    hengang_len_list = []
                    count = count + 1
                    hengang_index_list.append(i)
                    # print(dut_info_split[i])
                    # 识别并记录下横杠的长度到list中
                    for k in range(len(dut_info_split[i])):
                        if dut_info_split[i][k] == '-' and k != len(dut_info_split[i]) - 1:
                            hengang_len = hengang_len + 1
                        elif dut_info_split[i][k] == ' ' and k != len(dut_info_split[i]) - 1 and dut_info_split[i][
                            k + 1] != '-':
                            hengang_len = hengang_len + 1
                        elif dut_info_split[i][k] == ' ' and k != len(dut_info_split[i]) - 1 and dut_info_split[i][
                            k + 1] == '-':
                            hengang_len_list.append(hengang_len)
                            hengang_len = 0
                        elif k == len(dut_info_split[i]) - 1:
                            hengang_len = hengang_len + 1
                            hengang_len_list.append(hengang_len)
                            hengang_len = 0
                    hengang_len_list_list.append(hengang_len_list)
                else:
                    continue
                # print(hengang_len_list_list)
        # 根据横杠位置和key的传入值标识出key的位置
        ###"""一般情况下横杠上一位就是key值，其他情况有横杠上一行为单位，或者有key值过长分行输出显示？"""
        for i in range(len(hengang_index_list)):
            main_key = main_key_list[i]
            k = hengang_index_list[i]
            while 1:
                if re.match('.*' + main_key + '.*', dut_info_split[k]):
                    key_index_list.append(k)
                    break
                else:
                    k = k - 1
        # print(key_index_list)
        # 根据查找的key位置进行分表操作,并存入table_list中
        for i in range(len(key_index_list)):
            if i == len(key_index_list) - 1:
                table = dut_info_split[key_index_list[i]:]
            else:
                table = dut_info_split[key_index_list[i]:key_index_list[i + 1]]
            table_list.append(table)
        # print(table_list)
        # 对各个表中的key、value提取，并删除掉横杠
        # 判定若key与横杠之间有单位之类的数据，进行key与该数据的整合成为一个完整key数据
        for i in range(len(table_list)):
            key_list = []
            value_list = []
            for j in range(len(table_list[i])):
                if re.match('-+', table_list[i][j]):
                    index = j
            key_info = table_list[i][0:index]
            value_info = table_list[i][index + 1:]
            # print(value_info)
            ##单行key的情况
            if index == 1:
                # key
                num1 = 0
                num2 = 0
                key = []
                for k in range(len(hengang_len_list_list[i])):
                    num1 = num2
                    num2 = 1 + hengang_len_list_list[i][k] + num2
                    key.append(key_info[0][num1:num2].strip())
                # value
                for k in range(len(value_info)):
                    value = []
                    num1 = 0
                    num2 = 0
                    # print(hengang_len_list_list[i])
                    for l in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][l] + num2
                        value.append(value_info[k][num1:num2])
                        # print(num1,num2)
                    value_list.append(value)
                # print(value_list)
                # 录入词典
                real_main_key = real_main_key_list[i]
                real_main_key_index = key.index(real_main_key)
                key__list = []
                for q in range(len(value_list)):
                    for w in range(len(value_list[q])):
                        if w == real_main_key_index:
                            key__list.append(value_list[q][w].strip())
                            continue
                        else:
                            title = value_list[q][real_main_key_index].strip() + '/' + key[w].strip()
                            info = value_list[q][w].strip()
                            dict_value[title] = info
                    dict_value[real_main_key] = key__list
                # print(main_key)
                # print(key)
                # print(value_list)
            ##多行key的情况
            elif index > 1:
                # key
                for m in range(len(key_info)):
                    num1 = 0
                    num2 = 0
                    key = []
                    for k in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][k] + num2
                        key.append(key_info[m][num1:num2])
                    key_list.append(key)
                # print(key_list)
                count_key_List = 0
                count_num = 0
                for h in range(len(key_list[0])):
                    count_key_List = count_key_List + 1
                real_key_list = []
                while 1:
                    real_key = ''
                    count_num = count_num + 1
                    if count_num > count_key_List:
                        break
                    else:
                        for f in range(len(key_list)):
                            key_in = key_list[f][count_num - 1]
                            real_key = real_key.strip() + key_in.strip()
                        # print(real_key)
                        real_key_list.append(real_key)
                        continue
                # print(real_key_list)
                # value
                for k in range(len(value_info)):
                    value = []
                    num1 = 0
                    num2 = 0
                    for l in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][l] + num2
                        value.append(value_info[k][num1:num2])
                    value_list.append(value)
                # 录入词典
                real_main_key = real_main_key_list[i]
                real_main_key_index = real_key_list.index(real_main_key)
                key__list = []
                for q in range(len(value_list)):
                    for w in range(len(value_list[q])):
                        if w == real_main_key_index:
                            key__list.append(value_list[q][w].strip())
                            continue
                        else:
                            title = value_list[q][real_main_key_index].strip() + '/' + real_key_list[w].strip()
                            info = value_list[q][w].strip()
                            dict_value[title] = info
                    dict_value[real_main_key] = key__list
                # print(key__list)
                # print(real_main_key_index)
                # print(real_key_list)
                # print(value_list)

        return dict_value
    def dut_get_show_interface_dutport_counters_summary(self, show_info):
        """
        Function:show interface <dutport> counters summary回显解析函数
        CLI命令:show interface <dutport> counters summary
        回显信息示例:
hexin#show interface gi2/1/9 counters summary 
Interface     InOctets             InUcastPkts          InMulticastPkts      InBroadcastPkts
------------- -------------------- -------------------- -------------------- --------------------
Gi2/1/9       209829061            1699312              320                  1293                
Interface     OutOctets            OutUcastPkts         OutMulticastPkts     OutBroadcastPkts
------------- -------------------- -------------------- -------------------- --------------------
Gi2/1/9       56482593             70383                126                  372154

        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interface <dutport> counters summary | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        # main_key=main_key
        ########关键key的传入值
        ########寻址key（必填）
        main_key_list = ['Interface','Interface']
        ########若有key分多行写，填完整的key值，不然与寻址key一样就好（必填）
        real_main_key_list = ['Interface','Interface']
        ########

        # 创建字典
        dict_value = {}

        # 按行读取信息，并清除空值清除无用信息头信息尾数据
        show_info_split = show_info.split("\n")
        if re.match(r'.*Ruijie.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*Ruijie.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        # （去掉dut_info_split中的空值以及只包含空格符的值）
        for i in dut_info_split:
            if '' in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' ' in dut_info_split:
                dut_info_split.remove(' ')
        for i in range(len(dut_info_split)):
            dut_info_split[i] = dut_info_split[i].lstrip()
        # print(dut_info_split)

        #######################参数
        # 表数量
        count = 0
        # 各个横杠长度
        hengang_len = 0
        # 一张表内各个横杠长度集合
        hengang_len_list = []
        # 整个showinfo内每张表内各个横杠长度集合的集合
        hengang_len_list_list = []
        # 横杠位置（用来相对判定key的位置）
        hengang_index_list = []
        # key的位置
        key_index_list = []
        # 表信息的集合
        table = []
        # 所有表信息的集合
        table_list = []
        #######################

        # 主要算法
        # 标识横杠位置并记录参数相关信息
        for i in range(len(dut_info_split)):
            if re.match("-+", dut_info_split[i]):
                # 排除数据中有“-”的情况
                for j in dut_info_split[i]:
                    if j != '-' and j != ' ':
                        cheak = 1
                        break
                    else:
                        cheak = 0
                        continue
                if cheak == 0:
                    hengang_len_list = []
                    count = count + 1
                    hengang_index_list.append(i)
                    # print(dut_info_split[i])
                    # 识别并记录下横杠的长度到list中
                    for k in range(len(dut_info_split[i])):
                        if dut_info_split[i][k] == '-' and k != len(dut_info_split[i]) - 1:
                            hengang_len = hengang_len + 1
                        elif dut_info_split[i][k] == ' ' and k != len(dut_info_split[i]) - 1 and dut_info_split[i][
                            k + 1] != '-':
                            hengang_len = hengang_len + 1
                        elif dut_info_split[i][k] == ' ' and k != len(dut_info_split[i]) - 1 and dut_info_split[i][
                            k + 1] == '-':
                            hengang_len_list.append(hengang_len)
                            hengang_len = 0
                        elif k == len(dut_info_split[i]) - 1:
                            hengang_len = hengang_len + 1
                            hengang_len_list.append(hengang_len)
                            hengang_len = 0
                    hengang_len_list_list.append(hengang_len_list)
                else:
                    continue
                # print(hengang_len_list_list)
        # 根据横杠位置和key的传入值标识出key的位置
        ###"""一般情况下横杠上一位就是key值，其他情况有横杠上一行为单位，或者有key值过长分行输出显示？"""
        for i in range(len(hengang_index_list)):
            main_key = main_key_list[i]
            k = hengang_index_list[i]
            while 1:
                if re.match('.*' + main_key + '.*', dut_info_split[k]):
                    key_index_list.append(k)
                    break
                else:
                    k = k - 1
        # print(key_index_list)
        # 根据查找的key位置进行分表操作,并存入table_list中
        for i in range(len(key_index_list)):
            if i == len(key_index_list) - 1:
                table = dut_info_split[key_index_list[i]:]
            else:
                table = dut_info_split[key_index_list[i]:key_index_list[i + 1]]
            table_list.append(table)
        # print(table_list)
        # 对各个表中的key、value提取，并删除掉横杠
        # 判定若key与横杠之间有单位之类的数据，进行key与该数据的整合成为一个完整key数据
        for i in range(len(table_list)):
            key_list = []
            value_list = []
            for j in range(len(table_list[i])):
                if re.match('-+', table_list[i][j]):
                    index = j
            key_info = table_list[i][0:index]
            value_info = table_list[i][index + 1:]
            # print(value_info)
            ##单行key的情况
            if index == 1:
                # key
                num1 = 0
                num2 = 0
                key = []
                for k in range(len(hengang_len_list_list[i])):
                    num1 = num2
                    num2 = 1 + hengang_len_list_list[i][k] + num2
                    key.append(key_info[0][num1:num2].strip())
                # value
                for k in range(len(value_info)):
                    value = []
                    num1 = 0
                    num2 = 0
                    # print(hengang_len_list_list[i])
                    for l in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][l] + num2
                        value.append(value_info[k][num1:num2])
                        # print(num1,num2)
                    value_list.append(value)
                # print(value_list)
                # 录入词典
                real_main_key = real_main_key_list[i]
                real_main_key_index = key.index(real_main_key)
                key__list = []
                for q in range(len(value_list)):
                    for w in range(len(value_list[q])):
                        if w == real_main_key_index:
                            key__list.append(value_list[q][w].strip())
                            continue
                        else:
                            title = value_list[q][real_main_key_index].strip() + '/' + key[w].strip()
                            info = value_list[q][w].strip()
                            dict_value[title] = info
                    dict_value[real_main_key] = key__list
                # print(main_key)
                # print(key)
                # print(value_list)
            ##多行key的情况
            elif index > 1:
                # key
                for m in range(len(key_info)):
                    num1 = 0
                    num2 = 0
                    key = []
                    for k in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][k] + num2
                        key.append(key_info[m][num1:num2])
                    key_list.append(key)
                # print(key_list)
                count_key_List = 0
                count_num = 0
                for h in range(len(key_list[0])):
                    count_key_List = count_key_List + 1
                real_key_list = []
                while 1:
                    real_key = ''
                    count_num = count_num + 1
                    if count_num > count_key_List:
                        break
                    else:
                        for f in range(len(key_list)):
                            key_in = key_list[f][count_num - 1]
                            real_key = real_key.strip() + key_in.strip()
                        # print(real_key)
                        real_key_list.append(real_key)
                        continue
                # print(real_key_list)
                # value
                for k in range(len(value_info)):
                    value = []
                    num1 = 0
                    num2 = 0
                    for l in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][l] + num2
                        value.append(value_info[k][num1:num2])
                    value_list.append(value)
                # 录入词典
                real_main_key = real_main_key_list[i]
                real_main_key_index = real_key_list.index(real_main_key)
                key__list = []
                for q in range(len(value_list)):
                    for w in range(len(value_list[q])):
                        if w == real_main_key_index:
                            key__list.append(value_list[q][w].strip())
                            continue
                        else:
                            title = value_list[q][real_main_key_index].strip() + '/' + real_key_list[w].strip()
                            info = value_list[q][w].strip()
                            dict_value[title] = info
                    dict_value[real_main_key] = key__list
                # print(key__list)
                # print(real_main_key_index)
                # print(real_key_list)
                # print(value_list)

        return dict_value
    def dut_get_show_redundancy_state(self,show_info):
        """
        Function:show redundancy state回显解析函数
        CLI命令:show redundancy state
        回显信息示例:
Ruijie#show redundancy state

Redundancy role: master
Redundancy state: alone
Auto-sync time-period: 3600 s

        Returns:
{'Redundancy role': 'master'
'Auto-sync time-period': '3600 s'
'Redundancy state': 'alone'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show redundancy state | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        strarg='show redundancy state'
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*'+strarg+'.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        #print show_info_list_line
        for list_value in show_info_list_line:
            if re.match(".*:.*",list_value) :
                list_value_split = list_value.split (":",1)   #以冒号分割一次
                key_name = '%s'%(list_value_split[0].lstrip().rstrip().replace("\r",""))
                dict_value[key_name] = list_value_split[1].lstrip().rstrip().replace("\r","")
        #print u"------》解析结果："
        #print dict_value
        return dict_value
    def dut_get_show_redundancy_states(self,show_info):
        """
        Function:show redundancy states回显解析函数
        CLI命令:show redundancy states
        回显信息示例:
Ruijie#show redundancy states 
Redundancy role: master
Redundancy state: realtime
Auto-sync time-period: 3600 s

        Returns:
{"Redundancy role": "master"
"Auto-sync time-period": "3600 s"
"Redundancy state": "realtime"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show redundancy states | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        strarg='show redundancy state'
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*'+strarg+'.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        #print show_info_list_line
        for list_value in show_info_list_line:
            if re.match(".*:.*",list_value) :
                list_value_split = list_value.split (":",1)   #以冒号分割一次
                key_name = '%s'%(list_value_split[0].lstrip().rstrip().replace("\r",""))
                dict_value[key_name] = list_value_split[1].lstrip().rstrip().replace("\r","")
        #print u"------》解析结果："
        #print dict_value
        return dict_value
    def dut_get_show_ip_ospf_database_nssaexternal_advrouter_ip(self,show_info):
        """
        Function:show ip ospf database nssa-external adv-router ****(1.1.1.1)回显解析函数
        CLI命令:show ip ospf database nssa-external adv-router ****(1.1.1.1)
        回显信息示例:
57H-2(config-router)#show ip ospf database nssa-external adv-router ****(1.1.1.1)

            OSPF Router with ID (1.1.1.2) (Process ID 1)

                NSSA-external Link States (Area 0.0.0.1 [NSSA])

  LS age: 215
  Options: 0x8 (-|-|-|-|N/P|-|-|-)
  LS Type: AS-NSSA-LSA
  Link State ID: 9.9.9.0 (External Network Number For NSSA)
  Advertising Router: 1.1.1.1
  LS Seq Number: 80000001
  Checksum: 0x5720
  Length: 36
  Network Mask: /24
        Metric Type: 2 (Larger than any link state path)
        TOS: 0
        Metric: 20
        NSSA: Forward Address: 10.10.10.2
        External Route Tag: 0

  LS age: 215
  Options: 0x8 (-|-|-|-|N/P|-|-|-)
  LS Type: AS-NSSA-LSA
  Link State ID: 100.0.1.0 (External Network Number For NSSA)
  Advertising Router: 1.1.1.1
  LS Seq Number: 80000001
  Checksum: 0x78b4
  Length: 36
  Network Mask: /24
        Metric Type: 2 (Larger than any link state path)
        TOS: 0
        Metric: 20
        NSSA: Forward Address: 10.10.10.2
        External Route Tag: 0

  LS age: 217
  Options: 0x8 (-|-|-|-|N/P|-|-|-)
  LS Type: AS-NSSA-LSA
  Link State ID: 100.0.2.0 (External Network Number For NSSA)
  Advertising Router: 1.1.1.1
  LS Seq Number: 80000001
  Checksum: 0x6dbe
  Length: 36
  Network Mask: /24
        Metric Type: 2 (Larger than any link state path)
        TOS: 0
        Metric: 20
        NSSA: Forward Address: 10.10.10.2
        External Route Tag: 0

57H-2(config-if-GigabitEthernet 0/2)#

        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip ospf database nssa-external adv-router ****(1.1.1.1) | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        # 创建字典
        dict_value = {}

        # 按行读取信息，并清除空值清除无用信息头信息尾数据
        show_info_split = show_info.split("\n")
        if re.match(r'.*Ruijie.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*Ruijie.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        # （去掉dut_info_split中的空值以及只包含空格符的值）
        for i in dut_info_split:
            if '' in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' ' in dut_info_split:
                dut_info_split.remove(' ')
        for i in range(len(dut_info_split)):
            dut_info_split[i] = dut_info_split[i]
        #print(dut_info_split)

        table_index=[]
        table_title=[]
        for i in  range(len(dut_info_split)):
            if re.match('.*LS age.*',dut_info_split[i]):
                table_index.append(i)
            if re.match('.*Link State ID.*:.*\(.*\)',dut_info_split[i]):
                mainobj=re.match('.*(Link State ID).*:(.*)\(.*\)',dut_info_split[i])
                table_title.append(mainobj.group(2).strip())
        #print(table_index,table_title)
        for i in  range(len(table_index)):
            if i == len(table_index)-1:
                table=dut_info_split[table_index[i]:]
            else:
                table=dut_info_split[table_index[i]:table_index[i+1]]
            title=table_title[i]
            for k in range(len(table)):
                if re.match('.*Link State ID.*:.*\(.*\)',table[k]):
                    continue
                else:
                    mainobj=re.match('(.*):(.*)',table[k])
                    title1=title+'/'+mainobj.group(1).strip()
                    vaule=mainobj.group(2).strip()
                    dict_value[title1]=vaule
        dict_value['Link_State_ID_List']=table_title
        return  dict_value
    def dut_get_show_dot1x_user_mac_mac(self,show_info):
        """
        Function:show dot1x user mac  xxxx.xxxx.xxxx回显解析函数
        CLI命令:show dot1x user mac  xxxx.xxxx.xxxx
        回显信息示例:
Ruijie#show dot1x user mac 1000.0100.0002
User name: lmm00000001
User id: 1011
Type: static
Mac address is 1000.0100.0002
Vlan id is 1600
VXLAN: 0
Access from port Gi2/1/9
Time online: 0days 0h 1m25s
User ip address is 5.0.0.2
Authorization session time is 20736000 seconds
Supplicant is private
Start accounting
Permit proxy user
Permit dial user
IP privilege is 0
 user acl-name lmm00000001_9_0_0 : 
Terminal Type:Others

        Returns:
{'Authorization session time': '20736000 seconds'
'proxy user': 'Permit'
'Access from port': 'Gi2/1/9'
'Mac address': '1000.0100.0002'
'Vlan id': '1600'
'user acl-name lmm00000001_9_0_0': ''
'IP privilege': '0'
'User name': 'lmm00000001'
'accounting': 'Start'
'User id': '1011'
'Supplicant': 'private'
'dot1x user mac 1000.0100.0002': 'show'
'dial user': 'Permit'
'Time online': '0days 0h 1m25s'
'Type': 'static'
'Terminal Type': 'Others'
'VXLAN': '0'
'User ip address': '5.0.0.2'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show dot1x user mac  xxxx.xxxx.xxxx | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        # 创建字典
        dict_value = {}

        # 按行读取信息，并清除空值清除无用信息头信息尾数据
        show_info_split = show_info.split("\n")
        if re.match(r'.*Ruijie.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*Ruijie.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        # （去掉dut_info_split中的空值以及只包含空格符的值）
        for i in dut_info_split:
            if '' in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' ' in dut_info_split:
                dut_info_split.remove(' ')
        for i in range(len(dut_info_split)):
            dut_info_split[i] = dut_info_split[i]
        #print(dut_info_split)

        type=-1
        for i in range(len(dut_info_split)):
            if re.match('Supplicant information',dut_info_split[i]):
                type=1
            elif re.match('Supplicant is private',dut_info_split[i]):
                type=2
        if type==1:
            for i in range(len(dut_info_split)):
                if re.match('.*\.+.*',dut_info_split[i]):
                    mainobj=re.match('(.*)\s\.+\s(.*)',dut_info_split[i])
                    title=mainobj.group(1).strip()
                    vaule=mainobj.group(2).strip()
                    dict_value[title]=vaule
        elif type==2:
            length = len(dut_info_split)
            for i in range(length):
                if re.match('Access from', dut_info_split[i]):
                    matchObj = re.match('(Access from port)(.*)', dut_info_split[i])
                    dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
                    dut_info_split[i] = ''
                    break
            for i in range(length):
                if re.match(' user acl-name', dut_info_split[i]):
                    matchObj = re.match(' (user acl-name.*):(.*)', dut_info_split[i])
                    dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
                    dut_info_split[i] = ''
                    break
            while '' in dut_info_split:
                dut_info_split.remove('')
            length = len(dut_info_split)
            for i in range(length):
                if re.match('.* is .*', dut_info_split[i]):
                    matchObj = re.match('(.*) is (.*)', dut_info_split[i])
                    dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
                elif re.match('.*:.*', dut_info_split[i]):
                    matchObj = re.match('(.*):(.*)', dut_info_split[i])
                    dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
                else:
                    if re.match('\w+ \w+', dut_info_split[i]):
                        matchObj = re.match('(\w+) (.*)', dut_info_split[i])
                        dict_value[matchObj.group(2).strip()] = matchObj.group(1).strip()
                    else:
                        pass
        return dict_value
    def dut_get_show_dot1x_summary(self,show_info):
        """
        Function:show dot1x summary回显解析函数
        CLI命令:show dot1x summary
        回显信息示例:
N18010#show dot1x summary 

ID        Username   MAC             Interface VLAN INNER-VLAN Auth-State      Backend-State Port-Status User-Type Time               
--------- ---------- --------------  --------- ---- ---------- --------------- ------------- ----------- --------- ------------------ 
26886350  1228ac1... 1228.ac13.04ee  Gi1/18    2161 0          Authenticating  Response      Authed      static    User is offline  
26882551  1228ac1... 1228.ac13.001a  Te5/15    2024 0          Authenticated   Idle          Authed      static    0days 0h 0m11s    
20632126  1231ac1... 1231.ac13.0245  Gi1/14    2012 0          Authenticated   Idle          Authed      static    1days 0h28m17s    
20606725  1230ac1... 1230.ac13.032b  Gi1/11    2013 0          Authenticated   Idle          Authed      static    1days 0h31m43s    
21168370  ly287      0010.9401.0121  Te5/1     2001 0          Authenticated   Idle          Authed      static    0days21h39m24s    
21144967  ly23997    0015.9400.07cf  Gi3/7     101  0          Authenticated   Idle          Authed      static    0days21h42m58s

        Returns:
{'0015.9400.07cf/VLAN': '101'
'1230.ac13.032b/User-Type': 'static'
'1228.ac13.001a/Interface': 'Te5/15'
'1231.ac13.0245/Username': '1231ac1...'
'0015.9400.07cf/Username': 'ly23997'
'1230.ac13.032b/INNER-VLAN': '0'
'1230.ac13.032b/Interface': 'Gi1/11'
'1231.ac13.0245/Port-Status': 'Authed'
'1231.ac13.0245/Auth-State': 'Authenticated'
'1228.ac13.04ee/Auth-State': 'Authenticating'
'0010.9401.0121/User-Type': 'static'
'1230.ac13.032b/Username': '1230ac1...'
'1230.ac13.032b/VLAN': '2013'
'0015.9400.07cf/Auth-State': 'Authenticated'
'1231.ac13.0245/INNER-VLAN': '0'
'1228.ac13.001a/INNER-VLAN': '0'
'0015.9400.07cf/INNER-VLAN': '0'
'0010.9401.0121/ID': '21168370'
'0010.9401.0121/INNER-VLAN': '0'
'1230.ac13.032b/Backend-State': 'Idle'
'1230.ac13.032b/Port-Status': 'Authed'
'1230.ac13.032b/Auth-State': 'Authenticated'
'0015.9400.07cf/Interface': 'Gi3/7'
'1231.ac13.0245/Time': '1days 0h28m17s'
'0010.9401.0121/Interface': 'Te5/1'
'1228.ac13.001a/Time': '0days 0h 0m11s'
'1231.ac13.0245/VLAN': '2012'
'1228.ac13.04ee/Port-Status': 'Authed'
'0015.9400.07cf/ID': '21144967'
'1228.ac13.04ee/User-Type': 'static'
'1228.ac13.001a/VLAN': '2024'
'1228.ac13.04ee/Interface': 'Gi1/18'
'1228.ac13.001a/ID': '26882551'
'0010.9401.0121/Port-Status': 'Authed'
'1230.ac13.032b/Time': '1days 0h31m43s'
'1231.ac13.0245/Backend-State': 'Idle'
'0010.9401.0121/Auth-State': 'Authenticated'
'1228.ac13.001a/Port-Status': 'Authed'
'1228.ac13.04ee/VLAN': '2161'
'1228.ac13.04ee/ID': '26886350'
'1228.ac13.04ee/Username': '1228ac1...'
'1228.ac13.001a/Username': '1228ac1...'
'0010.9401.0121/Username': 'ly287'
'1231.ac13.0245/Interface': 'Gi1/14'
'1228.ac13.001a/Backend-State': 'Idle'
'0015.9400.07cf/Port-Status': 'Authed'
'0010.9401.0121/Backend-State': 'Idle'
'1228.ac13.001a/Auth-State': 'Authenticated'
'1228.ac13.04ee/Backend-State': 'Response'
'0015.9400.07cf/Time': '0days21h42m58s'
'1230.ac13.032b/ID': '20606725'
'0010.9401.0121/Time': '0days21h39m24s'
'1231.ac13.0245/ID': '20632126'
'1228.ac13.001a/User-Type': 'static'
'0015.9400.07cf/Backend-State': 'Idle'
'MAC': ['1228.ac13.04ee'
'1228.ac13.001a'
'1231.ac13.0245'
'1230.ac13.032b'
'0010.9401.0121'
'0015.9400.07cf'], '0015.9400.07cf/User-Type': 'static'
'0010.9401.0121/VLAN': '2001'
'1228.ac13.04ee/Time': 'User is offline'
'1228.ac13.04ee/INNER-VLAN': '0'
'1231.ac13.0245/User-Type': 'static'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show dot1x summary | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        # main_key=main_key
        ########关键key的传入值
        ########寻址key（必填）
        ########若值中有括号符号去掉
        main_key_list = ['MAC']
        #main_key_list = main_key
        ########若有key分多行写，填完整的key值，不然与寻址key一样就好（必填）
        #real_main_key_list = real_main_key
        real_main_key_list=['MAC']
        ########

        # 创建字典
        dict_value = {}

        # 按行读取信息，并清除空值清除无用信息头信息尾数据
        show_info_split = show_info.split("\n")
        if re.match(r'.*Ruijie.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*Ruijie.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        # （去掉dut_info_split中的空值以及只包含空格符的值）
        for i in dut_info_split:
            if '' in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' ' in dut_info_split:
                dut_info_split.remove(' ')
        for i in range(len(dut_info_split)):
            dut_info_split[i] = dut_info_split[i]
        # print(dut_info_split)

        #######################参数
        # 表数量
        count = 0
        # 各个横杠长度
        hengang_len = 0
        # 一张表内各个横杠长度集合
        hengang_len_list = []
        # 整个showinfo内每张表内各个横杠长度集合的集合
        hengang_len_list_list = []
        # 横杠位置（用来相对判定key的位置）
        hengang_index_list = []
        # key的位置
        key_index_list = []
        # 表信息的集合
        table = []
        # 所有表信息的集合
        table_list = []
        #######################

        # 主要算法
        # 标识横杠位置并记录参数相关信息
        for i in range(len(dut_info_split)):
            if re.match("-+", dut_info_split[i]):
                # 排除数据中有“-”的情况
                for j in dut_info_split[i]:
                    if j != '-' and j != ' ':
                        cheak = 1
                        break
                    else:
                        cheak = 0
                        continue
                if cheak == 0:
                    hengang_len_list = []
                    count = count + 1
                    hengang_index_list.append(i)
                    # print(dut_info_split[i])
                    # 识别并记录下横杠的长度到list中
                    for k in range(len(dut_info_split[i])):
                        if dut_info_split[i][k] == '-' and k != len(dut_info_split[i]) - 1:
                            hengang_len = hengang_len + 1
                        elif dut_info_split[i][k] == ' ' and k != len(dut_info_split[i]) - 1 and dut_info_split[i][
                            k + 1] != '-':
                            hengang_len = hengang_len + 1
                        elif dut_info_split[i][k] == ' ' and k != len(dut_info_split[i]) - 1 and dut_info_split[i][
                            k + 1] == '-':
                            hengang_len_list.append(hengang_len)
                            hengang_len = 0
                        elif k == len(dut_info_split[i]) - 1:
                            hengang_len = hengang_len + 1
                            hengang_len_list.append(hengang_len)
                            hengang_len = 0
                    hengang_len_list_list.append(hengang_len_list)
                else:
                    continue
                # print(hengang_len_list_list)
        # 根据横杠位置和key的传入值标识出key的位置
        # """一般情况下横杠上一位就是key值，其他情况有横杠上一行为单位，或者有key值过长分行输出显示？"""
        for i in range(len(hengang_index_list)):
            main_key = main_key_list[i]
            k = hengang_index_list[i]
            while 1:
                if re.match('.*' + main_key + '.*', dut_info_split[k]):
                    key_index_list.append(k)
                    break
                else:
                    k = k - 1
        # print(key_index_list)
        # 根据查找的key位置进行分表操作,并存入table_list中
        for i in range(len(key_index_list)):
            if i == len(key_index_list) - 1:
                table = dut_info_split[key_index_list[i]:]
            else:
                table = dut_info_split[key_index_list[i]:key_index_list[i + 1]]
            table_list.append(table)
        # print(table_list)
        # 对各个表中的key、value提取，并删除掉横杠
        # 判定若key与横杠之间有单位之类的数据，进行key与该数据的整合成为一个完整key数据
        for i in range(len(table_list)):
            key_list = []
            value_list = []
            for j in range(len(table_list[i])):
                if re.match('-+', table_list[i][j]):
                    index = j
            key_info = table_list[i][0:index]
            value_info = table_list[i][index + 1:]
            # print(value_info)
            ##单行key的情况
            if index == 1:
                # key
                num1 = 0
                num2 = 0
                key = []
                for k in range(len(hengang_len_list_list[i])):
                    num1 = num2
                    num2 = 1 + hengang_len_list_list[i][k] + num2
                    key.append(key_info[0][num1:num2].strip())
                # value
                for k in range(len(value_info)):
                    value = []
                    num1 = 0
                    num2 = 0
                    # print(hengang_len_list_list[i])
                    for l in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][l] + num2
                        value.append(value_info[k][num1:num2])
                        # print(num1,num2)
                    value_list.append(value)
                # print(value_list)
                # 录入词典
                real_main_key = real_main_key_list[i]
                # print(real_main_key)
                if type(real_main_key) == type([]):
                    real_main_key_index = []
                    for l in range(len(real_main_key)):
                        real_main_key_index.append(key.index(real_main_key[l]))
                    # print(real_main_key_index)
                    key__list_list = []
                    for q in range(len(value_list)):
                        key__list = []
                        real_main_key_title = ''
                        for w in range(len(value_list[q])):
                            if w in real_main_key_index:
                                key__list.append(value_list[q][w].strip())
                                continue
                            else:
                                title1 = ''
                                for l in range(len(real_main_key_index)):
                                    title1 = title1 + '/' + value_list[q][real_main_key_index[l]].strip()
                                title2 = title1.strip('/') + '/' + key[w].strip()
                                info = value_list[q][w].strip()
                                dict_value[title2] = info
                        key__list_list.append(key__list)
                        for w in range(len(real_main_key)):
                            real_main_key_title = real_main_key_title + '/' + real_main_key[w]
                        dict_value[real_main_key_title.strip('/')] = key__list_list
                elif type(real_main_key) == type(''):
                    real_main_key_index = key.index(real_main_key)
                    key__list = []
                    for q in range(len(value_list)):
                        for w in range(len(value_list[q])):
                            if w == real_main_key_index:
                                key__list.append(value_list[q][w].strip())
                                continue
                            else:
                                title = value_list[q][real_main_key_index].strip() + '/' + key[w].strip()
                                info = value_list[q][w].strip()
                                dict_value[title] = info
                        dict_value[real_main_key] = key__list
                    # print(main_key)
                    # print(key)
                    # print(value_list)
            ##多行key的情况
            elif index > 1:
                # key
                for m in range(len(key_info)):
                    num1 = 0
                    num2 = 0
                    key = []
                    for k in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][k] + num2
                        key.append(key_info[m][num1:num2])
                    key_list.append(key)
                # print(key_list)
                count_key_List = 0
                count_num = 0
                for h in range(len(key_list[0])):
                    count_key_List = count_key_List + 1
                real_key_list = []
                while 1:
                    real_key = ''
                    count_num = count_num + 1
                    if count_num > count_key_List:
                        break
                    else:
                        for f in range(len(key_list)):
                            key_in = key_list[f][count_num - 1]
                            real_key = real_key.strip() + key_in.strip()
                        # print(real_key)
                        real_key_list.append(real_key)
                        continue
                # print(real_key_list)
                # value
                for k in range(len(value_info)):
                    value = []
                    num1 = 0
                    num2 = 0
                    for l in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][l] + num2
                        value.append(value_info[k][num1:num2])
                    value_list.append(value)
                # 录入词典
                real_main_key = real_main_key_list[i]
                # print(real_main_key)
                if type(real_main_key) == type([]):
                    real_main_key_index = []
                    for l in range(len(real_main_key)):
                        real_main_key_index.append(real_key_list.index(real_main_key[l]))
                    # print(real_main_key_index)
                    key__list_list = []
                    for q in range(len(value_list)):
                        key__list = []
                        real_main_key_title = ''
                        for w in range(len(value_list[q])):
                            if w in real_main_key_index:
                                key__list.append(value_list[q][w].strip())
                                continue
                            else:
                                title1 = ''
                                for l in range(len(real_main_key_index)):
                                    title1 = title1 + '/' + value_list[q][real_main_key_index[l]].strip()
                                title2 = title1.strip('/') + '/' + real_key_list[w].strip()
                                info = value_list[q][w].strip()
                                dict_value[title2] = info
                        key__list_list.append(key__list)
                        for w in range(len(real_main_key)):
                            real_main_key_title = real_main_key_title + '/' + real_main_key[w]
                        dict_value[real_main_key_title.strip('/')] = key__list_list
                elif type(real_main_key) == type(''):
                    real_main_key_index = real_key_list.index(real_main_key)
                    print(real_main_key_index)
                    key__list = []
                    for q in range(len(value_list)):
                        for w in range(len(value_list[q])):
                            if w == real_main_key_index:
                                key__list.append(value_list[q][w].strip())
                                continue
                            else:
                                title = value_list[q][real_main_key_index].strip() + '/' + real_key_list[w].strip()
                                info = value_list[q][w].strip()
                                dict_value[title] = info
                        dict_value[real_main_key] = key__list
                    # print(key__list)
                    # print(real_main_key_index)
                    # print(real_key_list)
                    # print(value_list)

        return dict_value

    def dut_get_show_power(self, show_info):
        """
        Function:show power回显解析函数
        CLI命令:show power
        回显信息示例:
Ruijie#show power
Chassis-type: RG-S8605E
Power-redun: no
Energy-saving: off

power-id  power-type    supply(W)  status      vol-in/out(V)  cur-out(mA)  supply-out(W)
--------  ------------  ---------  ----------  -------------  -----------  -------------
1         RG-PA1600I    1600       ok          229   /11.966   6000         72
2         N/A           N/A        N/A         N/A   /N/A      N/A          N/A
POE       N/A           N/A        N/A         N/A   /N/A      N/A          N/A

slot    card_type                        status      require(W)  allocate(W)
------- -------------------------------- ----------  ----------  -----------
1       N/A                              N/A         N/A         N/A
2       N/A                              N/A         N/A         N/A
3       M8600E-24GT20SFP4XS-ED           power-on    100         100
M1      M18010-CM                        power-on    40          40
M2      N/A                              N/A         N/A         N/A

total-power(W) redundancy(W) available(W) card-used(W) fan-used(W) free-power(W)
-------------- ------------- ------------ ------------ ----------- --------------
1600           0             1600         180          288         1100

        Returns:
{'2/cur-out(mA)': 'N/A'
'M2/card_type': 'N/A'
'2/status': 'N/A'
'2/card_type': 'N/A'
'1/require(W)': 'N/A'
'total-power(W)': '1600'
'3/allocate(W)': '100'
'1/status': 'N/A'
'2/power-type': 'N/A'
'Energy-saving': 'off'
'POE/supply(W)': 'N/A'
'M1/card_type': 'M18010-CM'
'slot': ['1'
'2'
'3'
'M1'
'M2'], 'M1/status': 'power-on'
'power-id': ['1'
'2'
'POE'], '2/allocate(W)': 'N/A'
'2/vol-in/out(V)': 'N/A   /N/A'
'redundancy(W)': '0'
'M1/allocate(W)': '40'
'POE/status': 'N/A'
'1/allocate(W)': 'N/A'
'M2/status': 'N/A'
'M1/require(W)': '40'
'3/card_type': 'M8600E-24GT20SFP4XS-ED'
'free-power(W)': '1100'
'fan-used(W)': '288'
'POE/vol-in/out(V)': 'N/A   /N/A'
'3/require(W)': '100'
'1/cur-out(mA)': '6000'
'Chassis-type': 'RG-S8605E'
'1/vol-in/out(V)': '229   /11.966'
'M2/require(W)': 'N/A'
'available(W)': '1600'
'3/status': 'power-on'
'POE/power-type': 'N/A'
'2/supply(W)': 'N/A'
'POE/cur-out(mA)': 'N/A'
'2/require(W)': 'N/A'
'card-used(W)': '180'
'M2/allocate(W)': 'N/A'
'POE/supply-out(W)': 'N/A'
'1/power-type': 'RG-PA1600I'
'1/card_type': 'N/A'
'2/supply-out(W)': 'N/A'
'1/supply(W)': '1600'
'1/supply-out(W)': '72'
'Power-redun': 'no'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show power | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        if "Switch 2:" in show_info:
            show_info_list = self.dut_get_start_show_info(show_info)
            list_info_1 = []
            list_info_2 = []
            list_info_3 = []
            flag = 0
            for value in show_info_list:
                if "power-id " in value:
                    flag = 1
                elif "slot " in value:
                    flag = 2
                elif "redundancy" in value:
                    flag = 3
                if flag == 1:
                    list_info_1.append(value)
                elif flag == 2:
                    list_info_2.append(value)
                elif flag == 3:
                    list_info_3.append(value)
            info_1 = "\n".join(list_info_1)
            info_2 = "\n".join(list_info_2)
            info_3 = "\n".join(list_info_3)
            dict_value1 = self.dut_show_autoget_whippletree_form_analysis(info_1, "power-id")
            power_id_ok_list = []
            power_id_fail_list = []
            power_id_no_present_list = []
            for k, v in dict_value1.items():
                if re.match("(.*)/[sS]tatus", k):
                    pow_id = re.match("(.*)/[sS]tatus", k).group(1)
                    if v.strip().lower() == "ok":
                        power_id_ok_list.append(pow_id)
                    elif v.strip().lower() == "fail":
                        power_id_fail_list.append(pow_id)
                    elif v.strip().lower() == "no-present":
                        power_id_no_present_list.append(pow_id)
            dict_value1["power_id_ok_list"] = power_id_ok_list
            dict_value1["power_id_fail_list"] = power_id_fail_list
            dict_value1["power_id_no_present_list"] = power_id_no_present_list
            dict_value2 = self.dut_show_autoget_whippletree_form_analysis(info_2, "slot")
            dict_value3 = self.dut_show_autoget_whippletree_form_analysis(info_3, "switch")
            return dict(dict_value1.items() + dict_value2.items() + dict_value3.items())
        elif "Total_power" in show_info:
            show_info_list = self.dut_get_start_show_info(show_info)
            list_info_1 = []
            list_info_2 = []
            list_info_3 = []
            flag = 0
            for value in show_info_list:
                if "Power-id " in value:
                    flag = 1
                elif "slot " in value:
                    flag = 2
                elif "Dev" in value:
                    flag = 3
                if flag == 1:
                    list_info_1.append(value)
                elif flag == 2:
                    list_info_2.append(value)
                elif flag == 3:
                    list_info_3.append(value)
            info_1 = "\n".join(list_info_1)
            info_2 = "\n".join(list_info_2)
            info_3 = "\n".join(list_info_3)
            dict_value1 = self.dut_show_autoget_whippletree_form_analysis(info_1, "Power-id")
            power_id_ok_list = []
            power_id_fail_list = []
            power_id_no_present_list = []
            for k, v in dict_value1.items():
                if re.match("(.*)/[sS]tatus", k):
                    pow_id = re.match("(.*)/[sS]tatus", k).group(1)
                    if v.strip().lower() == "ok":
                        power_id_ok_list.append(pow_id)
                    elif v.strip().lower() == "fail":
                        power_id_fail_list.append(pow_id)
                    elif v.strip().lower() == "no-present":
                        power_id_no_present_list.append(pow_id)
            dict_value1["power_id_ok_list"] = power_id_ok_list
            dict_value1["power_id_fail_list"] = power_id_fail_list
            dict_value1["power_id_no_present_list"] = power_id_no_present_list

            dict_value2 = self.dut_show_autoget_whippletree_form_analysis(info_2, "slot")
            dict_value3 = self.dut_show_autoget_whippletree_form_analysis(info_3, "Dev")
            return dict(dict_value1.items() + dict_value2.items() + dict_value3.items())
        elif "Input" not in show_info and "Output" not in show_info and "slot" not in show_info:

            dict_value1 = self.dut_show_autoget_whippletree_form_analysis(show_info, "Power-id")
            power_id_ok_list = []
            power_id_fail_list = []
            power_id_no_present_list = []
            for k, v in dict_value1.items():
                if re.match("(.*)/[sS]tatus", k):
                    pow_id = re.match("(.*)/[sS]tatus", k).group(1)
                    if v.strip().lower() == "ok":
                        power_id_ok_list.append(pow_id)
                    elif v.strip().lower() == "fail":
                        power_id_fail_list.append(pow_id)
                    elif v.strip().lower() == "no-present":
                        power_id_no_present_list.append(pow_id)
            dict_value1["power_id_ok_list"] = power_id_ok_list
            dict_value1["power_id_fail_list"] = power_id_fail_list
            dict_value1["power_id_no_present_list"] = power_id_no_present_list
            return dict_value1
        elif "Chassis-type:" not in show_info and "Power-redun:" not in show_info:
            show_info_list = self.dut_get_start_show_info(show_info)
            list_info_1 = []
            list_info_2 = []
            flag = 0
            for value in show_info_list:
                if "Input" in value and "Output" in value:
                    flag = 1
                    continue
                elif "-------" in value:
                    continue
                elif flag == 0:
                    list_info_1.append(value)
                if "Power-id Power-type         Temperature Voltage(V) Curent(mA) Voltage(V) Curent(mA) Power(W)" in value:
                    value = "Power-id     Power-type   Temperature    Input Voltage(V)   Input Curent(mA)    Output Voltage(V)   Output Curent(mA)  Output Power(W)"
                if flag == 1:
                    list_info_2.append(value)
            info_1 = "\n".join(list_info_1)
            info_2 = "\n".join(list_info_2)
            dict_value1 = self.dut_show_autoget_blank_list(info_1, "Power-id", split_one=1)
            power_id_ok_list = []
            power_id_fail_list = []
            power_id_no_present_list = []
            for k, v in dict_value1.items():
                if re.match("(.*)/[sS]tatus", k):
                    pow_id = re.match("(.*)/[sS]tatus", k).group(1)
                    if v.strip().lower() == "ok":
                        power_id_ok_list.append(pow_id)
                    elif v.strip().lower() == "fail":
                        power_id_fail_list.append(pow_id)
                    elif v.strip().lower() == "no-present":
                        power_id_no_present_list.append(pow_id)
            dict_value1["power_id_ok_list"] = power_id_ok_list
            dict_value1["power_id_fail_list"] = power_id_fail_list
            dict_value1["power_id_no_present_list"] = power_id_no_present_list
            dict_value2 = self.dut_show_autoget_blank_list(info_2, "Power-id")
            return dict(dict_value1.items() + dict_value2.items())
        else:
            show_info_list = self.dut_get_start_show_info(show_info)
            list_info_1 = []
            list_info_2 = []
            list_info_3 = []
            flag = 0
            for value in show_info_list:
                if "power-id " in value:
                    flag = 1
                elif "slot " in value:
                    flag = 2
                elif "total-power(W)" in value:
                    flag = 3
                if flag == 1:
                    list_info_1.append(value)
                elif flag == 2:
                    list_info_2.append(value)
                elif flag == 3:
                    list_info_3.append(value)
            info_1 = "\n".join(list_info_1)
            info_2 = "\n".join(list_info_2)
            info_3 = "\n".join(list_info_3)
            dict_value1 = self.dut_show_autoget_whippletree_form_analysis(info_1, "power-id")
            power_id_ok_list = []
            power_id_fail_list = []
            power_id_no_present_list = []
            power_id_list = []
            dict_value4 = {}
            for k, v in dict_value1.items():
                if "status" in k:
                    dict_value4["power-id/" + k] = v
            for k, v in dict_value1.items():
                if re.match("(.*)/[sS]tatus", k):
                    pow_id = re.match("(.*)/[sS]tatus", k).group(1)
                    if v.strip().lower() == "ok":
                        power_id_ok_list.append(pow_id)
                    elif v.strip().lower() == "fail":
                        power_id_fail_list.append(pow_id)
                    elif v.strip().lower() == "no-present":
                        power_id_no_present_list.append(pow_id)
                elif "power-id_list" == k:
                    power_id_list = v

            dict_value1["power-id"] = power_id_list
            dict_value1["power_id_ok_list"] = power_id_ok_list
            dict_value1["power_id_fail_list"] = power_id_fail_list
            dict_value1["power_id_no_present_list"] = power_id_no_present_list
            dict_value2 = self.dut_show_autoget_whippletree_form_analysis(info_2, "slot")
            dict_value3 = {}
            if len(list_info_3) == 3:
                list_1 = list_info_3[0].strip().split()
                list_2 = list_info_3[2].strip().split()
                if len(list_1) == len(list_2):
                    for i in range(len(list_1)):
                        dict_value3[list_1[i]] = list_2[i]
            for list_value in show_info_list:
                if re.match(".*:.*", list_value):
                    list_value_split = list_value.split(":", 1)  # 以冒号分割一次
                    key_name = '%s' % (list_value_split[0].lstrip().rstrip().replace("\r", ""))
                    dict_value1[key_name] = list_value_split[1].lstrip().rstrip().replace("\r", "")
            return dict(dict_value1.items() + dict_value2.items() + dict_value3.items() + dict_value4.items())
    def dut_get_show_ipv6_dhcp_binding(self, show_info):  # 函数名由锐捷提供
        """
        Function:show ipv6 dhcp binding回显解析函数
        CLI命令:show ipv6 dhcp binding
        回显信息示例:
Ruijie(config)#show ipv6 dhcp binding
Client  DUID: 00:03:00:01:58:69:21:34:77:1a
  IANA: iaid 100001, T1 43200, T2 69120
    Address: 3000::2
            preferred lifetime 86400, valid lifetime 86400
        expires at Jan 6 2018 6:16 (83717 seconds)
Ruijie(config)#

        Returns:
{'00:03:00:01:58:69:21:34:77:1a/valid lifetime': '86400'
'client_list': ['00:03:00:01:58:69:21:34:77:1a'], '00:03:00:01:58:69:21:34:77:1a/preferred lifetime': '86400'
'00:03:00:01:58:69:21:34:77:1a/IANA': 'iaid 100001, T1 43200, T2 69120'
'00:03:00:01:58:69:21:34:77:1a/Address': '3000::2'
'00:03:00:01:58:69:21:34:77:1a/expires at': 'Jan 6 2018 6:16 (83717 seconds)'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 dhcp binding | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        # ==========================================
        # value_title定义主键的id，即列表中的唯一值
        # ==========================================
        value_title = "Client  DUID"
        sub_value_title1 = "preferred lifetime"
        sub_value_title2 = "valid lifetime"
        sub_value_title3 = "expires at"
        length_list = []
        dict_value = {}

        # =======================================================================================
        # 用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        # =======================================================================================
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        length = len(dut_info_split)

        # =====================================================
        # 删除dut_info_split中空字符所在行
        # =====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        length = len(dut_info_split)
        # #print(dut_info_split)

        # ======================================================================
        # 判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        # ======================================================================
        length_list = [64]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        ##print dut_info_split

        # ======================================================================
        # #创建空列表用于保存主键内容
        # ======================================================================
        client_list = []

        # ======================================================================
        # #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        # ======================================================================
        for i in range(length):
            sight = 0
            sight_sum = 0
            list_len = []
            # 每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum + int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            # 获取表头，用于组合
            if value_title in list_len[0]:
                index = list_len[0].find(':')
                pool_name = list_len[0][(index + 1):].lstrip()
                title = pool_name
                client_list.append(str(pool_name))

            else:
                # 生成字典

                index = list_len[0].find(':')
                if index != -1 and re.match('.*(expires at)(.*)', list_len[0]):
                    mainobj = re.match('.*(expires at)(.*)', list_len[0])
                    key_name = title + '/' + mainobj.group(1).strip()
                    key_value = mainobj.group(2).strip()
                    dict_value[key_name] = key_value
                elif index != -1:
                    sub_key = list_len[0].rstrip()
                    sub_key = sub_key[0:index]
                    for s in range(0, length_list_len):
                        # 将主键与表名以/分隔组合成为字典的key
                        key_name = '%s/%s' % (title, sub_key)
                        # print(key_name)
                        dict_value[key_name] = list_len[0][(index + 1):].lstrip()
                else:
                    #     #将主键与表名以/分隔组合成为字典的key
                    if sub_value_title1 in list_len[0]:
                        temp_str1 = list_len[0]
                        temp_str2 = list_len[0]
                        key_name = '%s/%s' % (title, sub_value_title1)
                        key_value = temp_str1.split(',')[0].split(sub_value_title1)[1].lstrip().rstrip()
                        dict_value[key_name] = key_value
                        key_name = '%s/%s' % (title, sub_value_title2)
                        key_value = temp_str2.split(sub_value_title2)[1].lstrip().rstrip()
                        dict_value[key_name] = key_value
                    if sub_value_title3 in list_len[0]:
                        key_name = '%s/%s' % (title, sub_value_title3)
                        key_value = list_len[0].split(sub_value_title3)[1].lstrip().rstrip()
                        dict_value[key_name] = key_value
            # 将保存有主键值的列表以port_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value["client_list"] = client_list
        return dict_value
    def dut_get_show_tcp_connect(self,show_info):
        """
        Function:show tcp connect回显解析函数
        CLI命令:show tcp connect
        回显信息示例:
Ruijie#show tcp connect
Number Local Address         Foreign Address       State         Process name    
1      0.0.0.0:22            0.0.0.0:0             LISTEN        rg-sshd         
2      0.0.0.0:23            0.0.0.0:0             LISTEN        rg-telnetd      
3      0.0.0.0:3333          0.0.0.0:0             LISTEN        postgres        
4      0.0.0.0:4389          0.0.0.0:0             LISTEN        wbard_0         
5      0.0.0.0:7165          0.0.0.0:0             LISTEN        wbard_0         
6      0.0.0.0:7547          0.0.0.0:0             LISTEN        cwmp_gsoap.elf  
7      127.0.0.1:3333        127.0.0.1:40407       ESTABLISHED   postgres        
8      127.0.0.1:3333        127.0.0.1:40408       ESTABLISHED   postgres        
9      127.0.0.1:40407       127.0.0.1:3333        ESTABLISHED   ssc_nacm_serv_t 
10     127.0.0.1:40408       127.0.0.1:3333        ESTABLISHED   nacm_flow_threa 
11     140.206.78.16:80      5.0.0.2:5231          FIN_WAIT2     wbard_0         
12     172.18.7.27:23        192.168.231.64:53398  ESTABLISHED   rg-telnetd

        Returns:
{'0.0.0.0:7165/0.0.0.0:0/State': 'LISTEN'
'0.0.0.0:22/0.0.0.0:0/State': 'LISTEN'
'Local_address_List': ['0.0.0.0:22/0.0.0.0:0'
'0.0.0.0:23/0.0.0.0:0'
'0.0.0.0:3333/0.0.0.0:0'
'0.0.0.0:4389/0.0.0.0:0'
'0.0.0.0:7165/0.0.0.0:0'
'0.0.0.0:7547/0.0.0.0:0'
'127.0.0.1:3333/127.0.0.1:40407'
'127.0.0.1:3333/127.0.0.1:40408'
'127.0.0.1:40407/127.0.0.1:3333'
'127.0.0.1:40408/127.0.0.1:3333'
'140.206.78.16:80/5.0.0.2:5231'
'172.18.7.27:23/192.168.231.64:53398'], '127.0.0.1:40408/127.0.0.1:3333/Number': '10'
'127.0.0.1:3333/127.0.0.1:40408/State': 'ESTABLISHED'
'0.0.0.0:4389/0.0.0.0:0/Process name': 'wbard_0'
'127.0.0.1:40407/127.0.0.1:3333/Process name': 'ssc_nacm_serv_t'
'127.0.0.1:40408/127.0.0.1:3333/State': 'ESTABLISHED'
'0.0.0.0:7547/0.0.0.0:0/Process name': 'cwmp_gsoap.elf'
'127.0.0.1:3333/127.0.0.1:40408/Number': '8'
'0.0.0.0:7165/0.0.0.0:0/Number': '5'
'127.0.0.1:3333/127.0.0.1:40407/Number': '7'
'0.0.0.0:23/0.0.0.0:0/State': 'LISTEN'
'0.0.0.0:7547/0.0.0.0:0/Number': '6'
'172.18.7.27:23/192.168.231.64:53398/Number': '12'
'0.0.0.0:3333/0.0.0.0:0/Process name': 'postgres'
'127.0.0.1:3333/127.0.0.1:40407/State': 'ESTABLISHED'
'127.0.0.1:40407/127.0.0.1:3333/State': 'ESTABLISHED'
'0.0.0.0:3333/0.0.0.0:0/Number': '3'
'0.0.0.0:23/0.0.0.0:0/Number': '2'
'140.206.78.16:80/5.0.0.2:5231/Number': '11'
'0.0.0.0:23/0.0.0.0:0/Process name': 'rg-telnetd'
'0.0.0.0:7547/0.0.0.0:0/State': 'LISTEN'
'127.0.0.1:40408/127.0.0.1:3333/Process name': 'nacm_flow_threa'
'0.0.0.0:7165/0.0.0.0:0/Process name': 'wbard_0'
'172.18.7.27:23/192.168.231.64:53398/Process name': 'rg-telnetd'
'140.206.78.16:80/5.0.0.2:5231/Process name': 'wbard_0'
'172.18.7.27:23/192.168.231.64:53398/State': 'ESTABLISHED'
'0.0.0.0:22/0.0.0.0:0/Number': '1'
'127.0.0.1:3333/127.0.0.1:40408/Process name': 'postgres'
'127.0.0.1:40407/127.0.0.1:3333/Number': '9'
'127.0.0.1:3333/127.0.0.1:40407/Process name': 'postgres'
'0.0.0.0:4389/0.0.0.0:0/State': 'LISTEN'
'140.206.78.16:80/5.0.0.2:5231/State': 'FIN_WAIT2'
'0.0.0.0:4389/0.0.0.0:0/Number': '4'
'0.0.0.0:3333/0.0.0.0:0/State': 'LISTEN'
'0.0.0.0:22/0.0.0.0:0/Process name': 'rg-sshd'
'Total': 12}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show tcp connect | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """


        Number_Local_Address_list = []
        dict_value = {}
        title1='Number'
        title2='Local Address'
        title3='Foreign Address'
        title4='State'
        title5='Process name'
        title6='VRF name'

        show_info_split = show_info.split("\n")
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        show_info_split.remove(show_info_split[0])
        dut_info_split = show_info_split

        #去掉dut_info_split中的空值以及只包含空格符的值
        for i in dut_info_split:
            if ''in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' 'in dut_info_split:
                dut_info_split.remove(' ')
        for i in range(len(dut_info_split)):
            dut_info_split[i]=dut_info_split[i].strip(' ')

        if len(dut_info_split)==0:
            print('data is null')
        Local_address_List=[]
        for i in range(len(dut_info_split)):
            info_list = []
            info = dut_info_split[i]
            b = len(info)
            data=''
            for j in range(b):
                if info[j]!=' ':
                    data=data+info[j]
                    if j+1==b:
                        info_list.append(data)
                        break
                    elif info[j+1]==' ':
                        info_list.append(data)
                        data=''
                        continue
            Number_Local_Address_list.append(info_list[0] )
            M_title=info_list[1]+'/'+info_list[2]
            Local_address_List.append(M_title)
            info_list.remove(info_list[1])
            info_list.remove(info_list[1])
            new_info_list=info_list
            #print(new_info_list)
            new_title2=  M_title + '/' + title1
            #new_title3 = M_title + '/' + title3
            new_title4 = M_title + '/' + title4
            new_title5 = M_title + '/' + title5
            new_title6 = M_title + '/' + title6
            new_title_list = []
            new_title_list.append(new_title2)
            #new_title_list.append(new_title3)
            new_title_list.append(new_title4)
            new_title_list.append(new_title5)
            new_title_list.append(new_title6)
            for k in range(len(new_info_list)):
                dict_value[new_title_list[k]]=new_info_list[k]
            dict_value['Local_address_List']=Local_address_List
            dict_value['Total']=len(Local_address_List)
        return dict_value
    def dut_get_show_temperature(self,show_info):
        """
        Function:show temperature回显解析函数
        CLI命令:show temperature
        回显信息示例:
Ruijie#show temperature 
Chassis-type: RG-S8605E
slot    card_type                        warning(C)  shutdown(C)     current(C)
------- -------------------------------- ----------  --------------  -----------------------------------
1       N/A                              N/A         N/A             N/A
2       N/A                              N/A         N/A             N/A
3       M8600E-24GT20SFP4XS-ED           56          100 |100        28|29|32|29|44|47
M1      M18010-CM                        56          100 |100        22|31|25|31|36
M2      N/A                              N/A         N/A             N/A
Ruijie#

        Returns:
{'M2/card_type': 'N/A'
'M2/shutdown(C)': 'N/A'
'2/card_type': 'N/A'
'3/shutdown(C)': '100 |100'
'1/current(C)': 'N/A'
'slot': ['1'
'2'
'3'
'M1'
'M2'], '2/warning(C)': 'N/A'
'3/warning(C)': '56'
'M2/warning(C)': 'N/A'
'2/current(C)': 'N/A'
'3/current(C)': '28|29|32|29|44|47'
'3/card_type': 'M8600E-24GT20SFP4XS-ED'
'M1/warning(C)': '56'
'2/shutdown(C)': 'N/A'
'M1/current(C)': '22|31|25|31|36'
'Chassis-type': 'RG-S8605E'
'1/shutdown(C)': 'N/A'
'M2/current(C)': 'N/A'
'M1/card_type': 'M18010-CM'
'M1/shutdown(C)': '100 |100'
'1/card_type': 'N/A'
'1/warning(C)': 'N/A'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show temperature | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        if "Temp_name" in show_info:
            show_info_list = show_info.split("\n")
            list1 = []
            for value in show_info_list:
                if "(Celsius)" in value or "--------------" in value:
                    pass
                else:
                    list1.append(value)
            show_info = "\n".join(list1)
            return self.dut_show_autoget_blank_list(show_info,"Slot",value_title_2="Temp_name")
        show_info = show_info
        main_key = ['slot']
        real_main_key = ['slot']
        result=self.dut_split_whippletree(show_info,main_key,real_main_key)
        dict_value=result[0]
        info=result[1]
        # for i in info:
        #     print(i)
        ########若有多余info，进行解析
        ##判定若有多余info 进行解析
        if len(info)!=0:
            for list_value in info:
                if re.match(".*:.*",list_value) :
                    list_value_split = list_value.split (":",1)   #以冒号分割一次
                    key_name = '%s'%(list_value_split[0].lstrip().rstrip().replace("\r",""))
                    dict_value[key_name] = list_value_split[1].lstrip().rstrip().replace("\r","")
        ########
        return dict_value
    def dut_get_show_fan(self,show_info):
        """
        Function:show fan回显解析函数
        CLI命令:show fan
        回显信息示例:
Ruijie#show fan
Chassis-type: RG-S8605E
Fan-id: 1
    Fan-type:       N/A
    Serial Number:                    

fan-id  status      mode      speed-level
------  ----------  --------  -----------
1       ok          normal    N/A
Ruijie#

        Returns:
{'1/speed-level': 'N/A'
'fan-id_list': ['1'
'Ruijie#'], 'Ruijie#/speed-level': ''
'Ruijie#/status': ''
' 1/Fan-type': 'N/A'
'1/status': 'ok'
' 1/Serial Number': ''
'Chassis-type': 'RG-S8605E'
'1/mode': 'normal'
'Ruijie#/mode': ''}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show fan | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        dict_value3 = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        key1 = ""
        for value in show_info_list:
            if "Fan-id:" in value:
                key1 = value.split(":")[1].strip()
            elif ":" in value:
                list2 = value.split(":")
                if key1 == "":
                    dict_value[list2[0].strip()] = list2[1].strip()
                else:
                    dict_value[key1 + "/" + list2[0].strip()] = list2[1].strip()
            elif "fan-id" in value:
                break
        if "Fan id" in show_info:
            dict_value2 = self.dut_show_autoget_whippletree_form_analysis(show_info, "Fan id")
        else:
            dict_value2 = self.dut_show_autoget_whippletree_form_analysis(show_info, "fan-id")
        dict_value3 = dict(dict_value.items() + dict_value2.items())
        dict_value4 = {}
        status_ok_list = []
        for k in sorted(dict_value3):
            if "/status" in k and dict_value3[k].lower() == "ok":
                status_ok_list.append(str(k).split("/status")[0])
            elif "/Status" in k and dict_value3[k].lower() == "ok":
                status_ok_list.append(str(k).split("/Status")[0])
            dict_value4[k] = dict_value3[k]
        dict_value4["status_ok_list"] = status_ok_list
        return dict_value4
    def dut_get_show_fan_detail(self,show_info):
        """
        Function:show fan detail回显解析函数
        CLI命令:show fan detail
        回显信息示例:
Ruijie#show fan detail
Switch 1: RG-S7808C
Switch 2: RG-S7808C
Fan-id: 1/1    
    Fan-type:       M08-FAN
    Serial Number:  G1M5051001345                   
    Status:         ok
    Mode:           normal

    sub-fan-id  status  speed(rpm)  speed-level
    ----------  ------  ----------  ----------
    1           ok      2250        15
    2           ok      2250        15
Fan-id: 1/2    
    Fan-type:       M08-FAN
    Serial Number:  G1M5051001303                   
    Status:         ok
    Mode:           normal

    sub-fan-id  status  speed(rpm)  speed-level
    ----------  ------  ----------  ----------
    1           ok      2250        15
    2           ok      2100        14
Fan-id: 2/1    
    Fan-type:       M08-FAN
    Serial Number:  G1KA1AA00124C                   
    Status:         ok
    Mode:           normal

    sub-fan-id  status  speed(rpm)  speed-level
    ----------  ------  ----------  ----------
    1           ok      2250        15
    2           ok      2250        15
Fan-id: 2/2    
    Fan-type:       M08-FAN
    Serial Number:  G1KA1AA00122B                   
    Status:         ok
    Mode:           normal

    sub-fan-id  status  speed(rpm)  speed-level
    ----------  ------  ----------  ----------
    1           ok      2250        15
    2           ok      2250        15

        Returns:
{"1/1/2/speed-level": "15"
"2/2/sub-fan-id_list": ["2/2/1"
"2/2/2"], "1/2/2/speed-level": "14"
"2/2/Status": "ok"
"2/2/1/speed-level": "15"
"2/2/Serial Number": "G1KA1AA00122B"
"1/1/Status": "ok"
"2/1/1/speed-level": "15"
"2/2/Mode": "normal"
"2/1/1/speed(rpm)": "2250"
"2/1/sub-fan-id_list": ["2/1/1"
"2/1/2"], "1/1/1/speed-level": "15"
"1/1/2/status": "ok"
"1/2/2/status": "ok"
"Switch 1": "RG-S7808C"
"Switch 2": "RG-S7808C"
"1/1/1/speed(rpm)": "2250"
"2/2/Fan-type": "M08-FAN"
"1/2/Status": "ok"
"2/2/1/status": "ok"
"1/2/2/speed(rpm)": "2100"
"1/2/Serial Number": "G1M5051001303"
"1/1/1/status": "ok"
"1/1/Mode": "normal"
"2/1/2/speed-level": "15"
"2/2/2/speed(rpm)": "2250"
"Fan-id_list": ["1/1"
"1/2"
"2/1"
"2/2"], "1/2/sub-fan-id_list": ["1/2/1"
"1/2/2"], "2/1/Mode": "normal"
"1/1/Serial Number": "G1M5051001345"
"1/1/sub-fan-id_list": ["1/1/1"
"1/1/2"], "2/1/Serial Number": "G1KA1AA00124C"
"1/1/2/speed(rpm)": "2250"
"1/2/1/status": "ok"
"1/2/Mode": "normal"
"1/2/1/speed(rpm)": "2250"
"1/1/Fan-type": "M08-FAN"
"2/1/Status": "ok"
"2/1/1/status": "ok"
"2/1/Fan-type": "M08-FAN"
"1/2/Fan-type": "M08-FAN"
"2/2/2/speed-level": "15"
"2/1/2/speed(rpm)": "2250"
"2/1/2/status": "ok"
"1/2/1/speed-level": "15"
"2/2/1/speed(rpm)": "2250"
"2/2/2/status": "ok"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show fan detail | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        show_info_list = self.dut_get_start_show_info(show_info)
        flag = 0
        Fan_id_list = []
        for value in show_info_list:
            if "Fan-id:" in value:
                if flag == 1:
                    show_info_1 = "\n".join(show_list)
                    dict_value0 = self.dut_show_autoget_blank_list(show_info_1,"sub-fan-id",ago_value_title=key1)
                    dict_value = dict(dict_value.items()+dict_value0.items())
                key1 = value.split(":")[1].strip()
                Fan_id_list.append(key1.decode("utf-8"))
                show_list =[]
                flag = 1
            elif ":" in value:
                list2 = value.split(":")
                if "Chassis-type:" in value or re.match("Switch \d+:.*",value):
                    dict_value[list2[0].strip()] =list2[1].strip()
                else:
                    dict_value[key1+"/"+list2[0].strip()] =list2[1].strip()
            else:
                show_list.append(value)
        show_info_1 = "\n".join(show_list)
        dict_value["Fan-id_list"] = Fan_id_list
        dict_value1 = self.dut_show_autoget_blank_list(show_info_1,"sub-fan-id",ago_value_title=key1)
        return dict(dict(dict_value.items()+dict_value1.items()))
    def dut_get_show_dot1x_staticipseg(self,show_info):
        """
        Function:show dot1x static-ip-seg回显解析函数
        CLI命令:show dot1x static-ip-seg
        回显信息示例:
Ruijie(config)#show dot1x static-ip-seg 
No.  IP address     Subnet mask   
--- -------------- -------------- 
1          1.1.1.1  255.255.255.0 
Ruijie(config)#

        Returns:
{'1/Subnet mask': '255.255.255.0'
'No.': ['1'
'Ruij'], '1/IP address': '1.1.1.1'
'Ruij/IP address': 'ie(config)#'
'Ruij/Subnet mask': ''}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show dot1x static-ip-seg | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info = show_info
        main_key = ['no.']
        real_main_key = ['no.']
        result=self.dut_split_whippletree(show_info,main_key,real_main_key)
        dict_value=result[0]
        start_info=result[1]
        end_info=result[2]
        # for i in info:
        #     print(i)
        ########若有多余info，进行解析
        ##判定若有多余info 进行解析

        ########
        return dict_value

    def dut_get_show_snooping_option82dot1x(self,show_info):
        """
        Function:show snooping option82-dot1x回显解析函数
        CLI命令:show snooping option82-dot1x
        回显信息示例:
Ruijie#show snooping option82-dot1x 
NO.   IFX   VID     MAC                PRIVILEGE  WORK            INTERFACE                
----- ----- ------- ------------------ ---------- --------------- -------------------------
1     6     22      1000.0600.0001     111        valid           GigabitEthernet 2/5/6    
2     5     21      1000.0500.0001     0          valid           GigabitEthernet 2/5/5

        Returns:
{'1000.0500.0001/IFX': '5'
'1000.0600.0001/NO.': '1'
'1000.0600.0001/INTERFACE': 'GigabitEthernet 2/5/6'
'1000.0600.0001/IFX': '6'
'1000.0500.0001/PRIVILEGE': '0'
'1000.0600.0001/WORK': 'valid'
'1000.0500.0001/WORK': 'valid'
'1000.0600.0001/PRIVILEGE': '111'
'MAC': ['1000.0600.0001'
'1000.0500.0001'], '1000.0500.0001/VID': '21'
'1000.0500.0001/NO.': '2'
'1000.0600.0001/VID': '22'
'1000.0500.0001/INTERFACE': 'GigabitEthernet 2/5/5'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show snooping option82-dot1x | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info = show_info
        main_key = ['MAC']
        real_main_key = ['MAC']
        result=self.dut_split_whippletree(show_info,main_key,real_main_key)
        dict_value=result[0]
        start_info=result[1]
        end_info=result[2]
        # for i in info:
        #     print(i)
        ########若有多余info，进行解析
        ##判定若有多余info 进行解析

        ########
        return dict_value
    def dut_get_show_logging(self,show_info):
        """
        Function:show logging回显解析函数
        CLI命令:show logging
        回显信息示例:


        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show logging | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        # 创建字典
        dict_value = {}

        # 按行读取信息，并清除空值清除无用信息头信息尾数据
        show_info_split = show_info.split("\n")
        if re.match(r'.*Ruijie.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*Ruijie.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        # print(show_info_split)
        # （去掉dut_info_split中的空值以及只包含空格符的值）
        for i in dut_info_split:
            if '' in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' ' in dut_info_split:
                dut_info_split.remove(' ')
        for i in range(len(dut_info_split)):
            dut_info_split[i] = dut_info_split[i]
        #print(dut_info_split)

        messages_count=0
        for i  in range(len(dut_info_split)):
            if re.match('.*Buffer logging.*:.*\d+ messages logged.*',dut_info_split[i]):
                mainobj=re.match('.*Buffer logging.*:.*,(.*) messages logged.*',dut_info_split[i])
                messages_count=mainobj.group(1).strip()

        return messages_count
    def dut_get_show_ipv6_interface_brief(self,show_info):
        """
        Function:show ipv6 interface brief回显解析函数
        CLI命令:show ipv6 interface brief
        回显信息示例:
Ruijie#show ipv6 interface brief

GigabitEthernet 0/1           [up/up]
 2001::1
 FE80::2D0:F8FF:FE22:3553

        Returns:
{"GigabitEthernet 0/1": "2001::1"
"GigabitEthernet 0/1/link": "FE80::2D0:F8FF:FE22:3553"
"GigabitEthernet 0/1/status": "up/up"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 interface brief | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        # 创建字典
        dict_value = {}

        # 按行读取信息，并清除空值清除无用信息头信息尾数据
        show_info_split = show_info.split("\n")
        if re.match(r'.*Ruijie.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*Ruijie.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        # print(show_info_split)
        # （去掉dut_info_split中的空值以及只包含空格符的值）
        for i in dut_info_split:
            if '' in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' ' in dut_info_split:
                dut_info_split.remove(' ')
        for i in range(len(dut_info_split)):
            dut_info_split[i] = dut_info_split[i]
        #print(dut_info_split)

        port_types = ['TenGigabitEthernet', 'GigabitEthernet', 'FastEthernet','Loopback']

        cut_index=[]
        table_list=[]
        for i in range(len(dut_info_split)):
            for k in port_types:
                if re.match('.*'+k+'.*',dut_info_split[i]):
                    cut_index.append(i)
                    break

        for i in range(len(cut_index)):
            if i == len(cut_index) - 1:
                table = dut_info_split[cut_index[i]:]
            else:
                table = dut_info_split[cut_index[i]:cut_index[i + 1]]
            table_list.append(table)
        #print(table_list)
        for i in range(len(table_list)):
            title=''
            for k in range(len(table_list[i])):
                if re.match('.*\s+\[.*\]',table_list[i][k]):
                    mainobj=re.match('(.*)\s+\[(.*)\]',table_list[i][k])
                    title=mainobj.group(1).strip()
                    dict_value[title+'/status']=mainobj.group(2).strip()
            dict_value[title]=table_list[i][1].strip()
            dict_value[title+'/link']=table_list[i][2].strip()

        return dict_value

    def dut_get_show_ip_route_vrf_word(self, show_info):  # 定义函数，函数名由锐捷提供
        """
        Function:show ip route vrf (word)回显解析函数
        CLI命令:show ip route vrf (word)
        回显信息示例:
DUT1#show ip route vrf (vrf1)
Routing Table: vrf1

Codes:  C - Connected, L - Local, S - Static
        R - RIP, O - OSPF, B - BGP, I - IS-IS, V - Overflow route
        N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
        E1 - OSPF external type 1, E2 - OSPF external type 2
        SU - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2
        IA - Inter area, EV - BGP EVPN, A - Arp to host
        LA - Local aggregate route
        * - candidate default

Gateway of last resort is no set
C     30.0.0.0/8 is directly connected, OverlayRouter 30
C     30.1.1.1/32 is local host.
B EV  30.2.1.2/32 [20/0] via 2.2.2.2, 00:01:39, OverlayRouter 600
C     40.0.0.0/8 is directly connected, OverlayRouter 40
C     40.1.1.1/32 is local host.

        Returns:
{"30.1.1.1/32/Codes": "C"
"30.2.1.2/32/interface": "OverlayRouter 600"
"40.0.0.0/8/status": "directly connected"
"30.2.1.2/32/Codes": "B,EV"
"30.2.1.2/32/via": "2.2.2.2"
"40.1.1.1/32/Codes": "C"
"30.1.1.1/32/status": "local host"
"30.0.0.0/8/interface": "OverlayRouter 30"
"Routing Table": "vrf1"
"40.0.0.0/8/Codes": "C"
"40.1.1.1/32/status": "local host"
"30.0.0.0/8/status": "directly connected"
"40.0.0.0/8/interface": "OverlayRouter 40"
"30.2.1.2/32/mea": "0"
"30.2.1.2/32/pri": "20"
"addr_list": ["30.0.0.0/8/C"
"30.1.1.1/32/C"
"30.2.1.2/32/B,EV"
"40.0.0.0/8/C"
"40.1.1.1/32/C"], "30.0.0.0/8/Codes": "C"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip route vrf (word) | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        dict_value1 = {}

        # 按行读取信息，并清除空值清除无用信息头信息尾数据
        dut_info_split = self.dut_get_start_show_info(show_info)
        bsid_list = []
        ip_tmp = ""
        for i in range(len(dut_info_split)):
            value = dut_info_split[i]
            if 'Routing Table' in dut_info_split[i]:
                list_table = dut_info_split[i].split(":")
                dict_value1[list_table[0].strip()] = list_table[1].strip()
            if re.match("(.*)\s{1,}(\d+\.\d+\.\d+\.\d+/\d+.*)via (\S+), \d+:\d+:\d+, ssid (\S+), bsid (\S+)",value.strip()):
                obj_0 = re.match("(.*)\s{1,}(\d+\.\d+\.\d+\.\d+/\d+.*)via (\S+), \d+:\d+:\d+, ssid (\S+), bsid (\S+)",value.strip())
                code = obj_0.group(1).strip()
                ip = obj_0.group(2).strip()
                via = obj_0.group(3).strip()
                ssid = obj_0.group(4).strip()
                bsid = obj_0.group(5).strip()
                dict_value1[ip + "/code"] = code
                dict_value1[ip + "/via"] = via
                dict_value1[ip + "/ssid"] = ssid
                dict_value1[ip + "/bsid"] = bsid
            elif re.match("(.*)\s{1,}(\d+\.\d+\.\d+\.\d+/\d+.*)via (\S+), ssid (\S+), bsid (\S+), \d+:\d+:\d+",value.strip()):
                obj_0 = re.match("(.*)\s{1,}(\d+\.\d+\.\d+\.\d+/\d+.*)via (\S+), ssid (\S+), bsid (\S+), \d+:\d+:\d+",value.strip())
                code = obj_0.group(1).strip()
                ip = obj_0.group(2).strip()
                via = obj_0.group(3).strip()
                ssid = obj_0.group(4).strip()
                bsid = obj_0.group(5).strip()
                dict_value1[ip + "/code"] = code
                dict_value1[ip + "/via"] = via
                dict_value1[ip + "/ssid"] = ssid
                dict_value1[ip + "/bsid"] = bsid
            elif re.match("(\[.*\]) via (\S+), \d+:\d+:\d+, ssid (\S+), bsid (\S+)", value.strip()):
                obj_0_0 = re.match("(\[.*\]) via (\S+), \d+:\d+:\d+, ssid (\S+), bsid (\S+)", value.strip())
                via = obj_0_0.group(2).strip()
                ssid = obj_0_0.group(3).strip()
                bsid = obj_0_0.group(4).strip()
                dict_value1[ip + "/" + obj_0_0.group(1).strip() + "/via"] = via
                dict_value1[ip + "/" + obj_0_0.group(1).strip() + "/ssid"] = ssid
                dict_value1[ip + "/" + obj_0_0.group(1).strip() + "/bsid"] = bsid
            elif re.match("(\[.*\]) via (\S+), ssid (\S+), bsid (\S+), \d+:\d+:\d+", value.strip()):
                obj_0_0 = re.match("(\[.*\]) via (\S+), ssid (\S+), bsid (\S+), \d+:\d+:\d+", value.strip())
                via = obj_0_0.group(2).strip()
                ssid = obj_0_0.group(3).strip()
                bsid = obj_0_0.group(4).strip()
                dict_value1[ip + "/" + obj_0_0.group(1).strip() + "/via"] = via
                dict_value1[ip + "/" + obj_0_0.group(1).strip() + "/ssid"] = ssid
                dict_value1[ip + "/" + obj_0_0.group(1).strip() + "/bsid"] = bsid
            elif re.match("(.*)\s{1,}(\d+\.\d+\.\d+\.\d+/\d+.*)via (\S+), \d+:\d+:\d+, ssid (\S+),", value.strip()):
                obj_0 = re.match("(.*)\s{1,}(\d+\.\d+\.\d+\.\d+/\d+.*)via (\S+), \d+:\d+:\d+, ssid (\S+),",
                                 value.strip())
                code = obj_0.group(1).strip()
                ip = obj_0.group(2).strip()
                via = obj_0.group(3).strip()
                ssid = obj_0.group(4).strip()
                if len(bsid_list) > 0:
                    dict_value1[ip_tmp + "/bsid_list"] = bsid_list
                ip_tmp = ip
                dict_value1[ip + "/code"] = code
                dict_value1[ip + "/via"] = via
                dict_value1[ip + "/ssid"] = ssid
            elif re.match("(\[.*\]) via (\S+), \d+:\d+:\d+, ssid (\S+),", value.strip()):
                obj_0_0 = re.match("(\[.*\]) via (\S+), \d+:\d+:\d+, ssid (\S+),", value.strip())
                via = obj_0_0.group(2).strip()
                ssid = obj_0_0.group(3).strip()
                if len(bsid_list) > 0:
                    dict_value1[ip_tmp + "/bsid_list"] = bsid_list
                ip_tmp = ip_tmp + "/" + obj_0_0.group(1).strip()

                dict_value1[ip + "/" + obj_0_0.group(1).strip() + "/via"] = via
                dict_value1[ip + "/" + obj_0_0.group(1).strip() + "/ssid"] = ssid

            elif re.match("bsid (.*)", value.strip()):
                obj = re.match("bsid (.*)", value.strip())
                bsid_list = []
                bisd_value = obj.group(1).strip()
                bsid_list_tmp = bisd_value.split(",")
                for bsid_list_tmp_value in bsid_list_tmp:
                    if bsid_list_tmp_value.strip() == "":
                        continue
                    bsid_list.append(bsid_list_tmp_value.strip())
                continue
            elif re.match("\S+\,.*", value.strip()) or re.match("\S+\Z", value.strip()):
                if len(bsid_list) >= 3:
                    bsid_list_tmp = value.strip().split(",")
                    for bsid_list_tmp_value in bsid_list_tmp:
                        if bsid_list_tmp_value.strip() == "":
                            continue
                        bsid_list.append(bsid_list_tmp_value.strip())
                    continue
        if len(bsid_list) > 0:
            dict_value1[ip_tmp + "/bsid_list"] = bsid_list
        dict_value2 = self.dut_get_show_ip_route(show_info)
        dict_value = dict(dict_value1.items() + dict_value2.items())
        return dict_value
    def dut_get_show_netconf_session_bak0911(self, show_info):
        dict_value = {}
        session_list = []
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for i in range(len(show_info_split)):
            if re.match(r'^===',show_info_split[i].strip()):
                show_info_split[i] = ''
            show_info_split[i] = show_info_split[i].strip()  # 删除空行及纯空格所在行
        while '' in show_info_split:
            show_info_split.remove('')
        for i in range(len(show_info_split)):
            if re.match(r'^Session-ID', show_info_split[i].strip()):
                t1 = show_info_split[i].split('  ')
                for j in range(len(t1)):
                    t1[j] = t1[j].strip()
                while '' in t1:
                    t1.remove('')
                continue
            t2 = show_info_split[i].split(' ')
            for j in range(len(t2)):
                t2[j] = t2[j].strip()
            while '' in t2:
                t2.remove('')
            for k in range(len(t2)):
                if k == 0:
                    session_list.append(t2[0])
                    continue
                key = t2[0] + '/' + t1[k]
                value = t2[k]
                dict_value[key] = value
        dict_value['session_list'] = session_list
        return dict_value
    def dut_get_show_netconf_session(self,show_info):
        """
        Function:show netconf session回显解析函数
        CLI命令:show netconf session
        回显信息示例:


        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show netconf session | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        str_arg ="show"
        return self.dut_get_show_info_analy_all_colon(show_info,str_arg)

    def dut_show_autoget_form_bgp_network(self, star_num, end_num,title_value,x_list,show_info_list_line):
        '''
        对设备有关杆号的列表进行字典的遍历
        *b  120.0.9.0/24     40.1.1.2                 0                       0 20 i
        *>                   20.1.1.2                 0                       0 20 i
        '''
        dict_value ={}
        address_list = []
        title_list =[]
        ip_flag =""
        flag_2 = 0
        ip_flag_2=""
        ori_network=""
        net_side=3
        for i in range (star_num,end_num):    #line_len-1:上面删除“-----”这一行了
            ##print show_info_list_line[i]
            x_len = len(x_list)
            cut_star = 0
            cut_end=0
            new_list = []
            show_info_list_line[i] = show_info_list_line[i]
            ##print show_info_list_line[i]

            if show_info_list_line[i] != "" :
                #print show_info_list_line[i]
                if "Route Distinguisher" in show_info_list_line[i]:
                    if re.match(r"Route Distinguisher:(.*)\(Default for EVI (\d+)\)",show_info_list_line[i].strip()):
                        obj_route =re.match(r".*Route Distinguisher:(.*)\(Default for EVI (\d+)\)",show_info_list_line[i].strip())
                        dict_value["Route Distinguisher"] = obj_route.group(1).strip()
                        dict_value["Default for EVI"] = obj_route.group(2).strip()
                elif re.match(r"(.*\s)(\d+.*/\d+$)",show_info_list_line[i].strip()):
                    #print show_info_list_line[i].strip()
                    obj = re.match(r"(.*\s)(\d+.*/\d+)",show_info_list_line[i].strip())
                    status = obj.group(1)
                    ip_flag_2 = obj.group(2)
                    ip_flag_2_network =obj.group(0)
                    flag_2 = 1
                elif re.match(r"(\d+.*/\d+$)",show_info_list_line[i].strip()):
                    obj = re.match(r"(\d+.*/\d+)",show_info_list_line[i].strip())
                    status = obj.group(1)
                    ip_flag_2 = obj.group(1)
                    ip_flag_2_network =obj.group(0)
                    flag_2 = 1
                elif re.match(r"(.*\s)(\[\d+.*/\d+$)", show_info_list_line[i].strip()):
                    # print show_info_list_line[i].strip()
                    obj = re.match(r"(.*\s)(\[\d+.*/\d+)", show_info_list_line[i].strip())
                    status = obj.group(1)
                    ip_flag_2 = obj.group(2)
                    ip_flag_2_network = obj.group(0)
                    flag_2 = 1
                elif re.match(r"(\[\d+.*/\d+$)", show_info_list_line[i].strip()):
                    obj = re.match(r"(\[\d+.*/\d+)", show_info_list_line[i].strip())
                    status = obj.group(1)
                    ip_flag_2 = obj.group(1)
                    ip_flag_2_network = obj.group(0)
                    flag_2 = 1
                else:
                    for j in range(x_len):
                        cut_end = cut_end+int(x_list[j])
                        col_value = show_info_list_line[i][cut_star:cut_end]
                        cut_star = cut_end
                        if "Network" in col_value :
                            ori_network = col_value
                            net_side=int(ori_network.find("N"))
                        col_value = col_value.lstrip()
                        col_value = col_value.rstrip()
                        new_list.append(col_value)
                    #获取表头的列，用于组合
                    ##print col_value_list
                    for i in range(len(new_list)) :
                        if new_list[i] == title_value :
                            new_list_title_key = i
                    new_list_title_value = new_list[new_list_title_key]          #需要变参的地方
                    if "/" in new_list_title_value:
                        ip_obj = re.findall(r"(\d+.*/\d+)",new_list_title_value)
                        ip_flag = ip_obj[0]
                    else:
                        if flag_2 == 1 :
                            if new_list_title_value == "":
                                new_list_title_value = ip_flag_2_network
                            else:
                                new_list_title_value = new_list_title_value+ip_flag_2
                        else:
                            if len(new_list_title_value) < net_side:
                                dif_value = net_side - len(new_list_title_value)
                                dif_value_2=""
                                for i in range(int(dif_value)):
                                    dif_value_2 = dif_value_2+" "
                                new_list_title_value =  new_list_title_value+dif_value_2
                            new_list_title_value = new_list_title_value+ip_flag
                    if new_list_title_value == title_value:
                        title_list = new_list
                    elif new_list_title_value!= title_value:
                        #生成字典
                        address_list.append(new_list_title_value)
                        #遍历列头右边的值
                        if new_list_title_key+1 < x_len :
                            for s in range(new_list_title_key+1,x_len):  #需要变参的地方
                                #key_name = '%s/%s' % (title_col,title_row[s])
                                key_name = '%s/%s'%(new_list_title_value,title_list[s])
                                dict_value[key_name]=new_list[s]
                        if new_list_title_key > 0 :
                            for s in range(0,new_list_title_key):  #需要变参的地方
                                ##遍历列头边的值
                                key_name = '%s/%s' % (new_list_title_value, title_list[s])
                                dict_value[key_name]=new_list[s]
                    dict_value[title_value+"_list"]=address_list
        return dict_value
    def dut_get_bgp_network(self,show_info):
        dict_value = {}
        #########################################################################################
        # 用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        line_len = len (show_info_split)
        for line_len_num in range (0,line_len):
            if "For address family" in show_info_split[line_len_num]:
                list1 = show_info_split[line_len_num].split(":")
                dict_value[list1[0].strip()]=list1[1].strip()
            if "BGP table version" in show_info_split[line_len_num]:
                list2 = show_info_split[line_len_num].split(",")
                for list2_value in list2:
                    if "is" in list2_value:
                        list3 = list2_value.split("is")
                        dict_value[list3[0].strip()]=list3[1].strip()
                    if re.match("bgp instance(.*)",list2_value.strip()):
                        obj_0 = re.match("bgp instance(.*)",list2_value.strip())
                        dict_value["bgp instance"] = obj_0.group(1).strip()
            if "Total number of prefixes" in show_info_split[line_len_num]:
                end_num = line_len_num
                list1 = show_info_split[line_len_num].split("prefixes")
                dict_value["Total number of prefixes"]=list1[1].strip()
            if "Next Hop" in show_info_split[line_len_num]:
                star_num = line_len_num
        whippletree_list_2=[20,20,12,11,9,50]
        dict_value1 = self.dut_show_autoget_form_bgp_network(star_num,end_num,"Network",whippletree_list_2,show_info_split)
        dict_value2 =dict(dict_value.items()+dict_value1.items())
        return dict_value2
    def dut_get_show_bgp_all_neighbors_ip_hamode_adjin(self,show_info):
        """
        Function:show bgp all neighbors  x.x.x.x ha-mode adj-in回显解析函数
        CLI命令:show bgp all neighbors  x.x.x.x ha-mode adj-in
        回显信息示例:
DUT1-STANDBY#show bgp all neighbors 10.1.1.2 ha-mode adj-in


For address family: IPv4 Unicast
BGP table version is 1, local router ID is 1.1.1.1
Status codes: s suppressed, d damped, h history, * valid, > best, i - internal,
              S Stale, b - backup entry, m - multipath, f Filter
Origin codes: i - IGP, e - EGP, ? - incomplete

    Network          Next Hop            Metric      LocPrf      Weight Path
*>  101.1.1.0/24     10.1.1.2                 0                       0 4294967295 200 ?
*>  101.1.2.0/24     10.1.1.2                 0                       0 4294967295 200 ?
*>  101.1.3.0/24     10.1.1.2                 0                       0 4294967295 200 ?
*>  101.1.4.0/24     10.1.1.2                 0                       0 4294967295 200 ?
*>  101.1.5.0/24     10.1.1.2                 0                       0 4294967295 200 ?
*>  103.1.1.0/24     10.1.1.1                                         0 4294967295 200 4294967295 100 4294967295 300 ?
*>  103.1.2.0/24     10.1.1.1                                         0 4294967295 200 4294967295 100 4294967295 300 ?
*>  103.1.3.0/24     10.1.1.1                                         0 4294967295 200 4294967295 100 4294967295 300 ?
*>  103.1.4.0/24     10.1.1.1                                         0 4294967295 200 4294967295 100 4294967295 300 ?
*>  103.1.5.0/24     10.1.1.1                                         0 4294967295 200 4294967295 100 4294967295 300 ?

Total number of prefixes 10

        Returns:
{"*>  101.1.3.0/24/Next Hop": "10.1.1.2"
"*>  103.1.4.0/24/Next Hop": "10.1.1.1"
"*>  103.1.1.0/24/Path": "4294967295 200 4294967295 100 4294967295 300 ?"
"*>  101.1.4.0/24/Weight": "0"
"Network_list": ["*>  101.1.1.0/24"
"*>  101.1.2.0/24"
"*>  101.1.3.0/24"
"*>  101.1.4.0/24"
"*>  101.1.5.0/24"
"*>  103.1.1.0/24"
"*>  103.1.2.0/24"
"*>  103.1.3.0/24"
"*>  103.1.4.0/24"
"*>  103.1.5.0/24"], "*>  101.1.1.0/24/Weight": "0"
"*>  101.1.1.0/24/LocPrf": ""
"*>  101.1.1.0/24/Path": "4294967295 200 ?"
"*>  101.1.5.0/24/Metric": "0"
"*>  103.1.4.0/24/Metric": ""
"*>  103.1.2.0/24/Next Hop": "10.1.1.1"
"*>  101.1.3.0/24/LocPrf": ""
"*>  103.1.1.0/24/Next Hop": "10.1.1.1"
"*>  103.1.5.0/24/Metric": ""
"*>  101.1.3.0/24/Path": "4294967295 200 ?"
"For address family": "IPv4 Unicast"
"*>  101.1.4.0/24/Path": "4294967295 200 ?"
"*>  103.1.2.0/24/Metric": ""
"*>  101.1.5.0/24/Path": "4294967295 200 ?"
"*>  103.1.3.0/24/LocPrf": ""
"*>  101.1.2.0/24/Weight": "0"
"BGP table version": "1"
"*>  101.1.5.0/24/Next Hop": "10.1.1.2"
"local router ID": "1.1.1.1"
"*>  103.1.1.0/24/LocPrf": ""
"*>  101.1.5.0/24/LocPrf": ""
"*>  103.1.4.0/24/LocPrf": ""
"*>  103.1.4.0/24/Path": "4294967295 200 4294967295 100 4294967295 300 ?"
"*>  101.1.2.0/24/LocPrf": ""
"*>  103.1.4.0/24/Weight": "0"
"*>  103.1.3.0/24/Metric": ""
"*>  101.1.1.0/24/Next Hop": "10.1.1.2"
"*>  101.1.4.0/24/LocPrf": ""
"*>  103.1.1.0/24/Weight": "0"
"*>  101.1.4.0/24/Metric": "0"
"*>  101.1.2.0/24/Next Hop": "10.1.1.2"
"*>  103.1.1.0/24/Metric": ""
"*>  103.1.5.0/24/Next Hop": "10.1.1.1"
"*>  103.1.5.0/24/Weight": "0"
"*>  103.1.5.0/24/Path": "4294967295 200 4294967295 100 4294967295 300 ?"
"*>  101.1.5.0/24/Weight": "0"
"*>  103.1.3.0/24/Next Hop": "10.1.1.1"
"*>  103.1.2.0/24/Weight": "0"
"*>  101.1.4.0/24/Next Hop": "10.1.1.2"
"Total number of prefixes": "10"
"*>  101.1.1.0/24/Metric": "0"
"*>  101.1.2.0/24/Metric": "0"
"*>  103.1.3.0/24/Weight": "0"
"*>  101.1.2.0/24/Path": "4294967295 200 ?"
"*>  103.1.3.0/24/Path": "4294967295 200 4294967295 100 4294967295 300 ?"
"*>  101.1.3.0/24/Weight": "0"
"*>  103.1.2.0/24/LocPrf": ""
"*>  101.1.3.0/24/Metric": "0"
"*>  103.1.2.0/24/Path": "4294967295 200 4294967295 100 4294967295 300 ?"
"*>  103.1.5.0/24/LocPrf": ""}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bgp all neighbors  x.x.x.x ha-mode adj-in | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_bgp_network(show_info)
    def dut_get_show_ip_bgp_vrf_word(self,show_info):
        """
        Function:show ip bgp vrf (word)回显解析函数
        CLI命令:show ip bgp vrf (word)
        回显信息示例:
N1800X#show ip bgp vrf (vrf1)
BGP table version is 2, local router ID is 1.1.1.1
Status codes: s suppressed, d damped, h history, * valid, > best, i - internal,
              S Stale, b - backup entry, m - multipath, f Filter
Origin codes: i - IGP, e - EGP, ? - incomplete

    Network          Next Hop            Metric      LocPrf      Weight Path
*>  10.1.1.0/24      0.0.0.0                  0                   32768     ?
*>  20.1.1.0/24      0.0.0.0                  0                   32768     ?
*>  30.1.1.0/24      0.0.0.0                  0                   32768     ?
*>  40.1.1.0/24      0.0.0.0                  0                   32768     ?
*>  100.0.0.0/24     10.1.1.2                 0                       0 10 i
*>  100.0.1.0/24     10.1.1.2                 0                       0 10 i
*>  100.0.2.0/24     10.1.1.2                 0                       0 10 i
*>  100.0.3.0/24     10.1.1.2                 0                       0 10 i
*>  100.0.4.0/24     10.1.1.2                 0                       0 10 i
*>  100.0.5.0/24     10.1.1.2                 0                       0 10 i
*>  100.0.6.0/24     10.1.1.2                 0                       0 10 i
*>  100.0.7.0/24     10.1.1.2                 0                       0 10 i
*>  100.0.8.0/24     10.1.1.2                 0                       0 10 i
*>  100.0.9.0/24     10.1.1.2                 0                       0 10 i
*b  120.0.0.0/24     40.1.1.2                 0                       0 20 i
*>                   20.1.1.2                 0                       0 20 i
*b  120.0.1.0/24     40.1.1.2                 0                       0 20 i
*>                   20.1.1.2                 0                       0 20 i
*b  120.0.2.0/24     40.1.1.2                 0                       0 20 i
*>                   20.1.1.2                 0                       0 20 i
*b  120.0.3.0/24     40.1.1.2                 0                       0 20 i
*>                   20.1.1.2                 0                       0 20 i
*b  120.0.4.0/24     40.1.1.2                 0                       0 20 i
*>                   20.1.1.2                 0                       0 20 i
*b  120.0.5.0/24     40.1.1.2                 0                       0 20 i
*>                   20.1.1.2                 0                       0 20 i
*b  120.0.6.0/24     40.1.1.2                 0                       0 20 i
*>                   20.1.1.2                 0                       0 20 i
*b  120.0.7.0/24     40.1.1.2                 0                       0 20 i
*>                   20.1.1.2                 0                       0 20 i
*b  120.0.8.0/24     40.1.1.2                 0                       0 20 i
*>                   20.1.1.2                 0                       0 20 i
*b  120.0.9.0/24     40.1.1.2                 0                       0 20 i
*>                   20.1.1.2                 0                       0 20 i

Total number of prefixes 24

        Returns:
{"*b  120.0.6.0/24/LocPrf": ""
"*>  120.0.6.0/24/Metric": "0"
"*b  120.0.7.0/24/Next Hop": "40.1.1.2"
"*>  100.0.6.0/24/Weight": "0"
"*>  100.0.7.0/24/Path": "10 i"
"*b  120.0.1.0/24/Next Hop": "40.1.1.2"
"*b  120.0.6.0/24/Weight": "0"
"*>  100.0.6.0/24/Path": "10 i"
"*>  10.1.1.0/24/Metric": "0"
"*>  100.0.0.0/24/Next Hop": "10.1.1.2"
"*>  120.0.1.0/24/Metric": "0"
"*b  120.0.1.0/24/Metric": "0"
"*>  30.1.1.0/24/Next Hop": "0.0.0.0"
"local router ID": "1.1.1.1"
"*b  120.0.3.0/24/Next Hop": "40.1.1.2"
"*>  20.1.1.0/24/LocPrf": ""
"*>  20.1.1.0/24/Next Hop": "0.0.0.0"
"*b  120.0.5.0/24/Next Hop": "40.1.1.2"
"*>  100.0.1.0/24/Path": "10 i"
"*>  120.0.3.0/24/Next Hop": "20.1.1.2"
"*>  120.0.1.0/24/Next Hop": "20.1.1.2"
"*>  100.0.9.0/24/Metric": "0"
"*>  100.0.0.0/24/Weight": "0"
"*>  10.1.1.0/24/Weight": "32768"
"*>  100.0.2.0/24/Path": "10 i"
"*b  120.0.0.0/24/Next Hop": "40.1.1.2"
"*>  120.0.3.0/24/Path": "20 i"
"*>  120.0.7.0/24/Path": "20 i"
"*>  100.0.3.0/24/Metric": "0"
"*>  100.0.0.0/24/Metric": "0"
"*>  120.0.3.0/24/LocPrf": ""
"*>  40.1.1.0/24/Metric": "0"
"*>  100.0.6.0/24/Next Hop": "10.1.1.2"
"*>  120.0.6.0/24/Path": "20 i"
"*>  120.0.0.0/24/Next Hop": "20.1.1.2"
"*>  120.0.9.0/24/Next Hop": "20.1.1.2"
"*>  120.0.5.0/24/Path": "20 i"
"*b  120.0.9.0/24/LocPrf": ""
"*>  20.1.1.0/24/Weight": "32768"
"*b  120.0.5.0/24/Weight": "0"
"*>  120.0.9.0/24/Path": "20 i"
"*b  120.0.2.0/24/Path": "20 i"
"*b  120.0.4.0/24/LocPrf": ""
"*b  120.0.8.0/24/Metric": "0"
"*>  120.0.0.0/24/Metric": "0"
"*>  120.0.2.0/24/Next Hop": "20.1.1.2"
"*b  120.0.0.0/24/Metric": "0"
"*>  120.0.0.0/24/Path": "20 i"
"*>  100.0.0.0/24/Path": "10 i"
"*b  120.0.1.0/24/Weight": "0"
"*b  120.0.8.0/24/Path": "20 i"
"*>  100.0.1.0/24/Metric": "0"
"*>  100.0.7.0/24/Metric": "0"
"*b  120.0.0.0/24/LocPrf": ""
"*b  120.0.3.0/24/Weight": "0"
"*>  100.0.5.0/24/LocPrf": ""
"*>  100.0.8.0/24/LocPrf": ""
"*>  100.0.2.0/24/Next Hop": "10.1.1.2"
"*b  120.0.7.0/24/LocPrf": ""
"*b  120.0.2.0/24/Next Hop": "40.1.1.2"
"*b  120.0.1.0/24/LocPrf": ""
"*>  100.0.4.0/24/LocPrf": ""
"*>  120.0.9.0/24/LocPrf": ""
"*>  120.0.5.0/24/Weight": "0"
"*>  120.0.5.0/24/Metric": "0"
"*>  100.0.9.0/24/Next Hop": "10.1.1.2"
"*>  100.0.5.0/24/Path": "10 i"
"*b  120.0.9.0/24/Path": "20 i"
"*>  120.0.1.0/24/Path": "20 i"
"*b  120.0.0.0/24/Weight": "0"
"*>  20.1.1.0/24/Metric": "0"
"*b  120.0.4.0/24/Metric": "0"
"*>  100.0.7.0/24/Next Hop": "10.1.1.2"
"*>  40.1.1.0/24/Weight": "32768"
"*>  120.0.9.0/24/Weight": "0"
"*b  120.0.2.0/24/Weight": "0"
"*>  120.0.8.0/24/LocPrf": ""
"*>  120.0.1.0/24/LocPrf": ""
"*>  100.0.9.0/24/LocPrf": ""
"*>  100.0.6.0/24/LocPrf": ""
"*b  120.0.9.0/24/Metric": "0"
"*>  100.0.6.0/24/Metric": "0"
"*>  100.0.3.0/24/Next Hop": "10.1.1.2"
"*b  120.0.2.0/24/LocPrf": ""
"*>  100.0.3.0/24/Path": "10 i"
"*b  120.0.5.0/24/LocPrf": ""
"*>  120.0.2.0/24/Path": "20 i"
"*>  30.1.1.0/24/Metric": "0"
"*>  120.0.8.0/24/Metric": "0"
"*b  120.0.9.0/24/Next Hop": "40.1.1.2"
"*>  100.0.8.0/24/Next Hop": "10.1.1.2"
"*>  100.0.7.0/24/Weight": "0"
"*b  120.0.4.0/24/Path": "20 i"
"*>  120.0.3.0/24/Metric": "0"
"*b  120.0.8.0/24/Next Hop": "40.1.1.2"
"*b  120.0.3.0/24/Metric": "0"
"BGP table version": "2"
"*>  120.0.4.0/24/LocPrf": ""
"*>  120.0.1.0/24/Weight": "0"
"*>  120.0.7.0/24/Next Hop": "20.1.1.2"
"*>  120.0.9.0/24/Metric": "0"
"*>  120.0.8.0/24/Weight": "0"
"*b  120.0.3.0/24/LocPrf": ""
"*>  120.0.2.0/24/Metric": "0"
"*>  100.0.1.0/24/Next Hop": "10.1.1.2"
"*b  120.0.7.0/24/Metric": "0"
"*>  120.0.2.0/24/Weight": "0"
"*>  120.0.7.0/24/Metric": "0"
"*>  120.0.4.0/24/Metric": "0"
"*b  120.0.8.0/24/LocPrf": ""
"*>  100.0.3.0/24/LocPrf": ""
"*>  10.1.1.0/24/LocPrf": ""
"*>  30.1.1.0/24/Path": "?"
"*b  120.0.6.0/24/Path": "20 i"
"*>  30.1.1.0/24/LocPrf": ""
"*>  10.1.1.0/24/Path": "?"
"*>  40.1.1.0/24/LocPrf": ""
"Total number of prefixes": "24"
"*>  100.0.2.0/24/Metric": "0"
"*>  120.0.7.0/24/Weight": "0"
"*>  100.0.3.0/24/Weight": "0"
"*b  120.0.5.0/24/Path": "20 i"
"*>  20.1.1.0/24/Path": "?"
"*b  120.0.6.0/24/Metric": "0"
"*>  120.0.6.0/24/LocPrf": ""
"*>  100.0.2.0/24/LocPrf": ""
"*>  100.0.4.0/24/Metric": "0"
"*>  40.1.1.0/24/Path": "?"
"*>  100.0.5.0/24/Metric": "0"
"*>  120.0.4.0/24/Path": "20 i"
"Network_list": ["*>  10.1.1.0/24"
"*>  20.1.1.0/24"
"*>  30.1.1.0/24"
"*>  40.1.1.0/24"
"*>  100.0.0.0/24"
"*>  100.0.1.0/24"
"*>  100.0.2.0/24"
"*>  100.0.3.0/24"
"*>  100.0.4.0/24"
"*>  100.0.5.0/24"
"*>  100.0.6.0/24"
"*>  100.0.7.0/24"
"*>  100.0.8.0/24"
"*>  100.0.9.0/24"
"*b  120.0.0.0/24"
"*>  120.0.0.0/24"
"*b  120.0.1.0/24"
"*>  120.0.1.0/24"
"*b  120.0.2.0/24"
"*>  120.0.2.0/24"
"*b  120.0.3.0/24"
"*>  120.0.3.0/24"
"*b  120.0.4.0/24"
"*>  120.0.4.0/24"
"*b  120.0.5.0/24"
"*>  120.0.5.0/24"
"*b  120.0.6.0/24"
"*>  120.0.6.0/24"
"*b  120.0.7.0/24"
"*>  120.0.7.0/24"
"*b  120.0.8.0/24"
"*>  120.0.8.0/24"
"*b  120.0.9.0/24"
"*>  120.0.9.0/24"], "*>  100.0.8.0/24/Path": "10 i"
"*>  100.0.9.0/24/Path": "10 i"
"*>  120.0.4.0/24/Weight": "0"
"*>  100.0.5.0/24/Next Hop": "10.1.1.2"
"*b  120.0.2.0/24/Metric": "0"
"*>  120.0.0.0/24/LocPrf": ""
"*b  120.0.4.0/24/Weight": "0"
"*>  120.0.3.0/24/Weight": "0"
"*>  120.0.6.0/24/Next Hop": "20.1.1.2"
"*>  120.0.5.0/24/Next Hop": "20.1.1.2"
"*>  100.0.5.0/24/Weight": "0"
"*>  120.0.7.0/24/LocPrf": ""
"*b  120.0.9.0/24/Weight": "0"
"*>  100.0.4.0/24/Weight": "0"
"*>  120.0.5.0/24/LocPrf": ""
"*>  100.0.2.0/24/Weight": "0"
"*>  100.0.8.0/24/Metric": "0"
"*>  100.0.9.0/24/Weight": "0"
"*b  120.0.3.0/24/Path": "20 i"
"*>  100.0.4.0/24/Next Hop": "10.1.1.2"
"*>  120.0.2.0/24/LocPrf": ""
"*>  120.0.0.0/24/Weight": "0"
"*>  100.0.4.0/24/Path": "10 i"
"*>  100.0.8.0/24/Weight": "0"
"*>  120.0.8.0/24/Next Hop": "20.1.1.2"
"*>  100.0.1.0/24/LocPrf": ""
"*b  120.0.1.0/24/Path": "20 i"
"*>  100.0.1.0/24/Weight": "0"
"*b  120.0.8.0/24/Weight": "0"
"*b  120.0.7.0/24/Path": "20 i"
"*b  120.0.0.0/24/Path": "20 i"
"*>  120.0.6.0/24/Weight": "0"
"*>  120.0.8.0/24/Path": "20 i"
"*>  10.1.1.0/24/Next Hop": "0.0.0.0"
"*>  30.1.1.0/24/Weight": "32768"
"*>  100.0.0.0/24/LocPrf": ""
"*>  40.1.1.0/24/Next Hop": "0.0.0.0"
"*b  120.0.4.0/24/Next Hop": "40.1.1.2"
"*b  120.0.5.0/24/Metric": "0"
"*b  120.0.6.0/24/Next Hop": "40.1.1.2"
"*>  100.0.7.0/24/LocPrf": ""
"*>  120.0.4.0/24/Next Hop": "20.1.1.2"
"*b  120.0.7.0/24/Weight": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip bgp vrf (word) | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_bgp_network(show_info)
    def dut_get_show_ip_bgp_ip(self,show_info):
        """
        Function:show ip bgp  x.x.x.x回显解析函数
        CLI命令:show ip bgp  x.x.x.x
        回显信息示例:
DUT3#show ip bgp 100.0.0.0
BGP routing table entry for 100.0.0.0/24(#0x556424c560)
Paths: (1 available, best #1, table Default-IP-Routing-Table)
  Advertised to update-groups:
  17
  65002 65001
    23.0.0.2 from 23.0.0.2 (2.2.2.2)
      Origin IGP, metric 0, localpref 100, valid, external, best
      Dampinfo: penalty 1000, flapped 1 times in 00:00:02
      Last update: Mon Dec 17 10:45:55 2018

DUT3#show ip bgp 100.0.0.0
BGP routing table entry for 100.0.0.0/24(#0x556424c560)
Paths: (1 available, no best path)
  Not advertised to any peer
  65002 65001, (suppressed due to dampening)
    23.0.0.2 from 23.0.0.2 (2.2.2.2)
      Origin IGP, metric 0, localpref 100, valid, external
      Dampinfo: penalty 8000, flapped 8 times in 00:00:38, reuse in 01:00:00
      Last update: Mon Dec 17 10:46:29 2018

        Returns:
{'penalty': '8000'
'Last update': 'Mon Dec 17 10'
'flapped_times': '8'
'reuse': '01:00:00'
'times in': '00:00:38'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip bgp  x.x.x.x | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for value in show_info_split:
            if "Dampinfo" in value:
                list1 = value.split(",")
                for list1_value in list1:
                    if "penalty" in list1_value:
                        list2 = list1_value.split("penalty")
                        dict_value["penalty"] = list2[1].strip()
                    if "flapped" in list1_value :
                        list2 = list1_value.split("times in")
                        dict_value["flapped_times"] = list2[0].strip().strip("flapped").strip()
                        dict_value["times in"] = list2[1].strip()
                    if "reuse" in list1_value:
                        list2 = list1_value.split("in")
                        dict_value["reuse"] = list2[1].strip()
            elif "Last update:" in value:
                list1 = value.split(":")
                dict_value[list1[0].strip()] = list1[1].strip()
            elif "RX ID" in value and "," in value:
                list1 = value.split(",")
                for list1_value in list1:
                    list2 = list1_value.split(":")
                    dict_value[list2[0].strip()] = list2[1].strip()
        return dict_value

    def dut_get_show_ip_bgp_ipmask(self, show_info):
        """
        Function:show ip bgp x.x.x.x/xx回显解析函数
        CLI命令:show ip bgp x.x.x.x/xx
        回显信息示例:
Ruijie#show ip bgp 2.0.0.0/24
BGP routing table entry for 2.0.0.0/24
Paths: (1 available, best #1, table Default-IP-Routing-Table)
  Not advertised to any peer
  1
    172.16.1.2 from 172.16.1.2 (192.0.0.2)
      Origin IGP, metric 0, localpref 100, valid, external, best
      Last update: Sun Feb 11 10:29:55 2018

Ruijie#

        Returns:
{"best_route": "192.0.0.2"
"ip_list": ["192.0.0.2"], "192.0.0.2/Last update": "Sun Feb 11 10"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip bgp x.x.x.x/xx | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        ip_list = []
        flag = 0
        for value in show_info_split:
            if flag == 1:
                if "best" in value:
                    dict_value["best_route"] = key1
                    dict_value["best_route_2"] = key1_best
                flag = 0
            if "from" in value and "(" in value:
                list1 = value.split("(")
                key1 = list1[-1].strip().strip(")")
                key1_best = value.split("(")[0].strip()
                ip_list.append(key1)
                flag = 1
            elif re.match("Origin (.*), \S*metric (\S+), localpref (\S+), .*", value.strip()):
                obj_0 = re.match("Origin (.*), \S*metric (\S+), localpref (\S+), .*", value.strip())
                dict_value[key1 + "/Origin"] = obj_0.group(1).strip()
                dict_value[key1 + "/metric"] = obj_0.group(2).strip()
                dict_value[key1 + "/localpref"] = obj_0.group(3).strip()
            elif re.match("Extended Community: (\S+)", value.strip()):
                obj_1 = re.match("Extended Community: (\S+)", value.strip())
                dict_value[key1 + "/Extended Community"] = obj_1.group(1).strip()
            elif re.match("mpls labels (.*)", value.strip()):
                obj_1 = re.match("mpls labels (.*)", value.strip())
                dict_value[key1 + "/mpls labels"] = obj_1.group(1).strip()
            elif re.match("Prefix-SID: (.*) SID (\S+), Flags (\S+), Endpoint Behavior (\S+)", value.strip()):
                obj_1 = re.match("Prefix-SID: (.*) SID (\S+), Flags (\S+), Endpoint Behavior (\S+)", value.strip())
                dict_value[key1 + "/Prefix-SID"] = obj_1.group(1).strip()
                dict_value[key1 + "/SID"] = obj_1.group(2).strip()
                dict_value[key1 + "/Flags"] = obj_1.group(3).strip()
                dict_value[key1 + "/Endpoint Behavior"] = obj_1.group(4).strip()
            elif "Dampinfo" in value:
                list1 = value.split(",")
                for list1_value in list1:
                    if "penalty" in list1_value:
                        list2 = list1_value.split("penalty")
                        dict_value[key1 + "/penalty"] = list2[1].strip()
                    if "flapped" in list1_value:
                        list2 = list1_value.split("times in")
                        dict_value[key1 + "/flapped_times"] = list2[0].strip().strip("flapped").strip()
                        dict_value[key1 + "/times in"] = list2[1].strip()
                    if "reuse" in list1_value:
                        list2 = list1_value.split("in")
                        dict_value[key1 + "/reuse"] = list2[1].strip()
            elif "Last update:" in value:
                list1 = value.split(":")
                dict_value[key1 + "/" + list1[0].strip()] = list1[1].strip()
            elif "RX ID" in value and "," in value:
                list1 = value.split(",")
                for list1_value in list1:
                    list2 = list1_value.split(":")
                    dict_value[key1 + "/" + list2[0].strip()] = list2[1].strip()
        dict_value["ip_list"] = ip_list
        return dict_value
    def dut_get_show_ip_bgp_ip_ip(self,show_info):
        """
        Function:show ip bgp  x.x.x.x  x.x.x.x回显解析函数
        CLI命令:show ip bgp  x.x.x.x  x.x.x.x
        回显信息示例:
Ruijie#show ip bgp 2.0.0.0 255.255.255.0                
BGP routing table entry for 2.0.0.0/24
Paths: (1 available, best #1, table Default-IP-Routing-Table)
  Not advertised to any peer
  1
    172.16.1.2 from 172.16.1.2 (192.0.0.2)
      Origin IGP, metric 0, localpref 100, valid, external, best
      Last update: Sun Feb 11 10:29:55 2018

Ruijie#

        Returns:
{'best_route': '192.0.0.2'
'ip_list': ['192.0.0.2'], '192.0.0.2/Last update': 'Sun Feb 11 10'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip bgp  x.x.x.x  x.x.x.x | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_ip_bgp_ipmask(show_info)
    def dut_get_show_bgp_ipv6_unicast_ipv6mask(self,show_info):
        """
        Function:show bgp ipv6 unicast <ipv6>/xx回显解析函数
        CLI命令:show bgp ipv6 unicast <ipv6>/xx
        回显信息示例:
RGOS_12_2#show bgp ipv6 unicast 100::/64
    BGP routing table entry for 100::/64(#0x7fa50f01cf10)
    Paths: (1 available, best #1, table Default-IP-Routing-Table)
      Not advertised to any peer
    
      Local
        1::1 from 1::1 (192.0.0.1)
          Origin IGP, metric 0, localpref 10, valid, internal, best
          Originator: 192.0.0.1, Cluster list: 1.1.1.1 
          Last update: Wed Mar  6 06:12:58 2019
          RX ID: 1,TX ID: 0

        Returns:
{"192.0.0.1/Last update": "Wed Mar  6 06"
"best_route": "192.0.0.1"
"192.0.0.1/RX ID": "1"
"ip_list": ["192.0.0.1"], "192.0.0.1/TX ID": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bgp ipv6 unicast <ipv6>/xx | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_ip_bgp_ipmask(show_info)
    def dut_get_show_bgp_ipv6_unicast_vrf_word_ipv6mask(self,show_info):
        """
        Function:show bgp ipv6 unicast vrf (word) ipv6mask回显解析函数
        CLI命令:show bgp ipv6 unicast vrf (word) ipv6mask
        回显信息示例:
RGOS_12_1#show bgp ipv6 unicast vrf vrf1 100::/64
BGP routing table entry for 100::/64(#0x7f44f0f5c6a0)
Paths: (2 available, best #2, table Default-IP-Routing-Table)
  Advertised to update-groups:
  28
  Local
    4::2(fe80::210:94ff:fe00:6) from 4::2 (192.0.0.2)
    (fe80::210:94ff:fe00:6)
      Origin IGP, metric 0, localpref 10, valid, internal, backup
      Extended Community: RT:1:1
      Last update: Tue Nov 20 03:56:11 2018
      RX ID: 0,TX ID: 0

  Local
    3::2(fe80::210:94ff:fe00:5) from 3::2 (192.0.0.1)
    (fe80::210:94ff:fe00:5)
      Origin IGP, metric 0, localpref 10, valid, internal, best
      Extended Community: RT:1:1
      Last update: Tue Nov 20 03:56:06 2018
      RX ID: 0,TX ID: 0

        Returns:
{"ip_list": ["192.0.0.2"
"192.0.0.1"], "192.0.0.2/Last update": "Tue Nov 20 03"
"192.0.0.1/Last update": "Tue Nov 20 03"
"192.0.0.2/TX ID": "0"
"192.0.0.2/RX ID": "0"
"192.0.0.1/RX ID": "0"
"192.0.0.1/TX ID": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bgp ipv6 unicast vrf (word) ipv6mask | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_ip_bgp_ipmask(show_info)
    def dut_get_show_bgp_ipv4_unicast_vrf_word_ipmask(self,show_info):
        return self.dut_get_show_bgp_ipv6_unicast_vrf_word_ipv6mask(show_info)
    def dut_get_show_ip_bgp_updategroup(self,show_info):
        """
        Function:show ip bgp update-group回显解析函数
        CLI命令:show ip bgp update-group
        回显信息示例:
S6220-VSU#show ip bgp update-group 
BGP version 4 update-group 46 (VRF: Default), external, Address Family: IPv4 Unicast
  Update message formated 2, replicated 4
  Minimum route advertisement interval is 30 seconds
  Minimum AS origination interval is 1 seconds
  Format state: Current working
                Refresh blocked
  Has 2 members:
   11.1.1.2          21.1.1.2

        Returns:
{'Format state': ['Current working'
'Refresh blocked'], 'Minimum route advertisement interval': '30 seconds'
'Minimum AS origination interval': '1 seconds'
'update-group': '46'
'VRF': 'Default'
'replicated': '4'
'Has 2 members': ['11.1.1.2'
'21.1.1.2'], 'Update message formated': '2'
'BGP version': '4'
'Address Family': 'IPv4 Unicast'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip bgp update-group | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        new_list1=[]
        new_list2=[]
        new_list3=[]
        new_list4=[]
        new_list5=[]
        ip_list=[]
        new_ip_list=[]
        dict_value={}
        show_info_list_line = show_info.split("\n")
        #除去无效数据
        if re.match(r'.*#.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        line_len=len(show_info_list_line)
        for i in range (0,line_len):
            if "BGP version" in show_info_list_line[i]:
                BGP_line=i
                show_info_list_line[i]=show_info_list_line[i].replace("BGP version ","BGP version:")
            if "update-group" in show_info_list_line[i]:
                show_info_list_line[i]=show_info_list_line[i].replace("update-group ",",update-group:")
            if "VRF:" in show_info_list_line[i]:
                show_info_list_line[i]=show_info_list_line[i].replace("(VRF: ",",VRF:")
            if "Update message formated" in show_info_list_line[i]:
                Update_line=i
                show_info_list_line[i]=show_info_list_line[i].replace("Update message formated ","Update message formated:")
                show_info_list_line[i]=show_info_list_line[i].replace("replicated ","replicated:")
            if "is" in show_info_list_line[i]:
                show_info_list_line[i]=show_info_list_line[i].replace(" is ",":")
            if "Format state" in show_info_list_line[i]:
                Format_start=i
                show_info_list_line[i]=show_info_list_line[i].replace("\r","")
                new_str1=show_info_list_line[i]
            if "Has" in show_info_list_line[i]:
                Has_start=i
                new_str2=show_info_list_line[i-1].strip()
        new_list1=show_info_list_line[BGP_line].split(",")
        new_list2=show_info_list_line[Update_line].split(",")
        new_list3=new_str1.split(":")
        new_list4.append(new_list3[1].strip())
        new_list4.append(new_str2.strip())
        show_info_list_line[Has_start]=show_info_list_line[Has_start].strip(":")
        for i in range(Has_start+1,line_len):
            ip_list.append(show_info_list_line[i].split())
        for i in range (0,len(new_list1)):
            new_list1[i]=new_list1[i].strip()
            new_list1[i]=new_list1[i].strip(")")
        for i in range(0,len(new_list2)):
            new_list2[i]=new_list2[i].strip()
        for i in range(0,len(ip_list)):
            new_ip_list=ip_list[i]+new_ip_list
        dict_value[new_list3[0].strip()]=new_list4
        dict_value[show_info_list_line[Has_start].strip()]=new_ip_list
        for i in range(0,len(show_info_list_line)):
            if "Minimum route" in show_info_list_line[i]:
                Mininum_start=i
        for i in range(Mininum_start,Format_start):
            new_list5.append(show_info_list_line[i].strip())
        new_list1=new_list1+new_list2+new_list5
        for line_len_num in range(0,len(new_list1)):
            if re.match(".*:.*",new_list1[line_len_num]):
                list_value_split = new_list1[line_len_num].split (":",1)   #以冒号分割一次
                key_name = '%s'%(list_value_split[0].lstrip().rstrip().replace("\r",""))
                dict_value[key_name] = list_value_split[1].lstrip().rstrip().replace("\r","")
        return dict_value
    def dut_get_show_ipv6_ospf_hide_nsr(self,show_info):
        """
        Function:show ipv6 ospf hide nsr回显解析函数
        CLI命令:show ipv6 ospf hide nsr
        回显信息示例:
DUT2-STANDBY#show ipv6 ospf hide nsr
basic table:
    ospf_id:      1, router id:          2.2.2.2, vrf_id: 0, vrf_fib_id: 0, sync_state:  1, lsdb:0xffeac4d600 

area table:
    ospf_id:      1, area_id:          0.0.0.0, options:     19,config:      0, spi:      0,ah_auth_type:      0, ah_auth_key: ,esp_auth_type:      0, esp_auth_key: ,esp_encpt_type:      0, esp_encpt_key: ,
lsdb: 0xffeac4d680

interface table:
    ifindex: 113, id: 0, instance_id: 0,name: AggregatePort 20, ospf_id: 1, dr: 4.4.4.4, bdr: 2.2.2.2,type: 2, area_id: 0.0.0.0, address: fe80::274:9cff:feb2:6a12,transit_area_id: 0.0.0.0, peer_id: 0.0.0.0, oip_config: 1,priority: 1, params_type: 2, hello_interval: 10,dead_interval: 40, vid: 0,router_lsa_index: 0,router_lsa_row: 1, oip_spi: 0,ah_auth_type: 0, ah_auth_key: , esp_auth_type: 0,esp_auth_key: , esp_encpt_type: 0, esp_encpt_key: ,
lsdb: 0xffeac4d700
    ifindex: 114, id: 0, instance_id: 0,name: AggregatePort 10, ospf_id: 1, dr: 2.2.2.2, bdr: 1.1.1.1,type: 2, area_id: 0.0.0.0, address: fe80::274:9cff:feb2:6a12,transit_area_id: 0.0.0.0, peer_id: 0.0.0.0, oip_config: 1,priority: 1, params_type: 2, hello_interval: 10,dead_interval: 40, vid: 0,router_lsa_index: 0,router_lsa_row: 0, oip_spi: 0,ah_auth_type: 0, ah_auth_key: , esp_auth_type: 0,esp_auth_key: , esp_encpt_type: 0, esp_encpt_key: ,
lsdb: 0xffeac4d780

vlink table:

interface neighbor table:
    ifindex:    113, nbr_rid:          4.4.4.4, address: fe80::274:9cff:fe3d:a9c7, ospf_id:      1, options:     19, priority:      1,dr:          4.4.4.4, bdr:          2.2.2.2,instance_id:      0, nbr_ifindex: 58
    ifindex:    114, nbr_rid:          1.1.1.1, address: fe80::274:9cff:fe3d:a9b2, ospf_id:      1, options:     19, priority:      1,dr:          2.2.2.2, bdr:          1.1.1.1,instance_id:      0, nbr_ifindex: 55

vlink neighbor table:

        Returns:
{'interface table/AggregatePort 10/esp_encpt_type': '0'
'interface table/name_list': ['AggregatePort 20'
'AggregatePort 10'], 'interface table/AggregatePort 10/dr': '2.2.2.2'
'interface table/AggregatePort 10/ah_auth_type': '0'
'interface neighbor table/fe80::274:9cff:fe3d:a9b2/priority': '1'
'interface table/AggregatePort 10/params_type': '2'
'interface table/AggregatePort 10/hello_interval': '10'
'interface table/AggregatePort 20/hello_interval': '10'
'interface neighbor table/fe80::274:9cff:fe3d:a9c7/priority': '1'
'area table/0.0.0.0/esp_encpt_key': ''
'interface table/AggregatePort 20/instance_id': '0'
'area table/0.0.0.0/esp_auth_type': '0'
'basic table/2.2.2.2/vrf_id': '0'
'interface neighbor table/fe80::274:9cff:fe3d:a9b2/nbr_ifindex': '55'
'interface table/AggregatePort 20/ah_auth_type': '0'
'interface table/AggregatePort 10/esp_auth_key': ''
'area table/0.0.0.0/spi': '0'
'interface neighbor table/fe80::274:9cff:fe3d:a9c7/ospf_id': '1'
'area table/0.0.0.0/ah_auth_type': '0'
'interface table/AggregatePort 20/dr': '4.4.4.4'
'basic table/2.2.2.2/lsdb': '0xffeac4d600'
'interface neighbor table/fe80::274:9cff:fe3d:a9c7/options': '19'
'interface neighbor table/fe80::274:9cff:fe3d:a9c7/ifindex': '113'
'interface table/AggregatePort 20/oip_spi': '0'
'interface neighbor table/fe80::274:9cff:fe3d:a9c7/nbr_ifindex': '58'
'interface neighbor table/address_list': ['fe80::274:9cff:fe3d:a9c7'
'fe80::274:9cff:fe3d:a9b2'], 'vlink table/area_id_list': [], 'interface table/AggregatePort 10/oip_config': '1'
'interface table/AggregatePort 20/ospf_id': '1'
'interface neighbor table/fe80::274:9cff:fe3d:a9b2/bdr': '1.1.1.1'
'interface neighbor table/fe80::274:9cff:fe3d:a9b2/ifindex': '114'
'interface table/AggregatePort 20/id': '0'
'interface neighbor table/fe80::274:9cff:fe3d:a9b2/instance_id': '0'
'interface table/AggregatePort 10/ah_auth_key': ''
'interface neighbor table/fe80::274:9cff:fe3d:a9b2/dr': '2.2.2.2'
'vlink neighbor table/address_list': [], 'interface table/AggregatePort 10/address': 'fe80::274:9cff:feb2:6a12'
'interface neighbor table/fe80::274:9cff:fe3d:a9b2/ospf_id': '1'
'basic table/2.2.2.2/vrf_fib_id': '0'
'interface table/AggregatePort 20/ah_auth_key': ''
'interface table/AggregatePort 20/dead_interval': '40'
'interface table/AggregatePort 20/esp_encpt_type': '0'
'interface table/AggregatePort 20/oip_config': '1'
'interface table/AggregatePort 20/router_lsa_row': '1'
'area table/area_id_list': ['0.0.0.0'], 'interface neighbor table/fe80::274:9cff:fe3d:a9c7/dr': '4.4.4.4'
'interface table/AggregatePort 20/esp_auth_type': '0'
'area table/0.0.0.0/esp_auth_key': ''
'interface table/AggregatePort 10/ospf_id': '1'
'interface table/AggregatePort 20/type': '2'
'interface neighbor table/fe80::274:9cff:fe3d:a9c7/instance_id': '0'
'basic table/2.2.2.2/ospf_id': '1'
'interface table/AggregatePort 10/peer_id': '0.0.0.0'
'interface table/AggregatePort 20/ifindex': '113'
'area table/0.0.0.0/ah_auth_key': ''
'interface table/AggregatePort 10/esp_encpt_key': ''
'interface table/AggregatePort 20/peer_id': '0.0.0.0'
'interface table/AggregatePort 10/dead_interval': '40'
'interface table/AggregatePort 10/id': '0'
'interface neighbor table/fe80::274:9cff:fe3d:a9b2/nbr_rid': '1.1.1.1'
'interface table/AggregatePort 10/area_id': '0.0.0.0'
'interface table/AggregatePort 10/bdr': '1.1.1.1'
'area table/0.0.0.0/ospf_id': '1'
'interface table/AggregatePort 20/address': 'fe80::274:9cff:feb2:6a12'
'area table/0.0.0.0/config': '0'
'interface table/AggregatePort 10/priority': '1'
'area table/0.0.0.0/esp_encpt_type': '0'
'interface table/AggregatePort 10/vid': '0'
'interface table/AggregatePort 10/instance_id': '0'
'interface table/AggregatePort 20/bdr': '2.2.2.2'
'interface neighbor table/fe80::274:9cff:fe3d:a9c7/bdr': '2.2.2.2'
'basic table/router_id_list': ['2.2.2.2'], 'interface table/AggregatePort 10/ifindex': '114'
'interface table/AggregatePort 20/priority': '1'
'interface table/AggregatePort 10/oip_spi': '0'
'interface table/AggregatePort 10/esp_auth_type': '0'
'area table/0.0.0.0/options': '19'
'interface table/AggregatePort 20/params_type': '2'
'interface table/AggregatePort 20/esp_encpt_key': ''
'interface table/AggregatePort 20/area_id': '0.0.0.0'
'interface table/AggregatePort 10/router_lsa_row': '0'
'interface table/AggregatePort 20/router_lsa_index': '0'
'interface table/AggregatePort 10/router_lsa_index': '0'
'interface neighbor table/fe80::274:9cff:fe3d:a9c7/nbr_rid': '4.4.4.4'
'interface table/AggregatePort 10/type': '2'
'interface neighbor table/fe80::274:9cff:fe3d:a9b2/options': '19'
'interface table/AggregatePort 20/transit_area_id': '0.0.0.0'
'interface table/AggregatePort 20/vid': '0'
'interface table/AggregatePort 10/transit_area_id': '0.0.0.0'
'basic table/2.2.2.2/sync_state': '1'
'interface table/AggregatePort 20/esp_auth_key': ''}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 ospf hide nsr | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        for value in show_info_list_line:
            if re.match(r"lsdb:(.*)",value):
                continue
            if "basic table" in value:
                little_value="router id"
                flag_list=[]
                table_name="basic table"
                continue
            if "area table" in value:
                dict_value["basic table/router_id_list"] =flag_list
                little_value="area_id"
                flag_list=[]
                table_name="area table"
                continue
            if "interface table" in value:
                dict_value["area table/area_id_list"] =flag_list
                little_value="name"
                flag_list=[]
                table_name="interface table"
                continue
            if "vlink table" in value:
                dict_value["interface table/name_list"] =flag_list
                little_value="area-id"
                flag_list=[]
                table_name="vlink table"
                continue
            if "interface neighbor table" in value:
                dict_value["vlink table/area_id_list"] =flag_list
                little_value="address"
                flag_list=[]
                table_name="interface neighbor table"
                continue
            if "vlink neighbor table" in value:
                dict_value["interface neighbor table/address_list"] =flag_list
                little_value="address"
                flag_list=[]
                table_name="vlink neighbor table"
                continue
            if little_value in value:
                list1 = value.split(",")
                for i in list1:
                    if '' in list1:
                        list1.remove('')
                for list1_value in list1:
                    if little_value in list1_value:
                        list2 = list1_value.split(":",1)
                        router_id=list2[1].strip()
                        flag_list.append(router_id)
                for list1_value in list1:
                    if little_value not in list1_value:
                        list2 = list1_value.split(":",1)
                        dict_value[table_name+"/"+router_id+"/"+list2[0].strip()]=list2[1].strip()
        dict_value["vlink neighbor table/address_list"] =flag_list
        return dict_value
    def dut_get_show_vxlan_num_bak(self,show_info):
        dict_value0 = {}
        value_title="Interface"     #需要变参的地方
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if "Source IP" in show_info_list_line[line_len_num]:              #***********
                table_1 = line_len_num
                break
            if ":" in show_info_list_line[line_len_num]:
                list1 = show_info_list_line[line_len_num].split(":")
                dict_value0[list1[0].strip()] = list1[1].strip()
        (whippletree_list_1,cut_del_1) = self.dut_show_autoget_whippletree(table_1,line_len,show_info_list_line)
        show_info_list_line.remove(show_info_list_line[cut_del_1])
        new_show_info_num = len(show_info_list_line)
        for line_len_num in range(0,new_show_info_num):
            if value_title in show_info_list_line[line_len_num]:              #***********
                table_3 = line_len_num
        dict_value1 = self.dut_show_autoget_form(table_3,new_show_info_num,value_title,whippletree_list_1,show_info_list_line)
        dict_value =dict(dict_value1.items()+dict_value0.items())
        return dict_value
    def dut_get_show_vxlan_server_tunnel(self,show_info):
        """
        Function:show vxlan server tunnel回显解析函数
        CLI命令:show vxlan server tunnel
        回显信息示例:
TOR1#show vxlan server tunnel

OverlayTunnel Counters: all 2 (static 0 dynamic 2)
OverlayTunnel Real Counters: all 2 (static 0 dynamic 2)
Interface              Mode    Type    Source          Destination     Protocol state
---------------------- ------- ------- --------------- --------------- --------------
OverlayTunnel 6145     VXLAN   Dynamic 1.1.1.1         2.2.2.2         UP            
OverlayTunnel 6146     VXLAN   Dynamic 1.1.1.1         3.3.3.3         UP            
TOR1#

        Returns:
{'1.1.1.1/2.2.2.2/Interface': 'OverlayTunnel 6145'
'//Interface': 'TOR1#'
'OverlayTunnel Real Counters': 'all 2'
'1.1.1.1/3.3.3.3/Mode': 'VXLAN'
'Source_list': ['1.1.1.1/2.2.2.2'
'1.1.1.1/3.3.3.3'
'/'], 'OverlayTunnel Counters/static': '0'
'1.1.1.1/3.3.3.3/Interface': 'OverlayTunnel 6146'
'//Mode': ''
'OverlayTunnel Counters': 'all 2'
'1.1.1.1/3.3.3.3/Type': 'Dynamic'
'OverlayTunnel Counters/dynamic': '2'
'1.1.1.1/2.2.2.2/Mode': 'VXLAN'
'1.1.1.1/2.2.2.2/Type': 'Dynamic'
'1.1.1.1/3.3.3.3/Protocol state': 'UP'
'//Type': ''
'OverlayTunnel Real Counters/static': '0'
'OverlayTunnel Real Counters/dynamic': '2'
'1.1.1.1/2.2.2.2/Protocol state': 'UP'
'//Protocol state': ''}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show vxlan server tunnel | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value0 = {}
        value_title="Source"     #需要变参的地方
        value_title_2="Destination"
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if "Source" in show_info_list_line[line_len_num]:              #***********
                if "Source IP" in show_info_list_line[line_len_num]:
                    value_title="Source IP"
                    value_title_2="Destination IP"
                table_1 = line_len_num
                break
            if ":" in show_info_list_line[line_len_num]:
                list1 = show_info_list_line[line_len_num].split(":")
                dict_value0[list1[0].strip()] = list1[1].strip()
            if re.match(r"(.*):(.*)\(static\s(\d+)\sdynamic\s(\d+)\)",show_info_list_line[line_len_num]):
                obj = re.match(r"(.*):(.*)\(static\s(\d+)\sdynamic\s(\d+)\)",show_info_list_line[line_len_num])
                dict_value0[obj.group(1).strip()] = obj.group(2).strip()
                dict_value0[obj.group(1).strip()+"/static"] = obj.group(3).strip()
                dict_value0[obj.group(1).strip()+"/dynamic"] = obj.group(4).strip()

        (whippletree_list_1,cut_del_1) = self.dut_show_autoget_whippletree(table_1,line_len,show_info_list_line)
        show_info_list_line.remove(show_info_list_line[cut_del_1])
        new_show_info_num = len(show_info_list_line)
        for line_len_num in range(0,new_show_info_num):
            if value_title in show_info_list_line[line_len_num]:              #***********
                table_3 = line_len_num
        dict_value1 = self.dut_show_autoget_form(table_3,new_show_info_num,value_title,whippletree_list_1,show_info_list_line,value_title_2)
        dict_value =dict(dict_value1.items()+dict_value0.items())
        return dict_value
    def dut_get_show_bgp_l2vpn_evpn_evi_num_macip(self,show_info):
        """
        Function:show bgp l2vpn evpn evi <num> mac-ip回显解析函数
        CLI命令:show bgp l2vpn evpn evi <num> mac-ip
        回显信息示例:
TOR1#show bgp l2vpn evpn evi 400 mac-ip

BGP table version is 315, local router ID is 1.1.1.1
Status codes: s suppressed, d damped, h history, * valid, > best, i - internal,
              S Stale, b - backup entry, m - multipath, f Filter
Origin codes: i - IGP, e - EGP, ? - incomplete

    Network          Next Hop            Metric      LocPrf      Weight Path
Route Distinguisher: 1.1.1.1:400 (Default for EVI 400)
*bi 2:0:48:0000.0000.0001:32:10.1.1.1/128
                     3.3.3.3                  0         100           0     i
*>                   0.0.0.0                                      32768     i
*bi 2:0:48:0000.0000.0001:32:20.1.1.1/128
                     3.3.3.3                  0         100           0     i
*>                   0.0.0.0                                      32768     i
*>  2:0:48:0011.9400.0002:32:10.1.1.2/128
                     0.0.0.0                                      32768     i
*>  2:0:48:0011.9400.0003:32:10.1.1.3/128
                     0.0.0.0                                      32768     i
*>  2:0:48:0011.9400.0004:32:10.1.1.4/128
                     0.0.0.0                                      32768     i
*>  2:0:48:0012.9400.0002:32:20.1.1.2/128
                     0.0.0.0                                      32768     i
*>  2:0:48:0012.9400.0003:32:20.1.1.3/128
                     0.0.0.0                                      32768     i
*>  2:0:48:0012.9400.0004:32:20.1.1.4/128 
10:58:51.244 INFO                                0.0.0.0                                      32768     i
*>  2:0:48:0021.9400.0002:32:10.2.1.2/128
                     2.2.2.2                                      32768     i
*>  2:0:48:0021.9400.0003:32:10.2.1.3/128
                     2.2.2.2                                      32768     i
*>  2:0:48:0021.9400.0004:32:10.2.1.4/128
                     2.2.2.2                                      32768     i
*>  2:0:48:0022.9400.0002:32:20.2.1.2/128
                     2.2.2.2                                      32768     i
*>  2:0:48:0022.9400.0003:32:20.2.1.3/128
                     2.2.2.2                                      32768     i
*>  2:0:48:0022.9400.0004:32:20.2.1.4/128
                     2.2.2.2                                      32768     i
*>i 2:0:48:5869.6c9d.b222:0:0.0.0.0/96
                     3.3.3.3                  0         100           0     i
*>  2:0:48:5869.6cc6.0f97:0:0.0.0.0/96
                     0.0.0.0                                      32768     i

Total number of prefixes 16

        Returns:
{"*>  2:0:48:0012.9400.0002:32:20.1.1.2/128/Next Hop": "0.0.0.0", "*>  2:0:48:5869.6cc6.0f97:0:0.0.0.0/96/LocPrf": "", "*bi 2:0:48:0000.0000.0001:32:10.1.1.1/128/LocPrf": "100", "*>  2:0:48:0011.9400.0002:32:10.1.1.2/128/Weight": "32768", "*>  2:0:48:0022.9400.0002:32:20.2.1.2/128/LocPrf": "", "*>  2:0:48:0022.9400.0004:32:20.2.1.4/128/Weight": "32768", "*>  2:0:48:5869.6cc6.0f97:0:0.0.0.0/96/Metric": "", "*>2:0:48:0000.0000.0001:32:10.1.1.1/128/Next Hop": "0.0.0.0", "*>  2:0:48:0022.9400.0004:32:20.2.1.4/128/LocPrf": "", "*>  2:0:48:0012.9400.0002:32:20.1.1.2/128/Weight": "32768", "10:58:51.244 INFO2:0:48:0012.9400.0004:32:20.1.1.4/128/Metric": "0.0", "*>  2:0:48:0022.9400.0002:32:20.2.1.2/128/Metric": "", "*>  2:0:48:0022.9400.0003:32:20.2.1.3/128/LocPrf": "", "10:58:51.244 INFO2:0:48:0012.9400.0004:32:20.1.1.4/128/Next Hop": "", "*>  2:0:48:0012.9400.0002:32:20.1.1.2/128/Metric": "", "*>  2:0:48:0012.9400.0002:32:20.1.1.2/128/Path": "i", "*>  2:0:48:0011.9400.0004:32:10.1.1.4/128/Metric": "", "*>  2:0:48:0021.9400.0004:32:10.2.1.4/128/LocPrf": "", "*>  2:0:48:0011.9400.0002:32:10.1.1.2/128/Metric": "", "*>  2:0:48:0021.9400.0003:32:10.2.1.3/128/Next Hop": "2.2.2.2", "*>  2:0:48:0011.9400.0003:32:10.1.1.3/128/Path": "i", "*>2:0:48:0000.0000.0001:32:10.1.1.1/128/LocPrf": "", "*>  2:0:48:0021.9400.0004:32:10.2.1.4/128/Metric": "", "*>  2:0:48:0012.9400.0003:32:20.1.1.3/128/LocPrf": "", "*>  2:0:48:0011.9400.0002:32:10.1.1.2/128/LocPrf": "", "*>  2:0:48:0011.9400.0002:32:10.1.1.2/128/Path": "i", "*>  2:0:48:0022.9400.0003:32:20.2.1.3/128/Next Hop": "2.2.2.2", "Route Distinguisher": "1.1.1.1:400", "*>  2:0:48:0022.9400.0004:32:20.2.1.4/128/Path": "i", "*bi 2:0:48:0000.0000.0001:32:20.1.1.1/128/Path": "i", "*>2:0:48:0000.0000.0001:32:10.1.1.1/128/Metric": "", "*bi 2:0:48:0000.0000.0001:32:20.1.1.1/128/Weight": "0", "*bi 2:0:48:0000.0000.0001:32:10.1.1.1/128/Next Hop": "3.3.3.3", "*>  2:0:48:0022.9400.0003:32:20.2.1.3/128/Metric": "", "10:58:51.244 INFO2:0:48:0012.9400.0004:32:20.1.1.4/128/Path": "32768     i", "10:58:51.244 INFO2:0:48:0012.9400.0004:32:20.1.1.4/128/Weight": "", "*>  2:0:48:0011.9400.0003:32:10.1.1.3/128/Weight": "32768", "*>  2:0:48:0022.9400.0002:32:20.2.1.2/128/Weight": "32768", "*>  2:0:48:5869.6cc6.0f97:0:0.0.0.0/96/Next Hop": "0.0.0.0", "*>  2:0:48:0011.9400.0002:32:10.1.1.2/128/Next Hop": "0.0.0.0", "*>  2:0:48:0022.9400.0004:32:20.2.1.4/128/Next Hop": "2.2.2.2", "*>  2:0:48:0011.9400.0004:32:10.1.1.4/128/Weight": "32768", "*>  2:0:48:0021.9400.0002:32:10.2.1.2/128/Metric": "", "*>2:0:48:0000.0000.0001:32:10.1.1.1/128/Weight": "32768", "*>  2:0:48:5869.6cc6.0f97:0:0.0.0.0/96/Weight": "32768", "*>  2:0:48:0021.9400.0004:32:10.2.1.4/128/Path": "i", "*>  2:0:48:0022.9400.0002:32:20.2.1.2/128/Next Hop": "2.2.2.2", "*>  2:0:48:0022.9400.0003:32:20.2.1.3/128/Path": "i", "*>  2:0:48:0012.9400.0002:32:20.1.1.2/128/LocPrf": "", "*>  2:0:48:0021.9400.0003:32:10.2.1.3/128/Metric": "", "*>2:0:48:0000.0000.0001:32:20.1.1.1/128/Path": "i", "*>  2:0:48:0021.9400.0004:32:10.2.1.4/128/Next Hop": "2.2.2.2", "*>  2:0:48:0011.9400.0004:32:10.1.1.4/128/Path": "i", "*>  2:0:48:0022.9400.0003:32:20.2.1.3/128/Weight": "32768", "*>2:0:48:0000.0000.0001:32:20.1.1.1/128/LocPrf": "", "*>  2:0:48:0022.9400.0002:32:20.2.1.2/128/Path": "i", "*bi 2:0:48:0000.0000.0001:32:20.1.1.1/128/Next Hop": "3.3.3.3", "BGP table version": "315", "*>i 2:0:48:5869.6c9d.b222:0:0.0.0.0/96/Next Hop": "3.3.3.3", "*>i 2:0:48:5869.6c9d.b222:0:0.0.0.0/96/Path": "i", "10:58:51.244 INFO2:0:48:0012.9400.0004:32:20.1.1.4/128/LocPrf": ".0.0", "*>i 2:0:48:5869.6c9d.b222:0:0.0.0.0/96/Weight": "0", "*>  2:0:48:0012.9400.0003:32:20.1.1.3/128/Metric": "", "*>  2:0:48:0021.9400.0002:32:10.2.1.2/128/Weight": "32768", "*>  2:0:48:0011.9400.0003:32:10.1.1.3/128/Next Hop": "0.0.0.0", "*>  2:0:48:0012.9400.0003:32:20.1.1.3/128/Next Hop": "0.0.0.0", "Default for EVI": "400", "Total number of prefixes": "16", "*>i 2:0:48:5869.6c9d.b222:0:0.0.0.0/96/LocPrf": "100", "*>2:0:48:0000.0000.0001:32:20.1.1.1/128/Weight": "32768", "local router ID": "1.1.1.1", "*>i 2:0:48:5869.6c9d.b222:0:0.0.0.0/96/Metric": "0", "Network_list": ["*bi 2:0:48:0000.0000.0001:32:10.1.1.1/128", "*>2:0:48:0000.0000.0001:32:10.1.1.1/128", "*bi 2:0:48:0000.0000.0001:32:20.1.1.1/128", "*>2:0:48:0000.0000.0001:32:20.1.1.1/128", "*>  2:0:48:0011.9400.0002:32:10.1.1.2/128", "*>  2:0:48:0011.9400.0003:32:10.1.1.3/128", "*>  2:0:48:0011.9400.0004:32:10.1.1.4/128", "*>  2:0:48:0012.9400.0002:32:20.1.1.2/128", "*>  2:0:48:0012.9400.0003:32:20.1.1.3/128", "10:58:51.244 INFO2:0:48:0012.9400.0004:32:20.1.1.4/128", "*>  2:0:48:0021.9400.0002:32:10.2.1.2/128", "*>  2:0:48:0021.9400.0003:32:10.2.1.3/128", "*>  2:0:48:0021.9400.0004:32:10.2.1.4/128", "*>  2:0:48:0022.9400.0002:32:20.2.1.2/128", "*>  2:0:48:0022.9400.0003:32:20.2.1.3/128", "*>  2:0:48:0022.9400.0004:32:20.2.1.4/128", "*>i 2:0:48:5869.6c9d.b222:0:0.0.0.0/96", "*>  2:0:48:5869.6cc6.0f97:0:0.0.0.0/96"], "*>2:0:48:0000.0000.0001:32:20.1.1.1/128/Next Hop": "0.0.0.0", "*bi 2:0:48:0000.0000.0001:32:20.1.1.1/128/Metric": "0", "*bi 2:0:48:0000.0000.0001:32:20.1.1.1/128/LocPrf": "100", "*>  2:0:48:0021.9400.0003:32:10.2.1.3/128/Weight": "32768", "*>  2:0:48:0012.9400.0003:32:20.1.1.3/128/Path": "i", "*>  2:0:48:0021.9400.0003:32:10.2.1.3/128/Path": "i", "*>  2:0:48:0012.9400.0003:32:20.1.1.3/128/Weight": "32768", "*bi 2:0:48:0000.0000.0001:32:10.1.1.1/128/Metric": "0", "*bi 2:0:48:0000.0000.0001:32:10.1.1.1/128/Path": "i", "*>  2:0:48:0011.9400.0003:32:10.1.1.3/128/Metric": "", "*>  2:0:48:0021.9400.0004:32:10.2.1.4/128/Weight": "32768", "*>  2:0:48:0022.9400.0004:32:20.2.1.4/128/Metric": "", "*>  2:0:48:5869.6cc6.0f97:0:0.0.0.0/96/Path": "i", "*>  2:0:48:0021.9400.0002:32:10.2.1.2/128/LocPrf": "", "*>2:0:48:0000.0000.0001:32:10.1.1.1/128/Path": "i", "*>  2:0:48:0021.9400.0003:32:10.2.1.3/128/LocPrf": "", "*bi 2:0:48:0000.0000.0001:32:10.1.1.1/128/Weight": "0", "*>2:0:48:0000.0000.0001:32:20.1.1.1/128/Metric": "", "*>  2:0:48:0011.9400.0004:32:10.1.1.4/128/LocPrf": "", "*>  2:0:48:0011.9400.0004:32:10.1.1.4/128/Next Hop": "0.0.0.0", "*>  2:0:48:0021.9400.0002:32:10.2.1.2/128/Next Hop": "2.2.2.2", "*>  2:0:48:0021.9400.0002:32:10.2.1.2/128/Path": "i", "*>  2:0:48:0011.9400.0003:32:10.1.1.3/128/LocPrf": ""}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bgp l2vpn evpn evi <num> mac-ip | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_bgp_network(show_info)
    def dut_get_show_bgp_l2vpn_evpn_evi_num_inclusivemulticast(self,show_info):
        """
        Function:show bgp l2vpn evpn evi <num> inclusive-multicast回显解析函数
        CLI命令:show bgp l2vpn evpn evi <num> inclusive-multicast
        回显信息示例:
TOR1#show bgp l2vpn evpn evi 10 inclusive-multicast

BGP table version is 1001, local router ID is 100.2.1.1
Status codes: s suppressed, d damped, h history, * valid, > best, i - internal,
              S Stale, b - backup entry, m - multipath, f Filter
Origin codes: i - IGP, e - EGP, ? - incomplete

    Network          Next Hop            Metric      LocPrf      Weight Path
Route Distinguisher: 100.2.1.1:10 (Default for EVI 10)
*>  3:0:32:1.1.1.1/72
                     1.1.1.1                                      32768     i
*>  3:0:32:2.2.2.2/72
                     2.2.2.2                  0                       0 2 2 i

        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bgp l2vpn evpn evi <num> inclusive-multicast | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_bgp_network(show_info)
    def dut_get_show_ipv6_neighbors_overlayrouter_num(self,show_info):
        """
        Function:show ipv6 neighbors OverlayRouter <num>回显解析函数
        CLI命令:show ipv6 neighbors OverlayRouter <num>
        回显信息示例:
S62H-82#show ipv6 neighbors OverlayRouter 2 

IPv6 Address                            Linklayer Addr Interface
FE80::200:FF:FE00:11                    0000.0000.0011 OverlayRouter 2       
S62H-82#

        Returns:
{'ip_address_list': ['FE80::200:FF:FE00:11'], 'FE80::200:FF:FE00:11/Linklayer Addr': '0000.0000.0011'
'FE80::200:FF:FE00:11/Interface': 'OverlayRouter 2'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 neighbors OverlayRouter <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        #value_title定义主键的id，即列表中的唯一值
        ###########################################
        value_title="IPv6 Address"
        length_list = []
        dict_value={}
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split

        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        ##########################################################################
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        ##########################################################################
        length_list = [40,15,32]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        # #print dut_info_split
        ######################################################################
        #创建空列表用于保存主键内容
        ######################################################################
        ip_address_list = []
        ######################################################################
        #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        ######################################################################
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            #获取表头，用于组合
            if list_len[0]==value_title:
                title = list_len
            elif list_len[0]!=value_title:
                #生成字典
                ip_address_list.append(list_len[0])
                for s in range(1,length_list_len):
                    #将主键与表名以/分隔组合成为字典的key
                    key_name = '%s/%s' % (list_len[0],title[s])
                    dict_value[key_name]=list_len[s]
            #将保存有主键值的列表以ip_address_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value["ip_address_list"]=ip_address_list
        return dict_value
    def dut_get_show_ip_vrf_count(self,show_info):
        """
        Function:show ip vrf count回显解析函数
        CLI命令:show ip vrf count
        回显信息示例:
Ruijie#show ip vrf count 
  VRF Limit:                    1000
  Count of in use instances:    0
  Count of remaining instances: 1000
Ruijie#

        Returns:
{'Count of remaining instances': '1000'
'Count of in use instances': '0'
'VRF Limit': '1000'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip vrf count | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_radius_parameter(self,show_info):
        """
        Function:show radius parameter回显解析函数
        CLI命令:show radius parameter
        回显信息示例:
Ruijie#show radius parameter 

Server Timeout:  5 Seconds
Server Deadtime: 0 Minutes
Server Retries:  3
Server Dead Critera:
    Time:    60 Seconds
    Tries:   10
mgmt enable: true
multi-mgmt enable: false
vrf enable: true

        Returns:
{'Server Retries': '3'
'mgmt enable': 'true'
'Server Deadtime': '0 Minutes'
'vrf enable': 'true'
'Tries': '10'
'Time': '60 Seconds'
'Server Dead Critera': ''
'Server Timeout': '5 Seconds'
'multi-mgmt enable': 'false'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show radius parameter | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_password_policy(self,show_info):
        """
        Function:show password policy回显解析函数
        CLI命令:show password policy
        回显信息示例:
Ruijie#show password policy 
Global password policy configurations:
 Password encryption:                 Disabled
 Password strong-check:               Disabled
 Password min-size:                   Disabled 
 Password life-cycle:                 Disabled 
 Password no-repeat-times:            Disabled 

Ruijie#

        Returns:
{'Password encryption': 'Disabled'
'Global password policy configurations': ''
'Password life-cycle': 'Disabled'
'Password strong-check': 'Disabled'
'Password no-repeat-times': 'Disabled'
'Password min-size': 'Disabled'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show password policy | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_ipv6_dhcp_relaydestination_all(self,show_info):
        """
        Function:show ipv6 dhcp relay destination all回显解析函数
        CLI命令:show ipv6 dhcp relay destination all
        回显信息示例:
AC3#show ipv6 dhcp relay destination all
Interface:GigabitEthernet 0/3
Destination address(es)                 Output Interface
2015:19:2::2                            GigabitEthernet 0/4

        Returns:
{"Interface/GigabitEthernet 0/3/Output Interface": "GigabitEthernet 0/4"
"interface_list": ["GigabitEthernet 0/3"], "Interface/GigabitEthernet 0/3/Destination address(es)": "2015:19:2::2"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 dhcp relay destination all | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value1={}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if "Interface:" in show_info_list_line[line_len_num]:              #***********
                list1 = show_info_list_line[line_len_num].split(":")
                dict_value1["Interface:"]=list1[1].strip()
        dict_value2 = self.dut_show_autoget_blank_list(show_info,"Destination address(es)")
        dict_value =dict(dict_value1.items()+dict_value2.items())
        return dict_value
    def dut_get_show_bgp_gr_status(self,show_info):
        """
        Function:show bgp gr status回显解析函数
        CLI命令:show bgp gr status
        回显信息示例:
dut1#show bgp gr status 
Current BGP Status: GR END

        Returns:
{'Current BGP Status': 'GR END'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bgp gr status | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_virtualac_link_port(self,show_info):
        """
        Function:show virtual-ac link port回显解析函数
        CLI命令:show virtual-ac link port
        回显信息示例:
AC#show virtual-ac link port 
device 1:
Port                          AP    State Peer-port                     Rx                    Tx                    Uptime         
----------------------------------------------------------------------------------------------------------------------------
TenGigabitEthernet 1/0/3      1     OK    -                             25398237              6104174               3d,0h,39m      
TenGigabitEthernet 1/0/4      1     OK    -                             30051795              4318470               3d,0h,39m      
TenGigabitEthernet 1/0/5      1     OK    -                             3499469               4318495               3d,0h,39m      

device 2:
Port                          AP    State Peer-port                     Rx                    Tx                    Uptime         
----------------------------------------------------------------------------------------------------------------------------
TenGigabitEthernet 2/0/4      1     OK    -                             3404649               4046507               3d,0h,17m      
TenGigabitEthernet 2/0/3      1     OK    -                             3395943               3266789               3d,0h,17m      
TenGigabitEthernet 2/0/5      1     OK    -                             5469453               26064262              3d,0h,17m      

device 3:
Port                          AP    State Peer-port                     Rx                    Tx                    Uptime         
----------------------------------------------------------------------------------------------------------------------------
TenGigabitEthernet 3/0/3      1     OK    -                             1574139               4258790               3d,0h,20m      
TenGigabitEthernet 3/0/5      1     OK    -                             1139187               3358422               3d,0h,20m      
TenGigabitEthernet 3/0/4      1     OK    -                             9574766               25166469              3d,0h,20m      

AC#

        Returns:
{'device 2/TenGigabitEthernet 2/0/5/Rx': '5469453'
'device 3/TenGigabitEthernet 3/0/3/State': 'OK'
'device 1/TenGigabitEthernet 1/0/5/Tx': '4318495'
'device 2/TenGigabitEthernet 2/0/5/Peer-port': '-'
'device 2/TenGigabitEthernet 2/0/5/Uptime': '3d,0h,17m'
'device 3/TenGigabitEthernet 3/0/5/Tx': '3358422'
'device 2/TenGigabitEthernet 2/0/4/Uptime': '3d,0h,17m'
'device 1/TenGigabitEthernet 1/0/4/Uptime': '3d,0h,39m'
'device 1/TenGigabitEthernet 1/0/5/Rx': '3499469'
'device 1/TenGigabitEthernet 1/0/4/Tx': '4318470'
'device 1/TenGigabitEthernet 1/0/4/Rx': '30051795'
'device 3/TenGigabitEthernet 3/0/3/AP': '1'
'device 2/TenGigabitEthernet 2/0/3/State': 'OK'
'device 1/TenGigabitEthernet 1/0/4/AP': '1'
'device 2/TenGigabitEthernet 2/0/4/State': 'OK'
'device 2/TenGigabitEthernet 2/0/3/Peer-port': '-'
'device 3/TenGigabitEthernet 3/0/3/Peer-port': '-'
'device 3/TenGigabitEthernet 3/0/5/AP': '1'
'device 2/TenGigabitEthernet 2/0/5/AP': '1'
'device 2/TenGigabitEthernet 2/0/4/Peer-port': '-'
'device 1/TenGigabitEthernet 1/0/5/AP': '1'
'device 3/TenGigabitEthernet 3/0/4/AP': '1'
'device 1/TenGigabitEthernet 1/0/4/State': 'OK'
'device 1/TenGigabitEthernet 1/0/5/Uptime': '3d,0h,39m'
'device 2/TenGigabitEthernet 2/0/5/Tx': '26064262'
'device 1/TenGigabitEthernet 1/0/4/Peer-port': '-'
'device 3/TenGigabitEthernet 3/0/5/Rx': '1139187'
'device 3/TenGigabitEthernet 3/0/3/Rx': '1574139'
'device 1/TenGigabitEthernet 1/0/3/Rx': '25398237'
'device 3/TenGigabitEthernet 3/0/3/Uptime': '3d,0h,20m'
'device 3/TenGigabitEthernet 3/0/4/Rx': '9574766'
'device 2/TenGigabitEthernet 2/0/3/Tx': '3266789'
'device 1/TenGigabitEthernet 1/0/3/Peer-port': '-'
'device 1/TenGigabitEthernet 1/0/3/Uptime': '3d,0h,39m'
'device 3/TenGigabitEthernet 3/0/4/Tx': '25166469'
'device 3/TenGigabitEthernet 3/0/5/State': 'OK'
'device 2/TenGigabitEthernet 2/0/3/Rx': '3395943'
'device 3/TenGigabitEthernet 3/0/5/Uptime': '3d,0h,20m'
'device 1/TenGigabitEthernet 1/0/5/State': 'OK'
'device 2/TenGigabitEthernet 2/0/4/Tx': '4046507'
'device 1/TenGigabitEthernet 1/0/5/Peer-port': '-'
'device 3/TenGigabitEthernet 3/0/3/Tx': '4258790'
'device 3/TenGigabitEthernet 3/0/4/Uptime': '3d,0h,20m'
'device 2/TenGigabitEthernet 2/0/5/State': 'OK'
'device 1/TenGigabitEthernet 1/0/3/AP': '1'
'device 3_portlist': ['TenGigabitEthernet 3/0/3'], 'device 1/TenGigabitEthernet 1/0/3/State': 'OK'
'device 1_portlist': ['TenGigabitEthernet 1/0/3'], 'device 2/TenGigabitEthernet 2/0/3/AP': '1'
'device 2/TenGigabitEthernet 2/0/4/AP': '1'
'device 3/TenGigabitEthernet 3/0/5/Peer-port': '-'
'device 2/TenGigabitEthernet 2/0/3/Uptime': '3d,0h,17m'
'device 1/TenGigabitEthernet 1/0/3/Tx': '6104174'
'device 2/TenGigabitEthernet 2/0/4/Rx': '3404649'
'device 2_portlist': ['TenGigabitEthernet 2/0/4'], 'device 3/TenGigabitEthernet 3/0/4/State': 'OK'
'device 3/TenGigabitEthernet 3/0/4/Peer-port': '-'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show virtual-ac link port | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}  # 定义字典
        templist = []
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for i in range(len(show_info_split)):
            if re.match(r'^-----',show_info_split[i].strip()):
                show_info_split[i] = ' '
        # 去除空行
        for i in range(len(show_info_split)):
            if not show_info_split[i].strip() == '':
                templist.append(show_info_split[i])
        for i in range(len(templist)):
            if re.match(r'^device',templist[i].strip()):
                device_num = templist[i].strip().strip(':')
                port_list = []
                flag=0
                continue
            if re.match(r'^Port',templist[i].strip()):
                tt1 = templist[i].split(' ')
                for j in range(len(tt1)):
                    tt1[j] = tt1[j].strip()
                while '' in tt1:
                    tt1.remove('')
                continue
            tt2 = templist[i].split('  ')
            for j in range(len(tt2)):
                tt2[j] = tt2[j].strip()
            while '' in tt2:
                tt2.remove('')
            for k in range(len(tt2)):
                if k !=0:
                    key = device_num.strip() + '/' + tt2[0].strip() + '/' + tt1[k].strip()
                    dict_value[key] = tt2[k].strip()
                    if flag ==0 :
                        port_list.append(tt2[0].strip())
                        flag=1
            dict_value[device_num+"_portlist"] = port_list
        return dict_value
    def dut_get_show_vxlan_nd_suppress(self,show_info):
        """
        Function:show vxlan nd suppress回显解析函数
        CLI命令:show vxlan nd suppress
        回显信息示例:
Ruijie#show vxlan nd suppress 
GLOBAL ND-SUPPRESS: OFF

ND Suppress Detail:
VXLAN      VNI Configure     Effect Configure  
---------- ----------------- ----------------- 
2            -                 -               
13           -                 -               
100        Enable            Enable            
2000         -                 -

        Returns:
{'13/VNI Configure': '-'
'2/Effect Configure': '-'
'2000/Effect Configure': '-'
'2000/VNI Configure': '-'
'100/Effect Configure': 'Enable'
'2/VNI Configure': '-'
'13/Effect Configure': '-'
'100/VNI Configure': 'Enable'
'GLOBAL ND-SUPPRESS': 'OFF'
'VXLAN_list': ['2'
'13'
'100'
'2000']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show vxlan nd suppress | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value0 = {}
        value_title="VXLAN"     #需要变参的地方
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if value_title in show_info_list_line[line_len_num]:              #***********
                table_1 = line_len_num
            if "GLOBAL ND-SUPPRESS" in show_info_list_line[line_len_num]:
                list1 = show_info_list_line[line_len_num].split(":")
                dict_value0[list1[0].strip()] = list1[1].strip()
        (whippletree_list_1,cut_del_1) = self.dut_show_autoget_whippletree(table_1,line_len,show_info_list_line)
        show_info_list_line.remove(show_info_list_line[cut_del_1])
        new_show_info_num = len(show_info_list_line)
        for line_len_num in range(0,new_show_info_num):
            if value_title in show_info_list_line[line_len_num]:              #***********
                table_3 = line_len_num
        dict_value1 = self.dut_show_autoget_form(table_3,new_show_info_num,value_title,whippletree_list_1,show_info_list_line)
        dict_value =dict(dict_value1.items()+dict_value0.items())
        return dict_value
    def dut_get_show_bgp_all_neighbors_ip(self,show_info):
        """
        Function:show bgp all neighbors  x.x.x.x回显解析函数
        CLI命令:show bgp all neighbors  x.x.x.x
        回显信息示例:
DUT1#show bgp all neighbors 10.1.1.2

For address family: IPv4 Unicast
BGP neighbor is 10.1.1.2, remote AS 200, local AS 100, external link
 Member of peer-group ebgp for session parameters
  BGP version 4, remote router ID 2.2.2.2
  BGP state = Established, up for 18:08:54
  Last read 18:08:52, hold time is 180, keepalive interval is 60 seconds
  Configured hold time is 30, keepalive interval is 10 seconds
  Neighbor capabilities:
    Route refresh: advertised and received (old and new)
    Four-octets ASN Capability: advertised and received
    Address family IPv4 Unicast: advertised and received
    Graceful Restart Capability: advertised and received
      Remote Restart timer is 120 seconds
      Address families preserved by peer:
        IPv4 Unicast (was not preserved)
        IPv6 Unicast (was not preserved)
        L2VPN EVPN (was not preserved)
  Received 1252 messages, 0 notifications, 0 in queue
    open message:1 update message:3 keepalive message:1248
    refresh message:0 dynamic cap:0 notifications:0
  Sent 1261 messages, 0 notifications, 0 in queue
    open message:1 update message:3 keepalive message:1257
    refresh message:0 dynamic cap:0 notifications:0
  Route refresh request: received 0, sent 0
  Minimum time between advertisement runs is 0 seconds

 For address family: IPv4 Unicast
  BGP table version 6, neighbor version 6
  Index 0, Offset 0, Mask 0x1
  ebgp peer-group member
  113 update-group member
  5 accepted prefixes
  10 announced prefixes in update-group 113

 Connections established 2; dropped 1
 Graceful-restart Status:
  Remote restart-time is 120 sec

Local host: 10.1.1.1, Local port: 33779
Foreign host: 10.1.1.2, Foreign port: 179
Sock_fd: 35
Nexthop: 10.1.1.1
Last Reset: 18:09:06, due to BGP Notification sent
Notification Error Message: (Cease/Other Configuration Change.)

DUT1#
DUT1#sh bgp all nei 10.1.1.2

For address family: IPv4 Unicast
BGP neighbor is 10.1.1.2, remote AS 200, local AS 100, external link
 Member of peer-group ebgp for session parameters
  BGP version 4, remote router ID 2.2.2.2
  BGP state = Established, up for 00:05:13
  Last read 00:05:11, hold time is 180, keepalive interval is 60 seconds
  Neighbor capabilities:
    Route refresh: advertised and received (old and new)
    Four-octets ASN Capability: advertised and received
    Address family IPv4 Unicast: advertised and received
    Graceful Restart Capability: advertised and received
      Remote Restart timer is 120 seconds
      Address families preserved by peer:
        IPv4 Unicast (was not preserved)
        IPv6 Unicast (was not preserved)
        L2VPN EVPN (was not preserved)
  Received 11 messages, 0 notifications, 0 in queue
    open message:1 update message:3 keepalive message:7
    refresh message:0 dynamic cap:0 notifications:0
  Sent 12 messages, 0 notifications, 0 in queue
    open message:1 update message:3 keepalive message:8
    refresh message:0 dynamic cap:0 notifications:0
  Route refresh request: received 0, sent 0
  Minimum time between advertisement runs is 0 seconds

 For address family: IPv4 Unicast
  BGP table version 6, neighbor version 6
  Index 0, Offset 0, Mask 0x1
  ebgp peer-group member
  14 update-group member
  5 accepted prefixes
  10 announced prefixes in update-group 14

 Connections established 2; dropped 1
 Graceful-restart Status:
  Remote restart-time is 120 sec

Local host: 10.1.1.1, Local port: 37438
Foreign host: 10.1.1.2, Foreign port: 179
Sock_fd: 35
Nexthop: 10.1.1.1
Last Reset: 00:05:25, due to BGP Notification sent
Notification Error Message: (Cease/Other Configuration Change.)

        Returns:
{'Graceful Restart Capability': 'advertised and received'
'Foreign host': '10.1.1.2'
'Four-octets ASN Capability': 'advertised and received'
'open message': '1 update message:3 keepalive message:8'
'Foreign port': '179'
'keepalive interval': '60 seconds'
'Remote restart-time': '120 sec'
'Route refresh': 'advertised and received (old and new)'
'Address family IPv4 Unicast': 'advertised and received'
'Local port': '37438'
'For address family': 'IPv4 Unicast'
'refresh message': '0 dynamic cap:0 notifications:0'
'hold time': '180'
'Configured hold time': '30'
'Connections establ': 'hed 2; dropped 1'
'Configured hold time/keepalive interval': '10 seconds'
'Route refresh request': 'received 0'
'Remote Restart timer': '120 seconds'
'Nexthop': '10.1.1.1'
'Notification Error Message': '(Cease/Other Configuration Change.)'
'BGP state': 'Established'
'Last Reset': '00:05:25'
'Local host': '10.1.1.1'
'Neighbor capabilities': ''
'Sock_fd': '35'
'BGP neighbor': '10.1.1.2'
'Graceful-restart Status': ''
'Address families preserved by peer': ''}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bgp all neighbors  x.x.x.x | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value= {}
        flag = 0
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        for value in show_info_list_line:
            if "," in value :
                list1 = value.split(",")
                for list1_value in list1:
                    if "Last read" in list1_value or "up for" in list1_value:
                        pass
                    elif list1_value.count(":") == 1 :
                        list2 = list1_value.split(":")
                        dict_value[list2[0].strip()] = list2[1].strip()
                    elif list1_value.count("=") == 1 :
                        list2 = list1_value.split("=",1)
                        dict_value[list2[0].strip()] = list2[1].strip()
                    elif "is" in list1_value :
                        list3 = list1_value.split("is")
                        if flag == 1 :
                            dict_value["Configured hold time"+"/"+list3[0].strip()] = list3[1].strip()
                            flag = 0
                        else:
                            dict_value[list3[0].strip()] = list3[1].strip()
                        if "Configured hold time" in list1_value:
                            flag = 1
                    elif list1_value.count(":") > 1 :
                        list2 = list1_value.split(":",1)
                        dict_value[list2[0].strip()] = list2[1].strip()
            elif value.count(":") == 1 :
                list4 = value.split(":")
                dict_value[list4[0].strip()] = list4[1].strip()
            elif value.count(":") > 1 :
                list4 = value.split(":",1)
                dict_value[list4[0].strip()] = list4[1].strip()
            elif value.count("is") == 1 :
                list5 = value.split("is")
                dict_value[list5[0].strip()] = list5[1].strip()
        return dict_value
    def dut_get_show_bgp_all_neighbors_ipv6(self,show_info):
        """
        Function:show bgp all neighbors <ipv6>回显解析函数
        CLI命令:show bgp all neighbors <ipv6>
        回显信息示例:
DUT1#show bgp all neighbors 10::2
For address family: IPv6 Unicast
BGP neighbor is 10::2, remote AS 200, local AS 100, external link
 Member of peer-group ebgpv6 for session parameters
  BGP version 4, remote router ID 2.2.2.2
  BGP state = Established, up for 00:31:40
  Last read 00:29:47, hold time is 180, keepalive interval is 60 seconds
  Neighbor capabilities:
    Route refresh: advertised and received (old and new)
    Four-octets ASN Capability: advertised and received
    Address family IPv6 Unicast: advertised and received
    Graceful Restart Capability: advertised and received
      Remote Restart timer is 120 seconds
      Address families preserved by peer:
        IPv4 Unicast (was not preserved)
        IPv6 Unicast (was not preserved)
        L2VPN EVPN (was not preserved)
  Received 41 messages, 0 notifications, 0 in queue
    open message:1 update message:4 keepalive message:36
    refresh message:0 dynamic cap:0 notifications:0
  Sent 42 messages, 0 notifications, 0 in queue
    open message:1 update message:4 keepalive message:37
    refresh message:0 dynamic cap:0 notifications:0
  Route refresh request: received 0, sent 0
  Minimum time between advertisement runs is 30 seconds
  Minimum time between as origination advertisement runs is 1 seconds
 For address family: IPv6 Unicast
  BGP table version 5, neighbor version 5
  Index 3, Offset 0, Mask 0x8
  ebgpv6 peer-group member
  50 update-group member
  5 accepted prefixes
  11 announced prefixes in update-group 50

 Connections established 2; dropped 1
 Graceful-restart Status:
  Remote restart-time is 120 sec

Local host: 10::1, Local port: 56138
Foreign host: 10::2, Foreign port: 179
Sock_fd: 39
Nexthop global: 10::1
Nexthop local: fe80::5a69:6cff:fe9d:b264
BGP connection: shared network
Last Reset: 00:31:52, due to BGP Notification sent
Notification Error Message: (Cease/Other Configuration Change.)

DUT1#con

        Returns:
{"Four-octets ASN Capability": "advertised and received"
"Foreign host": "10::2"
"Graceful Restart Capability": "advertised and received"
"open message": "1 update message:4 keepalive message:37"
"BGP state": "Established"
"keepalive interval": "60 seconds"
"BGP connection": "shared network"
"Remote restart-time": "120 sec"
"Address family IPv6 Unicast": "advertised and received"
"Route refresh": "advertised and received (old and new)"
"Connections establ": "hed 2; dropped 1"
"Local port": "56138"
"For address family": "IPv6 Unicast"
"refresh message": "0 dynamic cap:0 notifications:0"
"hold time": "180"
"Nexthop global": "10::1"
"Nexthop local": "fe80::5a69:6cff:fe9d:b264"
"Route refresh request": "received 0"
"Remote Restart timer": "120 seconds"
"Notification Error Message": "(Cease/Other Configuration Change.)"
"Foreign port": "179"
"Last Reset": "00:31:52"
"Local host": "10::1"
"Neighbor capabilities": ""
"Sock_fd": "39"
"BGP neighbor": "10::2"
"Graceful-restart Status": ""
"Address families preserved by peer": ""}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bgp all neighbors <ipv6> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_bgp_all_neighbors_ip(show_info)
    def dut_get_show_bgp_all_updategroup(self, show_info):
        """
        Function:show bgp all  update-group回显解析函数
        CLI命令:show bgp all  update-group
        回显信息示例:
DUT3#show bgp all  update-group 
BGP version 4 update-group 8 (VRF: Default), external, Address Family: IPv4 Unicast
  Update message formated 19, replicated 32
  Minimum route advertisement interval is 0 seconds
  Minimum AS origination interval is 1 seconds
  NEXT_HOP is always this router
  Format state: Current working
                Refresh blocked
  Has 2 members:
   30.1.1.1          40.1.1.1

        Returns:
{"update-group 8/Update message formated": "19"
"update-group 8/has_members": ["30.1.1.1"
"40.1.1.1"], "update-group 8/Minimum AS origination interval": "1 seconds"
"update-group 8/Minimum route advert": "ement interval is 0 seconds"
"update-group 8/replicated": "32"
"update-group 8/NEXT_HOP": "always this router"
"update_group_list": ["update-group 8"], "update-group 8/Format state": ["Current working"
"Refresh blocked"]}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bgp all  update-group | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        flag2 = 0
        flag = 0
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        list_Format = []
        list_Has = []
        update_group_list=[]
        for value in show_info_list_line:
            if "BGP version"in value:
                flag = 0
                flag2 = 0
                list1 = value.split(",")
                for list1_value in list1:
                    if "BGP version" in list1_value:
                        obj1 =  re.match("BGP version \d(.*)\(VRF: Default\)",value.strip())
                        value_title= obj1.group(1).strip()
                        update_group_list.append(value_title)
            elif "Update message formated" in value:
                obj2 = re.match("Update message formated(.*), replicated(.*)", value.strip())
                dict_value[value_title + "/" + "Update message formated"] = obj2.group(1).strip()
                dict_value[value_title + "/" + "replicated"] = obj2.group(2).strip()
            elif "is" in value :
                list_is = value.split("is",1)
                dict_value[value_title+"/"+list_is[0].strip()] = list_is[1].strip()
            elif "Format state:" in value:
                new_list2 = value.split(":")
                list_Format.append(new_list2[1].strip())
                flag = 1
            elif flag == 1 and " Has" not in value :
                list_Format.append(value.strip())
            elif "Has" in value:
                dict_value[value_title + "/" +"Format state"] = list_Format
                flag = 0
                flag2 = 1
            elif flag2 == 1 :
                list_ip = value.split()
                for value_ip in list_ip :
                    list_Has.append(value_ip.strip())
        dict_value[value_title + "/" +"has_members"]=list_Has
        dict_value["update_group_list"]=update_group_list
        return dict_value
    def dut_get_show_bgp_all_updategroup_num(self,show_info):
        """
        Function:show bgp all update-group <num>回显解析函数
        CLI命令:show bgp all update-group <num>
        回显信息示例:
DUT1# show bgp all update-group 7
BGP version 4 update-group 7 (VRF: Default), external, Address Family: IPv4 Unicast
  Update message formated 12, replicated 34
  Minimum route advertisement interval is 0 seconds
  Minimum AS origination interval is 1 seconds
  Local AS 1(using Peer's Local AS, no-prepend)
  Enable non-stop-route
  Format state: Current working
                Refresh blocked
  Has 3 members:
   10.1.1.2          20.1.1.2          30.1.1.2

        Returns:
{"update-group 7/Format state": ["Current working"
"Refresh blocked"], "update-group 7/Minimum route advert": "ement interval is 0 seconds"
"update-group 7/Update message formated": "12"
"update-group 7/has_members": ["10.1.1.2"
"20.1.1.2"
"30.1.1.2"], "update-group 7/replicated": "34"
"update_group_list": ["update-group 7"], "update-group 7/Minimum AS origination interval": "1 seconds"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bgp all update-group <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_bgp_all_updategroup(show_info)
    def dut_get_show_bgp_all_updategroup_ip(self,show_info):
        """
        Function:show bgp all update-group  x.x.x.x回显解析函数
        CLI命令:show bgp all update-group  x.x.x.x
        回显信息示例:
DUT1#show bgp all update-group 10.1.1.2
BGP version 4 update-group 7 (VRF: Default), external, Address Family: IPv4 Unicast
  Update message formated 12, replicated 34
  Minimum route advertisement interval is 0 seconds
  Minimum AS origination interval is 1 seconds
  Local AS 1(using Peer's Local AS, no-prepend)
  Enable non-stop-route
  Format state: Current working
                Refresh blocked
  Has 3 members:
   10.1.1.2          20.1.1.2          30.1.1.2

        Returns:
{"update-group 7/Format state": ["Current working"
"Refresh blocked"], "update-group 7/Minimum route advert": "ement interval is 0 seconds"
"update-group 7/Update message formated": "12"
"update-group 7/has_members": ["10.1.1.2"
"20.1.1.2"
"30.1.1.2"], "update-group 7/replicated": "34"
"update_group_list": ["update-group 7"], "update-group 7/Minimum AS origination interval": "1 seconds"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bgp all update-group  x.x.x.x | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_bgp_all_updategroup(show_info)

    def dut_get_show_ipv6_neighbors_vrf_word(self,show_info):
        """
        Function:show ipv6 neighbors vrf (word)回显解析函数
        CLI命令:show ipv6 neighbors vrf (word)
        回显信息示例:
TOR2#show ipv6 neighbors vrf (vrf1)

IPv6 Address                            Linklayer Addr Interface
2030::1                                 5869.6c9d.b4ec OverlayRouter 30      
2060::1                                 5869.6c9d.b4ec VLAN 100              
FE80::5A69:6CFF:FE9D:B4EC               5869.6c9d.b4ec VLAN 100              
FE80::5A69:6CFF:FE9D:B4EC               5869.6c9d.b4ec OverlayRouter 30

        Returns:
TOR2#show ipv6 neighbors vrf (vrf1)

IPv6 Address                            Linklayer Addr Interface
2030::1                                 5869.6c9d.b4ec OverlayRouter 30      
2060::1                                 5869.6c9d.b4ec VLAN 100              
FE80::5A69:6CFF:FE9D:B4EC               5869.6c9d.b4ec VLAN 100              
FE80::5A69:6CFF:FE9D:B4EC               5869.6c9d.b4ec OverlayRouter 30
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 neighbors vrf (word) | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_ipv6_neighbors_overlayrouter_num(show_info)
    def dut_get_show_ipv6_ref_route(self,show_info):
        """
        Function:show ipv6 ref route回显解析函数
        CLI命令:show ipv6 ref route
        回显信息示例:
RF_SW1#show ipv6 ref route

Codes: * - default route
 prefix/len                                   weight  path-id next_hop                               interface
 ::1/128                                      1       2       ::1                                    Local 1               
 2010::/64                                    1       281     ::                                     OverlayRouter 10      
 2010::1/128                                  1       2       ::1                                    Local 1               
 2010::2:2/128                                1       303     ::ffff:2.2.2.2                         OverlayRouter 400     
 2010::2:3/128                                1       303     ::ffff:2.2.2.2                         OverlayRouter 400     
 2010::2:4/128                                1       303     ::ffff:2.2.2.2                         OverlayRouter 400     
 2010::2:5/128                                1       303     ::ffff:2.2.2.2                         OverlayRouter 400     
 2010::2:6/128                                1       303     ::ffff:2.2.2.2                         OverlayRouter 400     
 2020::/64                                    1       282     ::                                     OverlayRouter 20      
 2020::1/128                                  1       2       ::1                                    Local 1               
 2020::2:2/128                                1       303     ::ffff:2.2.2.2                         OverlayRouter 400     
 2020::2:3/128                                1       303     ::ffff:2.2.2.2                         OverlayRouter 400     
 2020::2:4/128                                1       303     ::ffff:2.2.2.2                         OverlayRouter 400     
 2020::2:5/128                                1       303     ::ffff:2.2.2.2                         OverlayRouter 400     
 2020::2:6/128                                1       303     ::ffff:2.2.2.2                         OverlayRouter 400     
 fe80::/10                                    1       4       ::                                     Null 0                
 fe80::200:ff:fe00:1/128                      1       2       ::1                                    Local 1               
 fe80::5a69:6cff:fec6:f97/128                 1       2       ::1                                    Local 1               
RF_SW1#

        Returns:
{'2020::1/128/path-id': '2'
'::1/128/interface': 'Local 1'
'2020::2:5/128/interface': 'OverlayRouter 400'
'2010::/64/interface': 'OverlayRouter 10'
'2010::2:5/128/weight': '1'
'2010::2:5/128/path-id': '303'
'prefix/len_list': ['::1/128'
'2010::/64'
'2010::1/128'
'2010::2:2/128'
'2010::2:3/128'
'2010::2:4/128'
'2010::2:5/128'
'2010::2:6/128'
'2020::/64'
'2020::1/128'
'2020::2:2/128'
'2020::2:3/128'
'2020::2:4/128'
'2020::2:5/128'
'2020::2:6/128'
'fe80::/10'
'fe80::200:ff:fe00:1/128'
'fe80::5a69:6cff:fec6:f97/128'
'RF_SW1#'], '2020::2:3/128/interface': 'OverlayRouter 400'
'2010::2:2/128/weight': '1'
'2010::1/128/weight': '1'
'2010::2:3/128/interface': 'OverlayRouter 400'
'2010::2:6/128/weight': '1'
'2020::2:2/128/interface': 'OverlayRouter 400'
'2020::/64/next_hop': '::'
'2010::2:3/128/path-id': '303'
'2010::2:3/128/next_hop': '::ffff:2.2.2.2'
'2020::/64/weight': '1'
'2010::1/128/path-id': '2'
'fe80::200:ff:fe00:1/128/interface': 'Local 1'
'fe80::5a69:6cff:fec6:f97/128/interface': 'Local 1'
'fe80::5a69:6cff:fec6:f97/128/path-id': '2'
'::1/128/weight': '1'
'2020::2:2/128/next_hop': '::ffff:2.2.2.2'
'2010::1/128/next_hop': '::1'
'2010::2:5/128/interface': 'OverlayRouter 400'
'2010::2:4/128/next_hop': '::ffff:2.2.2.2'
'2010::2:5/128/next_hop': '::ffff:2.2.2.2'
'2020::1/128/next_hop': '::1'
'2020::2:5/128/weight': '1'
'2010::2:4/128/weight': '1'
'2020::2:4/128/interface': 'OverlayRouter 400'
'2020::1/128/interface': 'Local 1'
'2020::2:6/128/path-id': '303'
'2020::2:6/128/weight': '1'
'2020::2:4/128/next_hop': '::ffff:2.2.2.2'
'fe80::200:ff:fe00:1/128/next_hop': '::1'
'2010::2:6/128/interface': 'OverlayRouter 400'
'2010::2:2/128/next_hop': '::ffff:2.2.2.2'
'2010::2:3/128/weight': '1'
'2010::/64/path-id': '281'
'2010::2:4/128/path-id': '303'
'::1/128/next_hop': '::1'
'2020::2:6/128/next_hop': '::ffff:2.2.2.2'
'fe80::/10/weight': '1'
'::1/128/path-id': '2'
'2020::2:5/128/next_hop': '::ffff:2.2.2.2'
'fe80::200:ff:fe00:1/128/path-id': '2'
'fe80::/10/path-id': '4'
'fe80::200:ff:fe00:1/128/weight': '1'
'2010::/64/weight': '1'
'2010::1/128/interface': 'Local 1'
'2010::2:2/128/path-id': '303'
'RF_SW1#/next_hop': ''
'2020::2:3/128/weight': '1'
'RF_SW1#/path-id': ''
'2010::2:6/128/next_hop': '::ffff:2.2.2.2'
'2020::/64/path-id': '282'
'2020::2:4/128/weight': '1'
'2010::2:4/128/interface': 'OverlayRouter 400'
'fe80::/10/next_hop': '::'
'2010::2:2/128/interface': 'OverlayRouter 400'
'RF_SW1#/interface': ''
'2020::2:3/128/next_hop': '::ffff:2.2.2.2'
'2020::2:4/128/path-id': '303'
'2010::/64/next_hop': '::'
'RF_SW1#/weight': ''
'2020::2:3/128/path-id': '303'
'2020::2:2/128/path-id': '303'
'2020::2:2/128/weight': '1'
'2020::2:6/128/interface': 'OverlayRouter 400'
'2010::2:6/128/path-id': '303'
'2020::/64/interface': 'OverlayRouter 20'
'fe80::5a69:6cff:fec6:f97/128/next_hop': '::1'
'2020::1/128/weight': '1'
'fe80::/10/interface': 'Null 0'
'2020::2:5/128/path-id': '303'
'fe80::5a69:6cff:fec6:f97/128/weight': '1'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 ref route | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        star,end,xlist,list_show = self.dut_common_get_linelist(show_info,"prefix/len")
        dict_value1 = self.dut_show_autoget_form(star,end,"prefix/len",xlist,list_show)
        dict_value2={}
        for key,value in dict_value1.items():
            if type(value) == str:
                if re.match("Lc.*",value):
                    key = key
                    value = value.replace("Lc","Local ")
                elif re.match("Or.*",value):
                    key = key
                    value = value.replace("Or","OverlayRouter ")
                elif re.match("Nu\d+",value):
                    key = key
                    value = value.replace("Nu","Null ")
                elif re.match("Ot\d+",value):
                    key = key
                    value = value.replace("Ot","OverlayTouter ")
            dict_value2[key]=value
        return dict_value2
    def dut_get_show_ipv6_ref_rout(self,show_info):
        """
        Function:show ipv6 ref route回显解析函数
        CLI命令:show ipv6 ref route
        回显信息示例:
RF_SW1#show ipv6 ref route

Codes: * - default route
 prefix/len                                   weight  path-id next_hop                               interface
 ::1/128                                      1       2       ::1                                    Local 1               
 2010::/64                                    1       281     ::                                     OverlayRouter 10      
 2010::1/128                                  1       2       ::1                                    Local 1               
 2010::2:2/128                                1       303     ::ffff:2.2.2.2                         OverlayRouter 400     
 2010::2:3/128                                1       303     ::ffff:2.2.2.2                         OverlayRouter 400     
 2010::2:4/128                                1       303     ::ffff:2.2.2.2                         OverlayRouter 400     
 2010::2:5/128                                1       303     ::ffff:2.2.2.2                         OverlayRouter 400     
 2010::2:6/128                                1       303     ::ffff:2.2.2.2                         OverlayRouter 400     
 2020::/64                                    1       282     ::                                     OverlayRouter 20      
 2020::1/128                                  1       2       ::1                                    Local 1               
 2020::2:2/128                                1       303     ::ffff:2.2.2.2                         OverlayRouter 400     
 2020::2:3/128                                1       303     ::ffff:2.2.2.2                         OverlayRouter 400     
 2020::2:4/128                                1       303     ::ffff:2.2.2.2                         OverlayRouter 400     
 2020::2:5/128                                1       303     ::ffff:2.2.2.2                         OverlayRouter 400     
 2020::2:6/128                                1       303     ::ffff:2.2.2.2                         OverlayRouter 400     
 fe80::/10                                    1       4       ::                                     Null 0                
 fe80::200:ff:fe00:1/128                      1       2       ::1                                    Local 1               
 fe80::5a69:6cff:fec6:f97/128                 1       2       ::1                                    Local 1               
RF_SW1#

        Returns:
{"2020::1/128/path-id": "2"
"::1/128/interface": "Local 1"
"2010::/64/interface": "OverlayRouter 10"
"2010::2:5/128/weight": "1"
"2010::2:5/128/path-id": "303"
"prefix/len_list": ["::1/128"
"2010::/64"
"2010::1/128"
"2010::2:2/128"
"2010::2:3/128"
"2010::2:4/128"
"2010::2:5/128"
"2010::2:6/128"
"2020::/64"
"2020::1/128"
"2020::2:2/128"
"2020::2:3/128"
"2020::2:4/128"
"2020::2:5/128"
"2020::2:6/128"
"fe80::/10"
"fe80::200:ff:fe00:1/128"
"fe80::5a69:6cff:fec6:f97/128"], "2020::2:3/128/interface": "OverlayRouter 400"
"2010::2:2/128/weight": "1"
"2010::1/128/weight": "1"
"2010::2:3/128/interface": "OverlayRouter 400"
"2010::2:6/128/weight": "1"
"2020::2:2/128/interface": "OverlayRouter 400"
"2020::/64/next_hop": "::"
"2010::2:3/128/path-id": "303"
"2010::2:3/128/next_hop": "::ffff:2.2.2.2"
"2020::/64/weight": "1"
"2010::1/128/path-id": "2"
"fe80::200:ff:fe00:1/128/interface": "Local 1"
"fe80::5a69:6cff:fec6:f97/128/interface": "Local 1"
"fe80::5a69:6cff:fec6:f97/128/path-id": "2"
"::1/128/weight": "1"
"2020::2:2/128/next_hop": "::ffff:2.2.2.2"
"2010::1/128/next_hop": "::1"
"2010::2:5/128/interface": "OverlayRouter 400"
"2010::2:4/128/next_hop": "::ffff:2.2.2.2"
"2010::2:5/128/next_hop": "::ffff:2.2.2.2"
"2020::1/128/next_hop": "::1"
"2010::2:4/128/weight": "1"
"2020::2:4/128/interface": "OverlayRouter 400"
"2020::1/128/interface": "Local 1"
"2020::2:6/128/path-id": "303"
"2020::2:6/128/weight": "1"
"2020::2:4/128/next_hop": "::ffff:2.2.2.2"
"2010::2:6/128/next_hop": "::ffff:2.2.2.2"
"2010::2:6/128/interface": "OverlayRouter 400"
"2010::2:2/128/next_hop": "::ffff:2.2.2.2"
"2010::2:3/128/weight": "1"
"2010::/64/path-id": "281"
"2010::2:4/128/path-id": "303"
"::1/128/next_hop": "::1"
"2020::2:6/128/next_hop": "::ffff:2.2.2.2"
"fe80::/10/weight": "1"
"::1/128/path-id": "2"
"2020::2:2/128/path-id": "303"
"fe80::/10/path-id": "4"
"fe80::200:ff:fe00:1/128/weight": "1"
"2010::/64/weight": "1"
"2010::1/128/interface": "Local 1"
"2010::2:2/128/path-id": "303"
"fe80::200:ff:fe00:1/128/next_hop": "::1"
"2020::2:3/128/weight": "1"
"fe80::200:ff:fe00:1/128/path-id": "2"
"2020::2:5/128/next_hop": "::ffff:2.2.2.2"
"2020::/64/path-id": "282"
"2020::2:4/128/weight": "1"
"2010::2:4/128/interface": "OverlayRouter 400"
"fe80::/10/next_hop": "::"
"2010::2:2/128/interface": "OverlayRouter 400"
"2020::2:5/128/interface": "OverlayRouter 400"
"2020::2:3/128/next_hop": "::ffff:2.2.2.2"
"2020::2:4/128/path-id": "303"
"2010::/64/next_hop": "::"
"2020::2:5/128/weight": "1"
"2020::2:3/128/path-id": "303"
"2020::2:2/128/weight": "1"
"2020::2:6/128/interface": "OverlayRouter 400"
"2010::2:6/128/path-id": "303"
"2020::/64/interface": "OverlayRouter 20"
"fe80::5a69:6cff:fec6:f97/128/next_hop": "::1"
"2020::1/128/weight": "1"
"fe80::/10/interface": "Null 0"
"2020::2:5/128/path-id": "303"
"fe80::5a69:6cff:fec6:f97/128/weight": "1"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 ref route | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        star,end,xlist,list_show = self.dut_common_get_linelist(show_info,"prefix/len")
        return self.dut_show_autoget_form(star,end,"prefix/len",xlist,list_show,"next_hop")
    def dut_get_show_ip_vrf(self,show_info):
        """
        Function:show ip vrf回显解析函数
        CLI命令:show ip vrf
        回显信息示例:
TOR2#show ip vrf
Name                                                 Interfaces
vrf1                                                 OverlayRouter 30
                                                     OverlayRouter 40
vrf2                                                 OverlayRouter 50
TOR2#

        Returns:
{'vrf2': ['OverlayRouter 50'], 'vrf1': ['OverlayRouter 30'
'OverlayRouter 40']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip vrf | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict = {}
        show_info_list_line = show_info.split("\n")
        key = None
        if re.match(r'.*show.*', show_info_list_line[0]):  # 去除第一行
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*Name.*', show_info_list_line[0]):  # 去除第二行
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):  # 去除最后一行
            show_info_list_line.remove(show_info_list_line[-1])
            print show_info_list_line
        for line in show_info_list_line:
    # 字符串不为空
            if len(line) > 0:
                index = line.index(' ')
                if (index > 0):
                    key = line[0:index]
                    val = line[index: len(line)].strip()
                    val_list = [val]
                    dict[key] = val_list
                else:
                    dict.get(key).append(line.strip())
        return dict
    def dut_get_show_ipv6_ref_route_detail_ipv6(self,show_info):
        """
        Function:show ipv6 ref route detail <ipv6>回显解析函数
        CLI命令:show ipv6 ref route detail <ipv6>
        回显信息示例:
RF_SW1#show ipv6 ref route detail 2010::2:2 
=============================== SSC INFO ===============================
vsd:0 stmp:2, total slots:1
vrf:0 Prefix Info
route_prefix             cmd   type       hw_type rt_id ecmpgrp  nhbas_id  nh_type    nh_size  nh_hwsz 
2010::2:2/128            FRWD  NETWORK    HOST    0     0        306       SINGLE     1        1        

nh_ip            ifx      weight vrf   cmd   phyid      intf_id  vid   mac            flow nh_id    redirect phyid_fw intfid_fw 
::ffff:2.2.2.2   8466     1      0     FRWD  0x13000002 2051     4155  5869.6cc6.0d39 0    306      false    0        0         
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SSC END ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

=============================== SSD INFO ===============================
LC Slot 1/30 ROUTE INFO: 
vrf:0 Prefix Info
route_prefix             cmd   type       hw_type rt_id ecmpgrp  nhbas_id  nh_type    nh_size  nh_hwsz 
2010::2:2/128            FRWD  NETWORK    HOST    1280  0        306       SINGLE     1        1        

nh_ip            ifx      weight vrf   cmd   phyid      intf_id  vid   mac            flow nh_id    redirect phyid_fw intfid_fw 
::ffff:2.2.2.2   8466     1      0     FRWD  0x13000002 2051     4155  5869.6cc6.0d39 0    306      false    0        0         

prefix_ip                hw_type  vrf   ecmp     nhbas_id  flowid  hit 
2010::2:2/128            HOST     0     0        306       0       0   
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SSD END ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

RF_SW1#

        Returns:
{'2010::2:2/128/type': 'NETWORK'
'route_prefix_list': ['2010::2:2/128'], '::ffff:2.2.2.2/mac': '5869.6cc6.0d39 0'
'vsd': '0'
'::ffff:2.2.2.2/vid': '4155'
'2010::2:2/128/nh_type': '0'
'::ffff:2.2.2.2/flow nh_id': '306'
'total slots': '1'
'2010::2:2/128/nh_hwsz': 'SINGLE'
'::ffff:2.2.2.2/redirect phyid_fw intfid_fw': 'false'
'stmp': '2'
'::ffff:2.2.2.2/ifx': '8466'
'vrf': '0'
'::ffff:2.2.2.2/weight vrf': '1'
'::ffff:2.2.2.2/intf_id': '0x13000002 2051'
'::ffff:2.2.2.2/phyid': 'FRWD'
'::ffff:2.2.2.2/cmd': '0'
'2010::2:2/128/nhbas_id': '0'
'nh_ip_list': ['::ffff:2.2.2.2'], '2010::2:2/128/cmd': 'FRWD'
'2010::2:2/128/hw_type rt_id ecmpgrp': 'HOST'
'2010::2:2/128/nh_size': '306'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 ref route detail <ipv6> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """
        if "[" in show_info:
            return self.dut_get_show_ip_ref_route_detail_ip(show_info)
        else:
            show_list =[]
            dict_value0={}
            dict_value = {}
            show_info_list_line = show_info.split("\n")
            for value in show_info_list_line:
                if "vsd:" in value:
                    obj_1 = re.match("vsd:(.*)stmp:(.*), total slots:(.*)",value.strip())
                    dict_value0["vsd"] = obj_1.group(1).strip()
                    dict_value0["stmp"] = obj_1.group(2).strip()
                    dict_value0["total slots"] = obj_1.group(3).strip()
                if "Prefix Info" in value:
                    print value
                    obj_2 = re.match("vrf:(.*)Prefix Info",value.strip())
                    dict_value0["vrf"] = obj_2.group(1).strip()
            for value in show_info_list_line:
                if "SSC END" in value:
                    break
                show_list.append(value)
            show_info = "\n".join(show_list)
            dict_value1 = self.dut_show_autoget_blank_list(show_info,"route_prefix","nh_ip")
            dict_value2 = self.dut_show_autoget_blank_list(show_info, "nh_ip")
            dict_value = dict(dict_value1.items()+dict_value2.items()+dict_value0.items())
            return dict_value
    def dut_get_show_ipv6_route_data(self, show_info):
        """
        Function:show ipv6 route data回显解析函数
        CLI命令:show ipv6 route data
        回显信息示例:
RF_SW1#show ipv6 route data
IPv6 Routing Table
Codes: K - kernel route, C - connected, S - static, R - RIP, O - OSPF,
       I - IS-IS, B - BGP, EV - BGP EVPN, ND - Nd to host
       > - selected route, * - FIB route, p - stale info
Timers: Uptime

C     *> 2010::/64 via ::, OverlayRouter 10, 00:11:54, flag:0x3, ex_flag:0x0, nh_rgate_num:1, fast_sw_id:0, mac=0000.0000.0000, esi=00.00.00.00.00.00.00.00.00.00.
, process_id: 0, nh_vid: 0
      rib_flag:0x10, rib_ext_flag:0x0, rib_nh_active_num:1, rib_rgate_num:1
    route node lock: 2
C     *> 2010::1/128 via ::, OverlayRouter 10, 00:11:54, flag:0x3, ex_flag:0x0, nh_rgate_num:1, fast_sw_id:0, mac=0000.0000.0000, esi=00.00.00.00.00.00.00.00.00.00.
, process_id: 0, nh_vid: 0
      rib_flag:0x10, rib_ext_flag:0x4, rib_nh_active_num:1, rib_rgate_num:1
    route node lock: 2
B EV  *> 2010::2:2/128 [200/0] via ::FFFF:2.2.2.2, OverlayRouter 400, 00:10:04, flag:0x103, ex_flag:0x0, nh_rgate_num:1, fast_sw_id:0, mac=5869.6cc6.0d39, esi=00.00.00.00.00.00.00.00.00.00.
, process_id: 0, nh_vid: 0
      rib_flag:0x11, rib_ext_flag:0x10, rib_nh_active_num:1, rib_rgate_num:1
    route node lock: 2
B EV  *> 2010::2:3/128 [200/0] via ::FFFF:2.2.2.2, OverlayRouter 400, 00:10:04, flag:0x103, ex_flag:0x0, nh_rgate_num:1, fast_sw_id:0, mac=5869.6cc6.0d39, esi=00.00.00.00.00.00.00.00.00.00.
, process_id: 0, nh_vid: 0
      rib_flag:0x11, rib_ext_flag:0x10, rib_nh_active_num:1, rib_rgate_num:1
    route node lock: 2
B EV  *> 2010::2:4/128 [200/0] via ::FFFF:2.2.2.2, OverlayRouter 400, 00:10:04, flag:0x103, ex_flag:0x0, nh_rgate_num:1, fast_sw_id:0, mac=5869.6cc6.0d39, esi=00.00.00.00.00.00.00.00.00.00.
, process_id: 0, nh_vid: 0
      rib_flag:0x11, rib_ext_flag:0x10, rib_nh_active_num:1, rib_rgate_num:1
    route node lock: 2
B EV  *> 2010::2:5/128 [200/0] via ::FFFF:2.2.2.2, OverlayRouter 400, 00:10:05, flag:0x103, ex_flag:0x0, nh_rgate_num:1, fast_sw_id:0, mac=5869.6cc6.0d39, esi=00.00.00.00.00.00.00.00.00.00.
, process_id: 0, nh_vid: 0
      rib_flag:0x11, rib_ext_flag:0x10, rib_nh_active_num:1, rib_rgate_num:1
    route node lock: 2
B EV  *> 2010::2:6/128 [200/0] via ::FFFF:2.2.2.2, OverlayRouter 400, 00:10:05, flag:0x103, ex_flag:0x0, nh_rgate_num:1, fast_sw_id:0, mac=5869.6cc6.0d39, esi=00.00.00.00.00.00.00.00.00.00.
, process_id: 0, nh_vid: 0
      rib_flag:0x11, rib_ext_flag:0x10, rib_nh_active_num:1, rib_rgate_num:1
    route node lock: 2
C     *> 2020::/64 via ::, OverlayRouter 20, 00:11:55, flag:0x3, ex_flag:0x0, nh_rgate_num:1, fast_sw_id:0, mac=0000.0000.0000, esi=00.00.00.00.00.00.00.00.00.00.
, process_id: 0, nh_vid: 0
      rib_flag:0x10, rib_ext_flag:0x0, rib_nh_active_num:1, rib_rgate_num:1
    route node lock: 2
C     *> 2020::1/128 via ::, OverlayRouter 20, 00:11:55, flag:0x3, ex_flag:0x0, nh_rgate_num:1, fast_sw_id:0, mac=0000.0000.0000, esi=00.00.00.00.00.00.00.00.00.00.
, process_id: 0, nh_vid: 0
      rib_flag:0x10, rib_ext_flag:0x4, rib_nh_active_num:1, rib_rgate_num:1
    route node lock: 2
B EV  *> 2020::2:2/128 [200/0] via ::FFFF:2.2.2.2, OverlayRouter 400, 00:10:05, flag:0x103, ex_flag:0x0, nh_rgate_num:1, fast_sw_id:0, mac=5869.6cc6.0d39, esi=00.00.00.00.00.00.00.00.00.00.
, process_id: 0, nh_vid: 0
      rib_flag:0x11, rib_ext_flag:0x10, rib_nh_active_num:1, rib_rgate_num:1
    route node lock: 2
B EV  *> 2020::2:3/128 [200/0] via ::FFFF:2.2.2.2, OverlayRouter 400, 00:10:05, flag:0x103, ex_flag:0x0, nh_rgate_num:1, fast_sw_id:0, mac=5869.6cc6.0d39, esi=00.00.00.00.00.00.00.00.00.00.
, process_id: 0, nh_vid: 0
      rib_flag:0x11, rib_ext_flag:0x10, rib_nh_active_num:1, rib_rgate_num:1
    route node lock: 2
B EV  *> 2020::2:4/128 [200/0] via ::FFFF:2.2.2.2, OverlayRouter 400, 00:10:06, flag:0x103, ex_flag:0x0, nh_rgate_num:1, fast_sw_id:0, mac=5869.6cc6.0d39, esi=00.00.00.00.00.00.00.00.00.00.
, process_id: 0, nh_vid: 0
      rib_flag:0x11, rib_ext_flag:0x10, rib_nh_active_num:1, rib_rgate_num:1
    route node lock: 2
B EV  *> 2020::2:5/128 [200/0] via ::FFFF:2.2.2.2, OverlayRouter 400, 00:10:06, flag:0x103, ex_flag:0x0, nh_rgate_num:1, fast_sw_id:0, mac=5869.6cc6.0d39, esi=00.00.00.00.00.00.00.00.00.00.
, process_id: 0, nh_vid: 0
      rib_flag:0x11, rib_ext_flag:0x10, rib_nh_active_num:1, rib_rgate_num:1
    route node lock: 2
B EV  *> 2020::2:6/128 [200/0] via ::FFFF:2.2.2.2, OverlayRouter 400, 00:10:06, flag:0x103, ex_flag:0x0, nh_rgate_num:1, fast_sw_id:0, mac=5869.6cc6.0d39, esi=00.00.00.00.00.00.00.00.00.00.
, process_id: 0, nh_vid: 0
      rib_flag:0x11, rib_ext_flag:0x10, rib_nh_active_num:1, rib_rgate_num:1
    route node lock: 2
C     *> FE80::/10 via ::, Null 0, 00:11:56, flag:0x3, ex_flag:0x0, nh_rgate_num:1, fast_sw_id:0, mac=0000.0000.0000, esi=00.00.00.00.00.00.00.00.00.00.
, process_id: 0, nh_vid: 0
      rib_flag:0x14, rib_ext_flag:0x0, rib_nh_active_num:1, rib_rgate_num:1
    route node lock: 2
C     *> FE80::/64 via ::, OverlayRouter 10, 00:11:56, flag:0x3, ex_flag:0x0, nh_rgate_num:1, fast_sw_id:0, mac=0000.0000.0000, esi=00.00.00.00.00.00.00.00.00.00.
, process_id: 0, nh_vid: 0
      rib_flag:0x10, rib_ext_flag:0x0, rib_nh_active_num:1, rib_rgate_num:1
    route node lock: 2
C     *> FE80::200:FF:FE00:1/128 via ::, OverlayRouter 10, 00:11:56, flag:0x3, ex_flag:0x0, nh_rgate_num:1, fast_sw_id:0, mac=0000.0000.0000, esi=00.00.00.00.00.00.00.00.00.00.
, process_id: 0, nh_vid: 0
      rib_flag:0x10, rib_ext_flag:0x4, rib_nh_active_num:1, rib_rgate_num:1
    route node lock: 2
C     *> FE80::/64 via ::, OverlayRouter 20, 00:11:57, flag:0x3, ex_flag:0x0, nh_rgate_num:1, fast_sw_id:0, mac=0000.0000.0000, esi=00.00.00.00.00.00.00.00.00.00.
, process_id: 0, nh_vid: 0
      rib_flag:0x10, rib_ext_flag:0x0, rib_nh_active_num:1, rib_rgate_num:1
    route node lock: 2
C     *> FE80::200:FF:FE00:1/128 via ::, OverlayRouter 20, 00:11:57, flag:0x3, ex_flag:0x0, nh_rgate_num:1, fast_sw_id:0, mac=0000.0000.0000, esi=00.00.00.00.00.00.00.00.00.00.
, process_id: 0, nh_vid: 0
      rib_flag:0x10, rib_ext_flag:0x4, rib_nh_active_num:1, rib_rgate_num:1
    route node lock: 2
C     *> FE80::/64 via ::, OverlayRouter 400, 00:10:29, flag:0x3, ex_flag:0x0, nh_rgate_num:1, fast_sw_id:0, mac=0000.0000.0000, esi=00.00.00.00.00.00.00.00.00.00.
, process_id: 0, nh_vid: 0
      rib_flag:0x10, rib_ext_flag:0x0, rib_nh_active_num:1, rib_rgate_num:1
    route node lock: 2
C     *> FE80::5A69:6CFF:FEC6:F97/128 via ::, OverlayRouter 400, 00:10:29, flag:0x3, ex_flag:0x0, nh_rgate_num:1, fast_sw_id:0, mac=0000.0000.0000, esi=00.00.00.00.00.00.00.00.00.00.
, process_id: 0, nh_vid: 0
      rib_flag:0x10, rib_ext_flag:0x4, rib_nh_active_num:1, rib_rgate_num:1
    route node lock: 2
RF_SW1#

        Returns:
{'B EV  *> 2020::2:3/128 [200/0]/fast_sw_id': '0'
'B EV  *> 2020::2:3/128 [200/0]/route node lock': '2'
'B EV  *> 2020::2:4/128 [200/0]/route node lock': '2'
'C     *> FE80::/10/process_id': '0'
'C     *> 2020::1/128/mac': '0000.0000.0000'
'B EV  *> 2020::2:6/128 [200/0]/fast_sw_id': '0'
'C     *> FE80::/64/rib_rgate_num': '1'
'C     *> 2010::/64/flag': '0x3'
'C     *> FE80::5A69:6CFF:FEC6:F97/128/process_id': '0'
'B EV  *> 2010::2:2/128 [200/0]/rib_rgate_num': '1'
'B EV  *> 2010::2:4/128 [200/0]/nh_vid': '0'
'B EV  *> 2010::2:2/128 [200/0]/ex_flag': '0x0'
'B EV  *> 2020::2:5/128 [200/0]/rib_ext_flag': '0x10'
'C     *> FE80::/10/ex_flag': '0x0'
'C     *> 2020::1/128/esi': '00.00.00.00.00.00.00.00.00.00.'
'B EV  *> 2010::2:2/128 [200/0]/rib_nh_active_num': '1'
'C     *> 2020::/64/route node lock': '2'
'C     *> FE80::200:FF:FE00:1/128/route node lock': '2'
'B EV  *> 2010::2:5/128 [200/0]/nh_vid': '0'
'B EV  *> 2020::2:6/128 [200/0]/rib_nh_active_num': '1'
'B EV  *> 2020::2:5/128 [200/0]/via': '::FFFF:2.2.2.2'
'B EV  *> 2020::2:2/128 [200/0]/OverlayRouter': '400'
'C     *> 2010::/64/via': '::'
'C     *> FE80::/10/00': '11'
'B EV  *> 2020::2:5/128 [200/0]/rib_nh_active_num': '1'
'B EV  *> 2010::2:4/128 [200/0]/esi': '00.00.00.00.00.00.00.00.00.00.'
'B EV  *> 2020::2:6/128 [200/0]/rib_flag': '0x11'
'C     *> 2010::1/128/mac': '0000.0000.0000'
'C     *> 2010::/64/process_id': '0'
'B EV  *> 2010::2:3/128 [200/0]/route node lock': '2'
'C     *> 2020::1/128/nh_vid': '0'
'B EV  *> 2010::2:6/128 [200/0]/nh_vid': '0'
'C     *> FE80::200:FF:FE00:1/128/flag': '0x3'
'C     *> 2020::1/128/rib_flag': '0x10'
'C     *> 2020::1/128/route node lock': '2'
'B EV  *> 2010::2:6/128 [200/0]/process_id': '0'
'C     *> 2010::/64/fast_sw_id': '0'
'C     *> FE80::5A69:6CFF:FEC6:F97/128/nh_vid': '0'
'B EV  *> 2010::2:3/128 [200/0]/00': '10'
'C     *> FE80::200:FF:FE00:1/128/nh_vid': '0'
'B EV  *> 2010::2:6/128 [200/0]/flag': '0x103'
'B EV  *> 2010::2:5/128 [200/0]/rib_rgate_num': '1'
'B EV  *> 2010::2:2/128 [200/0]/fast_sw_id': '0'
'B EV  *> 2010::2:6/128 [200/0]/rib_ext_flag': '0x10'
'C     *> 2010::1/128/ex_flag': '0x0'
'C     *> 2020::/64/mac': '0000.0000.0000'
'B EV  *> 2020::2:3/128 [200/0]/OverlayRouter': '400'
'C     *> 2020::/64/rib_rgate_num': '1'
'C     *> FE80::5A69:6CFF:FEC6:F97/128/flag': '0x3'
'B EV  *> 2020::2:5/128 [200/0]/00': '10'
'B EV  *> 2020::2:5/128 [200/0]/rib_rgate_num': '1'
'C     *> 2020::1/128/fast_sw_id': '0'
'B EV  *> 2020::2:3/128 [200/0]/ex_flag': '0x0'
'C     *> 2010::/64/rib_nh_active_num': '1'
'C     *> FE80::5A69:6CFF:FEC6:F97/128/OverlayRouter': '400'
'C     *> 2010::/64/nh_rgate_num': '1'
'B EV  *> 2010::2:5/128 [200/0]/route node lock': '2'
'B EV  *> 2010::2:5/128 [200/0]/esi': '00.00.00.00.00.00.00.00.00.00.'
'C     *> FE80::200:FF:FE00:1/128/rib_rgate_num': '1'
'B EV  *> 2010::2:5/128 [200/0]/rib_flag': '0x11'
'B EV  *> 2020::2:5/128 [200/0]/fast_sw_id': '0'
'C     *> 2010::1/128/rib_flag': '0x10'
'B EV  *> 2010::2:6/128 [200/0]/rib_nh_active_num': '1'
'B EV  *> 2010::2:5/128 [200/0]/flag': '0x103'
'C     *> FE80::200:FF:FE00:1/128/00': '11'
'B EV  *> 2020::2:6/128 [200/0]/route node lock': '2'
'C     *> 2010::1/128/fast_sw_id': '0'
'C     *> 2020::1/128/rib_rgate_num': '1'
'B EV  *> 2020::2:3/128 [200/0]/nh_rgate_num': '1'
'B EV  *> 2020::2:4/128 [200/0]/ex_flag': '0x0'
'B EV  *> 2010::2:5/128 [200/0]/ex_flag': '0x0'
'B EV  *> 2020::2:2/128 [200/0]/route node lock': '2'
'B EV  *> 2020::2:2/128 [200/0]/via': '::FFFF:2.2.2.2'
'C     *> FE80::/10/rib_ext_flag': '0x0'
'C     *> FE80::5A69:6CFF:FEC6:F97/128/mac': '0000.0000.0000'
'C     *> FE80::/64/process_id': '0'
'C     *> FE80::/64/mac': '0000.0000.0000'
'B EV  *> 2010::2:6/128 [200/0]/fast_sw_id': '0'
'C     *> 2020::/64/nh_rgate_num': '1'
'C     *> 2010::1/128/rib_rgate_num': '1'
'C     *> FE80::/64/esi': '00.00.00.00.00.00.00.00.00.00.'
'B EV  *> 2010::2:6/128 [200/0]/ex_flag': '0x0'
'B EV  *> 2010::2:2/128 [200/0]/mac': '5869.6cc6.0d39'
'C     *> FE80::200:FF:FE00:1/128/rib_flag': '0x10'
'B EV  *> 2020::2:2/128 [200/0]/ex_flag': '0x0'
'C     *> FE80::/64/route node lock': '2'
'C     *> FE80::/64/rib_ext_flag': '0x0'
'B EV  *> 2010::2:4/128 [200/0]/OverlayRouter': '400'
'B EV  *> 2010::2:3/128 [200/0]/fast_sw_id': '0'
'C     *> 2020::1/128/00': '11'
'B EV  *> 2020::2:2/128 [200/0]/fast_sw_id': '0'
'C     *> 2020::/64/rib_nh_active_num': '1'
'B EV  *> 2010::2:3/128 [200/0]/rib_flag': '0x11'
'B EV  *> 2020::2:4/128 [200/0]/OverlayRouter': '400'
'B EV  *> 2020::2:3/128 [200/0]/00': '10'
'C     *> 2010::/64/OverlayRouter': '10'
'B EV  *> 2020::2:2/128 [200/0]/mac': '5869.6cc6.0d39'
'B EV  *> 2020::2:2/128 [200/0]/rib_flag': '0x11'
'B EV  *> 2020::2:4/128 [200/0]/00': '10'
'B EV  *> 2010::2:4/128 [200/0]/flag': '0x103'
'B EV  *> 2020::2:6/128 [200/0]/nh_vid': '0'
'C     *> 2010::1/128/rib_ext_flag': '0x4'
'B EV  *> 2010::2:3/128 [200/0]/rib_rgate_num': '1'
'B EV  *> 2020::2:4/128 [200/0]/rib_nh_active_num': '1'
'C     *> FE80::/64/fast_sw_id': '0'
'B EV  *> 2010::2:5/128 [200/0]/fast_sw_id': '0'
'B EV  *> 2010::2:3/128 [200/0]/via': '::FFFF:2.2.2.2'
'C     *> FE80::200:FF:FE00:1/128/rib_nh_active_num': '1'
'C     *> FE80::5A69:6CFF:FEC6:F97/128/route node lock': '2'
'C     *> FE80::200:FF:FE00:1/128/OverlayRouter': '20'
'C     *> 2010::/64/rib_flag': '0x10'
'C     *> FE80::/10/flag': '0x3'
'C     *> FE80::5A69:6CFF:FEC6:F97/128/rib_flag': '0x10'
'B EV  *> 2010::2:5/128 [200/0]/nh_rgate_num': '1'
'B EV  *> 2010::2:4/128 [200/0]/rib_rgate_num': '1'
'B EV  *> 2010::2:2/128 [200/0]/rib_flag': '0x11'
'B EV  *> 2020::2:4/128 [200/0]/rib_rgate_num': '1'
'C     *> 2020::1/128/nh_rgate_num': '1'
'C     *> FE80::5A69:6CFF:FEC6:F97/128/rib_nh_active_num': '1'
'B EV  *> 2010::2:6/128 [200/0]/rib_rgate_num': '1'
'C     *> FE80::200:FF:FE00:1/128/fast_sw_id': '0'
'C     *> FE80::5A69:6CFF:FEC6:F97/128/via': '::'
'C     *> 2010::1/128/rib_nh_active_num': '1'
'B EV  *> 2020::2:3/128 [200/0]/nh_vid': '0'
'B EV  *> 2010::2:2/128 [200/0]/nh_vid': '0'
'B EV  *> 2010::2:2/128 [200/0]/process_id': '0'
'B EV  *> 2010::2:2/128 [200/0]/esi': '00.00.00.00.00.00.00.00.00.00.'
'C     *> FE80::/64/nh_rgate_num': '1'
'C     *> FE80::/10/nh_vid': '0'
'B EV  *> 2010::2:3/128 [200/0]/rib_ext_flag': '0x10'
'B EV  *> 2010::2:4/128 [200/0]/mac': '5869.6cc6.0d39'
'B EV  *> 2020::2:2/128 [200/0]/rib_nh_active_num': '1'
'B EV  *> 2020::2:6/128 [200/0]/ex_flag': '0x0'
'B EV  *> 2010::2:4/128 [200/0]/fast_sw_id': '0'
'B EV  *> 2020::2:4/128 [200/0]/process_id': '0'
'B EV  *> 2020::2:6/128 [200/0]/00': '10'
'B EV  *> 2010::2:2/128 [200/0]/flag': '0x103'
'B EV  *> 2020::2:6/128 [200/0]/rib_ext_flag': '0x10'
'C     *> FE80::/10/esi': '00.00.00.00.00.00.00.00.00.00.'
'C     *> FE80::/64/via': '::'
'B EV  *> 2010::2:6/128 [200/0]/via': '::FFFF:2.2.2.2'
'B EV  *> 2020::2:6/128 [200/0]/rib_rgate_num': '1'
'C     *> 2010::/64/ex_flag': '0x0'
'B EV  *> 2020::2:6/128 [200/0]/OverlayRouter': '400'
'B EV  *> 2020::2:5/128 [200/0]/mac': '5869.6cc6.0d39'
'B EV  *> 2020::2:2/128 [200/0]/nh_rgate_num': '1'
'B EV  *> 2010::2:3/128 [200/0]/esi': '00.00.00.00.00.00.00.00.00.00.'
'B EV  *> 2020::2:5/128 [200/0]/OverlayRouter': '400'
'B EV  *> 2020::2:3/128 [200/0]/rib_ext_flag': '0x10'
'B EV  *> 2010::2:5/128 [200/0]/00': '10'
'C     *> FE80::5A69:6CFF:FEC6:F97/128/rib_ext_flag': '0x4'
'C     *> 2020::/64/ex_flag': '0x0'
'B EV  *> 2010::2:2/128 [200/0]/OverlayRouter': '400'
'B EV  *> 2010::2:5/128 [200/0]/rib_nh_active_num': '1'
'B EV  *> 2020::2:3/128 [200/0]/mac': '5869.6cc6.0d39'
'B EV  *> 2010::2:3/128 [200/0]/nh_vid': '0'
'B EV  *> 2010::2:4/128 [200/0]/rib_flag': '0x11'
'C     *> 2010::1/128/nh_vid': '0'
'C     *> 2010::/64/esi': '00.00.00.00.00.00.00.00.00.00.'
'B EV  *> 2020::2:3/128 [200/0]/flag': '0x103'
'B EV  *> 2010::2:2/128 [200/0]/via': '::FFFF:2.2.2.2'
'B EV  *> 2020::2:3/128 [200/0]/rib_rgate_num': '1'
'B EV  *> 2010::2:6/128 [200/0]/rib_flag': '0x11'
'C     *> 2010::1/128/process_id': '0'
'C     *> FE80::5A69:6CFF:FEC6:F97/128/esi': '00.00.00.00.00.00.00.00.00.00.'
'B EV  *> 2020::2:3/128 [200/0]/process_id': '0'
'B EV  *> 2010::2:5/128 [200/0]/process_id': '0'
'B EV  *> 2020::2:6/128 [200/0]/nh_rgate_num': '1'
'C     *> 2010::/64/rib_ext_flag': '0x0'
'B EV  *> 2020::2:3/128 [200/0]/esi': '00.00.00.00.00.00.00.00.00.00.'
'B EV  *> 2010::2:5/128 [200/0]/rib_ext_flag': '0x10'
'B EV  *> 2010::2:4/128 [200/0]/ex_flag': '0x0'
'C     *> 2010::1/128/via': '::'
'C     *> FE80::5A69:6CFF:FEC6:F97/128/00': '10'
'B EV  *> 2020::2:2/128 [200/0]/nh_vid': '0'
'B EV  *> 2020::2:6/128 [200/0]/mac': '5869.6cc6.0d39'
'C     *> FE80::/10/via': '::'
'B EV  *> 2010::2:3/128 [200/0]/flag': '0x103'
'B EV  *> 2010::2:2/128 [200/0]/rib_ext_flag': '0x10'
'B EV  *> 2010::2:5/128 [200/0]/OverlayRouter': '400'
'B EV  *> 2020::2:2/128 [200/0]/rib_rgate_num': '1'
'C     *> FE80::200:FF:FE00:1/128/mac': '0000.0000.0000'
'B EV  *> 2010::2:6/128 [200/0]/nh_rgate_num': '1'
'B EV  *> 2020::2:5/128 [200/0]/route node lock': '2'
'B EV  *> 2020::2:4/128 [200/0]/flag': '0x103'
'C     *> FE80::5A69:6CFF:FEC6:F97/128/nh_rgate_num': '1'
'B EV  *> 2020::2:3/128 [200/0]/rib_flag': '0x11'
'B EV  *> 2020::2:5/128 [200/0]/flag': '0x103'
'B EV  *> 2010::2:3/128 [200/0]/OverlayRouter': '400'
'C     *> FE80::5A69:6CFF:FEC6:F97/128/fast_sw_id': '0'
'B EV  *> 2020::2:4/128 [200/0]/via': '::FFFF:2.2.2.2'
'B EV  *> 2010::2:3/128 [200/0]/rib_nh_active_num': '1'
'C     *> 2010::1/128/nh_rgate_num': '1'
'B EV  *> 2020::2:4/128 [200/0]/esi': '00.00.00.00.00.00.00.00.00.00.'
'B EV  *> 2020::2:3/128 [200/0]/via': '::FFFF:2.2.2.2'
'B EV  *> 2010::2:4/128 [200/0]/rib_ext_flag': '0x10'
'C     *> 2020::1/128/flag': '0x3'
'B EV  *> 2010::2:3/128 [200/0]/mac': '5869.6cc6.0d39'
'C     *> FE80::/64/flag': '0x3'
'C     *> 2020::/64/nh_vid': '0'
'B EV  *> 2020::2:4/128 [200/0]/rib_ext_flag': '0x10'
'C     *> FE80::/64/00': '10'
'C     *> FE80::/64/nh_vid': '0'
'C     *> 2020::1/128/rib_ext_flag': '0x4'
'B EV  *> 2010::2:6/128 [200/0]/OverlayRouter': '400'
'C     *> 2020::/64/esi': '00.00.00.00.00.00.00.00.00.00.'
'B EV  *> 2020::2:2/128 [200/0]/process_id': '0'
'C     *> FE80::200:FF:FE00:1/128/esi': '00.00.00.00.00.00.00.00.00.00.'
'B EV  *> 2020::2:6/128 [200/0]/flag': '0x103'
'C     *> 2020::1/128/ex_flag': '0x0'
'C     *> FE80::/10/route node lock': '2'
'B EV  *> 2010::2:5/128 [200/0]/via': '::FFFF:2.2.2.2'
'B EV  *> 2010::2:4/128 [200/0]/process_id': '0'
'B EV  *> 2020::2:6/128 [200/0]/esi': '00.00.00.00.00.00.00.00.00.00.'
'B EV  *> 2020::2:5/128 [200/0]/nh_vid': '0'
'C     *> FE80::/64/rib_flag': '0x10'
'C     *> FE80::200:FF:FE00:1/128/ex_flag': '0x0'
'B EV  *> 2010::2:2/128 [200/0]/00': '10'
'B EV  *> 2020::2:2/128 [200/0]/flag': '0x103'
'C     *> 2010::1/128/flag': '0x3'
'B EV  *> 2010::2:4/128 [200/0]/rib_nh_active_num': '1'
'B EV  *> 2010::2:6/128 [200/0]/esi': '00.00.00.00.00.00.00.00.00.00.'
'C     *> 2020::/64/OverlayRouter': '20'
'C     *> 2010::/64/00': '11'
'C     *> FE80::5A69:6CFF:FEC6:F97/128/ex_flag': '0x0'
'B EV  *> 2010::2:5/128 [200/0]/mac': '5869.6cc6.0d39'
'C     *> 2020::1/128/process_id': '0'
'C     *> FE80::200:FF:FE00:1/128/via': '::'
'C     *> 2020::/64/rib_ext_flag': '0x0'
'C     *> FE80::/64/rib_nh_active_num': '1'
'B EV  *> 2010::2:6/128 [200/0]/00': '10'
'C     *> FE80::/10/rib_flag': '0x14'
'B EV  *> 2020::2:5/128 [200/0]/esi': '00.00.00.00.00.00.00.00.00.00.'
'C     *> 2010::1/128/00': '11'
'C     *> 2020::1/128/OverlayRouter': '20'
'C     *> 2020::/64/process_id': '0'
'B EV  *> 2010::2:6/128 [200/0]/mac': '5869.6cc6.0d39'
'B EV  *> 2020::2:2/128 [200/0]/00': '10'
'C     *> 2020::/64/fast_sw_id': '0'
'B EV  *> 2020::2:4/128 [200/0]/mac': '5869.6cc6.0d39'
'C     *> 2010::/64/nh_vid': '0'
'B EV  *> 2010::2:4/128 [200/0]/via': '::FFFF:2.2.2.2'
'C     *> FE80::200:FF:FE00:1/128/process_id': '0'
'B EV  *> 2020::2:5/128 [200/0]/rib_flag': '0x11'
'C     *> FE80::/64/ex_flag': '0x0'
'B EV  *> 2020::2:4/128 [200/0]/nh_vid': '0'
'B EV  *> 2020::2:6/128 [200/0]/process_id': '0'
'B EV  *> 2010::2:2/128 [200/0]/route node lock': '2'
'B EV  *> 2020::2:5/128 [200/0]/nh_rgate_num': '1'
'B EV  *> 2010::2:4/128 [200/0]/00': '10'
'C     *> FE80::/10/rib_nh_active_num': '1'
'B EV  *> 2020::2:6/128 [200/0]/via': '::FFFF:2.2.2.2'
'C     *> 2020::/64/00': '11'
'C     *> FE80::/64/OverlayRouter': '400'
'C     *> FE80::5A69:6CFF:FEC6:F97/128/rib_rgate_num': '1'
'B EV  *> 2020::2:2/128 [200/0]/rib_ext_flag': '0x10'
'B EV  *> 2010::2:4/128 [200/0]/nh_rgate_num': '1'
'C     *> 2010::/64/rib_rgate_num': '1'
'B EV  *> 2020::2:3/128 [200/0]/rib_nh_active_num': '1'
'B EV  *> 2010::2:3/128 [200/0]/process_id': '0'
'B EV  *> 2020::2:4/128 [200/0]/rib_flag': '0x11'
'C     *> 2020::1/128/rib_nh_active_num': '1'
'C     *> 2010::1/128/route node lock': '2'
'B EV  *> 2010::2:3/128 [200/0]/nh_rgate_num': '1'
'C     *> FE80::200:FF:FE00:1/128/nh_rgate_num': '1'
'C     *> 2020::/64/flag': '0x3'
'B EV  *> 2010::2:2/128 [200/0]/nh_rgate_num': '1'
'C     *> FE80::/10/nh_rgate_num': '1'
'C     *> FE80::200:FF:FE00:1/128/rib_ext_flag': '0x4'
'C     *> 2020::/64/via': '::'
'B EV  *> 2010::2:4/128 [200/0]/route node lock': '2'
'B EV  *> 2020::2:2/128 [200/0]/esi': '00.00.00.00.00.00.00.00.00.00.'
'C     *> 2010::1/128/OverlayRouter': '10'
'B EV  *> 2020::2:5/128 [200/0]/process_id': '0'
'C     *> FE80::/10/fast_sw_id': '0'
'C     *> FE80::/10/rib_rgate_num': '1'
'B EV  *> 2010::2:3/128 [200/0]/ex_flag': '0x0'
'C     *> 2010::/64/route node lock': '2'
'B EV  *> 2020::2:4/128 [200/0]/nh_rgate_num': '1'
'B EV  *> 2020::2:5/128 [200/0]/ex_flag': '0x0'
'B EV  *> 2020::2:4/128 [200/0]/fast_sw_id': '0'
'C     *> 2020::1/128/via': '::'
'B EV  *> 2010::2:6/128 [200/0]/route node lock': '2'
'C     *> 2010::1/128/esi': '00.00.00.00.00.00.00.00.00.00.'
'C     *> 2020::/64/rib_flag': '0x10'
'C     *> 2010::/64/mac': '0000.0000.0000'
'C     *> FE80::/10/mac': '0000.0000.0000'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 route data | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        flag_via = 0
        for value in show_info_list_line:
            if " via "in value :
                flag_via = 1
            if flag_via == 1 :
                list1 = value.split(",")
                for list1_value in list1:
                    if " via " in list1_value:
                        obj1 = re.match("(.*) via", value.strip())
                        value_title = obj1.group(1).strip()
                        list0 = list1_value.split("via")
                        title = list0[1].strip()
                        dict_value[value_title + "/" + "via"] = title
                    elif "OverlayRouter" in list1_value :
                        list2 = list1_value.split("OverlayRouter ")
                        title = list2[1].strip()
                        dict_value[value_title + "/" + "OverlayRouter"] = title
                    elif ":" in list1_value :
                        list4 = list1_value.split(":")
                        title0 = list4[0].strip()
                        title = list4[1].strip()
                        dict_value[value_title + "/"+title0] = title
                    elif "=" in list1_value :
                        list4 = list1_value.split("=")
                        title0 = list4[0].strip()
                        title = list4[1].strip()
                        dict_value[value_title+"/"+title0] = title

        return dict_value
    def dut_get_show_bgp_ipv6_unicast(self,show_info):
        """
        Function:show bgp ipv6 unicast回显解析函数
        CLI命令:show bgp ipv6 unicast
        回显信息示例:
RF_SW1#show bgp ipv6 unicast
BGP table version is 1, local router ID is 1.1.1.1
Status codes: s suppressed, d damped, h history, * valid, > best, i - internal,
              S Stale, b - backup entry, m - multipath, f Filter
Origin codes: i - IGP, e - EGP, ? - incomplete

    Network          Next Hop            Metric      LocPrf      Weight Path
*>i 2010::2:2/128    ::ffff:2.2.2.2           0                       0     i
*>i 2010::2:3/128    ::ffff:2.2.2.2           0                       0     i
*>i 2010::2:4/128    ::ffff:2.2.2.2           0                       0     i
*>i 2010::2:5/128    ::ffff:2.2.2.2           0                       0     i
*>i 2010::2:6/128    ::ffff:2.2.2.2           0                       0     i
*>i 2020::2:2/128    ::ffff:2.2.2.2           0                       0     i
*>i 2020::2:3/128    ::ffff:2.2.2.2           0                       0     i
*>i 2020::2:4/128    ::ffff:2.2.2.2           0                       0     i
*>i 2020::2:5/128    ::ffff:2.2.2.2           0                       0     i
*>i 2020::2:6/128    ::ffff:2.2.2.2           0                       0     i

Total number of prefixes 10
RF_SW1#

        Returns:
{'*>i 2010::2:3/128/Weight': '0'
'*>i 2010::2:6/128/Next Hop': '::ffff:2.2.2.2'
'*>i 2010::2:2/128/Path': 'i'
'*>i 2020::2:3/128/Next Hop': '::ffff:2.2.2.2'
'*>i 2020::2:4/128/LocPrf': ''
'*>i 2010::2:6/128/Weight': '0'
'*>i 2010::2:6/128/Metric': '0'
'*>i 2010::2:4/128/Metric': '0'
'Network_list': ['*>i 2010::2:2/128'
'*>i 2010::2:3/128'
'*>i 2010::2:4/128'
'*>i 2010::2:5/128'
'*>i 2010::2:6/128'
'*>i 2020::2:2/128'
'*>i 2020::2:3/128'
'*>i 2020::2:4/128'
'*>i 2020::2:5/128'
'*>i 2020::2:6/128'], '*>i 2010::2:3/128/Next Hop': '::ffff:2.2.2.2'
'*>i 2010::2:6/128/LocPrf': ''
'*>i 2020::2:2/128/Metric': '0'
'*>i 2010::2:4/128/Weight': '0'
'*>i 2010::2:5/128/Path': 'i'
'*>i 2020::2:6/128/Metric': '0'
'*>i 2020::2:4/128/Path': 'i'
'*>i 2010::2:6/128/Path': 'i'
'*>i 2020::2:3/128/Weight': '0'
'*>i 2010::2:2/128/Weight': '0'
'*>i 2020::2:3/128/Metric': '0'
'*>i 2020::2:2/128/Path': 'i'
'*>i 2010::2:5/128/Metric': '0'
'*>i 2020::2:5/128/Weight': '0'
'BGP table version': '1'
'*>i 2020::2:6/128/Path': 'i'
'*>i 2010::2:4/128/LocPrf': ''
'*>i 2010::2:4/128/Next Hop': '::ffff:2.2.2.2'
'*>i 2020::2:2/128/Next Hop': '::ffff:2.2.2.2'
'local router ID': '1.1.1.1'
'*>i 2020::2:3/128/Path': 'i'
'*>i 2020::2:6/128/Weight': '0'
'*>i 2010::2:3/128/Path': 'i'
'*>i 2010::2:3/128/Metric': '0'
'*>i 2020::2:4/128/Metric': '0'
'*>i 2010::2:4/128/Path': 'i'
'*>i 2010::2:5/128/Weight': '0'
'*>i 2020::2:5/128/Next Hop': '::ffff:2.2.2.2'
'*>i 2020::2:2/128/LocPrf': ''
'*>i 2020::2:2/128/Weight': '0'
'*>i 2020::2:5/128/Path': 'i'
'*>i 2020::2:6/128/LocPrf': ''
'*>i 2020::2:4/128/Next Hop': '::ffff:2.2.2.2'
'*>i 2010::2:2/128/Next Hop': '::ffff:2.2.2.2'
'*>i 2010::2:3/128/LocPrf': ''
'*>i 2020::2:6/128/Next Hop': '::ffff:2.2.2.2'
'*>i 2010::2:5/128/LocPrf': ''
'*>i 2020::2:4/128/Weight': '0'
'*>i 2010::2:2/128/LocPrf': ''
'Total number of prefixes': '10'
'*>i 2010::2:2/128/Metric': '0'
'*>i 2010::2:5/128/Next Hop': '::ffff:2.2.2.2'
'*>i 2020::2:5/128/Metric': '0'
'*>i 2020::2:5/128/LocPrf': ''
'*>i 2020::2:3/128/LocPrf': ''}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bgp ipv6 unicast | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_bgp_network(show_info)

    def dut_show_autoget_form_talbe_1(self, star_num, end_num,title_value,x_list,show_info_list_line,title_value2=None,table_1_value=None):
        '''
        对设备有关杆号的列表进行字典的遍历
        '''
        dict_value ={}
        address_list = []
        title_list =[]
        for i in range (star_num,end_num):    #line_len-1:上面删除“-----”这一行了
            ##print show_info_list_line[i]
            if table_1_value in show_info_list_line[i]:
                list_1 = show_info_list_line[i].split(",")
                for list_1_value in list_1:
                    list_2 = list_1_value.split(":")
                    dict_value[new_list_title_value+"/"+list_2[0].strip()] = list_2[1].strip()
            else:
                #print show_info_list_line[i]
                x_len = len(x_list)
                cut_star = 0
                cut_end=0
                new_list = []
                show_info_list_line[i] = show_info_list_line[i]
                ##print show_info_list_line[i]
                if show_info_list_line[i] != "" :
                    for j in range(x_len):
                        cut_end = cut_end+int(x_list[j])
                        col_value = show_info_list_line[i][cut_star:cut_end]
                        cut_star = cut_end
                        col_value = col_value.lstrip()
                        col_value = col_value.rstrip()
                        new_list.append(col_value)
                    #获取表头的列，用于组合
                    ##print col_value_list
                    for i in range(len(new_list)) :
                        if new_list[i] == title_value :
                            new_list_title_key = i
                        if title_value2 is not None :
                            if new_list[i] == title_value2 :
                                new_list_title_key_2 = i
                    new_list_title_value = new_list[new_list_title_key]          #需要变参的地方

                    if new_list_title_value == title_value:
                        title_list = new_list
                    elif new_list_title_value!= title_value:
                        #生成字典
                        if title_value2 is not None :
                            new_list_title_value = new_list_title_value+"/"+new_list[new_list_title_key_2]
                        address_list.append(new_list_title_value)
                        #遍历列头右边的值
                        if new_list_title_key+1 < x_len :
                            for s in range(new_list_title_key+1,x_len):  #需要变参的地方
                                #key_name = '%s/%s' % (title_col,title_row[s])
                                if title_value2 is not None :
                                    if s == new_list_title_key_2 :
                                        continue
                                key_name = '%s/%s'%(new_list_title_value,title_list[s])
                                dict_value[key_name]=new_list[s]
                        if new_list_title_key > 0 :
                            for s in range(0,new_list_title_key):  #需要变参的地方
                                ##遍历列头边的值
                                if title_value2 is not None :
                                    if s == new_list_title_key_2 :
                                        continue
                                key_name = '%s/%s' % (new_list_title_value, title_list[s])
                                dict_value[key_name]=new_list[s]
                    dict_value[title_value+"_list"]=address_list
        return dict_value
    def dut_get_show_vxlan_routeactive_ipv6(self,show_info):
        """
        Function:show vxlan route-active ipv6回显解析函数
        CLI命令:show vxlan route-active ipv6
        回显信息示例:
RF_SW1#show vxlan route-active ipv6 
VRF                            VXLAN    IP Address                                    Location VTEP-IP Address Interface    MAC Address    NH-MAC Address Source       
------------------------------ -------- --------------------------------------------- -------- --------------- ------------ -------------- -------------- -------------
@#global-vrf                   10       2010::1                                       local    0.0.0.0         -            0000.0000.0001 0000.0000.0001 TCP-OR-PORT  
                                                                                                                         SET-VNI: 400, FWD-VNI: 10, SVID: 0, Flags: 0x4
@#global-vrf                   10       2010::2                                       local    0.0.0.0         Te0/1        0011.9400.0002 0011.9400.0002 TCP-DYN-LOC  
                                                                                                                         SET-VNI: 400, FWD-VNI: 10, SVID: 0, Flags: 0x4
@#global-vrf                   10       2010::3                                       local    0.0.0.0         Te0/1        0011.9400.0003 0011.9400.0003 TCP-DYN-LOC  
                                                                                                                         SET-VNI: 400, FWD-VNI: 10, SVID: 0, Flags: 0x4
@#global-vrf                   10       2010::4                                       local    0.0.0.0         Te0/1        0011.9400.0004 0011.9400.0004 TCP-DYN-LOC  
                                                                                                                         SET-VNI: 400, FWD-VNI: 10, SVID: 0, Flags: 0x4
@#global-vrf                   10       2010::5                                       local    0.0.0.0         Te0/1        0011.9400.0005 0011.9400.0005 TCP-DYN-LOC  
                                                                                                                         SET-VNI: 400, FWD-VNI: 10, SVID: 0, Flags: 0x4
@#global-vrf                   10       2010::6                                       local    0.0.0.0         Te0/1        0011.9400.0006 0011.9400.0006 TCP-DYN-LOC  
                                                                                                                         SET-VNI: 400, FWD-VNI: 10, SVID: 0, Flags: 0x4
@#global-vrf                   20       2020::1                                       local    0.0.0.0         -            0000.0000.0001 0000.0000.0001 TCP-OR-PORT  
                                                                                                                         SET-VNI: 400, FWD-VNI: 20, SVID: 0, Flags: 0x4
@#global-vrf                   20       2020::2                                       local    0.0.0.0         Te0/1        0012.9400.0002 0012.9400.0002 TCP-DYN-LOC  
                                                                                                                         SET-VNI: 400, FWD-VNI: 20, SVID: 0, Flags: 0x4
@#global-vrf                   20       2020::3                                       local    0.0.0.0         Te0/1        0012.9400.0003 0012.9400.0003 TCP-DYN-LOC  
                                                                                                                         SET-VNI: 400, FWD-VNI: 20, SVID: 0, Flags: 0x4
@#global-vrf                   20       2020::4                                       local    0.0.0.0         Te0/1        0012.9400.0004 0012.9400.0004 TCP-DYN-LOC  
                                                                                                                         SET-VNI: 400, FWD-VNI: 20, SVID: 0, Flags: 0x4
@#global-vrf                   20       2020::5                                       local    0.0.0.0         Te0/1        0012.9400.0005 0012.9400.0005 TCP-DYN-LOC  
                                                                                                                         SET-VNI: 400, FWD-VNI: 20, SVID: 0, Flags: 0x4
@#global-vrf                   20       2020::6                                       local    0.0.0.0         Te0/1        0012.9400.0006 0012.9400.0006 TCP-DYN-LOC  
                                                                                                                         SET-VNI: 400, FWD-VNI: 20, SVID: 0, Flags: 0x4
@#global-vrf                   400      2010::2:2                                     remote   2.2.2.2         Ot6145       0021.9400.0002 5869.6cc6.0d39 TCP-DYN-REM  
                                                                                                                           SET-VNI: 0, FWD-VNI: 10, SVID: 0, Flags: 0x0
@#global-vrf                   400      2010::2:3                                     remote   2.2.2.2         Ot6145       0021.9400.0003 5869.6cc6.0d39 TCP-DYN-REM  
                                                                                                                           SET-VNI: 0, FWD-VNI: 10, SVID: 0, Flags: 0x0
@#global-vrf                   400      2010::2:4                                     remote   2.2.2.2         Ot6145       0021.9400.0004 5869.6cc6.0d39 TCP-DYN-REM  
                                                                                                                           SET-VNI: 0, FWD-VNI: 10, SVID: 0, Flags: 0x0
@#global-vrf                   400      2010::2:5                                     remote   2.2.2.2         Ot6145       0021.9400.0005 5869.6cc6.0d39 TCP-DYN-REM  
                                                                                                                           SET-VNI: 0, FWD-VNI: 10, SVID: 0, Flags: 0x0
@#global-vrf                   400      2010::2:6                                     remote   2.2.2.2         Ot6145       0021.9400.0006 5869.6cc6.0d39 TCP-DYN-REM  
                                                                                                                           SET-VNI: 0, FWD-VNI: 10, SVID: 0, Flags: 0x0
@#global-vrf                   400      2020::2:2                                     remote   2.2.2.2         Ot6145       0022.9400.0002 5869.6cc6.0d39 TCP-DYN-REM  
                                                                                                                           SET-VNI: 0, FWD-VNI: 20, SVID: 0, Flags: 0x0
@#global-vrf                   400      2020::2:3                                     remote   2.2.2.2         Ot6145       0022.9400.0003 5869.6cc6.0d39 TCP-DYN-REM  
                                                                                                                           SET-VNI: 0, FWD-VNI: 20, SVID: 0, Flags: 0x0
@#global-vrf                   400      2020::2:4                                     remote   2.2.2.2         Ot6145       0022.9400.0004 5869.6cc6.0d39 TCP-DYN-REM  
                                                                                                                           SET-VNI: 0, FWD-VNI: 20, SVID: 0, Flags: 0x0
@#global-vrf                   400      2020::2:5                                     remote   2.2.2.2         Ot6145       0022.9400.0005 5869.6cc6.0d39 TCP-DYN-REM  
                                                                                                                           SET-VNI: 0, FWD-VNI: 20, SVID: 0, Flags: 0x0
@#global-vrf                   400      2020::2:6                                     remote   2.2.2.2         Ot6145       0022.9400.0006 5869.6cc6.0d39 TCP-DYN-REM  
                                                                                                                           SET-VNI: 0, FWD-VNI: 20, SVID: 0, Flags: 0x0
count: 22
RF_SW1#

        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show vxlan route-active ipv6 | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value0 = {}
        value_title="IPv6 Address"     #需要变参的地方
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if value_title in show_info_list_line[line_len_num]:              #***********
                table_1 = line_len_num
            if "count" in show_info_list_line[line_len_num]:
                list1 = show_info_list_line[line_len_num].split(":")
                dict_value0[list1[0].strip()] = list1[1].strip()
        whippletree_list_1, del_line = self.dut_show_autoget_whippletree(0, 10, show_info_list_line)
        #whippletree_list_1 = [31,9,46,9,16,13,15,15,32]
        cut_del_1 = 1
        show_info_list_line.remove(show_info_list_line[cut_del_1])
        show_info_list_line.remove(show_info_list_line[-1])
        new_show_info_num = len(show_info_list_line)
        for line_len_num in range(0,new_show_info_num):
            if value_title in show_info_list_line[line_len_num]:              #***********
                table_3 = line_len_num
        dict_value1 = self.dut_show_autoget_form_talbe_1(table_3,new_show_info_num,value_title,whippletree_list_1,show_info_list_line,table_1_value="SET-VNI")
        dict_value =dict(dict_value1.items()+dict_value0.items())
        return dict_value
    def dut_get_show_vxlan_routeactive_ipv6_vni_num(self,show_info):
        """
        Function:show vxlan route-active ipv6 vni <num>回显解析函数
        CLI命令:show vxlan route-active ipv6 vni <num>
        回显信息示例:
RF_SW1#show vxlan route-active ipv6 vni 10

VRF                            VXLAN    IPv6 Address                                  Location VTEP-IP Address Interface    MAC Address    NH-MAC Address Source       
------------------------------ -------- --------------------------------------------- -------- --------------- ------------ -------------- -------------- -------------
@#global-vrf                   10       2010::1                                       local    0.0.0.0         -            0000.0000.0001 0000.0000.0001 TCP-OR-PORT  
                                                                                                                         SET-VNI: 400, FWD-VNI: 10, SVID: 0, Flags: 0x4
@#global-vrf                   10       2010::2:2                                     remote   2.2.2.2         Ot6145       0021.9400.0002 0021.9400.0002 TCP-DYN-REM  
                                                                                                                           SET-VNI: 0, FWD-VNI: 10, SVID: 0, Flags: 0x0
@#global-vrf                   10       2010::2:3                                     remote   2.2.2.2         Ot6145       0021.9400.0003 0021.9400.0003 TCP-DYN-REM  
                                                                                                                           SET-VNI: 0, FWD-VNI: 10, SVID: 0, Flags: 0x0
@#global-vrf                   10       2010::2:4                                     remote   2.2.2.2         Ot6145       0021.9400.0004 0021.9400.0004 TCP-DYN-REM  
                                                                                                                           SET-VNI: 0, FWD-VNI: 10, SVID: 0, Flags: 0x0
@#global-vrf                   10       2010::2:5                                     remote   2.2.2.2         Ot6145       0021.9400.0005 0021.9400.0005 TCP-DYN-REM  
                                                                                                                           SET-VNI: 0, FWD-VNI: 10, SVID: 0, Flags: 0x0
@#global-vrf                   10       2010::2:6                                     remote   2.2.2.2         Ot6145       0021.9400.0006 0021.9400.0006 TCP-DYN-REM  
                                                                                                                           SET-VNI: 0, FWD-VNI: 10, SVID: 0, Flags: 0x0
count: 6
RF_SW1#

        Returns:
{"2010::2:4/Source": "TCP-DYN-REM"
"2010::2:2/SET-VNI": "0"
"2010::2:4/SVID": "0"
"2010::2:4/Location": "remote"
"2010::1/Interface": "-"
"2010::2:5/VRF": "@#global-vrf"
"2010::2:5/VTEP-IP Address": "2.2.2.2"
"IPv6 Address_list": ["2010::1"
"2010::2:2"
"2010::2:3"
"2010::2:4"
"2010::2:5"
"2010::2:6"], "2010::2:5/SET-VNI": "0"
"2010::1/MAC Address": "0000.0000.0001"
"2010::1/VXLAN": "10"
"2010::2:3/Location": "remote"
"2010::2:5/Location": "remote"
"2010::2:4/VRF": "@#global-vrf"
"2010::2:3/VRF": "@#global-vrf"
"2010::2:2/NH-MAC Address": "0021.9400.0002"
"2010::2:2/MAC Address": "0021.9400.0002"
"2010::2:3/SVID": "0"
"2010::1/SET-VNI": "400"
"2010::2:6/SET-VNI": "0"
"2010::2:2/Location": "remote"
"2010::2:4/Interface": "Ot6145"
"2010::2:3/FWD-VNI": "10"
"2010::2:2/SVID": "0"
"2010::1/NH-MAC Address": "0000.0000.0001"
"2010::1/Location": "local"
"2010::1/FWD-VNI": "10"
"2010::2:2/Interface": "Ot6145"
"2010::2:3/Source": "TCP-DYN-REM"
"2010::2:4/NH-MAC Address": "0021.9400.0004"
"2010::2:3/Flags": "0x0"
"2010::2:5/Flags": "0x0"
"2010::2:6/SVID": "0"
"2010::2:6/VTEP-IP Address": "2.2.2.2"
"2010::2:3/VXLAN": "10"
"2010::2:3/MAC Address": "0021.9400.0003"
"2010::2:6/FWD-VNI": "10"
"count": "6"
"2010::2:6/VRF": "@#global-vrf"
"2010::2:2/FWD-VNI": "10"
"2010::2:6/MAC Address": "0021.9400.0006"
"2010::1/SVID": "0"
"2010::2:2/Source": "TCP-DYN-REM"
"2010::1/Source": "TCP-OR-PORT"
"2010::2:4/MAC Address": "0021.9400.0004"
"2010::2:5/SVID": "0"
"2010::1/Flags": "0x4"
"2010::2:6/Flags": "0x0"
"2010::2:2/VRF": "@#global-vrf"
"2010::2:3/Interface": "Ot6145"
"2010::1/VTEP-IP Address": "0.0.0.0"
"2010::2:3/SET-VNI": "0"
"2010::2:5/Interface": "Ot6145"
"2010::2:2/Flags": "0x0"
"2010::2:5/FWD-VNI": "10"
"2010::2:6/VXLAN": "10"
"2010::2:5/NH-MAC Address": "0021.9400.0005"
"2010::2:2/VXLAN": "10"
"2010::2:4/SET-VNI": "0"
"2010::2:5/MAC Address": "0021.9400.0005"
"2010::2:6/NH-MAC Address": "0021.9400.0006"
"2010::2:6/Interface": "Ot6145"
"2010::2:4/VXLAN": "10"
"2010::2:4/VTEP-IP Address": "2.2.2.2"
"2010::2:5/VXLAN": "10"
"2010::2:2/VTEP-IP Address": "2.2.2.2"
"2010::2:3/VTEP-IP Address": "2.2.2.2"
"2010::2:5/Source": "TCP-DYN-REM"
"2010::2:6/Source": "TCP-DYN-REM"
"2010::1/VRF": "@#global-vrf"
"2010::2:3/NH-MAC Address": "0021.9400.0003"
"2010::2:4/Flags": "0x0"
"2010::2:4/FWD-VNI": "10"
"2010::2:6/Location": "remote"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show vxlan route-active ipv6 vni <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_vxlan_routeactive_ipv6(show_info)
    def dut_get_show_bgp_l2vpn_evpn_all_macip(self,show_info):
        """
        Function:show bgp l2vpn evpn all mac-ip回显解析函数
        CLI命令:show bgp l2vpn evpn all mac-ip
        回显信息示例:
Ruijie#show bgp l2vpn evpn all mac-ip
RF_SW1#show bgp l2vpn evpn all mac-ip

BGP table version is 1, local router ID is 1.1.1.1
Status codes: s suppressed, d damped, h history, * valid, > best, i - internal,
              S Stale, b - backup entry, m - multipath, f Filter
Origin codes: i - IGP, e - EGP, ? - incomplete

    Network          Next Hop            Metric      LocPrf      Weight Path
Route Distinguisher: 1.1.1.1:10 (Default for EVI 10)
*>  2:0:48:0000.0000.0001:0:0.0.0.0/96
                     0.0.0.0                                      32768     i
*>  2:0:48:0011.9400.0002:0:0.0.0.0/96
                     0.0.0.0                                      32768     i
*>  2:0:48:0011.9400.0003:0:0.0.0.0/96
                     0.0.0.0                                      32768     i
*>  2:0:48:0011.9400.0004:0:0.0.0.0/96
                     0.0.0.0                                      32768     i
*>  2:0:48:0011.9400.0005:0:0.0.0.0/96
                     0.0.0.0                                      32768     i
*>  2:0:48:0011.9400.0006:0:0.0.0.0/96
                     0.0.0.0                                      32768     i

Total number of prefixes 6
Route Distinguisher: 1.1.1.1:400 (Default for EVI 400)
*>  2:0:48:0000.0000.0001:128:2010::1/224
                     0.0.0.0                                      32768     i
*>  2:0:48:0011.9400.0002:128:2010::2/224
                     0.0.0.0                                      32768     i
*>  2:0:48:0011.9400.0003:128:2010::3/224
                     0.0.0.0                                      32768     i
*>  2:0:48:0011.9400.0004:128:2010::4/224
                     0.0.0.0                                      32768     i
*>  2:0:48:0011.9400.0005:128:2010::5/224
                     0.0.0.0                                      32768     i
*>  2:0:48:0011.9400.0006:128:2010::6/224
                     0.0.0.0                                      32768     i

Total number of prefixes 6
RF_SW1#

        Returns:
{'*>  2:0:48:0000.0000.0001:128:2010::1/224/Metric': ''
'local router ID': '1.1.1.1'
'*>  2:0:48:0011.9400.0003:0:0.0.0.0/96/Next Hop': '0.0.0.0'
'*>  2:0:48:0011.9400.0005:0:0.0.0.0/96/LocPrf': ''
'*>  2:0:48:0011.9400.0006:0:0.0.0.0/96/Metric': ''
'*>  2:0:48:0000.0000.0001:0:0.0.0.0/96/LocPrf': ''
'*>  2:0:48:0011.9400.0006:0:0.0.0.0/96/LocPrf': ''
'*>  2:0:48:0011.9400.0002:0:0.0.0.0/96/Metric': ''
'Network_list': ['*>  2:0:48:0000.0000.0001:0:0.0.0.0/96'
'*>  2:0:48:0011.9400.0002:0:0.0.0.0/96'
'*>  2:0:48:0011.9400.0003:0:0.0.0.0/96'
'*>  2:0:48:0011.9400.0004:0:0.0.0.0/96'
'*>  2:0:48:0011.9400.0005:0:0.0.0.0/96'
'*>  2:0:48:0011.9400.0006:0:0.0.0.0/96'
'*>  2:0:48:0000.0000.0001:128:2010::1/224'
'*>  2:0:48:0011.9400.0002:128:2010::2/224'
'*>  2:0:48:0011.9400.0003:128:2010::3/224'
'*>  2:0:48:0011.9400.0004:128:2010::4/224'
'*>  2:0:48:0011.9400.0005:128:2010::5/224'
'*>  2:0:48:0011.9400.0006:128:2010::6/224'
'RF_SW1#2:0:48:0011.9400.0006:128:2010::6/224'], '*>  2:0:48:0011.9400.0002:0:0.0.0.0/96/Weight': '32768'
'*>  2:0:48:0011.9400.0005:128:2010::5/224/Metric': ''
'*>  2:0:48:0011.9400.0004:128:2010::4/224/Path': 'i'
'*>  2:0:48:0011.9400.0005:0:0.0.0.0/96/Path': 'i'
'*>  2:0:48:0011.9400.0006:0:0.0.0.0/96/Path': 'i'
'*>  2:0:48:0011.9400.0002:128:2010::2/224/Next Hop': '0.0.0.0'
'*>  2:0:48:0011.9400.0006:0:0.0.0.0/96/Weight': '32768'
'*>  2:0:48:0000.0000.0001:128:2010::1/224/Weight': '32768'
'*>  2:0:48:0011.9400.0004:0:0.0.0.0/96/Weight': '32768'
'*>  2:0:48:0011.9400.0002:128:2010::2/224/LocPrf': ''
'Route Distinguisher/Default for EVI 400': '1.1.1.1:400'
'*>  2:0:48:0011.9400.0004:0:0.0.0.0/96/Next Hop': '0.0.0.0'
'Total number of prefixes/1.1.1.1:10': '6'
'*>  2:0:48:0011.9400.0005:128:2010::5/224/Next Hop': '0.0.0.0'
'RF_SW1#2:0:48:0011.9400.0006:128:2010::6/224/LocPrf': ''
'*>  2:0:48:0011.9400.0006:128:2010::6/224/LocPrf': ''
'BGP table version': '1'
'RF_SW1#2:0:48:0011.9400.0006:128:2010::6/224/Weight': ''
'*>  2:0:48:0011.9400.0005:128:2010::5/224/LocPrf': ''
'*>  2:0:48:0011.9400.0002:128:2010::2/224/Metric': ''
'*>  2:0:48:0011.9400.0003:0:0.0.0.0/96/Metric': ''
'*>  2:0:48:0011.9400.0006:128:2010::6/224/Next Hop': '0.0.0.0'
'*>  2:0:48:0011.9400.0004:128:2010::4/224/Next Hop': '0.0.0.0'
'*>  2:0:48:0011.9400.0003:128:2010::3/224/Next Hop': '0.0.0.0'
'*>  2:0:48:0011.9400.0003:0:0.0.0.0/96/Path': 'i'
'*>  2:0:48:0011.9400.0004:128:2010::4/224/LocPrf': ''
'*>  2:0:48:0011.9400.0003:0:0.0.0.0/96/LocPrf': ''
'*>  2:0:48:0011.9400.0006:128:2010::6/224/Metric': ''
'Total number of prefixes/1.1.1.1:400': '6'
'*>  2:0:48:0011.9400.0006:128:2010::6/224/Path': 'i'
'*>  2:0:48:0000.0000.0001:0:0.0.0.0/96/Path': 'i'
'*>  2:0:48:0011.9400.0006:128:2010::6/224/Weight': '32768'
'*>  2:0:48:0000.0000.0001:0:0.0.0.0/96/Weight': '32768'
'*>  2:0:48:0011.9400.0005:0:0.0.0.0/96/Weight': '32768'
'*>  2:0:48:0011.9400.0002:128:2010::2/224/Path': 'i'
'RF_SW1#2:0:48:0011.9400.0006:128:2010::6/224/Path': ''
'*>  2:0:48:0011.9400.0005:0:0.0.0.0/96/Next Hop': '0.0.0.0'
'*>  2:0:48:0011.9400.0003:0:0.0.0.0/96/Weight': '32768'
'RF_SW1#2:0:48:0011.9400.0006:128:2010::6/224/Metric': ''
'*>  2:0:48:0011.9400.0006:0:0.0.0.0/96/Next Hop': '0.0.0.0'
'*>  2:0:48:0011.9400.0004:0:0.0.0.0/96/Metric': ''
'*>  2:0:48:0011.9400.0005:128:2010::5/224/Weight': '32768'
'*>  2:0:48:0000.0000.0001:128:2010::1/224/LocPrf': ''
'*>  2:0:48:0000.0000.0001:128:2010::1/224/Path': 'i'
'*>  2:0:48:0000.0000.0001:0:0.0.0.0/96/Next Hop': '0.0.0.0'
'RF_SW1#2:0:48:0011.9400.0006:128:2010::6/224/Next Hop': ''
'*>  2:0:48:0011.9400.0002:0:0.0.0.0/96/Path': 'i'
'*>  2:0:48:0011.9400.0004:0:0.0.0.0/96/Path': 'i'
'*>  2:0:48:0011.9400.0003:128:2010::3/224/Metric': ''
'*>  2:0:48:0011.9400.0005:0:0.0.0.0/96/Metric': ''
'*>  2:0:48:0011.9400.0005:128:2010::5/224/Path': 'i'
'*>  2:0:48:0011.9400.0004:0:0.0.0.0/96/LocPrf': ''
'*>  2:0:48:0011.9400.0002:0:0.0.0.0/96/LocPrf': ''
'*>  2:0:48:0011.9400.0004:128:2010::4/224/Weight': '32768'
'*>  2:0:48:0011.9400.0002:0:0.0.0.0/96/Next Hop': '0.0.0.0'
'*>  2:0:48:0011.9400.0003:128:2010::3/224/LocPrf': ''
'*>  2:0:48:0000.0000.0001:128:2010::1/224/Next Hop': '0.0.0.0'
'*>  2:0:48:0011.9400.0003:128:2010::3/224/Path': 'i'
'*>  2:0:48:0000.0000.0001:0:0.0.0.0/96/Metric': ''
'*>  2:0:48:0011.9400.0002:128:2010::2/224/Weight': '32768'
'*>  2:0:48:0011.9400.0003:128:2010::3/224/Weight': '32768'
'Route Distinguisher/Default for EVI 10': '1.1.1.1:10'
'*>  2:0:48:0011.9400.0004:128:2010::4/224/Metric': ''}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bgp l2vpn evpn all mac-ip | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value1 = {}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*#.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        for value in show_info_list_line[:]:
            if "Route Distinguisher" in value:
                obj_1 = re.match("Route Distinguisher:(.*)\((.*)\)",value)
                obj_1_value_1 = obj_1.group(1).strip()
                obj_1_value_2 = obj_1.group(2).strip()
                dict_value1["Route Distinguisher"+"/"+obj_1_value_2] = obj_1_value_1
                show_info_list_line.remove(value)
            if "Total number of prefixes" in value:
                obj_2 = re.match("Total number of prefixes (\d+)",value)
                obj_2_value_1 = obj_2.group(1).strip()
                dict_value1["Total number of prefixes"+"/"+obj_1_value_1] = obj_2_value_1
                total_num = value
                show_info_list_line.remove(value)
        show_info_list_line.append(total_num)
        show_info ="\n".join(show_info_list_line)
        dict_value2 = self.dut_get_bgp_network(show_info)
        dict_value =dict(dict_value1.items()+dict_value2.items())
        dict_value.pop("Total number of prefixes")
        return dict_value

    def dut_get_show_ipv6_route(self, show_info):
        """
        Function:show ipv6 route回显解析函数
        CLI命令:show ipv6 route
        回显信息示例:
RF_SW1#show ipv6 route

IPv6 routing table name - Default - 21 entries
Codes:  C - Connected, L - Local, S - Static
        R - RIP, O - OSPF, B - BGP, I - IS-IS, V - Overflow route
        N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
        E1 - OSPF external type 1, E2 - OSPF external type 2
        SU - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2
        IA - Inter area, EV - BGP EVPN, N - Nd to host

C      2010::/64 via OverlayRouter 10, directly connected
L      2010::1/128 via OverlayRouter 10, local host
B  EV  2010::2:2/128 [200/0] via ::FFFF:2.2.2.2, OverlayRouter 400
B  EV  2010::2:3/128 [200/0] via ::FFFF:2.2.2.2, OverlayRouter 400
B  EV  2010::2:4/128 [200/0] via ::FFFF:2.2.2.2, OverlayRouter 400
B  EV  2010::2:5/128 [200/0] via ::FFFF:2.2.2.2, OverlayRouter 400
B  EV  2010::2:6/128 [200/0] via ::FFFF:2.2.2.2, OverlayRouter 400
C      2020::/64 via OverlayRouter 20, directly connected
L      2020::1/128 via OverlayRouter 20, local host
B  EV  2020::2:2/128 [200/0] via ::FFFF:2.2.2.2, OverlayRouter 400
B  EV  2020::2:3/128 [200/0] via ::FFFF:2.2.2.2, OverlayRouter 400
B  EV  2020::2:4/128 [200/0] via ::FFFF:2.2.2.2, OverlayRouter 400
B  EV  2020::2:5/128 [200/0] via ::FFFF:2.2.2.2, OverlayRouter 400
B  EV  2020::2:6/128 [200/0] via ::FFFF:2.2.2.2, OverlayRouter 400
C      FE80::/10 via ::1, Null0
C      FE80::/64 via OverlayRouter 10, directly connected
L      FE80::200:FF:FE00:1/128 via OverlayRouter 10, local host
C      FE80::/64 via OverlayRouter 20, directly connected
L      FE80::200:FF:FE00:1/128 via OverlayRouter 20, local host
C      FE80::/64 via OverlayRouter 400, directly connected
L      FE80::5A69:6CFF:FEC6:F97/128 via OverlayRouter 400, local host
RF_SW1#

        Returns:
{'2020::2:3/128 [200/0]/code': 'B  EV'
'2010::2:4/128 [200/0]/code': 'B  EV'
'2020::1/128/status': 'local host'
'2020::/64/via': 'OverlayRouter 20'
'FE80::200:FF:FE00:1/128/via': 'OverlayRouter 20'
'2010::2:3/128 [200/0]/via': '::FFFF:2.2.2.2'
'FE80::/10/status': 'Null0'
'2020::1/128/via': 'OverlayRouter 20'
'2020::2:2/128 [200/0]/via': '::FFFF:2.2.2.2'
'2020::1/128/code': 'L'
'2010::2:3/128 [200/0]/code': 'B  EV'
'FE80::5A69:6CFF:FEC6:F97/128/code': 'L'
'2020::2:5/128 [200/0]/status': 'OverlayRouter 400'
'2010::/64/code': 'C'
'FE80::/10/code': 'C'
'ip_list': ['2010::/64'
'2010::1/128'
'2010::2:2/128 [200/0]'
'2010::2:3/128 [200/0]'
'2010::2:4/128 [200/0]'
'2010::2:5/128 [200/0]'
'2010::2:6/128 [200/0]'
'2020::/64'
'2020::1/128'
'2020::2:2/128 [200/0]'
'2020::2:3/128 [200/0]'
'2020::2:4/128 [200/0]'
'2020::2:5/128 [200/0]'
'2020::2:6/128 [200/0]'
'FE80::/10'
'FE80::/64'
'FE80::200:FF:FE00:1/128'
'FE80::/64'
'FE80::200:FF:FE00:1/128'
'FE80::/64'
'FE80::5A69:6CFF:FEC6:F97/128'], '2010::2:5/128 [200/0]/code': 'B  EV'
'2010::2:6/128 [200/0]/code': 'B  EV'
'2020::2:4/128 [200/0]/code': 'B  EV'
'2020::2:3/128 [200/0]/via': '::FFFF:2.2.2.2'
'2010::2:6/128 [200/0]/via': '::FFFF:2.2.2.2'
'2010::2:2/128 [200/0]/code': 'B  EV'
'2020::2:5/128 [200/0]/via': '::FFFF:2.2.2.2'
'2010::2:4/128 [200/0]/via': '::FFFF:2.2.2.2'
'2020::2:6/128 [200/0]/via': '::FFFF:2.2.2.2'
'2020::/64/code': 'C'
'2010::/64/via': 'OverlayRouter 10'
'2010::2:5/128 [200/0]/status': 'OverlayRouter 400'
'FE80::/64/status': 'directly connected'
'2020::2:2/128 [200/0]/code': 'B  EV'
'2020::2:2/128 [200/0]/status': 'OverlayRouter 400'
'2010::2:6/128 [200/0]/status': 'OverlayRouter 400'
'2020::2:4/128 [200/0]/status': 'OverlayRouter 400'
'2020::2:3/128 [200/0]/status': 'OverlayRouter 400'
'2010::1/128/via': 'OverlayRouter 10'
'FE80::/10/via': '::1'
'FE80::200:FF:FE00:1/128/code': 'L'
'2020::2:6/128 [200/0]/code': 'B  EV'
'2020::2:6/128 [200/0]/status': 'OverlayRouter 400'
'2010::2:5/128 [200/0]/via': '::FFFF:2.2.2.2'
'2020::/64/status': 'directly connected'
'FE80::200:FF:FE00:1/128/status': 'local host'
'FE80::5A69:6CFF:FEC6:F97/128/via': 'OverlayRouter 400'
'FE80::/64/via': 'OverlayRouter 400'
'2020::2:4/128 [200/0]/via': '::FFFF:2.2.2.2'
'2010::2:4/128 [200/0]/status': 'OverlayRouter 400'
'FE80::/64/code': 'C'
'2010::1/128/code': 'L'
'2010::/64/status': 'directly connected'
'2010::2:2/128 [200/0]/via': '::FFFF:2.2.2.2'
'2010::2:2/128 [200/0]/status': 'OverlayRouter 400'
'2010::1/128/status': 'local host'
'2020::2:5/128 [200/0]/code': 'B  EV'
'2010::2:3/128 [200/0]/status': 'OverlayRouter 400'
'FE80::5A69:6CFF:FEC6:F97/128/status': 'local host'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 route | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_list_line = self.dut_get_start_show_info(show_info)
        ip_list = []
        via_flag = 0
        for value in show_info_list_line:
            if re.match("(.*), \d\d:\d\d:\d\d\Z",value):
                obj = re.match("(.*), \d\d:\d\d:\d\d\Z", value)
                value = obj.group(1)
            if re.match("(.*)\s{1,}([\d|FE80|::].*)via(.*),(.*)", value.strip()):
                obj_1 = re.match("(.*)\s{1,}([\d|FE80|::].*)via(.*),(.*)", value.strip())
                code = obj_1.group(1).strip()
                ip = obj_1.group(2).strip()
                via = obj_1.group(3).strip()
                status = obj_1.group(4).strip()
                dict_value[ip + "/code"] = code
                dict_value[ip + "/via"] = via
                dict_value[ip + "/status"] = status
                ip_list.append(ip)
                if via_flag == 1:
                    via_flag = 0
            elif re.match("SR\s+(\S+) \S+ opcode end\.x, via (\S+), (.*)", value.strip()):
                obj_1 = re.match("SR\s+(\S+) \S+ opcode end\.x, via (\S+), (.*)", value.strip())
                ip = obj_1.group(1).strip()
                via_value = obj_1.group(2).strip()
                port_value = obj_1.group(3).strip()
                dict_value[ip + "/via"] = via_value
                dict_value[ip + "/status"] = "SR"
                dict_value[ip + "/port"] = port_value
                ip_list.append(ip)
            elif re.match("SR\s+(\S+) \S+ opcode end\.x with \S+, via (\S+), (.*)", value.strip()):
                obj_1 = re.match("SR\s+(\S+) \S+ opcode end\.x with \S+, via (\S+), (.*)", value.strip())
                ip = obj_1.group(1).strip()
                via_value = obj_1.group(2).strip()
                port_value = obj_1.group(3).strip()
                dict_value[ip + "/via"] = via_value
                dict_value[ip + "/status"] = "SR"
                dict_value[ip + "/port"] = port_value
                ip_list.append(ip)
            elif re.match("SR\s+(\S+) \S+ opcode end with (\S+)", value.strip()):
                obj_1 = re.match("SR\s+(\S+) \S+ opcode end with (\S+)", value.strip())
                ip = obj_1.group(1).strip()
                psp_value = obj_1.group(2).strip()
                dict_value[ip + "/opcode end with"] = psp_value
                dict_value[ip + "/status"] = "SR"
                ip_list.append(ip)
            elif re.match("SR\s+(\S+) \S+ opcode end", value.strip()):
                obj_1 = re.match("SR\s+(\S+) \S+ opcode end", value.strip())
                ip = obj_1.group(1).strip()
                dict_value[ip + "/status"] = "SR"
                ip_list.append(ip)

            elif "," not in value:
                if re.match("(.*)\s{1,}([\d|FE80|::].*)via(.*)", value.strip()):
                    obj_2 = re.match("(.*)\s{1,}([\d|FE80|::].*)via(.*)", value.strip())
                    code = obj_2.group(1).strip()
                    ip = obj_2.group(2).strip()
                    key_via = obj_2.group(3).strip()
                    dict_value[ip + "/code"] = code
                    via_list = []
                    via_list.append(key_via)
                    ip_list.append(ip)
                    via_flag = 1
            elif via_flag == 1 and re.match("\(recursive via (.*),(.*)\)", value.strip()):
                obj_3 = re.match("\(recursive via (.*),(.*)\)", value.strip())
                via = obj_3.group(1).strip()
                status = obj_3.group(2).strip()
                dict_value[ip + "/" + via + "/status"] = status
        dict_value["ip_list"] = ip_list
        return dict_value
    def dut_get_show_ipv6_neighbors_detail_overlayrouter_num(self,show_info):
        """
        Function:show ipv6 neighbors detail overlayRouter <num>回显解析函数
        CLI命令:show ipv6 neighbors detail overlayRouter <num>
        回显信息示例:
RF_SW1#show ipv6 neighbors detail overlayRouter 10

IPv6 Address                            Linklayer Addr Interface
2010::1                                 0000.0000.0001 OverlayRouter 10       State: REACH/H Age: - asked: 0 vid: 0 port: 0 vni: 0 is_remote:false 
2010::2:2                               0021.9400.0002 OverlayRouter 10       State: REACH/H Age: - asked: 0 vid: 0 port: 8466 vni: 10 is_remote:true host mac: 0021.9400.0002
2010::2:3                               0021.9400.0003 OverlayRouter 10       State: REACH/H Age: - asked: 0 vid: 0 port: 8466 vni: 10 is_remote:true host mac: 0021.9400.0003
2010::2:4                               0021.9400.0004 OverlayRouter 10       State: REACH/H Age: - asked: 0 vid: 0 port: 8466 vni: 10 is_remote:true host mac: 0021.9400.0004
2010::2:5                               0021.9400.0005 OverlayRouter 10       State: REACH/H Age: - asked: 0 vid: 0 port: 8466 vni: 10 is_remote:true host mac: 0021.9400.0005
2010::2:6                               0021.9400.0006 OverlayRouter 10       State: REACH/H Age: - asked: 0 vid: 0 port: 8466 vni: 10 is_remote:true host mac: 0021.9400.0006
FE80::200:FF:FE00:1                     0000.0000.0001 OverlayRouter 10       State: REACH/H Age: - asked: 0 vid: 0 port: 0 vni: 0 is_remote:false 
RF_SW1#

        Returns:
{'2010::2:5/Interface': 'OverlayRouter 10'
'2010::2:3/State': 'REACH/H'
'2010::2:4/Age': '-'
'2010::1/Interface': 'OverlayRouter 10'
'2010::2:3/vni': '10'
'ip_address_list': ['2010::1'
'2010::2:2'
'2010::2:3'
'2010::2:4'
'2010::2:5'
'2010::2:6'
'FE80::200:FF:FE00:1'], '2010::2:5/Age': '-'
'FE80::200:FF:FE00:1/Linklayer Addr': '0000.0000.0001'
'2010::1/Linklayer Addr': '0000.0000.0001'
'2010::2:5/host mac': '0021.9400.0005'
'2010::2:4/Linklayer Addr': '0021.9400.0004'
'FE80::200:FF:FE00:1/Interface': 'OverlayRouter 10'
'2010::2:5/State': 'REACH/H'
'2010::2:4/vid': '0'
'2010::2:2/State': 'REACH/H'
'2010::2:5/port': '8466'
'2010::2:4/Interface': 'OverlayRouter 10'
'2010::2:4/vni': '10'
'2010::2:5/vid': '0'
'2010::2:5/asked': '0'
'2010::2:2/Interface': 'OverlayRouter 10'
'2010::2:6/port': '8466'
'2010::2:6/vni': '10'
'2010::2:2/asked': '0'
'2010::2:4/is_remote': 'true'
'2010::2:3/host mac': '0021.9400.0003'
'2010::2:4/host mac': '0021.9400.0004'
'2010::2:5/Linklayer Addr': '0021.9400.0005'
'2010::2:2/Age': '-'
'2010::2:6/host mac': '0021.9400.0006'
'2010::2:3/port': '8466'
'2010::2:6/State': 'REACH/H'
'2010::2:2/Linklayer Addr': '0021.9400.0002'
'2010::2:3/is_remote': 'true'
'2010::2:6/Linklayer Addr': '0021.9400.0006'
'2010::2:3/Age': '-'
'2010::2:6/is_remote': 'true'
'2010::2:6/Age': '-'
'2010::2:2/host mac': '0021.9400.0002'
'2010::2:3/asked': '0'
'2010::2:3/Linklayer Addr': '0021.9400.0003'
'2010::2:4/asked': '0'
'2010::2:3/Interface': 'OverlayRouter 10'
'2010::2:2/vni': '10'
'2010::2:5/is_remote': 'true'
'2010::2:4/State': 'REACH/H'
'2010::2:2/vid': '0'
'2010::2:2/is_remote': 'true'
'2010::2:6/asked': '0'
'2010::2:2/port': '8466'
'2010::2:4/port': '8466'
'2010::2:3/vid': '0'
'2010::2:5/vni': '10'
'2010::2:6/Interface': 'OverlayRouter 10'
'2010::2:6/vid': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 neighbors detail overlayRouter <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="IPv6 Address"
        dict_value={}
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        dut_info_split = self.del_space_lines(dut_info_split)
        length_list = [40,15,20,100]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        ip_address_list = []
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            if list_len[0]==value_title:
                title = list_len
            elif list_len[0]!=value_title:
                ip_address_list.append(list_len[0])
                for s in range(1,length_list_len):
                    if s == 3 :
                        if re.match("State:(.*)Age:(.*)asked:(.*)vid:(.*)port:(.*)vni:(.*)is_remote:(.*)host mac:(.*)",list_len[3].strip()):
                            obj_1 = re.match("State:(.*)Age:(.*)asked:(.*)vid:(.*)port:(.*)vni:(.*)is_remote:(.*)host mac:(.*)",list_len[3])
                            list_1 =["State","Age","asked","vid","port","vni","is_remote","host mac"]
                            count = 1
                            for value_list_1 in list_1:
                                key_name = '%s/%s' % (list_len[0],value_list_1)
                                dict_value[key_name]=obj_1.group(count).strip()
                                count =count +1
                    else:
                        key_name = '%s/%s' % (list_len[0],title[s])
                        dict_value[key_name]=list_len[s]
            dict_value["ip_address_list"]=ip_address_list
        return dict_value
    def dut_get_show_vxlan_routebgp_ipv6_vni_num(self,show_info):
        """
        Function:show vxlan route-bgp ipv6 vni <num>回显解析函数
        CLI命令:show vxlan route-bgp ipv6 vni <num>
        回显信息示例:
RF_SW1#show vxlan route-bgp ipv6 vni 400

VXLAN    IPv6 Address                                  VTEP-IP Address Interface    MAC Address    NH-MAC Address IS_GW
-------- --------------------------------------------- --------------- ------------ -------------- -------------- -----
400      2010::2:2                                     2.2.2.2         Ot6145       0021.9400.0002 5869.6cc6.0d39 False
400      2010::2:3                                     2.2.2.2         Ot6145       0021.9400.0003 5869.6cc6.0d39 False
400      2010::2:4                                     2.2.2.2         Ot6145       0021.9400.0004 5869.6cc6.0d39 False
400      2010::2:5                                     2.2.2.2         Ot6145       0021.9400.0005 5869.6cc6.0d39 False
400      2010::2:6                                     2.2.2.2         Ot6145       0021.9400.0006 5869.6cc6.0d39 False
RF_SW1#

        Returns:
{"2010::2:5/Interface": "Ot6145"
"2010::2:2/IS_GW": "False"
"IPv6 Address_list": ["2010::2:2"
"2010::2:3"
"2010::2:4"
"2010::2:5"
"2010::2:6"], "2010::2:5/NH-MAC Address": "5869.6cc6.0d39"
"2010::2:6/Interface": "Ot6145"
"2010::2:4/VXLAN": "400"
"2010::2:2/NH-MAC Address": "5869.6cc6.0d39"
"2010::2:4/VTEP-IP Address": "2.2.2.2"
"2010::2:4/Interface": "Ot6145"
"2010::2:3/IS_GW": "False"
"2010::2:2/Interface": "Ot6145"
"2010::2:4/NH-MAC Address": "5869.6cc6.0d39"
"2010::2:3/MAC Address": "0021.9400.0003"
"2010::2:6/VTEP-IP Address": "2.2.2.2"
"2010::2:3/VXLAN": "400"
"2010::2:5/VTEP-IP Address": "2.2.2.2"
"2010::2:2/MAC Address": "0021.9400.0002"
"2010::2:6/MAC Address": "0021.9400.0006"
"2010::2:4/MAC Address": "0021.9400.0004"
"2010::2:5/VXLAN": "400"
"2010::2:3/Interface": "Ot6145"
"2010::2:6/IS_GW": "False"
"2010::2:6/VXLAN": "400"
"2010::2:5/MAC Address": "0021.9400.0005"
"2010::2:4/IS_GW": "False"
"2010::2:5/IS_GW": "False"
"2010::2:6/NH-MAC Address": "5869.6cc6.0d39"
"2010::2:2/VXLAN": "400"
"2010::2:2/VTEP-IP Address": "2.2.2.2"
"2010::2:3/VTEP-IP Address": "2.2.2.2"
"2010::2:3/NH-MAC Address": "5869.6cc6.0d39"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show vxlan route-bgp ipv6 vni <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list_line = show_info.split("\n")
        if re.match(r'.*#.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        value_title = "IPv6 Address"
        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if "IP Address" in show_info_list_line[line_len_num]:              #***********
                table_1 = line_len_num
                break
        (whippletree_list_1,cut_del_1) = self.dut_show_autoget_whippletree(table_1,line_len,show_info_list_line)
        show_info_list_line.remove(show_info_list_line[cut_del_1])
        new_show_info_num = len(show_info_list_line)
        for line_len_num in range(0,new_show_info_num):
            if value_title in show_info_list_line[line_len_num]:              #***********
                table_3 = line_len_num
        dict_value = self.dut_show_autoget_form(table_3,new_show_info_num,value_title,whippletree_list_1,show_info_list_line)
        return dict_value
    def dut_get_show_interface_dutport_counters_rate(self,show_info):
        """
        Function:show interface <dutport> counters rate回显解析函数
        CLI命令:show interface <dutport> counters rate
        回显信息示例:
Ruijie#show interface tfGigabitEthernet 0/3 counters rate 
Interface               Sampling Time           Input Rate           Input Rate          Output Rate          Output Rate
                                                (bits/sec)        (packets/sec)           (bits/sec)        (packets/sec)
--------------- --------------------- -------------------- -------------------- -------------------- --------------------
TF0/3                       5 seconds            916445205               596645                    0                    0

        Returns:
{'TF0/3/Input Rate(packets/sec)': '596645'
'TF0/3/Output Rate(packets/sec)': '0'
'TF0/3/Output Rate(bits/sec)': '0'
'Interface': ['TF0/3'], 'TF0/3/Sampling Time': '5 seconds'
'TF0/3/Input Rate(bits/sec)': '916445205'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interface <dutport> counters rate | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        # main_key=main_key
        ########关键key的传入值
        ########寻址key（必填）
        main_key_list = ['Interface']
        ########若有key分多行写，填完整的key值，不然与寻址key一样就好（必填）
        real_main_key_list=['Interface']
        ########

        # 创建字典
        dict_value = {}

        # 按行读取信息，并清除空值清除无用信息头信息尾数据
        show_info_split = show_info.split("\n")
        if re.match(r'.*Ruijie.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*Ruijie.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        # （去掉dut_info_split中的空值以及只包含空格符的值）
        for i in dut_info_split:
            if '' in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' ' in dut_info_split:
                dut_info_split.remove(' ')
        for i in range(len(dut_info_split)):
            dut_info_split[i] = dut_info_split[i]
        #print(dut_info_split)

        #######################参数
        # 表数量
        count = 0
        # 各个横杠长度
        hengang_len = 0
        # 一张表内各个横杠长度集合
        hengang_len_list = []
        # 整个showinfo内每张表内各个横杠长度集合的集合
        hengang_len_list_list = []
        # 横杠位置（用来相对判定key的位置）
        hengang_index_list = []
        # key的位置
        key_index_list = []
        # 表信息的集合
        table = []
        # 所有表信息的集合
        table_list = []
        #######################

        # 主要算法
        # 标识横杠位置并记录参数相关信息
        for i in range(len(dut_info_split)):
            if re.match("-+", dut_info_split[i]):
                # 排除数据中有“-”的情况
                for j in dut_info_split[i]:
                    if j != '-' and j != ' ':
                        cheak = 1
                        break
                    else:
                        cheak = 0
                        continue
                if cheak == 0:
                    hengang_len_list = []
                    count = count + 1
                    hengang_index_list.append(i)
                    #print(dut_info_split[i])
                    # 识别并记录下横杠的长度到list中
                    for k in range(len(dut_info_split[i])):
                        if dut_info_split[i][k] == '-' and k != len(dut_info_split[i]) - 1:
                            hengang_len = hengang_len + 1
                            lianxu=0
                        elif dut_info_split[i][k] == ' ' and lianxu==0:
                            hengang_len_list.append(hengang_len)
                            hengang_len = 0
                            lianxu=1
                        elif k == len(dut_info_split[i]) - 1:
                            hengang_len = hengang_len + 1
                            hengang_len_list.append(hengang_len)
                            hengang_len = 0
                    hengang_len_list_list.append(hengang_len_list)
                else:
                    continue
                # print(hengang_len_list_list)
        # 根据横杠位置和key的传入值标识出key的位置
        #"""一般情况下横杠上一位就是key值，其他情况有横杠上一行为单位，或者有key值过长分行输出显示？"""
        for i in range(len(hengang_index_list)):
            main_key = main_key_list[i]
            k = hengang_index_list[i]
            while 1:
                if re.match('.*' + main_key + '.*', dut_info_split[k]):
                    key_index_list.append(k)
                    break
                else:
                    k = k - 1
        # print(key_index_list)
        # 根据查找的key位置进行分表操作,并存入table_list中
        for i in range(len(key_index_list)):
            if i == len(key_index_list) - 1:
                table = dut_info_split[key_index_list[i]:]
            else:
                table = dut_info_split[key_index_list[i]:key_index_list[i + 1]]
            table_list.append(table)
        #print(table_list)
        # 对各个表中的key、value提取，并删除掉横杠
        # 判定若key与横杠之间有单位之类的数据，进行key与该数据的整合成为一个完整key数据
        for i in range(len(table_list)):
            key_list = []
            value_list = []
            for j in range(len(table_list[i])):
                if re.match('-+', table_list[i][j]):
                    index = j
            key_info = table_list[i][0:index]
            value_info = table_list[i][index+1:]
            #print(value_info)
            ##单行key的情况
            if index == 1:
                #key
                num1 = 0
                num2 = 0
                key = []
                for k in range(len(hengang_len_list_list[i])):
                    num1 = num2
                    num2 = 1 + hengang_len_list_list[i][k] + num2
                    key.append(key_info[0][num1:num2].strip())
                #value
                for k in  range(len(value_info)):
                    value = []
                    num1 = 0
                    num2 = 0
                    #print(hengang_len_list_list[i])
                    for l in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][l] + num2
                        value.append(value_info[k][num1:num2])
                        #print(num1,num2)
                    value_list.append(value)
                #print(value_list)
                #录入词典
                real_main_key=real_main_key_list[i]
                real_main_key_index=key.index(real_main_key)
                key__list=[]
                for q in range(len(value_list)):
                    for w in range(len(value_list[q])):
                        if w == real_main_key_index:
                            key__list.append(value_list[q][w].strip())
                            continue
                        else:
                            title=value_list[q][real_main_key_index].strip()+'/'+key[w].strip()
                            info=value_list[q][w].strip()
                            dict_value[title]=info
                    dict_value[real_main_key]=key__list
                # print(main_key)
                # print(key)
                # print(value_list)
            ##多行key的情况
            elif index > 1:
                #key
                for m in range(len(key_info)):
                    num1 = 0
                    num2 = 0
                    key = []
                    for k in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][k] + num2
                        key.append(key_info[m][num1:num2])
                    key_list.append(key)
                #print(key_list)
                count_key_List = 0
                count_num=0
                for h in range(len(key_list[0])):
                    count_key_List=count_key_List+1
                real_key_list=[]
                while 1:
                    real_key=''
                    count_num=count_num+1
                    if count_num>count_key_List:
                        break
                    else:
                        for f in range(len(key_list)):
                            key_in=key_list[f][count_num-1]
                            real_key=real_key.strip()+key_in.strip()
                        #print(real_key)
                        real_key_list.append(real_key)
                        continue
                #print(real_key_list)
                #value
                for k in  range(len(value_info)):
                    value = []
                    num1 = 0
                    num2 = 0
                    for l in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][l] + num2
                        value.append(value_info[k][num1:num2])
                    value_list.append(value)
                #录入词典
                real_main_key=real_main_key_list[i]
                real_main_key_index=real_key_list.index(real_main_key)
                key__list = []
                for q in range(len(value_list)):
                    for w in range(len(value_list[q])):
                        if w == real_main_key_index:
                            key__list.append(value_list[q][w].strip())
                            continue
                        else:
                            title=value_list[q][real_main_key_index].strip()+'/'+real_key_list[w].strip()
                            info=value_list[q][w].strip()
                            dict_value[title]=info
                    dict_value[real_main_key]=key__list
                # print(key__list)
                # print(real_main_key_index)
                # print(real_key_list)
                # print(value_list)


        return dict_value
    def dut_get_show_arp_vrf_word(self,show_info):
        """
        Function:show arp vrf (word)回显解析函数
        CLI命令:show arp vrf (word)
        回显信息示例:
TOR1(config-if-OverlayRouter 20)#show arp vrf (vrf1)
Protocol  Address          Age(min)  Hardware        Type   Interface               
Internet  60.1.1.1         --        5869.6c21.53fe  arpa   VLAN 60                 
Internet  20.1.1.1         --        0000.0000.0001  arpa   OverlayRouter 20        
Internet  20.1.1.2         9         0012.9400.0001  arpa   OverlayRouter 20        
Total number of ARP entries: 3

        Returns:
{"60.1.1.1/Hardware": "5869.6c21.53fe"
"60.1.1.1/Age(min)": "--"
"20.1.1.2/Type": "arpa"
"60.1.1.1/Protocol": "Internet"
"20.1.1.1/Type": "arpa"
"20.1.1.2/Hardware": "0012.9400.0001"
"20.1.1.1/Protocol": "Internet"
"Address_list": ["60.1.1.1"
"20.1.1.1"
"20.1.1.2"], "20.1.1.1/Interface": "OverlayRouter 20"
"20.1.1.2/Protocol": "Internet"
"20.1.1.2/Age(min)": "9"
"20.1.1.2/Interface": "OverlayRouter 20"
"20.1.1.1/Hardware": "0000.0000.0001"
"60.1.1.1/Interface": "VLAN 60"
"Total number of ARP": "3"
"60.1.1.1/Type": "arpa"
"20.1.1.1/Age(min)": "--"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show arp vrf (word) | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_arp(show_info)
    def dut_get_show_lsm_capacity(self,show_info):
        """
        Function:show lsm capacity回显解析函数
        CLI命令:show lsm capacity
        回显信息示例:
Ruijie(config)#show lsm capacity 
supp_fiber        : 1
supp_fiber_anti   : 1
supp_stormctrl    : 0
supp_split        : 1
 supp_split_no_compa    : 1
 supp_split_show        : 1
supp_flowctrl     : 1
supp_ap_primary   : 1
supp_native_linux : 1
fwdmode_soft      : 1
supp_line_detect  : 1
supp_protect_port : 1
intf_num          : 10000
supp_ap_pxe       : 1
supp_ap_mini_mem  : 1
supp_set_mac_addr : 1
supp_sub_if       : 1
supp_encap        : 1
supp_nego         : 1
supp_eee          : 1
Ruijie(config)#

        Returns:
{'supp_encap': '1'
'supp_line_detect': '1'
'supp_protect_port': '1'
'supp_split_show': '1'
'supp_eee': '1'
'fwdmode_soft': '1'
'intf_num': '10000'
'supp_stormctrl': '0'
'supp_ap_mini_mem': '1'
'supp_flowctrl': '1'
'supp_sub_if': '1'
'supp_split_no_compa': '1'
'supp_fiber_anti': '1'
'supp_ap_pxe': '1'
'supp_ap_primary': '1'
'supp_split': '1'
'supp_native_linux': '1'
'supp_set_mac_addr': '1'
'supp_nego': '1'
'supp_fiber': '1'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show lsm capacity | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_acl_capacity(self,show_info):
        """
        Function:show acl capacity回显解析函数
        CLI命令:show acl capacity
        回显信息示例:
EG-1#show acl capability 
acld capability:
    named acl max num:                  40500
    ip extend acl:                      enable
    mac extend acl:                     enable
    expert acl:                         enable
    expert advanced acl(acl80):         enable
    ipv6 support:                       enable
    global acl:                         enable
    counter support:                    disable
    logging support:                    enable
    redirect support:                   enable
    secure channel support:             enable
    fwmode software:                    enable
EG-1#

        Returns:
{'named acl max num': '40500'
'expert advanced acl(acl80)': 'enable'
'expert acl': 'enable'
'ip extend acl': 'enable'
'ipv6 support': 'enable'
'fwmode software': 'enable'
'secure channel support': 'enable'
'acld capability': ''
'mac extend acl': 'enable'
'global acl': 'enable'
'logging support': 'enable'
'counter support': 'disable'
'redirect support': 'enable'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show acl capacity | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_bgp_nsr_status(self,show_info):
        """
        Function:show bgp nsr status回显解析函数
        CLI命令:show bgp nsr status
        回显信息示例:
DUT1#show bgp nsr status

HA Ready flag: 1
sever send msg count: 335, recv msg count: 9, to_send: 0, to_read: 12, read_in: 0, reply list count: 0
client send msg count: 0, recv msg count: 0, to_send: 0, to_read: 12, read_in: 0, reply list count: 0

VRF(Default):
  Peer:         10.1.1.2, master_sock:   37, sock_cb:   37, peer_status:     synchronized, sock_status:     synchronized.

  Peer:         20.1.1.2, master_sock:   36, sock_cb:   36, peer_status:     synchronized, sock_status:     synchronized.

  Peer:         30.1.1.2, master_sock:   34, sock_cb:   34, peer_status:     synchronized, sock_status:     synchronized.

  Peer:         40.1.1.2, master_sock:   35, sock_cb:   35, peer_status:     synchronized, sock_status:     synchronized.


  Total peer count: 4
  Total recv count: 19(BGP 15 + sock_cb 4)
  Total send count: 323(BGP 33 + sock_cb 290)

        Returns:
{"Peer/list": ["10.1.1.2"
"20.1.1.2"
"30.1.1.2"
"40.1.1.2"], "20.1.1.2/sock_cb": "36"
"Total send count/BGP": ""
"20.1.1.2/Peer": "20.1.1.2"
"20.1.1.2/master_sock": "36"
"server/send msg count": "335"
"30.1.1.2/peer_status": "synchronized"
"server/sever send msg count": "335"
"client/recv msg count": "0"
"30.1.1.2/Peer": "30.1.1.2"
"10.1.1.2/peer_status": "synchronized"
"Total recv count": "19"
"40.1.1.2/Peer": "40.1.1.2"
"server/recv msg count": "9"
"30.1.1.2/master_sock": "34"
"Total send count/sock_cb": "290"
"40.1.1.2/sock_cb": "35"
"client/send msg count": "0"
"client/read_in": "0"
"Total peer count": "4"
"40.1.1.2/sock_status": "synchronized"
"Total recv count/BGP": ""
"40.1.1.2/master_sock": "35"
"Total send count": "323"
"server/to_send": "0"
"client/reply list count": "0"
"10.1.1.2/sock_status": "synchronized"
"10.1.1.2/master_sock": "37"
"client/to_send": "0"
"client/to_read": "12"
"20.1.1.2/peer_status": "synchronized"
"30.1.1.2/sock_status": "synchronized"
"10.1.1.2/sock_cb": "37"
"40.1.1.2/peer_status": "synchronized"
"server/to_read": "12"
"Total recv count/sock_cb": "4"
"10.1.1.2/Peer": "10.1.1.2"
"30.1.1.2/sock_cb": "34"
"server/reply list count": "0"
"HA Ready flag": "1"
"server/read_in": "0"
"20.1.1.2/sock_status": "synchronized"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bgp nsr status | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        ip_list=[]
        show_info_list_line = show_info.split("\n")
        #除去无效数据
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        for value in show_info_list_line:
            if "HA Ready flag" in value:
                list1 = value.split(":")
                dict_value[list1[0].strip()]=list1[1].strip()
            elif "sever send msg count" in value or "client send msg count" in value:
                list2 = value.split(",")
                for list2_value in list2:
                    if "sever send msg count" in list2_value:
                        list3=list2_value.split(":")
                        list3_key="server"
                        dict_value[list3_key+"/send msg count"]=list3[1].strip()
                    if "client send msg count" in list2_value:
                        list3=list2_value.split(":")
                        list3_key="client"
                        dict_value[list3_key+"/send msg count"]=list3[1].strip()
                    else:
                        list4=list2_value.split(":")
                        dict_value[list3_key+"/"+list4[0].strip()]=list4[1].strip()
            elif "Peer:" in value:
                list2 = value.split(",")
                for list2_value in list2:
                    if "Peer" in list2_value:
                        list3=list2_value.split(":")
                        list3_key=list3[1].strip()
                        ip_list.append(list3_key)
                        dict_value[list3_key+"/"+list3[0].strip()]=list3[1].strip()
                    else:
                        list4=list2_value.split(":")
                        dict_value[list3_key+"/"+list4[0].strip()]=list4[1].strip().rstrip(".")
            elif "Total peer count" in value:
                dict_value["Peer/list"] = ip_list
                list5 = value.split(":")
                dict_value[list5[0].strip()]=list5[1].strip()
            elif "Total recv count" in value or "Total send count" in value:
                obj = re.match("(.*):(.*)\(BGP(.*)+sock_cb(.*)\)",value.strip())
                key_total=obj.group(1).strip()
                dict_value[key_total]=obj.group(2).strip()
                dict_value[key_total+"/BGP"]=obj.group(3).strip()
                dict_value[key_total+"/sock_cb"]=obj.group(4).strip()
        return dict_value
    def dut_get_show_version_devices(self,show_info):
        """
        Function:show version devices回显解析函数
        CLI命令:show version devices
        回显信息示例:
Ruijie#show version devices     
  Device  Slots  Description
  ------  -----  ------------
  1       5      RG-S8605E

        Returns:
{'1/5/Description': 'RG-S8605E'
'Device_list': ['1/5']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show version devices | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="Device"     #需要变参的地方
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if value_title in show_info_list_line[line_len_num]:              #***********
                table_1 = line_len_num
        (whippletree_list_1,cut_del_1) = self.dut_show_autoget_whippletree(table_1,line_len,show_info_list_line)
        show_info_list_line.remove(show_info_list_line[cut_del_1])
        new_show_info_num = len(show_info_list_line)
        for line_len_num in range(0,new_show_info_num):
            if value_title in show_info_list_line[line_len_num]:              #***********
                table_3 = line_len_num
        dict_value1 = self.dut_show_autoget_form(table_3,new_show_info_num,value_title,whippletree_list_1,show_info_list_line,"Slots")
        return dict_value1
    def dut_get_show_ip_ospf_nsr_database_count(self,show_info):
        """
        Function:show ip ospf nsr database count回显解析函数
        CLI命令:show ip ospf nsr database count
        回显信息示例:
Ruijie#show ip ospf nsr database count 

OSPF process 1:

Area 0.0.0.0 database summary:
Router Link States       : 2
Network Link States      : 1
Summary Link States      : 0
ASBR-Summary Link States : 0
NSSA-external Link States: 0
Link-Local Opaque-LSA    : 0
Area-Local Opaque-LSA    : 0
Total LSA                : 3

Process 1 database summary:
Router Link States       : 2
Network Link States      : 1
Summary Link States      : 0
ASBR-Summary Link States : 0
AS External Link States  : 0
NSSA-external Link States: 0
Link-Local Opaque-LSA    : 0
Area-Local Opaque-LSA    : 0
AS-Global Opaque-LSA     : 0
Total LSA                : 3
          
OSPF process 2:

Area 0.0.0.0 database summary:
Router Link States       : 2
Network Link States      : 1
Summary Link States      : 0
ASBR-Summary Link States : 0
NSSA-external Link States: 0
Link-Local Opaque-LSA    : 0
Area-Local Opaque-LSA    : 0
Total LSA                : 3

Process 2 database summary:
Router Link States       : 2
Network Link States      : 1
Summary Link States      : 0
ASBR-Summary Link States : 0
AS External Link States  : 0
NSSA-external Link States: 0
Link-Local Opaque-LSA    : 0
Area-Local Opaque-LSA    : 0
AS-Global Opaque-LSA     : 0
Total LSA                : 3

        Returns:
{'OSPF process 1/Area 0.0.0.0/Area-Local Opaque-LSA': '0'
'OSPF process 1/Process 1/Area-Local Opaque-LSA': '0'
'OSPF process 1/Process 1/Total LSA': '3'
'OSPF process 2/Process 2/Link-Local Opaque-LSA': '0'
'OSPF process 1/Process 1/ASBR-Summary Link States': '0'
'OSPF process 2/Area 0.0.0.0/Area-Local Opaque-LSA': '0'
'OSPF process 2/Area 0.0.0.0/ASBR-Summary Link States': '0'
'OSPF process 1/Area 0.0.0.0/Total LSA': '3'
'OSPF process 1/Process 1/Router Link States': '2'
'OSPF process 1/Process 1/AS-Global Opaque-LSA': '0'
'OSPF process 2/Area 0.0.0.0/Router Link States': '2'
'OSPF process 1/Area 0.0.0.0/Summary Link States': '0'
'OSPF process 1/Process 1/Link-Local Opaque-LSA': '0'
'OSPF process 2/Process 2/ASBR-Summary Link States': '0'
'OSPF process 2/Process 2/Router Link States': '2'
'OSPF process 1/Area 0.0.0.0/Network Link States': '1'
'OSPF process 2/Process 2/AS-Global Opaque-LSA': '0'
'OSPF process 2/Process 2/NSSA-external Link States': '0'
'OSPF process 2/Area 0.0.0.0/Link-Local Opaque-LSA': '0'
'OSPF process 2/Process 2/Summary Link States': '0'
'OSPF process 1/Process 1/Network Link States': '1'
'OSPF process 2/Area 0.0.0.0/Network Link States': '1'
'OSPF process 1/Area 0.0.0.0/Link-Local Opaque-LSA': '0'
'OSPF process 2/Area 0.0.0.0/Total LSA': '3'
'OSPF process 2/Area 0.0.0.0/Summary Link States': '0'
'OSPF process 1/Process 1/Summary Link States': '0'
'OSPF process 2/Process 2/Area-Local Opaque-LSA': '0'
'OSPF process 2/Process 2/Total LSA': '3'
'OSPF process 1/Area 0.0.0.0/NSSA-external Link States': '0'
'OSPF process 2/Process 2/Network Link States': '1'
'OSPF process 1/Area 0.0.0.0/ASBR-Summary Link States': '0'
'OSPF process 1/Area 0.0.0.0/Router Link States': '2'
'OSPF process 2/Process 2/AS External Link States': '0'
'OSPF process 2/Area 0.0.0.0/NSSA-external Link States': '0'
'OSPF process 1/Process 1/AS External Link States': '0'
'OSPF process 1/Process 1/NSSA-external Link States': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip ospf nsr database count | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            value = str(value)
            if "OSPF process" in value :
                key_1=value.split(":")[0].strip()
            elif "database summary" in value:
                key_2=value.split("database")[0].strip()
            elif ":" in value:
                list1 = value.split(":")
                key_3 = list1[0].strip()
                key_value = list1[1].strip()
                dict_value[key_1+"/"+key_2+"/"+key_3] = key_value
        return dict_value
    def dut_get_show_lsm_interface_dutport(self,show_info):
        """
        Function:show lsm interface <dutport>回显解析函数
        CLI命令:show lsm interface <dutport>
        回显信息示例:
EG-2(config)#show lsm interface gigabitEthernet 0/1
Interface GigabitEthernet 0/1 (1)
Common Info:
  Interface type      : GigabitEthernet (3)
  Device number       : 1
  Slot number         : 0
  Port number         : 1
  Subinterface number : 0
  Port level:
    1: /0, level_no: 10
    2: /1, level_no: 12
  Create time         : 1970-01-01 00:00:51
  Admin status        : UP (1)
  Link status         : UP   (1), last = UP   (1), initial = UP   (1)
  Link status changed : 1
  Lineproto status    : UP   (1), last = UP   (1)
  Lineproto down flags: 0x0
  Lineproto dithering : N
  Lineproto down count: 0
  Attribute           : 0x1
  Attribute V12       : 0x0
  Control flags       : 0x20608004
  Control flags V12   : 0x0
  Cap flags           : 0x100000
  Eth Cap flags       : 0x0
  If flag             : 0x0
  Interface top stack     : BRIDGE (5), initial = BRIDGE (5)
  Interface initial supported stacks:
    Stack RAW
    Stack PHY
    Stack MAC
    Stack BRIDGE
    Stack MAC-PATCH
    Stack BRIDGE-PATCH
  Interface supported stacks are as follows:
    Stack RAW, Version 1
    Stack PHY, Version 1
    Stack MAC, Version 1
    Stack BRIDGE, Version 1
    Stack MAC-PATCH, Version 1
    Stack BRIDGE-PATCH, Version 1
  MTU                 : current = 1500, default = 1500, conf = 0
  MTU range           : <64 - 9152>
  Encaption size      : 22
  Keepalive           : Y, period 10, retries 0
  Keepalive default   : Y, period 10, retries 0
  Mac address         : 00d0.f822.33e2, configured = 0000.0000.0000
  Initial MAC address : L2 = 00d0.f822.33e2, L3 = 00d0.f822.33e3
  No virtual MAC address
  Ether Capacities: 
    Speed AUTO, Duplex AUTO, Medium Copper
    Speed AUTO, Duplex Full, Medium Copper
    Speed AUTO, Duplex Half, Medium Copper
    Speed 1000M, Duplex AUTO, Medium Copper
    Speed 1000M, Duplex Full, Medium Copper
    Speed 100M, Duplex AUTO, Medium Copper
    Speed 100M, Duplex Full, Medium Copper
    Speed 100M, Duplex Half, Medium Copper
    Speed 10M, Duplex AUTO, Medium Copper
    Speed 10M, Duplex Full, Medium Copper
    Speed 10M, Duplex Half, Medium Copper
    Speed all, Duplex all, Medium Fiber
  Hardware name       : Broadcom
  Carrier delay       : 2000, initial = 2000
  Carrier delay up    : 2000, initial = 2000
  Carrier delay down  : 2000, initial = 2000
  Load interval       : 10
  Packet load         : RX = 0, TX = 0
  Bandwidth           : 1000000Kbit auto, initial = 1000000Kbit
  Encap protocol      : Ethernet-II (1), configured= Ethernet-II(1) initial=Ethernet-II(1)
  L3 Port VLAN id     : 0
  Encap supported bmp : 0x0
  Encap VLAN id       : 0
  Encap VLAN group id : 0
  Driver client index : 0
  Driver function client index :
  Ioctl client index  : 15 (Global)
Ethernet Info:
  Duplex      : Full (2), configured = AUTO (1)
  Speed       : 1000M (1000), configured = AUTO (0), def = 0, max = 1000M (1000)
    supp_speed 10, 100, 1000, 
  Medium      : Copper (3), configured = Copper (3), initial = Copper (3)
  Flow control: OFF (1), configured = OFF (1), initial = OFF (1)
  Ap info     : ape_num 0, ap_ifx/first_mem_ifx 0, flag 0x0
                indep_ape_num 0, ap_ifx/first_mem_ifx 0, flag 0x0
Network Info:
  Network type      : 2
  Arp timeout       : 0(s)
  VRF bound index   : 0
  VRF bound version : 0
  IP origin         : 0
  IP status         : DOWN (0)
  IPv4 MTU          : 1500
  Peer IP           : 0.0.0.0, configured = 0.0.0.0
  IPv6 enable       : 0
  IPv6 status       : DOWN (0)
  IPv6 MTU          : 1500
EG-2(config)#

        Returns:
{'IP status/data': '0'
'IP origin': '0'
'Ioctl client index': '15 (Global)'
'Medium/configured': 'Copper (3)'
'Encap protocol': 'Ethernet-II (1)'
'Lineproto down count': '0'
'Interface top stack/initial': 'BRIDGE (5)'
'2/level_no': '12'
'Initial MAC address/L3': '00d0.f822.33e3'
'Admin status': 'UP (1)'
'Link status/data': '1'
'Speed/def': '0'
'Packet load/TX': '0'
'Flow control/initial/data': '1'
'Common Info': ''
'Cap flags': '0x100000'
'VRF bound index': '0'
'Arp timeout/data': 's'
'Duplex/data': '2'
'Port level': ''
'Lineproto status/last/data': '1'
'Carrier delay': '2000'
'Interface type/data': '3'
'IPv4 MTU': '1500'
'Interface top stack/initial/data': '5'
'Speed/configured/data': '0'
'Control flags': '0x20608004'
'Lineproto status/data': '1'
'Ap info': 'ape_num 0'
'Flow control/initial': 'OFF (1)'
'VRF bound version': '0'
'Duplex': 'Full (2)'
'Carrier delay/initial': '2000'
'Link status/last/data': '1'
'Link status/initial': 'UP   (1)'
'Ap info/ape_num': '0'
'Link status': 'UP   (1)'
'IP status': 'DOWN (0)'
'Keepalive default/period': '10'
'Medium/initial': 'Copper (3)'
'Medium': 'Copper (3)'
'Driver client index': '0'
'Flow control/configured/data': '1'
'Peer IP/configured': '0.0.0.0'
'Link status changed': '1'
'Lineproto down flags': '0x0'
'L3 Port VLAN id': '0'
'Bandwidth/initial': '1000000Kbit'
'Duplex/configured': 'AUTO (1)'
'Encap protocol/configured': 'Ethernet-II(1) initial'
'Ap info/flag': '0'
'Link status/initial/data': '1'
'Medium/data': '3'
'Encap protocol/data': '1'
'supp_speed': ['10'
' 100'
' 1000'], 'Keepalive/period': '10'
'Lineproto dithering': 'N'
'Create time': '1970-01-01 00:00:51'
'Attribute V12': '0x0'
'IPv6 enable': '0'
'Load interval': '10'
'IPv6 status/data': '0'
'Interface type': 'GigabitEthernet (3)'
'Speed/max': '1000M (1000)'
'Flow control': 'OFF (1)'
'Control flags V12': '0x0'
'Speed/data': '1000'
'Packet load': 'RX = 0'
'Duplex/configured/data': '1'
'Encaption size': '22'
'Medium/initial/data': '3'
'Initial MAC address': 'L2 = 00d0.f822.33e2'
'Interface supported stacks are as follows': ['Stack RAW, Version 1'
'Stack PHY, Version 1'
'Stack MAC, Version 1'
'Stack BRIDGE, Version 1'
'Stack MAC-PATCH, Version 1'
'Stack BRIDGE-PATCH, Version 1'], 'IPv6 MTU': '1500'
'2': '/1'
'Ioctl client index/data': 'Global'
'1/level_no': '10'
'Ether Capacities': ''
'Encap protocol/configured/data': '1'
'Speed/max/data': '1000'
'Ap info/indep_ape_num': '0'
'Mac address': '00d0.f822.33e2'
'Peer IP': '0.0.0.0'
'Admin status/data': '1'
'MTU/conf': '0'
'Ap info/ap_ifx/first_mem_ifx': '0'
'Flow control/data': '1'
'Keepalive/retries': '0'
'Keepalive default': 'Y'
'Slot number': '0'
'Link status/last': 'UP   (1)'
'Carrier delay down': '2000'
'Keepalive default/retries': '0'
'Attribute': '0x1'
'Device number': '1'
'Carrier delay up/initial': '2000'
'Speed/configured': 'AUTO (0)'
'Eth Cap flags': '0x0'
'IPv6 status': 'DOWN (0)'
'Driver function client index': ''
'Medium/configured/data': '3'
'Lineproto status/last': 'UP   (1)'
'Interface initial supported stacks': ['Stack RAW'
'Stack PHY'
'Stack MAC'
'Stack BRIDGE'
'Stack MAC-PATCH'
'Stack BRIDGE-PATCH'], 'MTU range': '<64 - 9152>'
'Flow control/configured': 'OFF (1)'
'Lineproto status': 'UP   (1)'
'Encap VLAN id': '0'
'MTU/default': '1500'
'1': '/0'
'Ethernet Info': ''
'Encap supported bmp': '0x0'
'Port number': '1'
'Hardware name': 'Broadcom'
'Encap VLAN group id': '0'
'MTU': 'current = 1500'
'Carrier delay down/initial': '2000'
'Network Info': ''
'Carrier delay up': '2000'
'Interface top stack': 'BRIDGE (5)'
'Interface top stack/data': '5'
'Arp timeout': '0(s)'
'If flag': '0x0'
'Subinterface number': '0'
'Mac address/configured': '0000.0000.0000'
'Bandwidth': '1000000Kbit auto'
'Network type': '2'
'Speed': '1000M (1000)'
'Keepalive': 'Y'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show lsm interface <dutport> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value ={}
        show_info_list = self.dut_get_start_show_info(show_info)
        stacks_list=[]
        stacks_key =[]
        for value in show_info_list:
            value = value.strip()
            if "supp_speed" in value or ", Duplex" in value:
                if "supp_speed" in value and ", supp_speed" not in value:
                    obj_1 = re.match("supp_speed(.*)",value.strip())
                    supp_speed = obj_1.group(1).strip().strip(",")
                    supp_speed_list = supp_speed.split(",")
                    dict_value["supp_speed"] =supp_speed_list
            elif "Interface initial supported stacks" in value:
                stacks_key ="Interface initial supported stacks"
                continue
            elif "Interface supported stacks are as follows" in value:
                dict_value[stacks_key] = stacks_list
                stacks_list=[]
                stacks_key ="Interface supported stacks are as follows"
                continue
            elif re.match('Stack (.*)',value):
                stacks_list.append(value)
            elif "," in value :
                list1 = value.split(",")
                for list1_value in list1:
                    list1_value =list1_value.strip()
                    if "level_no" in list1_value:
                        list2 = list1_value.split(":")
                        key_all=key_1+"/"+"level_no"
                        dict_value[key_all] = list2[1].strip()
                    elif "=" in list1_value:
                        if ":" in list1_value:
                            list2 = list1_value.split(":")
                            key_1 = list2[0].strip()
                            key_all = list2[0].strip()
                            dict_value[key_all] = list2[1].strip()
                            if "(" in list2[1].strip():
                                if re.match('(.*)\((.*)\)',list2[1].strip()):
                                    obj = re.match('(.*)\((.*)\)',list2[1].strip())
                                    dict_value[key_all+"/"+"data"] = obj.group(2).strip()
                        else:
                            list2 = list1_value.split("=")
                            key_3 = list2[0].strip()
                            key_all = key_1+"/"+key_3
                            dict_value[key_all] = list2[1].strip()
                            if "(" in list2[1].strip():
                                if re.match('(.*)\((.*)\)',list2[1].strip()):
                                    obj = re.match('(.*)\((.*)\)',list2[1].strip())
                                    dict_value[key_all+"/"+"data"] = obj.group(2).strip()
                    elif  re.match('(\w+) (\d+)',list1_value) and ":" not in list1_value:
                        obj = re.match('(\w+) (\d+)',list1_value)
                        dict_value[key_all+"/"+obj.group(1).strip()] = obj.group(2).strip()
                    elif  re.match('(\w+/\w+) (\d+)',list1_value) and ":" not in list1_value:
                        obj = re.match('(\w+/\w+) (\d+)',list1_value)
                        dict_value[key_all+"/"+obj.group(1).strip()] = obj.group(2).strip()
                    elif ":" in list1_value:
                        list2 = list1_value.split(":")
                        key_1 = list2[0].strip()
                        key_all = list2[0].strip()
                        dict_value[key_all] = list2[1].strip()
                        if "(" in list2[1].strip():
                            if re.match('(.*)\((.*)\)',list2[1].strip()):
                                obj = re.match('(.*)\((.*)\)',list2[1].strip())
                                dict_value[key_all+"/"+"data"] = obj.group(2).strip()
                        elif re.match('(\w+) (\d+)',list2[1].strip()):
                            obj = re.match('(\w+) (\d+)',list2[1].strip())
                            dict_value[key_all+"/"+obj.group(1).strip()] = obj.group(2).strip()
            elif ":" in value:
                list2 = value.split(":",1)
                key_1 = list2[0].strip()
                key_all = list2[0].strip()
                dict_value[key_all] = list2[1].strip()
                if "(" in list2[1].strip():
                    if re.match('(.*)\((.*)\)',list2[1].strip()):
                        obj = re.match('(.*)\((.*)\)',list2[1].strip())
                        dict_value[key_all+"/"+"data"] = obj.group(2).strip()
        dict_value[stacks_key] = stacks_list
        return dict_value
    def dut_get_show_ip_interface(self,show_info):
        """
        Function:show ip interface回显解析函数
        CLI命令:show ip interface
        回显信息示例:
eg-3#show ip interface 
Mgmt 0
  IP interface state is: UP
  IP interface type is: BROADCAST
  IP interface MTU is: 1500
  IP address is: 
    172.29.117.119/24 (primary)
  IP address negotiate is: OFF
  Forward direct-broadcast is: OFF
  ICMP mask reply is: ON
  Send ICMP redirect is: ON
  Send ICMP unreachable is: ON
  DHCP relay is: OFF
  Fast switch is: ON
  Help address is: 
  Proxy ARP is: ON
ARP packet input number: 73889
  Request packet     : 73873
  Reply packet       : 16
  Unknown packet     : 0
TTL invalid packet number: 0
ICMP packet input number: 0
 Echo request       : 0
 Echo reply         : 0
 Unreachable        : 0
 Source quench      : 0
 Routing redirect   : 0

        Returns:
{"Mgmt 0/Fast switch is": "ON"
"Mgmt 0/IP address negotiate is": "OFF"
"Mgmt 0/IP interface state is": "UP"
"Mgmt 0/Request packet": "73873"
"Mgmt 0/Send ICMP redirect is": "ON"
"Mgmt 0/ICMP packet input number": "0"
"Mgmt 0/TTL invalid packet number": "0"
"Mgmt 0/Source quench": "0"
"Mgmt 0/Echo reply": "0"
"Mgmt 0_ip": "172.29.117.119"
"Mgmt 0/Routing redirect": "0"
"Mgmt 0/Proxy ARP is": "ON"
"Mgmt 0/DHCP relay is": "OFF"
"Mgmt 0/IP address is": "172.29.117.119/24 (primary)"
"Mgmt 0/ICMP mask reply is": "ON"
"Mgmt 0/Send ICMP unreachable is": "ON"
"Mgmt 0/Forward direct-broadcast is": "OFF"
"Mgmt 0/IP interface type is": "BROADCAST"
"Mgmt 0/ARP packet input number": "73889"
"Mgmt 0/Help address is": ""
"Mgmt 0/IP interface MTU is": "1500"
"Mgmt 0/Reply packet": "16"
"Mgmt 0/Unreachable": "0"
"Mgmt 0/Echo request": "0"
"Mgmt 0/Unknown packet": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip interface | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value ={}
        show_info_list = self.dut_get_start_show_info(show_info)
        flag = 0
        for value in show_info_list:
            value =value.strip()
            if "GigabitEthernet" in value or "Mgmt" in value:
                key_1=value
            if ":" in value :
                list1 = value.split(":")
                if "IP address is" in list1[0].strip():
                    ip_key = "IP address is"
                    flag = 1
                    continue
                else:
                    dict_value[key_1+"/"+list1[0].strip()] = list1[1].strip()
            if flag == 1 :
                dict_value[key_1+"/"+ip_key] = value
                if "/" in value:
                    list2 = value.split("/")
                    dict_value[key_1+"_ip"] = list2[0].strip()
                flag = 0
        return dict_value
    def dut_get_show_efmp_fpa(self,show_info):
        """
        Function:show efmp fpa回显解析函数
        CLI命令:show efmp fpa
        回显信息示例:
Ruijie#show efmp fpa
DUMP FPA Registers:
  MARKs(RD/WR): 256/768 16/56 16/56 16/56 16/56 16/56 16/56 16/56 
  SIZEs: 1500 64 64 64 64 64 64 64 
  AVAILABLE: 13653 338 888 0 125 0 0 0 
  PAGE_INDEX: 418 10 27 0 3 0 0 0 
  EXP_QUE: 0, EXP_INDEX: 0.
  ACT_QUE: 0, ACT_INDEX: 0.
  INT_SUM: 0x0000000000000000, INT_ENB: 0x0000000000000000.
  BIST_STATUS: 0x0000000000000000.
FPA Registers DUMP END.

POOL 0 INFO: 
  BufLen=1792, Amount=15470, AvBufNum=179.
POOL 1 INFO: 
  BufLen=9984, Amount=597, AvBufNum=194.
POOL 4 INFO: 
  BufLen=66176, Amount=155, AvBufNum=30.

USER POOL INFO: 
 poolid=0, buflen=1792, Amount=483, AvBufNum=483.
 poolid=1, buflen=9984, Amount=18, AvBufNum=1.
 poolid=4, buflen=66176, Amount=4, AvBufNum=0.
Ruijie#

        Returns:
{'POOL 0 INFO/AvBufNum': '179'
'PAGE_INDEX': ['418'
'10'
'27'
'0'
'3'
'0'
'0'
'0'], 'POOL 1 INFO/BufLen': '9984'
'USER POOL INFO/4/AvBufNum': '0'
'DUMP FPA Registers': ''
'ACT_INDEX': '0'
'AVAILABLE': ['13653'
'338'
'888'
'0'
'125'
'0'
'0'
'0'], 'MARKs(RD/WR)': ['256/768'
'16/56'
'16/56'
'16/56'
'16/56'
'16/56'
'16/56'
'16/56'], 'USER POOL INFO/0/Amount': '483'
'SIZEs': ['1500'
'64'
'64'
'64'
'64'
'64'
'64'
'64'], 'USER POOL INFO/1/Amount': '18'
'USER POOL INFO/4/Amount': '4'
'POOL 0 INFO/BufLen': '1792'
'INT_ENB': '0x0000000000000000'
'POOL 4 INFO/AvBufNum': '30'
'INT_SUM': '0x0000000000000000'
'POOL 4 INFO/BufLen': '66176'
'USER POOL INFO/1/buflen': '9984'
'EXP_QUE': '0'
'POOL 0 INFO/Amount': '15470'
'BIST_STATUS': '0x0000000000000000.'
'POOL 1 INFO/AvBufNum': '194'
'USER POOL INFO/0/buflen': '1792'
'USER POOL INFO/0/AvBufNum': '483'
'EXP_INDEX': '0'
'POOL 1 INFO/Amount': '597'
'POOL 4 INFO/Amount': '155'
'USER POOL INFO/1/AvBufNum': '1'
'ACT_QUE': '0'
'USER POOL INFO/4/buflen': '66176'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show efmp fpa | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        flag = 0
        flag2 = 0
        for value in show_info_split:
            if "FPA Registers DUMP END" in value:
                flag = 1
            if flag == 0 :
                if "," in value:
                    list1 = value.split(",")
                    for list1_value in list1:
                        if ":" in list1_value:
                            list2 = list1_value.split(":")
                            dict_value[list2[0].strip()]=list2[1].strip().strip(".")
                elif ":" in value:
                    list3 = value.split(":")
                    if len(list3[1].strip().strip(".").split())>1 :
                        list4 = list3[1].split()
                        dict_value[list3[0].strip()] = list4
                    else:
                        dict_value[list3[0].strip()] = list3[1].strip()
            if flag == 1 :
                if ":" in value:
                    list5 = value.split(":")
                    key_1 = list5[0].strip()
                if "USER POOL INFO" in value:
                    flag2 =1
                if flag2 == 0 :
                    if "," in value :
                        list6 = value.split(",")
                        for list6_value in list6:
                            list7 = list6_value.split("=")
                            key_2 = list7[0].strip()
                            key_2_value = list7[1].strip().strip(".")
                            dict_value[key_1+"/"+key_2] = key_2_value
                else:
                    if "," in value :
                        list6 = value.split(",")
                        count = 0
                        for list6_value in list6:
                            list7 = list6_value.split("=")
                            if count == 0 :
                                key_2 = list7[1].strip().strip(".")
                            else:
                                key_3 = list7[0].strip().strip(".")
                                key_2_value = list7[1].strip().strip(".")
                                dict_value[key_1+"/"+key_2+"/"+key_3] = key_2_value
                            count = count+1
        return dict_value
    def dut_get_show_ipv6_route_vrf_word(self,show_info):
        """
        Function:show ipv6 route vrf (word)回显解析函数
        CLI命令:show ipv6 route vrf (word)
        回显信息示例:
Ruijie(config)#show ipv6 route vrf (word)

IPv6 routing table name - 1 - 6 entries
Codes:  C - Connected, L - Local, S - Static
        R - RIP, O - OSPF, B - BGP, I - IS-IS, V - Overflow route
        N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
        E1 - OSPF external type 1, E2 - OSPF external type 2
        SU - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2
        IA - Inter area, N - Nd to host

S      ::/0 [1/0] via GigabitEthernet 2/0/1, directly connected
C      1100::/64 via GigabitEthernet 2/0/1, directly connected
L      1100::1/128 via GigabitEthernet 2/0/1, local host
C      FE80::/10 via ::1, Null0
C      FE80::/64 via GigabitEthernet 2/0/1, directly connected
L      FE80::2D0:F8FF:FE22:33E3/128 via GigabitEthernet 2/0/1, local host

        Returns:
{"FE80::/10/code": "C"
"1100::1/128/via": "GigabitEthernet 2/0/1"
"FE80::/64/code": "C"
"FE80::2D0:F8FF:FE22:33E3/128/via": "GigabitEthernet 2/0/1"
"1100::/64/via": "GigabitEthernet 2/0/1"
"1100::1/128/status": "local host"
"::/0 [1/0]/status": "directly connected"
"FE80::/64/status": "directly connected"
"1100::/64/code": "C"
"FE80::/10/status": "Null0"
"FE80::/64/via": "GigabitEthernet 2/0/1"
"::/0 [1/0]/via": "GigabitEthernet 2/0/1"
"FE80::/10/via": "::1"
"::/0 [1/0]/code": "S"
"1100::/64/status": "directly connected"
"1100::1/128/code": "L"
"FE80::2D0:F8FF:FE22:33E3/128/code": "L"
"FE80::2D0:F8FF:FE22:33E3/128/status": "local host"
"ip_list": ["::/0 [1/0]"
"1100::/64"
"1100::1/128"
"FE80::/10"
"FE80::/64"
"FE80::2D0:F8FF:FE22:33E3/128"]}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 route vrf (word) | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """
        dict_value = {}
        show_info_list_line = self.dut_get_start_show_info(show_info)
        ip_list = []
        via_flag = 0
        bsid_list = []
        ip_tmp = ""
        for value in show_info_list_line:
            if re.match("(.*), \d\d:\d\d:\d\d\Z",value):
                obj = re.match("(.*), \d\d:\d\d:\d\d\Z", value)
                value = obj.group(1)
            if re.match("(.*)\s{1,}([\d|FE80|::].*)via (\S+), ssid (\S+), bsid (\S+)", value.strip()):
                obj_0 = re.match("(.*)\s{1,}([\d|FE80|::].*)via (\S+), ssid (\S+), bsid (\S+)", value.strip())
                code = obj_0.group(1).strip()
                ip = obj_0.group(2).strip()
                via = obj_0.group(3).strip()
                ssid = obj_0.group(4).strip()
                bsid = obj_0.group(5).strip()
                dict_value[ip + "/code"] = code
                dict_value[ip + "/via"] = via
                dict_value[ip + "/ssid"] = ssid
                dict_value[ip + "/bsid"] = bsid
            elif re.match("(\[.*\]) via (\S+), ssid (\S+), bsid (\S+)",value.strip()):
                obj_0_0 = re.match("(\[.*\]) via (\S+), ssid (\S+), bsid (\S+)",value.strip())
                via = obj_0_0.group(2).strip()
                ssid = obj_0_0.group(3).strip()
                bsid = obj_0_0.group(4).strip()

                dict_value[ip + "/"+obj_0_0.group(1).strip()+"/via"] = via
                dict_value[ip + "/" + obj_0_0.group(1).strip() + "/ssid"] = ssid
                dict_value[ip + "/" + obj_0_0.group(1).strip() + "/bsid"] = bsid
            elif re.match("(.*)\s{1,}([\d|FE80|::].*)via (\S+), ssid (\S+),", value.strip()):
                obj_0 = re.match("(.*)\s{1,}([\d|FE80|::].*)via (\S+), ssid (\S+),", value.strip())
                code = obj_0.group(1).strip()
                ip = obj_0.group(2).strip()
                via = obj_0.group(3).strip()
                ssid = obj_0.group(4).strip()
                if len(bsid_list) > 0 :
                    dict_value[ip_tmp + "/bsid_list"] = bsid_list
                ip_tmp = ip
                dict_value[ip + "/code"] = code
                dict_value[ip + "/via"] = via
                dict_value[ip + "/ssid"] = ssid
            elif re.match("(\[.*\]) via (\S+), ssid (\S+),",value.strip()):
                obj_0_0 = re.match("(\[.*\]) via (\S+), ssid (\S+),",value.strip())
                via = obj_0_0.group(2).strip()
                ssid = obj_0_0.group(3).strip()
                if len(bsid_list) > 0 :
                    dict_value[ip_tmp + "/bsid_list"] = bsid_list
                ip_tmp = ip_tmp + "/"+obj_0_0.group(1).strip()

                dict_value[ip + "/" + obj_0_0.group(1).strip() + "/via"] = via
                dict_value[ip + "/" + obj_0_0.group(1).strip() + "/ssid"] = ssid

            elif re.match("bsid (.*)",value.strip()):
                obj = re.match("bsid (.*)",value.strip())
                bsid_list = []
                bisd_value = obj.group(1).strip()
                bsid_list_tmp = bisd_value.split(",")
                for bsid_list_tmp_value in bsid_list_tmp:
                    if bsid_list_tmp_value.strip() == "" :
                        continue
                    bsid_list.append(bsid_list_tmp_value.strip())
                continue
            elif re.match("\S+\,.*",value.strip()) or re.match("\S+\Z",value.strip()):
                if len(bsid_list) >= 3 :
                    bsid_list_tmp = value.strip().split(",")
                    for bsid_list_tmp_value in bsid_list_tmp:
                        if bsid_list_tmp_value.strip() == "":
                            continue
                        bsid_list.append(bsid_list_tmp_value.strip())
                    continue
            if re.match("(.*)\s{1,}([\d|FE80|::].*)via(.*),(.*)", value.strip()):
                obj_1 = re.match("(.*)\s{1,}([\d|FE80|::].*)via(.*),(.*)", value.strip())
                code = obj_1.group(1).strip()
                ip = obj_1.group(2).strip()
                via = obj_1.group(3).strip()
                status = obj_1.group(4).strip()
                dict_value[ip + "/code"] = code
                dict_value[ip + "/via"] = via
                dict_value[ip + "/status"] = status
                ip_list.append(ip)
                if via_flag == 1:
                    via_flag = 0
            elif re.match("SR\s+(\S+) \S+ opcode end\.x, via (\S+), (.*)", value.strip()):
                obj_1 = re.match("SR\s+(\S+) \S+ opcode end\.x, via (\S+), (.*)", value.strip())
                ip = obj_1.group(1).strip()
                via_value = obj_1.group(2).strip()
                port_value = obj_1.group(3).strip()
                dict_value[ip + "/via"] = via_value
                dict_value[ip + "/status"] = "SR"
                dict_value[ip + "/port"] = port_value
                ip_list.append(ip)
            elif re.match("SR\s+(\S+) \S+ opcode end\.x with \S+, via (\S+), (.*)", value.strip()):
                obj_1 = re.match("SR\s+(\S+) \S+ opcode end\.x with \S+, via (\S+), (.*)", value.strip())
                ip = obj_1.group(1).strip()
                via_value = obj_1.group(2).strip()
                port_value = obj_1.group(3).strip()
                dict_value[ip + "/via"] = via_value
                dict_value[ip + "/status"] = "SR"
                dict_value[ip + "/port"] = port_value
                ip_list.append(ip)
            elif re.match("SR\s+(\S+) \S+ opcode end with (\S+)", value.strip()):
                obj_1 = re.match("SR\s+(\S+) \S+ opcode end with (\S+)", value.strip())
                ip = obj_1.group(1).strip()
                psp_value = obj_1.group(2).strip()
                dict_value[ip + "/opcode end with"] = psp_value
                dict_value[ip + "/status"] = "SR"
                ip_list.append(ip)
            elif re.match("SR\s+(\S+) \S+ opcode end", value.strip()):
                obj_1 = re.match("SR\s+(\S+) \S+ opcode end", value.strip())
                ip = obj_1.group(1).strip()
                dict_value[ip + "/status"] = "SR"
                ip_list.append(ip)

            elif "," not in value:
                if re.match("(.*)\s{1,}([\d|FE80|::].*)via(.*)", value.strip()):
                    obj_2 = re.match("(.*)\s{1,}([\d|FE80|::].*)via(.*)", value.strip())
                    code = obj_2.group(1).strip()
                    ip = obj_2.group(2).strip()
                    key_via = obj_2.group(3).strip()
                    dict_value[ip + "/code"] = code
                    via_list = []
                    via_list.append(key_via)
                    ip_list.append(ip)
                    via_flag = 1
            elif via_flag == 1 and re.match("\(recursive via (.*),(.*)\)", value.strip()):
                obj_3 = re.match("\(recursive via (.*),(.*)\)", value.strip())
                via = obj_3.group(1).strip()
                status = obj_3.group(2).strip()
                dict_value[ip + "/" + via + "/status"] = status


        if len(bsid_list) > 0:
            dict_value[ip_tmp + "/bsid_list"] = bsid_list
        dict_value["ip_list"] = ip_list
        return dict_value
    def dut_get_show_interfaces_linkstatechange_statistics(self,show_info):
        """
        Function:show interfaces link-state-change statistics回显解析函数
        CLI命令:show interfaces link-state-change statistics
        回显信息示例:
EG-2#show interfaces link-state-change statistics 
Interface    Link state  Link state change times   Last change time   
------------ ----------- ------------------------- -------------------
Gi0/1        up          3                         1970-01-01 02:43:26
Gi0/2        down        0                         1970-01-01 00:00:35
Gi0/3        down        0                         1970-01-01 00:00:35
Gi0/4        down        0                         1970-01-01 00:00:35
Gi0/5        down        0                         1970-01-01 00:00:35
Gi0/6        down        0                         1970-01-01 00:00:35
Gi0/7        down        0                         1970-01-01 00:00:35

        Returns:
{'Gi0/6/Link state change times': '0'
'Gi0/3/Link state change times': '0'
'Gi0/3/Last change time': '1970-01-01 00:00:35'
'Gi0/2/Link state change times': '0'
'Gi0/6/Link state': 'down'
'Gi0/2/Link state': 'down'
'Interface_list': ['Gi0/1'
'Gi0/2'
'Gi0/3'
'Gi0/4'
'Gi0/5'
'Gi0/6'
'Gi0/7'], 'Gi0/1/Link state change times': '3'
'Gi0/4/Link state change times': '0'
'Gi0/5/Link state': 'down'
'Gi0/6/Last change time': '1970-01-01 00:00:35'
'Gi0/2/Last change time': '1970-01-01 00:00:35'
'Gi0/3/Link state': 'down'
'Gi0/7/Link state change times': '0'
'Gi0/5/Last change time': '1970-01-01 00:00:35'
'Gi0/5/Link state change times': '0'
'Gi0/1/Last change time': '1970-01-01 02:43:26'
'Gi0/7/Last change time': '1970-01-01 00:00:35'
'Gi0/7/Link state': 'down'
'Gi0/4/Link state': 'down'
'Gi0/1/Link state': 'up'
'Gi0/4/Last change time': '1970-01-01 00:00:35'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interfaces link-state-change statistics | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Interface")
    def dut_get_show_interfaces_dutport_linkstatechange_statistics(self,show_info):
        """
        Function:show interfaces <dutport> link-state-change statistics回显解析函数
        CLI命令:show interfaces <dutport> link-state-change statistics
        回显信息示例:
RGOS_12_1#show interfaces gigabitethernet 0/0 link-state-change statistics
    Interface    Link state  Link state change times   Last change time     Link-dither begin    Link-dither end  
    ------------ ----------- ------------------------- -------------------  -------------------  ----------------
    Gi0/0        down        12                        2015-03-03 14:34:38 none                none               
    RGOS_12_1#

        Returns:
{"Gi0/0/Link-dither end": "ne"
"Gi0/0/Link state change times": "12"
"Gi0/0/Link state": "down"
"Gi0/0/Link-dither begin": "one                no"
"Gi0/0/Last change time": "2015-03-03 14:34:38 n"
"Interface_list": ["Gi0/0"]}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interfaces <dutport> link-state-change statistics | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Interface")
    def dut_get_show_ip_source_binding_stickymac(self,show_info):
        """
        Function:show ip source binding sticky-mac回显解析函数
        CLI命令:show ip source binding sticky-mac
        回显信息示例:
Ruijie#show ip source binding sticky-mac 

Total number of bindings: 2 

NO.   MACADDRESS         TYPE          VLAN  INTERFACE
----- ------------------ ------------- ----- --------------------
1     1414.4b60.fa23     Static        10    GigabitEthernet 0/1 
2     1414.4b60.fa23     DHCP-Snooping 10    GigabitEthernet 0/1 
Ruijie#

        Returns:
{'1414.4b60.fa23/Static/VLAN': '10'
'1414.4b60.fa23/DHCP-Snooping/NO.': '2'
'MACADDRESS_list': ['1414.4b60.fa23/Static'
'1414.4b60.fa23/DHCP-Snooping'], '1414.4b60.fa23/DHCP-Snooping/INTERFACE': 'GigabitEthernet 0/1'
'1414.4b60.fa23/Static/NO.': '1'
'1414.4b60.fa23/Static/INTERFACE': 'GigabitEthernet 0/1'
'1414.4b60.fa23/DHCP-Snooping/VLAN': '10'
'Total number of bindings': '2'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip source binding sticky-mac | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"MACADDRESS","TYPE",ago_colon_last_str="Total number of bindings")
    def dut_get_show_ip_verify_sour(self,show_info):
        """
        Function:show ip verify source回显解析函数
        CLI命令:show ip verify source
        回显信息示例:
Ruijie#show ip verify source 
NO.   INTERFACE                 FilterType FilterStatus           IPADDRESS       MACADDRESS     VLAN TYPE         
----- ------------------------- ---------- ---------------------  --------------- -------------- ---- -------------
1     GigabitEthernet 0/1       UNSET      Inactive-restrict-off  10.1.1.1        1414.4b60.fa23 10   Static       
2     GigabitEthernet 0/1       UNSET      Inactive-restrict-off  10.1.1.1        1414.4b60.fa23 10   DHCP-Snooping

Total number of bindings: 2

        Returns:
{"10.1.1.1/NO.": "2"
"10.1.1.1/FilterStatus": "Inactive-restrict-off"
"10.1.1.1/TYPE": "DHCP-Snooping"
"10.1.1.1/VLAN": "10"
"10.1.1.1/MACADDRESS": "1414.4b60.fa23"
"Total number of bindings": "2"
"10.1.1.1/INTERFACE": "GigabitEthernet 0/1"
"IPADDRESS": ["10.1.1.1"
"10.1.1.1"], "10.1.1.1/FilterType": "UNSET"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip verify source | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"MACADDRESS","TYPE",last_colon_ago_str="Total number of bindings")
    def dut_get_show_ip_verify_source(self,show_info):
        """
        Function:show ip verify source回显解析函数
        CLI命令:show ip verify source
        回显信息示例:
Ruijie#show ip verify source
NO.   INTERFACE                 FilterType FilterStatus           IPADDRESS       MACADDRESS     VLAN TYPE         
----- ------------------------- ---------- ---------------------  --------------- -------------- ---- -------------
1     GigabitEthernet 1/0/1     IP-ONLY    Active                 1.1.1.1         0000.0000.0001 10   Static       
2     GigabitEthernet 1/0/1     IP-ONLY    Active                 131.131.2.2     0000.0000.0012 10   DHCP-Snooping
3     GigabitEthernet 1/0/1     IP-ONLY    Active                 Deny-All       

Total number of bindings: 3

        Returns:
{'1.1.1.1/FilterStatus': 'Active'
'Deny-All/FilterType': 'IP-ONLY'
'131.131.2.2/TYPE': 'DHCP-Snooping'
'131.131.2.2/FilterStatus': 'Active'
'131.131.2.2/FilterType': 'IP-ONLY'
'1.1.1.1/TYPE': 'Static'
'Total number of bindings': '3'
'131.131.2.2/NO.': '2'
'1.1.1.1/NO.': '1'
'Deny-All/TYPE': ''
'Deny-All/NO.': '3'
'1.1.1.1/FilterType': 'IP-ONLY'
'Deny-All/FilterStatus': 'Active'
'1.1.1.1/MACADDRESS': '0000.0000.0001'
'131.131.2.2/MACADDRESS': '0000.0000.0012'
'Deny-All/VLAN': ''
'Deny-All/MACADDRESS': ''
'131.131.2.2/VLAN': '10'
'1.1.1.1/VLAN': '10'
'131.131.2.2/INTERFACE': 'GigabitEthernet 1/0/1'
'IPADDRESS': ['1.1.1.1'
'131.131.2.2'
'Deny-All'], 'Deny-All/INTERFACE': 'GigabitEthernet 1/0/1'
'1.1.1.1/INTERFACE': 'GigabitEthernet 1/0/1'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip verify source | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info = show_info
        main_key = ['IPADDRESS']
        real_main_key = ['IPADDRESS']
        result=self.dut_split_whippletree(show_info,main_key,real_main_key,1)
        dict_value=result[0]
        start_info=result[1]
        end_info=result[2]
        # for i in info:
        #     print(i)
        ########若有多余info，进行解析
        ##判定若有多余info 进行解析
        if len(start_info)!=0:
            for list_value in start_info:
                if re.match(".*:.*",list_value) :
                    list_value_split = list_value.split (":",1)   #以冒号分割一次
                    key_name = '%s'%(list_value_split[0].lstrip().rstrip().replace("\r",""))
                    dict_value[key_name] = list_value_split[1].lstrip().rstrip().replace("\r","")
        if len(end_info)!=0:
            for list_value in end_info:
                if re.match(".*:.*",list_value) :
                    list_value_split = list_value.split (":",1)   #以冒号分割一次
                    key_name = '%s'%(list_value_split[0].lstrip().rstrip().replace("\r",""))
                    dict_value[key_name] = list_value_split[1].lstrip().rstrip().replace("\r","")
        ########
        return dict_value
    def dut_get_show_link_state_group(self,show_info):
        """
        Function:show link state group回显解析函数
        CLI命令:show link state group
        回显信息示例:
6120_2011(config)#show link state group

Link State Group:1  Status: Enabled, Up
Up-delay (default 0s): 0(s)
Upstream Interfaces :Te0/1(Up)
Downstream Interfaces :Te0/2(Up)

Link State Group:2  Status: Disabled, Down
Up-delay (default 0s): 0(s)
Upstream Interfaces :
Downstream Interfaces :

(Up):Interface up   (Down):Interface Down   (Dis):Interface disabled

        Returns:
{'2/Downstream Interfaces': ''
'2/Status': 'Disabled, Down'
'1/Downstream Interfaces': 'Te0/2(Up)'
'1/Status': 'Enabled, Up'
'1/Up-delay (default 0s)': '0(s)'
'1/Upstream Interfaces': 'Te0/1(Up)'
'2/Upstream Interfaces': ''
'2/Up-delay (default 0s)': '0(s)'
'Link State Group_list': ['1'
'2']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show link state group | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list =  self.dut_get_start_show_info(show_info)
        group_list = []
        dict_value={}
        show_info_list.pop()
        for value in show_info_list:
            if "Link State Group" in value :
                obj = re.match("(.*):(.*)\s+(.*):(.*)",value)
                key_1 = obj.group(2).strip()
                group_list.append(key_1)
                dict_value[key_1+"/"+obj.group(3).strip()] = obj.group(4).strip()
            elif ":" in value :
                list1 = str(value).split(":")
                dict_value[key_1+"/"+list1[0].strip()] = list1[1].strip()
        dict_value["Link State Group_list"]= group_list
        return dict_value
    def dut_get_show_split_summary(self,show_info):
        """
        Function:show split summary回显解析函数
        CLI命令:show split summary
        回显信息示例:
6120_2011#show split summary 
*  means restart or reset is to be needed.
Port          SplitStatus  SplitPorts                              
------------- ------------ -------------------------------------------
Fo0/25        splited      Te0/27     Te0/28     Te0/29     Te0/30     
Fo0/26        merged       Te0/31     Te0/32     Te0/33     Te0/34     
6120_2011#

        Returns:
{'Fo0/25/SplitStatus': 'splited'
'Fo0/26/SplitPorts': ['Te0/31'
'Te0/32'
'Te0/33'
'Te0/34'], 'Fo0/26/SplitStatus': 'merged'
'Port_list': ['Fo0/25'
'Fo0/26'], 'Fo0/25/SplitPorts': ['Te0/27'
'Te0/28'
'Te0/29'
'Te0/30']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show split summary | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        star_table,end_table,table_title,whippletree_list_1,show_info_list_line=self.dut_show_return_for_dut_show_autoget_form(show_info,"Port")
        whippletree_list_1[-1] = 64
        return self.dut_show_autoget_form_for_show_split_summary(star_table,end_table,table_title,whippletree_list_1,show_info_list_line)
    def dut_show_autoget_form_for_show_split_summary(self, star_num, end_num,title_value,x_list,show_info_list_line,title_value2=None):
        '''
        对设备有关杆号的列表进行字典的遍历
        '''
        dict_value ={}
        address_list = []
        title_list =[]
        for i in range (star_num,end_num):    #line_len-1:上面删除“-----”这一行了
            ##print show_info_list_line[i]
            x_len = len(x_list)
            cut_star = 0
            cut_end=0
            new_list = []
            show_info_list_line[i] = show_info_list_line[i]
            ##print show_info_list_line[i]
            if show_info_list_line[i] != "" :
                for j in range(x_len):
                    cut_end = cut_end+int(x_list[j])
                    col_value = show_info_list_line[i][cut_star:cut_end]
                    cut_star = cut_end
                    col_value = col_value.lstrip()
                    col_value = col_value.rstrip()
                    new_list.append(col_value)
                #获取表头的列，用于组合
                ##print col_value_list
                for i in range(len(new_list)) :
                    if new_list[i] == title_value :
                        new_list_title_key = i
                    if title_value2 is not None :
                        if new_list[i] == title_value2 :
                            new_list_title_key_2 = i
                new_list_title_value = new_list[new_list_title_key]          #需要变参的地方

                if new_list_title_value == title_value:
                    title_list = new_list
                elif new_list_title_value!= title_value:
                    #生成字典
                    if title_value2 is not None :
                        new_list_title_value = new_list_title_value+"/"+new_list[new_list_title_key_2]
                    address_list.append(new_list_title_value)
                    #遍历列头右边的值
                    if new_list_title_key+1 < x_len :
                        for s in range(new_list_title_key+1,x_len):  #需要变参的地方
                            #key_name = '%s/%s' % (title_col,title_row[s])
                            if title_value2 is not None :
                                if s == new_list_title_key_2 :
                                    continue
                            key_name = '%s/%s'%(new_list_title_value,title_list[s])
                            if s == 2 :
                                list_tmp = str(new_list[s]).split()
                                dict_value[key_name]=list_tmp
                            else:
                                dict_value[key_name]=new_list[s]
                    if new_list_title_key > 0 :
                        for s in range(0,new_list_title_key):  #需要变参的地方
                            ##遍历列头边的值
                            if title_value2 is not None :
                                if s == new_list_title_key_2 :
                                    continue
                            key_name = '%s/%s' % (new_list_title_value, title_list[s])
                            dict_value[key_name]=new_list[s]
                dict_value[title_value+"_list"]=address_list
        return dict_value
    def dut_get_show_ip_route_vrf_word_summary(self,show_info):
        """
        Function:show ip route vrf word summary回显解析函数
        CLI命令:show ip route vrf word summary
        回显信息示例:
dut1#show ip route vrf 1 summary 

Codes:  NORMAL - Normal route  ECMP - ECMP route  FRR - Fast-Reroute route

  Memory: 0 bytes
  Entries: 0, based on route prefixes

                 NORMAL     ECMP       FRR        TOTAL     
       Connected 0          0          0          0         
       Static    0          0          0          0         
       RIP       0          0          0          0         
       OSPF      0          0          0          0         
       ISIS      0          0          0          0         
       BGP       0          0          0          0         
       TOTAL     0          0          0          0         

dut1#

        Returns:
{'/ECMP': ''
'RIP/NORMAL': '0'
'TOTAL/ECMP': '0'
'Connected/NORMAL': '0'
'ISIS/ECMP': '0'
'BGP/NORMAL': '0'
'TOTAL/NORMAL': '0'
'Static/ECMP': '0'
'OSPF/FRR': '0'
'RIP/TOTAL': '0'
'OSPF/ECMP': '0'
'RIP/ECMP': '0'
'RIP/FRR': '0'
'TOTAL/FRR': '0'
'OSPF/TOTAL': '0'
'TOTAL/TOTAL': '0'
'/TOTAL': ''
'/NORMAL': ''
'Connected/ECMP': '0'
'BGP/TOTAL': '0'
'ISIS/NORMAL': '0'
'BGP/FRR': '0'
'ISIS/FRR': '0'
'Static/FRR': '0'
'Connected/TOTAL': '0'
'ISIS/TOTAL': '0'
'Static/NORMAL': '0'
'BGP/ECMP': '0'
'Connected/FRR': '0'
'/FRR': ''
'OSPF/NORMAL': '0'
'Static/TOTAL': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip route vrf word summary | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_ip_route_summary(show_info)
    def dut_get_show_ip_bgp_vrf_word_summary(self,show_info):
        """
        Function:show ip bgp vrf (word) summary回显解析函数
        CLI命令:show ip bgp vrf (word) summary
        回显信息示例:
TOR1#show ip bgp vrf vrf1 summary

For address family: IPv4 Unicast
BGP router identifier 1.1.1.1, local AS number 1
BGP VRF vrf1 Route Distinguisher: 1:1
BGP table version is 2
3 BGP AS-PATH entries
0 BGP Community entries
24 BGP Prefix entries (Maximum-prefix:4294967295)

Neighbor        V          AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd
20.1.1.2        4          20       4       2        0    0    0 00:00:16       10
40.1.1.2        4          20       4       3        1    0    0 00:00:17       10

Total number of neighbors 2, established neighbors 2

TOR1#

        Returns:
{'20.1.1.2/TblVer': '0'
'20.1.1.2/InQ': '0'
'40.1.1.2/MsgSent': '3'
'40.1.1.2/InQ': '0'
'20.1.1.2/MsgRcvd': '4'
'For address family': 'IPv4 Unicast'
'40.1.1.2/V': '4'
'BGP table version': '2'
'BGP AS-PATH entries': '0'
'40.1.1.2/Up/Down': '00:00:17'
'BGP VRF vrf1 Route Distinguisher': '1:1'
'40.1.1.2/OutQ': '0'
'Maximum-prefix': '4294967295'
'40.1.1.2/TblVer': '1'
'local AS number': '1'
'BGP Prefix entries': '24'
'40.1.1.2/AS': '20'
'Neighbor_list': ['20.1.1.2'
'40.1.1.2'], '40.1.1.2/MsgRcvd': '4'
'20.1.1.2/State/PfxRcd': '10'
'established neighbors': '2'
'20.1.1.2/OutQ': '0'
'Total number of neighbors': '2'
'20.1.1.2/MsgSent': '2'
'20.1.1.2/Up/Down': '00:00:16'
'BGP router identifier': '1.1.1.1'
'40.1.1.2/State/PfxRcd': '10'
'20.1.1.2/AS': '20'
'20.1.1.2/V': '4'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip bgp vrf (word) summary | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_line_list = self.dut_get_start_show_info(show_info)
        dict_value={}
        for value in show_line_list:
            value = value.strip()
            if "For address family" in value:
                list1 = value.split(":")
                dict_value[list1[0].strip()] = list1[1].strip()
            elif re.match("BGP router identifier(.*), local AS number (.*)",value):
                obj1 = re.match("BGP router identifier(.*), local AS number (.*)",value)
                dict_value["BGP router identifier"] = obj1.group(1).strip()
                dict_value["local AS number"] = obj1.group(2).strip()
            elif "BGP VRF vrf1 Route Distinguisher" in value:
                list1 = value.split(":",1)
                dict_value[list1[0].strip()] = list1[1].strip()
            elif "BGP table version" in value :
                list1 = value.split("is")
                dict_value[list1[0].strip()] = list1[1].strip()
            elif re.match("(.*)BGP AS-PATH entries",value):
                obj1 = re.match("(.*)BGP AS-PATH entries",value)
                dict_value["BGP AS-PATH entries"] = obj1.group(1).strip()
            elif re.match("(.*)BGP Community entries",value):
                obj1 = re.match("(.*)BGP Community entries",value)
                dict_value["BGP AS-PATH entries"] = obj1.group(1).strip()
            elif re.match("(.*)BGP Prefix entries \(Maximum-prefix:(.*)\)",value):
                obj1 = re.match("(.*)BGP Prefix entries \(Maximum-prefix:(.*)\)",value)
                dict_value["BGP Prefix entries"] = obj1.group(1).strip()
                dict_value["Maximum-prefix"] = obj1.group(2).strip()
            elif re.match("Total number of neighbors(.*), established neighbors(.*)",value):
                obj1 = re.match("Total number of neighbors(.*), established neighbors(.*)",value)
                dict_value["Total number of neighbors"] = obj1.group(1).strip()
                dict_value["established neighbors"] = obj1.group(2).strip()
        dict_value2 = self.dut_show_autoget_blank_list(show_info,"Neighbor","Total number of neighbors",split_one="1")
        return dict(dict_value.items()+dict_value2.items())
    def dut_get_show_vrrp_brief(self,show_info):
        """
        Function:show vrrp brief回显解析函数
        CLI命令:show vrrp brief
        回显信息示例:
5848VAC#show vrrp brief 
Interface             Grp  Pri   timer   Own  Pre   State   Master addr                               Group addr                              
VLAN 10               1    200   3.21    -    P     Master  10.1.1.1                                  10.1.1.254                              
5848VAC#

        Returns:
{'10.1.1.1/timer': '3.21'
'10.1.1.1/Own': '-'
'Master addr_list': ['10.1.1.1'], '10.1.1.1/State': 'Master'
'10.1.1.1/Pre': 'P'
'10.1.1.1/Grp': '1'
'10.1.1.1/Group addr': '10.1.1.254'
'10.1.1.1/Interface': 'VLAN 10'
'10.1.1.1/Pri': '200'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show vrrp brief | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_blank_list(show_info,"Master addr")
    def dut_get_show_vrrp_br(self,show_info):
        """
        Function:show vrrp brief回显解析函数
        CLI命令:show vrrp brief
        回显信息示例:
5848VAC#show vrrp brief 
Interface             Grp  Pri   timer   Own  Pre   State   Master addr                               Group addr                              
VLAN 10               1    200   3.21    -    P     Master  10.1.1.1                                  10.1.1.254                              
5848VAC#

        Returns:
{"10.1.1.1/timer": "3.21"
"10.1.1.1/Own": "-"
"Master addr_list": ["10.1.1.1"], "10.1.1.1/State": "Master"
"10.1.1.1/Pre": "P"
"10.1.1.1/Grp": "1"
"10.1.1.1/Group addr": "10.1.1.254"
"10.1.1.1/Interface": "VLAN 10"
"10.1.1.1/Pri": "200"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show vrrp brief | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_blank_list(show_info, "Group addr")
    def dut_get_show_grpc_subscr_sample(self,show_info):
        """
        Function:show grpc subscr sample回显解析函数
        CLI命令:show grpc subscr sample
        回显信息示例:
Ruijie#show grpc subscr sample 
Subscr sample all:
  json event: GRPC_JSON_EVENT_SAMPLE_SS_QOS_ECN_WRED_STAT (0x10000000)
    timer expire: inactive
    timer reopen expire: inactive
    local sample interval: 10
    local sample interval ms: 0
    server sample interval: 0
    server sample interval ms: 0
    server subscr count: 0
    sample event drop: 0
    sample pkt recv: 0
    sample pkt drop: 0

  json event: GRPC_JSON_EVENT_SAMPLE_SS_MMU_LOSS_CNT (0x10000001)
    timer expire: inactive
    timer reopen expire: inactive
    local sample interval: 10
    local sample interval ms: 0
    server sample interval: 0
    server sample interval ms: 0
    server subscr count: 0
    sample event drop: 0
    sample pkt recv: 0
    sample pkt drop: 0
          
  json event: GRPC_JSON_EVENT_SAMPLE_SS_MMU_BUF_USED (0x10000002)
    timer expire: inactive
    timer reopen expire: inactive
    local sample interval: 10
    local sample interval ms: 0
    server sample interval: 0
    server sample interval ms: 0
    server subscr count: 0
    sample event drop: 0
    sample pkt recv: 0
    sample pkt drop: 0

  json event: GRPC_JSON_EVENT_SAMPLE_SS_MMU_HDR_USED (0x10000003)
    timer expire: inactive
    timer reopen expire: inactive
    local sample interval: 10
    local sample interval ms: 0
    server sample interval: 0
    server sample interval ms: 0
    server subscr count: 0
    sample event drop: 0
    sample pkt recv: 0
    sample pkt drop: 0
          
  json event: GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRI_CNT (0x10000004)
    timer expire: inactive
    timer reopen expire: inactive
    local sample interval: 10
    local sample interval ms: 0
    server sample interval: 0
    server sample interval ms: 0
    server subscr count: 0
    sample event drop: 0
    sample pkt recv: 0
    sample pkt drop: 0

  json event: GRPC_JSON_EVENT_SAMPLE_SS_MMU_PORT_BUFFER_USED (0x10000005)
    timer expire: inactive
    timer reopen expire: inactive
    local sample interval: 10
    local sample interval ms: 0
    server sample interval: 0
    server sample interval ms: 0
    server subscr count: 0
    sample event drop: 0
    sample pkt recv: 0
    sample pkt drop: 0
          
  json event: GRPC_JSON_EVENT_SAMPLE_SS_MMU_QUEUE_PPS (0x10000006)
    timer expire: inactive
    timer reopen expire: inactive
    local sample interval: 10
    local sample interval ms: 0
    server sample interval: 0
    server sample interval ms: 0
    server subscr count: 0
    sample event drop: 0
    sample pkt recv: 0
    sample pkt drop: 0

  json event: GRPC_JSON_EVENT_SAMPLE_SS_MMU_QUEUE_BPS (0x10000007)
    timer expire: inactive
    timer reopen expire: inactive
    local sample interval: 10
    local sample interval ms: 0
    server sample interval: 0
    server sample interval ms: 0
    server subscr count: 0
    sample event drop: 0
    sample pkt recv: 0
    sample pkt drop: 0
          
  json event: GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRANSMITTED_BYTES (0x10000008)
    timer expire: inactive
    timer reopen expire: inactive
    local sample interval: 10
    local sample interval ms: 0
    server sample interval: 0
    server sample interval ms: 0
    server subscr count: 0
    sample event drop: 0
    sample pkt recv: 0
    sample pkt drop: 0

  json event: GRPC_JSON_EVENT_SAMPLE_SS_MMU_DROPPED_BYTES (0x10000009)
    timer expire: inactive
    timer reopen expire: inactive
    local sample interval: 10
    local sample interval ms: 0
    server sample interval: 0
    server sample interval ms: 0
    server subscr count: 0
    sample event drop: 0
    sample pkt recv: 0
    sample pkt drop: 0
          
  json event: GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRANSMITTED_PACKETS (0x1000000a)
    timer expire: inactive
    timer reopen expire: inactive
    local sample interval: 10
    local sample interval ms: 0
    server sample interval: 0
    server sample interval ms: 0
    server subscr count: 0
    sample event drop: 0
    sample pkt recv: 0
    sample pkt drop: 0

  json event: GRPC_JSON_EVENT_SAMPLE_SS_MMU_DROPPED_PACKETS (0x1000000b)
    timer expire: inactive
    timer reopen expire: inactive
    local sample interval: 10
    local sample interval ms: 0
    server sample interval: 0
    server sample interval ms: 0
    server subscr count: 0
    sample event drop: 0
    sample pkt recv: 0
    sample pkt drop: 0
          
  json event: GRPC_JSON_EVENT_SAMPLE_DCB_PFC_PAUSE_STAT (0x10010000)
    timer expire: inactive
    timer reopen expire: inactive
    local sample interval: 10
    local sample interval ms: 0
    server sample interval: 0
    server sample interval ms: 0
    server subscr count: 0
    sample event drop: 0
    sample pkt recv: 0
    sample pkt drop: 0

  json event: GRPC_JSON_EVENT_SAMPLE_LSM_INGRESS_LOSS_CNT (0x10020000)
    timer expire: inactive
    timer reopen expire: inactive
    local sample interval: 10
    local sample interval ms: 0
    server sample interval: 0
    server sample interval ms: 0
    server subscr count: 0
    sample event drop: 0
    sample pkt recv: 0
    sample pkt drop: 0
          
  json event: GRPC_JSON_EVENT_SAMPLE_LSM_INTF_STATIS (0x10020001)
    timer expire: inactive
    timer reopen expire: inactive
    local sample interval: 10
    local sample interval ms: 0
    server sample interval: 0
    server sample interval ms: 0
    server subscr count: 0
    sample event drop: 0
    sample pkt recv: 0
    sample pkt drop: 0

  json event: GRPC_JSON_EVENT_SAMPLE_LSM_INTF_IPSTATIS (0x10020002)
    timer expire: inactive
    timer reopen expire: inactive
    local sample interval: 10
    local sample interval ms: 0
    server sample interval: 0
    server sample interval ms: 0
    server subscr count: 0
    sample event drop: 0
    sample pkt recv: 0
    sample pkt drop: 0
          
  json event: GRPC_JSON_EVENT_SAMPLE_LSM_FIBER_INFO (0x10020003)
    timer expire: inactive
    timer reopen expire: inactive
    local sample interval: 10
    local sample interval ms: 0
    server sample interval: 0
    server sample interval ms: 0
    server subscr count: 0
    sample event drop: 0
    sample pkt recv: 0
    sample pkt drop: 0

  json event: GRPC_JSON_EVENT_SAMPLE_SYSMON (0x10030000)
    timer expire: inactive
    timer reopen expire: inactive
    local sample interval: 10
    local sample interval ms: 0
    server sample interval: 0
    server sample interval ms: 0
    server subscr count: 0
    sample event drop: 0
    sample pkt recv: 0
    sample pkt drop: 0
          
  json event: GRPC_JSON_EVENT_SAMPLE_TCPIP_IPIFSTATS_ATTR (0x10040000)
    timer expire: 42 msec
    timer reopen expire: inactive
    local sample interval: 10
    local sample interval ms: 0
    server sample interval: 0
    server sample interval ms: 200
    server subscr count: 1
    sample event drop: 0
    sample pkt recv: 268693
    sample pkt drop: 0

  json event: GRPC_JSON_EVENT_SAMPLE_TCPIP_IPV6IFSTATS_ATTR (0x10040001)
    timer expire: inactive
    timer reopen expire: inactive
    local sample interval: 10
    local sample interval ms: 0
    server sample interval: 0
    server sample interval ms: 0
    server subscr count: 0
    sample event drop: 0
    sample pkt recv: 0
    sample pkt drop: 0

        Returns:
{'GRPC_JSON_EVENT_SAMPLE_SS_MMU_QUEUE_PPS/local sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_SYSMON/server sample interval': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRANSMITTED_PACKETS/sample event drop': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_FIBER_INFO/server subscr count': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_DROPPED_PACKETS/sample pkt recv': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_QUEUE_BPS/local sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_HDR_USED/sample event drop': '0'
'GRPC_JSON_EVENT_SAMPLE_TCPIP_IPV6IFSTATS_ATTR/timer reopen expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRANSMITTED_BYTES/sample pkt recv': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_QUEUE_BPS/sample pkt drop': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_PORT_BUFFER_USED/sample pkt drop': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_INGRESS_LOSS_CNT/server sample interval': '0'
'GRPC_JSON_EVENT_SAMPLE_TCPIP_IPIFSTATS_ATTR/timer expire': '42 msec'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_HDR_USED/sample pkt drop': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRI_CNT/sample pkt recv': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_QUEUE_BPS/server sample interval': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_DROPPED_BYTES/timer expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_LSM_INTF_IPSTATIS/sample event drop': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_DROPPED_BYTES': '0x10000009'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRI_CNT/local sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_QUEUE_BPS/sample event drop': '0'
'GRPC_JSON_EVENT_SAMPLE_SYSMON': '0x10030000'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_LOSS_CNT/sample pkt drop': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_FIBER_INFO/sample event drop': '0'
'GRPC_JSON_EVENT_SAMPLE_TCPIP_IPV6IFSTATS_ATTR/local sample interval': '10'
'GRPC_JSON_EVENT_SAMPLE_LSM_INTF_IPSTATIS/server sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_TCPIP_IPV6IFSTATS_ATTR': '0x10040001'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRANSMITTED_PACKETS/server subscr count': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_INTF_IPSTATIS/local sample interval': '10'
'GRPC_JSON_EVENT_SAMPLE_DCB_PFC_PAUSE_STAT/timer reopen expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_BUF_USED/local sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRANSMITTED_BYTES/timer reopen expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_PORT_BUFFER_USED/server sample interval': '0'
'GRPC_JSON_EVENT_SAMPLE_DCB_PFC_PAUSE_STAT/server subscr count': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRANSMITTED_PACKETS/server sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_HDR_USED/sample pkt recv': '0'
'GRPC_JSON_EVENT_SAMPLE_TCPIP_IPV6IFSTATS_ATTR/timer expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_DROPPED_BYTES/sample pkt recv': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_QOS_ECN_WRED_STAT/timer reopen expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_HDR_USED/local sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_SYSMON/timer expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_SYSMON/local sample interval': '10'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_PORT_BUFFER_USED/local sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_HDR_USED/timer expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRI_CNT/server sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_INTF_STATIS/sample event drop': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_INTF_IPSTATIS': '0x10020002'
'GRPC_JSON_EVENT_SAMPLE_LSM_FIBER_INFO/local sample interval': '10'
'GRPC_JSON_EVENT_SAMPLE_SYSMON/sample event drop': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRANSMITTED_BYTES/local sample interval': '10'
'GRPC_JSON_EVENT_SAMPLE_SS_QOS_ECN_WRED_STAT/local sample interval': '10'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_DROPPED_BYTES/server subscr count': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_QOS_ECN_WRED_STAT/sample event drop': '0'
'GRPC_JSON_EVENT_SAMPLE_TCPIP_IPIFSTATS_ATTR/sample pkt recv': '268693'
'GRPC_JSON_EVENT_SAMPLE_LSM_FIBER_INFO/timer reopen expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_DROPPED_BYTES/server sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_DROPPED_PACKETS/local sample interval': '10'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_PORT_BUFFER_USED/sample event drop': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_QUEUE_BPS/server sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_INTF_STATIS/server sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_INTF_STATIS/timer reopen expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_QUEUE_PPS/sample pkt recv': '0'
'GRPC_JSON_EVENT_SAMPLE_DCB_PFC_PAUSE_STAT': '0x10010000'
'GRPC_JSON_EVENT_SAMPLE_TCPIP_IPIFSTATS_ATTR/local sample interval': '10'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRANSMITTED_PACKETS/timer reopen expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_DCB_PFC_PAUSE_STAT/sample event drop': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_DROPPED_BYTES/sample pkt drop': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_BUF_USED/server sample interval': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_PORT_BUFFER_USED/timer reopen expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_LSM_FIBER_INFO/server sample interval': '0'
'GRPC_JSON_EVENT_SAMPLE_TCPIP_IPV6IFSTATS_ATTR/sample pkt recv': '0'
'GRPC_JSON_EVENT_SAMPLE_TCPIP_IPIFSTATS_ATTR/server subscr count': '1'
'GRPC_JSON_EVENT_SAMPLE_LSM_INTF_STATIS/server sample interval': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_PORT_BUFFER_USED': '0x10000005'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_QUEUE_PPS/server sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_DCB_PFC_PAUSE_STAT/sample pkt drop': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_LOSS_CNT/sample pkt recv': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_INGRESS_LOSS_CNT/server sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_DCB_PFC_PAUSE_STAT/sample pkt recv': '0'
'GRPC_JSON_EVENT_SAMPLE_TCPIP_IPIFSTATS_ATTR/local sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_INTF_IPSTATIS/server subscr count': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_BUF_USED/sample event drop': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_INTF_STATIS': '0x10020001'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_DROPPED_PACKETS/timer reopen expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_QUEUE_BPS/sample pkt recv': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_BUF_USED/sample pkt recv': '0'
'subscr_sample_list': ['GRPC_JSON_EVENT_SAMPLE_SS_QOS_ECN_WRED_STAT'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_LOSS_CNT'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_BUF_USED'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_HDR_USED'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRI_CNT'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_PORT_BUFFER_USED'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_QUEUE_PPS'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_QUEUE_BPS'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRANSMITTED_BYTES'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_DROPPED_BYTES'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRANSMITTED_PACKETS'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_DROPPED_PACKETS'
'GRPC_JSON_EVENT_SAMPLE_DCB_PFC_PAUSE_STAT'
'GRPC_JSON_EVENT_SAMPLE_LSM_INGRESS_LOSS_CNT'
'GRPC_JSON_EVENT_SAMPLE_LSM_INTF_STATIS'
'GRPC_JSON_EVENT_SAMPLE_LSM_INTF_IPSTATIS'
'GRPC_JSON_EVENT_SAMPLE_LSM_FIBER_INFO'
'GRPC_JSON_EVENT_SAMPLE_SYSMON'
'GRPC_JSON_EVENT_SAMPLE_TCPIP_IPIFSTATS_ATTR'
'GRPC_JSON_EVENT_SAMPLE_TCPIP_IPV6IFSTATS_ATTR'], 'GRPC_JSON_EVENT_SAMPLE_SS_MMU_DROPPED_PACKETS/server sample interval': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_INGRESS_LOSS_CNT/sample event drop': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_QUEUE_PPS/sample pkt drop': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_INTF_STATIS/sample pkt drop': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_INGRESS_LOSS_CNT/timer reopen expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_QUEUE_PPS/server sample interval': '0'
'GRPC_JSON_EVENT_SAMPLE_TCPIP_IPIFSTATS_ATTR/server sample interval': '0'
'GRPC_JSON_EVENT_SAMPLE_TCPIP_IPV6IFSTATS_ATTR/sample event drop': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRANSMITTED_PACKETS/timer expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRANSMITTED_PACKETS/sample pkt drop': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_QUEUE_BPS': '0x10000007'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_DROPPED_BYTES/server sample interval': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_BUF_USED/server sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_DCB_PFC_PAUSE_STAT/local sample interval': '10'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_DROPPED_BYTES/sample event drop': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_INGRESS_LOSS_CNT/sample pkt recv': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_QUEUE_BPS/timer expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_LSM_FIBER_INFO': '0x10020003'
'GRPC_JSON_EVENT_SAMPLE_SYSMON/local sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_INTF_STATIS/local sample interval': '10'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRANSMITTED_PACKETS': '0x1000000a'
'GRPC_JSON_EVENT_SAMPLE_LSM_INTF_IPSTATIS/timer expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_HDR_USED/local sample interval': '10'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRANSMITTED_BYTES/local sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_INTF_IPSTATIS/timer reopen expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_HDR_USED/server sample interval': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_QOS_ECN_WRED_STAT/local sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_FIBER_INFO/sample pkt recv': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRANSMITTED_BYTES': '0x10000008'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRI_CNT/server subscr count': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRANSMITTED_BYTES/sample event drop': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_QUEUE_PPS/server subscr count': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_DROPPED_PACKETS/server sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_DROPPED_BYTES/local sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_LOSS_CNT/timer expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_PORT_BUFFER_USED/timer expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_LSM_INGRESS_LOSS_CNT/server subscr count': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_DROPPED_PACKETS/sample event drop': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_INGRESS_LOSS_CNT/local sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_TCPIP_IPV6IFSTATS_ATTR/sample pkt drop': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_FIBER_INFO/server sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_BUF_USED': '0x10000002'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRANSMITTED_BYTES/timer expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_DROPPED_BYTES/local sample interval': '10'
'GRPC_JSON_EVENT_SAMPLE_TCPIP_IPV6IFSTATS_ATTR/server sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_DROPPED_PACKETS/local sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_INTF_IPSTATIS/sample pkt drop': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_PORT_BUFFER_USED/server subscr count': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_FIBER_INFO/timer expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_BUF_USED/sample pkt drop': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_QOS_ECN_WRED_STAT': '0x10000000'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRANSMITTED_BYTES/server sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_DROPPED_PACKETS/timer expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_DROPPED_PACKETS/server subscr count': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_LOSS_CNT/sample event drop': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_HDR_USED/server subscr count': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_INTF_STATIS/sample pkt recv': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRI_CNT/sample pkt drop': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_QOS_ECN_WRED_STAT/server subscr count': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRANSMITTED_BYTES/server sample interval': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRI_CNT/local sample interval': '10'
'GRPC_JSON_EVENT_SAMPLE_SYSMON/sample pkt drop': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRANSMITTED_PACKETS/server sample interval': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_PORT_BUFFER_USED/server sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_TCPIP_IPV6IFSTATS_ATTR/server sample interval': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_DROPPED_PACKETS': '0x1000000b'
'GRPC_JSON_EVENT_SAMPLE_LSM_INTF_STATIS/server subscr count': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_INTF_STATIS/local sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_PORT_BUFFER_USED/local sample interval': '10'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_LOSS_CNT/server sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_INTF_IPSTATIS/local sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRI_CNT/server sample interval': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_INGRESS_LOSS_CNT/local sample interval': '10'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_LOSS_CNT/local sample interval': '10'
'GRPC_JSON_EVENT_SAMPLE_TCPIP_IPIFSTATS_ATTR/sample pkt drop': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_QOS_ECN_WRED_STAT/server sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_TCPIP_IPIFSTATS_ATTR': '0x10040000'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_LOSS_CNT': '0x10000001'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_DROPPED_BYTES/timer reopen expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_TCPIP_IPIFSTATS_ATTR/timer reopen expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_SS_QOS_ECN_WRED_STAT/sample pkt drop': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_HDR_USED/server sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_TCPIP_IPV6IFSTATS_ATTR/server subscr count': '0'
'GRPC_JSON_EVENT_SAMPLE_TCPIP_IPIFSTATS_ATTR/server sample interval ms': '200'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRI_CNT': '0x10000004'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_LOSS_CNT/server sample interval': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_INTF_IPSTATIS/sample pkt recv': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRANSMITTED_PACKETS/local sample interval': '10'
'GRPC_JSON_EVENT_SAMPLE_TCPIP_IPIFSTATS_ATTR/sample event drop': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_FIBER_INFO/sample pkt drop': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_QUEUE_BPS/server subscr count': '0'
'GRPC_JSON_EVENT_SAMPLE_SYSMON/timer reopen expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_LSM_INGRESS_LOSS_CNT/timer expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRI_CNT/sample event drop': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_QUEUE_BPS/timer reopen expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_DCB_PFC_PAUSE_STAT/local sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_SYSMON/server subscr count': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_QOS_ECN_WRED_STAT/sample pkt recv': '0'
'GRPC_JSON_EVENT_SAMPLE_DCB_PFC_PAUSE_STAT/server sample interval': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRI_CNT/timer reopen expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_BUF_USED/timer expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_DCB_PFC_PAUSE_STAT/server sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_QOS_ECN_WRED_STAT/server sample interval': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRANSMITTED_PACKETS/sample pkt recv': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_DROPPED_PACKETS/sample pkt drop': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_BUF_USED/server subscr count': '0'
'GRPC_JSON_EVENT_SAMPLE_DCB_PFC_PAUSE_STAT/timer expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_QUEUE_PPS/sample event drop': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_QUEUE_PPS/timer expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_QUEUE_BPS/local sample interval': '10'
'GRPC_JSON_EVENT_SAMPLE_LSM_INTF_STATIS/timer expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRANSMITTED_PACKETS/local sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_SYSMON/server sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRI_CNT/timer expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_LSM_INTF_IPSTATIS/server sample interval': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_HDR_USED/timer reopen expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_QUEUE_PPS': '0x10000006'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRANSMITTED_BYTES/sample pkt drop': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_QOS_ECN_WRED_STAT/timer expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_HDR_USED': '0x10000003'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_BUF_USED/local sample interval': '10'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_LOSS_CNT/server subscr count': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_BUF_USED/timer reopen expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_LOSS_CNT/local sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_QUEUE_PPS/local sample interval': '10'
'GRPC_JSON_EVENT_SAMPLE_TCPIP_IPV6IFSTATS_ATTR/local sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_TRANSMITTED_BYTES/server subscr count': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_PORT_BUFFER_USED/sample pkt recv': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_INGRESS_LOSS_CNT/sample pkt drop': '0'
'GRPC_JSON_EVENT_SAMPLE_LSM_INGRESS_LOSS_CNT': '0x10020000'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_LOSS_CNT/timer reopen expire': 'inactive'
'GRPC_JSON_EVENT_SAMPLE_LSM_FIBER_INFO/local sample interval ms': '0'
'GRPC_JSON_EVENT_SAMPLE_SYSMON/sample pkt recv': '0'
'GRPC_JSON_EVENT_SAMPLE_SS_MMU_QUEUE_PPS/timer reopen expire': 'inactive'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show grpc subscr sample | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        info_list = self.dut_get_start_show_info(show_info)
        subscr_sample_list = []
        for value in info_list:
            value = value.strip()
            if "Subscr sample all" in value :
                continue
            if "json event:" in value :
                obj = re.match("json event:(.*)\((.*)\)",value)
                key_1 = obj.group(1).strip()
                subscr_sample_list.append(key_1)
                value_1 = obj.group(2).strip()
                dict_value[key_1] =value_1
            elif ":" in value :
                list2 = value.split(":")
                key_2 = list2[0].strip()
                value_2 = list2[1].strip()
                dict_value[key_1+"/"+key_2] = value_2
        dict_value["subscr_sample_list"]=subscr_sample_list
        return dict_value
    def dut_get_show_lacp_counters(self,show_info):
        """
        Function:show lacp counters回显解析函数
        CLI命令:show lacp counters
        回显信息示例:
Ruijie#show lacp counters  

LACP PDU Pakcet Statistics

Aggregate port 1:
Port          InPkts    OutPkts
-------------------------------
Te0/2          80        90        
Te0/3          72        94        
Ruijie#

        Returns:
{'Aggregate port 1/Te0/2/OutPkts': '90'
'Aggregate port 1/Te0/3/InPkts': '72'
'Aggregate port 1_list': ['Te0/2'
'Te0/3'], 'Aggregate port 1/Te0/3/OutPkts': '94'
'Aggregate port 1/Te0/2/InPkts': '80'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show lacp counters | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        title_row =[]
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
            if '------' in i:
                show_info_list_line.remove(i)
        length = len(show_info_list_line)
        start_num = 0
        end_num = length
        value_title = "Port"
        key_1 = ""
        for k in range(start_num,end_num):
            if "LACP PDU Pakcet Statistics" in show_info_list_line[k]:
                continue
            if "Aggregate port" in show_info_list_line[k]:
                flag = 1
                if key_1 !="" :
                    dict_value[key_1+"_list"] = rol_title_list
                rol_title_list = []
                key_1 = show_info_list_line[k].split(":")[0]
            else:
                col_value_list = re.split(r'\s{2,}', show_info_list_line[k])
                if value_title in col_value_list :
                    title_row = col_value_list
                    x_len = len(title_row)
                    for i in range(x_len) :
                        if title_row[i] == value_title :
                            new_list_title_key = i
                else:
                    if col_value_list != "":
                        title_col = col_value_list[new_list_title_key]           #表头的列值位*****
                        rol_title_list.append(title_col)
                        if new_list_title_key+1 < x_len :
                            for s in range(new_list_title_key+1,x_len):  #需要变参的地方
                                key_name = '%s/%s'%(title_col,title_row[s])
                                dict_value[key_1+"/"+key_name]=col_value_list[s]
                        if new_list_title_key > 0 :
                            for s in range(0,new_list_title_key):  #需要变参的地方
                                ##遍历列头边的值
                                key_name = '%s/%s' % (title_col, title_row[s])
                                dict_value[key_1+"/"+key_name]=col_value_list[s]
        dict_value[key_1+"_list"] = rol_title_list
        return dict_value
    def dut_get_show_interface_brief(self,show_info):
        """
        Function:show interface brief回显解析函数
        CLI命令:show interface brief
        回显信息示例:
6510_2004#show interface brief 
down: link down
*down: administratively down
disabled: err-disabled(Please reference to command [show interfaces status err-disabled] for detail.)
Interface     Link Stat     Protocol Stat  Output Usage     Input Usage       inErrors      outErrors
------------  ------------  -------------  ---------------- ----------------  ------------  ------------
TF0/1         *down         down           0.00%            0.00%             0             0           
TF0/2         *down         down           0.00%            0.00%             0             0           
TF0/3         *down         down           0.00%            0.00%             0             0           
TF0/4         *down         down           0.00%            0.00%             0             0           
TF0/5         *down         down           0.00%            0.00%             0             0           
TF0/6         *down         down           0.00%            0.00%             0             0           
TF0/7         *down         down           0.00%            0.00%             0             0           
TF0/8         *down         down           0.00%            0.00%             0             0           
TF0/9         *down         down           0.00%            0.00%             0             0           
TF0/10        *down         down           0.00%            0.00%             0             0           
TF0/11        *down         down           0.00%            0.00%             0             0           
TF0/12        *down         down           0.00%            0.00%             0             0           
TF0/13        *down         down           0.00%            0.00%             0             0           
TF0/14        *down         down           0.00%            0.00%             0             0           
TF0/15        *down         down           0.00%            0.00%             0             0           
TF0/16        *down         down           0.00%            0.00%             0             0           
TF0/17        *down         down           0.00%            0.00%             0             0           
TF0/18        *down         down           0.00%            0.00%             0             0           
TF0/19        *down         down           0.00%            0.00%             0             0           
TF0/20        *down         down           0.00%            0.00%             0             0           
TF0/21        *down         down           0.00%            0.00%             0             0           
TF0/22        *down         down           0.00%            0.00%             0             0           
TF0/23        *down         down           0.00%            0.00%             0             0           
TF0/24        *down         down           0.00%            0.00%             0             0           
TF0/25        *down         down           0.00%            0.00%             0             0           
TF0/26        *down         down           0.00%            0.00%             0             0           
TF0/27        *down         down           0.00%            0.00%             0             0           
TF0/28        *down         down           0.00%            0.00%             0             0           
TF0/29        *down         down           0.00%            0.00%             0             0           
TF0/30        *down         down           0.00%            0.00%             0             0           
TF0/31        *down         down           0.00%            0.00%             0             0           
TF0/32        *down         down           0.00%            0.00%             0             0           
TF0/33        *down         down           0.00%            0.00%             0             0           
TF0/34        *down         down           0.00%            0.00%             0             0           
TF0/35        *down         down           0.00%            0.00%             0             0           
TF0/36        *down         down           0.00%            0.00%             0             0           
TF0/37        *down         down           0.00%            0.00%             0             0           
TF0/38        *down         down           0.00%            0.00%             0             0           
TF0/39        *down         down           0.00%            0.00%             0             0           
TF0/40        *down         down           0.00%            0.00%             0             0           
TF0/41        *down         down           0.00%            0.00%             0             0           
TF0/42        *down         down           0.00%            0.00%             0             0           
TF0/43        *down         down           0.00%            0.00%             0             0           
TF0/44        *down         down           0.00%            0.00%             0             0           
TF0/45        *down         down           0.00%            0.00%             0             0           
TF0/46        *down         down           0.00%            0.00%             0             0           
TF0/47        *down         down           0.00%            0.00%             0             0           
TF0/48        *down         down           0.00%            0.00%             0             0           
Hu0/49:1      *down         down           0.00%            0.00%             0             0           
Hu0/49:2      *down         down           0.00%            0.00%             0             0           
Hu0/49:3      *down         down           0.00%            0.00%             0             0           
Hu0/49:4      *down         down           0.00%            0.00%             0             0           
Hu0/50        *down         down           0.00%            0.00%             0             0           
Hu0/51        *down         down           0.00%            0.00%             0             0           
Hu0/52        *down         down           0.00%            0.00%             0             0           
Hu0/53        *down         down           0.00%            0.00%             0             0           
Hu0/54        *down         down           0.00%            0.00%             0             0           
Hu0/55        *down         down           0.00%            0.00%             0             0           
Hu0/56        *down         down           0.00%            0.00%             0             0           
Ag1           down          down           0.00%            0.00%             0             0           
6510_2004#

        Returns:
{'TF0/26/Protocol Stat': 'down'
'TF0/33/outErrors': '0'
'Hu0/51/Output Usage': '0.00%'
'TF0/39/Protocol Stat': 'down'
'TF0/8/Link Stat': '*down'
'Hu0/56/Link Stat': '*down'
'TF0/37/Input Usage': '0.00%'
'Hu0/52/outErrors': '0'
'TF0/47/inErrors': '0'
'TF0/31/Input Usage': '0.00%'
'TF0/29/inErrors': '0'
'TF0/26/Link Stat': '*down'
'TF0/36/Output Usage': '0.00%'
'TF0/5/outErrors': '0'
'TF0/48/Output Usage': '0.00%'
'TF0/1/Link Stat': '*down'
'TF0/33/inErrors': '0'
'TF0/2/inErrors': '0'
'TF0/40/Output Usage': '0.00%'
'Hu0/51/outErrors': '0'
'TF0/42/inErrors': '0'
'TF0/6/inErrors': '0'
'TF0/37/Link Stat': '*down'
'TF0/15/outErrors': '0'
'TF0/38/Link Stat': '*down'
'TF0/17/Protocol Stat': 'down'
'TF0/35/outErrors': '0'
'TF0/37/Output Usage': '0.00%'
'TF0/39/outErrors': '0'
'TF0/8/Protocol Stat': 'down'
'TF0/28/outErrors': '0'
'TF0/28/inErrors': '0'
'TF0/36/Input Usage': '0.00%'
'TF0/25/Link Stat': '*down'
'Hu0/55/Protocol Stat': 'down'
'TF0/40/outErrors': '0'
'TF0/12/Input Usage': '0.00%'
'TF0/3/outErrors': '0'
'Hu0/54/outErrors': '0'
'TF0/7/Protocol Stat': 'down'
'TF0/45/Output Usage': '0.00%'
'Hu0/54/Link Stat': '*down'
'TF0/47/Input Usage': '0.00%'
'TF0/19/Link Stat': '*down'
'TF0/41/Link Stat': '*down'
'TF0/16/Link Stat': '*down'
'TF0/34/inErrors': '0'
'TF0/30/Protocol Stat': 'down'
'TF0/16/inErrors': '0'
'TF0/6/outErrors': '0'
'TF0/34/Protocol Stat': 'down'
'TF0/46/inErrors': '0'
'TF0/34/outErrors': '0'
'TF0/41/Input Usage': '0.00%'
'TF0/3/Link Stat': '*down'
'TF0/46/Protocol Stat': 'down'
'TF0/30/Output Usage': '0.00%'
'TF0/42/Input Usage': '0.00%'
'TF0/14/Input Usage': '0.00%'
'TF0/5/Output Usage': '0.00%'
'TF0/17/outErrors': '0'
'TF0/17/Input Usage': '0.00%'
'TF0/12/outErrors': '0'
'TF0/38/Output Usage': '0.00%'
'TF0/39/Output Usage': '0.00%'
'TF0/34/Output Usage': '0.00%'
'TF0/6/Input Usage': '0.00%'
'Hu0/49:4/Output Usage': '0.00%'
'TF0/29/Link Stat': '*down'
'TF0/26/outErrors': '0'
'TF0/23/Input Usage': '0.00%'
'Hu0/50/Input Usage': '0.00%'
'TF0/8/inErrors': '0'
'TF0/48/outErrors': '0'
'Hu0/50/Protocol Stat': 'down'
'TF0/27/Link Stat': '*down'
'TF0/28/Protocol Stat': 'down'
'Hu0/55/Output Usage': '0.00%'
'Hu0/49:3/Protocol Stat': 'down'
'TF0/5/inErrors': '0'
'TF0/20/Protocol Stat': 'down'
'TF0/9/Output Usage': '0.00%'
'TF0/44/Protocol Stat': 'down'
'TF0/31/inErrors': '0'
'TF0/8/outErrors': '0'
'Hu0/50/Link Stat': '*down'
'TF0/6/Link Stat': '*down'
'TF0/45/Link Stat': '*down'
'TF0/43/inErrors': '0'
'TF0/2/outErrors': '0'
'TF0/48/Link Stat': '*down'
'Hu0/49:2/Link Stat': '*down'
'TF0/24/Output Usage': '0.00%'
'TF0/14/inErrors': '0'
'TF0/37/outErrors': '0'
'TF0/35/Link Stat': '*down'
'TF0/25/Input Usage': '0.00%'
'TF0/30/Link Stat': '*down'
'disabled': 'err-disabled(Please reference to command [show interfaces status err-disabled] for detail.)'
'TF0/18/inErrors': '0'
'Hu0/54/inErrors': '0'
'Hu0/49:3/outErrors': '0'
'TF0/13/Output Usage': '0.00%'
'*down': 'administratively down'
'TF0/13/Protocol Stat': 'down'
'TF0/47/Protocol Stat': 'down'
'TF0/47/Output Usage': '0.00%'
'TF0/36/Link Stat': '*down'
'TF0/42/Protocol Stat': 'down'
'TF0/14/Output Usage': '0.00%'
'TF0/16/Input Usage': '0.00%'
'TF0/22/Protocol Stat': 'down'
'TF0/32/Link Stat': '*down'
'TF0/7/inErrors': '0'
'TF0/23/Link Stat': '*down'
'TF0/23/inErrors': '0'
'TF0/36/Protocol Stat': 'down'
'TF0/5/Link Stat': '*down'
'TF0/5/Input Usage': '0.00%'
'Hu0/49:4/Protocol Stat': 'down'
'TF0/32/Protocol Stat': 'down'
'TF0/46/Input Usage': '0.00%'
'TF0/9/Input Usage': '0.00%'
'Hu0/52/Output Usage': '0.00%'
'Hu0/49:1/Input Usage': '0.00%'
'TF0/22/inErrors': '0'
'TF0/25/Output Usage': '0.00%'
'TF0/4/outErrors': '0'
'TF0/14/Link Stat': '*down'
'TF0/21/Protocol Stat': 'down'
'TF0/48/Input Usage': '0.00%'
'TF0/10/Input Usage': '0.00%'
'TF0/18/Link Stat': '*down'
'Ag1/Output Usage': '0.00%'
'TF0/9/inErrors': '0'
'TF0/24/Protocol Stat': 'down'
'TF0/13/outErrors': '0'
'TF0/3/Protocol Stat': 'down'
'TF0/33/Output Usage': '0.00%'
'Ag1/outErrors': '0'
'Hu0/49:4/outErrors': '0'
'Hu0/55/inErrors': '0'
'TF0/18/Protocol Stat': 'down'
'Hu0/49:2/Output Usage': '0.00%'
'TF0/48/inErrors': '0'
'TF0/41/Protocol Stat': 'down'
'Hu0/50/outErrors': '0'
'TF0/15/Input Usage': '0.00%'
'Hu0/51/Link Stat': '*down'
'TF0/17/inErrors': '0'
'Hu0/53/Output Usage': '0.00%'
'TF0/30/outErrors': '0'
'TF0/20/inErrors': '0'
'Hu0/51/Input Usage': '0.00%'
'TF0/10/Protocol Stat': 'down'
'Hu0/56/Protocol Stat': 'down'
'TF0/31/Output Usage': '0.00%'
'TF0/32/Input Usage': '0.00%'
'Hu0/49:2/outErrors': '0'
'TF0/34/Link Stat': '*down'
'TF0/27/Protocol Stat': 'down'
'TF0/24/inErrors': '0'
'Hu0/49:3/Input Usage': '0.00%'
'TF0/11/outErrors': '0'
'TF0/22/Input Usage': '0.00%'
'TF0/15/Output Usage': '0.00%'
'TF0/3/Output Usage': '0.00%'
'TF0/38/inErrors': '0'
'Hu0/56/inErrors': '0'
'Hu0/49:3/inErrors': '0'
'TF0/35/Input Usage': '0.00%'
'TF0/11/Protocol Stat': 'down'
'TF0/11/Link Stat': '*down'
'Hu0/54/Protocol Stat': 'down'
'TF0/35/Protocol Stat': 'down'
'Hu0/49:1/inErrors': '0'
'Hu0/49:4/inErrors': '0'
'TF0/27/inErrors': '0'
'Hu0/55/Link Stat': '*down'
'Hu0/49:3/Link Stat': '*down'
'TF0/10/Link Stat': '*down'
'TF0/1/Input Usage': '0.00%'
'TF0/26/Input Usage': '0.00%'
'TF0/28/Output Usage': '0.00%'
'TF0/29/Output Usage': '0.00%'
'TF0/20/Output Usage': '0.00%'
'Hu0/49:2/Protocol Stat': 'down'
'TF0/12/Protocol Stat': 'down'
'TF0/13/inErrors': '0'
'TF0/10/inErrors': '0'
'TF0/3/inErrors': '0'
'Hu0/52/Protocol Stat': 'down'
'TF0/1/outErrors': '0'
'TF0/41/Output Usage': '0.00%'
'TF0/1/Output Usage': '0.00%'
'Hu0/51/inErrors': '0'
'TF0/14/Protocol Stat': 'down'
'Hu0/49:2/inErrors': '0'
'TF0/19/outErrors': '0'
'Hu0/56/Input Usage': '0.00%'
'TF0/37/Protocol Stat': 'down'
'TF0/22/Output Usage': '0.00%'
'TF0/42/Output Usage': '0.00%'
'Hu0/56/Output Usage': '0.00%'
'TF0/46/Link Stat': '*down'
'TF0/36/inErrors': '0'
'TF0/19/Input Usage': '0.00%'
'TF0/32/outErrors': '0'
'TF0/31/outErrors': '0'
'TF0/13/Link Stat': '*down'
'TF0/11/Output Usage': '0.00%'
'TF0/7/Output Usage': '0.00%'
'TF0/39/Input Usage': '0.00%'
'TF0/26/inErrors': '0'
'TF0/45/inErrors': '0'
'Hu0/51/Protocol Stat': 'down'
'Hu0/52/Input Usage': '0.00%'
'TF0/37/inErrors': '0'
'Hu0/49:4/Link Stat': '*down'
'TF0/45/Input Usage': '0.00%'
'TF0/19/Protocol Stat': 'down'
'Hu0/54/Output Usage': '0.00%'
'TF0/32/inErrors': '0'
'Hu0/49:1/Output Usage': '0.00%'
'TF0/44/inErrors': '0'
'TF0/15/inErrors': '0'
'TF0/43/Output Usage': '0.00%'
'TF0/43/Protocol Stat': 'down'
'Interface_list': ['TF0/1'
'TF0/2'
'TF0/3'
'TF0/4'
'TF0/5'
'TF0/6'
'TF0/7'
'TF0/8'
'TF0/9'
'TF0/10'
'TF0/11'
'TF0/12'
'TF0/13'
'TF0/14'
'TF0/15'
'TF0/16'
'TF0/17'
'TF0/18'
'TF0/19'
'TF0/20'
'TF0/21'
'TF0/22'
'TF0/23'
'TF0/24'
'TF0/25'
'TF0/26'
'TF0/27'
'TF0/28'
'TF0/29'
'TF0/30'
'TF0/31'
'TF0/32'
'TF0/33'
'TF0/34'
'TF0/35'
'TF0/36'
'TF0/37'
'TF0/38'
'TF0/39'
'TF0/40'
'TF0/41'
'TF0/42'
'TF0/43'
'TF0/44'
'TF0/45'
'TF0/46'
'TF0/47'
'TF0/48'
'Hu0/49:1'
'Hu0/49:2'
'Hu0/49:3'
'Hu0/49:4'
'Hu0/50'
'Hu0/51'
'Hu0/52'
'Hu0/53'
'Hu0/54'
'Hu0/55'
'Hu0/56'
'Ag1'], 'Hu0/49:2/Input Usage': '0.00%'
'Hu0/49:1/outErrors': '0'
'TF0/31/Link Stat': '*down'
'TF0/46/outErrors': '0'
'TF0/18/Input Usage': '0.00%'
'Hu0/50/inErrors': '0'
'TF0/45/outErrors': '0'
'TF0/6/Output Usage': '0.00%'
'TF0/32/Output Usage': '0.00%'
'TF0/2/Protocol Stat': 'down'
'TF0/1/Protocol Stat': 'down'
'TF0/10/Output Usage': '0.00%'
'TF0/3/Input Usage': '0.00%'
'TF0/36/outErrors': '0'
'TF0/33/Protocol Stat': 'down'
'Hu0/49:1/Protocol Stat': 'down'
'TF0/9/outErrors': '0'
'TF0/16/outErrors': '0'
'TF0/21/Input Usage': '0.00%'
'TF0/8/Output Usage': '0.00%'
'TF0/39/inErrors': '0'
'TF0/43/Input Usage': '0.00%'
'TF0/7/Input Usage': '0.00%'
'TF0/1/inErrors': '0'
'TF0/30/inErrors': '0'
'TF0/25/Protocol Stat': 'down'
'Hu0/49:4/Input Usage': '0.00%'
'TF0/29/Input Usage': '0.00%'
'TF0/12/Output Usage': '0.00%'
'TF0/27/Input Usage': '0.00%'
'TF0/43/outErrors': '0'
'TF0/15/Link Stat': '*down'
'TF0/21/inErrors': '0'
'TF0/38/Input Usage': '0.00%'
'TF0/20/outErrors': '0'
'TF0/18/Output Usage': '0.00%'
'TF0/23/outErrors': '0'
'TF0/26/Output Usage': '0.00%'
'TF0/47/outErrors': '0'
'TF0/43/Link Stat': '*down'
'TF0/18/outErrors': '0'
'Ag1/inErrors': '0'
'Ag1/Protocol Stat': 'down'
'TF0/7/Link Stat': '*down'
'TF0/31/Protocol Stat': 'down'
'TF0/4/Input Usage': '0.00%'
'TF0/35/inErrors': '0'
'TF0/33/Link Stat': '*down'
'Hu0/54/Input Usage': '0.00%'
'TF0/2/Output Usage': '0.00%'
'TF0/42/outErrors': '0'
'TF0/25/outErrors': '0'
'TF0/19/Output Usage': '0.00%'
'TF0/12/Link Stat': '*down'
'TF0/41/inErrors': '0'
'TF0/14/outErrors': '0'
'Hu0/50/Output Usage': '0.00%'
'TF0/21/outErrors': '0'
'TF0/13/Input Usage': '0.00%'
'TF0/41/outErrors': '0'
'Hu0/52/inErrors': '0'
'TF0/23/Output Usage': '0.00%'
'TF0/46/Output Usage': '0.00%'
'TF0/10/outErrors': '0'
'TF0/20/Link Stat': '*down'
'TF0/28/Input Usage': '0.00%'
'TF0/24/outErrors': '0'
'TF0/38/Protocol Stat': 'down'
'Ag1/Link Stat': 'down'
'TF0/4/Link Stat': '*down'
'TF0/4/inErrors': '0'
'TF0/15/Protocol Stat': 'down'
'TF0/16/Output Usage': '0.00%'
'TF0/17/Output Usage': '0.00%'
'TF0/45/Protocol Stat': 'down'
'TF0/44/outErrors': '0'
'Hu0/55/Input Usage': '0.00%'
'TF0/27/outErrors': '0'
'TF0/20/Input Usage': '0.00%'
'TF0/11/inErrors': '0'
'TF0/9/Link Stat': '*down'
'TF0/38/outErrors': '0'
'TF0/44/Output Usage': '0.00%'
'TF0/44/Link Stat': '*down'
'TF0/47/Link Stat': '*down'
'TF0/44/Input Usage': '0.00%'
'down': 'link down'
'Hu0/53/Protocol Stat': 'down'
'TF0/29/Protocol Stat': 'down'
'TF0/30/Input Usage': '0.00%'
'TF0/16/Protocol Stat': 'down'
'TF0/12/inErrors': '0'
'TF0/42/Link Stat': '*down'
'Hu0/49:1/Link Stat': '*down'
'Hu0/56/outErrors': '0'
'TF0/39/Link Stat': '*down'
'TF0/40/inErrors': '0'
'TF0/25/inErrors': '0'
'TF0/7/outErrors': '0'
'TF0/23/Protocol Stat': 'down'
'Hu0/55/outErrors': '0'
'TF0/48/Protocol Stat': 'down'
'TF0/24/Input Usage': '0.00%'
'TF0/22/outErrors': '0'
'TF0/34/Input Usage': '0.00%'
'TF0/40/Input Usage': '0.00%'
'TF0/2/Input Usage': '0.00%'
'Hu0/52/Link Stat': '*down'
'TF0/9/Protocol Stat': 'down'
'TF0/28/Link Stat': '*down'
'TF0/22/Link Stat': '*down'
'Hu0/49:3/Output Usage': '0.00%'
'TF0/4/Protocol Stat': 'down'
'TF0/21/Link Stat': '*down'
'TF0/40/Protocol Stat': 'down'
'Ag1/Input Usage': '0.00%'
'TF0/27/Output Usage': '0.00%'
'Hu0/53/Input Usage': '0.00%'
'TF0/11/Input Usage': '0.00%'
'TF0/29/outErrors': '0'
'TF0/8/Input Usage': '0.00%'
'TF0/35/Output Usage': '0.00%'
'TF0/21/Output Usage': '0.00%'
'TF0/19/inErrors': '0'
'TF0/33/Input Usage': '0.00%'
'Hu0/53/outErrors': '0'
'TF0/24/Link Stat': '*down'
'TF0/4/Output Usage': '0.00%'
'TF0/40/Link Stat': '*down'
'TF0/17/Link Stat': '*down'
'Hu0/53/inErrors': '0'
'TF0/2/Link Stat': '*down'
'Hu0/53/Link Stat': '*down'
'TF0/6/Protocol Stat': 'down'
'TF0/5/Protocol Stat': 'down'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interface brief | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Interface",ago_colon_last_str=1)
    def dut_get_show_priorityflowcontrol_status(self,show_info):
        """
        Function:show priority-flow-control status回显解析函数
        CLI命令:show priority-flow-control status
        回显信息示例:
6220H_2002(config)#show priority-flow-control status
interface  PriorityEnabledPFC PriorityEnalbedPFCByUser  
---------- ------------------ ------------------------ 
Te0/1      -                  -                       
Te0/2      -                  -                       
Te0/3      -                  -                       
Te0/4      -                  -                       
Te0/5      -                  -                       
Te0/6      -                  -                       
Te0/7      -                  -                       
Te0/8      -                  -                       
Te0/9      -                  -                       
Te0/10     -                  -                       
Te0/11     -                  -                       
Te0/12     -                  -                       
Te0/13     -                  -                       
Te0/14     -                  -                       
Te0/15     -                  -                       
Te0/16     -                  -                       
Te0/17     -                  -                       
Te0/18     -                  -                       
Te0/19     -                  -                       
Te0/20     -                  -                       
Te0/21     -                  -                       
Te0/22     -                  -                       
Te0/23     -                  -                       
Te0/24     -                  -                       
Te0/25     -                  -                       
Te0/26     -                  -                       
Te0/27     -                  -                       
Te0/28     -                  -                       
Te0/29     -                  -                       
Te0/30     -                  -                       
Te0/31     -                  -                       
Te0/32     -                  -                       
Te0/33     -                  -                       
Te0/34     -                  -                       
Te0/35     -                  -                       
Te0/36     -                  -                       
Te0/37     -                  -                       
Te0/38     -                  -                       
Te0/39     -                  -                       
Te0/40     -                  -                       
Te0/41     -                  -                       
Te0/42     -                  -                       
Te0/43     -                  -                       
Te0/44     -                  -                       
Te0/45     -                  -                       
Te0/46     -                  -                       
Te0/47     -                  -                       
Te0/48     -                  -                       
Fo0/49     -                  -                       
Fo0/50     -                  -                       
Fo0/51     -                  -                       
Fo0/52     -                  -                       
Fo0/53     -                  -                       
Fo0/54     -                  -                       
Ag1        2-4                2-4                     
6220H_2002(config)#

        Returns:
{'Te0/32/PriorityEnabledPFC': '-'
'Te0/25/PriorityEnalbedPFCByUser': '-'
'Te0/48/PriorityEnalbedPFCByUser': '-'
'Te0/28/PriorityEnabledPFC': '-'
'Te0/15/PriorityEnabledPFC': '-'
'Te0/15/PriorityEnalbedPFCByUser': '-'
'Te0/3/PriorityEnalbedPFCByUser': '-'
'Te0/20/PriorityEnabledPFC': '-'
'Fo0/54/PriorityEnabledPFC': '-'
'Te0/13/PriorityEnabledPFC': '-'
'Te0/40/PriorityEnalbedPFCByUser': '-'
'Fo0/49/PriorityEnabledPFC': '-'
'Fo0/49/PriorityEnalbedPFCByUser': '-'
'Te0/31/PriorityEnalbedPFCByUser': '-'
'Te0/8/PriorityEnabledPFC': '-'
'Te0/17/PriorityEnalbedPFCByUser': '-'
'Fo0/52/PriorityEnalbedPFCByUser': '-'
'Te0/19/PriorityEnalbedPFCByUser': '-'
'Te0/34/PriorityEnalbedPFCByUser': '-'
'Te0/42/PriorityEnabledPFC': '-'
'Te0/6/PriorityEnabledPFC': '-'
'Fo0/54/PriorityEnalbedPFCByUser': '-'
'Te0/12/PriorityEnalbedPFCByUser': '-'
'Fo0/52/PriorityEnabledPFC': '-'
'Te0/4/PriorityEnabledPFC': '-'
'Te0/11/PriorityEnalbedPFCByUser': '-'
'Fo0/53/PriorityEnalbedPFCByUser': '-'
'Te0/37/PriorityEnabledPFC': '-'
'Te0/30/PriorityEnabledPFC': '-'
'Te0/35/PriorityEnalbedPFCByUser': '-'
'Te0/34/PriorityEnabledPFC': '-'
'Te0/22/PriorityEnalbedPFCByUser': '-'
'Te0/35/PriorityEnabledPFC': '-'
'Te0/37/PriorityEnalbedPFCByUser': '-'
'Te0/19/PriorityEnabledPFC': '-'
'Te0/36/PriorityEnabledPFC': '-'
'Te0/18/PriorityEnabledPFC': '-'
'Te0/29/PriorityEnabledPFC': '-'
'Te0/18/PriorityEnalbedPFCByUser': '-'
'Te0/43/PriorityEnabledPFC': '-'
'Te0/36/PriorityEnalbedPFCByUser': '-'
'Ag1/PriorityEnabledPFC': '2-4'
'Te0/32/PriorityEnalbedPFCByUser': '-'
'Te0/23/PriorityEnabledPFC': '-'
'Te0/26/PriorityEnalbedPFCByUser': '-'
'Te0/2/PriorityEnabledPFC': '-'
'Te0/26/PriorityEnabledPFC': '-'
'Te0/24/PriorityEnalbedPFCByUser': '-'
'Te0/1/PriorityEnabledPFC': '-'
'Fo0/53/PriorityEnabledPFC': '-'
'Te0/5/PriorityEnabledPFC': '-'
'Te0/25/PriorityEnabledPFC': '-'
'Te0/20/PriorityEnalbedPFCByUser': '-'
'Te0/38/PriorityEnalbedPFCByUser': '-'
'Fo0/50/PriorityEnalbedPFCByUser': '-'
'interface_list': ['Te0/1'
'Te0/2'
'Te0/3'
'Te0/4'
'Te0/5'
'Te0/6'
'Te0/7'
'Te0/8'
'Te0/9'
'Te0/10'
'Te0/11'
'Te0/12'
'Te0/13'
'Te0/14'
'Te0/15'
'Te0/16'
'Te0/17'
'Te0/18'
'Te0/19'
'Te0/20'
'Te0/21'
'Te0/22'
'Te0/23'
'Te0/24'
'Te0/25'
'Te0/26'
'Te0/27'
'Te0/28'
'Te0/29'
'Te0/30'
'Te0/31'
'Te0/32'
'Te0/33'
'Te0/34'
'Te0/35'
'Te0/36'
'Te0/37'
'Te0/38'
'Te0/39'
'Te0/40'
'Te0/41'
'Te0/42'
'Te0/43'
'Te0/44'
'Te0/45'
'Te0/46'
'Te0/47'
'Te0/48'
'Fo0/49'
'Fo0/50'
'Fo0/51'
'Fo0/52'
'Fo0/53'
'Fo0/54'
'Ag1'], 'Te0/28/PriorityEnalbedPFCByUser': '-'
'Te0/7/PriorityEnabledPFC': '-'
'Te0/10/PriorityEnalbedPFCByUser': '-'
'Te0/2/PriorityEnalbedPFCByUser': '-'
'Te0/11/PriorityEnabledPFC': '-'
'Te0/10/PriorityEnabledPFC': '-'
'Te0/1/PriorityEnalbedPFCByUser': '-'
'Te0/45/PriorityEnalbedPFCByUser': '-'
'Te0/44/PriorityEnalbedPFCByUser': '-'
'Fo0/51/PriorityEnabledPFC': '-'
'Te0/5/PriorityEnalbedPFCByUser': '-'
'Te0/16/PriorityEnabledPFC': '-'
'Te0/14/PriorityEnabledPFC': '-'
'Te0/16/PriorityEnalbedPFCByUser': '-'
'Te0/21/PriorityEnabledPFC': '-'
'Ag1/PriorityEnalbedPFCByUser': '2-4'
'Te0/41/PriorityEnabledPFC': '-'
'Te0/48/PriorityEnabledPFC': '-'
'Te0/14/PriorityEnalbedPFCByUser': '-'
'Te0/12/PriorityEnabledPFC': '-'
'Te0/31/PriorityEnabledPFC': '-'
'Te0/39/PriorityEnabledPFC': '-'
'Te0/46/PriorityEnalbedPFCByUser': '-'
'Te0/38/PriorityEnabledPFC': '-'
'Te0/47/PriorityEnabledPFC': '-'
'Te0/42/PriorityEnalbedPFCByUser': '-'
'Te0/27/PriorityEnalbedPFCByUser': '-'
'Te0/17/PriorityEnabledPFC': '-'
'Te0/39/PriorityEnalbedPFCByUser': '-'
'Fo0/51/PriorityEnalbedPFCByUser': '-'
'Te0/33/PriorityEnalbedPFCByUser': '-'
'Te0/40/PriorityEnabledPFC': '-'
'Te0/6/PriorityEnalbedPFCByUser': '-'
'Te0/22/PriorityEnabledPFC': '-'
'Te0/30/PriorityEnalbedPFCByUser': '-'
'Te0/44/PriorityEnabledPFC': '-'
'Te0/24/PriorityEnabledPFC': '-'
'Te0/27/PriorityEnabledPFC': '-'
'Fo0/50/PriorityEnabledPFC': '-'
'Te0/13/PriorityEnalbedPFCByUser': '-'
'Te0/9/PriorityEnalbedPFCByUser': '-'
'Te0/29/PriorityEnalbedPFCByUser': '-'
'Te0/3/PriorityEnabledPFC': '-'
'Te0/4/PriorityEnalbedPFCByUser': '-'
'Te0/9/PriorityEnabledPFC': '-'
'Te0/33/PriorityEnabledPFC': '-'
'Te0/41/PriorityEnalbedPFCByUser': '-'
'Te0/43/PriorityEnalbedPFCByUser': '-'
'Te0/46/PriorityEnabledPFC': '-'
'Te0/21/PriorityEnalbedPFCByUser': '-'
'Te0/7/PriorityEnalbedPFCByUser': '-'
'Te0/45/PriorityEnabledPFC': '-'
'Te0/47/PriorityEnalbedPFCByUser': '-'
'Te0/23/PriorityEnalbedPFCByUser': '-'
'Te0/8/PriorityEnalbedPFCByUser': '-'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show priority-flow-control status | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"interface")
    def dut_get_show_qos_bandwidth_interface_dutport(self,show_info):
        """
        Function:show qos bandwidth  <dutport>回显解析函数
        CLI命令:show qos bandwidth  <dutport>
        回显信息示例:
6220H_2002(config)#show qos bandwidth interface TenGigabitEthernet 0/1
Interface: TenGigabitEthernet 0/1
 ------------------------------------------------
 queue-id | minimum-bandwidth | maximum-bandwidth
 --------   -----------------   -----------------
        1                1000                   0
        2                   0                   0
        3                   0                   0
        4                   0                   0
        5                   0                   0
        6                   0                   0
        7                   0                   0
        8                   0                1000
 ------------------------------------------------
 Total minimum-bandwidth:                    1000
 Total maximum-bandwidth:                    1000
6220H_2002(config)#

        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show qos bandwidth  <dutport> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        title_row =[]
        show_info = show_info.replace("|"," ")
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
            if '----' in i:
                show_info_list_line.remove(i)
        length = len(show_info_list_line)
        start_num = 0
        end_num = length
        value_title = "queue-id"
        key_1 = ""
        rol_title_list=[]
        for k in range(start_num,end_num):
            show_info_list_line[k] = show_info_list_line[k].strip()
            if "Interface:" in show_info_list_line[k]:
                continue
            if ":" in show_info_list_line[k]:
                list_1 = show_info_list_line[k].split(":")
                dict_value[list_1[0].strip()]=list_1[1].strip()
            else:
                col_value_list = re.split(r'\s{2,}', show_info_list_line[k])
                if value_title in col_value_list :
                    title_row = col_value_list
                    x_len = len(title_row)
                    for i in range(x_len) :
                        if title_row[i] == value_title :
                            new_list_title_key = i
                else:
                    if col_value_list != "":
                        title_col = col_value_list[new_list_title_key]           #表头的列值位*****
                        rol_title_list.append(title_col)
                        if new_list_title_key+1 < x_len :
                            for s in range(new_list_title_key+1,x_len):  #需要变参的地方
                                key_name = '%s/%s'%(title_col,title_row[s])
                                dict_value[key_name]=col_value_list[s]
                        if new_list_title_key > 0 :
                            for s in range(0,new_list_title_key):  #需要变参的地方
                                ##遍历列头边的值
                                key_name = '%s/%s' % (title_col, title_row[s])
                                dict_value[key_name]=col_value_list[s]
        dict_value[value_title+"_list"] = rol_title_list
        return dict_value
    def dut_get_show_ipv6_dhcp_snooping_binding(self,show_info):
        """
        Function:show ipv6 dhcp snooping binding回显解析函数
        CLI命令:show ipv6 dhcp snooping binding
        回显信息示例:
eg2000d(config)#show ipv6 dhcp snooping binding 
Total number of bindings: 1
NO.    MAC Address     IPv6 Address                                 Lease(sec)   VLAN  Interface
-----  --------------  -------------------------------------------  -----------  ----  --------------------
1      0010.9400.0003  2020::2                                      84522        20    GigabitEthernet 0/3
eg2000d(config)#

        Returns:
{'0010.9400.0003/2020::2/Interface': 'GigabitEthernet 0/3'
'MAC Address_list': ['0010.9400.0003/2020::2'], '0010.9400.0003/2020::2/VLAN': '20'
'Total number of bindings': '1'
'0010.9400.0003/2020::2/NO.': '1'
'0010.9400.0003/2020::2/Lease(sec)': '84522'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 dhcp snooping binding | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"MAC Address",title_value2="IPv6 Address",ago_colon_last_str=1)
    def dut_get_show_savi_ipv6_source_binding(self,show_info):
        """
        Function:show savi ipv6 source binding回显解析函数
        CLI命令:show savi ipv6 source binding
        回显信息示例:
eg2000d#show savi ipv6 source binding 
Total entries found: 1
No.    Ipv6 Address                             Mac Address    VLAN Interface Type    
------ ---------------------------------------- -------------- ---- --------- --------
1      2020::2                                  0000.0000.0001 20   Gi0/3     DHCPv6  
eg2000d#

        Returns:
{'0000.0000.0001/2020::2/No.': '1'
'Total entries found': '1'
'0000.0000.0001/2020::2/Interface': 'Gi0/3'
'Mac Address_list': ['0000.0000.0001/2020::2'], '0000.0000.0001/2020::2/Type': 'DHCPv6'
'0000.0000.0001/2020::2/VLAN': '20'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show savi ipv6 source binding | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Mac Address",title_value2="Ipv6 Address",ago_colon_last_str=1)
    def dut_get_show_ipv6_source_binding(self,show_info):
        """
        Function:show ipv6 source binding回显解析函数
        CLI命令:show ipv6 source binding
        回显信息示例:
eg2000d#show ipv6 source binding 
Total entries found: 1
No.    Ipv6 Address                             Mac Address    VLAN Interface Type    
------ ---------------------------------------- -------------- ---- --------- --------
1      2020::2                                  0000.0000.0001 20   Gi0/3     DHCPv6  
eg2000d#

        Returns:
{'0000.0000.0001/2020::2/No.': '1'
'Total entries found': '1'
'0000.0000.0001/2020::2/Interface': 'Gi0/3'
'Mac Address_list': ['0000.0000.0001/2020::2'], '0000.0000.0001/2020::2/Type': 'DHCPv6'
'0000.0000.0001/2020::2/VLAN': '20'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 source binding | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Mac Address",title_value2="Ipv6 Address",ago_colon_last_str=1)
    def dut_get_show_savi_ipv6_check_source(self,show_info):
        """
        Function:show savi ipv6 check source回显解析函数
        CLI命令:show savi ipv6 check source
        回显信息示例:
eg2000d#show savi ipv6 check source 
Total entries found: 1
No.    Ipv6 Address                             Mac Address    VLAN Interface Filter 
------ ---------------------------------------- -------------- ---- --------- -------
0      2020::2                                  0000.0000.0001 20   Gi0/3     IP+MAC 
eg2000d#

        Returns:
{'0000.0000.0001/2020::2/No.': '0'
'Total entries found': '1'
'0000.0000.0001/2020::2/Interface': 'Gi0/3'
'Mac Address_list': ['0000.0000.0001/2020::2'], '0000.0000.0001/2020::2/VLAN': '20'
'0000.0000.0001/2020::2/Filter': 'IP+MAC'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show savi ipv6 check source | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        if "Total entries found: 0" in show_info:
            dict_value={}
            dict_value["Total entries found"] = "0"
            return dict_value
        else:
            return self.dut_show_autoget_whippletree_form_analysis(show_info,"Mac Address",title_value2="Ipv6 Address",ago_colon_last_str=1)
    def dut_get_show_macaddresstable_share(self,show_info):
        """
        Function:show mac-address-table share回显解析函数
        CLI命令:show mac-address-table share
        回显信息示例:
57H_2012(config)#show mac-address-table share 
Vlan        MAC Address          Type     Interface                   Status
----------  -------------------- -------- --------------------------- -----------
   1        0010.9400.0002       DYNAMIC  GigabitEthernet 0/5             duplicated
   1        0010.9400.0003       DYNAMIC  GigabitEthernet 0/5             duplicated
   1        0010.9400.0004       DYNAMIC  GigabitEthernet 0/5             duplicated
   1        0010.9400.0005       DYNAMIC  GigabitEthernet 0/5             duplicated
   1        0010.9400.0006       DYNAMIC  GigabitEthernet 0/5             duplicated
   1        0010.9400.0007       DYNAMIC  GigabitEthernet 0/5             duplicated
   1        0010.9400.0008       DYNAMIC  GigabitEthernet 0/5             duplicated
   1        0010.9400.0009       DYNAMIC  GigabitEthernet 0/5             duplicated
   1        0010.9400.000a       DYNAMIC  GigabitEthernet 0/5             duplicated
   1        0010.9400.000b       DYNAMIC  GigabitEthernet 0/5             duplicated
   1        00d0.f8de.95ee       DYNAMIC  GigabitEthernet 0/5             duplicated
  10        0010.9400.0002       DYNAMIC  GigabitEthernet 0/5             original  
  10        0010.9400.0003       DYNAMIC  GigabitEthernet 0/5             original  
  10        0010.9400.0004       DYNAMIC  GigabitEthernet 0/5             original  
  10        0010.9400.0005       DYNAMIC  GigabitEthernet 0/5             original  
  10        0010.9400.0006       DYNAMIC  GigabitEthernet 0/5             original  
  10        0010.9400.0007       DYNAMIC  GigabitEthernet 0/5             original  
  10        0010.9400.0008       DYNAMIC  GigabitEthernet 0/5             original  
  10        0010.9400.0009       DYNAMIC  GigabitEthernet 0/5             original  
  10        0010.9400.000a       DYNAMIC  GigabitEthernet 0/5             original  
  10        0010.9400.000b       DYNAMIC  GigabitEthernet 0/5             original  
  10        00d0.f8de.95ee       DYNAMIC  GigabitEthernet 0/5             original  
 100        0010.9400.0002       DYNAMIC  GigabitEthernet 0/5             duplicated
 100        0010.9400.0003       DYNAMIC  GigabitEthernet 0/5             duplicated
 100        0010.9400.0004       DYNAMIC  GigabitEthernet 0/5             duplicated
 100        0010.9400.0005       DYNAMIC  GigabitEthernet 0/5             duplicated
 100        0010.9400.0006       DYNAMIC  GigabitEthernet 0/5             duplicated
 100        0010.9400.0007       DYNAMIC  GigabitEthernet 0/5             duplicated
 100        0010.9400.0008       DYNAMIC  GigabitEthernet 0/5             duplicated
 100        0010.9400.0009       DYNAMIC  GigabitEthernet 0/5             duplicated
 100        0010.9400.000a       DYNAMIC  GigabitEthernet 0/5             duplicated
 100        0010.9400.000b       DYNAMIC  GigabitEthernet 0/5             duplicated
 100        00d0.f8de.95ee       DYNAMIC  GigabitEthernet 0/5             duplicated
57H_2012(config)#

        Returns:
{'0010.9400.0002/Vlan': '100'
'0010.9400.000a/Interface': 'GigabitEthernet 0/5'
'0010.9400.0007/Vlan': '100'
'0010.9400.0008/Vlan': '100'
'0010.9400.0003/Status': 'duplicated'
'0010.9400.0005/Type': 'DYNAMIC'
'0010.9400.0009/Interface': 'GigabitEthernet 0/5'
'MAC Address_list': ['0010.9400.0002'
'0010.9400.0003'
'0010.9400.0004'
'0010.9400.0005'
'0010.9400.0006'
'0010.9400.0007'
'0010.9400.0008'
'0010.9400.0009'
'0010.9400.000a'
'0010.9400.000b'
'00d0.f8de.95ee'
'0010.9400.0002'
'0010.9400.0003'
'0010.9400.0004'
'0010.9400.0005'
'0010.9400.0006'
'0010.9400.0007'
'0010.9400.0008'
'0010.9400.0009'
'0010.9400.000a'
'0010.9400.000b'
'00d0.f8de.95ee'
'0010.9400.0002'
'0010.9400.0003'
'0010.9400.0004'
'0010.9400.0005'
'0010.9400.0006'
'0010.9400.0007'
'0010.9400.0008'
'0010.9400.0009'
'0010.9400.000a'
'0010.9400.000b'
'00d0.f8de.95ee'], '0010.9400.0005/Interface': 'GigabitEthernet 0/5'
'0010.9400.0002/Status': 'duplicated'
'0010.9400.0004/Vlan': '100'
'0010.9400.0007/Status': 'duplicated'
'0010.9400.0009/Type': 'DYNAMIC'
'0010.9400.0002/Type': 'DYNAMIC'
'0010.9400.0003/Interface': 'GigabitEthernet 0/5'
'00d0.f8de.95ee/Status': 'duplicated'
'0010.9400.000b/Status': 'duplicated'
'0010.9400.0008/Type': 'DYNAMIC'
'0010.9400.0002/Interface': 'GigabitEthernet 0/5'
'0010.9400.0007/Interface': 'GigabitEthernet 0/5'
'0010.9400.0003/Type': 'DYNAMIC'
'0010.9400.0004/Interface': 'GigabitEthernet 0/5'
'0010.9400.0005/Vlan': '100'
'0010.9400.0006/Interface': 'GigabitEthernet 0/5'
'0010.9400.000b/Interface': 'GigabitEthernet 0/5'
'0010.9400.0007/Type': 'DYNAMIC'
'0010.9400.0004/Status': 'duplicated'
'0010.9400.0009/Status': 'duplicated'
'0010.9400.000a/Type': 'DYNAMIC'
'0010.9400.0006/Type': 'DYNAMIC'
'0010.9400.000b/Vlan': '100'
'0010.9400.0004/Type': 'DYNAMIC'
'0010.9400.000a/Status': 'duplicated'
'0010.9400.0008/Status': 'duplicated'
'00d0.f8de.95ee/Interface': 'GigabitEthernet 0/5'
'0010.9400.000a/Vlan': '100'
'0010.9400.0006/Status': 'duplicated'
'0010.9400.0005/Status': 'duplicated'
'0010.9400.0008/Interface': 'GigabitEthernet 0/5'
'00d0.f8de.95ee/Vlan': '100'
'0010.9400.000b/Type': 'DYNAMIC'
'0010.9400.0006/Vlan': '100'
'0010.9400.0003/Vlan': '100'
'00d0.f8de.95ee/Type': 'DYNAMIC'
'0010.9400.0009/Vlan': '100'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mac-address-table share | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"MAC Address",ago_colon_last_str=1)
    def dut_get_show_dns_proxy_hosts(self,show_info):
        """
        Function:show dns proxy hosts回显解析函数
        CLI命令:show dns proxy hosts
        回显信息示例:
DUT1#show dns proxy hosts
proxy state: disable
Name servers are:
10.10.10.1

static host     max: 1024
static host   count: 2
cache domain    max: 5120
cache domain  count: 0
Host                                                             type            TTL(sec)        Address                                 
hostv4.com                                                       static          ---             10.10.1.1                               
hostv6.com                                                       static          ---             2001::1                                 
DUT1#

        Returns:
{'cache domain  count': '0'
'hostv4.com/Address': '10.10.1.1'
'Host_list': ['hostv4.com'
'hostv6.com'], 'static host   count': '2'
'proxy state': 'disable'
'cache domain    max': '5120'
'hostv4.com/type': 'static'
'static host     max': '1024'
'hostv6.com/Address': '2001::1'
'hostv6.com/TTL(sec)': '---'
'hostv4.com/TTL(sec)': '---'
'hostv6.com/type': 'static'
'Name servers are': ['10.10.10.1']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show dns proxy hosts | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        name_server_list=[]
        show_info_line = self.dut_get_start_show_info(show_info)
        for value in show_info_line:
            if "Name servers are" in value:
                name_server_list=[]
                continue
            elif "TTL" in value :
                dict_value["Name servers are"] = name_server_list
                break
            elif ":" in value :
                list1=value.split(":")
                dict_value[list1[0].strip()] = list1[1].strip()
            else:
                name_server_list.append(value.strip())
        star,end,show_len_list,show_info_list_line = self.dut_common_get_linelist(show_info,"Host")
        dict_value_2 = self.dut_show_autoget_form(star,end,"Host",show_len_list,show_info_list_line=show_info_list_line)
        dict_value_3 = dict(dict_value.items()+dict_value_2.items())
        return dict_value_3
    def dut_get_debug_scc_portinfo(self,show_info):
        """
        Function:debug scc portinfo回显解析函数
        CLI命令:debug scc portinfo
        回显信息示例:
eg2000d#debug scc portinfo

  G - Global ip+mac bind uplink port 
  S - Security channel uplink port 
  D - Dot1x authen status 
  W - Web authen status 
  T - dhcp Trust port 
  A - Arp check status 
  F - port Forwarding 
  L - port Learning 
  V - port violative 
  PORTCMD: 0x--------ff--                     V6_SGTRUST   |V4_SGTRUST|L3_WEB        |NLB_REFLECT| SPAN_PORT |ND_SNP     | ESC_EPORT
  PORTCMD: 0x----------ff   DHCPV6_SNPTRUST|DHCPV4_SNPTRUST| IP_SG    |G_IPMAC_EXCEPT| SEC_PORT  | WEB_AUTH  | 1X_CTRL   |  N/A
  APPFLAG: 0xff----------                                                                                                 IPGD_CP
  APPFLAG: 0x--ff--------       WEB_RD     |  DHCPV6_BIND  | DHCPBIND |LINKLOCAL     | FW_GROUP  | 1X_SY     |  DHCPV4_M |  IPOE 
  APPFLAG: 0x----ff------         RAUTH    |  DNS SNIF     |  L3_WEB  | WEB_BOTH     |  WEB_V6   | AP_ASSOC  |  APP_AUTH |USRMGMT
  APPFLAG: 0x------ff----      ADVERTISE   |   ARPTRUST    |  WEB_DP  |  1X_SU2      |BRI_STATIC | DIR_CHN   |CLOSE_LEARN|  ESC  
  APPFLAG: 0x--------ff--        V6COMP    |   V6STRICT    |  V6LOOSE |  V6COMP      |ND_SNP     | DHCPV6    |   DHCPV4  |  ARP  
  APPFLAG: 0x----------ff      GSN_IPMAC   |    V6SCG      |  V4SCG   |GBL_IPMAC     |  WEB_V4   |PORT_SECU  |   DOT1X   |  N/A  
 
 Port          App_flag        Port_cmd      Dft_flag bind Filter_tech  pm  1x_lmt  Authen_mode  Ps_lim  Author_lim  1x_author  GSDWTAFLV
 ------------  -------------- -------------- -------- ---- ----------- ---- ------  -----------  ------  ----------  ---------  ---------
 Global        0x000000004660 0x000000000000 0x000000 0x00 ModeNone    ---  380     0x0          128     0           0         ______FL_
 vlan 20       0x010000000000 0x000000000000 0x000000 0x00 ModeNone    ---  380     0x0          128     0           0         ______FL_
 Gi0/7         0x000000000000 0x000000000000 0x000000 0x00 ModeNone    ---  380     0x0          128     0           0         ______FL_
 Gi0/6         0x000000000000 0x000000000000 0x000000 0x00 ModeNone    ---  380     0x0          128     0           0         ______FL_
 Gi0/5         0x000000000000 0x000000000000 0x000000 0x00 ModeNone    ---  380     0x0          128     0           0         ______FL_
 Gi0/4         0x000000000000 0x000000000000 0x000000 0x00 ModeNone    ---  380     0x0          128     0           0         ______FL_
 Gi0/3         0x000000000000 0x000000000000 0x000000 0x00 ModeNone    ---  380     0x0          128     0           0         ______FL_
 Gi0/2         0x000000000000 0x000000000000 0x000000 0x00 ModeNone    ---  380     0x0          128     0           0         ______FL_
 Gi0/1         0x000000400000 0x000000006000 0x000000 0x00 ModeNone    ---  380     0x0          128     0           0         ____T_FL_
 ------------  -------------- -------------- -------- ---- ----------- ---- ------  -----------  ------  ----------  ---------  ---------

eg2000d#

        Returns:
{'Global/Filter_tech': 'ModeNone'
'Gi0/2/Filter_tech': 'ModeNone'
'Gi0/5/App_flag': '0x000000000000'
'Gi0/5/Author_lim': '0'
'vlan 20/Filter_tech': 'ModeNone'
'Global/App_flag': '0x000000004660'
'vlan 20/1x_lmt': '380'
'Global/Author_lim': '0'
'Gi0/7/App_flag': '0x000000000000'
'Gi0/4/Authen_mode': '0x0'
'Gi0/1/1x_lmt': '380'
'Gi0/3/Port_cmd': '0x000000000000'
'Gi0/4/bind': '0x00'
'Gi0/1/Dft_flag': '0x000000'
'Gi0/4/App_flag': '0x000000000000'
'Gi0/2/GSDWTAFLV': '______FL_'
'Gi0/6/1x_lmt': '380'
'Gi0/7/GSDWTAFLV': '______FL_'
'Gi0/6/GSDWTAFLV': '______FL_'
'Gi0/5/Dft_flag': '0x000000'
'Gi0/4/GSDWTAFLV': '______FL_'
'Gi0/3/Ps_lim': '128'
'Gi0/3/GSDWTAFLV': '______FL_'
'Gi0/5/bind': '0x00'
'Gi0/7/Authen_mode': '0x0'
'Gi0/4/1x_lmt': '380'
'Gi0/4/Ps_lim': '128'
'Gi0/6/pm': '---'
'Gi0/2/Author_lim': '0'
'Gi0/5/Port_cmd': '0x000000000000'
'Gi0/3/Authen_mode': '0x0'
'Gi0/4/1x_author': '0'
'Gi0/2/Dft_flag': '0x000000'
'Gi0/6/App_flag': '0x000000000000'
'Gi0/3/1x_author': '0'
'vlan 20/Ps_lim': '128'
'Global/bind': '0x00'
'Port_list': ['Global'
'vlan 20'
'Gi0/7'
'Gi0/6'
'Gi0/5'
'Gi0/4'
'Gi0/3'
'Gi0/2'
'Gi0/1'], 'vlan 20/pm': '---'
'Gi0/2/bind': '0x00'
'Gi0/7/1x_author': '0'
'Gi0/3/Filter_tech': 'ModeNone'
'Gi0/4/Dft_flag': '0x000000'
'Gi0/1/GSDWTAFLV': '____T_FL_'
'Gi0/3/pm': '---'
'Global/GSDWTAFLV': '______FL_'
'Gi0/7/Port_cmd': '0x000000000000'
'Gi0/6/Port_cmd': '0x000000000000'
'Gi0/4/Port_cmd': '0x000000000000'
'Gi0/1/1x_author': '0'
'Gi0/1/Author_lim': '0'
'Gi0/2/App_flag': '0x000000000000'
'Global/pm': '---'
'Gi0/6/Authen_mode': '0x0'
'Gi0/6/Ps_lim': '128'
'Global/Authen_mode': '0x0'
'Global/Dft_flag': '0x000000'
'vlan 20/GSDWTAFLV': '______FL_'
'Gi0/6/Filter_tech': 'ModeNone'
'Gi0/3/bind': '0x00'
'Gi0/7/1x_lmt': '380'
'Gi0/5/pm': '---'
'Global/1x_author': '0'
'Gi0/7/pm': '---'
'Gi0/4/pm': '---'
'vlan 20/Authen_mode': '0x0'
'vlan 20/App_flag': '0x010000000000'
'Gi0/3/App_flag': '0x000000000000'
'vlan 20/bind': '0x00'
'Gi0/6/Author_lim': '0'
'Gi0/2/Ps_lim': '128'
'Gi0/7/Author_lim': '0'
'Gi0/7/Dft_flag': '0x000000'
'Gi0/5/Authen_mode': '0x0'
'Gi0/3/Dft_flag': '0x000000'
'Gi0/1/pm': '---'
'Gi0/3/Author_lim': '0'
'Gi0/1/Port_cmd': '0x000000006000'
'Gi0/6/1x_author': '0'
'vlan 20/Author_lim': '0'
'Gi0/1/Authen_mode': '0x0'
'Gi0/4/Filter_tech': 'ModeNone'
'Gi0/5/1x_lmt': '380'
'Gi0/7/Ps_lim': '128'
'Gi0/5/GSDWTAFLV': '______FL_'
'Global/1x_lmt': '380'
'Gi0/5/1x_author': '0'
'Gi0/1/App_flag': '0x000000400000'
'Gi0/2/Port_cmd': '0x000000000000'
'vlan 20/1x_author': '0'
'Gi0/1/Filter_tech': 'ModeNone'
'Gi0/7/Filter_tech': 'ModeNone'
'Gi0/5/Ps_lim': '128'
'Gi0/1/Ps_lim': '128'
'Gi0/2/Authen_mode': '0x0'
'Gi0/5/Filter_tech': 'ModeNone'
'Gi0/1/bind': '0x00'
'vlan 20/Dft_flag': '0x000000'
'Global/Ps_lim': '128'
'Gi0/2/1x_author': '0'
'Global/Port_cmd': '0x000000000000'
'Gi0/3/1x_lmt': '380'
'vlan 20/Port_cmd': '0x000000000000'
'Gi0/2/1x_lmt': '380'
'Gi0/4/Author_lim': '0'
'Gi0/2/pm': '---'
'Gi0/7/bind': '0x00'
'Gi0/6/bind': '0x00'
'Gi0/6/Dft_flag': '0x000000'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=debug scc portinfo | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_list_line = self.dut_get_start_show_info(show_info)
        lenth =  len(show_list_line)
        for num in range(lenth):
            if "---" in show_list_line[num]:
                end_num = num
            if "App_flag" in show_list_line[num]:
                start_num = num
        show_list_line.remove(show_list_line[start_num+1])
        x_list = [15, 15, 15, 9, 5, 12, 5, 8, 13, 8, 12, 9, 32]
        return self.dut_show_autoget_form(start_num,end_num-1,"Port",x_list,show_list_line)
    def dut_get_show_qinq_termination(self,show_info):
        """
        Function:show qinq termination回显解析函数
        CLI命令:show qinq termination
        回显信息示例:
57H_2012(config)#show qinq termination 
CE-VLAN:    2 to 3
PE-VLAN:    3

57H_2012(config)#

        Returns:
{'CE-VLAN': '2 to 3'
'PE-VLAN': '3'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show qinq termination | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_debug_scc_user_auth(self, show_info):
        """
        Function:debug scc user author回显解析函数
        CLI命令:debug scc user author
        回显信息示例:
eg2000d#debug scc user author
    
[    port    ][  userport  ][extend_idx][hash_idx][vid][inner_vid][     mac      ][       ipv4       ][   app_flag   ][ sta_flag ][  user_type ][band][   owner  ][setup]
 ------------ ------------  ----------  --------  ---  ---------  --------------  ------------------  --------------  ----------  ------------  ----  ----------  -------- 
 ------------ ------------  ----------  --------  ---  ---------  --------------  ------------------  --------------  ----------  ------------  ----  ----------  -------- 
 All ipv4 bind user: 0

[    port    ][  userport  ][extend_idx][hash_idx][vid][inner_vid][     mac      ][       ipv6       ][   app_flag   ][ sta_flag ][  user_type ][band][   owner  ][setup]
 ------------ ------------  ----------  --------  ---  ---------  --------------  ------------------  --------------  ----------  ------------  ----  ----------  -------- 
[vlan 20     ][Gi0/3       ][0         ][389     ][20 ][0        ][0000.0001.0003][fe80::3           ][0x40      ][0x0       ][BindIpv6Mac ][0   ][savi      ][n-RK-------]
[vlan 20     ][Gi0/3       ][0         ][623     ][20 ][0        ][0000.0001.0001][2020::2           ][0x40      ][0x0       ][BindIpv6Mac ][0   ][savi      ][n-RK-------]
[vlan 20     ][Gi0/3       ][0         ][285     ][20 ][0        ][0000.0001.0001][fe80::1           ][0x40      ][0x0       ][BindIpv6Mac ][0   ][savi      ][n-RK-------]
[vlan 20     ][Gi0/1       ][0         ][262     ][20 ][0        ][5869.6c71.db3c][fe80::5a69:6cff:fe71:db3c][0x40      ][0x0       ][BindIpv6Mac ][0   ][savi      ][n-RK-------]
[vlan 20     ][Gi0/3       ][0         ][690     ][20 ][0        ][0000.0001.0005][fe80::5           ][0x40      ][0x0       ][BindIpv6Mac ][0   ][savi      ][n-RK-------]
[vlan 20     ][Gi0/3       ][0         ][678     ][20 ][0        ][0000.0001.0001][fe80::200:ff:fe01:1][0x40      ][0x0       ][BindIpv6Mac ][0   ][savi      ][n-RK-------]
[vlan 20     ][Gi0/3       ][0         ][193     ][20 ][0        ][0000.0001.0004][fe80::4           ][0x40      ][0x0       ][BindIpv6Mac ][0   ][savi      ][n-RK-------]
 ------------ ------------  ----------  --------  ---  ---------  --------------  ------------------  --------------  ----------  ------------  ----  ----------  -------- 
 All ipv6 bind user: 7

        Returns:
{"ipv6/0000.0001.0004/userport": "Gi0/3"
"ipv6/5869.6c71.db3c/band": "0"
"ipv6/5869.6c71.db3c/sta_flag": "0x0"
"ipv6/0000.0001.0004/extend_idx": "0"
"ipv6/0000.0001.0004/sta_flag": "0x0"
"ipv6/0000.0001.0001/user_type": "BindIpv6Mac"
"ipv6/0000.0001.0005/app_flag": "0x40"
"ipv6/0000.0001.0003/vid": "20"
"ipv6/0000.0001.0004/ipv6": "fe80::4"
"ipv6/0000.0001.0005/band": "0"
"ipv6/5869.6c71.db3c/app_flag": "0x40"
"ipv6/0000.0001.0004/port": "vlan 20"
"ipv6/0000.0001.0001/band": "0"
"ipv6/0000.0001.0001/setup": "n-RK-------"
"ipv6/0000.0001.0003/sta_flag": "0x0"
"ipv6/0000.0001.0005/owner": "savi"
"ipv6/5869.6c71.db3c/owner": "savi"
"ipv6/5869.6c71.db3c/userport": "Gi0/1"
"ipv6/5869.6c71.db3c/inner_vid": "0"
"ipv6/0000.0001.0003/app_flag": "0x40"
"ipv6/0000.0001.0005/sta_flag": "0x0"
"ipv6/0000.0001.0005/port": "vlan 20"
"ipv6/0000.0001.0004/user_type": "BindIpv6Mac"
"ipv6/0000.0001.0001/userport": "Gi0/3"
"ipv6/0000.0001.0003/userport": "Gi0/3"
"ipv6/0000.0001.0003/extend_idx": "0"
"ipv6/5869.6c71.db3c/hash_idx": "262"
"ipv6/0000.0001.0001/port": "vlan 20"
"ipv6/0000.0001.0001/app_flag": "0x40"
"ipv6/0000.0001.0001/owner": "savi"
"ipv6/0000.0001.0001/ipv6": "fe80::200:ff:fe01:1"
"ipv6/0000.0001.0001/hash_idx": "678"
"ipv6/0000.0001.0003/band": "0"
"ipv6/0000.0001.0004/app_flag": "0x40"
"ipv6/5869.6c71.db3c/port": "vlan 20"
"ipv6/0000.0001.0003/user_type": "BindIpv6Mac"
"ipv6/0000.0001.0003/hash_idx": "389"
"ipv6/0000.0001.0005/userport": "Gi0/3"
"ipv6/5869.6c71.db3c/extend_idx": "0"
"ipv6/0000.0001.0005/inner_vid": "0"
"All ipv4 bind user": "0"
"ipv6/0000.0001.0004/inner_vid": "0"
"ipv6/0000.0001.0005/user_type": "BindIpv6Mac"
"ipv6/5869.6c71.db3c/setup": "n-RK-------"
"ipv6/0000.0001.0005/hash_idx": "690"
"ipv6/0000.0001.0003/port": "vlan 20"
"ipv6/0000.0001.0005/extend_idx": "0"
"ipv6/5869.6c71.db3c/ipv6": "fe80::5a69:6cff:fe71:db3c"
"ipv6/0000.0001.0004/vid": "20"
"ipv6/0000.0001.0003/inner_vid": "0"
"ipv6/0000.0001.0004/setup": "n-RK-------"
"ipv6/0000.0001.0004/band": "0"
"ipv6/0000.0001.0005/vid": "20"
"ipv6/0000.0001.0001/sta_flag": "0x0"
"ipv6/0000.0001.0001/extend_idx": "0"
"ipv6/0000.0001.0003/owner": "savi"
"ipv6/0000.0001.0005/setup": "n-RK-------"
"ipv6/0000.0001.0001/inner_vid": "0"
"ipv6/0000.0001.0001/vid": "20"
"ipv6/0000.0001.0003/setup": "n-RK-------"
"ipv6/5869.6c71.db3c/vid": "20"
"ipv6/0000.0001.0004/hash_idx": "193"
"All ipv6 bind user": "7"
"ipv6/0000.0001.0005/ipv6": "fe80::5"
"ipv6/0000.0001.0003/ipv6": "fe80::3"
"ipv6/0000.0001.0004/owner": "savi"
"ipv6/5869.6c71.db3c/user_type": "BindIpv6Mac"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=debug scc user author | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value1 = {}  # 定义初始字典
        show_list_line = self.dut_get_start_show_info(show_info)
        show_line=[]
        for value in show_list_line:
            if "---- ----" in value or "debug scc user" in value:
                continue
            else:
                new_value = str(value).replace("]","  ").replace("[","  ").strip()
                show_line.append(new_value)
        for num  in range(len(show_line)):
            if "All ipv4 bind user:" in show_line[num]:
                list1 = show_line[num].split(":")
                dict_value1[list1[0].strip()] = list1[1].strip()
            elif "All ipv6 bind user:" in show_line[num]:
                list1 = show_line[num].split(":")
                dict_value1[list1[0].strip()] = list1[1].strip()
        show_info_new = "\n".join(show_line)
        dict_value2 = self.dut_show_autoget_blank_list(show_info_new,"ipv4","ipv4 bind user","mac",star_num_count_flag=1)
        dict_value3 = self.dut_show_autoget_blank_list(show_info_new,"ipv6","ipv6 bind user","mac",star_num_count_flag=1)
        return dict(dict_value1.items()+dict_value2.items()+dict_value3.items())
    def dut_get_show_aggregateport_loadbalance(self,show_info):
        """
        Function:show aggregatePort load-balance回显解析函数
        CLI命令:show aggregatePort load-balance
        回显信息示例:
6120_2011#show aggregatePort load-balance 
Load-balance     : Enhanced Profile
Algorithm mode
  current: 9,  default: 9 
6120_2011#

        Returns:
{'Algorithm mode/current': '9'
'Algorithm mode/default': '9'
'Load-balance': 'Enhanced Profile'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show aggregatePort load-balance | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        show_list_line = self.dut_get_start_show_info(show_info)
        if "Algorithm mode" not in show_info:
            for value in show_list_line:
                if ":" in value:
                    list3 = str(value).split(":")
                    dict_value[list3[0].strip()] = list3[1].strip()
            return dict_value
        else:
            for value in show_list_line:
                if "," in value and "Load-balance" not in value:
                    list1= value.split(",")
                    for value2 in list1:
                        if ":" in value2 :
                            list3 = value2.split(":")
                            dict_value[key+"/"+list3[0].strip()] = list3[1].strip()
                elif ":" in value:
                    list3 = str(value).split(":")
                    dict_value[list3[0].strip()] = list3[1].strip()
                else:
                    key=value.strip()
            return dict_value
    def dut_get_show_aggregateport_summary_inset(self,show_info):
        dict_value = {}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show agg.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')

        line_len = len (show_info_list_line)
        cut_flag = 0
        for cut_value in show_info_list_line :
            cut_flag = cut_flag+1
            if cut_value != "":
                if re.match(".*---.*",cut_value) :
                    cut_del = cut_flag
                    cut_value_list = cut_value.split()
                    col_len_list = []
                    for cut_value_list_value in cut_value_list:
                        col_len_list.append(len(cut_value_list_value)+1)
        show_info_list_line.remove(show_info_list_line[cut_del-1])

        #print col_len_list
        col_list_all_num = len(col_len_list)
        row_list_all_num = len(show_info_list_line)
        ##print col_list_all_num
        ##print row_list_all_num
        value_title="AggregatePort"
        address_list = []
        title_row =[]
        a = 0
        for i in range (0,line_len-1):    #line_len-1:上面删除“-----”这一行了
            ##print show_info_list_line[i]
            cut_star = 0
            cut_end=0
            col_value_list = []
            show_info_list_line[i] = show_info_list_line[i]
            ##print show_info_list_line[i]
            if show_info_list_line[i] != "" :
                for j in range(col_list_all_num):
                    cut_end = cut_end+int(col_len_list[j])
                    col_value = show_info_list_line[i][cut_star:cut_end]
                    cut_star = cut_end
                    col_value = col_value.lstrip()
                    col_value = col_value.rstrip()
                    col_value_list.append(col_value)
                #获取表头的列，用于组合
                ##print col_value_list
                title_col = col_value_list[0]          #需要变参的地方
                #print title_col
                if title_col==value_title:
                    title_row = col_value_list
                    # #print "99999999999"
                    # #print title_row
                elif title_col!=value_title:
                    #生成字典
                    if title_col != "" :
                        ##print "123"
                        if a == 1 :
                            #遍历列头右边的值
                            for s in range(1,len(new_list)):  #需要变参的地方
                                key_name = '%s/%s'%(new_list[0],title_row[s])
                                if s == len(new_list)-1 :
                                    port_list = []
                                    port_list = re.split(",",new_list[s].replace(" ",""))
                                    dict_value[key_name]=port_list
                                else:
                                    dict_value[key_name]=new_list[s]
                            ##print new_list
                            a = 0
                        if i == line_len-2 :   #如果最后一行为完整的
                            new_list = []
                            ##print len(col_value_list)
                            for list_1_num in range (len(col_value_list)):
                                #print col_value_list[list_1_num]
                                new_list.append(col_value_list[list_1_num])
                            for s in range(1,len(new_list)):  #遍历右边    需要变参的地方
                                key_name = '%s/%s'%(new_list[0],title_row[s])
                                if s == len(new_list)-1 :
                                    port_list = []
                                    port_list = re.split(",",new_list[s].replace(" ",""))
                                    dict_value[key_name]=port_list
                                else:
                                    dict_value[key_name]=new_list[s]
                        else:
                            a = 1
                            new_list = []
                            #print len(col_value_list)
                            for list_1_num in range (len(col_value_list)):
                                #print col_value_list[list_1_num]
                                new_list.append(col_value_list[list_1_num])
                    else:
                        ##print "456"
                        for list_1_num in range (len(col_value_list)):
                            #print new_list[list_1_num]
                            #print col_value_list[list_1_num]
                            if "/" in col_value_list[list_1_num] :    #**********************
                                new_list[list_1_num] =new_list[list_1_num]+","+col_value_list[list_1_num]
                            else:
                                new_list[list_1_num] =new_list[list_1_num]+col_value_list[list_1_num]
                        if i == line_len-2 :   #如果最后一行为不完整的
                            for s in range(1,len(new_list)):           #遍历右边    需要变参的地方
                                key_name = '%s/%s'%(new_list[0],title_row[s])
                                #print title_col,title_row[s]
                                if s == len(new_list)-1 :
                                    port_list = re.split(",",new_list[s].replace(" ",""))
                                    dict_value[key_name]=port_list
                                else:
                                    dict_value[key_name]=new_list[s]

        return dict_value
    def dut_get_show_aggregateport_summary(self,show_info):
        """
        Function:show aggregatePort summary回显解析函数
        CLI命令:show aggregatePort summary
        回显信息示例:
5848VAC#show aggregatePort summary 
AggregatePort MaxPorts SwitchPort Mode   Ports                              
------------- -------- ---------- ------ -----------------------------------
Ag1           32       Enabled    TRUNK  Gi1/0/1 ,Gi2/0/1 ,Gi3/0/1 
5848VAC#

        Returns:
{'Ag1/Mode': 'TRUNK'
'Ag1/SwitchPort': 'Enabled'
'AggregatePort_list': ['Ag1'], 'Ag1/MaxPorts': '32'
'Ag1/Ports': ['Gi1/0/1'
'Gi2/0/1'
'Gi3/0/1']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show aggregatePort summary | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value1 =  self.dut_show_autoget_whippletree_form_analysis(show_info,"AggregatePort")
        dict_value2 = self.dut_get_show_aggregateport_summary_inset(show_info)
        return dict(dict_value1.items()+dict_value2.items())
    def dut_get_show_interfaces_counters_rate_nozero(self,show_info):
        """
        Function:show interfaces counters rate nozero回显解析函数
        CLI命令:show interfaces counters rate nozero
        回显信息示例:
Ruijie#show interfaces counters rate nozero
Interface       Sampling Time         Input Rate           Input Rate           Output Rate          Output Rate
                                      (bits/sec)           (packets/sec)        (bits/sec)           (packets/sec)
--------------- --------------------- -------------------- -------------------- -------------------- --------------------
Gi0/2           5 seconds             2559932              4999                 0                    0                   
Gi0/3           5 seconds             0                    0                    2559932              4999

        Returns:
{"Gi0/2/Input Rate(bits/sec)": "2559932"
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interfaces counters rate nozero | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_interface_counters_rate(show_info)
    def dut_get_show_ipv6_dhcp_pool(self,show_info):
        """
        Function:show ipv6 dhcp pool回显解析函数
        CLI命令:show ipv6 dhcp pool
        回显信息示例:
DUT1#show ipv6 dhcp pool
DHCPv6 pool: DHCPv6-PD-Pool
  Prefix pool: DHCPv6-PD-Pool
             preferred lifetime 300, valid lifetime 300
  IANA address range: 2001::1/64 -> 2001::ffff:ffff:ffff:ffff/64
             preferred lifetime 300, valid lifetime 300
             excluded-address 2001::2 -> 2001::12
             excluded-address 2001::13 -> 2001::23
             excluded-address 2001::24 -> 2001::34
  DNS server: 2002::1
  Domain name: dhcpv6-Test
DHCPv6 pool: DHCPv6-PD-Pool2
  Prefix pool: DHCPv6-PD-Pool2
             preferred lifetime 300, valid lifetime 300
  IANA address range: 2001::1/64 -> 2001::ffff:ffff:ffff:ffff/64
             preferred lifetime 300, valid lifetime 300
             excluded-address 2001::24 -> 2001::34
  DNS server: 2003::1
  Domain name: dhcpv6-Test2
DUT1#

        Returns:
{'DHCPv6-PD-Pool2/Prefix pool/valid lifetime': '300'
'DHCPv6-PD-Pool2/DNS server': '2003::1'
'DHCPv6-PD-Pool2/Domain name': 'dhcpv6-Test2'
'DHCPv6-PD-Pool/Prefix pool/valid lifetime': '300'
'DHCPv6-PD-Pool/Prefix pool': 'DHCPv6-PD-Pool'
'DHCPv6-PD-Pool2/Prefix pool': 'DHCPv6-PD-Pool2'
'DHCPv6-PD-Pool/Domain name': 'dhcpv6-Test'
'DHCPv6-PD-Pool2/IANA address range': '2001::1/64 -> 2001::ffff:ffff:ffff:ffff/64'
'DHCPv6-PD-Pool/DNS server': '2002::1'
'DHCPv6-PD-Pool/IANA address range': '2001::1/64 -> 2001::ffff:ffff:ffff:ffff/64'
'DHCPv6-PD-Pool2/IANA address range_list': ['preferred lifetime 300, valid lifetime 300'
'excluded-address 2001::24 -> 2001::34'], 'DHCPv6-PD-Pool/IANA address range_list': ['preferred lifetime 300, valid lifetime 300'
'excluded-address 2001::2 -> 2001::12'
'excluded-address 2001::13 -> 2001::23'
'excluded-address 2001::24 -> 2001::34'], 'DHCPv6-PD-Pool/Prefix pool/preferred lifetime': '300'
'DHCPv6-PD-Pool2/Prefix pool/preferred lifetime': '300'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 dhcp pool | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_list_line = self.dut_get_start_show_info(show_info)
        range_list = []
        flag = 0
        flag_2 = 0
        for value in show_list_line:
            if "DHCPv6 pool:" in value :
                list1 = value.split(":")
                key1 = list1[1].strip()
            elif "Prefix pool:" in value:
                flag = 0
                list2 = value.split(": ")
                key2 = list2[0].strip()
                value2 = list2[1].strip()
                dict_value[key1+"/"+key2] = value2
            elif re.match("preferred lifetime \d+, valid lifetime \d+",value.strip()) and flag == 0:
                obj = re.match("preferred lifetime (\d+), valid lifetime (\d+)",value.strip())
                dict_value[key1+"/"+key2+"/"+"preferred lifetime"] = obj.group(1).strip()
                dict_value[key1+"/"+key2+"/"+"valid lifetime"] = obj.group(2).strip()
            elif "IANA address range:" in value:
                flag = 1
                flag_2 = 0
                list4 = value.split(": ")
                key4 = list4[0].strip()
                value4 = list4[1].strip()
                dict_value[key1+"/"+key4] = value4
                range_list = []
            elif ": " in value :
                if flag_2 == 0:
                    dict_value[key1+"/"+"IANA address range_list"] = range_list
                    range_list = []
                flag_2 = 1
                list3 = value.split(": ")
                key3 = list3[0].strip()
                value3 = list3[1].strip()
                dict_value[key1+"/"+key3] = value3
            else:
                range_list.append(value.strip())
        return dict_value
    def dut_get_show_ipv6_source_binding_stickymac(self,show_info):
        """
        Function:show ipv6 source binding sticky-mac回显解析函数
        CLI命令:show ipv6 source binding sticky-mac
        回显信息示例:
eg2000d#show ipv6 source binding sticky-mac 

Total number of bindings: 1 
NO.   MACADDRESS     VLAN  INTERFACE
----- -------------- ----- --------------------
1     0000.0001.0001 20    GigabitEthernet 0/3 
eg2000d#

        Returns:
{'Total number of bindings': '1'
'0000.0001.0001/NO.': '1'
'MACADDRESS_list': ['0000.0001.0001'], '0000.0001.0001/INTERFACE': 'GigabitEthernet 0/3'
'0000.0001.0001/VLAN': '20'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 source binding sticky-mac | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"MACADDRESS",ago_colon_last_str=1)
    def dut_get_show_interfaces_vlanmapping(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Ports","Destination-VID")
    def dut_get_show_spanningtree_summary(self,show_info):
        """
        Function:show spanning-tree summary回显解析函数
        CLI命令:show spanning-tree summary
        回显信息示例:
57H_2012(config)#show spanning-tree summary 

Spanning tree enabled protocol stp
  Root ID    Priority    32768
             Address     5869.6ce0.5ac0
             this bridge is root
             Hello Time   2 sec  Forward Delay 15 sec  Max Age 20 sec

  Bridge ID  Priority    32768
             Address     5869.6ce0.5ac0
             Hello Time   2 sec  Forward Delay 15 sec  Max Age 20 sec

Interface        Role Sts Cost       Prio     OperEdge Type
---------------- ---- --- ---------- -------- -------- ----------------
Gi0/5            Desg FWD 20000      128      False    P2p                             
Gi0/6            Desg FWD 20000      128      False    P2p                             

57H_2012(config)#

        Returns:
{'Gi0/6/Role': 'Desg'
'Gi0/6/Sts': 'FWD'
'Gi0/5/Cost': '20000'
'Bridge ID/Address': '5869.6ce0.5ac0'
'Gi0/6/Cost': '20000'
'Gi0/6/Type': 'P2p'
'Gi0/5/Prio': '128'
'Gi0/5/Sts': 'FWD'
'Root ID/Address': '5869.6ce0.5ac0'
'Gi0/6/Prio': '128'
'Gi0/5/Role': 'Desg'
'Root ID/Priority': '32768'
'Bridge ID/Priority': '32768'
'Gi0/5/Type': 'P2p'
'Interface_list': ['Gi0/5'
'Gi0/6'], 'Root ID/th': 'bridge'
'Gi0/5/OperEdge': 'False'
'Gi0/6/OperEdge': 'False'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show spanning-tree summary | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value1={}
        show_info_line = self.dut_get_start_show_info(show_info)
        for value in show_info_line:
            value = value.strip()
            if "Root ID" in value :
                key1 = "Root ID"
                list1 = value.split("Priority")
                dict_value1["Root ID/Priority"] = list1[1].strip()
            elif "Bridge ID" in value :
                key1 = "Bridge ID"
                list1 = value.split("Priority")
                dict_value1["Bridge ID/Priority"] = list1[1].strip()
            elif "Address" in value:
                list1 = value.split()
                dict_value1[key1+"/Address"] = list1[1].strip()
            elif "bridge is" in value :
                list1 = value.split("is")
                dict_value1[key1+"/"+list1[0].strip()] = list1[1].strip()
            elif re.match("Hello Time   (\d+) sec  Forward Delay (\d+) sec  Max Age (\d) sec",value):
                obj = re.match("Hello Time   (\d+) sec  Forward Delay (\d+) sec  Max Age (\d) sec",value)
                dict_value1[key1+"/"+"Hello Time"] = obj.group(1).strip()
                dict_value1[key1+"/"+"Forward Delay"] = obj.group(2).strip()
                dict_value1[key1+"/"+"Max Age"] = obj.group(3).strip()
        dict_value2 = self.dut_show_autoget_whippletree_form_analysis(show_info,"Interface")
        return dict(dict_value1.items()+dict_value2.items())
    def dut_get_show_lldp_localinformation_interface_dutport(self,show_info):
        """
        Function:show lldp local-information interface <dutport>回显解析函数
        CLI命令:show lldp local-information interface <dutport>
        回显信息示例:
Ruijie(config)#show lldp local-information interface gigabitEthernet 3/9 
----------------------------------------------------------------------------
LLDP local-information of port [GigabitEthernet 3/9]
----------------------------------------------------------------------------
  Port ID type                      : Interface name
  Port ID                           : Gi3/9
  Port description                  : GigabitEthernet 3/9

  Management address subtype        : ipv4
  Management address                : 127.0.0.1
  Interface numbering subtype       : ifIndex
  Interface number                  : 9
  Object identifier                 : 


  802.1 organizationally information
  Port VLAN ID                      : 1
  Port and protocol VLAN ID(PPVID)  : 0
      PPVID Supported               : NO
      PPVID Enabled                 : NO
  VLAN name of VLAN 1               : VLAN0001
  Protocol Identity                 : 


  802.3 organizationally information
  Auto-negotiation supported        : NO
  Auto-negotiation enabled          : NO
  PMD auto-negotiation advertised   : 
  Operational MAU type              : Duplex(Auto)
  PoE support                       : NO
  Link aggregation supported        : YES
  Link aggregation enabled          : NO
  Aggregation port ID               : 0
  Maximum frame Size                : 1500

  LLDP-MED organizationally information
  Power-via-MDI device type         : 
  Power-via-MDI power source        : 
  Power-via-MDI power priority      : 
  Power-via-MDI power value         : 0 Watts
Ruijie(config)#

        Returns:
{'Power-via-MDI device type': ''
'Maximum frame Size': '1500'
'VLAN name of VLAN 1': 'VLAN0001'
'Interface number': '9'
'Operational MAU type': 'Duplex(Auto)'
'Link aggregation supported': 'YES'
'PPVID Enabled': 'NO'
'Port VLAN ID': '1'
'Interface numbering subtype': 'ifIndex'
'Power-via-MDI power value': '0 Watts'
'Link aggregation enabled': 'NO'
'Auto-negotiation supported': 'NO'
'PMD auto-negotiation advertised': ''
'Port description': 'GigabitEthernet 3/9'
'Port ID': 'Gi3/9'
'Port and protocol VLAN ID(PPVID)': '0'
'Power-via-MDI power source': ''
'Management address subtype': 'ipv4'
'Port ID type': 'Interface name'
'Management address': '127.0.0.1'
'Power-via-MDI power priority': ''
'Auto-negotiation enabled': 'NO'
'PoE support': 'NO'
'PPVID Supported': 'NO'
'Object identifier': ''
'Protocol Identity': ''
'Aggregation port ID': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show lldp local-information interface <dutport> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_lldp_neighbors(self,show_info):
        """
        Function:show lldp neighbors回显解析函数
        CLI命令:show lldp neighbors
        回显信息示例:
Ruijie#show lldp neighbors
Capability codes:
    (R) Router, (B) Bridge, (T) Telephone, (C) DOCSIS Cable Device
    (W) WLAN Access Point, (P) Repeater, (S) Station, (O) Other
System Name                 Local Intf          Port ID                     Capability   Aging-time
Ruijie                      Gi1/0/1             GigabitEthernet 0/33        P, B, R      1minutes 53seconds 

Total entries displayed: 1

        Returns:
{'Gi1/0/1/Aging-time': '1minutes 53seconds'
'Local Intf_list': ['Gi1/0/1'], 'Total entries displayed': '1'
'Gi1/0/1/System Name': 'Ruijie'
'Gi1/0/1/Capability': 'P, B, R'
'Gi1/0/1/Port ID': 'GigabitEthernet 0/33'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show lldp neighbors | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value1 = {}
        show_line_list =self.dut_get_start_show_info(show_info)
        for value in show_line_list:
            if "entries displayed" in value:
                list1 = value.split(":")
                dict_value1[list1[0].strip()] = list1[1].strip()
        dict_value2 = self.dut_show_autoget_blank_list(show_info,"Local Intf","entries displayed")
        return dict(dict_value1.items()+dict_value2.items())
    def dut_get_show_lldp_status(self,show_info):                          #函数名由锐捷提供
        """
        Function:show lldp  status回显解析函数
        CLI命令:show lldp  status
        回显信息示例:
Dut2#show lldp  status 
Global status of LLDP                  : Enable
Neighbor information last changed time : 6days 40minutes 47seconds 
Transmit interval                      : 30s
Hold multiplier                        : 4
Reinit delay                           : 2s
Transmit delay                         : 2s
Notification interval                  : 5s
Fast start counts                      : 3
----------------------------------------------------------------------------
Port [TenGigabitEthernet 0/1]
----------------------------------------------------------------------------
Port status of LLDP             : Enable
Port state                      : DOWN
Port encapsulation              : Ethernet II
Operational mode                : RxAndTx
Notification enable             : NO
Error detect enable             : YES
Number of neighbors             : 0
Number of MED neighbors         : 0
----------------------------------------------------------------------------

        Returns:
Gi0/3/Input Rate(packets/sec): "0"
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show lldp  status | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_line_list = self.dut_get_start_show_info(show_info)
        flag = 0
        port_list = []
        for value in show_line_list:
            value = value.strip()
            if re.match("Port \[(.*)\]",value):
                flag = 1
                obj1 = re.match("Port \[(.*)\]",value)
                key1 = obj1.group(1).strip()
                port_list.append(key1)
            if flag == 0 :
                if ":" in value :
                    list1 = value.split(":")
                    dict_value[list1[0].strip()] = list1[1].strip()
            else:
                if ":" in value:
                    list2 = value.split(":")
                    dict_value[key1+"/"+list2[0].strip()] = list2[1].strip()
        dict_value["port_list"] = port_list
        return dict_value
    def dut_get_show_lldp_status_interface_dutport(self,show_info):
        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_dir_tmp(self,show_info):
        show_info=show_info.replace("\t","  ")
        star_table,end_table,table_title,whippletree_list_1,show_info_list_line = self.dut_show_return_for_dut_show_autoget_form(show_info,"Name","directories")
        return self.dut_show_autoget_form(star_table,end_table,table_title,whippletree_list_1,show_info_list_line)
    def dut_get_show_lldp_neighbors_interface_dutport(self,show_info):
        return self.dut_get_show_lldp_neighbors(show_info)
    def dut_get_show_isis_neighbor(self,show_info):
        """
        Function:show isis neighbors回显解析函数
        CLI命令:show isis neighbors
        回显信息示例:
6000C#show isis neighbors 

Area (null):
System Id       Type  IP Address        State   Holdtime  Circuit            Interface                 
57-H            L1    20.1.1.2          Up      27        6000C.02           GigabitEthernet 0/2       
                L2    20.1.1.2          Up      27        6000C.02           GigabitEthernet 0/2

        Returns:
{"20.1.1.2/L2/Circuit": "6000C.02"
"20.1.1.2/L1/Interface": "GigabitEthernet 0/2"
"20.1.1.2/L1/Holdtime": "27"
"20.1.1.2/L1/State": "Up"
"20.1.1.2/L2/Type": "L2"
"20.1.1.2/L1/Type": "L1"
"20.1.1.2/L2/System Id": "57-H"
"20.1.1.2/L2/Holdtime": "27"
"20.1.1.2/L2/IP Address": "20.1.1.2"
"20.1.1.2/L2/State": "Up"
"20.1.1.2/L1/System Id": "57-H"
"20.1.1.2/L1/Circuit": "6000C.02"
"20.1.1.2/L2/Interface": "GigabitEthernet 0/2"
"20.1.1.2/L1/IP Address": "20.1.1.2"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show isis neighbors | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for i in range(len(show_info_split)):
            show_info_split[i].strip()
        while '' in show_info_split:
            show_info_split.remove('')
        for i in range(len(show_info_split)):
            if re.match(r'^Syste',show_info_split[i]):
                t1 = show_info_split[i].split('  ')
                for j in range(len(t1)):
                    t1[j] = t1[j].strip()
                while '' in t1:
                    t1.remove('')
                continue
            t2 = show_info_split[i].split('  ')
            for k in range(len(t2)):
                t2[k] = t2[k].strip()
            while '' in t2:
                t2.remove('')

            for kk in range(len(t2)):
                if len(t2) == 6:
                    if kk == 0:
                        key1 = t2[5] + '/' + t2[1] + '/' + t1[kk]
                        value = t2[kk]
                        dict_value[key1] = value
                        bak_sys = t2[0]
                    if kk > 1:
                        key1 = t2[5] + '/' + t2[1] + '/' + t1[kk+1]
                        value = t2[kk]
                        dict_value[key1] = value
                        bak_sys = t2[0]
                if len(t2) == 5:
                    if kk == 0:
                        key2 = t2[4] + '/' + t2[0] + '/' + t1[kk]
                        dict_value[key2] = bak_sys
                        #dict_value[t2[1] + '/' + t2[0] + '/' + t1[0]] = bak_sys
                    if kk > 0:
                        key2 = t2[4] + '/' + t2[0] + '/' + t1[kk+2]
                        value = t2[kk]
                        dict_value[key2] = value
                        #dict_value[t2[1] + '/' + t2[0] + '/' + t1[0]] = bak_sys
        return dict_value
    def dut_get_show_mac_share(self,show_info):
        """
        Function:show mac share回显解析函数
        CLI命令:show mac share
        回显信息示例:
Ruijie(config)#show mac share 
Vlan        MAC Address          Type     Interface                   Status
----------  -------------------- -------- --------------------------- -----------
   1        0010.9400.0002       DYNAMIC  GigabitEthernet 0/5             duplicated
   1        0010.9400.0003       DYNAMIC  GigabitEthernet 0/5             duplicated
   1        0010.9400.0004       DYNAMIC  GigabitEthernet 0/5             duplicated
   1        0010.9400.0005       DYNAMIC  GigabitEthernet 0/5             duplicated
   1        0010.9400.0006       DYNAMIC  GigabitEthernet 0/5             duplicated
   1        0010.9400.0007       DYNAMIC  GigabitEthernet 0/5             duplicated
   1        0010.9400.0008       DYNAMIC  GigabitEthernet 0/5             duplicated
   1        0010.9400.0009       DYNAMIC  GigabitEthernet 0/5             duplicated
   1        0010.9400.000a       DYNAMIC  GigabitEthernet 0/5             duplicated
   1        0010.9400.000b       DYNAMIC  GigabitEthernet 0/5             duplicated
  10        0010.9400.0002       DYNAMIC  GigabitEthernet 0/5             original  
  10        0010.9400.0003       DYNAMIC  GigabitEthernet 0/5             original  
  10        0010.9400.0004       DYNAMIC  GigabitEthernet 0/5             original  
  10        0010.9400.0005       DYNAMIC  GigabitEthernet 0/5             original  
  10        0010.9400.0006       DYNAMIC  GigabitEthernet 0/5             original  
  10        0010.9400.0007       DYNAMIC  GigabitEthernet 0/5             original  
  10        0010.9400.0008       DYNAMIC  GigabitEthernet 0/5             original  
  10        0010.9400.0009       DYNAMIC  GigabitEthernet 0/5             original  
  10        0010.9400.000a       DYNAMIC  GigabitEthernet 0/5             original  
  10        0010.9400.000b       DYNAMIC  GigabitEthernet 0/5             original  
 100        0010.9400.0002       DYNAMIC  GigabitEthernet 0/5             duplicated
 100        0010.9400.0003       DYNAMIC  GigabitEthernet 0/5             duplicated
 100        0010.9400.0004       DYNAMIC  GigabitEthernet 0/5             duplicated
 100        0010.9400.0005       DYNAMIC  GigabitEthernet 0/5             duplicated
 100        0010.9400.0006       DYNAMIC  GigabitEthernet 0/5             duplicated
 100        0010.9400.0007       DYNAMIC  GigabitEthernet 0/5             duplicated
 100        0010.9400.0008       DYNAMIC  GigabitEthernet 0/5             duplicated
 100        0010.9400.0009       DYNAMIC  GigabitEthernet 0/5             duplicated
 100        0010.9400.000a       DYNAMIC  GigabitEthernet 0/5             duplicated
 100        0010.9400.000b       DYNAMIC  GigabitEthernet 0/5             duplicated
Ruijie(config)#

        Returns:
{'0010.9400.0002/Vlan': '100'
'0010.9400.000a/Interface': 'GigabitEthernet 0/5'
'0010.9400.0007/Vlan': '100'
'0010.9400.0008/Vlan': '100'
'0010.9400.0003/Status': 'duplicated'
'0010.9400.0005/Type': 'DYNAMIC'
'0010.9400.0009/Interface': 'GigabitEthernet 0/5'
'MAC Address_list': ['0010.9400.0002'
'0010.9400.0003'
'0010.9400.0004'
'0010.9400.0005'
'0010.9400.0006'
'0010.9400.0007'
'0010.9400.0008'
'0010.9400.0009'
'0010.9400.000a'
'0010.9400.000b'
'0010.9400.0002'
'0010.9400.0003'
'0010.9400.0004'
'0010.9400.0005'
'0010.9400.0006'
'0010.9400.0007'
'0010.9400.0008'
'0010.9400.0009'
'0010.9400.000a'
'0010.9400.000b'
'0010.9400.0002'
'0010.9400.0003'
'0010.9400.0004'
'0010.9400.0005'
'0010.9400.0006'
'0010.9400.0007'
'0010.9400.0008'
'0010.9400.0009'
'0010.9400.000a'
'0010.9400.000b'], '0010.9400.0005/Interface': 'GigabitEthernet 0/5'
'0010.9400.0002/Status': 'duplicated'
'0010.9400.0004/Vlan': '100'
'0010.9400.0007/Status': 'duplicated'
'0010.9400.0009/Type': 'DYNAMIC'
'0010.9400.0002/Type': 'DYNAMIC'
'0010.9400.0003/Interface': 'GigabitEthernet 0/5'
'0010.9400.000b/Status': 'duplicated'
'0010.9400.0008/Type': 'DYNAMIC'
'0010.9400.0002/Interface': 'GigabitEthernet 0/5'
'0010.9400.0007/Interface': 'GigabitEthernet 0/5'
'0010.9400.0003/Type': 'DYNAMIC'
'0010.9400.0004/Interface': 'GigabitEthernet 0/5'
'0010.9400.0005/Vlan': '100'
'0010.9400.0006/Interface': 'GigabitEthernet 0/5'
'0010.9400.000b/Interface': 'GigabitEthernet 0/5'
'0010.9400.0007/Type': 'DYNAMIC'
'0010.9400.0004/Status': 'duplicated'
'0010.9400.0009/Status': 'duplicated'
'0010.9400.000a/Type': 'DYNAMIC'
'0010.9400.0006/Type': 'DYNAMIC'
'0010.9400.000b/Vlan': '100'
'0010.9400.0004/Type': 'DYNAMIC'
'0010.9400.000a/Status': 'duplicated'
'0010.9400.0008/Status': 'duplicated'
'0010.9400.000a/Vlan': '100'
'0010.9400.0006/Status': 'duplicated'
'0010.9400.0005/Status': 'duplicated'
'0010.9400.0008/Interface': 'GigabitEthernet 0/5'
'0010.9400.000b/Type': 'DYNAMIC'
'0010.9400.0006/Vlan': '100'
'0010.9400.0003/Vlan': '100'
'0010.9400.0009/Vlan': '100'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mac share | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"MAC Address")
    def dut_get_show_memory_lowwatermark(self,show_info):
        """
        Function:show memory low-watermark回显解析函数
        CLI命令:show memory low-watermark
        回显信息示例:
Ruijie#show memory low-watermark 
Current memory low-watermark is 90%
Current state: below low-watermark
Ruijie#

        Returns:
{'Current state': 'below low-watermark'
'Current memory low-watermark': '90'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show memory low-watermark | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value ={}
        show_list = show_info.split("\n")
        for value in show_list:
            if "is" in value:
                list1 = value.split("is")
                dict_value[list1[0].strip()]=list1[1].strip().strip("%")
            elif ":" in value:
                list1 = value.split(":")
                dict_value[list1[0].strip()]=list1[1].strip()
        return dict_value
    def dut_get_show_vrf(self,show_info):
        """
        Function:show vrf回显解析函数
        CLI命令:show vrf
        回显信息示例:
57H_2013#show vrf 
Name                             Default RD                 Protocol(s)     Interface
vrf1                             <not set>                  ipv4,ipv6       <none>
vrf2                             <not set>                  ipv6            <none>
vrf3                             <not set>                  ipv4            <none>
57H_2013#

        Returns:
{'vrf3/Default RD': '<not set>'
'vrf1/Default RD': '<not set>'
'vrf2/Interface': '<none>'
'vrf3/Protocol(s)': 'ipv4'
'vrf1/Interface': '<none>'
'vrf1/Protocol(s)': 'ipv4,ipv6'
'Name_list': ['vrf1'
'vrf2'
'vrf3'], 'vrf3/Interface': '<none>'
'vrf2/Default RD': '<not set>'
'vrf2/Protocol(s)': 'ipv6'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show vrf | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_blank_list(show_info,"Name")
    def dut_get_show_mpls_forwardingtable(self,show_info):
        """
        Function:show mpls forwarding-table回显解析函数
        CLI命令:show mpls forwarding-table
        回显信息示例:
fig)#show mpls forwarding-table 

Label Operation Code:
PH--PUSH label
PP--POP label
SW--SWAP label
SP--SWAP topmost label and push new label
DP--DROP packet
PC--POP label and continue lookup by IP or Label
PI--POP label and do ip lookup forward
PN--POP label and forward to nexthop
PM--POP label and do MAC lookup forward
PV--POP label and output to VC attach interface
IP--IP lookup forward
 s--stale
  Local   Outgoing OP FEC                         Outgoing         Nexthop        
  label   label                                   interface  
  --      imp-null PH 1.1.1.1/32                  Te2/2            11.1.1.2       
  --      9217     PH 3.3.3.3/32                  Te2/2            11.1.1.2       
  --      9219     PH 20.1.1.0/24                 Te2/2            11.1.1.2       
  --      imp-null PH 21.1.1.0/24                 Te2/2            11.1.1.2       
  --      9230     PH 102.0.0.0/24                Te2/2            11.1.1.2       
  --      9231     PH 102.0.1.0/24                Te2/2            11.1.1.2       
  --      9232     PH 102.0.2.0/24                Te2/2            11.1.1.2       
  --      9233     PH 102.0.3.0/24                Te2/2            11.1.1.2       
  --      9235     PH 102.0.5.0/24                Te2/2            11.1.1.2       
  --      9236     PH 102.0.6.0/24                Te2/2            11.1.1.2       
  --      9237     PH 102.0.7.0/24                Te2/2            11.1.1.2       
  --      9238     PH 102.0.8.0/24                Te2/2            11.1.1.2       
  --      9239     PH 102.0.9.0/24                Te2/2            11.1.1.2       
  29696   --       PI 101.0.0.0/24                Te2/47           10.1.1.2

        Returns:
{"21.1.1.0/24/Local_label": "--"
"20.1.1.0/24/Nexthop": "11.1.1.2"
"102.0.2.0/24/Outgoing_label": "9232"
"102.0.6.0/24/Outgoing_label": "9236"
"3.3.3.3/32/Outgoing": "Te2/2"
"21.1.1.0/24/OP": "PH"
"102.0.8.0/24/Nexthop": "11.1.1.2"
"102.0.3.0/24/Outgoing_label": "9233"
"102.0.9.0/24/Local_label": "--"
"3.3.3.3/32/Local_label": "--"
"102.0.5.0/24/Local_label": "--"
"20.1.1.0/24/Outgoing_label": "9219"
"3.3.3.3/32/OP": "PH"
"102.0.1.0/24/Local_label": "--"
"21.1.1.0/24/Outgoing": "Te2/2"
"20.1.1.0/24/Local_label": "--"
"102.0.7.0/24/Outgoing": "Te2/2"
"20.1.1.0/24/OP": "PH"
"101.0.0.0/24/Nexthop": "10.1.1.2"
"102.0.3.0/24/Nexthop": "11.1.1.2"
"102.0.8.0/24/Outgoing_label": "9238"
"21.1.1.0/24/Nexthop": "11.1.1.2"
"102.0.5.0/24/Outgoing_label": "9235"
"1.1.1.1/32/Outgoing": "Te2/2"
"102.0.6.0/24/Nexthop": "11.1.1.2"
"1.1.1.1/32/Outgoing_label": "imp-null"
"1.1.1.1/32/OP": "PH"
"102.0.1.0/24/Outgoing": "Te2/2"
"102.0.9.0/24/Nexthop": "11.1.1.2"
"102.0.9.0/24/Outgoing_label": "9239"
"102.0.2.0/24/Local_label": "--"
"3.3.3.3/32/Nexthop": "11.1.1.2"
"102.0.0.0/24/Outgoing_label": "9230"
"102.0.5.0/24/OP": "PH"
"102.0.7.0/24/Local_label": "--"
"102.0.2.0/24/OP": "PH"
"102.0.7.0/24/Nexthop": "11.1.1.2"
"101.0.0.0/24/Local_label": "29696"
"102.0.2.0/24/Nexthop": "11.1.1.2"
"20.1.1.0/24/Outgoing": "Te2/2"
"102.0.3.0/24/Local_label": "--"
"102.0.9.0/24/OP": "PH"
"102.0.6.0/24/Outgoing": "Te2/2"
"102.0.8.0/24/Outgoing": "Te2/2"
"101.0.0.0/24/OP": "PI"
"1.1.1.1/32/Nexthop": "11.1.1.2"
"102.0.7.0/24/Outgoing_label": "9237"
"101.0.0.0/24/Outgoing": "Te2/47"
"102.0.0.0/24/OP": "PH"
"3.3.3.3/32/Outgoing_label": "9217"
"102.0.1.0/24/Outgoing_label": "9231"
"102.0.5.0/24/Nexthop": "11.1.1.2"
"102.0.8.0/24/OP": "PH"
"102.0.3.0/24/Outgoing": "Te2/2"
"102.0.1.0/24/OP": "PH"
"102.0.2.0/24/Outgoing": "Te2/2"
"102.0.0.0/24/Outgoing": "Te2/2"
"101.0.0.0/24/Outgoing_label": "--"
"21.1.1.0/24/Outgoing_label": "imp-null"
"102.0.9.0/24/Outgoing": "Te2/2"
"102.0.7.0/24/OP": "PH"
"102.0.0.0/24/Local_label": "--"
"1.1.1.1/32/Local_label": "--"
"102.0.3.0/24/OP": "PH"
"102.0.5.0/24/Outgoing": "Te2/2"
"102.0.6.0/24/OP": "PH"
"102.0.8.0/24/Local_label": "--"
"102.0.6.0/24/Local_label": "--"
"102.0.1.0/24/Nexthop": "11.1.1.2"
"FEC_list": ["1.1.1.1/32"
"3.3.3.3/32"
"20.1.1.0/24"
"21.1.1.0/24"
"102.0.0.0/24"
"102.0.1.0/24"
"102.0.2.0/24"
"102.0.3.0/24"
"102.0.5.0/24"
"102.0.6.0/24"
"102.0.7.0/24"
"102.0.8.0/24"
"102.0.9.0/24"
"101.0.0.0/24"], "102.0.0.0/24/Nexthop": "11.1.1.2"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mpls forwarding-table | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = show_info.split("\n")
        show_info_list1 = []
        show_info_list1.append("Local_label   Outgoing_label  OP FEC                         Outgoing         Nexthop")
        flag = 0
        for value in show_info_list:
            if "Outgoing" in value:
                flag = flag + 1
                continue
            if flag > 1 :
                show_info_list1.append(value)
            if flag > 0:
                flag = flag + 1

        show_info = "\n".join(show_info_list1)
        print show_info
        return self.dut_show_autoget_blank_list(show_info,"FEC",split_one=1)
    def dut_get_show_mpls_ldp_neighbor(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        flag = 0
        flag2 = 0
        for value in show_info_list:
            value =value.strip()
            if re.match("(Targeted Hello \d+\.\d+\.\d+\.\d+) -> (\d+\.\d+\.\d+\.\d+), (\S+);", value.strip()):
                obj_1 = re.match("(Targeted Hello \d+\.\d+\.\d+\.\d+) -> (\d+\.\d+\.\d+\.\d+), (\S+);", value.strip())
                dict_value[key1 + "/" + obj_1.group(1).strip()] = obj_1.group(2).strip()
                dict_value[key1 + "/" + obj_1.group(1).strip() + "/status"] = obj_1.group(3).strip()
            if ";" in value:
                if flag2 == 2:
                    dict_value[key1+"/"+"Addresses bound to peer LDP Ident"] = addr_list
                    addr_list=[]
                flag = 0
                list1 = value.split(";")
                for value_list1 in list1:
                    if ":" in value_list1:
                        list2 = value_list1.split(":",1)
                        if "Peer LDP Ident" in value_list1 or re.match("LDP Ident:.*",value_list1):
                            key1 = list2[1].strip()
                        else:
                            dict_value[key1+"/"+list2[0].strip()] = list2[1].strip()
            elif "," in value:
                list1 = value.split(",")
                for value_list1 in list1:
                    if ":" in value_list1:
                        list2 = value_list1.split(":",1)
                        dict_value[key1+"/"+list2[0].strip()] = list2[1].strip()
                    elif "Link Peer on" in value_list1 :
                        list3 = value_list1.split("on")
                        dict_value[key1+"/"+"Link Peer on"] = list3[1].strip()
                if re.match("Link Peer on (.*), Src IP addr: (.*)",value.strip()):
                    obj_1 = re.match("Link Peer on (.*), Src IP addr: (.*)",value.strip())
                    dict_value[key1+"/"+obj_1.group(1).strip()] = obj_1.group(2).strip()
            elif ":" in value:
                if "Addresses bound to peer LDP Ident" in value:
                    addr_list = []
                    flag = 1
                    continue
                else:
                    if "Default VRF" in value or re.match("VRF \S+\(id \d+\):",value.strip()) or "global-vrf" in value:
                        continue
                    list2 = value.split(":",1)
                    dict_value[key1+"/"+list2[0].strip()] = list2[1].strip()
            if flag ==1 :
                list4 = value.split()
                for value_list4 in list4:
                    addr_list.append(value_list4)
                flag2 =2
        if flag2 == 2:
            dict_value[key1+"/"+"Addresses bound to peer LDP Ident"] = addr_list
        return dict_value
    def dut_get_show_accesscontrol_packet_statistics(self,show_info):
        """
        Function:show access-control packet statistics回显解析函数
        CLI命令:show access-control packet statistics
        回显信息示例:
Ruijie#show access-control packet statistics 
Interface      Passed              Discard
------------   -----------------   -----------------
Invalid interface index 521.
Invalid interface index 520.
 VLAN 20        0                   0                
 Gi0/7          0                   0                
 Gi0/6          0                   0                
 Gi0/5          0                   0                
 Gi0/4          0                   0                
 Gi0/3          0                   0                
 Gi0/2          0                   0                
 Gi0/1          0                   0                
Ruijie#

        Returns:
{'Gi0/3/Passed': '0'
'Gi0/2/Passed': '0'
'Gi0/4/Discard': '0'
'Gi0/4/Passed': '0'
'Gi0/1/Discard': '0'
'Gi0/5/Discard': '0'
'Gi0/5/Passed': '0'
'Gi0/7/Discard': '0'
'Gi0/6/Passed': '0'
'VLAN 20/Discard': '0'
'Gi0/7/Passed': '0'
'Gi0/3/Discard': '0'
'Gi0/2/Discard': '0'
'Interface_list': ['VLAN 20'
'Gi0/7'
'Gi0/6'
'Gi0/5'
'Gi0/4'
'Gi0/3'
'Gi0/2'
'Gi0/1'], 'Gi0/1/Passed': '0'
'VLAN 20/Passed': '0'
'Gi0/6/Discard': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show access-control packet statistics | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = show_info.split("\n")
        show_list=[]
        for value in show_info_list:
            if "Invalid" in value:
                pass
            else:
                show_list.append(value)
        show_info = "\n".join(show_list)
        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Interface")
    def dut_get_show_ip_ref_route(self,show_info):
        """
        Function:show ip ref route回显解析函数
        CLI命令:show ip ref route
        回显信息示例:
Ruijie#show ip ref route
    Codes: * - default route
           # - zero route
     ip/mask              weight  path-id next-hop                               interface             
     127.0.0.0/8          1       3       0.0.0.0                                Local 1               
     224.0.0.0/24         1       3       0.0.0.0                                Local 1               
     224.0.0.0/4          1       1       224.0.0.0                              Local 1               
     255.255.255.255/32   1       3       0.0.0.0                                Local 1

        Returns:
Gi0/2/Output Rate(bits/sec): "0"
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip ref route | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = show_info.split("\n")
        show_list = []
        for value in show_info_list:
            if "interface" in value:
                list1 = value.split()
                value = "  ".join(list1)
            show_list.append(value)
        show_info = "\n".join(show_list)
        return self.dut_show_autoget_blank_list(show_info,"ip/mask",value_title_2="next-hop")
    def dut_get_show_ip_fib_route(self,show_info):
        """
        Function:show ip fib route回显解析函数
        CLI命令:show ip fib route
        回显信息示例:
Ruijie#show ip fib route
    
    Codes: * - default route
           # - zero route
     ip/mask              weight  count   next-hop            interface             
     1.1.1.0/24           1       1       0.0.0.0             Gi0/2                 
     1.1.1.2/32           1       1       0.0.0.0             Lc1                   
     1.1.1.255/32         1       1       1.1.1.255           Gi0/2                 
     1.1.2.0/24           1       1       0.0.0.0             Gi0/3                 
     1.1.2.1/32           1       1       0.0.0.0             Lc1                   
     1.1.2.255/32         1       1       1.1.2.255           Gi0/3                 
     2.2.2.1/32           1       1       0.0.0.0             Lc1                   
     3.3.3.0/24           1       1       0.0.0.0             Gi0/4                 
     3.3.3.2/32           1       1       0.0.0.0             Lc1                   
     3.3.3.255/32         1       1       3.3.3.255           Gi0/4                 
     127.0.0.0/8          1       3       0.0.0.0             Lc1                   
     224.0.0.0/24         1       3       0.0.0.0             Lc1                   
     224.0.0.0/4          1       3       224.0.0.0           Lc1                   
     255.255.255.255/32   1       3       0.0.0.0             Lc1

        Returns:
Interface: ["Gi0/2"
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip fib route | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_ip_ref_route(show_info)
    def dut_get_show_ip_interface_vlan_num(self,show_info):
        """
        Function:show ip interface vlan <num>回显解析函数
        CLI命令:show ip interface vlan <num>
        回显信息示例:
Ruijie#show ip interface vlan 10
    VLAN 10
      IP interface state is: UP
      IP interface type is: BROADCAST
      IP interface MTU is: 1500
      IP address is: 
        10.1.1.1/24 (primary)
      IP address negotiate is: OFF
      Forward direct-broadcast is: OFF
      ICMP mask reply is: ON
      Send ICMP redirect is: ON
      Send ICMP unreachable is: ON
      DHCP relay is: OFF
      Fast switch is: ON
      Help address is: 
      Proxy ARP is: OFF
    ARP packet input number: 2
      Request packet     : 2
      Reply packet       : 0
      Unknown packet     : 0
    TTL invalid packet number: 0
    ICMP packet input number: 100
     Echo request       : 100
     Echo reply         : 0
     Unreachable        : 0
     Source quench      : 0
     Routing redirect   : 0

        Returns:
Gi0/3], "Gi0/3/Output Rate(packets/sec)": "4999"
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip interface vlan <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_ip_fib_route_vrf_word(self,show_info):
        """
        Function:show ip fib route vrf (word)回显解析函数
        CLI命令:show ip fib route vrf (word)
        回显信息示例:
Ruijie#show ip fib route vrf vpn1
    
    Codes: * - default route
           # - zero route
     ip/mask              weight  count   next-hop            interface             
     127.0.0.0/8          1       1       0.0.0.0             Lc1                   
     192.168.1.0/24       1       1       0.0.0.0             Lo1                   
     192.168.1.1/32       1       1       0.0.0.0             Lc1                   
     192.168.1.255/32     1       1       192.168.1.255       Lo1                   
     224.0.0.0/24         1       1       0.0.0.0             Lc1                   
     224.0.0.0/4          1       1       224.0.0.0           Lc1                   
     255.255.255.255/32   1       1       0.0.0.0             Lc1

        Returns:
Gi0/3/Sampling Time: "5 seconds"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip fib route vrf (word) | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_ip_ref_route(show_info)
    def dut_get_show_ip_ref_route_vrf_word(self,show_info):
        """
        Function:show ip ref route vrf (word)回显解析函数
        CLI命令:show ip ref route vrf (word)
        回显信息示例:
Ruijie#show ip ref route vrf vpn1
    Codes: * - default route
           # - zero route
     ip/mask              weight  path-id next-hop                               interface             
     127.0.0.0/8          1       3       0.0.0.0                                Local 1               
     192.168.2.0/24       1       9       0.0.0.0                                Loopback 1            
     192.168.2.1/32       1       3       0.0.0.0                                Local 1               
     192.168.2.255/32     1       10      192.168.2.0                            Loopback 1            
     224.0.0.0/24         1       3       0.0.0.0                                Local 1               
     224.0.0.0/4          1       1       224.0.0.0                              Local 1               
     255.255.255.255/32   1       3       0.0.0.0                                Local 1

        Returns:
{"127.0.0.0/8/0.0.0.0/interface": "Local 1"
"127.0.0.0/8/0.0.0.0/path-id": "3"
"192.168.2.0/24/0.0.0.0/interface": "Loopback 1"
"255.255.255.255/32/0.0.0.0/interface": "Local 1"
"192.168.2.1/32/0.0.0.0/path-id": "3"
"192.168.2.0/24/0.0.0.0/path-id": "9"
"224.0.0.0/4/224.0.0.0/interface": "Local 1"
"224.0.0.0/24/0.0.0.0/interface": "Local 1"
"224.0.0.0/24/0.0.0.0/path-id": "3"
"192.168.2.0/24/0.0.0.0/weight": "1"
"255.255.255.255/32/0.0.0.0/path-id": "3"
"127.0.0.0/8/0.0.0.0/weight": "1"
"192.168.2.1/32/0.0.0.0/interface": "Local 1"
"255.255.255.255/32/0.0.0.0/weight": "1"
"192.168.2.255/32/192.168.2.0/path-id": "10"
"224.0.0.0/24/0.0.0.0/weight": "1"
"192.168.2.255/32/192.168.2.0/interface": "Loopback 1"
"ip/mask_list": ["127.0.0.0/8/0.0.0.0"
"192.168.2.0/24/0.0.0.0"
"192.168.2.1/32/0.0.0.0"
"192.168.2.255/32/192.168.2.0"
"224.0.0.0/24/0.0.0.0"
"224.0.0.0/4/224.0.0.0"
"255.255.255.255/32/0.0.0.0"], "192.168.2.1/32/0.0.0.0/weight": "1"
"224.0.0.0/4/224.0.0.0/path-id": "1"
"224.0.0.0/4/224.0.0.0/weight": "1"
"192.168.2.255/32/192.168.2.0/weight": "1"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip ref route vrf (word) | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_ip_ref_route(show_info)
    def dut_get_show_ip_route_fastreroute(self,show_info):
        """
        Function:show ip route fast-reroute回显解析函数
        CLI命令:show ip route fast-reroute
        回显信息示例:
S57-2PL2#show ip route fast-reroute 

Codes:  C - Connected, L - Local, S - Static
        R - RIP, O - OSPF, B - BGP, I - IS-IS, V - Overflow route
        N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
        E1 - OSPF external type 1, E2 - OSPF external type 2
        SU - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2
        IA - Inter area, EV - BGP EVPN, A - Arp to host
        * - candidate default
        Status codes: m - main entry, b - backup entry, a - active entry

Gateway of last resort is no set
S     2.2.2.2/32[ma] via 192.168.1.2, Loopback 1
                [b]  via 192.168.2.2, Loopback 2

        Returns:
{"2.2.2.2/32/codes": "S"
"2.2.2.2/32/192.168.2.2/interface": " Loopback 2"
"2.2.2.2/32/192.168.2.2/status": "b"
"via_list": ["192.168.1.2"
"192.168.2.2"], "2.2.2.2/32/192.168.1.2/interface": " Loopback 1"
"2.2.2.2/32/192.168.1.2/status": "ma"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip route fast-reroute | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        via_ip_list=[]
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if "via" in value:
                if re.match("(\w+.*)\s+(\S+)\[(\w+)\]\s+via\s+(\S+),(.*)",value):
                    obj1 = re.match("(\w+.*)\s+(\S+)\[(\w+)\]\s+via\s+(\S+),(.*)",value)
                    Codes = obj1.group(1).strip()
                    ip = obj1.group(2)
                    ststus = obj1.group(3)
                    via_ip = obj1.group(4)
                    via_ip_list.append(via_ip)
                    intf = obj1.group(5)
                    dict_value[ip+"/"+"codes"] = Codes
                    dict_value[ip+"/"+via_ip+"/"+"status"] = ststus
                    dict_value[ip+"/"+via_ip+"/"+"interface"] = intf
                elif re.match("\s+\[(\w+)\]\s+via\s+(\S+),(.*)",value):
                    obj2 = re.match("\s+\[(\w+)\]\s+via\s+(\S+),(.*)",value)
                    ststus = obj2.group(1)
                    via_ip = obj2.group(2)
                    via_ip_list.append(via_ip)
                    intf = obj2.group(3)
                    dict_value[ip+"/"+via_ip+"/"+"status"] = ststus
                    dict_value[ip+"/"+via_ip+"/"+"interface"] = intf
        dict_value["via_list"] = via_ip_list
        return dict_value
    def dut_get_show_ip_ref_route_fastreroute(self,show_info):
        """
        Function:show ip ref route fast-reroute回显解析函数
        CLI命令:show ip ref route fast-reroute
        回显信息示例:
S57-2PL2#show ip ref route fast-reroute
 ip/mask              weight  path-id next-hop            interface             is_master
 2.2.2.2/32           1       13      192.168.1.2         Loopback 1            1       
 2.2.2.2/32           1       14      192.168.2.2         Loopback 2            0

        Returns:
{"2.2.2.2/32/192.168.2.2/interface": "Loopback 2"
"2.2.2.2/32/192.168.1.2/is_master": "1"
"2.2.2.2/32/192.168.2.2/weight": "1"
"2.2.2.2/32/192.168.1.2/path-id": "13"
"2.2.2.2/32/192.168.1.2/interface": "Loopback 1"
"ip/mask_list": ["2.2.2.2/32/192.168.1.2"
"2.2.2.2/32/192.168.2.2"], "2.2.2.2/32/192.168.2.2/is_master": "0"
"2.2.2.2/32/192.168.2.2/path-id": "14"
"2.2.2.2/32/192.168.1.2/weight": "1"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip ref route fast-reroute | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_ip_ref_route(show_info)
    def dut_get_show_ip_ref_adjacency(self,show_info):
        """
        Function:show ip ref adjacency回显解析函数
        CLI命令:show ip ref adjacency
        回显信息示例:
S57-2PL2#show ip ref adjacency 
id      state       type    rfct chg ip              interface                                       linklayer(header data)          
1       unres       mcast   3    0   224.0.0.0       Local 1                                         0000.0000.0000 0000.0000.0000   
3       unres       local   13   0   0.0.0.0         Local 1                                         0000.0000.0000 0000.0000.0000   
6       resolved    forward 0    0   1.1.1.3         GigabitEthernet 0/3                             00d0.f822.3533 0000.0000.0001   
7       unres       bcast   1    0   1.1.1.0         GigabitEthernet 0/3                             00d0.f822.3533 ffff.ffff.ffff   
8       unres       glean   1    0   0.0.0.0         GigabitEthernet 0/3                             0000.0000.0000 0000.0000.0000   
9       unres       bcast   1    0   192.168.1.0     Loopback 1                                      0000.0000.0000 ffff.ffff.ffff   
10      unres       discard 1    0   0.0.0.0         Loopback 1                                      0000.0000.0000 0000.0000.0000   
11      unres       bcast   1    0   192.168.2.0     Loopback 2                                      0000.0000.0000 ffff.ffff.ffff   
12      unres       discard 1    0   0.0.0.0         Loopback 2                                      0000.0000.0000 0000.0000.0000   
13      unres       discard 1    0   192.168.1.2     Loopback 1                                      0000.0000.0000 0000.0000.0000   
14      unres       discard 1    0   192.168.2.2     Loopback 2                                      0000.0000.0000 0000.0000.0000

        Returns:
{"192.168.1.2/Loopback 1/rfct": "1"
"192.168.1.2/Loopback 1/chg": "0"
"192.168.2.2/Loopback 2/rfct": "1"
"192.168.1.0/Loopback 1/state": "unres"
"0.0.0.0/Loopback 2/type": "discard"
"192.168.2.2/Loopback 2/chg": "0"
"192.168.1.0/Loopback 1/chg": "0"
"192.168.1.2/Loopback 1/linklayer": "0000.0000.0000 0000.0000.0000"
"1.1.1.3/GigabitEthernet 0/3/chg": "0"
"192.168.1.0/Loopback 1/linklayer": "0000.0000.0000 ffff.ffff.ffff"
"192.168.2.0/Loopback 2/type": "bcast"
"0.0.0.0/GigabitEthernet 0/3/rfct": "1"
"192.168.2.0/Loopback 2/state": "unres"
"192.168.1.0/Loopback 1/rfct": "1"
"192.168.2.2/Loopback 2/linklayer": "0000.0000.0000 0000.0000.0000"
"192.168.2.0/Loopback 2/chg": "0"
"192.168.2.2/Loopback 2/state": "unres"
"1.1.1.0/GigabitEthernet 0/3/rfct": "1"
"1.1.1.3/GigabitEthernet 0/3/linklayer": "00d0.f822.3533 0000.0000.0001"
"ip_list": ["224.0.0.0/Local 1"
"0.0.0.0/Local 1"
"1.1.1.3/GigabitEthernet 0/3"
"1.1.1.0/GigabitEthernet 0/3"
"0.0.0.0/GigabitEthernet 0/3"
"192.168.1.0/Loopback 1"
"0.0.0.0/Loopback 1"
"192.168.2.0/Loopback 2"
"0.0.0.0/Loopback 2"
"192.168.1.2/Loopback 1"
"192.168.2.2/Loopback 2"], "224.0.0.0/Local 1/linklayer": "0000.0000.0000 0000.0000.0000"
"192.168.2.2/Loopback 2/id": "14"
"0.0.0.0/Loopback 2/chg": "0"
"1.1.1.3/GigabitEthernet 0/3/rfct": "0"
"224.0.0.0/Local 1/rfct": "3"
"1.1.1.3/GigabitEthernet 0/3/id": "6"
"192.168.1.2/Loopback 1/id": "13"
"0.0.0.0/Loopback 1/linklayer": "0000.0000.0000 0000.0000.0000"
"0.0.0.0/Loopback 2/rfct": "1"
"224.0.0.0/Local 1/state": "unres"
"0.0.0.0/Local 1/rfct": "13"
"0.0.0.0/GigabitEthernet 0/3/state": "unres"
"0.0.0.0/GigabitEthernet 0/3/linklayer": "0000.0000.0000 0000.0000.0000"
"0.0.0.0/Loopback 2/id": "12"
"0.0.0.0/Loopback 1/rfct": "1"
"0.0.0.0/Loopback 1/type": "discard"
"0.0.0.0/Loopback 2/linklayer": "0000.0000.0000 0000.0000.0000"
"1.1.1.0/GigabitEthernet 0/3/type": "bcast"
"0.0.0.0/Local 1/type": "local"
"0.0.0.0/Loopback 1/state": "unres"
"0.0.0.0/Loopback 1/chg": "0"
"224.0.0.0/Local 1/type": "mcast"
"192.168.2.0/Loopback 2/linklayer": "0000.0000.0000 ffff.ffff.ffff"
"0.0.0.0/Local 1/chg": "0"
"1.1.1.0/GigabitEthernet 0/3/state": "unres"
"192.168.1.2/Loopback 1/state": "unres"
"192.168.1.0/Loopback 1/id": "9"
"0.0.0.0/Local 1/id": "3"
"0.0.0.0/GigabitEthernet 0/3/type": "glean"
"192.168.1.0/Loopback 1/type": "bcast"
"0.0.0.0/Loopback 1/id": "10"
"1.1.1.0/GigabitEthernet 0/3/linklayer": "00d0.f822.3533 ffff.ffff.ffff"
"224.0.0.0/Local 1/id": "1"
"0.0.0.0/GigabitEthernet 0/3/chg": "0"
"0.0.0.0/Local 1/linklayer": "0000.0000.0000 0000.0000.0000"
"192.168.1.2/Loopback 1/type": "discard"
"1.1.1.3/GigabitEthernet 0/3/type": "forward"
"192.168.2.0/Loopback 2/id": "11"
"0.0.0.0/Local 1/state": "unres"
"1.1.1.0/GigabitEthernet 0/3/chg": "0"
"1.1.1.0/GigabitEthernet 0/3/id": "7"
"224.0.0.0/Local 1/chg": "0"
"1.1.1.3/GigabitEthernet 0/3/state": "resolved"
"192.168.2.0/Loopback 2/rfct": "1"
"0.0.0.0/Loopback 2/state": "unres"
"0.0.0.0/GigabitEthernet 0/3/id": "8"
"192.168.2.2/Loopback 2/type": "discard"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip ref adjacency | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        list1 = []
        for value in show_info_list:
            if "(header data)" in value:
                value = value.replace("(header data)","")
            list1.append(value)
        show_info = "\n".join(list1)
        star,end,show_len_list,show_info_list_line = self.dut_common_get_linelist(show_info,"ip")
        return self.dut_show_autoget_form(star,end,"ip",show_len_list,show_info_list_line,"interface")
    def dut_get_show_ipv6_nd_snooping_prefix(self,show_info):
        """
        Function:show ipv6 nd snooping prefix回显解析函数
        CLI命令:show ipv6 nd snooping prefix
        回显信息示例:
RGOS_12_1#show ipv6 nd snooping prefix
Total valid prefix num:3
VLAN  Prefix                                    Lifetime(s)
----  ------                                    -----------
1     2018:7::/64                               STATIC
100   2018:7::/64                               STATIC
998   2001::/64                                 2591999

        Returns:
{"2018:7::/64/100/Lifetime(s)": "STATIC"
"2001::/64/998/Lifetime(s)": "2591999"
"2018:7::/64/1/Lifetime(s)": "STATIC"
"Prefix_list": ["2018:7::/64/1"
"2018:7::/64/100"
"2001::/64/998"]}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 nd snooping prefix | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Prefix","VLAN")
    def dut_get_show_efmp_capacity(self,show_info):
        """
        Function:show efmp capacity回显解析函数
        CLI命令:show efmp capacity
        回显信息示例:
S7810C_2001#show efmp capacity


    soft_fwd:                 0.

    hpage:                    0.

    normal_buf_num:           2048.

    large_buf_num:            1524.

    super_large_buf_num:      16.

    normal_buf_len:           4096.

    total_len:                4352.

    max_data_len:             3840.

    data_len:                 3456.

    total_len_larger:         10496.

    max_data_len_larger:      9984.

    data_len_larger:          9600.

    total_len_super_larger:   66688.

    max_data_len_super_larger:66176.

    data_len_super_larger:    65792.

    ipv4_load_sharing:        0.

    ipv6_load_sharing:        1.

    frr:                      0.

    mcast_node_num:           8192.

    nr_cpus:                  1.

    ipv4_addr_limit:          4096.

    ref_max_arp_num:          16000.

    ipv6_addr_limit:          4096.

    refv6_max_nd_num:         8192.

    mgmt_base:                1.

        Returns:
{"max_data_len_larger": "9984", "total_len": "4352", "mcast_node_num": "8192", "data_len_larger": "9600", "ipv4_addr_limit": "4096", "large_buf_num": "1524", "data_len_super_larger": "65792", "normal_buf_len": "4096", "normal_buf_num": "2048", "max_data_len_super_larger": "66176", "frr": "0", "ref_max_arp_num": "16000", "refv6_max_nd_num": "8192", "hpage": "0", "total_len_super_larger": "66688", "nr_cpus": "1", "super_large_buf_num": "16", "soft_fwd": "0", "total_len_larger": "10496", "ipv4_load_sharing": "0", "ipv6_addr_limit": "4096", "mgmt_base": "1", "ipv6_load_sharing": "1", "data_len": "3456", "max_data_len": "3840"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show efmp capacity | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        show_info_list = show_info.split("\n")
        flag = 0
        for value in show_info_list:
            if "Capacity value" in value:
                flag = 1
            if ":" in value:
                if flag == 0 :
                    list1 = value.split(":")
                    dict_value[list1[0].strip()] = list1[1].strip().strip(".")
                else :
                    list1 = value.split(":")
                    list2 = list1[1].strip().split()
                    if len(list2) == 2:
                        dict_value[list1[0].strip()+"/Capacity value"] = list2[0].strip()
                        dict_value[list1[0].strip()+"/EFMP default value"] = list2[1].strip()
                    else:
                        dict_value[list1[0].strip()+"/Capacity value"] = list2[0].strip()
                        dict_value[list1[0].strip()+"/EFMP default value"] = ""
        return dict_value
    def dut_get_show_ipv6_route_fastreroute(self,show_info):
        """
        Function:show ipv6 route fast-reroute回显解析函数
        CLI命令:show ipv6 route fast-reroute
        回显信息示例:
EG2000D#show ipv6 route fast-reroute

IPv6 routing table name - Default - 10 entries
Codes:  C - Connected, L - Local, S - Static
        R - RIP, O - OSPF, B - BGP, I - IS-IS, V - Overflow route
        N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
        E1 - OSPF external type 1, E2 - OSPF external type 2
        SU - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2
        IA - Inter area, N - Nd to host

        Status codes: m - main entry, b - backup entry, a - active entry
S      100::/128[m]  [1/0] via 2001::2, Loopback 1
                [b]  [1/0] via 2002::2, Loopback 2

        Returns:
{"100::/128/2002::2/status": "b"
"100::/128/2001::2/interface": " Loopback 1"
"100::/128/2001::2/status": "m"
"100::/128/2002::2/interface": " Loopback 2"
"via_list": ["2001::2"
"2002::2"], "100::/128/codes": "S"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 route fast-reroute | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        via_ip_list=[]
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if "via" in value:
                if re.match("(\w+.*)\s+(\S+)\[(\w+)\]\s+\[\S+\]\s+via\s+(\S+),(.*)",value):
                    obj1 = re.match("(\w+.*)\s+(\S+)\[(\w+)\]\s+\[\S+\]\s+via\s+(\S+),(.*)",value)
                    Codes = obj1.group(1).strip()
                    ip = obj1.group(2)
                    ststus = obj1.group(3)
                    via_ip = obj1.group(4)
                    via_ip_list.append(via_ip)
                    intf = obj1.group(5)
                    dict_value[ip+"/"+"codes"] = Codes
                    dict_value[ip+"/"+via_ip+"/"+"status"] = ststus
                    dict_value[ip+"/"+via_ip+"/"+"interface"] = intf
                elif re.match("\s+\[(\w+)\]\s+\[\S+\]\s+via\s+(\S+),(.*)",value):
                    obj2 = re.match("\s+\[(\w+)\]\s+\[\S+\]\s+via\s+(\S+),(.*)",value)
                    ststus = obj2.group(1)
                    via_ip = obj2.group(2)
                    via_ip_list.append(via_ip)
                    intf = obj2.group(3)
                    dict_value[ip+"/"+via_ip+"/"+"status"] = ststus
                    dict_value[ip+"/"+via_ip+"/"+"interface"] = intf
        dict_value["via_list"] = via_ip_list
        return dict_value
    def dut_get_show_ipv6_ref_adjacency(self,show_info):
        """
        Function:show ipv6 ref adjacency回显解析函数
        CLI命令:show ipv6 ref adjacency
        回显信息示例:
EG2000D#show ipv6 ref adjacency 
id      state       type    rfct chg ip                                     interface                                       linklayer(header data)          
2       unres       local   8    0   ::1                                    Local 1                                         0000.0000.0000 0000.0000.0000   
84      unres       discard 1    0   ::                                     Loopback 1                                      0000.0000.0000 0000.0000.0000   
85      unres       discard 2    0   ::                                     Null 0                                          0000.0000.0000 0000.00ff.ee51   
86      unres       discard 1    0   2001::2                                Loopback 1                                      0000.0000.0000 0000.0000.0000   
87      unres       discard 1    0   2001::3                                Loopback 1                                      0000.0000.0000 0000.0000.0000   
88      unres       discard 1    0   2001::4                                Loopback 1                                      0000.0000.0000 0000.0000.0000   
89      unres       discard 1    0   2001::5                                Loopback 1                                      0000.0000.0000 0000.0000.0000

        Returns:
{"::/Null 0/type": "discard"
"2001::2/Loopback 1/chg": "0"
"2001::2/Loopback 1/type": "discard"
"::/Loopback 1/linklayer": "0000.0000.0000 0000.0000.0000"
"2001::2/Loopback 1/state": "unres"
"::1/Local 1/type": "local"
"2001::5/Loopback 1/chg": "0"
"2001::3/Loopback 1/chg": "0"
"::/Null 0/linklayer": "0000.0000.0000 0000.00ff.ee51"
"2001::4/Loopback 1/rfct": "1"
"2001::4/Loopback 1/state": "unres"
"2001::4/Loopback 1/linklayer": "0000.0000.0000 0000.0000.0000"
"ip_list": ["::1/Local 1"
"::/Loopback 1"
"::/Null 0"
"2001::2/Loopback 1"
"2001::3/Loopback 1"
"2001::4/Loopback 1"
"2001::5/Loopback 1"], "2001::4/Loopback 1/chg": "0"
"::/Null 0/id": "85"
"2001::2/Loopback 1/linklayer": "0000.0000.0000 0000.0000.0000"
"::/Loopback 1/id": "84"
"2001::4/Loopback 1/type": "discard"
"::1/Local 1/chg": "0"
"2001::2/Loopback 1/id": "86"
"::/Null 0/state": "unres"
"2001::5/Loopback 1/type": "discard"
"::1/Local 1/linklayer": "0000.0000.0000 0000.0000.0000"
"::/Null 0/rfct": "2"
"2001::3/Loopback 1/id": "87"
"2001::5/Loopback 1/linklayer": "0000.0000.0000 0000.0000.0000"
"2001::3/Loopback 1/linklayer": "0000.0000.0000 0000.0000.0000"
"2001::4/Loopback 1/id": "88"
"2001::3/Loopback 1/state": "unres"
"2001::3/Loopback 1/rfct": "1"
"::/Loopback 1/type": "discard"
"2001::5/Loopback 1/rfct": "1"
"2001::5/Loopback 1/state": "unres"
"::1/Local 1/id": "2"
"::/Loopback 1/chg": "0"
"::/Null 0/chg": "0"
"2001::2/Loopback 1/rfct": "1"
"::1/Local 1/rfct": "8"
"::/Loopback 1/rfct": "1"
"::/Loopback 1/state": "unres"
"::1/Local 1/state": "unres"
"2001::3/Loopback 1/type": "discard"
"2001::5/Loopback 1/id": "89"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 ref adjacency | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_ip_ref_adjacency(show_info)
    def dut_get_show_ipv6_fib_route(self,show_info):
        """
        Function:show ipv6 fib route回显解析函数
        CLI命令:show ipv6 fib route
        回显信息示例:
EG2000D#show ipv6 fib route 

Codes: * - default route
 prefix/len                                   weight  count   next_hop                               interface
 ::1/128                                      1       5       ::1                                    Lc1                   
 100::/128                                    1       1       ::1                                    Lc1                   
 2001::/64                                    1       1       ::                                     Lo1                   
 2001::1/128                                  1       1       ::1                                    Lc1                   
 fe80::274:9cff:fe51:8aec/128                 1       2       ::1                                    Lc1                   
 fe80::d41d:8cd9:8f00:b204/128                1       1       ::1                                    Lc1

        Returns:
{'100::/128/::1/count': '1'
'::1/128/::1/interface': 'Lc1'
'fe80::d41d:8cd9:8f00:b204/128/::1/weight': '1'
'100::/128/::1/interface': 'Lc1'
'2001::/64/::/weight': '1'
'fe80::274:9cff:fe51:8aec/128/::1/count': '2'
'2001::/64/::/count': '1'
'100::/128/::1/weight': '1'
'2001::1/128/::1/interface': 'Lc1'
'prefix/len_list': ['::1/128/::1'
'100::/128/::1'
'2001::/64/::'
'2001::1/128/::1'
'fe80::274:9cff:fe51:8aec/128/::1'
'fe80::d41d:8cd9:8f00:b204/128/::1'], '2001::/64/::/interface': 'Lo1'
'::1/128/::1/count': '5'
'2001::1/128/::1/count': '1'
'::1/128/::1/weight': '1'
'fe80::d41d:8cd9:8f00:b204/128/::1/interface': 'Lc1'
'2001::1/128/::1/weight': '1'
'fe80::274:9cff:fe51:8aec/128/::1/weight': '1'
'fe80::274:9cff:fe51:8aec/128/::1/interface': 'Lc1'
'fe80::d41d:8cd9:8f00:b204/128/::1/count': '1'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 fib route | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = show_info.split("\n")
        show_list = []
        for value in show_info_list:
            if "interface" in value:
                list1 = value.split()
                value = "  ".join(list1)
            show_list.append(value)
        show_info = "\n".join(show_list)
        return self.dut_show_autoget_blank_list(show_info,"prefix/len",value_title_2="next_hop")
    def dut_get_show_container_images(self,show_info):
        """
        Function:show container images回显解析函数
        CLI命令:show container images
        回显信息示例:
Ruijie#show container images 
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
lhjexport           latest              7d573ad68674        10 hours ago        90.8MB
<none>              <none>              eed87fe64163        14 hours ago        90.8MB
ubuntu              stess               38b297e8a563        8 days ago          92.6MB

        Returns:
{'REPOSITORY_list': ['lhjexport'
'<none>'
'ubuntu'], 'lhjexport/IMAGE ID': '7d573ad68674'
'ubuntu/SIZE': '92.6MB'
'ubuntu/IMAGE ID': '38b297e8a563'
'<none>/CREATED': '14 hours ago'
'lhjexport/CREATED': '10 hours ago'
'ubuntu/CREATED': '8 days ago'
'<none>/TAG': '<none>'
'<none>/IMAGE ID': 'eed87fe64163'
'<none>/SIZE': '90.8MB'
'ubuntu/TAG': 'stess'
'lhjexport/SIZE': '90.8MB'
'lhjexport/TAG': 'latest'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show container images | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_blank_list(show_info,"REPOSITORY")
    def dut_get_show_container_stats_word(self,show_info):
        """
        Function:show container stats (test)回显解析函数
        CLI命令:show container stats (test)
        回显信息示例:
Ruijie#show container stats test
CONTAINER ID        NAME                CPU %               MEM USAGE / LIMIT   MEM %               NET I/O             BLOCK I/O           PIDS
b2ed27eedd6f        test                0.00%               1.957MiB / 256MiB   0.76%               156B / 0B           20.8MB / 0B         1

        Returns:
{'test/MEM %': '0.76%'
'test/BLOCK I/O': '20.8MB / 0B'
'test/BLOCK I/O/BLOCK I': '20.8'
'NAME_list': ['test'], 'test/MEM USAGE / LIMIT/MEM USAGE': '1.957'
'test/CPU %': '0.00%'
'test/NET I/O': '156B / 0B'
'test/PIDS': '1'
'test/MEM USAGE / LIMIT/LIMIT': '256'
'test/NET I/O/O': '0'
'test/NET I/O/NET I': '156'
'test/MEM USAGE / LIMIT': '1.957MiB / 256MiB'
'test/CONTAINER ID': 'b2ed27eedd6f'
'test/BLOCK I/O/O': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show container stats (test) | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="NAME"
        value_title_end = None
        value_title_2=None
        split_one=None
        star_num_count_flag=None
        end_num_count_flag=None
        ago_value_title=None
        col_len_list = []
        #创建字典
        dict_value={}
        rol_title_list = []
        title_row =[]

        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
            if re.match("\s*-{3,}\s+-{3,}.*",i):
                show_info_list_line.remove(i)
            if '====' in i:
                show_info_list_line.remove(i)
        length = len(show_info_list_line)
        star_num_count = 0
        end_num_count = 0
        for line_len_num in range(0,length):
            if value_title in show_info_list_line[line_len_num]:              #***********
                star_num_count = star_num_count + 1
                if star_num_count_flag is not None:
                    if int(star_num_count_flag) == star_num_count and star_num_count < 100:
                        start_num=line_len_num
                        star_num_count = 101
                else:
                    start_num=line_len_num
            if value_title_end is not None:
                if value_title_end in show_info_list_line[line_len_num]:
                    if end_num_count_flag is not None :
                        if end_num_count < 1:
                            end_num = line_len_num
                            end_num_count = 1
                    else:
                        end_num = line_len_num
            else:
                end_num = length
        for k in range(start_num,end_num):
            if split_one is not None :
                col_value_list = re.split(r'\s{1,}', str(show_info_list_line[k]).strip())
            else:
                col_value_list = re.split(r'\s{2,}', str(show_info_list_line[k]).strip())
            if value_title in col_value_list :
                title_row = col_value_list
                x_len = len(title_row)
                for i in range(x_len) :
                    if title_row[i] == value_title :
                        new_list_title_key = i
                    if value_title_2 is not None :
                        if title_row[i] == value_title_2 :
                            new_list_title_key_2 = i

            else:
                if col_value_list != "":
                    title_col = col_value_list[new_list_title_key]           #表头的列值位*****
                    if ago_value_title:
                        title_col = ago_value_title+"/"+title_col
                    if value_title_2 is not None :
                        title_col = title_col+"/"+col_value_list[new_list_title_key_2]
                    rol_title_list.append(title_col.strip())
                    if new_list_title_key+1 < x_len :
                        for s in range(new_list_title_key+1,x_len):  #需要变参的地方
                            if value_title_2 is not None :
                                if s == new_list_title_key_2 :
                                    continue
                            key_name = '%s/%s'%(title_col,title_row[s])
                            dict_value[key_name]=col_value_list[s].strip()
                            if "/" in col_value_list[s].strip() and "/" in title_row[s] :
                                    list4 = title_row[s].strip().split("/")
                                    list5 = col_value_list[s].strip().split("/")

                                    dict_value[key_name+"/"+list4[0].strip()] = list5[0].strip().replace("MiB","").replace("MB","").replace("B","")
                                    dict_value[key_name+"/"+list4[1].strip()] = list5[1].strip().replace("MiB","").replace("MB","").replace("B","")

                    if new_list_title_key > 0 :
                        for s in range(0,new_list_title_key):  #需要变参的地方
                            ##遍历列头边的值
                            if value_title_2 is not None :
                                if s == new_list_title_key_2 :
                                    continue
                            key_name = '%s/%s' % (title_col, title_row[s])
                            dict_value[key_name.strip()]=col_value_list[s].strip()
        if ago_value_title:
            value_title = ago_value_title+"/"+value_title
        dict_value[value_title+"_list"] = rol_title_list
        return dict_value
    def dut_get_show_container(self,show_info):
        """
        Function:show container回显解析函数
        CLI命令:show container
        回显信息示例:
Ruijie#show container 
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                    PORTS               NAMES
e48c8da49567        eed87fe64163        "bash"              14 hours ago        Exited (0) 10 hours ago                       lhjcontainer
4885fa4eeda5        ubuntu:stess        "bash"              17 hours ago        Up 17 hours                                   test

        Returns:
{'test/CONTAINER': '4885fa4eed'
'lhjcontainer/COMMAND': '"bash"'
'lhjcontainer/CREATED': '14 hours ago'
'lhjcontainer/STATUS': 'Exited'
'test/IMAGE': 'ubuntu:stess'
'test/CREATED': '17 hours ago'
'lhjcontainer/ID': '67'
'test/ID': 'a5'
'lhjcontainer/IMAGE': 'eed87fe64163'
'test/COMMAND': '"bash"'
'NAMES_list': ['lhjcontainer'
'test'], 'test/STATUS': 'Up'
'test/PORTS': ''
'lhjcontainer/PORTS': ''
'lhjcontainer/CONTAINER': 'e48c8da495'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show container | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        star,end,show_len_list,show_info_list_line =self.dut_common_get_linelist(show_info,"NAMES")
        def dut_show_autoget_form_dut_get_show_container(star_num=star,end_num=end,title_value="NAMES",x_list=show_len_list,show_info_list_line=show_info_list_line,title_value2=None):
            dict_value ={}
            address_list = []
            title_list =[]
            for i in range (star_num,end_num):    #line_len-1:上面删除“-----”这一行了
                ##print show_info_list_line[i]
                x_len = len(x_list)
                cut_star = 0
                cut_end=0
                new_list = []
                show_info_list_line[i] = show_info_list_line[i]
                ##print show_info_list_line[i]
                if show_info_list_line[i] != "" :
                    for j in range(x_len):
                        cut_end = cut_end+int(x_list[j])
                        col_value = show_info_list_line[i][cut_star:cut_end]
                        cut_star = cut_end
                        col_value = col_value.lstrip()
                        col_value = col_value.rstrip()
                        new_list.append(col_value)
                    #获取表头的列，用于组合
                    ##print col_value_list
                    for i in range(len(new_list)) :
                        #print "111111111"
                        #print title_value
                        #print new_list[i]
                        if new_list[i] == title_value :
                            new_list_title_key = i
                        if title_value2 is not None :
                            if new_list[i] == title_value2 :
                                new_list_title_key_2 = i
                    new_list_title_value = new_list[new_list_title_key]          #需要变参的地方

                    if new_list_title_value == title_value:
                        title_list = new_list
                    elif new_list_title_value!= title_value:
                        #生成字典
                        if title_value2 is not None :
                            new_list_title_value = new_list_title_value+"/"+new_list[new_list_title_key_2]
                        address_list.append(new_list_title_value)
                        #遍历列头右边的值
                        if new_list_title_key+1 < x_len :
                            for s in range(new_list_title_key+1,x_len):  #需要变参的地方
                                #key_name = '%s/%s' % (title_col,title_row[s])
                                if title_value2 is not None :
                                    if s == new_list_title_key_2 :
                                        continue
                                key_name = '%s/%s'%(new_list_title_value,title_list[s])
                                if title_list[s] == "STATUS":
                                    status = new_list[s].split()[0]
                                    dict_value[key_name]=status
                                else:
                                    dict_value[key_name]=new_list[s]
                        if new_list_title_key > 0 :
                            for s in range(0,new_list_title_key):  #需要变参的地方
                                ##遍历列头边的值
                                if title_value2 is not None :
                                    if s == new_list_title_key_2 :
                                        continue
                                key_name = '%s/%s' % (new_list_title_value, title_list[s])
                                if title_list[s] == "STATUS":
                                    status = new_list[s].split()[0]
                                    dict_value[key_name]=status
                                else:
                                    dict_value[key_name]=new_list[s]
                    dict_value[title_value+"_list"]=address_list
            return dict_value
        return dut_show_autoget_form_dut_get_show_container()
    def dut_get_show_ip_rns_operationalstate(self,show_info):
        """
        Function:show ip rns operational-state回显解析函数
        CLI命令:show ip rns operational-state
        回显信息示例:
s57_2003#show ip rns operational-state 
Entry number: 1
Modification time: *2019-09-02 10:06:49
Current seconds left in Life: forever
Operational state of entry: Active
Number of Octets Used by this Entry: 8260
Number of operations attempted: 14
Number of operations skipped: 0
Connection loss occurred: FALSE
Timeout occurred: FALSE
Over thresholds occurred: FALSE
Latest RTT (milliseconds): 1153
Latest operation start time: 2019-09-02 10:19:51
Latest operation return code: OK

s57_2003#

        Returns:
{'Number of operations attempted': '14'
'Number of Octets Used by this Entry': '8260'
'Number of operations skipped': '0'
'Connection loss occurred': 'FALSE'
'Over thresholds occurred': 'FALSE'
'Operational state of entry': 'Active'
'Current seconds left in Life': 'forever'
'Entry number': '1'
'Modification time': '*2019-09-02 10:06:49'
'Latest RTT (milliseconds)': '1153'
'Timeout occurred': 'FALSE'
'Latest operation return code': 'OK'
'Latest operation start time': '2019-09-02 10:19:51'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip rns operational-state | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_ip_rns_collectionstatistics(self,show_info):
        """
        Function:show ip rns collection-statistics回显解析函数
        CLI命令:show ip rns collection-statistics
        回显信息示例:
s57_2003#show ip rns collection-statistics 
Entry number: 1
Start Time Index: *2019-09-02 10:06:49
Number of successful operations: 12
Number of failures operations: 0
Number of operations over threshold: 0
Number of failed operations due to a Disconnect: 0
Number of failed operations due to a Timeout: 0
Number of failed operations due to a Busy: 0
Number of failed operations due to a No Connection: 0
Number of failed operations due to an Internal Error: 0
Number of failed operations due to a Sequence Error: 0
Number of failed operations due to a Verify Error: 0
Last packet sended sequence: 786433
RTT Values:
RTT Avg: 356            RTT Min: 56          RTT Max: 1094        
Num Of RTT: 12          RTT Sum: 4272        RTT Sum2: 3675364     

s57_2003#

        Returns:
{'Number of failed operations due to an Internal Error': '0'
'Number of failed operations due to a No Connection': '0'
'Number of failed operations due to a Busy': '0'
'Number of failed operations due to a Timeout': '0'
'Number of failures operations': '0'
'Start Time Index': '*2019-09-02 10:06:49'
'Num Of RTT': '12'
'RTT Sum2': '3675364'
'Number of operations over threshold': '0'
'RTT Avg': '356'
'RTT Min': '56'
'Entry number': '1'
'Number of failed operations due to a Verify Error': '0'
'RTT Sum': '4272'
'Number of failed operations due to a Sequence Error': '0'
'RTT Max': '1094'
'Number of failed operations due to a Disconnect': '0'
'Number of successful operations': '12'
'Last packet sended sequence': '786433'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip rns collection-statistics | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_line =  self.dut_get_start_show_info(show_info)
        flag = 0
        for value in show_line:
            value = value.strip()
            if "RTT Values" in value:
                flag = 1
                continue
            if flag == 0 :
                if ":" in value:
                    list1  = value.split (":",1)
                    dict_value[list1[0].strip()] =list1[1].strip()
            else:
                list2  = value.split ("   ")
                for value_list2 in list2 :
                    if ":" in value_list2:
                        list1  = value_list2.split (":",1)
                        dict_value[list1[0].strip()] =list1[1].strip()
        return dict_value
    def dut_get_show_ip_route_database(self,show_info):
        """
        Function:show ip route database回显解析函数
        CLI命令:show ip route database
        回显信息示例:
Ruijie#show ip route database      
Codes: K - kernel, C - connected, S - static, R - RIP, B - BGP
       O - OSPF, IA - OSPF inter area
       N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
       E1 - OSPF external type 1, E2 - OSPF external type 2
       i - IS-IS, L1 - IS-IS level-1, L2 - IS-IS level-2, ia - IS-IS inter area
       A - Block add, U - Block update, AU - Block add And block update
       AH - Arp-to-host
       > - selected route, * - FIB route, p - stale info


Gateway of last resort is no set
C    *>  1.0.0.0/24 is directly connected, GigabitEthernet 0/1        (recursive, rg_flag:0x60 *, mac=0000.0000.0000
          rg_flag: fib active 
          01:20:12, nhop_flag:0x3, nhop_ex_flag:0x0, nh_vrf:0, nh_type:1, nh_rgate_num:1, tag:0, qos_id 0,weight :1,fast_sw_id:0, mac=0000.0000.0000
          nhop_flag: active fib 
          nhop_ext_flag: 
          rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1, rib_path:1, rib_weight:1
          rib_flag: selected 
          rib_ext_flag: fib-mom 
          NHB-ID: (0, 272)
O        1.0.0.0/24 [110/1] is directly connected, GigabitEthernet 0/1        (recursive, rg_flag:0x40, mac=0000.0000.0000
          rg_flag: active 
          01:19:40, nhop_flag:0x1, nhop_ex_flag:0x0, nh_vrf:0, nh_type:1, nh_rgate_num:1, tag:0, qos_id 0,weight :1,fast_sw_id:0, mac=0000.0000.0000
          nhop_flag: active 
          nhop_ext_flag: 
        process: 1.
          rib_flag:0x0, rib_ext_flag:0x0, rib_nh_active_num:1, rib_rgate_num:1, rib_path:0, rib_weight:0
          rib_flag: 
          rib_ext_flag: 
          NHB-ID: NULL
I L1     1.0.0.0/24 [115/1] is directly connected, GigabitEthernet 0/1        (recursive, rg_flag:0x42, mac=0000.0000.0000
          rg_flag: active-changed active 
          00:21:45, nhop_flag:0x1, nhop_ex_flag:0x40, nh_vrf:0, nh_type:1, nh_rgate_num:1, tag:0, qos_id 0,weight :1,fast_sw_id:0, mac=0000.0000.0000
          nhop_flag: active 
          nhop_ext_flag: active-changed 
        process: 513.
          rib_flag:0x20, rib_ext_flag:0x0, rib_nh_active_num:1, rib_rgate_num:1, rib_path:0, rib_weight:0
          rib_flag: changed 
          rib_ext_flag: 
          NHB-ID: NULL
          route node lock: 4
C    *>  1.0.0.1/32 is directly connected, GigabitEthernet 0/1        (recursive, rg_flag:0x60 *, mac=0000.0000.0000
          rg_flag: fib active 
          01:20:14, nhop_flag:0x3, nhop_ex_flag:0x0, nh_vrf:0, nh_type:1, nh_rgate_num:1, tag:0, qos_id 0,weight :1,fast_sw_id:0, mac=0000.0000.0000
          nhop_flag: active fib 
          nhop_ext_flag: 
          rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1, rib_path:1, rib_weight:1
          rib_flag: selected 
          rib_ext_flag: local-host fib-mom 
          NHB-ID: (0, 270)
          route node lock: 2
C    *>  2.0.0.0/24 is directly connected, GigabitEthernet 0/2        (recursive, rg_flag:0x60 *, mac=0000.0000.0000
          rg_flag: fib active 
          17:01:10, nhop_flag:0x3, nhop_ex_flag:0x0, nh_vrf:0, nh_type:1, nh_rgate_num:1, tag:0, qos_id 0,weight :1,fast_sw_id:0, mac=0000.0000.0000
          nhop_flag: active fib 
          nhop_ext_flag: 
          rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1, rib_path:1, rib_weight:1
          rib_flag: selected 
          rib_ext_flag: fib-mom 
          NHB-ID: (0, 11)
O        2.0.0.0/24 [110/1] is directly connected, GigabitEthernet 0/2        (recursive, rg_flag:0x40, mac=0000.0000.0000
          rg_flag: active 
          01:19:38, nhop_flag:0x1, nhop_ex_flag:0x0, nh_vrf:0, nh_type:1, nh_rgate_num:1, tag:0, qos_id 0,weight :1,fast_sw_id:0, mac=0000.0000.0000
          nhop_flag: active 
          nhop_ext_flag: 
        process: 1.
          rib_flag:0x0, rib_ext_flag:0x0, rib_nh_active_num:1, rib_rgate_num:1, rib_path:0, rib_weight:0
          rib_flag: 
          rib_ext_flag: 
          NHB-ID: NULL
I L1     2.0.0.0/24 [115/1] is directly connected, GigabitEthernet 0/2        (recursive, rg_flag:0x42, mac=0000.0000.0000
          rg_flag: active-changed active 
          00:21:47, nhop_flag:0x1, nhop_ex_flag:0x40, nh_vrf:0, nh_type:1, nh_rgate_num:1, tag:0, qos_id 0,weight :1,fast_sw_id:0, mac=0000.0000.0000
          nhop_flag: active 
          nhop_ext_flag: active-changed 
        process: 513.
          rib_flag:0x20, rib_ext_flag:0x0, rib_nh_active_num:1, rib_rgate_num:1, rib_path:0, rib_weight:0
          rib_flag: changed 
          rib_ext_flag: 
          NHB-ID: NULL
          route node lock: 4
C    *>  2.0.0.1/32 is directly connected, GigabitEthernet 0/2        (recursive, rg_flag:0x60 *, mac=0000.0000.0000
          rg_flag: fib active 
          17:01:20, nhop_flag:0x3, nhop_ex_flag:0x0, nh_vrf:0, nh_type:1, nh_rgate_num:1, tag:0, qos_id 0,weight :1,fast_sw_id:0, mac=0000.0000.0000
          nhop_flag: active fib 
          nhop_ext_flag: 
          rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1, rib_path:1, rib_weight:1
          rib_flag: selected 
          rib_ext_flag: local-host fib-mom 
          NHB-ID: (0, 12)
          route node lock: 2
AH    *>  2.0.0.2/32 [1/0] via 2.0.0.2, GigabitEthernet 0/2        (recursive, rg_flag:0x60 *, mac=0000.0000.0000
          rg_flag: fib active 
          14:13:39, nhop_flag:0x3, nhop_ex_flag:0x0, nh_vrf:0, nh_type:4, nh_rgate_num:1, tag:0, qos_id 0,weight :1,fast_sw_id:0, mac=0000.0000.0000
          nhop_flag: active fib 
          nhop_ext_flag: 
          rib_flag:0x10, rib_ext_flag:0x40000, rib_nh_active_num:1, rib_rgate_num:1, rib_path:1, rib_weight:1
          rib_flag: selected 
          rib_ext_flag: 
          NHB-ID: NULL
          route node lock: 2
AH    *>  2.0.0.3/32 [1/0] via 2.0.0.3, GigabitEthernet 0/2        (recursive, rg_flag:0x60 *, mac=0000.0000.0000
          rg_flag: fib active 
          00:19:09, nhop_flag:0x3, nhop_ex_flag:0x0, nh_vrf:0, nh_type:4, nh_rgate_num:1, tag:0, qos_id 0,weight :1,fast_sw_id:0, mac=0000.0000.0000
          nhop_flag: active fib 
          nhop_ext_flag: 
          rib_flag:0x10, rib_ext_flag:0x40000, rib_nh_active_num:1, rib_rgate_num:1, rib_path:1, rib_weight:1
          rib_flag: selected 
          rib_ext_flag: 
          NHB-ID: NULL
          route node lock: 2
O    *>  10.0.0.0/24 [110/2] via 1.0.0.2, GigabitEthernet 0/1        (recursive, rg_flag:0x60 *, mac=0000.0000.0000
          rg_flag: fib active 
          01:13:21, nhop_flag:0x3, nhop_ex_flag:0x0, nh_vrf:0, nh_type:4, nh_rgate_num:1, tag:0, qos_id 0,weight :1,fast_sw_id:0, mac=0000.0000.0000
          nhop_flag: active fib 
          nhop_ext_flag: 
        process: 1.
          rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1, rib_path:1, rib_weight:1
          rib_flag: selected 
          rib_ext_flag: fib-mom 
          NHB-ID: (0, 271)
          route node lock: 2
O    *>  10.0.1.0/24 [110/2] via 1.0.0.2, GigabitEthernet 0/1        (recursive, rg_flag:0x60 *, mac=0000.0000.0000
          rg_flag: fib active 
          01:13:21, nhop_flag:0x3, nhop_ex_flag:0x0, nh_vrf:0, nh_type:4, nh_rgate_num:1, tag:0, qos_id 0,weight :1,fast_sw_id:0, mac=0000.0000.0000
          nhop_flag: active fib 
          nhop_ext_flag: 
        process: 1.
          rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1, rib_path:1, rib_weight:1
          rib_flag: selected 
          rib_ext_flag: fib-mom 
          NHB-ID: (0, 271)
          route node lock: 2
O    *>  10.0.2.0/24 [110/2] via 1.0.0.2, GigabitEthernet 0/1        (recursive, rg_flag:0x60 *, mac=0000.0000.0000
          rg_flag: fib active 
          01:13:21, nhop_flag:0x3, nhop_ex_flag:0x0, nh_vrf:0, nh_type:4, nh_rgate_num:1, tag:0, qos_id 0,weight :1,fast_sw_id:0, mac=0000.0000.0000
          nhop_flag: active fib 
          nhop_ext_flag: 
        process: 1.
          rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1, rib_path:1, rib_weight:1
          rib_flag: selected 
          rib_ext_flag: fib-mom 
          NHB-ID: (0, 271)
          route node lock: 2
          
Ruijie#show nsm nhb by-id 0-271

Note: NHB-ID consists of (separator, seq).

key: 600626465 proto: IPv4, NHB-ID: (0, 271), ref: 150, nh-num: 1 flags: informed (, vrf-id: 0, ::/0)
  proto: IPv4, priority: 0(master), weight: 1, ifindex: 2(GigabitEthernet 0/1), fast_sw_id: 0, fast_sw state: 1, qos: 0, mac:0000.0000.0000, 1.0.0.2
  rgate-num: 1
    proto: IPv4, ifx: 2(GigabitEthernet 0/1), if_vrf: 0, if_type: 3, if_etype: 2, rt: 0(common), priority: 0(master), weight:1, qos_id: 0, 1.0.0.2, mac:0000.0000.0000

Ruijie#

Ruijie#
Ruijie#
Ruijie#
Ruijie#sh ver detail
System description      : Ruijie EASY GATEWAY(RG-MTFi-CC(U2)-DE(EG)) by Ruijie Networks.
System start time       : 2019-09-11 11:51:33
System uptime           : 0:17:57:17
System hardware version : 1.00
System software version : RG-MTFi-CC(U2)-DE(EG)_RGOS 12.x(master)
System patch number     : NA
System software number  : M00122609102019
System serial number    : R0800273720FF
System boot version     : UNKNOWN
System rboot version    : N/A
System core version     : 4.9.166.877b75eea9dc45
System cpu partition    : 1
Module information:
Ruijie# sh run 

Building configuration...
Current configuration: 14949 bytes

version RG-MTFi-CC(U2)-DE(EG)_RGOS 12.x(master)
!
ip session direct-trans-disable
!
vrf global-vrf
 rd 1:2
 address-family ipv4
  route-target both 1:2
  exit-address-family
 address-family ipv6
  route-target both 1:2
  exit-address-family
!
vrf definition vrf2
!
vrf definition vrf3
 rd 4:1
 address-family ipv6
  route-target both 4:1
  exit-address-family
!
ip vrf vrf1
 rd 2:1
 route-target both 2:1
!         
no cwmp
!
install 0 RG-MTFi-CC(U2)-DE(EG)
!
sysmac 0800.2737.2010
!
enable service web-server http
enable service web-server https
webmaster level 0 username admin password 7 04361c0b370d
!
no service password-encryption
!
redundancy
!
vpdn limit_rate 15
!
vlan range 1-128
!
interface GigabitEthernet 0/0
 no switchport
 ip address 172.28.58.72 255.255.255.0
!
interface GigabitEthernet 0/1
 no switchport
 ip address 1.0.0.1 255.255.255.0
 ip router isis
!
interface GigabitEthernet 0/2
 no switchport
 ip address 2.0.0.1 255.255.255.0
 ip router isis
!
interface GigabitEthernet 0/3
!
interface GigabitEthernet 0/4
!
interface GigabitEthernet 0/5
!
interface GigabitEthernet 0/6
!
interface GigabitEthernet 0/7
!
interface GigabitEthernet 0/8
!
interface GigabitEthernet 0/9
!
interface VLAN 1
 ipv6 address 10::1/64
 ip address mix dhcp
 ip address mix 192.168.1.200 255.255.255.0
!
interface VLAN 2
 ipv6 address 20::1/64
!
interface VLAN 3
 ipv6 address 30::1/64
!
interface VLAN 4
 ipv6 address 40::1/64
!
interface VLAN 5
 ipv6 address 50::1/64
!
interface VLAN 6
 ipv6 address 60::1/64
!
interface VLAN 7
 ipv6 address 70::1/64
!
interface VLAN 8
 ipv6 address 80::1/64
!         
interface VLAN 9
 ipv6 address 90::1/64
!
interface VLAN 10
 ipv6 address 100::1/64
!
interface VLAN 11
 ipv6 address 110::1/64
!
interface VLAN 12
 ipv6 address 120::1/64
!
interface VLAN 13
 ipv6 address 130::1/64
!
interface VLAN 14
 ipv6 address 140::1/64
!
interface VLAN 15
 ipv6 address 150::1/64
!
interface VLAN 16
 ipv6 address 160::1/64
!         
interface VLAN 17
 ipv6 address 170::1/64
!
interface VLAN 18
 ipv6 address 180::1/64
!
interface VLAN 19
 ipv6 address 190::1/64
!
interface VLAN 20
 ipv6 address 200::1/64
!
interface VLAN 21
 ipv6 address 210::1/64
!
interface VLAN 22
 ipv6 address 220::1/64
!
interface VLAN 23
 ipv6 address 230::1/64
!
interface VLAN 24
 ipv6 address 240::1/64
!         
interface VLAN 25
 ipv6 address 250::1/64
!
interface VLAN 26
 ipv6 address 260::1/64
!
interface VLAN 27
 ipv6 address 270::1/64
!
interface VLAN 28
 ipv6 address 280::1/64
!
interface VLAN 29
 ipv6 address 290::1/64
!
interface VLAN 30
 ipv6 address 300::1/64
!
interface VLAN 31
 ipv6 address 310::1/64
!
interface VLAN 32
 ipv6 address 320::1/64
!         
interface VLAN 33
 ipv6 address 330::1/64
!
interface VLAN 34
 ipv6 address 340::1/64
!
interface VLAN 35
 ipv6 address 350::1/64
!
interface VLAN 36
 ipv6 address 360::1/64
!
interface VLAN 37
 ipv6 address 370::1/64
!
interface VLAN 38
 ipv6 address 380::1/64
!
interface VLAN 39
 ipv6 address 390::1/64
!
interface VLAN 40
 ipv6 address 400::1/64
!         
interface VLAN 41
 ipv6 address 410::1/64
!
interface VLAN 42
 ipv6 address 420::1/64
!
interface VLAN 43
 ipv6 address 430::1/64
!
interface VLAN 44
 ipv6 address 440::1/64
!
interface VLAN 45
 ipv6 address 450::1/64
!
interface VLAN 46
 ipv6 address 460::1/64
!
interface VLAN 47
 ipv6 address 470::1/64
!
interface VLAN 48
 ipv6 address 480::1/64
!         
interface VLAN 49
 ipv6 address 490::1/64
!
interface VLAN 50
 ipv6 address 500::1/64
!
interface VLAN 51
 ipv6 address 510::1/64
!
interface VLAN 52
 ipv6 address 520::1/64
!
interface VLAN 53
 ipv6 address 530::1/64
!
interface VLAN 54
 ipv6 address 540::1/64
!
interface VLAN 55
 ipv6 address 550::1/64
!
interface VLAN 56
 ipv6 address 560::1/64
!         
interface VLAN 57
 ipv6 address 570::1/64
!
interface VLAN 58
 ipv6 address 580::1/64
!
interface VLAN 59
 ipv6 address 590::1/64
!
interface VLAN 60
 ipv6 address 600::1/64
!
interface VLAN 61
 ipv6 address 610::1/64
!
interface VLAN 62
 ipv6 address 620::1/64
!
interface VLAN 63
 ipv6 address 630::1/64
!
interface VLAN 64
 ipv6 address 640::1/64
!         
interface VLAN 65
 ipv6 address 650::1/64
!
interface VLAN 66
 ipv6 address 660::1/64
!
interface VLAN 67
 ipv6 address 670::1/64
!
interface VLAN 68
 ipv6 address 680::1/64
!
interface VLAN 69
 ipv6 address 690::1/64
!
interface VLAN 70
 ipv6 address 700::1/64
!
interface VLAN 71
 ipv6 address 710::1/64
!
interface VLAN 72
 ipv6 address 720::1/64
!         
interface VLAN 73
 ipv6 address 730::1/64
!
interface VLAN 74
 ipv6 address 740::1/64
!
interface VLAN 75
 ipv6 address 750::1/64
!
interface VLAN 76
 ipv6 address 760::1/64
!
interface VLAN 77
 ipv6 address 770::1/64
!
interface VLAN 78
 ipv6 address 780::1/64
!
interface VLAN 79
 ipv6 address 790::1/64
!
interface VLAN 80
 ipv6 address 800::1/64
!         
interface VLAN 81
 ipv6 address 810::1/64
!
interface VLAN 82
 ipv6 address 820::1/64
!
interface VLAN 83
 ipv6 address 830::1/64
!
interface VLAN 84
 ipv6 address 840::1/64
!
interface VLAN 85
 ipv6 address 850::1/64
!
interface VLAN 86
 ipv6 address 860::1/64
!
interface VLAN 87
 ipv6 address 870::1/64
!
interface VLAN 88
 ipv6 address 880::1/64
!         
interface VLAN 89
 ipv6 address 890::1/64
!
interface VLAN 90
 ipv6 address 900::1/64
!
interface VLAN 91
 ipv6 address 910::1/64
!
interface VLAN 92
 ipv6 address 920::1/64
!
interface VLAN 93
 ipv6 address 930::1/64
!
interface VLAN 94
 ipv6 address 940::1/64
!
interface VLAN 95
 ipv6 address 950::1/64
!
interface VLAN 96
 ipv6 address 960::1/64
!         
interface VLAN 97
 ipv6 address 970::1/64
!
interface VLAN 98
 ipv6 address 980::1/64
!
interface VLAN 99
 ipv6 address 990::1/64
!
interface VLAN 100
 ipv6 address 1000::1/64
!
interface VLAN 101
 ipv6 address 1010::1/64
!
interface VLAN 102
 ipv6 address 1020::1/64
!
interface VLAN 103
 ipv6 address 1030::1/64
!
interface VLAN 104
 ipv6 address 1040::1/64
!         
interface VLAN 105
 ipv6 address 1050::1/64
!
interface VLAN 106
 ipv6 address 1060::1/64
!
interface VLAN 107
 ipv6 address 1070::1/64
!
interface VLAN 108
 ipv6 address 1080::1/64
!
interface VLAN 109
 ipv6 address 1090::1/64
!
interface VLAN 110
 ipv6 address 1100::1/64
!
interface VLAN 111
 ipv6 address 1110::1/64
!
interface VLAN 112
 ipv6 address 1120::1/64
!         
interface VLAN 113
 ipv6 address 1130::1/64
!
interface VLAN 114
 ipv6 address 1140::1/64
!
interface VLAN 115
 ipv6 address 1150::1/64
!
interface VLAN 116
 ipv6 address 1160::1/64
!
interface VLAN 117
 ipv6 address 1170::1/64
!
interface VLAN 118
 ipv6 address 1180::1/64
!
interface VLAN 119
 ipv6 address 1190::1/64
!
interface VLAN 120
 ipv6 address 1200::1/64
!         
interface VLAN 121
 ipv6 address 1210::1/64
!
interface VLAN 122
 ipv6 address 1220::1/64
!
interface VLAN 123
 ipv6 address 1230::1/64
!
interface VLAN 124
 ipv6 address 1240::1/64
!
interface VLAN 125
 ipv6 address 1250::1/64
!
interface VLAN 126
 ipv6 address 1260::1/64
!
interface VLAN 127
 ipv6 address 1270::1/64
!
interface VLAN 128
 ipv6 address 1280::1/64
!         
router bgp 65001
 bgp log-neighbor-changes
 bgp graceful-restart restart-time 120
 bgp graceful-restart stalepath-time 360
 bgp graceful-restart
 bgp nsr
 neighbor 1::2 remote-as 65002
 neighbor 2::2 remote-as 65002
 neighbor 3::2 remote-as 65002
 neighbor 4::2 remote-as 65002
 neighbor 5::2 remote-as 65002
 neighbor 6::2 remote-as 65002
 neighbor 7::2 remote-as 65002
 neighbor 8::2 remote-as 65002
 neighbor 9::2 remote-as 65002
 neighbor a::2 remote-as 65002
 neighbor b::2 remote-as 65002
 neighbor c::2 remote-as 65002
 neighbor d::2 remote-as 65002
 neighbor e::2 remote-as 65002
 neighbor f::2 remote-as 65002
 neighbor 10::2 remote-as 65002
 neighbor 11::2 remote-as 65002
 neighbor 12::2 remote-as 65002
 neighbor 13::2 remote-as 65002
 neighbor 14::2 remote-as 65002
 neighbor 15::2 remote-as 65002
 neighbor 16::2 remote-as 65002
 neighbor 17::2 remote-as 65002
 neighbor 18::2 remote-as 65002
 neighbor 19::2 remote-as 65002
 neighbor 1a::2 remote-as 65002
 neighbor 1b::2 remote-as 65002
 neighbor 1c::2 remote-as 65002
 neighbor 1d::2 remote-as 65002
 neighbor 1e::2 remote-as 65002
 neighbor 1f::2 remote-as 65002
 neighbor 20::2 remote-as 65002
 address-family ipv4
  no neighbor 1::2 activate
  no neighbor 2::2 activate
  no neighbor 3::2 activate
  no neighbor 4::2 activate
  no neighbor 5::2 activate
  no neighbor 6::2 activate
  no neighbor 7::2 activate
  no neighbor 8::2 activate
  no neighbor 9::2 activate
  no neighbor a::2 activate
  no neighbor b::2 activate
  no neighbor c::2 activate
  no neighbor d::2 activate
  no neighbor e::2 activate
  no neighbor f::2 activate
  no neighbor 10::2 activate
  no neighbor 11::2 activate
  no neighbor 12::2 activate
  no neighbor 13::2 activate
  no neighbor 14::2 activate
  no neighbor 15::2 activate
  no neighbor 16::2 activate
  no neighbor 17::2 activate
  no neighbor 18::2 activate
  no neighbor 19::2 activate
  no neighbor 1a::2 activate
  no neighbor 1b::2 activate
  no neighbor 1c::2 activate
  no neighbor 1d::2 activate
  no neighbor 1e::2 activate
  no neighbor 1f::2 activate
  no neighbor 20::2 activate
  exit-address-family
 address-family ipv6
  maximum-paths ebgp 32
  neighbor 1::2 activate
  neighbor 2::2 activate
  neighbor 3::2 activate
  neighbor 4::2 activate
  neighbor 5::2 activate
  neighbor 6::2 activate
  neighbor 7::2 activate
  neighbor 8::2 activate
  neighbor 9::2 activate
  neighbor a::2 activate
  neighbor b::2 activate
  neighbor c::2 activate
  neighbor d::2 activate
  neighbor e::2 activate
  neighbor f::2 activate
  neighbor 10::2 activate
  neighbor 11::2 activate
  neighbor 12::2 activate
  neighbor 13::2 activate
  neighbor 14::2 activate
  neighbor 15::2 activate
  neighbor 16::2 activate
  neighbor 17::2 activate
  neighbor 18::2 activate
  neighbor 19::2 activate
  neighbor 1a::2 activate
  neighbor 1b::2 activate
  neighbor 1c::2 activate
  neighbor 1d::2 activate
  neighbor 1e::2 activate
  neighbor 1f::2 activate
  neighbor 20::2 activate
  exit-address-family
!
arp 2.0.0.2 0000.0000.0002 arpa
!
grpc
 rpc openr enable
 subscr enable
 subscr-source-interface GigabitEthernet 0/0
 reply-source-interface GigabitEthernet 0/0
 user-client 61919 ruijie 172.28.56.134
 user-client 65534 ruijie 172.29.69.27
 user-client 65535 ruijie 172.28.57.128
 subscription ruijie
  exit-grpc-subscription
!
router isis
 net 49.0001.0000.0000.0001.00
 graceful-restart
!
router ospf 1
 graceful-restart
 network 1.0.0.0 0.0.0.255 area 0
 network 2.0.0.0 0.0.0.255 area 0
!
ipv6 route 1:24:123::/64 2000::1
ipv6 route 2000::/64 10::2
ipv6 route 2000::/64 20::2
ipv6 route 2000::/64 30::2
ipv6 route 2000::/64 40::2
ipv6 route 2000::/64 50::2
ipv6 route 2000::/64 60::2
ipv6 route 2000::/64 70::2
ipv6 route 2000::/64 80::2
ipv6 route 2000::/64 90::2
ipv6 route 2000::/64 100::2
ipv6 route 2000::/64 110::2
ipv6 route 2000::/64 120::2
ipv6 route 2000::/64 130::2
ipv6 route 2000::/64 140::2
ipv6 route 2000::/64 150::2
ipv6 route 2000::/64 160::2
ipv6 route 2000::/64 170::2
ipv6 route 2000::/64 180::2
ipv6 route 2000::/64 190::2
ipv6 route 2000::/64 200::2
ipv6 route 2000::/64 210::2
ipv6 route 2000::/64 220::2
ipv6 route 2000::/64 230::2
ipv6 route 2000::/64 240::2
ipv6 route 2000::/64 250::2
ipv6 route 2000::/64 260::2
ipv6 route 2000::/64 270::2
ipv6 route 2000::/64 280::2
ipv6 route 2000::/64 290::2
ipv6 route 2000::/64 300::2
ipv6 route 2000::/64 310::2
ipv6 route 2000::/64 320::2
ipv6 route 2000::/64 330::2
ipv6 route 2000::/64 340::2
ipv6 route 2000::/64 350::2
ipv6 route 2000::/64 360::2
ipv6 route 2000::/64 370::2
ipv6 route 2000::/64 380::2
ipv6 route 2000::/64 390::2
ipv6 route 2000::/64 400::2
ipv6 route 2000::/64 410::2
ipv6 route 2000::/64 420::2
ipv6 route 2000::/64 430::2
ipv6 route 2000::/64 440::2
ipv6 route 2000::/64 450::2
ipv6 route 2000::/64 460::2
ipv6 route 2000::/64 470::2
ipv6 route 2000::/64 480::2
ipv6 route 2000::/64 490::2
ipv6 route 2000::/64 500::2
ipv6 route 2000::/64 510::2
ipv6 route 2000::/64 520::2
ipv6 route 2000::/64 530::2
ipv6 route 2000::/64 540::2
ipv6 route 2000::/64 550::2
ipv6 route 2000::/64 560::2
ipv6 route 2000::/64 570::2
ipv6 route 2000::/64 580::2
ipv6 route 2000::/64 590::2
ipv6 route 2000::/64 600::2
ipv6 route 2000::/64 610::2
ipv6 route 2000::/64 620::2
ipv6 route 2000::/64 630::2
ipv6 route 2000::/64 640::2
ipv6 route 2000::/64 650::2
ipv6 route 2000::/64 660::2
ipv6 route 2000::/64 670::2
ipv6 route 2000::/64 680::2
ipv6 route 2000::/64 690::2
ipv6 route 2000::/64 700::2
ipv6 route 2000::/64 710::2
ipv6 route 2000::/64 720::2
ipv6 route 2000::/64 730::2
ipv6 route 2000::/64 740::2
ipv6 route 2000::/64 750::2
ipv6 route 2000::/64 760::2
ipv6 route 2000::/64 770::2
ipv6 route 2000::/64 780::2
ipv6 route 2000::/64 790::2
ipv6 route 2000::/64 800::2
ipv6 route 2000::/64 810::2
ipv6 route 2000::/64 820::2
ipv6 route 2000::/64 830::2
ipv6 route 2000::/64 840::2
ipv6 route 2000::/64 850::2
ipv6 route 2000::/64 860::2
ipv6 route 2000::/64 870::2
ipv6 route 2000::/64 880::2
ipv6 route 2000::/64 890::2
ipv6 route 2000::/64 900::2
ipv6 route 2000::/64 910::2
ipv6 route 2000::/64 920::2
ipv6 route 2000::/64 930::2
ipv6 route 2000::/64 940::2
ipv6 route 2000::/64 950::2
ipv6 route 2000::/64 960::2
ipv6 route 2000::/64 970::2
ipv6 route 2000::/64 980::2
ipv6 route 2000::/64 990::2
ipv6 route 2000::/64 1000::2
ipv6 route 2000::/64 1010::2
ipv6 route 2000::/64 1020::2
ipv6 route 2000::/64 1030::2
ipv6 route 2000::/64 1040::2
ipv6 route 2000::/64 1050::2
ipv6 route 2000::/64 1060::2
ipv6 route 2000::/64 1070::2
ipv6 route 2000::/64 1080::2
ipv6 route 2000::/64 1090::2
ipv6 route 2000::/64 1100::2
ipv6 route 2000::/64 1110::2
ipv6 route 2000::/64 1120::2
ipv6 route 2000::/64 1130::2
ipv6 route 2000::/64 1140::2
ipv6 route 2000::/64 1150::2
ipv6 route 2000::/64 1160::2
ipv6 route 2000::/64 1170::2
ipv6 route 2000::/64 1180::2
ipv6 route 2000::/64 1190::2
ipv6 route 2000::/64 1200::2
ipv6 route 2000::/64 1210::2
ipv6 route 2000::/64 1220::2
ipv6 route 2000::/64 1230::2
ipv6 route 2000::/64 1240::2
ipv6 route 2000::/64 1250::2
ipv6 route 2000::/64 1260::2
ipv6 route 2000::/64 1270::2
ipv6 route 2000::/64 1280::2
!
ip route arp-to-host interface GigabitEthernet 0/2
!
ip route 172.0.0.0 255.0.0.0 172.28.58.1
!         
line console 0
line vty 0 35
 privilege level 15
 no login
!
end
Ruijie#               是ipv
% Unrecognized host or address.
Ruijie#sh ipv6 rou 

IPv6 routing table name - Default - 0 entries
Codes:  C - Connected, L - Local, S - Static
        R - RIP, O - OSPF, B - BGP, I - IS-IS, V - Overflow route
        N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
        E1 - OSPF external type 1, E2 - OSPF external type 2
        SU - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2
        IA - Inter area, N - Nd to host

Ruijie#sh ver detal
                  ^
% Invalid input detected at '^' marker.

Ruijie#sh ver detail
System description      : Ruijie EASY GATEWAY(RG-MTFi-CC(U2)-DE(EG)) by Ruijie Networks.
System start time       : 2019-09-11 11:51:33
System uptime           : 0:18:00:53
System hardware version : 1.00
System software version : RG-MTFi-CC(U2)-DE(EG)_RGOS 12.x(master)
System patch number     : NA
System software number  : M00122609102019
System serial number    : R0800273720FF
System boot version     : UNKNOWN
System rboot version    : N/A
System core version     : 4.9.166.877b75eea9dc45
System cpu partition    : 1
Module information:
Ruijie#

Ruijie#
Ruijie#
Ruijie#
Ruijie#sh ip route data
Ruijie#sh ip route data
Codes: K - kernel, C - connected, S - static, R - RIP, B - BGP
       O - OSPF, IA - OSPF inter area
       N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
       E1 - OSPF external type 1, E2 - OSPF external type 2
       i - IS-IS, L1 - IS-IS level-1, L2 - IS-IS level-2, ia - IS-IS inter area
       A - Block add, U - Block update, AU - Block add And block update
       AH - Arp-to-host
       > - selected route, * - FIB route, p - stale info


Gateway of last resort is no set
C    *>  1.0.0.0/24 is directly connected, GigabitEthernet 0/1        (recursive, rg_flag:0x60 *, mac=0000.0000.0000
          rg_flag: fib active 
          03:08:33, nhop_flag:0x3, nhop_ex_flag:0x0, nh_vrf:0, nh_type:1, nh_rgate_num:1, tag:0, qos_id 0,weight :1,fast_sw_id:0, mac=0000.0000.0000
          nhop_flag: active fib 
          nhop_ext_flag: 
          rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1, rib_path:1, rib_weight:1
          rib_flag: selected 
          rib_ext_flag: fib-mom 
          NHB-ID: (0, 272)
O        1.0.0.0/24 [110/1] is directly connected, GigabitEthernet 0/1        (recursive, rg_flag:0x40, mac=0000.0000.0000
          rg_flag: active 
          03:08:01, nhop_flag:0x1, nhop_ex_flag:0x0, nh_vrf:0, nh_type:1, nh_rgate_num:1, tag:0, qos_id 0,weight :1,fast_sw_id:0, mac=0000.0000.0000
          nhop_flag: active 
          nhop_ext_flag: 
        process: 1.
          rib_flag:0x0, rib_ext_flag:0x0, rib_nh_active_num:1, rib_rgate_num:1, rib_path:0, rib_weight:0
          rib_flag: 
          rib_ext_flag: 
          NHB-ID: NULL
I L1     1.0.0.0/24 [115/1] is directly connected, GigabitEthernet 0/1        (recursive, rg_flag:0x42, mac=0000.0000.0000
          rg_flag: active-changed active 
          02:10:06, nhop_flag:0x1, nhop_ex_flag:0x40, nh_vrf:0, nh_type:1, nh_rgate_num:1, tag:0, qos_id 0,weight :1,fast_sw_id:0, mac=0000.0000.0000
          nhop_flag: active 
          nhop_ext_flag: active-changed 
        process: 513.
          rib_flag:0x20, rib_ext_flag:0x0, rib_nh_active_num:1, rib_rgate_num:1, rib_path:0, rib_weight:0
          rib_flag: changed 
          rib_ext_flag: 
          NHB-ID: NULL
          route node lock: 4
C    *>  1.0.0.1/32 is directly connected, GigabitEthernet 0/1        (recursive, rg_flag:0x60 *, mac=0000.0000.0000
          rg_flag: fib active 
          03:08:36, nhop_flag:0x3, nhop_ex_flag:0x0, nh_vrf:0, nh_type:1, nh_rgate_num:1, tag:0, qos_id 0,weight :1,fast_sw_id:0, mac=0000.0000.0000
          nhop_flag: active fib 
          nhop_ext_flag: 
          rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1, rib_path:1, rib_weight:1
          rib_flag: selected 
          rib_ext_flag: local-host fib-mom 
          NHB-ID: (0, 270)
          route node lock: 2
C    *>  2.0.0.0/24 is directly connected, GigabitEthernet 0/2        (recursive, rg_flag:0x60 *, mac=0000.0000.0000
          rg_flag: fib active 
          18:49:32, nhop_flag:0x3, nhop_ex_flag:0x0, nh_vrf:0, nh_type:1, nh_rgate_num:1, tag:0, qos_id 0,weight :1,fast_sw_id:0, mac=0000.0000.0000
          nhop_flag: active fib 
          nhop_ext_flag: 
          rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1, rib_path:1, rib_weight:1
          rib_flag: selected 
          rib_ext_flag: fib-mom 
          NHB-ID: (0, 11)
O        2.0.0.0/24 [110/1] is directly connected, GigabitEthernet 0/2        (recursive, rg_flag:0x40, mac=0000.0000.0000
          rg_flag: active 
          03:08:00, nhop_flag:0x1, nhop_ex_flag:0x0, nh_vrf:0, nh_type:1, nh_rgate_num:1, tag:0, qos_id 0,weight :1,fast_sw_id:0, mac=0000.0000.0000
          nhop_flag: active 
          nhop_ext_flag: 
        process: 1.
          rib_flag:0x0, rib_ext_flag:0x0, rib_nh_active_num:1, rib_rgate_num:1, rib_path:0, rib_weight:0
          rib_flag: 
          rib_ext_flag: 
          NHB-ID: NULL
I L1     2.0.0.0/24 [115/1] is directly connected, GigabitEthernet 0/2        (recursive, rg_flag:0x42, mac=0000.0000.0000
          rg_flag: active-changed active 
          02:10:09, nhop_flag:0x1, nhop_ex_flag:0x40, nh_vrf:0, nh_type:1, nh_rgate_num:1, tag:0, qos_id 0,weight :1,fast_sw_id:0, mac=0000.0000.0000
          nhop_flag: active 
          nhop_ext_flag: active-changed 
        process: 513.
          rib_flag:0x20, rib_ext_flag:0x0, rib_nh_active_num:1, rib_rgate_num:1, rib_path:0, rib_weight:0
          rib_flag: changed 
          rib_ext_flag: 
          NHB-ID: NULL
          route node lock: 4
C    *>  2.0.0.1/32 is directly connected, GigabitEthernet 0/2        (recursive, rg_flag:0x60 *, mac=0000.0000.0000
          rg_flag: fib active 
          18:49:33, nhop_flag:0x3, nhop_ex_flag:0x0, nh_vrf:0, nh_type:1, nh_rgate_num:1, tag:0, qos_id 0,weight :1,fast_sw_id:0, mac=0000.0000.0000
          nhop_flag: active fib 
          nhop_ext_flag: 
          rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1, rib_path:1, rib_weight:1
          rib_flag: selected 
          rib_ext_flag: local-host fib-mom 
          NHB-ID: (0, 12)
          route node lock: 2
AH    *>  2.0.0.2/32 [1/0] via 2.0.0.2, GigabitEthernet 0/2        (recursive, rg_flag:0x60 *, mac=0000.0000.0000
          rg_flag: fib active 
          16:01:52, nhop_flag:0x3, nhop_ex_flag:0x0, nh_vrf:0, nh_type:4, nh_rgate_num:1, tag:0, qos_id 0,weight :1,fast_sw_id:0, mac=0000.0000.0000
          nhop_flag: active fib 
          nhop_ext_flag: 
          rib_flag:0x10, rib_ext_flag:0x40000, rib_nh_active_num:1, rib_rgate_num:1, rib_path:1, rib_weight:1
          rib_flag: selected 
          rib_ext_flag: 
          NHB-ID: NULL
          route node lock: 2
AH    *>  2.0.0.3/32 [1/0] via 2.0.0.3, GigabitEthernet 0/2        (recursive, rg_flag:0x60 *, mac=0000.0000.0000
          rg_flag: fib active 
          02:07:22, nhop_flag:0x3, nhop_ex_flag:0x0, nh_vrf:0, nh_type:4, nh_rgate_num:1, tag:0, qos_id 0,weight :1,fast_sw_id:0, mac=0000.0000.0000
          nhop_flag: active fib 
          nhop_ext_flag: 
          rib_flag:0x10, rib_ext_flag:0x40000, rib_nh_active_num:1, rib_rgate_num:1, rib_path:1, rib_weight:1
          rib_flag: selected 
          rib_ext_flag: 
          NHB-ID: NULL
          route node lock: 2
O    *>  10.0.0.0/24 [110/2] via 1.0.0.2, GigabitEthernet 0/1        (recursive, rg_flag:0x60 *, mac=0000.0000.0000
          rg_flag: fib active 
          03:01:33, nhop_flag:0x3, nhop_ex_flag:0x0, nh_vrf:0, nh_type:4, nh_rgate_num:1, tag:0, qos_id 0,weight :1,fast_sw_id:0, mac=0000.0000.0000
          nhop_flag: active fib 
          nhop_ext_flag: 
        process: 1.
          rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1, rib_path:1, rib_weight:1
          rib_flag: selected 
          rib_ext_flag: fib-mom 
          NHB-ID: (0, 271)
          route node lock: 2
O    *>  10.0.1.0/24 [110/2] via 1.0.0.2, GigabitEthernet 0/1        (recursive, rg_flag:0x60 *, mac=0000.0000.0000
          rg_flag: fib active 
          03:01:33, nhop_flag:0x3, nhop_ex_flag:0x0, nh_vrf:0, nh_type:4, nh_rgate_num:1, tag:0, qos_id 0,weight :1,fast_sw_id:0, mac=0000.0000.0000
          nhop_flag: active fib 
          nhop_ext_flag: 
        process: 1.
          rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1, rib_path:1, rib_weight:1
          rib_flag: selected 
          rib_ext_flag: fib-mom 
          NHB-ID: (0, 271)
          route node lock: 2
O    *>  10.0.2.0/24 [110/2] via 1.0.0.2, GigabitEthernet 0/1        (recursive, rg_flag:0x60 *, mac=0000.0000.0000
          rg_flag: fib active 
          03:01:33, nhop_flag:0x3, nhop_ex_flag:0x0, nh_vrf:0, nh_type:4, nh_rgate_num:1, tag:0, qos_id 0,weight :1,fast_sw_id:0, mac=0000.0000.0000
          nhop_flag: active fib 
          nhop_ext_flag: 
        proc

        Returns:
{'10.0.2.0/24/Note': 'NHB-ID consists of (separator'
'2.0.0.1/32/rg_flag': 'fib active'
'2.0.0.3/32/fast_sw_id': '0'
'10.0.2.0/24/nh-num': '1 flags'
'2.0.0.3/32/route node lock': '2'
'10.0.0.0/24/route node lock': '2'
'2.0.0.2/32/nhop_flag': 'active fib'
'10.0.2.0/24/nh_rgate_num': '1'
'10.0.2.0/24/neighbor f': ''
'10.0.2.0/24/ipv6 address 110': ''
'10.0.2.0/24/neighbor d': ''
'10.0.2.0/24/neighbor c': ''
'10.0.2.0/24/neighbor b': ''
'10.0.2.0/24/neighbor a': ''
'10.0.2.0/24/ipv6 address 760': ''
'2.0.0.3/32/NHB-ID': 'NULL'
'10.0.2.0/24/ipv6 address 880': ''
'2.0.0.2/32/tag': '0'
'10.0.2.0/24/ipv6 address 1220': ''
'2.0.0.0/24/nhop_ext_flag': 'active-changed'
'10.0.2.0/24/ipv6 address 500': ''
'10.0.1.0/24/mac': '0000.0000.0000'
'10.0.2.0/24/ipv6 address 640': ''
'10.0.2.0/24/System cpu partition': '1'
'10.0.1.0/24/nh_rgate_num': '1'
'1.0.0.0/24/fast_sw_id': '0'
'2.0.0.1/32/NHB-ID/2': '12'
'2.0.0.1/32/NHB-ID/1': '0'
'10.0.0.0/24/mac': '0000.0000.0000'
'10.0.2.0/24/neighbor 9': ''
'10.0.2.0/24/neighbor 8': ''
'10.0.2.0/24/neighbor 7': ''
'10.0.2.0/24/neighbor 6': ''
'10.0.2.0/24/neighbor 5': ''
'10.0.2.0/24/rib_ext_flag': 'fib-mom'
'10.0.2.0/24/neighbor 3': ''
'10.0.2.0/24/neighbor 2': ''
'10.0.2.0/24/neighbor 1': ''
'10.0.2.0/24/ipv6 address 370': ''
'10.0.2.0/24/ipv6 address 470': ''
'10.0.2.0/24/ipv6 address 940': ''
'2.0.0.1/32/rib_ext_flag': 'local-host fib-mom'
'10.0.0.0/24/rib_rgate_num': '1'
'10.0.2.0/24/nh_type': '4'
'10.0.2.0/24/ipv6 address 1020': ''
'2.0.0.0/24/03': '08'
'10.0.2.0/24/ipv6 address 570': ''
'1.0.0.1/32/nh_vrf': '0'
'2.0.0.1/32/weight': '1'
'2.0.0.3/32/nh_rgate_num': '1'
'10.0.1.0/24/03': '01'
'10.0.1.0/24/01': '13'
'10.0.2.0/24/ipv6 address 930': ''
'10.0.2.0/24/vrf-id': '0'
'2.0.0.1/32/nh_vrf': '0'
'1.0.0.0/24/rib_rgate_num': '1'
'2.0.0.2/32/16': '01'
'10.0.1.0/24/nh_type': '4'
'1.0.0.1/32/rib_nh_active_num': '1'
'10.0.0.0/24/rib_weight': '1'
'10.0.2.0/24/rg_flag': 'fib active'
'10.0.2.0/24/ipv6 address 20': ''
'10.0.2.0/24/ipv6 address 90': ''
'1.0.0.1/32/rib_path': '1'
'10.0.2.0/24/neighbor e': ''
'10.0.2.0/24/no neighbor 15': ''
'10.0.2.0/24/no neighbor 14': ''
'10.0.2.0/24/ipv6 address 680': ''
'10.0.2.0/24/': ''
'10.0.2.0/24/no neighbor 11': ''
'10.0.2.0/24/no neighbor 10': ''
'10.0.2.0/24/no neighbor 13': ''
'1.0.0.1/32/rg_flag': 'fib active'
'10.0.2.0/24/ipv6 address 720': ''
'2.0.0.2/32/nh_rgate_num': '1'
'10.0.2.0/24/no neighbor 19': ''
'10.0.2.0/24/no neighbor 18': ''
'10.0.2.0/24/System boot version': 'UNKNOWN'
'10.0.2.0/24/ipv6 address 250': ''
'10.0.1.0/24/fast_sw_id': '0'
'1.0.0.1/32/nh_type': '1'
'10.0.2.0/24/ipv6 address 1260': ''
'10.0.2.0/24/System patch number': 'NA'
'10.0.2.0/24/ipv6 address 1140': ''
'2.0.0.2/32/14': '13'
'1.0.0.1/32/rib_rgate_num': '1'
'2.0.0.0/24/rib_nh_active_num': '1'
'2.0.0.3/32/weight': '1'
'10.0.1.0/24/nhop_ex_flag': '0x0'
'2.0.0.0/24/rib_rgate_num': '1'
'10.0.2.0/24/no neighbor 1d': ''
'10.0.2.0/24/no neighbor 1f': ''
'10.0.2.0/24/no neighbor 1a': ''
'10.0.2.0/24/no neighbor 1c': ''
'10.0.2.0/24/no neighbor 1b': ''
'10.0.2.0/24/ipv6 address 1100': ''
'1.0.0.1/32/fast_sw_id': '0'
'1.0.0.1/32/rib_weight': '1'
'10.0.2.0/24/System software number': 'M00122609102019'
'2.0.0.0/24/01': '19'
'2.0.0.0/24/00': '21'
'2.0.0.1/32/route node lock': '2'
'2.0.0.0/24/02': '10'
'10.0.2.0/24/ipv6 address 610': ''
'1.0.0.1/32/mac': '0000.0000.0000'
'10.0.2.0/24/if_type': '3'
'10.0.2.0/24/System serial number': 'R0800273720FF'
'10.0.2.0/24/ipv6 address 750': ''
'10.0.2.0/24/ipv6 address 240': ''
'10.0.2.0/24/ref': '150'
'10.0.2.0/24/ipv6 address 530': ''
'2.0.0.0/24/tag': '0'
'10.0.2.0/24/rib_nh_active_num': '1'
'2.0.0.3/32/nhop_ext_flag': ''
'2.0.0.3/32/mac': '0000.0000.0000'
'10.0.1.0/24/rib_nh_active_num': '1'
'10.0.2.0/24/priority': '0(master)'
'10.0.2.0/24/ipv6 address 1030': ''
'10.0.2.0/24/ipv6 address 280': ''
'1.0.0.0/24/rib_path': '0'
'10.0.2.0/24/ipv6 address 320': ''
'10.0.2.0/24/ipv6 address 870': ''
'10.0.2.0/24/tag': '0'
'10.0.2.0/24/ipv6 address 970': ''
'10.0.2.0/24/no neighbor 16': ''
'2.0.0.2/32/nh_vrf': '0'
'10.0.2.0/24/ipv6 address 440': ''
'2.0.0.1/32/nh_type': '1'
'2.0.0.2/32/rib_flag': 'selected'
'10.0.2.0/24/ipv6 address 800': ''
'2.0.0.1/32/nhop_ex_flag': '0x0'
'2.0.0.0/24/rib_ext_flag': ''
'2.0.0.0/24/nhop_flag': 'active'
'10.0.1.0/24/rib_rgate_num': '1'
'10.0.2.0/24/process': ''
'10.0.2.0/24/neighbor 20': ''
'10.0.2.0/24/ipv6 address 1120': ''
'10.0.2.0/24/ipv6 address 60': ''
'10.0.2.0/24/ipv6 address 920': ''
'10.0.2.0/24/ipv6 address 190': ''
'10.0.2.0/24/ipv6 address 210': ''
'2.0.0.2/32/rib_weight': '1'
'2.0.0.2/32/rib_rgate_num': '1'
'10.0.2.0/24/NHB-ID': '(0'
'2.0.0.3/32/rib_rgate_num': '1'
'10.0.2.0/24/ipv6 address 650': ''
'1.0.0.0/24/NHB-ID': 'NULL'
'2.0.0.3/32/rib_nh_active_num': '1'
'10.0.2.0/24/ipv6 address 100': ''
'10.0.2.0/24/ipv6 address 260': ''
'10.0.2.0/24/ipv6 address 710': ''
'2.0.0.0/24/rib_path': '0'
'10.0.0.0/24/nh_type': '4'
'10.0.2.0/24/ipv6 address 1210': ''
'10.0.2.0/24/ipv6 address 890': ''
'1.0.0.0/24/nhop_ext_flag': 'active-changed'
'10.0.2.0/24/neighbor 17': ''
'10.0.2.0/24/ipv6 address 70': ''
'10.0.0.0/24/nhop_ex_flag': '0x0'
'2.0.0.2/32/weight': '1'
'1.0.0.0/24/rib_nh_active_num': '1'
'10.0.0.0/24/rib_flag': 'selected'
'2.0.0.3/32/nhop_ex_flag': '0x0'
'10.0.0.0/24/fast_sw_id': '0'
'10.0.2.0/24/ipv6 address 620': ''
'10.0.2.0/24/ipv6 address 360': ''
'10.0.2.0/24/ipv6 address 400': ''
'1.0.0.0/24/route node lock': '4'
'10.0.2.0/24/fast_sw state': '1'
'10.0.2.0/24/ipv6 address 1070': ''
'1.0.0.0/24/02': '10'
'1.0.0.0/24/03': '08'
'1.0.0.0/24/00': '21'
'1.0.0.0/24/01': '19'
'10.0.2.0/24/neighbor 4': ''
'10.0.2.0/24/ipv6 address 560': ''
'10.0.2.0/24/route node lock': '2'
'10.0.2.0/24/rib_flag': 'selected'
'10.0.2.0/24/ipv6 address 1170': ''
'2.0.0.2/32/NHB-ID': 'NULL'
'1.0.0.0/24/tag': '0'
'1.0.0.0/24/rib_flag': 'changed'
'10.0.0.0/24/nh_vrf': '0'
'10.0.2.0/24/no neighbor 2': ''
'10.0.2.0/24/ipv6 address 30': ''
'10.0.2.0/24/neighbor 19': ''
'10.0.2.0/24/neighbor 18': ''
'10.0.2.0/24/ipv6 address 840': ''
'10.0.2.0/24/neighbor 16': ''
'10.0.2.0/24/neighbor 15': ''
'10.0.2.0/24/neighbor 14': ''
'10.0.2.0/24/neighbor 13': ''
'10.0.2.0/24/neighbor 12': ''
'10.0.2.0/24/neighbor 11': ''
'10.0.2.0/24/neighbor 10': ''
'10.0.2.0/24/nhop_ex_flag': '0x0'
'10.0.2.0/24/ipv6 address 490': ''
'10.0.2.0/24/System core version': '4.9.166.877b75eea9dc45'
'10.0.2.0/24/nh_vrf': '0'
'2.0.0.0/24/NHB-ID': 'NULL'
'10.0.2.0/24/ipv6 address 310': ''
'10.0.2.0/24/System software version': 'RG-MTFi-CC(U2)-DE(EG)_RGOS 12.x(master)'
'10.0.2.0/24/ifx': '2(GigabitEthernet 0/1)'
'1.0.0.0/24/weight': '1'
'10.0.2.0/24/neighbor 1d': ''
'10.0.2.0/24/neighbor 1c': ''
'10.0.2.0/24/neighbor 1b': ''
'10.0.2.0/24/System start time': '2019-09-11 11'
'10.0.2.0/24/ipv6 address 1250': ''
'10.0.2.0/24/fast_sw_id': '0'
'10.0.2.0/24/ipv6 address 690': ''
'10.0.2.0/24/ipv6 address 220': ''
'10.0.2.0/24/route-target both 4': '1'
'10.0.2.0/24/route-target both 2': '1'
'10.0.1.0/24/weight': '1'
'10.0.2.0/24/ipv6 address 380': ''
'10.0.2.0/24/ipv6 address 1150': ''
'10.0.2.0/24/ipv6 address 140': ''
'10.0.2.0/24/ipv6 address 990': ''
'10.0.2.0/24/ipv6 address 1090': ''
'10.0.0.0/24/weight': '1'
'10.0.2.0/24/mac': '0000.0000.0000'
'10.0.2.0/24/qos_id': '0'
'10.0.2.0/24/ipv6 address 1040': ''
'10.0.2.0/24/ipv6 address 130': ''
'2.0.0.1/32/rib_rgate_num': '1'
'10.0.2.0/24/ipv6 address 660': ''
'2.0.0.0/24/17': '01'
'2.0.0.3/32/00': '19'
'2.0.0.0/24/fast_sw_id': '0'
'2.0.0.0/24/18': '49'
'10.0.2.0/24/neighbor 1e': ''
'10.0.0.0/24/nhop_flag': 'active fib'
'10.0.2.0/24/ipv6 address 740': ''
'10.0.2.0/24/System rboot version': 'N/A'
'10.0.2.0/24/ipv6 address 520': ''
'10.0.2.0/24/neighbor 1a': ''
'2.0.0.2/32/nh_type': '4'
'10.0.2.0/24/rt': '0(common)'
'2.0.0.1/32/rib_weight': '1'
'10.0.2.0/24/ipv6 address 1230': ''
'2.0.0.1/32/mac': '0000.0000.0000'
'10.0.2.0/24/ipv6 address 290': ''
'10.0.2.0/24/Current configuration': '14949 bytes'
'10.0.2.0/24/ipv6 address 350': ''
'10.0.2.0/24/no neighbor 20': ''
'10.0.2.0/24/ipv6 address 1180': ''
'10.0.2.0/24/ipv6 address 960': ''
'10.0.2.0/24/System description': 'Ruijie EASY GATEWAY(RG-MTFi-CC(U2)-DE(EG)) by Ruijie Networks.'
'1.0.0.0/24/mac': '0000.0000.0000'
'2.0.0.0/24/route node lock': '4'
'10.0.2.0/24/ipv6 address 450': ''
'10.0.2.0/24/no neighbor 9': ''
'10.0.2.0/24/ipv6 address 590': ''
'10.0.2.0/24/ipv6 address 810': ''
'1.0.0.1/32/NHB-ID/1': '0'
'1.0.0.1/32/NHB-ID/2': '270'
'10.0.2.0/24/ipv6 address 180': ''
'10.0.2.0/24/ipv6 address 790': ''
'2.0.0.1/32/nhop_flag': 'active fib'
'10.0.1.0/24/tag': '0'
'10.0.0.0/24/03': '01'
'10.0.0.0/24/01': '13'
'10.0.2.0/24/ipv6 address 1160': ''
'10.0.0.0/24/NHB-ID/2': '271'
'2.0.0.2/32/mac': '0000.0000.0000'
'10.0.0.0/24/NHB-ID/1': '0'
'10.0.2.0/24/nhop_flag': 'active fib'
'10.0.2.0/24/Codes': 'K - kernel'
'10.0.2.0/24/route-target both 1': '2'
'2.0.0.3/32/nhop_flag': 'active fib'
'10.0.2.0/24/ipv6 address 170': ''
'10.0.2.0/24/neighbor 1f': ''
'10.0.2.0/24/ipv6 address 270': ''
'10.0.2.0/24/ipv6 address 830': ''
'10.0.2.0/24/ipv6 address 700': ''
'10.0.2.0/24/ipv6 address 1200': ''
'10.0.2.0/24/no neighbor 8': ''
'10.0.2.0/24/no neighbor 5': ''
'10.0.2.0/24/no neighbor 4': ''
'10.0.2.0/24/no neighbor 7': ''
'10.0.2.0/24/no neighbor 6': ''
'10.0.2.0/24/no neighbor 1': ''
'2.0.0.0/24/weight': '1'
'10.0.2.0/24/no neighbor 3': ''
'2.0.0.3/32/nh_type': '4'
'10.0.2.0/24/rd 1': '2'
'10.0.2.0/24/rd 2': '1'
'10.0.2.0/24/rd 4': '1'
'10.0.1.0/24/route node lock': '2'
'2.0.0.2/32/rib_path': '1'
'2.0.0.1/32/rib_path': '1'
'2.0.0.2/32/nhop_ext_flag': ''
'2.0.0.3/32/rib_flag': 'selected'
'2.0.0.1/32/rib_nh_active_num': '1'
'10.0.2.0/24/no neighbor e': ''
'10.0.2.0/24/no neighbor d': ''
'10.0.2.0/24/no neighbor f': ''
'10.0.1.0/24/rib_ext_flag': 'fib-mom'
'10.0.0.0/24/rib_ext_flag': 'fib-mom'
'10.0.2.0/24/no neighbor c': ''
'10.0.2.0/24/no neighbor b': ''
'1.0.0.1/32/nh_rgate_num': '1'
'10.0.2.0/24/ipv6 address 630': ''
'1.0.0.0/24/nhop_flag': 'active'
'10.0.2.0/24/ipv6 address 410': ''
'10.0.2.0/24/ipv6 address 1060': ''
'1.0.0.0/24/nh_rgate_num': '1'
'10.0.2.0/24/ipv6 address 550': ''
'10.0.0.0/24/nhop_ext_flag': ''
'10.0.2.0/24/nhop_ext_flag': ''
'10.0.2.0/24/ipv6 address 480': ''
'10.0.2.0/24/ipv6 address 910': ''
'10.0.2.0/24/ipv6 address 1010': ''
'2.0.0.2/32/fast_sw_id': '0'
'10.0.2.0/24/ipv6 address 40': ''
'2.0.0.1/32/nh_rgate_num': '1'
'10.0.2.0/24/ipv6 address 850': ''
'2.0.0.3/32/rg_flag': 'fib active'
'1.0.0.1/32/route node lock': '2'
'10.0.1.0/24/rib_flag': 'selected'
'10.0.0.0/24/rib_path': '1'
'10.0.2.0/24/ipv6 address 300': ''
'2.0.0.0/24/process': '513.'
'10.0.2.0/24/ipv6 address 1240': ''
'10.0.2.0/24/no neighbor a': ''
'10.0.0.0/24/tag': '0'
'10.0.2.0/24/NHB-ID/1': '0'
'10.0.2.0/24/NHB-ID/2': '271'
'10.0.2.0/24/ipv6 address 230': ''
'2.0.0.3/32/nh_vrf': '0'
'10.0.1.0/24/nhop_ext_flag': ''
'10.0.2.0/24/ipv6 address 980': ''
'10.0.2.0/24/ipv6 address 1080': ''
'10.0.2.0/24/ipv6 address 340': ''
'10.0.1.0/24/process': '1.'
'2.0.0.0/24/nh_rgate_num': '1'
'2.0.0.1/32/tag': '0'
'10.0.1.0/24/nhop_flag': 'active fib'
'10.0.2.0/24/ipv6 address 120': ''
'2.0.0.3/32/tag': '0'
'10.0.2.0/24/ipv6 address 670': ''
'10.0.2.0/24/rgate-num': '1'
'10.0.2.0/24/ipv6 address 770': ''
'1.0.0.0/24/rib_weight': '0'
'10.0.1.0/24/NHB-ID/1': '0'
'2.0.0.0/24/rg_flag': 'active-changed active'
'10.0.2.0/24/ipv6 address 510': ''
'10.0.2.0/24/no neighbor 17': ''
'10.0.2.0/24/if_vrf': '0'
'2.0.0.0/24/nhop_ex_flag': '0x40'
'1.0.0.0/24/nh_type': '1'
'10.0.2.0/24/ipv6 address 1110': ''
'10.0.2.0/24/System hardware version': '1.00'
'10.0.2.0/24/ipv6 route 1': '24'
'10.0.2.0/24/no neighbor 12': ''
'2.0.0.2/32/nhop_ex_flag': '0x0'
'2.0.0.2/32/route node lock': '2'
'1.0.0.1/32/01': '20'
'1.0.0.1/32/03': '08'
'1.0.0.1/32/weight': '1'
'2.0.0.0/24/rib_weight': '0'
'1.0.0.0/24/rg_flag': 'active-changed active'
'10.0.2.0/24/ipv6 address 1190': ''
'10.0.2.0/24/key': '600626465 proto'
'2.0.0.0/24/nh_vrf': '0'
'10.0.2.0/24/ipv6 address 950': ''
'10.0.2.0/24/ipv6 address 1050': ''
'2.0.0.0/24/NHB-ID/1': '0'
'2.0.0.0/24/NHB-ID/2': '11'
'10.0.2.0/24/rib_rgate_num': '1'
'1.0.0.0/24/rib_ext_flag': ''
'10.0.2.0/24/ipv6 address 460': ''
'10.0.2.0/24/ipv6 address 580': ''
'1.0.0.1/32/nhop_flag': 'active fib'
'10.0.2.0/24/ipv6 address 820': ''
'10.0.2.0/24/ipv6 address 10': ''
'1.0.0.1/32/tag': '0'
'10.0.2.0/24/ipv6 address 780': ''
'10.0.2.0/24/ipv6 address 1280': ''
'10.0.2.0/24/ipv6 address 80': ''
'10.0.1.0/24/rib_path': '1'
'1.0.0.1/32/nhop_ext_flag': ''
'10.0.2.0/24/if_etype': '2'
'2.0.0.0/24/rib_flag': 'changed'
'10.0.2.0/24/ipv6 address 730': ''
'2.0.0.3/32/rib_weight': '1'
'10.0.2.0/24/ipv6 address 160': ''
'2.0.0.1/32/nhop_ext_flag': ''
'2.0.0.3/32/rib_ext_flag': ''
'10.0.2.0/24/rib_weight': '1'
'10.0.2.0/24/ipv6 address 1270': ''
'1.0.0.0/24/nhop_ex_flag': '0x40'
'10.0.2.0/24/ipv6 address 390': ''
'10.0.2.0/24/ipv6 address 430': ''
'10.0.2.0/24/System uptime': '0'
'10.0.2.0/24/proto': 'IPv4'
'10.0.1.0/24/nh_vrf': '0'
'2.0.0.1/32/rib_flag': 'selected'
'10.0.2.0/24/ifindex': '2(GigabitEthernet 0/1)'
'10.0.1.0/24/rib_weight': '1'
'10.0.2.0/24/ipv6 address 600': ''
'10.0.2.0/24/ipv6 address 420': ''
'2.0.0.0/24/nh_type': '1'
'1.0.0.0/24/NHB-ID/2': '272'
'1.0.0.0/24/NHB-ID/1': '0'
'2.0.0.3/32/02': '07'
'10.0.2.0/24/ipv6 route 2000': ''
'10.0.2.0/24/ipv6 address 540': ''
'10.0.2.0/24/qos': '0'
'1.0.0.1/32/nhop_ex_flag': '0x0'
'1.0.0.0/24/nh_vrf': '0'
'2.0.0.1/32/18': '49'
'2.0.0.1/32/17': '01'
'10.0.2.0/24/ipv6 address 150': ''
'10.0.0.0/24/rib_nh_active_num': '1'
'2.0.0.2/32/rg_flag': 'fib active'
'10.0.1.0/24/rg_flag': 'fib active'
'2.0.0.2/32/rib_ext_flag': ''
'10.0.2.0/24/ipv6 address 1000': ''
'1.0.0.1/32/rib_ext_flag': 'local-host fib-mom'
'10.0.0.0/24/process': '1.'
'10.0.2.0/24/ipv6 address 50': ''
'10.0.2.0/24/ipv6 address 860': ''
'10.0.0.0/24/rg_flag': 'fib active'
'10.0.2.0/24/ipv6 address 900': ''
'10.0.1.0/24/NHB-ID/2': '271'
'1.0.0.1/32/rib_flag': 'selected'
'10.0.2.0/24/ipv6 address 330': ''
'2.0.0.1/32/fast_sw_id': '0'
'2.0.0.3/32/rib_path': '1'
'2.0.0.0/24/mac': '0000.0000.0000'
'1.0.0.0/24/process': '513.'
'2.0.0.2/32/rib_nh_active_num': '1'
'10.0.2.0/24/Module information': ''
'10.0.2.0/24/no neighbor 1e': ''
'10.0.0.0/24/nh_rgate_num': '1'
'10.0.2.0/24/01': '13'
'10.0.2.0/24/03': '01'
'10.0.2.0/24/ipv6 address 1130': ''
'10.0.2.0/24/weight': '1'
'10.0.2.0/24/rib_path': '1'
'10.0.2.0/24/ipv6 address 200': ''}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip route database | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_line = self.dut_get_start_show_info(show_info)
        flag = 0
        for value in show_line:
            if re.match("(.*) (\d+\..*) NHB-ID: \((\d+), (\d+)\)",value):
                obj1 = re.match("(.*) (\d+\..*) NHB-ID: \((\d+), (\d+)\)",value)
                key1 = obj1.group(2)
                #ststus = obj1.group(1).strip().split()[0]
                dict_value[key1+"/NHB-ID/1"]  = obj1.group(3)
                dict_value[key1+"/NHB-ID/2"] =  obj1.group(4)
                #dict_value[key1+"/ststus"] = ststus
                flag = 1
            elif re.match("(.*) (\d+\..*) NHB-ID: NULL",value):
                obj1 = re.match("(.*) (\d+\..*) NHB-ID: NULL",value)
                key1 = obj1.group(2)
                ststus = obj1.group(1).strip().split()[0]
                dict_value[key1+"/NHB-ID"]  = "NULL"
                dict_value[key1+"/ststus"] = ststus
                flag = 1
            elif re.match("(.*) (\d+\.\d+\.\d+\.\d+\/\d+) (.*)",value):
                obj3 = re.match("(.*) (\d+\.\d+\.\d+\.\d+\/\d+) (.*)",value)
                key1 = obj3.group(2)
                flag = 1
            elif re.match("NHB-ID: \((\d+), (\d+)\)",value.strip()):
                obj4 = re.match("NHB-ID: \((\d+), (\d+)\)",value.strip())
                dict_value[key1+"/NHB-ID/1"]  = obj4.group(1)
                dict_value[key1+"/NHB-ID/2"] =  obj4.group(2)
            elif "NHB-ID: NULL" in value:
                dict_value[key1+"/NHB-ID"]  = "NULL"
            else:
               if flag == 1 :
                   if "," in value:
                       list1 = value.split(",")
                       for value_list1 in list1:
                           if ":" in value_list1:
                               list2 = value_list1.split(":")
                               dict_value[key1+"/"+list2[0].strip()] = list2[1].strip()
                           elif "=" in value_list1 :
                               list2 = value_list1.split("=")
                               dict_value[key1+"/"+list2[0].strip()] = list2[1].strip()
                   elif ":" in value :
                       list2 = value.split(":")
                       dict_value[key1+"/"+list2[0].strip()] = list2[1].strip()

        return dict_value
    def dut_get_show_ipv6_route_database(self,show_info):
        """
        Function:show ipv6 route database回显解析函数
        CLI命令:show ipv6 route database
        回显信息示例:
Ruijie#show ipv6 rou database
IPv6 Routing Table
Codes: K - kernel route, C - connected, S - static, R - RIP, O - OSPF,
       I - IS-IS, B - BGP, ND - Nd to host
       > - selected route, * - FIB route, p - stale info,
       A - Block add, U - Block update, AU - Block add And update
Timers: Uptime

C     *> ::1/128 via ::, Local 1, 18:59:28, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 3)
         rib_flag:0x10, rib_ext_flag:0x40008, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
S     *> 1:24:123::/64 [1/0] via 2000::1
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  (recursive, rg_flag:0x60 *
                  18:55:13, flag:0x7, ex_flag:0x2, nh_rgate_num:128, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 68)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:128
         route node lock: 2
C     *> 10::/64 via ::, VLAN 1, 00:01:40, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 268)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
  nh_list:  (10::2/128, type:0 lookup_len:0)     client list:
  ID: 8   nse:  bgpd      client list:
  ID: 8   nse:  bgpd      client list:
  ID: 8   nse:  bgpd      client list:
  ID: 8   nse:  bgpd      client list:
  ID: 8   nse:  bgpd      client list:
  ID: 8   nse:  bgpd      client list:
  ID: 8   nse:  bgpd      client list:
  ID: 8   nse:  bgpd      client list:
  ID: 8   nse:  bgpd      client list:
  ID: 8   nse:  bgpd      client list:
  ID: 8   nse:  bgpd      client list:
  ID: 8   nse:  bgpd 
         route node lock: 2
C     *> 10::1/128 via ::, VLAN 1, 00:01:40, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 266)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 20::/64 via ::, VLAN 2, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 260)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
  nh_list:  (20::2/128, type:0 lookup_len:0)     client list:
  ID: 8   nse:  bgpd      client list:
  ID: 8   nse:  bgpd      client list:
  ID: 8   nse:  bgpd      client list:
  ID: 8   nse:  bgpd      client list:
  ID: 8   nse:  bgpd      client list:
  ID: 8   nse:  bgpd      client list:
  ID: 8   nse:  bgpd      client list:
  ID: 8   nse:  bgpd      client list:
  ID: 8   nse:  bgpd      client list:
  ID: 8   nse:  bgpd      client list:
  ID: 8   nse:  bgpd      client list:
  ID: 8   nse:  bgpd 
         route node lock: 2
C     *> 20::1/128 via ::, VLAN 2, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 259)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 30::/64 via ::, VLAN 3, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 234)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 30::1/128 via ::, VLAN 3, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 233)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 40::/64 via ::, VLAN 4, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 208)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 40::1/128 via ::, VLAN 4, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 207)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 50::/64 via ::, VLAN 5, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 184)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 50::1/128 via ::, VLAN 5, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 183)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 60::/64 via ::, VLAN 6, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 258)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 60::1/128 via ::, VLAN 6, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 257)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 70::/64 via ::, VLAN 7, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 232)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 70::1/128 via ::, VLAN 7, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 231)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 80::/64 via ::, VLAN 8, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 206)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 80::1/128 via ::, VLAN 8, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 205)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 90::/64 via ::, VLAN 9, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 182)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 90::1/128 via ::, VLAN 9, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 181)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 100::/64 via ::, VLAN 10, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 256)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 100::1/128 via ::, VLAN 10, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 255)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 110::/64 via ::, VLAN 11, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 230)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 110::1/128 via ::, VLAN 11, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 229)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 120::/64 via ::, VLAN 12, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 204)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 120::1/128 via ::, VLAN 12, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 203)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 130::/64 via ::, VLAN 13, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 180)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 130::1/128 via ::, VLAN 13, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 179)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 140::/64 via ::, VLAN 14, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 254)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 140::1/128 via ::, VLAN 14, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 253)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 150::/64 via ::, VLAN 15, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 228)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 150::1/128 via ::, VLAN 15, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 227)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 160::/64 via ::, VLAN 16, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 202)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 160::1/128 via ::, VLAN 16, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 201)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 170::/64 via ::, VLAN 17, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 178)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 170::1/128 via ::, VLAN 17, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 177)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 180::/64 via ::, VLAN 18, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 252)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 180::1/128 via ::, VLAN 18, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 251)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 190::/64 via ::, VLAN 19, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 226)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 190::1/128 via ::, VLAN 19, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 225)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 200::/64 via ::, VLAN 20, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 200)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 200::1/128 via ::, VLAN 20, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 199)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 210::/64 via ::, VLAN 21, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 176)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 210::1/128 via ::, VLAN 21, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 175)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 220::/64 via ::, VLAN 22, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 250)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 220::1/128 via ::, VLAN 22, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 249)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 230::/64 via ::, VLAN 23, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 224)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 230::1/128 via ::, VLAN 23, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 223)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 240::/64 via ::, VLAN 24, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 198)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 240::1/128 via ::, VLAN 24, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 197)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 250::/64 via ::, VLAN 25, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 174)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 250::1/128 via ::, VLAN 25, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 173)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 260::/64 via ::, VLAN 26, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 248)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 260::1/128 via ::, VLAN 26, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 247)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 270::/64 via ::, VLAN 27, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 222)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 270::1/128 via ::, VLAN 27, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 221)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 280::/64 via ::, VLAN 28, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 196)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 280::1/128 via ::, VLAN 28, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 195)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 290::/64 via ::, VLAN 29, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 172)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 290::1/128 via ::, VLAN 29, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 171)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 300::/64 via ::, VLAN 30, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 246)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 300::1/128 via ::, VLAN 30, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 245)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 310::/64 via ::, VLAN 31, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 220)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 310::1/128 via ::, VLAN 31, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 219)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 320::/64 via ::, VLAN 32, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 194)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 320::1/128 via ::, VLAN 32, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 193)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 330::/64 via ::, VLAN 33, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 170)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 330::1/128 via ::, VLAN 33, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 169)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 340::/64 via ::, VLAN 34, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 244)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 340::1/128 via ::, VLAN 34, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 243)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 350::/64 via ::, VLAN 35, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 218)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 350::1/128 via ::, VLAN 35, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 217)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 360::/64 via ::, VLAN 36, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 192)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 360::1/128 via ::, VLAN 36, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 191)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 370::/64 via ::, VLAN 37, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 168)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 370::1/128 via ::, VLAN 37, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 167)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 380::/64 via ::, VLAN 38, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 242)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 380::1/128 via ::, VLAN 38, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 241)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 390::/64 via ::, VLAN 39, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 216)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 390::1/128 via ::, VLAN 39, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 215)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 400::/64 via ::, VLAN 40, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 190)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 400::1/128 via ::, VLAN 40, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 189)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 410::/64 via ::, VLAN 41, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 166)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 410::1/128 via ::, VLAN 41, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 165)
         rib_flag:0x10, rib_ext_flag:0x240004, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 420::/64 via ::, VLAN 42, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, weight:1,fast_sw_id:0, mac:0000.0000.0000, process_id: 0, nh_vid: 0
         NHB-ID: (0, 240)
         rib_flag:0x10, rib_ext_flag:0x240000, rib_nh_active_num:1, rib_rgate_num:1
         route node lock: 2
C     *> 420::1/128 via ::, VLAN 42, 00:01:38, flag:0x3, ex_flag:0x0, nh_rgate_num:1, qos_id:0, we

        Returns:
{'170::/64/rib_ext_flag': '0x240000'
'190::/64/NHB-ID/1': '0'
'190::/64/NHB-ID/2': '226'
'50::/64/rib_nh_active_num': '1'
'380::/64/rib_flag': '0x10'
'1:24:123::/64/ex_flag': '0x2'
'160::1/128/rib_rgate_num': '1'
'80::1/128/route node lock': '2'
'190::/64/rib_flag': '0x10'
'410::1/128/rib_nh_active_num': '1'
'40::/64/rib_nh_active_num': '1'
'300::1/128/rib_rgate_num': '1'
'190::/64/rib_nh_active_num': '1'
'130::/64/rib_rgate_num': '1'
'230::1/128/rib_nh_active_num': '1'
'390::1/128/rib_nh_active_num': '1'
'190::1/128/rib_nh_active_num': '1'
'1:24:123::/64/flag': '0x7'
'270::1/128/rib_flag': '0x10'
'150::1/128/rib_rgate_num': '1'
'400::1/128/NHB-ID/1': '0'
'320::1/128/rib_flag': '0x10'
'280::1/128/NHB-ID/1': '0'
'280::1/128/NHB-ID/2': '195'
'10::1/128/route node lock': '2'
'320::/64/route node lock': '2'
'250::/64/rib_rgate_num': '1'
'20::/64/rib_flag': '0x10'
'340::1/128/NHB-ID/2': '243'
'380::/64/rib_ext_flag': '0x240000'
'250::1/128/rib_nh_active_num': '1'
'130::1/128/rib_nh_active_num': '1'
'400::1/128/rib_nh_active_num': '1'
'300::/64/route node lock': '2'
'50::/64/rib_rgate_num': '1'
'310::/64/route node lock': '2'
'240::1/128/rib_ext_flag': '0x240004'
'140::1/128/NHB-ID/2': '253'
'140::1/128/NHB-ID/1': '0'
'240::/64/rib_nh_active_num': '1'
'310::/64/NHB-ID/1': '0'
'60::/64/rib_nh_active_num': '1'
'300::1/128/rib_ext_flag': '0x240004'
'400::/64/rib_rgate_num': '1'
'200::/64/rib_rgate_num': '1'
'170::1/128/rib_rgate_num': '1'
'10::/64/type': '0 lookup_len'
'80::1/128/rib_flag': '0x10'
'370::/64/NHB-ID/1': '0'
'370::/64/NHB-ID/2': '168'
'300::/64/rib_flag': '0x10'
'160::/64/rib_nh_active_num': '1'
'410::1/128/rib_ext_flag': '0x240004'
'140::1/128/rib_flag': '0x10'
'310::1/128/rib_ext_flag': '0x240004'
'350::/64/NHB-ID/2': '218'
'140::/64/rib_rgate_num': '1'
'350::/64/NHB-ID/1': '0'
'160::1/128/route node lock': '2'
'200::1/128/rib_ext_flag': '0x240004'
'370::/64/rib_nh_active_num': '1'
'70::/64/rib_rgate_num': '1'
'180::/64/rib_flag': '0x10'
'400::/64/NHB-ID/2': '190'
'270::/64/rib_flag': '0x10'
'220::1/128/rib_rgate_num': '1'
'410::1/128/rib_flag': '0x10'
'150::1/128/rib_flag': '0x10'
'120::1/128/route node lock': '2'
'180::1/128/rib_rgate_num': '1'
'240::/64/NHB-ID/2': '198'
'400::/64/rib_flag': '0x10'
'270::1/128/NHB-ID/1': '0'
'390::/64/route node lock': '2'
'390::/64/NHB-ID/1': '0'
'10::/64/nh_list': '(10'
'300::1/128/NHB-ID/1': '0'
'300::1/128/NHB-ID/2': '245'
'130::1/128/rib_ext_flag': '0x240004'
'360::1/128/NHB-ID/2': '191'
'360::1/128/NHB-ID/1': '0'
'10::/64/NHB-ID/1': '0'
'420::/64/rib_nh_active_num': '1'
'140::/64/rib_nh_active_num': '1'
'230::/64/rib_ext_flag': '0x240000'
'340::/64/rib_nh_active_num': '1'
'350::1/128/rib_ext_flag': '0x240004'
'::1/128/rib_nh_active_num': '1'
'220::1/128/route node lock': '2'
'400::1/128/NHB-ID/2': '189'
'30::/64/rib_rgate_num': '1'
'230::1/128/NHB-ID/1': '0'
'230::1/128/NHB-ID/2': '223'
'110::/64/rib_nh_active_num': '1'
'330::/64/rib_ext_flag': '0x240000'
'20::/64/NHB-ID/1': '0'
'220::1/128/rib_ext_flag': '0x240004'
'20::/64/NHB-ID/2': '260'
'180::1/128/rib_nh_active_num': '1'
'150::1/128/route node lock': '2'
'290::1/128/NHB-ID/2': '171'
'290::1/128/NHB-ID/1': '0'
'160::/64/rib_rgate_num': '1'
'90::1/128/NHB-ID/1': '0'
'90::1/128/NHB-ID/2': '181'
'410::/64/rib_nh_active_num': '1'
'290::/64/rib_ext_flag': '0x240000'
'200::1/128/NHB-ID/1': '0'
'200::1/128/NHB-ID/2': '199'
'220::1/128/NHB-ID/2': '249'
'220::1/128/NHB-ID/1': '0'
'380::/64/rib_rgate_num': '1'
'420::/64/NHB-ID/1': '0'
'420::/64/NHB-ID/2': '240'
'410::/64/rib_rgate_num': '1'
'390::1/128/rib_rgate_num': '1'
'340::1/128/NHB-ID/1': '0'
'210::/64/NHB-ID/2': '176'
'210::/64/NHB-ID/1': '0'
'300::/64/NHB-ID/2': '246'
'240::1/128/rib_nh_active_num': '1'
'400::/64/rib_nh_active_num': '1'
'1:24:123::/64/rib_flag': '0x10'
'180::/64/rib_ext_flag': '0x240000'
'310::1/128/rib_rgate_num': '1'
'190::1/128/NHB-ID/1': '0'
'70::1/128/NHB-ID/2': '231'
'390::1/128/rib_ext_flag': '0x240004'
'70::1/128/NHB-ID/1': '0'
'110::/64/route node lock': '2'
'270::1/128/NHB-ID/2': '221'
'360::1/128/rib_flag': '0x10'
'210::1/128/rib_nh_active_num': '1'
'1:24:123::/64/process_id': '0'
'210::1/128/rib_ext_flag': '0x240004'
'150::/64/route node lock': '2'
'100::/64/route node lock': '2'
'::1/128/route node lock': '2'
'370::/64/rib_rgate_num': '1'
'390::/64/rib_ext_flag': '0x240000'
'360::1/128/rib_ext_flag': '0x240004'
'420::/64/rib_flag': '0x10'
'190::1/128/rib_flag': '0x10'
'360::/64/NHB-ID/2': '192'
'360::/64/NHB-ID/1': '0'
'90::1/128/rib_flag': '0x10'
'140::1/128/route node lock': '2'
'360::/64/rib_nh_active_num': '1'
'60::1/128/route node lock': '2'
'120::1/128/NHB-ID/1': '0'
'120::1/128/NHB-ID/2': '203'
'170::/64/rib_nh_active_num': '1'
'220::1/128/rib_nh_active_num': '1'
'350::/64/rib_ext_flag': '0x240000'
'30::/64/route node lock': '2'
'340::/64/NHB-ID/2': '244'
'250::/64/route node lock': '2'
'110::1/128/NHB-ID/1': '0'
'260::1/128/rib_nh_active_num': '1'
'270::1/128/rib_ext_flag': '0x240004'
'250::/64/rib_flag': '0x10'
'210::1/128/rib_rgate_num': '1'
'110::1/128/NHB-ID/2': '229'
'170::1/128/rib_ext_flag': '0x240004'
'70::1/128/rib_nh_active_num': '1'
'200::/64/rib_ext_flag': '0x240000'
'190::1/128/rib_rgate_num': '1'
'300::1/128/rib_flag': '0x10'
'230::1/128/route node lock': '2'
'90::/64/route node lock': '2'
'100::1/128/rib_rgate_num': '1'
'360::1/128/route node lock': '2'
'400::1/128/rib_ext_flag': '0x240004'
'10::/64/ID': '8   nse:  bgpd'
'30::1/128/NHB-ID/2': '233'
'350::1/128/rib_nh_active_num': '1'
'30::1/128/NHB-ID/1': '0'
'330::1/128/rib_flag': '0x10'
'10::1/128/rib_rgate_num': '1'
'320::/64/rib_rgate_num': '1'
'350::/64/route node lock': '2'
'110::1/128/rib_ext_flag': '0x240004'
'260::/64/rib_flag': '0x10'
'40::/64/route node lock': '2'
'30::1/128/rib_rgate_num': '1'
'340::1/128/rib_rgate_num': '1'
'50::1/128/NHB-ID/1': '0'
'50::1/128/NHB-ID/2': '183'
'230::1/128/rib_rgate_num': '1'
'380::1/128/NHB-ID/1': '0'
'380::1/128/NHB-ID/2': '241'
'40::/64/rib_rgate_num': '1'
'110::/64/rib_ext_flag': '0x240000'
'290::/64/route node lock': '2'
'10::1/128/NHB-ID/1': '0'
'140::/64/rib_flag': '0x10'
'320::/64/NHB-ID/1': '0'
'1:24:123::/64/rib_nh_active_num': '1'
'110::/64/rib_flag': '0x10'
'320::1/128/rib_rgate_num': '1'
'400::/64/route node lock': '2'
'410::1/128/route node lock': '2'
'250::1/128/rib_ext_flag': '0x240004'
'330::1/128/rib_nh_active_num': '1'
'270::/64/route node lock': '2'
'310::/64/rib_rgate_num': '1'
'290::/64/rib_nh_active_num': '1'
'190::/64/rib_rgate_num': '1'
'1:24:123::/64/NHB-ID/1': '0'
'1:24:123::/64/NHB-ID/2': '68'
'230::/64/rib_rgate_num': '1'
'310::/64/NHB-ID/2': '220'
'160::/64/route node lock': '2'
'90::1/128/route node lock': '2'
'60::1/128/rib_ext_flag': '0x240004'
'20::1/128/rib_nh_active_num': '1'
'40::/64/rib_ext_flag': '0x240000'
'280::/64/rib_ext_flag': '0x240000'
'50::1/128/rib_rgate_num': '1'
'60::/64/NHB-ID/2': '258'
'90::/64/rib_ext_flag': '0x240000'
'10::1/128/rib_nh_active_num': '1'
'320::/64/rib_nh_active_num': '1'
'270::/64/NHB-ID/1': '0'
'260::1/128/rib_flag': '0x10'
'270::/64/NHB-ID/2': '222'
'70::/64/rib_ext_flag': '0x240000'
'150::/64/rib_ext_flag': '0x240000'
'320::1/128/rib_nh_active_num': '1'
'60::1/128/rib_nh_active_num': '1'
'250::1/128/NHB-ID/2': '173'
'250::1/128/NHB-ID/1': '0'
'220::/64/NHB-ID/2': '250'
'150::/64/NHB-ID/1': '0'
'150::/64/NHB-ID/2': '228'
'220::/64/NHB-ID/1': '0'
'410::/64/NHB-ID/1': '0'
'410::/64/NHB-ID/2': '166'
'60::1/128/rib_rgate_num': '1'
'140::/64/route node lock': '2'
'100::1/128/route node lock': '2'
'190::1/128/NHB-ID/2': '225'
'130::/64/rib_flag': '0x10'
'120::/64/NHB-ID/1': '0'
'410::/64/rib_ext_flag': '0x240000'
'120::/64/NHB-ID/2': '204'
'160::1/128/rib_nh_active_num': '1'
'70::/64/rib_nh_active_num': '1'
'200::1/128/rib_rgate_num': '1'
'250::/64/NHB-ID/2': '174'
'250::/64/NHB-ID/1': '0'
'220::1/128/rib_flag': '0x10'
'10::1/128/NHB-ID/2': '266'
'340::/64/NHB-ID/1': '0'
'200::1/128/rib_flag': '0x10'
'410::1/128/NHB-ID/1': '0'
'410::1/128/NHB-ID/2': '165'
'180::1/128/NHB-ID/2': '251'
'180::1/128/NHB-ID/1': '0'
'100::1/128/rib_ext_flag': '0x240004'
'70::/64/NHB-ID/2': '232'
'70::/64/NHB-ID/1': '0'
'260::1/128/rib_ext_flag': '0x240004'
'150::/64/rib_rgate_num': '1'
'400::1/128/rib_rgate_num': '1'
'350::1/128/NHB-ID/2': '217'
'350::1/128/NHB-ID/1': '0'
'170::/64/route node lock': '2'
'120::1/128/rib_rgate_num': '1'
'80::/64/route node lock': '2'
'120::1/128/rib_flag': '0x10'
'330::1/128/NHB-ID/1': '0'
'330::1/128/NHB-ID/2': '169'
'230::/64/rib_flag': '0x10'
'190::1/128/route node lock': '2'
'260::1/128/NHB-ID/2': '247'
'280::1/128/rib_ext_flag': '0x240004'
'190::1/128/rib_ext_flag': '0x240004'
'180::1/128/rib_ext_flag': '0x240004'
'70::/64/rib_flag': '0x10'
'60::/64/rib_ext_flag': '0x240000'
'280::/64/rib_nh_active_num': '1'
'120::/64/rib_ext_flag': '0x240000'
'350::/64/rib_flag': '0x10'
'120::/64/rib_flag': '0x10'
'70::1/128/rib_ext_flag': '0x240004'
'10::/64/route node lock': '2'
'1:24:123::/64/rg_flag': '0x60 *'
'70::/64/route node lock': '2'
'320::1/128/NHB-ID/2': '193'
'320::1/128/NHB-ID/1': '0'
'::1/128/rib_rgate_num': '1'
'170::/64/rib_flag': '0x10'
'320::1/128/route node lock': '2'
'170::/64/rib_rgate_num': '1'
'190::/64/rib_ext_flag': '0x240000'
'320::1/128/rib_ext_flag': '0x240004'
'170::1/128/rib_flag': '0x10'
'200::/64/rib_flag': '0x10'
'20::/64/route node lock': '2'
'130::1/128/NHB-ID/2': '179'
'130::1/128/NHB-ID/1': '0'
'50::/64/rib_ext_flag': '0x240000'
'370::/64/rib_ext_flag': '0x240000'
'50::1/128/rib_nh_active_num': '1'
'380::1/128/rib_flag': '0x10'
'90::/64/rib_nh_active_num': '1'
'250::/64/rib_nh_active_num': '1'
'160::/64/NHB-ID/1': '0'
'250::1/128/rib_rgate_num': '1'
'390::/64/rib_nh_active_num': '1'
'160::/64/NHB-ID/2': '202'
'420::/64/route node lock': '2'
'310::/64/rib_nh_active_num': '1'
'330::1/128/rib_ext_flag': '0x240004'
'350::1/128/rib_rgate_num': '1'
'370::1/128/route node lock': '2'
'110::1/128/rib_flag': '0x10'
'230::1/128/rib_ext_flag': '0x240004'
'170::/64/NHB-ID/2': '178'
'10::/64/rib_flag': '0x10'
'270::/64/rib_rgate_num': '1'
'30::1/128/route node lock': '2'
'80::1/128/NHB-ID/2': '205'
'80::1/128/NHB-ID/1': '0'
'310::/64/rib_ext_flag': '0x240000'
'350::/64/rib_nh_active_num': '1'
'390::/64/NHB-ID/2': '216'
'210::/64/route node lock': '2'
'340::1/128/route node lock': '2'
'100::/64/rib_ext_flag': '0x240000'
'160::/64/rib_flag': '0x10'
'80::/64/rib_ext_flag': '0x240000'
'410::1/128/rib_rgate_num': '1'
'300::/64/NHB-ID/1': '0'
'120::1/128/rib_nh_active_num': '1'
'80::/64/NHB-ID/2': '206'
'80::/64/NHB-ID/1': '0'
'100::1/128/rib_flag': '0x10'
'300::1/128/route node lock': '2'
'1:24:123::/64/route node lock': '2'
'390::1/128/NHB-ID/1': '0'
'280::1/128/rib_flag': '0x10'
'50::/64/rib_flag': '0x10'
'370::1/128/rib_ext_flag': '0x240004'
'320::/64/NHB-ID/2': '194'
'240::/64/route node lock': '2'
'370::/64/route node lock': '2'
'50::/64/route node lock': '2'
'290::1/128/rib_flag': '0x10'
'410::/64/rib_flag': '0x10'
'360::/64/rib_ext_flag': '0x240000'
'330::/64/NHB-ID/1': '0'
'330::/64/NHB-ID/2': '170'
'20::/64/ID': '8   nse:  bgpd'
'150::1/128/rib_nh_active_num': '1'
'60::/64/rib_rgate_num': '1'
'210::/64/rib_flag': '0x10'
'340::1/128/rib_flag': '0x10'
'260::1/128/NHB-ID/1': '0'
'20::/64/rib_ext_flag': '0x240000'
'140::/64/NHB-ID/2': '254'
'140::/64/NHB-ID/1': '0'
'180::/64/rib_rgate_num': '1'
'90::/64/rib_rgate_num': '1'
'330::/64/rib_flag': '0x10'
'140::1/128/rib_rgate_num': '1'
'340::1/128/rib_nh_active_num': '1'
'10::/64/rib_nh_active_num': '1'
'::1/128/rib_flag': '0x10'
'280::1/128/route node lock': '2'
'300::/64/rib_rgate_num': '1'
'300::/64/rib_ext_flag': '0x240000'
'20::/64/rib_rgate_num': '1'
'420::/64/rib_rgate_num': '1'
'140::/64/rib_ext_flag': '0x240000'
'280::/64/NHB-ID/2': '196'
'380::1/128/rib_rgate_num': '1'
'230::/64/rib_nh_active_num': '1'
'210::1/128/rib_flag': '0x10'
'120::/64/route node lock': '2'
'240::1/128/route node lock': '2'
'1:24:123::/64/18': '55'
'360::/64/route node lock': '2'
'150::/64/rib_flag': '0x10'
'250::1/128/route node lock': '2'
'210::/64/rib_rgate_num': '1'
'260::1/128/rib_rgate_num': '1'
'210::1/128/NHB-ID/1': '0'
'::1/128/NHB-ID/1': '0'
'::1/128/NHB-ID/2': '3'
'310::1/128/NHB-ID/2': '219'
'100::1/128/NHB-ID/2': '255'
'100::1/128/NHB-ID/1': '0'
'310::1/128/NHB-ID/1': '0'
'280::/64/NHB-ID/1': '0'
'280::1/128/rib_rgate_num': '1'
'130::/64/rib_ext_flag': '0x240000'
'20::/64/nh_list': '(20'
'80::/64/rib_nh_active_num': '1'
'410::/64/route node lock': '2'
'40::1/128/rib_nh_active_num': '1'
'310::1/128/rib_flag': '0x10'
'350::/64/rib_rgate_num': '1'
'180::/64/rib_nh_active_num': '1'
'160::1/128/rib_flag': '0x10'
'40::1/128/rib_ext_flag': '0x240004'
'90::/64/rib_flag': '0x10'
'320::/64/rib_flag': '0x10'
'10::1/128/rib_flag': '0x10'
'400::/64/rib_ext_flag': '0x240000'
'70::1/128/rib_rgate_num': '1'
'260::/64/rib_ext_flag': '0x240000'
'400::1/128/route node lock': '2'
'240::/64/NHB-ID/1': '0'
'350::1/128/rib_flag': '0x10'
'160::1/128/NHB-ID/1': '0'
'160::1/128/NHB-ID/2': '201'
'50::1/128/route node lock': '2'
'30::1/128/rib_nh_active_num': '1'
'310::1/128/route node lock': '2'
'1:24:123::/64/fast_sw_id': '0'
'30::1/128/rib_ext_flag': '0x240004'
'400::/64/NHB-ID/1': '0'
'200::/64/rib_nh_active_num': '1'
'20::1/128/NHB-ID/1': '0'
'10::/64/NHB-ID/2': '268'
'150::1/128/rib_ext_flag': '0x240004'
'170::1/128/rib_nh_active_num': '1'
'250::1/128/rib_flag': '0x10'
'170::1/128/NHB-ID/2': '177'
'200::/64/NHB-ID/1': '0'
'200::/64/NHB-ID/2': '200'
'170::1/128/NHB-ID/1': '0'
'40::/64/rib_flag': '0x10'
'220::/64/rib_ext_flag': '0x240000'
'120::1/128/rib_ext_flag': '0x240004'
'80::/64/rib_flag': '0x10'
'110::1/128/route node lock': '2'
'260::/64/rib_nh_active_num': '1'
'340::/64/rib_ext_flag': '0x240000'
'330::/64/rib_nh_active_num': '1'
'390::/64/rib_rgate_num': '1'
'330::1/128/route node lock': '2'
'380::1/128/rib_nh_active_num': '1'
'100::1/128/rib_nh_active_num': '1'
'230::/64/route node lock': '2'
'100::/64/rib_rgate_num': '1'
'270::/64/rib_ext_flag': '0x240000'
'200::/64/route node lock': '2'
'360::/64/rib_rgate_num': '1'
'170::1/128/route node lock': '2'
'330::1/128/rib_rgate_num': '1'
'260::1/128/route node lock': '2'
'290::1/128/rib_nh_active_num': '1'
'70::1/128/rib_flag': '0x10'
'120::/64/rib_nh_active_num': '1'
'110::1/128/rib_rgate_num': '1'
'350::1/128/route node lock': '2'
'40::1/128/NHB-ID/2': '207'
'40::1/128/NHB-ID/1': '0'
'80::1/128/rib_nh_active_num': '1'
'380::/64/route node lock': '2'
'210::1/128/route node lock': '2'
'320::/64/rib_ext_flag': '0x240000'
'10::1/128/rib_ext_flag': '0x240004'
'1:24:123::/64/nh_vid': '0'
'220::/64/rib_nh_active_num': '1'
'1:24:123::/64/mac': '0000.0000.0000'
'80::1/128/rib_rgate_num': '1'
'130::1/128/route node lock': '2'
'30::/64/NHB-ID/2': '234'
'30::/64/NHB-ID/1': '0'
'340::/64/rib_rgate_num': '1'
'240::1/128/rib_rgate_num': '1'
'10::/64/rib_ext_flag': '0x240000'
'380::1/128/rib_ext_flag': '0x240004'
'110::1/128/rib_nh_active_num': '1'
'210::1/128/NHB-ID/2': '175'
'20::/64/type': '0 lookup_len'
'180::1/128/route node lock': '2'
'300::/64/rib_nh_active_num': '1'
'50::1/128/rib_ext_flag': '0x240004'
'150::/64/rib_nh_active_num': '1'
'140::1/128/rib_nh_active_num': '1'
'20::1/128/NHB-ID/2': '259'
'100::/64/NHB-ID/2': '256'
'100::/64/NHB-ID/1': '0'
'210::/64/rib_nh_active_num': '1'
'1:24:123::/64/nh_rgate_num': '128'
'60::/64/route node lock': '2'
'370::1/128/rib_rgate_num': '1'
'380::1/128/route node lock': '2'
'20::1/128/route node lock': '2'
'40::/64/NHB-ID/2': '208'
'40::/64/NHB-ID/1': '0'
'260::/64/NHB-ID/2': '248'
'260::/64/NHB-ID/1': '0'
'360::1/128/rib_rgate_num': '1'
'130::/64/rib_nh_active_num': '1'
'130::1/128/rib_flag': '0x10'
'190::/64/route node lock': '2'
'270::1/128/rib_nh_active_num': '1'
'40::1/128/rib_flag': '0x10'
'80::/64/rib_rgate_num': '1'
'230::1/128/rib_flag': '0x10'
'1:24:123::/64/rib_rgate_num': '128'
'1:24:123::/64/qos_id': '0'
'240::/64/rib_ext_flag': '0x240000'
'150::1/128/NHB-ID/1': '0'
'150::1/128/NHB-ID/2': '227'
'270::/64/rib_nh_active_num': '1'
'370::/64/rib_flag': '0x10'
'240::/64/rib_rgate_num': '1'
'20::/64/rib_nh_active_num': '1'
'240::/64/rib_flag': '0x10'
'100::/64/rib_nh_active_num': '1'
'100::/64/rib_flag': '0x10'
'50::1/128/rib_flag': '0x10'
'1:24:123::/64/weight': '1'
'310::/64/rib_flag': '0x10'
'130::1/128/rib_rgate_num': '1'
'130::/64/NHB-ID/2': '180'
'370::1/128/rib_flag': '0x10'
'80::1/128/rib_ext_flag': '0x240004'
'370::1/128/rib_nh_active_num': '1'
'180::/64/route node lock': '2'
'200::1/128/route node lock': '2'
'90::1/128/rib_rgate_num': '1'
'160::1/128/rib_ext_flag': '0x240004'
'290::1/128/route node lock': '2'
'340::/64/rib_flag': '0x10'
'60::1/128/NHB-ID/1': '0'
'60::1/128/NHB-ID/2': '257'
'1:24:123::/64/rib_ext_flag': '0x240000'
'390::1/128/rib_flag': '0x10'
'220::/64/rib_rgate_num': '1'
'20::1/128/rib_flag': '0x10'
'360::/64/rib_flag': '0x10'
'40::1/128/route node lock': '2'
'370::1/128/NHB-ID/1': '0'
'370::1/128/NHB-ID/2': '167'
'90::/64/NHB-ID/1': '0'
'90::/64/NHB-ID/2': '182'
'120::/64/rib_rgate_num': '1'
'30::/64/rib_flag': '0x10'
'270::1/128/route node lock': '2'
'70::1/128/route node lock': '2'
'420::/64/rib_ext_flag': '0x240000'
'280::/64/route node lock': '2'
'90::1/128/rib_ext_flag': '0x240004'
'310::1/128/rib_nh_active_num': '1'
'300::1/128/rib_nh_active_num': '1'
'360::1/128/rib_nh_active_num': '1'
'50::/64/NHB-ID/1': '0'
'50::/64/NHB-ID/2': '184'
'140::1/128/rib_ext_flag': '0x240004'
'290::1/128/rib_rgate_num': '1'
'60::1/128/rib_flag': '0x10'
'240::1/128/rib_flag': '0x10'
'180::/64/NHB-ID/2': '252'
'40::1/128/rib_rgate_num': '1'
'180::/64/NHB-ID/1': '0'
'30::/64/rib_nh_active_num': '1'
'280::/64/rib_flag': '0x10'
'280::/64/rib_rgate_num': '1'
'10::/64/rib_rgate_num': '1'
'290::1/128/rib_ext_flag': '0x240004'
'20::1/128/rib_rgate_num': '1'
'210::/64/rib_ext_flag': '0x240000'
'340::1/128/rib_ext_flag': '0x240004'
'250::/64/rib_ext_flag': '0x240000'
'130::/64/route node lock': '2'
'390::/64/rib_flag': '0x10'
'30::1/128/rib_flag': '0x10'
'380::/64/NHB-ID/1': '0'
'380::/64/NHB-ID/2': '242'
'260::/64/rib_rgate_num': '1'
'290::/64/NHB-ID/2': '172'
'30::/64/rib_ext_flag': '0x240000'
'290::/64/NHB-ID/1': '0'
'340::/64/route node lock': '2'
'110::/64/rib_rgate_num': '1'
'280::1/128/rib_nh_active_num': '1'
'290::/64/rib_rgate_num': '1'
'270::1/128/rib_rgate_num': '1'
'170::/64/NHB-ID/1': '0'
'90::1/128/rib_nh_active_num': '1'
'400::1/128/rib_flag': '0x10'
'130::/64/NHB-ID/1': '0'
'260::/64/route node lock': '2'
'230::/64/NHB-ID/1': '0'
'230::/64/NHB-ID/2': '224'
'240::1/128/NHB-ID/1': '0'
'240::1/128/NHB-ID/2': '197'
'110::/64/NHB-ID/1': '0'
'20::1/128/rib_ext_flag': '0x240004'
'290::/64/rib_flag': '0x10'
'60::/64/rib_flag': '0x10'
'390::1/128/NHB-ID/2': '215'
'60::/64/NHB-ID/1': '0'
'180::1/128/rib_flag': '0x10'
'160::/64/rib_ext_flag': '0x240000'
'220::/64/route node lock': '2'
'380::/64/rib_nh_active_num': '1'
'200::1/128/rib_nh_active_num': '1'
'110::/64/NHB-ID/2': '230'
'390::1/128/route node lock': '2'
'220::/64/rib_flag': '0x10'
'::1/128/rib_ext_flag': '0x40008'
'330::/64/route node lock': '2'
'330::/64/rib_rgate_num': '1'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 route database | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_line = self.dut_get_start_show_info(show_info)
        flag = 0
        for value in show_line:
            if re.match("(.*>) (.*) NHB-ID: \((\d+), (\d+)\)",value):
                obj1 = re.match("(.*>) (.*) NHB-ID: \((\d+), (\d+)\)",value)
                key1 = obj1.group(2)
                #ststus = obj1.group(1).strip().split()[0]
                dict_value[key1+"/NHB-ID/1"]  = obj1.group(3)
                dict_value[key1+"/NHB-ID/2"] =  obj1.group(4)
                #dict_value[key1+"/ststus"] = ststus
                flag = 1
            elif re.match("(.*>) (.*) NHB-ID: NULL",value):
                obj1 = re.match("(.*>) (.*) NHB-ID: NULL",value)
                key1 = obj1.group(2)
                ststus = obj1.group(1).strip().split()[0]
                dict_value[key1+"/NHB-ID"]  = "NULL"
                dict_value[key1+"/ststus"] = ststus
                flag = 1
            elif re.match("(.*>) (\S+/\d+) .*",value):
                obj2 = re.match("(.*>) (\S+/\d+) .*",value)
                key1 = obj2.group(2)
                flag = 1
            elif re.match("NHB-ID: \((\d+), (\d+)\)",value.strip()):
                obj4 = re.match("NHB-ID: \((\d+), (\d+)\)",value.strip())
                dict_value[key1+"/NHB-ID/1"]  = obj4.group(1)
                dict_value[key1+"/NHB-ID/2"] =  obj4.group(2)
            else:
               if flag == 1 :
                   if "," in value:
                       list1 = value.split(",")
                       for value_list1 in list1:
                           if ":" in value_list1:
                               list2 = value_list1.split(":")
                               dict_value[key1+"/"+list2[0].strip()] = list2[1].strip()
                           elif "=" in value_list1 :
                               list2 = value_list1.split("=")
                               dict_value[key1+"/"+list2[0].strip()] = list2[1].strip()
                   elif ":" in value :
                       list2 = value.split(":",1)
                       dict_value[key1+"/"+list2[0].strip()] = list2[1].strip()

        return dict_value
    def dut_get_show_monitor_session_num(self,show_info):
        """
        Function:show monitor session <num>回显解析函数
        CLI命令:show monitor session <num>
        回显信息示例:
Ruijie(config)#show monitor session 1
sess-num: 1
span-type: ERSPAN_SOURCE
src-intf:
  GigabitEthernet 0/5         frame-type: RX Only     status: Inactive
original ip address: 1.1.1.1
destination ip address: 1.1.3.2
ip ttl: 64
ip dscp: 0
vrf: default
Ruijie(config)#

        Returns:
{'sess-num': '1'
'ip dscp': '0'
'sess-num 1/span-type': 'ERSPAN_SOURCE'
'GigabitEthernet 0/5/frame-type': 'RX Only'
'GigabitEthernet 0/5/status': 'Inactive'
'src-intf': ['GigabitEthernet 0/5'], 'destination ip address': '1.1.3.2'
'sess-num 1/src-intf': ['GigabitEthernet 0/5'], 'sess-num 1/dest-intf': [], 'vrf': 'default'
'original ip address': '1.1.1.1'
'ip ttl': '64'
'dest-intf': [], 'span-type': 'ERSPAN_SOURCE'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show monitor session <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}  # 定义字典
        show_info_list = self.dut_get_start_show_info(show_info)
        src_list=[]
        dest_list=[]
        scr_flag = 0
        dest_flag = 0
        for i in range(len(show_info_list)):
            if "sess-num:" in show_info_list[i] :
                list_1 =show_info_list[i].split(":")
                sess_num = list_1[1].strip()
                dict_value[list_1[0].strip()] = list_1[1].strip()
                dict_value["sess-num "+sess_num+"/"+"dest-intf"] =dest_list
                dest_list = []
            elif "span-type:" in show_info_list[i]:
                list_3 =show_info_list[i].split(":")
                dict_value[list_3[0].strip()] = list_3[1].strip()
                dict_value["sess-num "+sess_num+"/"+list_3[0].strip()] = list_3[1].strip()
            elif "src-intf:" in show_info_list[i]:
                scr_flag = 1
            elif "dest-intf:" in show_info_list[i]:
                dict_value["src-intf"] =src_list
                dict_value["sess-num "+sess_num+"/"+"src-intf"] =src_list
                src_list=[]
                scr_flag = 0
                dest_flag = 1
            elif re.match("(\w+).*",show_info_list[i]) and scr_flag==1:
                dict_value["src-intf"] =src_list
                dict_value["sess-num "+sess_num+"/"+"src-intf"] =src_list
                src_list=[]
                scr_flag = 0
                if ":" in show_info_list[i]:
                    list_4 = show_info_list[i].split(":")
                    dict_value[list_4[0].strip()] =list_4[1].strip()
            else:
                if scr_flag == 1 :
                    if "frame-type" in show_info_list[i].strip():
                        list_5 = show_info_list[i].strip().split("frame-type")
                        src_list.append(list_5[0].strip())
                        new_str = "frame-type"+list_5[1]
                        if re.match("frame-type: (.*)\s+status: (.*)",new_str.strip()):
                            obj = re.match("frame-type: (.*)\s+status: (.*)",new_str.strip())
                            dict_value[list_5[0].strip()+"/frame-type"] = obj.group(1).strip()
                            dict_value[list_5[0].strip() + "/status"] = obj.group(2).strip()
                    else:
                        src_list.append(show_info_list[i].strip())
                elif dest_flag == 1 :
                    if "mtp" in show_info_list[i]:
                        list_2 =show_info_list[i].strip().split()
                        dict_value[list_2[0].strip()] = list_2[1].strip()
                    dest_list.append(show_info_list[i].strip())
                elif ":" in show_info_list[i]:
                    list_4 = show_info_list[i].split(":")
                    dict_value[list_4[0].strip()] =list_4[1].strip()



        dict_value["dest-intf"] =dest_list
        dict_value["sess-num "+sess_num+"/"+"dest-intf"] =dest_list
        return dict_value
    def dut_get_show_acl_capability(self,show_info):
        """
        Function:show acl capability回显解析函数
        CLI命令:show acl capability
        回显信息示例:
S57H_2013#show acl capability
    acld capability:
        named acl max num:                  1000
        ip extend acl:                      enable
        mac extend acl:                     enable
        expert acl:                         enable
        expert advanced acl(acl80):         enable
        ipv6 support:                       enable
        global acl:                         enable
        counter support:                    enable
        logging support:                    enable
        redirect support:                   enable
        secure channel support:             enable
        fwmode software:                    disable
        reflect apply:                      disable
    S57H_2013#

        Returns:
{'named acl max num': '1000'
'expert advanced acl(acl80)': 'enable'
'expert acl': 'enable'
'ip extend acl': 'enable'
'ipv6 support': 'enable'
'fwmode software': 'disable'
'secure channel support': 'enable'
'acld capability': ''
'reflect apply': 'disable'
'mac extend acl': 'enable'
'global acl': 'enable'
'logging support': 'enable'
'counter support': 'enable'
'redirect support': 'enable'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show acl capability | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_debug_ipfix_cap(self,show_info):
        """
        Function:debug ipfix cap回显解析函数
        CLI命令:debug ipfix cap
        回显信息示例:
2PL2-EG#debug ipfix cap
FRAME Capacity:
         Basic:true 
         IPv6: true 
         KEY: true 
         MPLS: true 
         SAMPLE RATE: [0 2147483647] 
LOCAL Capacity:
         Basic:true 
         IPv6: true 
         KEY: true 
         INTF: true 
         AGG: true 
         VXLAN: true 
         MGMT: true 
         MPLS: true 
         LAYER2: true 
         TMP-MODEL: true 
         SPL: true 
         TTK: true 
         DIS: true 
         HW Capacity: 0XFF  
         SAMPLE RATE: [0 2147483647] 
2PL2-EG#

        Returns:
{'FRAME Capacity/Basic': 'true'
'FRAME Capacity/KEY': 'true'
'LOCAL Capacity/MPLS': 'true'
'LOCAL Capacity/LAYER2': 'true'
'LOCAL Capacity/MGMT': 'true'
'FRAME Capacity/IPv6': 'true'
'FRAME Capacity/SAMPLE RATE': '[0 2147483647]'
'LOCAL Capacity/VXLAN': 'true'
'LOCAL Capacity/SAMPLE RATE': '[0 2147483647]'
'LOCAL Capacity/INTF': 'true'
'LOCAL Capacity/AGG': 'true'
'LOCAL Capacity/TMP-MODEL': 'true'
'LOCAL Capacity/IPv6': 'true'
'FRAME Capacity/MPLS': 'true'
'LOCAL Capacity/Basic': 'true'
'LOCAL Capacity/SPL': 'true'
'LOCAL Capacity/TTK': 'true'
'LOCAL Capacity/DIS': 'true'
'LOCAL Capacity/KEY': 'true'
'LOCAL Capacity/HW Capacity': '0XFF'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=debug ipfix cap | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        show_list = self.dut_get_start_show_info(show_info)
        for value in show_list:
            if re.match("\w+.*",value) and ":" in value:
                key1 = value.split(":")[0].strip()
            elif ":" in value:
                list1 = value.split(":")
                key2 = list1[0].strip()
                value2 = list1[1].strip()
                dict_value[key1+"/"+key2] = value2
        return dict_value
    def dut_get_show_mac_maxdynamicmaccount_vlan_num(self,show_info):
        """
        Function:show mac max-dynamic-mac-count vlan <num>回显解析函数
        CLI命令:show mac max-dynamic-mac-count vlan <num>
        回显信息示例:
Topswtich(config)#show mac max-dynamic-mac-count vlan 4093
Vlan Limit   MAC count Learning
---- ------- --------- --------
4093 128000   0          YES    
Topswtich(config)#

        Returns:
{'4093/Learning': 'YES'
'4093/Limit': '128000'
'Vlan_list': ['4093'], '4093/MAC count': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mac max-dynamic-mac-count vlan <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Vlan")
    def dut_get_show_nsm_nhb_byid_num(self,show_info):
        dict_value ={}
        show_list = self.dut_get_start_show_info(show_info)
        for value in show_list:
            if "," in value:
                list1 = value.split(",")
                for value2 in list1:
                    if ":" in value2:
                        if re.match("NHB-ID: \((\d+), (\d+)\)",value2.strip()):
                            obj = re.match("NHB-ID: \((\d+), (\d+)\)",value2.strip())
                            dict_value["NHB-ID/1"] = obj.group(1)
                            dict_value["NHB-ID/2"] = obj.group(2)
                        list2 = value2.split(":")
                        dict_value[list2[0].strip()] =list2[1].strip()
        return dict_value
    def dut_get_show_ipv6_dhcp_relay_destination_all(self,show_info):
        """
        Function:show ipv6 dhcp relay destination all回显解析函数
        CLI命令:show ipv6 dhcp relay destination all
        回显信息示例:
AC3#show ipv6 dhcp relay destination all
Interface:GigabitEthernet 0/3
Destination address(es)                 Output Interface
2015:19:2::2                            GigabitEthernet 0/4

        Returns:
{'Interface/GigabitEthernet 0/3/Output Interface': 'GigabitEthernet 0/4'
'interface_list': ['GigabitEthernet 0/3'], 'Interface/GigabitEthernet 0/3/Destination address(es)': '2015:19:2::2'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 dhcp relay destination all | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判#
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)
        ######################################################
        #使用正则匹配列表前的内容，并提取出写入字典，删除该行#
        ######################################################
        #print dut_info_split

        int_list = []
        for i in range(length):
            if re.match(r'Interface:\w+.*',dut_info_split[i]):
                matchObj = re.match(r'(.*):(.*)',dut_info_split[i])
                first_name = matchObj.group(1)+'/'+matchObj.group(2)
                int_list.append(matchObj.group(2))
                # dict_value[matchObj.group(1)]=matchObj.group(2)
                index0 = dut_info_split[i+1].find("Destination address(es)")
                index = dut_info_split[i+1].find("Output")
                totle_name_1 = dut_info_split[i+1][index0:index]
                totle_name_1 = totle_name_1.strip()
                totle_name_2 = dut_info_split[i+1][index:index+30]
                totle_name_2 = totle_name_2.rstrip()
                name_1 = first_name+'/'+totle_name_1
                name_2 = first_name+'/'+totle_name_2
                value_1 = dut_info_split[i+2][index0:index]
                value_1 = value_1.strip()
                value_2 = dut_info_split[i+2][index:index+30]
                value_2 = value_2.strip()
                dict_value[name_1]=value_1
                dict_value[name_2]=value_2
            else:
                continue
        dict_value["interface_list"]=int_list

        return dict_value
    def dut_get_show_dot1x_privatesupplicantonly(self,show_info):
        """
        Function:show dot1x private-supplicant-only回显解析函数
        CLI命令:show dot1x private-supplicant-only
        回显信息示例:
12.3pl1_zujian#show dot1x private-supplicant-only 

private-supplicant-only: Disabled

        Returns:
{'private-supplicant-only': 'Disabled'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show dot1x private-supplicant-only | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_dot1x_probetimer(self,show_info):
        """
        Function:show dot1x probe-timer回显解析函数
        CLI命令:show dot1x probe-timer
        回显信息示例:
12.3pl1_zujian#show dot1x probe-timer 

Hello Interval: 20 Seconds 
Hello Alive: 42 Seconds

        Returns:
{'Hello Alive': '42 Seconds'
'Hello Interval': '20 Seconds'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show dot1x probe-timer | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_ip_fpm_num_num_flow(self,show_info):
        """
        Function:show ip fpm <num> <num> flow回显解析函数
        CLI命令:show ip fpm <num> <num> flow
        回显信息示例:
S86E(config)#show ip fpm 1 1 flow
Pr  SrcAddr                          DstAddr                          SrcPort      DstPort      Vrf          SendBytes  RecvBytes  St    srcif                     dstif                     vfw_id       ctrl_flag    
6   35.5.5.100                       35.5.5.100                       233          234          0            35392      0          1     33ea                      37d2                      2            40200        
S86E(config)#

        Returns:
{"35.5.5.100/35.5.5.100/RecvBytes": "0"
"35.5.5.100/35.5.5.100/SendBytes": "35392"
"35.5.5.100/35.5.5.100/vfw_id": "2"
"35.5.5.100/35.5.5.100/Vrf": "0"
"SrcAddr_list": ["35.5.5.100/35.5.5.100"], "35.5.5.100/35.5.5.100/St": "1"
"35.5.5.100/35.5.5.100/srcif": "33ea"
"35.5.5.100/35.5.5.100/DstPort": "234"
"35.5.5.100/35.5.5.100/SrcPort": "233"
"35.5.5.100/35.5.5.100/ctrl_flag": "40200"
"35.5.5.100/35.5.5.100/Pr": "6"
"35.5.5.100/35.5.5.100/dstif": "37d2"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip fpm <num> <num> flow | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_blank_list(show_info,"SrcAddr",value_title_2="DstAddr")
    def dut_get_show_interfaces_switchport_backup(self,show_info):
        """
        Function:show interfaces switchport backup回显解析函数
        CLI命令:show interfaces switchport backup
        回显信息示例:
s57_2001#show interfaces switchport backup 

Switch Backup Interface Pairs:
Active Interface         Backup Interface         State
--------------------------------------------------------------------------
Ag1                      Ag2                      Active Down/Backup Down
Ag3                      Ag4                      Active Down/Backup Down
Ag5                      Ag6                      Active Down/Backup Down
Ag7                      Ag8                      Active Down/Backup Down
Ag9                      Ag10                     Active Down/Backup Down
Ag11                     Ag12                     Active Down/Backup Down
Ag13                     Ag14                     Active Down/Backup Down
Ag15                     Ag16                     Active Down/Backup Down
Ag17                     Ag18                     Active Down/Backup Down
Ag19                     Ag20                     Active Down/Backup Down
Ag21                     Ag22                     Active Down/Backup Down
Ag23                     Ag24                     Active Down/Backup Down
Ag25                     Ag26                     Active Down/Backup Down
Ag27                     Ag28                     Active Down/Backup Down
Ag29                     Ag30                     Active Down/Backup Down
Ag31                     Ag32                     Active Down/Backup Down
s57_2001#

        Returns:
{'Ag27/State': 'Active Down/Backup Down'
'Ag29/State': 'Active Down/Backup Down'
'Ag21/State': 'Active Down/Backup Down'
'Ag25/Backup Interface': 'Ag26'
'Ag7/Backup Interface': 'Ag8'
'Ag15/Backup Interface': 'Ag16'
'Ag7/State': 'Active Down/Backup Down'
'Ag11/State': 'Active Down/Backup Down'
'Ag17/Backup Interface': 'Ag18'
'Ag1/Backup Interface': 'Ag2'
'Ag9/Backup Interface': 'Ag10'
'Ag27/Backup Interface': 'Ag28'
'Ag5/Backup Interface': 'Ag6'
'Ag13/Backup Interface': 'Ag14'
'Ag3/Backup Interface': 'Ag4'
'Ag23/Backup Interface': 'Ag24'
'Ag17/State': 'Active Down/Backup Down'
'Ag23/State': 'Active Down/Backup Down'
'Ag25/State': 'Active Down/Backup Down'
'Ag1/State': 'Active Down/Backup Down'
'Ag19/Backup Interface': 'Ag20'
'Ag3/State': 'Active Down/Backup Down'
'Ag5/State': 'Active Down/Backup Down'
'Ag13/State': 'Active Down/Backup Down'
'Ag11/Backup Interface': 'Ag12'
'Ag21/Backup Interface': 'Ag22'
'Ag19/State': 'Active Down/Backup Down'
'Active Interface_list': ['Ag1'
'Ag3'
'Ag5'
'Ag7'
'Ag9'
'Ag11'
'Ag13'
'Ag15'
'Ag17'
'Ag19'
'Ag21'
'Ag23'
'Ag25'
'Ag27'
'Ag29'
'Ag31'], 'Ag31/State': 'Active Down/Backup Down'
'Ag9/State': 'Active Down/Backup Down'
'Ag29/Backup Interface': 'Ag30'
'Active Interface_num': '16'
'Ag31/Backup Interface': 'Ag32'
'Ag15/State': 'Active Down/Backup Down'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interfaces switchport backup | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        show_info_list_new =[]
        for value_1 in show_info_list:
            if "------" in value_1 or "Switch Backup Interface Pairs" in value_1:
                pass
            else:
                show_info_list_new.append(value_1)
        show_info_new = "\n".join(show_info_list_new)
        dict1 = self.dut_show_autoget_blank_list(show_info_new,"Active Interface")
        if dict1.has_key("Active Interface_list"):
            len_1 = str(len(dict1["Active Interface_list"]))
            dict1["Active Interface_num"] = len_1
        return dict1
    def dut_get_show_spanningtree_mst_configuration(self,show_info):
        """
        Function:show spanning-tree mst configuration回显解析函数
        CLI命令:show spanning-tree mst configuration
        回显信息示例:
s57_2001(config)#show spanning-tree mst configuration 
Multi spanning tree protocol : Disable
Name     : 
Revision : 0
Instance  Vlans Mapped
-------- --------------------------------------------
0        : 1-10, 16-4094
1        : 11
2        : 12
3        : 13
4        : 14
5        : 15
-----------------------------------------------------
s57_2001(config)#

        Returns:
{'Name': ''
'Multi spanning tree protocol': 'Disable'
'1': '11'
'0': '1-10, 16-4094'
'3': '13'
'2': '12'
'5': '15'
'4': '14'
'Revision': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show spanning-tree mst configuration | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_info_analy_all_colon(show_info,"show")

    def dut_get_show_vlan_id_num(self,show_info):
        """
        Function:show vlan id <num>回显解析函数
        CLI命令:show vlan id <num>
        回显信息示例:
Topswtich(config)#show vlan id 1
VLAN       Name                             Status    Ports
---------- -------------------------------- --------- -----------------------------------
         1 VLAN0001                         STATIC    Gi2/32, Gi2/34, Gi2/35, Gi2/36        
                                                      Gi2/37, Gi2/38, Gi2/39, Gi2/40        
                                                      Gi2/41, Gi2/42, Gi2/43, Gi2/44        
                                                      Te2/45, Te2/46, Te2/47, Te2/48        
                                                      Gi3/35                                
Topswtich(config)#

        Returns:
{'1/Status': 'STATIC'
'1/Name': 'VLAN0001'
'1/Ports': ['Gi2/32'
'Gi2/34'
'Gi2/35'
'Gi2/36'
'Gi2/37'
'Gi2/38'
'Gi2/39'
'Gi2/40'
'Gi2/41'
'Gi2/42'
'Gi2/43'
'Gi2/44'
'Te2/45'
'Te2/46'
'Te2/47'
'Te2/48'
'Gi3/35']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show vlan id <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_vlan(show_info)
    def dut_get_show_ip_ref_loadbalance(self,show_info):
        """
        Function:show ip ref load-balance回显解析函数
        CLI命令:show ip ref load-balance
        回显信息示例:
7808_2014#show ip ref load-balance
  load-balance            : enhanced profile.
  hash-elasticity        : enable.
7808_2014#

        Returns:
{'hash-elasticity': 'enable'
'load-balance': 'enhanced profile'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip ref load-balance | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value={}
        for value in show_info_list:
            if ":" in value:
                list1 = value.split(":")
                dict_value[list1[0].strip().strip(".")] = list1[1].strip().strip(".")
        return dict_value
    def dut_get_show_vxlan_server_database(self,show_info):
        """
        Function:show vxlan server database回显解析函数
        CLI命令:show vxlan server database
        回显信息示例:
Ruijie#show vxlan server database
vxlan capa:
  entry: 4000
  overlaytunnel: 2000
  overlayrouter: 4000
  tunnel-vni counter: 500
  support-bridge: true
  support-router: true
  support-mixture: true
  support-in-limit:
    limit-min-in: 1
    limit-max-in: 240000000
  support-out-limit:
    limit-min-out: 1
    limit-max-out: 240000000
  vni-counter: 1000
  support-multiple-vlan: true





12.2PL2

        Returns:
{"support-multiple-vlan": "true"
"vxlan capa": ""
"overlaytunnel": "2000"
"support-out-limit": ""
"support-mixture": "true"
"support-router": "true"
"limit-max-in": "240000000"
"overlayrouter": "4000"
"vni-counter": "1000"
"tunnel-vni counter": "500"
"support-bridge": "true"
"limit-min-in": "1"
"entry": "4000"
"limit-max-out": "240000000"
"limit-min-out": "1"
"support-in-limit": ""}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show vxlan server database | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        if "Tunnel From Database:" in show_info and "Tunnel Associate From Database:" in show_info and "VXLAN CAPA:" in show_info:
            show_info_list = self.dut_get_start_show_info(show_info)
            info_list1=[]
            info_list2=[]
            info_list3 =[]
            flag1 = flag2 = flag3 =0
            for value in show_info_list:
                if "Tunnel From Database:" in value:
                    flag1 =1
                    continue
                if flag1 == 1:
                    if "Tunnel Associate From Database" in value:
                        flag1=0
                        flag2=1
                        continue
                    info_list1.append(value)
                elif flag2 == 1 :
                    if "VXLAN CAPA" in value:
                        flag2 = 0
                        flag3 = 1
                        continue
                    info_list2.append(value)
                elif flag3 == 1 :
                    info_list3.append(value)

            info1 = "\n".join(info_list1)
            info2 = "\n".join(info_list2)
            #info3 = "\n".join(info_list3)
            dict1_value = self.dut_show_autoget_whippletree_form_analysis(info1,"Source IP")
            dict2_value = self.dut_show_autoget_whippletree_form_analysis(info2,"VXLAN")
            #dict3_value = self.dut_get_show_info_analy_all_colon(info3,"show")
            dict3_value ={}
            for value in info_list3:
                if ":" in value:
                    list1 = value.split(":")
                    if list1[0].strip() == "or":
                        dict3_value["overlayrouter"] = list1[1].strip()
                    elif list1[0].strip() == "tunnel":
                        dict3_value["overlaytunnel"] = list1[1].strip()
            return dict(dict1_value.items()+dict2_value.items()+dict3_value.items())
        else:
            return self.dut_get_show_info_analy_all_colon(show_info, "show")
    def dut_get_show_mac_flapping_record(self,show_info):
        """
        Function:show mac flapping record回显解析函数
        CLI命令:show mac flapping record
        回显信息示例:
Ruijie#show mac flapping record
 Mac address flapping detect status       : on
 Mac address flapping detect interval     : 1s
 Mac address flapping syslog supress time : 10s
 Mac address flapping record max count    : 300
 Mac address flapping record totol count  : 2
 
 (D):error down
 Move-Time             VLAN  MAC-Address    Original-Port      Move-Ports         
 --------------------- ----- -------------- ------------------ ------------------ 
 2019.5.21 23:3:52     1     0000.0000.0001 Gi0/6              Gi0/5             
 2019.5.21 23:3:52     1     0000.0000.0001 Gi0/6(D)           Gi0/5             

Ruijie#

        Returns:
{'Mac address flapping detect status': 'on'
'0000.0000.0001/Gi0/6(D)/Move-Ports': 'Gi0/5'
'0000.0000.0001/Gi0/6/Move-Time': '2019.5.21 23:3:52'
'0000.0000.0001/Gi0/6(D)/Move-Time': '2019.5.21 23:3:52'
'Mac address flapping detect interval': '1s'
'0000.0000.0001/Gi0/6/VLAN': '1'
'MAC-Address_list': ['0000.0000.0001/Gi0/6'
'0000.0000.0001/Gi0/6(D)'], 'Mac address flapping record totol count': '2'
'Mac address flapping syslog supress time': '10s'
'0000.0000.0001/Gi0/6(D)/VLAN': '1'
'0000.0000.0001/Gi0/6/Move-Ports': 'Gi0/5'
'Mac address flapping record max count': '300'
'(D)': 'error down'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mac flapping record | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"MAC-Address","Original-Port",1)
    def dut_get_show_lldp_tlvconfig_interface_dutport(self,show_info):
        """
        Function:show lldp tlv-config interface <dutport>回显解析函数
        CLI命令:show lldp tlv-config interface <dutport>
        回显信息示例:
D1#show lldp tlv-config interface FortyGigabitEthernet 0/51
----------------------------------------------------------------------------
LLDP tlv-config of port [FortyGigabitEthernet 0/51]
----------------------------------------------------------------------------
               NAME               STATUS DEFAULT
--------------------------------- ------ -------
Basic optional TLV:
Port Description TLV              YES    YES    
System Name TLV                   YES    YES    
System Description TLV            YES    YES    
System Capabilities TLV           YES    YES    
Management Address TLV            YES    YES    

IEEE 802.1 extend TLV:
Port VLAN ID TLV                  YES    YES    
Port And Protocol VLAN ID TLV     YES    YES    
VLAN Name TLV                     YES    YES    

IEEE 802.3 extend TLV:
MAC-Physic TLV                    YES    YES    
Power via MDI TLV                 YES    YES    
Link Aggregation TLV              YES    YES    
Maximum Frame Size TLV            YES    YES    

LLDP-MED extend TLV:
Capabilities TLV                  YES    YES    
Network Policy TLV                YES    YES    
Location Identification TLV       NO     NO     
Extended Power via MDI TLV        YES    YES    
Inventory TLV                     YES    YES

        Returns:
{"Network Policy TLV/STATUS": "YES"
"Port Description TLV/DEFAULT": "YES"
"MAC-Physic TLV/DEFAULT": "YES"
"Port VLAN ID TLV/STATUS": "YES"
"Management Address TLV/STATUS": "YES"
"Location Identification TLV/STATUS": "NO"
"System Name TLV/DEFAULT": "YES"
"Port Description TLV/STATUS": "YES"
"VLAN Name TLV/STATUS": "YES"
"System Capabilities TLV/DEFAULT": "YES"
"Extended Power via MDI TLV/STATUS": "YES"
"System Capabilities TLV/STATUS": "YES"
"Link Aggregation TLV/DEFAULT": "YES"
"System Name TLV/STATUS": "YES"
"Maximum Frame Size TLV/STATUS": "YES"
"MAC-Physic TLV/STATUS": "YES"
"Inventory TLV/DEFAULT": "YES"
"Management Address TLV/DEFAULT": "YES"
"Port VLAN ID TLV/DEFAULT": "YES"
"Power via MDI TLV/DEFAULT": "YES"
"VLAN Name TLV/DEFAULT": "YES"
"NAME_list": ["Port Description TLV"
"System Name TLV"
"System Description TLV"
"System Capabilities TLV"
"Management Address TLV"
"Port VLAN ID TLV"
"Port And Protocol VLAN ID TLV"
"VLAN Name TLV"
"MAC-Physic TLV"
"Power via MDI TLV"
"Link Aggregation TLV"
"Maximum Frame Size TLV"
"Capabilities TLV"
"Network Policy TLV"
"Location Identification TLV"
"Extended Power via MDI TLV"
"Inventory TLV"], "Inventory TLV/STATUS": "YES"
"Power via MDI TLV/STATUS": "YES"
"Location Identification TLV/DEFAULT": "NO"
"System Description TLV/STATUS": "YES"
"System Description TLV/DEFAULT": "YES"
"Capabilities TLV/STATUS": "YES"
"Network Policy TLV/DEFAULT": "YES"
"Port And Protocol VLAN ID TLV/STATUS": "YES"
"Link Aggregation TLV/STATUS": "YES"
"Extended Power via MDI TLV/DEFAULT": "YES"
"Maximum Frame Size TLV/DEFAULT": "YES"
"Capabilities TLV/DEFAULT": "YES"
"Port And Protocol VLAN ID TLV/DEFAULT": "YES"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show lldp tlv-config interface <dutport> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        new_list=[]
        for value in show_info_list:
            if ":" in value:
                pass
            else:
                new_list.append(value)
        new_info = "\n".join(new_list)
        return self.dut_show_autoget_whippletree_form_analysis(new_info,"NAME")
    def dut_get_show_mls_qos_queueing(self,show_info):
        """
        Function:show mls qos queueing回显解析函数
        CLI命令:show mls qos queueing
        回显信息示例:
S6910(config)#show mls qos queueing 
Cos-queue map:
cos qid
--- ---
0   0
1   1
2   2
3   3
4   4
5   5
6   6
7   7

wfq bandwidth weights:
qid weights
--- -------
0   1
1   1
2   1
3   1
4   1
5   1
6   1
7   1

        Returns:
{"6/qid": "6"
"qid_range": ["0"
"7"], "0/qid": "0"
"qid_list": ["0"
"1"
"2"
"3"
"4"
"5"
"6"
"7"], "5/weights": "1"
"0/weights": "1"
"wfq/qid": "bandwidth"
"7/qid": "7"
"3/weights": "1"
"3/qid": "3"
"4/qid": "4"
"1/qid": "1"
"2/qid": "2"
"4/weights": "1"
"6/weights": "1"
"7/weights": "1"
"2/weights": "1"
"1/weights": "1"
"5/qid": "5"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mls qos queueing | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        try:
            cmd_str = 'show mls'
            show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info, cmd_str)
            if not show_info_list_line:
                logging.info(u'show回显为空')
                return None
            for index, line in enumerate(show_info_list_line):
                if line.find('Cos-queue map') != -1:
                    newkey = 'Cos-queue map'
                    dict1 = self.dut_showinfo_include_lines_analysiz(show_info_list_line[index + 1:index + 11],
                                                                     key_start=newkey)
                    logging.debug(dict1)
                elif line.find('wrr bandwidth weights') != -1:
                    newkey = 'wrr bandwidth weights'
                    dict2 = self.dut_showinfo_include_lines_analysiz(show_info_list_line[index + 1:index + 11],
                                                                     key_start=newkey)
                    logging.debug(dict2)
                elif line.find('drr bandwidth weights') != -1:
                    newkey = 'drr bandwidth weights'
                    dict3 = self.dut_showinfo_include_lines_analysiz(show_info_list_line[index + 1:index + 11],
                                                                     key_start=newkey)
                    logging.debug(dict3)
                elif line.find('wfq bandwidth weights') != -1:
                    newkey = 'wfq bandwidth weights'
                    dict4 = self.dut_showinfo_include_lines_analysiz(show_info_list_line[index + 1:index + 11],
                                                                     key_start=newkey)
                    logging.debug(dict4)
            dict_value = dict(dict1.items() + dict2.items() + dict3.items() + dict4.items())
            return dict_value
        except:
            show_info_list = self.dut_get_start_show_info(show_info)
            dict_value={}
            flag = 0
            qid_list = []
            for value in show_info_list:
                value = value.strip()
                if "cos qid" in value:
                    flag = 1
                elif "qid weights" in value:
                    flag = 2
                elif "--" in value:
                    pass
                else:
                    if flag == 1:
                        list_1 = value.split()
                        dict_value[list_1[0].strip()+"/qid"] = list_1[1].strip()

                    elif flag ==2 :
                        list_1 = value.split()
                        dict_value[list_1[0].strip() + "/weights"] = list_1[1].strip()
                        qid_list.append(list_1[0].strip())
            new_qid_range = []
            new_qid_range.append(qid_list[0])
            new_qid_range.append(qid_list[-1])
            dict_value["qid_range"] = new_qid_range
            dict_value["qid_list"] = qid_list

            return dict_value
    def dut_get_show_cpuprotect_hardwarestatistics_device_num(self,show_info):
        """
        Function:show cpu-protect hardware-statistics device <num>回显解析函数
        CLI命令:show cpu-protect hardware-statistics device <num>
        回显信息示例:
Ruijie#show cpu-protect hardware-statistics device 1
Packet Type             Rate(pps)  Drop(pps)  Total         Total Drop    DropTime          
----------------------  ---------  ---------  ---------     ----------    ----------------------------
arp                     0          0          19            0                                         
arp-auth-proxy          0          0          0             0                                         
bfd                     0          0          0             0                                         
bgp                     0          0          0             0                                         
bgpv6                   0          0          0             0                                         
bpdu                    0          0          0             0                                         
cdp                     0          0          0             0                                         
cfm                     0          0          0             0                                         
dhcp-relay-c            0          0          0             0                                         
dhcp-relay-s            0          0          0             0                                         
dhcp6-client            0          0          0             0                                         
dhcp6-relay             0          0          0             0                                         
dhcp6-server            0          0          0             0                                         
dhcps                   0          0          0             0                                         
dhcps6                  0          0          0             0                                         
dldp                    0          0          0             0                                         
dns-client              0          0          0             0                                         
dns-server              0          0          0             0                                         
dot1x                   0          0          0             0                                         
dvmrp                   0          0          0             0                                         
efm                     0          0          0             0                                         
erps                    0          0          0             0                                         
fcoe-fip                0          0          0             0                                         
fcoe-local              0          0          0             0                                         
fpga-cfg                0          0          0             0                                         
fpga-notify             0          0          0             0                                         
gvrp                    0          0          0             0                                         
hop-limit               0          0          0             0                                         
icmp                    0          0          0             0                                         
igmp                    0          0          0             0                                         
igmp-drop               0          0          0             0                                         
ip-option               0          0          0             0                                         
ip-option6              0          0          0             0                                         
ipfix                   0          0          0             0                                         
ipv6-all                0          0          0             0                                         
isis                    0          0          18            0                                         
l3mtu-fail              0          0          0             0                                         
lacp                    0          0          0             0                                         
lldp                    0          0          0             0                                         
local-ipv4              0          0          0             0                                         
local-ipv6              0          0          0             0                                         
mac-move                0          0          0             0                                         
madp                    0          0          0             0                                         
mgmt                    0          0          0             0                                         
mlag                    0          0          0             0                                         
mld                     0          0          0             0                                         
mld-drop                0          0          0             0                                         
mpls-ctrl               0          0          0             0                                         
mpls-ctrl-v6            0          0          0             0                                         
mpls-ttl0               0          0          0             0                                         
mpls-ttl1               0          0          0             0                                         
nacm-drop               0          0          0             0                                         
nd-non-snp              0          0          0             0                                         
nd-snp-ns-na            0          0          0             0                                         
nd-snp-ns-na-l3         0          0          0             0                                         
nd-snp-ra-redirect      0          0          0             0                                         
nd-snp-ra-redirect-l3   0          0          0             0                                         
nd-snp-rs               0          0          0             0                                         
nd-snp-rs-l3            0          0          0             0                                         
nd-vxlan                0          0          0             0                                         
ndsnp                   0          0          0             0                                         
option82                0          0          0             0                                         
ospf                    1          0          64            0                                         
ospf3                   0          0          17            0                                         
other                   0          0          0             0                                         
pim                     0          0          0             0                                         
pimv6                   0          0          0             0                                         
rerp                    0          0          0             0                                         
reup                    0          0          0             0                                         
rip                     0          0          0             0                                         
ripng                   0          0          20            0                                         
rldp                    0          0          0             0                                         
rt-host                 0          0          0             0                                         
rt-hostv6               0          0          0             0                                         
sbfd                    0          0          0             0                                         
sdn                     0          0          0             0                                         
sflow                   0          0          0             0                                         
snmp                    0          0          0             0                                         
ssh                     0          0          0             0                                         
stargv-ipmc             0          0          0             0                                         
stargv6-ipmc            0          0          0             0                                         
tcp-syn                 0          0          0             0                                         
telnet                  0          0          0             0                                         
tpp                     0          0          0             0                                         
trill                   0          0          0             0                                         
trill-isis              0          0          0             0                                         
trill-local             0          0          0             0                                         
trill-oam               0          0          0             0                                         
ttl0                    0          0          0             0                                         
ttl1                    0          0          0             0                                         
tunnel-bpdu             0          0          0             0                                         
tunnel-gvrp             0          0          0             0                                         
udp-flood               0          0          0             0                                         
unknown-v4mc            0          0          0             0                                         
unknown-v6mc            0          0          0             0                                         
v4uc-route              0          0          0             0                                         
v6uc-route              0          0          0             0                                         
vrrp                    0          0          0             0                                         
vrrpv6                  0          0          0             0                                         
web-auth                0          0          0             0                                         
xgv-ipmc                0          0          0             0                                         
xgv6-ipmc               0          0          0             0                                         
Ruijie#

        Returns:
{"stargv6-ipmc/Total": "0"
"nd-non-snp/Total Drop": "0"
"nd-snp-rs/Total Drop": "0"
"dhcp6-server/Drop(pps)": "0"
"mac-move/Total Drop": "0"
"stargv-ipmc/DropTime": ""
"unknown-v6mc/DropTime": ""
"ospf3/Drop(pps)": "0"
"cfm/Total": "0"
"dhcp-relay-s/Drop(pps)": "0"
"tpp/DropTime": ""
"efm/DropTime": ""
"trill-oam/Total Drop": "0"
"l3mtu-fail/Rate(pps)": "0"
"web-auth/DropTime": ""
"udp-flood/Rate(pps)": "0"
"v6uc-route/Drop(pps)": "0"
"web-auth/Total Drop": "0"
"hop-limit/Total Drop": "0"
"icmp/Rate(pps)": "0"
"mpls-ctrl-v6/Total Drop": "0"
"mld-drop/Total Drop": "0"
"nd-snp-ra-redirect-l3/DropTime": ""
"ttl0/Rate(pps)": "0"
"udp-flood/Drop(pps)": "0"
"nd-snp-ns-na/DropTime": ""
"rt-hostv6/Drop(pps)": "0"
"stargv-ipmc/Rate(pps)": "0"
"unknown-v6mc/Rate(pps)": "0"
"web-auth/Drop(pps)": "0"
"ip-option6/Drop(pps)": "0"
"cdp/Total": "0"
"dns-client/Total Drop": "0"
"ttl0/Drop(pps)": "0"
"erps/DropTime": ""
"reup/Rate(pps)": "0"
"bfd/Drop(pps)": "0"
"efm/Drop(pps)": "0"
"dot1x/Total": "0"
"dhcp6-client/Total Drop": "0"
"other/Total": "0"
"nd-snp-ra-redirect-l3/Total Drop": "0"
"stargv6-ipmc/Rate(pps)": "0"
"lacp/Drop(pps)": "0"
"nd-snp-rs-l3/Drop(pps)": "0"
"igmp/Total Drop": "0"
"v6uc-route/Rate(pps)": "0"
"ipfix/DropTime": ""
"fcoe-fip/Rate(pps)": "0"
"hop-limit/DropTime": ""
"tcp-syn/Total": "0"
"madp/DropTime": ""
"fpga-cfg/DropTime": ""
"mlag/Total Drop": "0"
"ospf/Rate(pps)": "1"
"trill-local/Drop(pps)": "0"
"sdn/DropTime": ""
"rip/Drop(pps)": "0"
"lldp/Rate(pps)": "0"
"trill/Total Drop": "0"
"ripng/Total Drop": "0"
"ip-option/Total Drop": "0"
"nd-snp-rs/DropTime": ""
"rerp/Drop(pps)": "0"
"ripng/Rate(pps)": "0"
"stargv6-ipmc/DropTime": ""
"rldp/Drop(pps)": "0"
"cfm/Rate(pps)": "0"
"dhcps/Rate(pps)": "0"
"fcoe-local/Drop(pps)": "0"
"dhcp-relay-c/DropTime": ""
"ip-option6/Total": "0"
"mpls-ctrl-v6/DropTime": ""
"fpga-cfg/Drop(pps)": "0"
"madp/Total": "0"
"ospf3/DropTime": ""
"igmp-drop/DropTime": ""
"nd-vxlan/Rate(pps)": "0"
"arp/Total Drop": "0"
"rip/Total Drop": "0"
"other/DropTime": ""
"dns-server/Rate(pps)": "0"
"dhcp6-server/Total Drop": "0"
"mlag/Rate(pps)": "0"
"hop-limit/Total": "0"
"trill-local/Total Drop": "0"
"mpls-ctrl/Rate(pps)": "0"
"tcp-syn/Total Drop": "0"
"mld/Total": "0"
"ssh/DropTime": ""
"ripng/DropTime": ""
"v4uc-route/Total": "0"
"other/Rate(pps)": "0"
"bfd/DropTime": ""
"mld-drop/DropTime": ""
"snmp/Total Drop": "0"
"sflow/Rate(pps)": "0"
"ttl0/Total Drop": "0"
"nd-snp-ns-na-l3/Total Drop": "0"
"xgv-ipmc/DropTime": ""
"fcoe-local/Total": "0"
"dns-client/DropTime": ""
"nd-snp-ra-redirect-l3/Drop(pps)": "0"
"gvrp/Rate(pps)": "0"
"isis/Rate(pps)": "0"
"nd-snp-rs-l3/Rate(pps)": "0"
"cdp/DropTime": ""
"ospf/Total Drop": "0"
"icmp/Total Drop": "0"
"rldp/Total Drop": "0"
"dhcps6/Total": "0"
"mpls-ttl1/Total Drop": "0"
"nacm-drop/Rate(pps)": "0"
"rldp/DropTime": ""
"tpp/Drop(pps)": "0"
"arp-auth-proxy/Drop(pps)": "0"
"tunnel-bpdu/Total": "0"
"dldp/Total Drop": "0"
"dns-client/Total": "0"
"mpls-ttl0/Total": "0"
"mlag/Drop(pps)": "0"
"mpls-ctrl-v6/Total": "0"
"sflow/Total": "0"
"fcoe-fip/Total": "0"
"tunnel-gvrp/Rate(pps)": "0"
"ipv6-all/Drop(pps)": "0"
"local-ipv6/DropTime": ""
"stargv6-ipmc/Total Drop": "0"
"trill-oam/Drop(pps)": "0"
"dns-server/Drop(pps)": "0"
"ipfix/Rate(pps)": "0"
"rip/Rate(pps)": "0"
"ip-option/Drop(pps)": "0"
"dhcp6-client/Drop(pps)": "0"
"bgp/DropTime": ""
"ip-option6/Total Drop": "0"
"tcp-syn/Rate(pps)": "0"
"dhcp6-relay/Rate(pps)": "0"
"icmp/Total": "0"
"ospf3/Total Drop": "0"
"pim/Rate(pps)": "0"
"mpls-ttl0/Total Drop": "0"
"ttl1/Drop(pps)": "0"
"dhcp6-client/Total": "0"
"local-ipv4/Drop(pps)": "0"
"lldp/DropTime": ""
"fcoe-fip/Drop(pps)": "0"
"ssh/Drop(pps)": "0"
"bgpv6/Drop(pps)": "0"
"mlag/Total": "0"
"sbfd/Rate(pps)": "0"
"local-ipv6/Rate(pps)": "0"
"nacm-drop/Total": "0"
"ospf/Total": "64"
"tpp/Total Drop": "0"
"dvmrp/Total Drop": "0"
"vrrpv6/Drop(pps)": "0"
"nacm-drop/Total Drop": "0"
"dldp/Rate(pps)": "0"
"dhcp6-server/Total": "0"
"dhcp6-server/DropTime": ""
"arp/Drop(pps)": "0"
"dot1x/DropTime": ""
"lacp/Total Drop": "0"
"mpls-ttl1/Rate(pps)": "0"
"cdp/Drop(pps)": "0"
"ipfix/Total Drop": "0"
"vrrpv6/Rate(pps)": "0"
"dhcp-relay-c/Total": "0"
"dvmrp/Drop(pps)": "0"
"lldp/Total Drop": "0"
"rt-hostv6/Total Drop": "0"
"efm/Total Drop": "0"
"unknown-v4mc/Total": "0"
"sbfd/Total": "0"
"tcp-syn/Drop(pps)": "0"
"snmp/Rate(pps)": "0"
"local-ipv4/DropTime": ""
"igmp/Drop(pps)": "0"
"lacp/Rate(pps)": "0"
"telnet/DropTime": ""
"bgp/Drop(pps)": "0"
"mld/DropTime": ""
"dot1x/Drop(pps)": "0"
"dot1x/Total Drop": "0"
"lldp/Total": "0"
"nd-snp-ra-redirect/Total Drop": "0"
"ospf3/Rate(pps)": "0"
"tunnel-gvrp/Total Drop": "0"
"ripng/Drop(pps)": "0"
"trill-isis/Total": "0"
"dns-server/Total Drop": "0"
"dhcp6-relay/Total": "0"
"cfm/Total Drop": "0"
"rldp/Total": "0"
"unknown-v4mc/Drop(pps)": "0"
"dvmrp/Rate(pps)": "0"
"nd-snp-rs-l3/Total Drop": "0"
"Packet Type_list": ["arp"
"arp-auth-proxy"
"bfd"
"bgp"
"bgpv6"
"bpdu"
"cdp"
"cfm"
"dhcp-relay-c"
"dhcp-relay-s"
"dhcp6-client"
"dhcp6-relay"
"dhcp6-server"
"dhcps"
"dhcps6"
"dldp"
"dns-client"
"dns-server"
"dot1x"
"dvmrp"
"efm"
"erps"
"fcoe-fip"
"fcoe-local"
"fpga-cfg"
"fpga-notify"
"gvrp"
"hop-limit"
"icmp"
"igmp"
"igmp-drop"
"ip-option"
"ip-option6"
"ipfix"
"ipv6-all"
"isis"
"l3mtu-fail"
"lacp"
"lldp"
"local-ipv4"
"local-ipv6"
"mac-move"
"madp"
"mgmt"
"mlag"
"mld"
"mld-drop"
"mpls-ctrl"
"mpls-ctrl-v6"
"mpls-ttl0"
"mpls-ttl1"
"nacm-drop"
"nd-non-snp"
"nd-snp-ns-na"
"nd-snp-ns-na-l3"
"nd-snp-ra-redirect"
"nd-snp-ra-redirect-l3"
"nd-snp-rs"
"nd-snp-rs-l3"
"nd-vxlan"
"ndsnp"
"option82"
"ospf"
"ospf3"
"other"
"pim"
"pimv6"
"rerp"
"reup"
"rip"
"ripng"
"rldp"
"rt-host"
"rt-hostv6"
"sbfd"
"sdn"
"sflow"
"snmp"
"ssh"
"stargv-ipmc"
"stargv6-ipmc"
"tcp-syn"
"telnet"
"tpp"
"trill"
"trill-isis"
"trill-local"
"trill-oam"
"ttl0"
"ttl1"
"tunnel-bpdu"
"tunnel-gvrp"
"udp-flood"
"unknown-v4mc"
"unknown-v6mc"
"v4uc-route"
"v6uc-route"
"vrrp"
"vrrpv6"
"web-auth"
"xgv-ipmc"
"xgv6-ipmc"], "pimv6/Drop(pps)": "0"
"isis/Total": "18"
"ndsnp/Drop(pps)": "0"
"xgv-ipmc/Total": "0"
"v6uc-route/Total Drop": "0"
"dhcp6-relay/Drop(pps)": "0"
"mpls-ttl1/Drop(pps)": "0"
"rt-hostv6/DropTime": ""
"igmp-drop/Rate(pps)": "0"
"hop-limit/Rate(pps)": "0"
"isis/DropTime": ""
"dhcp-relay-s/Rate(pps)": "0"
"icmp/Drop(pps)": "0"
"mpls-ttl0/DropTime": ""
"ripng/Total": "20"
"trill/Drop(pps)": "0"
"rt-host/Rate(pps)": "0"
"madp/Drop(pps)": "0"
"snmp/DropTime": ""
"l3mtu-fail/DropTime": ""
"lldp/Drop(pps)": "0"
"xgv6-ipmc/Total": "0"
"vrrp/Total": "0"
"ttl1/Rate(pps)": "0"
"nd-snp-ns-na/Total Drop": "0"
"pim/Total": "0"
"pimv6/Total Drop": "0"
"nd-snp-ns-na-l3/Drop(pps)": "0"
"dhcps/Drop(pps)": "0"
"nd-snp-ns-na-l3/Rate(pps)": "0"
"option82/Drop(pps)": "0"
"dldp/Drop(pps)": "0"
"igmp-drop/Drop(pps)": "0"
"pim/Total Drop": "0"
"fcoe-local/Total Drop": "0"
"ospf3/Total": "17"
"trill-isis/Drop(pps)": "0"
"arp/Total": "19"
"igmp/Rate(pps)": "0"
"ttl0/Total": "0"
"mlag/DropTime": ""
"nd-snp-ra-redirect/DropTime": ""
"mpls-ttl0/Drop(pps)": "0"
"nd-snp-ra-redirect/Drop(pps)": "0"
"mld-drop/Total": "0"
"nd-snp-ns-na/Total": "0"
"nd-snp-ns-na/Drop(pps)": "0"
"l3mtu-fail/Total Drop": "0"
"ip-option/Total": "0"
"cdp/Rate(pps)": "0"
"ip-option/Rate(pps)": "0"
"dhcp6-relay/DropTime": ""
"mpls-ctrl-v6/Rate(pps)": "0"
"sbfd/Drop(pps)": "0"
"cfm/DropTime": ""
"isis/Total Drop": "0"
"mac-move/Total": "0"
"fpga-cfg/Total": "0"
"trill-local/Rate(pps)": "0"
"unknown-v6mc/Drop(pps)": "0"
"stargv-ipmc/Drop(pps)": "0"
"tunnel-bpdu/Rate(pps)": "0"
"fpga-notify/Rate(pps)": "0"
"option82/Rate(pps)": "0"
"cdp/Total Drop": "0"
"trill-isis/Total Drop": "0"
"local-ipv6/Drop(pps)": "0"
"dhcps/Total Drop": "0"
"madp/Total Drop": "0"
"pimv6/Total": "0"
"nd-non-snp/Drop(pps)": "0"
"xgv6-ipmc/Total Drop": "0"
"stargv-ipmc/Total": "0"
"unknown-v6mc/Total": "0"
"fcoe-local/DropTime": ""
"vrrp/Rate(pps)": "0"
"local-ipv4/Total": "0"
"udp-flood/Total Drop": "0"
"hop-limit/Drop(pps)": "0"
"ipv6-all/Total": "0"
"mld/Rate(pps)": "0"
"igmp/Total": "0"
"tunnel-gvrp/DropTime": ""
"pim/DropTime": ""
"nd-vxlan/Total Drop": "0"
"other/Drop(pps)": "0"
"dhcps6/Total Drop": "0"
"tpp/Total": "0"
"dhcp6-client/DropTime": ""
"efm/Total": "0"
"dot1x/Rate(pps)": "0"
"madp/Rate(pps)": "0"
"dhcps/Total": "0"
"nd-snp-ra-redirect-l3/Total": "0"
"snmp/Total": "0"
"telnet/Rate(pps)": "0"
"v6uc-route/Total": "0"
"fpga-notify/Drop(pps)": "0"
"dns-client/Drop(pps)": "0"
"bfd/Total Drop": "0"
"v4uc-route/Drop(pps)": "0"
"xgv-ipmc/Total Drop": "0"
"igmp/DropTime": ""
"dhcps6/Rate(pps)": "0"
"ssh/Total Drop": "0"
"local-ipv6/Total Drop": "0"
"erps/Drop(pps)": "0"
"reup/Total Drop": "0"
"snmp/Drop(pps)": "0"
"tunnel-bpdu/Drop(pps)": "0"
"mpls-ttl1/Total": "0"
"dns-client/Rate(pps)": "0"
"tpp/Rate(pps)": "0"
"mpls-ttl0/Rate(pps)": "0"
"isis/Drop(pps)": "0"
"tunnel-gvrp/Drop(pps)": "0"
"dldp/Total": "0"
"l3mtu-fail/Drop(pps)": "0"
"sflow/Total Drop": "0"
"rerp/Rate(pps)": "0"
"v4uc-route/Total Drop": "0"
"trill/Total": "0"
"rt-host/DropTime": ""
"sbfd/Total Drop": "0"
"bgpv6/Total Drop": "0"
"vrrpv6/Total": "0"
"arp-auth-proxy/Total": "0"
"vrrp/DropTime": ""
"ipv6-all/Rate(pps)": "0"
"reup/Drop(pps)": "0"
"dns-server/DropTime": ""
"dhcp-relay-c/Drop(pps)": "0"
"v4uc-route/Rate(pps)": "0"
"nd-non-snp/Total": "0"
"bpdu/DropTime": ""
"telnet/Drop(pps)": "0"
"pimv6/DropTime": ""
"nacm-drop/Drop(pps)": "0"
"stargv6-ipmc/Drop(pps)": "0"
"efm/Rate(pps)": "0"
"dhcps6/DropTime": ""
"option82/DropTime": ""
"lacp/Total": "0"
"dhcp-relay-c/Rate(pps)": "0"
"xgv-ipmc/Rate(pps)": "0"
"arp-auth-proxy/Total Drop": "0"
"option82/Total Drop": "0"
"ipfix/Total": "0"
"trill-isis/Rate(pps)": "0"
"dhcps6/Drop(pps)": "0"
"reup/Total": "0"
"v6uc-route/DropTime": ""
"mac-move/DropTime": ""
"tunnel-bpdu/Total Drop": "0"
"udp-flood/DropTime": ""
"ttl1/Total Drop": "0"
"ndsnp/Total Drop": "0"
"ospf/Drop(pps)": "0"
"bgp/Total Drop": "0"
"bpdu/Rate(pps)": "0"
"icmp/DropTime": ""
"xgv6-ipmc/Drop(pps)": "0"
"mpls-ttl1/DropTime": ""
"arp/DropTime": ""
"trill-oam/Total": "0"
"nd-vxlan/Drop(pps)": "0"
"dhcp-relay-s/DropTime": ""
"pim/Drop(pps)": "0"
"bfd/Rate(pps)": "0"
"mld-drop/Drop(pps)": "0"
"trill/DropTime": ""
"dhcp-relay-s/Total Drop": "0"
"ttl0/DropTime": ""
"igmp-drop/Total Drop": "0"
"nd-snp-rs/Drop(pps)": "0"
"ip-option/DropTime": ""
"nd-snp-rs-l3/Total": "0"
"ndsnp/DropTime": ""
"dhcp6-server/Rate(pps)": "0"
"fpga-notify/Total Drop": "0"
"pimv6/Rate(pps)": "0"
"mac-move/Drop(pps)": "0"
"igmp-drop/Total": "0"
"trill-local/DropTime": ""
"rip/DropTime": ""
"ndsnp/Rate(pps)": "0"
"sflow/Drop(pps)": "0"
"fpga-notify/DropTime": ""
"bpdu/Total Drop": "0"
"arp/Rate(pps)": "0"
"gvrp/Drop(pps)": "0"
"erps/Rate(pps)": "0"
"nd-vxlan/DropTime": ""
"mac-move/Rate(pps)": "0"
"mld/Drop(pps)": "0"
"fcoe-fip/DropTime": ""
"unknown-v4mc/Rate(pps)": "0"
"trill-local/Total": "0"
"gvrp/Total": "0"
"dhcp6-client/Rate(pps)": "0"
"tcp-syn/DropTime": ""
"local-ipv4/Rate(pps)": "0"
"vrrpv6/DropTime": ""
"mgmt/Total Drop": "0"
"udp-flood/Total": "0"
"nd-snp-ns-na-l3/DropTime": ""
"arp-auth-proxy/DropTime": ""
"gvrp/DropTime": ""
"unknown-v6mc/Total Drop": "0"
"stargv-ipmc/Total Drop": "0"
"mgmt/DropTime": ""
"mpls-ctrl/DropTime": ""
"fpga-notify/Total": "0"
"bgpv6/Rate(pps)": "0"
"nd-snp-ra-redirect/Rate(pps)": "0"
"bgp/Total": "0"
"reup/DropTime": ""
"mpls-ctrl/Drop(pps)": "0"
"ttl1/DropTime": ""
"rldp/Rate(pps)": "0"
"dhcps/DropTime": ""
"fpga-cfg/Rate(pps)": "0"
"nacm-drop/DropTime": ""
"unknown-v4mc/DropTime": ""
"lacp/DropTime": ""
"ipfix/Drop(pps)": "0"
"ospf/DropTime": ""
"sdn/Total": "0"
"rerp/Total": "0"
"ip-option6/DropTime": ""
"other/Total Drop": "0"
"l3mtu-fail/Total": "0"
"unknown-v4mc/Total Drop": "0"
"nd-vxlan/Total": "0"
"cfm/Drop(pps)": "0"
"xgv6-ipmc/DropTime": ""
"rerp/DropTime": ""
"tunnel-bpdu/DropTime": ""
"bpdu/Total": "0"
"dhcp-relay-c/Total Drop": "0"
"rt-hostv6/Rate(pps)": "0"
"bgpv6/DropTime": ""
"rip/Total": "0"
"trill-oam/Rate(pps)": "0"
"telnet/Total": "0"
"rt-host/Total Drop": "0"
"mld-drop/Rate(pps)": "0"
"sbfd/DropTime": ""
"ip-option6/Rate(pps)": "0"
"nd-snp-rs/Total": "0"
"dns-server/Total": "0"
"ndsnp/Total": "0"
"tunnel-gvrp/Total": "0"
"trill-oam/DropTime": ""
"trill/Rate(pps)": "0"
"ipv6-all/Total Drop": "0"
"dldp/DropTime": ""
"dvmrp/Total": "0"
"nd-non-snp/DropTime": ""
"fpga-cfg/Total Drop": "0"
"mld/Total Drop": "0"
"dhcp6-relay/Total Drop": "0"
"nd-snp-ra-redirect-l3/Rate(pps)": "0"
"rt-hostv6/Total": "0"
"vrrpv6/Total Drop": "0"
"nd-snp-ns-na-l3/Total": "0"
"bgpv6/Total": "0"
"xgv6-ipmc/Rate(pps)": "0"
"fcoe-fip/Total Drop": "0"
"sdn/Total Drop": "0"
"mpls-ctrl/Total Drop": "0"
"v4uc-route/DropTime": ""
"bpdu/Drop(pps)": "0"
"mpls-ctrl/Total": "0"
"rt-host/Drop(pps)": "0"
"gvrp/Total Drop": "0"
"nd-snp-ns-na/Rate(pps)": "0"
"vrrp/Drop(pps)": "0"
"mgmt/Drop(pps)": "0"
"option82/Total": "0"
"rerp/Total Drop": "0"
"fcoe-local/Rate(pps)": "0"
"dvmrp/DropTime": ""
"telnet/Total Drop": "0"
"sflow/DropTime": ""
"erps/Total": "0"
"nd-snp-rs-l3/DropTime": ""
"nd-non-snp/Rate(pps)": "0"
"local-ipv6/Total": "0"
"rt-host/Total": "0"
"nd-snp-ra-redirect/Total": "0"
"erps/Total Drop": "0"
"ssh/Rate(pps)": "0"
"web-auth/Total": "0"
"ipv6-all/DropTime": ""
"trill-isis/DropTime": ""
"vrrp/Total Drop": "0"
"dhcp-relay-s/Total": "0"
"mgmt/Rate(pps)": "0"
"sdn/Rate(pps)": "0"
"bgp/Rate(pps)": "0"
"mgmt/Total": "0"
"mpls-ctrl-v6/Drop(pps)": "0"
"local-ipv4/Total Drop": "0"
"arp-auth-proxy/Rate(pps)": "0"
"xgv-ipmc/Drop(pps)": "0"
"sdn/Drop(pps)": "0"
"ssh/Total": "0"
"nd-snp-rs/Rate(pps)": "0"
"web-auth/Rate(pps)": "0"
"bfd/Total": "0"
"ttl1/Total": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show cpu-protect hardware-statistics device <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Packet Type")
    def dut_get_show_cpuprotect_hardwarestatistics_slot_num(self,show_info):
        """
        Function:show cpu-protect hardware-statistics slot <num>回显解析函数
        CLI命令:show cpu-protect hardware-statistics slot <num>
        回显信息示例:
Ruijie#show cpu-protect hardware-statistics slot 3
Packet Type             Rate(pps)  Drop(pps)  Total         Total Drop    DropTime          
----------------------  ---------  ---------  ---------     ----------    ----------------------------
arp                     -          -          -             -             -                 
arp-auth-proxy          0          0          0             0                                         
bfd                     0          0          0             0                                         
bgp                     -          -          -             -             -                 
bgpv6                   0          0          0             0                                         
bpdu                    0          0          0             0                                         
cdp                     0          0          0             0                                         
cfm                     0          0          0             0                                         
dhcp-relay-c            0          0          0             0                                         
dhcp-relay-s            0          0          0             0                                         
dhcp6-client            0          0          0             0                                         
dhcp6-relay             0          0          0             0                                         
dhcp6-server            0          0          0             0                                         
dldp                    0          0          0             0                                         
dns-client              0          0          0             0                                         
dns-server              0          0          0             0                                         
docker                  0          0          0             0                                         
dvmrp                   -          -          -             -             -                 
efm                     0          0          0             0                                         
erps                    0          0          0             0                                         
fcoe-fip                0          0          0             0                                         
fcoe-local              0          0          0             0                                         
fpga-cfg                0          0          0             0                                         
fpga-notify             0          0          0             0                                         
gvrp                    0          0          0             0                                         
hop-limit               0          0          0             0                                         
icmp                    0          0          0             0                                         
icmpv6-echo             0          0          0             0                                         
igmp                    -          -          -             -             -                 
igmp-drop               0          0          0             0                                         
ip-option               0          0          0             0                                         
ip-option6              0          0          0             0                                         
ipv6-all                0          0          0             0                                         
isis                    -          -          -             -             -                 
lacp                    0          0          0             0                                         
lldp                    0          0          0             0                                         
local-ipv4              0          0          0             0                                         
local-ipv6              0          0          0             0                                         
mac-move                0          0          0             0                                         
madp                    0          0          0             0                                         
mgmt                    0          0          0             0                                         
mlag                    0          0          0             0                                         
mld                     0          0          0             0                                         
mld-drop                0          0          0             0                                         
mpls-ctrl               0          0          0             0                                         
mpls-ctrl-v6            0          0          0             0                                         
mpls-ttl0               0          0          0             0                                         
mpls-ttl1               0          0          0             0                                         
nacm-drop               0          0          0             0                                         
nd-non-snp              0          0          0             0                                         
nd-snp-ns-na            0          0          0             0                                         
nd-snp-ns-na-l3         0          0          0             0                                         
nd-snp-ra-redirect      0          0          0             0                                         
nd-snp-ra-redirect-l3   0          0          0             0                                         
nd-snp-rs               0          0          0             0                                         
nd-snp-rs-l3            0          0          0             0                                         
nd-vxlan                0          0          0             0                                         
ndsnp                   0          0          0             0                                         
nfpp                    0          0          0             0                                         
option82                0          0          0             0                                         
ospf                    -          -          -             -             -                 
ospf3                   0          0          0             0                                         
other                   0          0          0             0                                         
pim                     -          -          -             -             -                 
pimv6                   0          0          0             0                                         
rerp                    0          0          0             0                                         
reup                    0          0          0             0                                         
rip                     -          -          -             -             -                 
ripng                   0          0          0             0                                         
rldp                    0          0          0             0                                         
rt-host                 -          -          -             -             -                 
rt-hostv6               0          0          0             0                                         
sbfd                    0          0          0             0                                         
sdn                     0          0          0             0                                         
snmp                    0          0          0             0                                         
ssh                     0          0          0             0                                         
stargv-ipmc             0          0          0             0                                         
stargv6-ipmc            0          0          0             0                                         
tcp-syn                 0          0          0             0                                         
telnet                  0          0          0             0                                         
tpp                     0          0          0             0                                         
trill                   0          0          0             0                                         
trill-isis              0          0          0             0                                         
trill-local             0          0          0             0                                         
trill-oam               0          0          0             0                                         
ttl-hop-limit           0          0          0             0                                         
ttl0                    0          0          0             0                                         
ttl1                    0          0          0             0                                         
tunnel-bpdu             0          0          0             0                                         
tunnel-gvrp             0          0          0             0                                         
udp-flood               0          0          0             0                                         
unknown-v4mc            -          -          -             -             -                 
unknown-v6mc            0          0          0             0                                         
v4uc-route              0          0          0             0                                         
v6uc-route              0          0          0             0                                         
vrrp                    -          -          -             -             -                 
vrrpv6                  0          0          0             0                                         
xgv-ipmc                0          0          0             0                                         
xgv6-ipmc               0          0          0             0                                         
Ruijie#                  
Ruijie#
Ruijie#

        Returns:
{'stargv6-ipmc/Total': '0'
'nd-non-snp/Total Drop': '0'
'nd-snp-rs/Total Drop': '0'
'reup/Total': '0'
'mac-move/Total Drop': '0'
'stargv-ipmc/DropTime': ''
'unknown-v6mc/DropTime': ''
'ospf3/Drop(pps)': '0'
'cfm/Total': '0'
'Ruijie#/Drop(pps)': ''
'dhcp-relay-s/Drop(pps)': '0'
'tpp/DropTime': ''
'efm/DropTime': ''
'trill-oam/Total Drop': '0'
'dhcp6-server/Drop(pps)': '0'
'udp-flood/Rate(pps)': '0'
'v6uc-route/Drop(pps)': '0'
'hop-limit/Total Drop': '0'
'icmp/Rate(pps)': '0'
'mpls-ctrl-v6/Total Drop': '0'
'mld-drop/Total Drop': '0'
'nd-snp-ra-redirect-l3/DropTime': ''
'ttl0/Rate(pps)': '0'
'udp-flood/Drop(pps)': '0'
'nd-snp-ns-na/DropTime': ''
'rt-hostv6/Drop(pps)': '0'
'stargv-ipmc/Rate(pps)': '0'
'unknown-v6mc/Rate(pps)': '0'
'ip-option6/Drop(pps)': '0'
'cdp/Total': '0'
'dns-client/Total Drop': '0'
'ttl0/Drop(pps)': '0'
'erps/DropTime': ''
'reup/Rate(pps)': '0'
'bfd/Drop(pps)': '0'
'efm/Drop(pps)': '0'
'dhcp6-client/Total Drop': '0'
'other/Total': '0'
'nd-snp-ra-redirect-l3/Total Drop': '0'
'stargv6-ipmc/Rate(pps)': '0'
'lacp/Drop(pps)': '0'
'nd-snp-rs-l3/Drop(pps)': '0'
'igmp/Total Drop': '-'
'v6uc-route/Rate(pps)': '0'
'fcoe-fip/Rate(pps)': '0'
'hop-limit/DropTime': ''
'tcp-syn/Total': '0'
'madp/DropTime': ''
'fpga-cfg/DropTime': ''
'mlag/Total Drop': '0'
'ospf/Rate(pps)': '-'
'trill-local/Drop(pps)': '0'
'sdn/DropTime': ''
'rip/Drop(pps)': '-'
'lldp/Rate(pps)': '0'
'trill/Total Drop': '0'
'ripng/Total Drop': '0'
'ip-option/Total Drop': '0'
'nd-snp-rs/DropTime': ''
'rerp/Drop(pps)': '0'
'ripng/Rate(pps)': '0'
'stargv6-ipmc/DropTime': ''
'rldp/Drop(pps)': '0'
'cfm/Rate(pps)': '0'
'tunnel-bpdu/Total Drop': '0'
'fcoe-local/Drop(pps)': '0'
'dhcp-relay-c/DropTime': ''
'ip-option6/Total': '0'
'mpls-ctrl-v6/DropTime': ''
'fpga-cfg/Drop(pps)': '0'
'madp/Total': '0'
'ospf3/DropTime': ''
'igmp-drop/DropTime': ''
'nd-vxlan/Rate(pps)': '0'
'arp/Total Drop': '-'
'rip/Total Drop': '-'
'other/DropTime': ''
'dns-server/Rate(pps)': '0'
'docker/Total': '0'
'mlag/Rate(pps)': '0'
'nd-vxlan/Total': '0'
'trill-local/Total Drop': '0'
'mpls-ctrl/Rate(pps)': '0'
'tcp-syn/Total Drop': '0'
'mld/Total': '0'
'ssh/DropTime': ''
'ripng/DropTime': ''
'v4uc-route/Total': '0'
'other/Rate(pps)': '0'
'bfd/DropTime': ''
'mld-drop/DropTime': ''
'snmp/Total Drop': '0'
'ttl0/Total Drop': '0'
'nd-snp-ns-na-l3/Total Drop': '0'
'xgv-ipmc/DropTime': ''
'fcoe-local/Total': '0'
'dns-client/DropTime': ''
'nd-snp-ra-redirect-l3/Drop(pps)': '0'
'gvrp/Rate(pps)': '0'
'isis/Rate(pps)': '-'
'nd-snp-rs-l3/Rate(pps)': '0'
'cdp/DropTime': ''
'ospf/Total Drop': '-'
'icmp/Total Drop': '0'
'rldp/Total Drop': '0'
'mpls-ttl1/Total Drop': '0'
'nacm-drop/Rate(pps)': '0'
'rldp/DropTime': ''
'tpp/Drop(pps)': '0'
'arp-auth-proxy/Drop(pps)': '0'
'tunnel-bpdu/Total': '0'
'dhcp6-server/Total Drop': '0'
'mpls-ttl0/Total': '0'
'mlag/Drop(pps)': '0'
'mpls-ctrl-v6/Total': '0'
'fcoe-fip/Total': '0'
'tunnel-gvrp/Rate(pps)': '0'
'ipv6-all/Drop(pps)': '0'
'local-ipv6/DropTime': ''
'stargv6-ipmc/Total Drop': '0'
'trill-oam/Drop(pps)': '0'
'dhcp6-client/DropTime': ''
'rip/Rate(pps)': '-'
'ip-option/Drop(pps)': '0'
'dhcp6-client/Drop(pps)': '0'
'bgp/DropTime': '-'
'ip-option6/Total Drop': '0'
'tcp-syn/Rate(pps)': '0'
'dhcp6-relay/Rate(pps)': '0'
'icmp/Total': '0'
'ospf3/Total Drop': '0'
'pim/Rate(pps)': '-'
'mpls-ttl0/Total Drop': '0'
'ttl1/Drop(pps)': '0'
'dhcp6-client/Total': '0'
'local-ipv4/Drop(pps)': '0'
'lldp/DropTime': ''
'fcoe-fip/Drop(pps)': '0'
'ssh/Drop(pps)': '0'
'bgpv6/Drop(pps)': '0'
'mlag/Total': '0'
'sbfd/Rate(pps)': '0'
'local-ipv6/Rate(pps)': '0'
'nacm-drop/Total': '0'
'ospf/Total': '-'
'tpp/Total Drop': '0'
'dvmrp/Total Drop': '-'
'vrrpv6/Drop(pps)': '0'
'nacm-drop/Total Drop': '0'
'dldp/Rate(pps)': '0'
'dhcp6-server/Total': '0'
'dhcp6-server/DropTime': ''
'arp/Drop(pps)': '-'
'lacp/Total Drop': '0'
'nfpp/Total': '0'
'mpls-ttl1/Rate(pps)': '0'
'ttl-hop-limit/Rate(pps)': '0'
'cdp/Drop(pps)': '0'
'vrrpv6/Rate(pps)': '0'
'dhcp-relay-c/Total': '0'
'dvmrp/Drop(pps)': '-'
'docker/Rate(pps)': '0'
'rt-hostv6/Total Drop': '0'
'efm/Total Drop': '0'
'unknown-v4mc/Total': '-'
'sbfd/Total': '0'
'tcp-syn/Drop(pps)': '0'
'snmp/Rate(pps)': '0'
'tunnel-gvrp/DropTime': ''
'igmp/Drop(pps)': '-'
'lacp/Rate(pps)': '0'
'telnet/DropTime': ''
'bgp/Drop(pps)': '-'
'mld/DropTime': ''
'lldp/Total': '0'
'nd-snp-ra-redirect/Total Drop': '0'
'ospf3/Rate(pps)': '0'
'tunnel-gvrp/Total Drop': '0'
'ripng/Drop(pps)': '0'
'trill-isis/Total': '0'
'dns-server/Total Drop': '0'
'Ruijie#/Total Drop': ''
'dhcp6-relay/Total': '0'
'cfm/Total Drop': '0'
'icmpv6-echo/Drop(pps)': '0'
'rldp/Total': '0'
'unknown-v4mc/Drop(pps)': '-'
'dvmrp/Rate(pps)': '-'
'nd-snp-rs-l3/Total Drop': '0'
'Packet Type_list': ['arp'
'arp-auth-proxy'
'bfd'
'bgp'
'bgpv6'
'bpdu'
'cdp'
'cfm'
'dhcp-relay-c'
'dhcp-relay-s'
'dhcp6-client'
'dhcp6-relay'
'dhcp6-server'
'dldp'
'dns-client'
'dns-server'
'docker'
'dvmrp'
'efm'
'erps'
'fcoe-fip'
'fcoe-local'
'fpga-cfg'
'fpga-notify'
'gvrp'
'hop-limit'
'icmp'
'icmpv6-echo'
'igmp'
'igmp-drop'
'ip-option'
'ip-option6'
'ipv6-all'
'isis'
'lacp'
'lldp'
'local-ipv4'
'local-ipv6'
'mac-move'
'madp'
'mgmt'
'mlag'
'mld'
'mld-drop'
'mpls-ctrl'
'mpls-ctrl-v6'
'mpls-ttl0'
'mpls-ttl1'
'nacm-drop'
'nd-non-snp'
'nd-snp-ns-na'
'nd-snp-ns-na-l3'
'nd-snp-ra-redirect'
'nd-snp-ra-redirect-l3'
'nd-snp-rs'
'nd-snp-rs-l3'
'nd-vxlan'
'ndsnp'
'nfpp'
'option82'
'ospf'
'ospf3'
'other'
'pim'
'pimv6'
'rerp'
'reup'
'rip'
'ripng'
'rldp'
'rt-host'
'rt-hostv6'
'sbfd'
'sdn'
'snmp'
'ssh'
'stargv-ipmc'
'stargv6-ipmc'
'tcp-syn'
'telnet'
'tpp'
'trill'
'trill-isis'
'trill-local'
'trill-oam'
'ttl-hop-limit'
'ttl0'
'ttl1'
'tunnel-bpdu'
'tunnel-gvrp'
'udp-flood'
'unknown-v4mc'
'unknown-v6mc'
'v4uc-route'
'v6uc-route'
'vrrp'
'vrrpv6'
'xgv-ipmc'
'xgv6-ipmc'
'Ruijie#'
'Ruijie#'], 'pimv6/Drop(pps)': '0'
'isis/Total': '-'
'ndsnp/Drop(pps)': '0'
'xgv-ipmc/Total': '0'
'v6uc-route/Total Drop': '0'
'dhcp6-relay/Drop(pps)': '0'
'mpls-ttl1/Drop(pps)': '0'
'rt-hostv6/DropTime': ''
'igmp-drop/Rate(pps)': '0'
'icmpv6-echo/Total': '0'
'hop-limit/Rate(pps)': '0'
'isis/DropTime': '-'
'dhcp-relay-s/Rate(pps)': '0'
'icmp/Drop(pps)': '0'
'mpls-ttl0/DropTime': ''
'mgmt/Total Drop': '0'
'ripng/Total': '0'
'trill/Drop(pps)': '0'
'rt-host/Rate(pps)': '-'
'dns-client/Rate(pps)': '0'
'snmp/DropTime': ''
'lldp/Drop(pps)': '0'
'xgv6-ipmc/Total': '0'
'icmpv6-echo/Total Drop': '0'
'vrrp/Total': '-'
'bgpv6/DropTime': ''
'ttl1/Rate(pps)': '0'
'nd-snp-ns-na/Total Drop': '0'
'pim/Total': '-'
'pimv6/Total Drop': '0'
'nd-snp-ns-na-l3/Drop(pps)': '0'
'nd-snp-ns-na-l3/Rate(pps)': '0'
'option82/Drop(pps)': '0'
'dldp/Drop(pps)': '0'
'igmp-drop/Drop(pps)': '0'
'pim/Total Drop': '-'
'fcoe-local/Total Drop': '0'
'ospf3/Total': '0'
'trill-isis/Drop(pps)': '0'
'arp/Total': '-'
'igmp/Rate(pps)': '-'
'ttl0/Total': '0'
'mlag/DropTime': ''
'nd-snp-ra-redirect/DropTime': ''
'mpls-ttl0/Drop(pps)': '0'
'nd-snp-ra-redirect/Drop(pps)': '0'
'mld-drop/Total': '0'
'nd-snp-ns-na/Total': '0'
'Ruijie#/Total': ''
'nd-snp-ns-na/Drop(pps)': '0'
'ip-option/Total': '0'
'cdp/Rate(pps)': '0'
'ip-option/Rate(pps)': '0'
'ttl-hop-limit/Drop(pps)': '0'
'dhcp6-relay/DropTime': ''
'mpls-ctrl-v6/Rate(pps)': '0'
'sbfd/Drop(pps)': '0'
'cfm/DropTime': ''
'isis/Total Drop': '-'
'mac-move/Total': '0'
'fpga-cfg/Total': '0'
'trill-local/Rate(pps)': '0'
'unknown-v6mc/Drop(pps)': '0'
'stargv-ipmc/Drop(pps)': '0'
'tunnel-bpdu/Rate(pps)': '0'
'fpga-notify/Rate(pps)': '0'
'option82/Rate(pps)': '0'
'cdp/Total Drop': '0'
'trill-isis/Total Drop': '0'
'local-ipv6/Drop(pps)': '0'
'madp/Total Drop': '0'
'pimv6/Total': '0'
'nd-non-snp/Drop(pps)': '0'
'xgv6-ipmc/Total Drop': '0'
'stargv-ipmc/Total': '0'
'unknown-v6mc/Total': '0'
'fcoe-local/DropTime': ''
'vrrp/Rate(pps)': '-'
'local-ipv4/Total': '0'
'udp-flood/Total Drop': '0'
'hop-limit/Drop(pps)': '0'
'ipv6-all/Total': '0'
'mld/Rate(pps)': '0'
'igmp/Total': '-'
'local-ipv4/DropTime': ''
'pim/DropTime': '-'
'nd-vxlan/Total Drop': '0'
'other/Drop(pps)': '0'
'tpp/Total': '0'
'dns-server/Drop(pps)': '0'
'efm/Total': '0'
'madp/Rate(pps)': '0'
'nd-snp-ra-redirect-l3/Total': '0'
'snmp/Total': '0'
'telnet/Rate(pps)': '0'
'ttl-hop-limit/Total': '0'
'v6uc-route/Total': '0'
'fpga-notify/Drop(pps)': '0'
'dns-client/Drop(pps)': '0'
'bfd/Total Drop': '0'
'v4uc-route/Drop(pps)': '0'
'xgv-ipmc/Total Drop': '0'
'igmp/DropTime': '-'
'docker/Total Drop': '0'
'ssh/Total Drop': '0'
'local-ipv6/Total Drop': '0'
'erps/Drop(pps)': '0'
'reup/Total Drop': '0'
'snmp/Drop(pps)': '0'
'tunnel-bpdu/Drop(pps)': '0'
'mpls-ttl1/Total': '0'
'madp/Drop(pps)': '0'
'tpp/Rate(pps)': '0'
'mpls-ttl0/Rate(pps)': '0'
'isis/Drop(pps)': '-'
'tunnel-gvrp/Drop(pps)': '0'
'dldp/Total': '0'
'icmpv6-echo/DropTime': ''
'rerp/Rate(pps)': '0'
'v4uc-route/Total Drop': '0'
'trill/Total': '0'
'rt-host/DropTime': '-'
'sbfd/Total Drop': '0'
'bgpv6/Total Drop': '0'
'vrrpv6/Total': '0'
'arp-auth-proxy/Total': '0'
'vrrp/DropTime': '-'
'ipv6-all/Rate(pps)': '0'
'reup/Drop(pps)': '0'
'dns-server/DropTime': ''
'dhcp-relay-c/Drop(pps)': '0'
'v4uc-route/Rate(pps)': '0'
'nd-non-snp/Total': '0'
'bpdu/DropTime': ''
'telnet/Drop(pps)': '0'
'pimv6/DropTime': ''
'nacm-drop/Drop(pps)': '0'
'stargv6-ipmc/Drop(pps)': '0'
'efm/Rate(pps)': '0'
'option82/DropTime': ''
'lacp/Total': '0'
'dhcp-relay-c/Rate(pps)': '0'
'xgv-ipmc/Rate(pps)': '0'
'arp-auth-proxy/Total Drop': '0'
'option82/Total Drop': '0'
'Ruijie#/DropTime': ''
'trill-isis/Rate(pps)': '0'
'v6uc-route/DropTime': ''
'mac-move/DropTime': ''
'dldp/Total Drop': '0'
'udp-flood/DropTime': ''
'ttl1/Total Drop': '0'
'ndsnp/Total Drop': '0'
'ospf/Drop(pps)': '-'
'bgp/Total Drop': '-'
'bpdu/Rate(pps)': '0'
'icmp/DropTime': ''
'xgv6-ipmc/Drop(pps)': '0'
'mpls-ttl1/DropTime': ''
'arp/DropTime': '-'
'trill-oam/Total': '0'
'nd-vxlan/Drop(pps)': '0'
'lldp/Total Drop': '0'
'pim/Drop(pps)': '-'
'bfd/Rate(pps)': '0'
'mld-drop/Drop(pps)': '0'
'Ruijie#/Rate(pps)': ''
'trill/DropTime': ''
'dhcp-relay-s/Total Drop': '0'
'ttl0/DropTime': ''
'igmp-drop/Total Drop': '0'
'nd-snp-rs/Drop(pps)': '0'
'ip-option/DropTime': ''
'nd-snp-rs-l3/Total': '0'
'ndsnp/DropTime': ''
'dhcp6-server/Rate(pps)': '0'
'fpga-notify/Total Drop': '0'
'pimv6/Rate(pps)': '0'
'mac-move/Drop(pps)': '0'
'igmp-drop/Total': '0'
'trill-local/DropTime': ''
'rip/DropTime': '-'
'ndsnp/Rate(pps)': '0'
'fpga-notify/DropTime': ''
'bpdu/Total Drop': '0'
'arp/Rate(pps)': '-'
'gvrp/Drop(pps)': '0'
'erps/Rate(pps)': '0'
'nd-vxlan/DropTime': ''
'mac-move/Rate(pps)': '0'
'mld/Drop(pps)': '0'
'nfpp/Drop(pps)': '0'
'fcoe-fip/DropTime': ''
'unknown-v4mc/Rate(pps)': '-'
'trill-local/Total': '0'
'gvrp/Total': '0'
'dhcp6-client/Rate(pps)': '0'
'tcp-syn/DropTime': ''
'local-ipv4/Rate(pps)': '0'
'vrrpv6/DropTime': ''
'docker/DropTime': ''
'udp-flood/Total': '0'
'nd-snp-ns-na-l3/DropTime': ''
'arp-auth-proxy/DropTime': ''
'gvrp/DropTime': ''
'unknown-v6mc/Total Drop': '0'
'stargv-ipmc/Total Drop': '0'
'mgmt/DropTime': ''
'nfpp/Total Drop': '0'
'mpls-ctrl/DropTime': ''
'fpga-notify/Total': '0'
'bgpv6/Rate(pps)': '0'
'nd-snp-ra-redirect/Rate(pps)': '0'
'bgp/Total': '-'
'reup/DropTime': ''
'mpls-ctrl/Drop(pps)': '0'
'ttl1/DropTime': ''
'rldp/Rate(pps)': '0'
'nfpp/Rate(pps)': '0'
'fpga-cfg/Rate(pps)': '0'
'nacm-drop/DropTime': ''
'unknown-v4mc/DropTime': '-'
'lacp/DropTime': ''
'ospf/DropTime': '-'
'sdn/Total': '0'
'rerp/Total': '0'
'ip-option6/DropTime': ''
'other/Total Drop': '0'
'unknown-v4mc/Total Drop': '-'
'hop-limit/Total': '0'
'cfm/Drop(pps)': '0'
'xgv6-ipmc/DropTime': ''
'rerp/DropTime': ''
'tunnel-bpdu/DropTime': ''
'bpdu/Total': '0'
'dhcp-relay-c/Total Drop': '0'
'rt-hostv6/Rate(pps)': '0'
'dns-client/Total': '0'
'rip/Total': '-'
'trill-oam/Rate(pps)': '0'
'telnet/Total': '0'
'rt-host/Total Drop': '-'
'mld-drop/Rate(pps)': '0'
'ttl-hop-limit/DropTime': ''
'sbfd/DropTime': ''
'ip-option6/Rate(pps)': '0'
'nd-snp-rs/Total': '0'
'dns-server/Total': '0'
'ndsnp/Total': '0'
'tunnel-gvrp/Total': '0'
'trill-oam/DropTime': ''
'trill/Rate(pps)': '0'
'ipv6-all/Total Drop': '0'
'dldp/DropTime': ''
'dvmrp/Total': '-'
'nd-non-snp/DropTime': ''
'fpga-cfg/Total Drop': '0'
'mld/Total Drop': '0'
'dhcp-relay-s/DropTime': ''
'dhcp6-relay/Total Drop': '0'
'nd-snp-ra-redirect-l3/Rate(pps)': '0'
'rt-hostv6/Total': '0'
'vrrpv6/Total Drop': '0'
'nd-snp-ns-na-l3/Total': '0'
'bgpv6/Total': '0'
'xgv6-ipmc/Rate(pps)': '0'
'fcoe-fip/Total Drop': '0'
'sdn/Total Drop': '0'
'mpls-ctrl/Total Drop': '0'
'icmpv6-echo/Rate(pps)': '0'
'v4uc-route/DropTime': ''
'bpdu/Drop(pps)': '0'
'mpls-ctrl/Total': '0'
'rt-host/Drop(pps)': '-'
'gvrp/Total Drop': '0'
'nd-snp-ns-na/Rate(pps)': '0'
'vrrp/Drop(pps)': '-'
'mgmt/Drop(pps)': '0'
'nfpp/DropTime': ''
'option82/Total': '0'
'ttl-hop-limit/Total Drop': '0'
'rerp/Total Drop': '0'
'fcoe-local/Rate(pps)': '0'
'dvmrp/DropTime': '-'
'telnet/Total Drop': '0'
'erps/Total': '0'
'nd-snp-rs-l3/DropTime': ''
'nd-non-snp/Rate(pps)': '0'
'local-ipv6/Total': '0'
'rt-host/Total': '-'
'nd-snp-ra-redirect/Total': '0'
'erps/Total Drop': '0'
'ssh/Rate(pps)': '0'
'ipv6-all/DropTime': ''
'trill-isis/DropTime': ''
'vrrp/Total Drop': '-'
'dhcp-relay-s/Total': '0'
'mgmt/Rate(pps)': '0'
'sdn/Rate(pps)': '0'
'bgp/Rate(pps)': '-'
'mgmt/Total': '0'
'docker/Drop(pps)': '0'
'mpls-ctrl-v6/Drop(pps)': '0'
'local-ipv4/Total Drop': '0'
'arp-auth-proxy/Rate(pps)': '0'
'xgv-ipmc/Drop(pps)': '0'
'sdn/Drop(pps)': '0'
'ssh/Total': '0'
'nd-snp-rs/Rate(pps)': '0'
'bfd/Total': '0'
'ttl1/Total': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show cpu-protect hardware-statistics slot <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Packet Type")
    def dut_get_show_vap_summary(self,show_info):
        dict_value1 = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        flag1=0
        show_info_list2 = []
        for value in show_info_list:
            if ":" in value :
                list1 = value.split(":")
                dict_value1[list1[0].strip()] = list1[1].strip()
            elif "---" in value:
                if flag1 != 2:
                    flag1 = 1
                continue
            elif "Group ID" in value:
                flag1=2
                show_info_list2.append(value)
                continue
            if flag1 == 1 :
                list2 = value.split()
                dict_value1[list2[0].strip()] = list2[1].strip()
            elif flag1 == 2 :
                show_info_list2.append(value)
        show_info_2 = "\n".join(show_info_list2)
        dict_value2 = self.dut_show_autoget_blank_list(show_info_2,"VAP Port")
        return dict(dict_value1.items()+dict_value2.items())
    def dut_get_show_cpuprotect_statistics_interface_dutport(self,show_info):
        """
        Function:show cpu-protect statistics interface <dutport>回显解析函数
        CLI命令:show cpu-protect statistics interface <dutport>
        回显信息示例:
Ruijie#show cpu-protect statistics interface tenGigabitEthernet 1/4/1
Packet Type             Rate(pps)  Drop(pps)  Total         Total Drop  
----------------------  ---------  ---------  ---------     ----------  
isis                    0          0          39            0           
arp                     0          0          45            0           
ripng                   0          0          48            0           
ospf3                   0          0          39            0           
ospf                    0          0          152           0

        Returns:
{"isis/Drop(pps)": "0"
"ospf3/Total Drop": "0"
"ospf/Rate(pps)": "0"
"ospf/Total": "152"
"ripng/Rate(pps)": "0"
"ospf/Drop(pps)": "0"
"isis/Total Drop": "0"
"isis/Rate(pps)": "0"
"arp/Rate(pps)": "0"
"isis/Total": "39"
"ripng/Total": "48"
"Packet Type_list": ["isis"
"arp"
"ripng"
"ospf3"
"ospf"], "arp/Total Drop": "0"
"ospf/Total Drop": "0"
"arp/Drop(pps)": "0"
"ospf3/Total": "39"
"ripng/Drop(pps)": "0"
"ospf3/Drop(pps)": "0"
"arp/Total": "45"
"ripng/Total Drop": "0"
"ospf3/Rate(pps)": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show cpu-protect statistics interface <dutport> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Packet Type")
    def dut_get_show_ip_flow_cache(self,show_info):
        """
        Function:show ip flow cache回显解析函数
        CLI命令:show ip flow cache
        回显信息示例:
Ruijie#show ip flow cache 
IPFIX CACHE(slot-0/0):
        IPV4 Flow Switching Cache, 368 bytes
        2 active, 4 added
        0 flow alloc failures
        2 displayed 
        Exporting flows to 12.1.1.2 (2055)
        0 ipv4 flows exported in 0 udp datagrams, 0 failed
        And Exporting flows to 0.0.0.0 (0)
        0 ipv4 flows exported in 0 udp datagrams, 0 failed
        Last clearing of statistics 0 Days 00:02:00

SrcIf                         SrcIPAddress      DstIf                         DstIPAddress      Pr  Tos Flgs  Pkts       
Port    Msk    AS                               Port    Msk    AS             NextHop           B/Pk  Active     
HundredGigabitEthernet1/2     192.168.100.2     -                             192.168.100.1     17  0   -     59232      
63      -      -                                12345   -      -              -                 60    59         
HundredGigabitEthernet1/1     12.1.1.2          -                             12.1.1.1          1   0   -     1          
0       -      -                                24892   -      -              -                 142   0          

Protocol   Total      Flows    Packets    Bytes    Packets  Active(Sec) Idle(Sec)
--------   Flows      /Sec     /Flow      /Pkt     /Sec     /Flow       /Flow    
UDP-other  2          0        58315      60       971      60          29       
ICMP-IPV4  2          0        1          120      0        0           30       
other      2          0        13540967   124      225682   36          108      
Total:     6          0        4533094    123      226654   32          56       
Ruijie#

        Returns:
{'ICMP-IPV4/Flows': '0'
'Protocol_list': ['UDP-other'
'ICMP-IPV4'
'other'
'Total:'], 'UDP-other/Packets': '971'
'other/Bytes': '124'
'other/Packets': '225682'
'Total:/Bytes': '123'
'UDP-other/Flows': '0'
'other/Flows': '0'
'ICMP-IPV4/Total': '2'
'other/Total': '2'
'ICMP-IPV4/Active(Sec) Idle(Sec)': '0'
'UDP-other/Total': '2'
'UDP-other/Active(Sec) Idle(Sec)': '60'
'UDP-other/Bytes': '60'
'Total:/Packets': '226654'
'ICMP-IPV4/Bytes': '120'
'Total:/Active(Sec) Idle(Sec)': '32'
'Total:/Total': '6'
'other/Active(Sec) Idle(Sec)': '36'
'Total:/Flows': '0'
'ICMP-IPV4/Packets': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip flow cache | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        flag = 0
        info_list1 = []
        for value in show_info_list:
            if "Protocol" in value :
                flag = 1
            if flag == 1 :
                if "-----" in value :
                    pass
                else:
                    info_list1.append(value)
        info_2 = "\n".join(info_list1)
        return self.dut_show_autoget_blank_list(info_2,"Protocol")
    def dut_get_show_cpuprotect_summary(self,show_info):
        """
        Function:show cpu-protect summary回显解析函数
        CLI命令:show cpu-protect summary
        回显信息示例:
5848VAC#show cpu-protect summary 
 Type                Pps      
 ------------------- ---------
 arp                 8000     
 d1x                 512      
 bpdu                128      
 lldp                128      
 dhcp-relay-server   4096     
 dhcp-relay-client   4096     
 dhcps               4096     
 dhcp-option82       4096     
 capwap-disc         128      
 ipv6-nans           4000     
 rip                 128      
 pppoe               128      
 ripng               600      
 ospf                600      
 ospfv3              600      
 isis                128      
 vrrp                128      
 igmp                200      
 pim                 1000     
 ipmc                128      
 tcp80               5000     
 tcp443              100      
5848VAC#

        Returns:
{'dhcp-option82/Pps': '4096'
'd1x/Pps': '512'
'vrrp/Pps': '128'
'pppoe/Pps': '128'
'lldp/Pps': '128'
'igmp/Pps': '200'
'tcp443/Pps': '100'
'ipv6-nans/Pps': '4000'
'ospfv3/Pps': '600'
'dhcps/Pps': '4096'
'isis/Pps': '128'
'ospf/Pps': '600'
'rip/Pps': '128'
'dhcp-relay-client/Pps': '4096'
'bpdu/Pps': '128'
'tcp80/Pps': '5000'
'ripng/Pps': '600'
'dhcp-relay-server/Pps': '4096'
'ipmc/Pps': '128'
'Type_list': ['arp'
'd1x'
'bpdu'
'lldp'
'dhcp-relay-server'
'dhcp-relay-client'
'dhcps'
'dhcp-option82'
'capwap-disc'
'ipv6-nans'
'rip'
'pppoe'
'ripng'
'ospf'
'ospfv3'
'isis'
'vrrp'
'igmp'
'pim'
'ipmc'
'tcp80'
'tcp443'], 'capwap-disc/Pps': '128'
'arp/Pps': '8000'
'pim/Pps': '1000'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show cpu-protect summary | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        if "Packet Type" not in show_info:
            return self.dut_show_autoget_whippletree_form_analysis(show_info, "Type")
        list_info_1 = []
        list_info_2 = []
        flag = 0
        for value in show_info_list:
            if "Packet Type" in value :
                flag = 1
            if flag == 1:
                list_info_2.append(value.replace("\t"," "))
            else:
                list_info_1.append(value.replace("\t"," "))
        info_1 = "\n".join(list_info_1)
        info_2 = "\n".join(list_info_2)
        dict_value1 = self.dut_show_autoget_whippletree_form_analysis(info_1,"Traffic-class",ago_colon_last_str=1)
        dict_value2 = self.dut_show_autoget_whippletree_form_analysis(info_2, "Packet Type")
        return dict(dict_value1.items()+dict_value2.items())
    def dut_get_show_ipv6_nd_snooping_binding(self,show_info):
        """
        Function:show ipv6 nd snooping binding回显解析函数
        CLI命令:show ipv6 nd snooping binding
        回显信息示例:
Ruijie(config)#show ipv6 nd snooping binding 
Stateless-user amount: 3
VLAN MAC address      Interface    State         IPv6 address                              Lifetime(s)
---- -----------      ---------    -----         ------------                             ------------
20   0000.0001.0001   Gi6/11       VALID         2020::2                                           290
20   0000.0001.0001   Gi6/11       VALID         fe80::1                                           287
20   0010.9400.0004   Gi6/11       VALID         2020::5                                            85

        Returns:
{"0000.0001.0001/fe80::1/State": "VALID"
"0010.9400.0004/2020::5/Interface": "Gi6/11"
"0000.0001.0001/fe80::1/Interface": "Gi6/11"
"0000.0001.0001/2020::2/Interface": "Gi6/11"
"0000.0001.0001/fe80::1/VLAN": "20"
"0000.0001.0001/2020::2/State": "VALID"
"0000.0001.0001/2020::2/Lifetime(s)": "290"
"0000.0001.0001/2020::2/VLAN": "20"
"MAC address_list": ["0000.0001.0001/2020::2"
"0000.0001.0001/fe80::1"
"0010.9400.0004/2020::5"], "0000.0001.0001/fe80::1/Lifetime(s)": "287"
"0010.9400.0004/2020::5/State": "VALID"
"0010.9400.0004/2020::5/Lifetime(s)": "85"
"0010.9400.0004/2020::5/VLAN": "20"
"Stateless-user amount": "3"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 nd snooping binding | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"MAC address","IPv6 address",1)
    def dut_get_show_savi_statistic(self,show_info):
        """
        Function:show savi statistic回显解析函数
        CLI命令:show savi statistic
        回显信息示例:
EG-2009#show savi statistic
savi [global] statistics:
    permit link-local:disable
    station-move:disable
    savi bind source: static(yes), DHCPv6(yes), SLAAC(yes)
    savi bind limit(0/0), static(0/960), DHCPv6(0/0), SLAAC(0/0)
    ipsg_vlan_num:0
    ipsg vlan exclude port:disable
savi [notice] statistics:
    send_fd(14) success(0), fail(0)
    recv_fd(13) success(0), fail(0)
    domain path(/tmp/vsd/0/app/savi/.savi_notice_socket)
    message list num(0), capacity(33000)
    message malloc fail num(0), msg_full(0)
savi [bind] statistics:
    receive slaac(0), ignore(0), add(0), del(0)
    receive dhcp6(0), ignore(0), add(0), del(0)
    add fail limit(0), conflict(0)
    del fail not exsit(0), not bind_src(0), conflict(0)
    table[savi-ip-bind]: size(2088), bucket num(128), per bucket size(16), binds(0)
    table[savi-nac-bind]: size(2088), bucket num(128), per bucket size(16), binds(0)
    table[savi-sticky]: size(2088), bucket num(128), per bucket size(16), binds(0)
savi [ipsg vlan set scc] statistics:
        total call(ok 0,fail 0) cb(ok 0,fail 0, call id mismatch 0)
        total set(ok 0,fail 0) cb(ok 0,fail 0)
        total del(ok 0,fail 0) cb(ok 0,fail 0)
    IPSG vlan user set scc:
        total call(ok 0,fail 0) cb(ok 0,fail 0, call id mismatch 0)
        total set(ok 0,fail 0) cb(ok 0,fail 0)
        total del(ok 0,fail 0) cb(ok 0,fail 0)
savi [ipsg] statistics:
    IPSG command cfg type(0).
SAVI_MIX [redis] statistics:
    tid(4013945184) global(0xffed447440)
    connet(1/1), scan(0/0), rescan(0/0)
    fail oper:set(0), del(0), other(0)
SAVI [redis] statistics:
    tid(4040118272) global(0xfff040d1c0)
    connet(1/1), scan(0/0), rescan(0/0)
    fail oper:set(0), del(0), other(0)
EG-2009#

        Returns:
{"global/static/1": "0"
"global/static/2": "960"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show savi statistic | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = show_info.split("\n")
        dict_value = {}
        key1 = ""
        for value in show_info_list:
            if re.match(r'savi \[.+\]',value):
                obj = re.match(r'savi \[(.+)\]',value)
                key1 = obj.group(1)
            if key1 != "":
                if re.search(r"savi bind limit\(\d+/\d+\), static\(\d+/\d+\), DHCPv6\(\d+/\d+\), SLAAC\(\d+/\d+\)",value):
                    obj2 = re.search(r"savi bind limit\(\d+/\d+\), static\((\d+)/(\d+)\), DHCPv6\(\d+/\d+\), SLAAC\(\d+/\d+\)",value)
                    value1 = obj2.group(1)
                    value2 = obj2.group(2)
                    dict_value[key1 + "/static/1"] = value1
                    dict_value[key1+"/static/2"]=value2
                    break
        return dict_value
    def dut_get_show_bridge_ability(self,show_info):
        """
        Function:show bridge ability回显解析函数
        CLI命令:show bridge ability
        回显信息示例:
Ruijie#show bridge ability 
Module[MAC            ] Field[MAC_COPY_SWITCH]: ON
Module[QINQ           ] Field[TPID_BYPORT    ]: ON
Module[QINQ           ] Field[TPID_BYGLB     ]: OFF
Module[QINQ           ] Field[STREAM_BASED   ]: OFF
Module[QINQ           ] Field[PROTOCOL_BASED ]: ON
Module[QINQ           ] Field[ADD_SVID_CVID  ]: ON
Module[QINQ           ] Field[HYB_ADD_SVID_CVID]: ON
Module[QINQ           ] Field[MOD_SVID_SVID  ]: OFF
Module[QINQ           ] Field[MOD_SVID_CVID  ]: OFF
Module[QINQ           ] Field[MOD_SVID_CSVID ]: OFF
Module[QINQ           ] Field[QOS_ADD_SVID   ]: OFF
Module[QINQ           ] Field[QOS_MOD_SVID   ]: OFF
Module[QINQ           ] Field[QOS_MOD_CVID   ]: OFF
Module[QINQ           ] Field[SPEC_TPID      ]: OFF
Module[VLAN_MAPPING   ] Field[STATIC_POLICY  ]: ON
Module[VLAN_MAPPING   ] Field[DYNAMIC_POLICY ]: ON
Module[PROTOCOL_VLAN  ] Field[FRAME_TYPE     ]: ON
Module[PROTOCOL_VLAN  ] Field[IP_SUBNET      ]: ON
Module[PROTOCOL_VLAN  ] Field[MAC_IN_MAC     ]: ON
Module[PROTOCOL_VLAN  ] Field[TRILL          ]: ON
Module[PROTOCOL_VLAN  ] Field[IPV4           ]: ON
Module[PROTOCOL_VLAN  ] Field[IPV6           ]: ON
Module[PROTOCOL_VLAN  ] Field[ARP            ]: ON
Module[PROTOCOL_VLAN  ] Field[CFM            ]: ON
Module[PROTOCOL_VLAN  ] Field[MPLS           ]: ON
Module[PROTOCOL_VLAN  ] Field[FC_ETH         ]: ON
Module[PROTOCOL_VLAN  ] Field[OTHERS_ETH_TYPE]: ON
Module[PRIVATE_VLAN   ] Field[ISOLATE        ]: ON
Module[PRIVATE_VLAN   ] Field[ISOLATE_TRUNK  ]: OFF
Module[QINQ_TERMINATION] Field[QINQ_TERMINATION_SW]: ON
Module[MAC            ] Field[MAC_STATIC_MAX ]: 1024
Module[MAC            ] Field[MAC_FILTER_MAX ]: 1024
Module[MAC            ] Field[MAC_TOTAL_MAX  ]: 65536
Module[MAC            ] Field[MAC_AGING_TIME ]: 300
Module[MAC            ] Field[MAC_AGING_TIME_MIN]: 10
Module[MAC            ] Field[MAC_AGING_TIME_MAX]: 1000000
Module[PROTOCOL_VLAN  ] Field[PROFILE_MAX    ]: 32
Module[PROTOCOL_VLAN  ] Field[IP_SUBNET_MAX  ]: 256
Module[PRIVATE_VLAN   ] Field[PROMISCUOUS_MAX]: 4094
Module[QINQ           ] Field[SPEC_TPID_MAX  ]: 3
Module[QINQ           ] Field[SPEC_TPID_DATA_1]: 0
Module[QINQ           ] Field[SPEC_TPID_DATA_2]: 0
Module[QINQ           ] Field[SPEC_TPID_DATA_3]: 0
Module[QINQ           ] Field[SPEC_TPID_DATA_4]: 0
Module[QINQ           ] Field[SPEC_TPID_DATA_5]: 0
Module[QINQ           ] Field[SPEC_TPID_DATA_6]: 0
Module[QINQ           ] Field[SPEC_TPID_DATA_7]: 0
Module[QINQ           ] Field[SPEC_TPID_DATA_8]: 0
Module[QINQ           ] Field[SPEC_TPID_DATA_9]: 0
Module[QINQ           ] Field[SPEC_TPID_DATA_10]: 0
Module[QINQ           ] Field[SPEC_TPID_DATA_11]: 0
Module[QINQ           ] Field[SPEC_TPID_DATA_12]: 0
Module[QINQ           ] Field[SPEC_TPID_DATA_13]: 0
Module[QINQ           ] Field[SPEC_TPID_DATA_14]: 0
Module[QINQ           ] Field[SPEC_TPID_DATA_15]: 0
Module[STP            ] Field[INSTANCE_MAX   ]: 64
Module[QINQ_TERMINATION] Field[QINQ_TERMINATION_CE_MAX]: 511
 Local   Address Count  : 1
Available mac num : static(4000), filter(4000), total(65536), flag(0)
Ruijie#

        Returns:
{'PRIVATE_VLAN/ISOLATE': 'ON'
'PRIVATE_VLAN/PROMISCUOUS_MAX': '4094'
'QINQ/SPEC_TPID_DATA_1': '0'
'QINQ_TERMINATION/QINQ_TERMINATION_CE_MAX': '511'
'QINQ/MOD_SVID_CVID': 'OFF'
'PROTOCOL_VLAN/TRILL': 'ON'
'QINQ/SPEC_TPID_DATA_10': '0'
'QINQ/SPEC_TPID': 'OFF'
'QINQ/SPEC_TPID_MAX': '3'
'Local   Address Count': '1'
'VLAN_MAPPING/STATIC_POLICY': 'ON'
'QINQ/SPEC_TPID_DATA_15': '0'
'MAC/MAC_AGING_TIME_MIN': '10'
'QINQ_TERMINATION/QINQ_TERMINATION_SW': 'ON'
'QINQ/SPEC_TPID_DATA_11': '0'
'QINQ/SPEC_TPID_DATA_12': '0'
'MAC/MAC_FILTER_MAX': '1024'
'Available mac num/filter': '4000'
'QINQ/SPEC_TPID_DATA_8': '0'
'QINQ/SPEC_TPID_DATA_9': '0'
'PROTOCOL_VLAN/MPLS': 'ON'
'QINQ/SPEC_TPID_DATA_2': '0'
'QINQ/ADD_SVID_CVID': 'ON'
'QINQ/SPEC_TPID_DATA_14': '0'
'PRIVATE_VLAN/ISOLATE_TRUNK': 'OFF'
'QINQ/SPEC_TPID_DATA_6': '0'
'QINQ/SPEC_TPID_DATA_7': '0'
'QINQ/SPEC_TPID_DATA_4': '0'
'QINQ/SPEC_TPID_DATA_5': '0'
'QINQ/HYB_ADD_SVID_CVID': 'ON'
'PROTOCOL_VLAN/ARP': 'ON'
'QINQ/QOS_ADD_SVID': 'OFF'
'QINQ/SPEC_TPID_DATA_13': '0'
'QINQ/QOS_MOD_SVID': 'OFF'
'PROTOCOL_VLAN/MAC_IN_MAC': 'ON'
'MAC/MAC_STATIC_MAX': '1024'
'PROTOCOL_VLAN/FRAME_TYPE': 'ON'
'QINQ/TPID_BYPORT': 'ON'
'PROTOCOL_VLAN/IP_SUBNET_MAX': '256'
'PROTOCOL_VLAN/IP_SUBNET': 'ON'
'QINQ/SPEC_TPID_DATA_3': '0'
'Available mac num/flag': '0'
'Available mac num/total': '65536'
'MAC/MAC_AGING_TIME': '300'
'VLAN_MAPPING/DYNAMIC_POLICY': 'ON'
'Available mac num/static': '4000'
'QINQ/MOD_SVID_SVID': 'OFF'
'MAC/MAC_COPY_SWITCH': 'ON'
'MAC/MAC_TOTAL_MAX': '65536'
'QINQ/TPID_BYGLB': 'OFF'
'PROTOCOL_VLAN/CFM': 'ON'
'QINQ/QOS_MOD_CVID': 'OFF'
'QINQ/MOD_SVID_CSVID': 'OFF'
'PROTOCOL_VLAN/IPV4': 'ON'
'QINQ/STREAM_BASED': 'OFF'
'PROTOCOL_VLAN/IPV6': 'ON'
'PROTOCOL_VLAN/OTHERS_ETH_TYPE': 'ON'
'PROTOCOL_VLAN/FC_ETH': 'ON'
'QINQ/PROTOCOL_BASED': 'ON'
'PROTOCOL_VLAN/PROFILE_MAX': '32'
'STP/INSTANCE_MAX': '64'
'MAC/MAC_AGING_TIME_MAX': '1000000'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bridge ability | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value= {}
        for value in show_info_list:
            if re.match(r'Module\[(.*)\] Field\[(.*)\]: (.*)',value):
                obj1 = re.match(r'Module\[(.*)\] Field\[(.*)\]: (.*)',value)
                key1 = obj1.group(1).strip()+"/"+obj1.group(2).strip()
                value1 = obj1.group(3).strip()
                dict_value[key1] = value1
            elif "Available mac num :" in value:
                list1 = value.split(":")
                list2 = list1[1].split(",")
                for list2_value in list2:
                    obj2 = re.match(r'(.*)\((\d+)\)',list2_value)
                    dict_value["Available mac num/"+obj2.group(1).strip()] = obj2.group(2).strip()
            elif ":" in value:
                list1 = value.split(":")
                dict_value[list1[0].strip()] = list1[1].strip()
        return dict_value
    def dut_get_show_macaddresstable_all(self,show_info):
        """
        Function:show mac-address-table all回显解析函数
        CLI命令:show mac-address-table all
        回显信息示例:
78-2005#show mac-address-table all
 VLAN/VSI/VNI   MAC Address          Type     Learned-From                   Live Time
-------------- -------------------- -------- ------------------------------ -------------
    1/-/-          5869.6cd1.b97a       MLAG     AggregatePort 1                0d 00:01:48
    10/-/-         0000.0000.0001       FILTER                                  -
    10/-/-         0000.0000.0002       FILTER                                  -
    10/-/-         0000.0000.0003       MLAG     AggregatePort 2                0d 00:01:02
    10/-/-         0000.0000.0004       MLAG     AggregatePort 2                0d 00:01:02

        Returns:
{"5869.6cd1.b97a/Learned-From": "AggregatePort 1"
"0000.0000.0004/Type": "MLAG"
"0000.0000.0001/Learned-From": "R"
"0000.0000.0004/Learned-From": "AggregatePort 2"
"0000.0000.0003/Learned-From": "AggregatePort 2"
"0000.0000.0003/Type": "MLAG"
"0000.0000.0002/Learned-From": "R"
"0000.0000.0001/Type": "FILTE"
"5869.6cd1.b97a/VLAN/VSI/VNI": "1/-/-"
"0000.0000.0002/VLAN/VSI/VNI": "10/-/-"
"0000.0000.0001/VLAN/VSI/VNI": "10/-/-"
"MAC Address_list": ["5869.6cd1.b97a"
"0000.0000.0001"
"0000.0000.0002"
"0000.0000.0003"
"0000.0000.0004"], "0000.0000.0004/Live Time": "0d 00:01:02"
"0000.0000.0002/Type": "FILTE"
"5869.6cd1.b97a/Type": "MLAG"
"0000.0000.0001/Live Time": "-"
"0000.0000.0002/Live Time": "-"
"5869.6cd1.b97a/Live Time": "0d 00:01:48"
"0000.0000.0004/VLAN/VSI/VNI": "10/-/-"
"0000.0000.0003/VLAN/VSI/VNI": "10/-/-"
"0000.0000.0003/Live Time": "0d 00:01:02"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mac-address-table all | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"MAC Address")
    def dut_get_show_ipv6_neighbors_detail(self,show_info):
        """
        Function:show ipv6 neighbors detail回显解析函数
        CLI命令:show ipv6 neighbors detail
        回显信息示例:
78-2005#show ipv6 neighbors detail
    IPv6 Address                             Linklayer Addr  Interface       State        Age(s)   Ask      Vid      Inner vid      Vni      Port     Gid      Location
    10::1                                    0000.5e00.020a  VLAN 10         REACH/H      -        0        0        0              0        -        0        Local   
    10::2                                    0074.9c52.63d1  VLAN 10         REACH/H      -        0        0        0              0        -        0        Local   
    100::1                                   0074.9c52.63d1  VLAN 100        REACH/H      -        0        0        0              0        -        0        Local   
    100::2                                   0074.9c52.6151  VLAN 100        REACH/R      2        0        100      0              0        Ag2      0        Local   
    300::1                                   0074.9c52.63d1  Gi3/11          REACH/H      -        0        0        0              0        -        0        Local   
    300::2                                   0074.9c52.6151  Gi3/11          DELAY/R      2        0        0        0              0        -        0        Local   
    FE80::274:9CFF:FE52:63D1                 0074.9c52.63d1  Gi3/11          REACH/H      -        0        0        0              0        -        0        Local   
    FE80::1                                  0000.5e00.020a  VLAN 10         REACH/H      -        0        0        0              0        -        0        Local   
    FE80::274:9CFF:FE52:63D1                 0074.9c52.63d1  VLAN 10         REACH/H      -        0        0        0              0        -        0        Local   
    FE80::274:9CFF:FE52:63D1                 0074.9c52.63d1  VLAN 100        REACH/H      -        0        0        0              0        -        0        Local   
    78-2005#

        Returns:
{"FE80::1/Gid": "0"
"FE80::1/Age(s)": "-"
"300::2/Age(s)": "2"
"10::1/Vni": "0"
"10::2/Gid": "0"
"300::1/Linklayer Addr": "0074.9c52.63d1"
"100::1/Vid": "0"
"FE80::274:9CFF:FE52:63D1/Gid": "0"
"FE80::1/Linklayer Addr": "0000.5e00.020a"
"100::2/Age(s)": "2"
"FE80::274:9CFF:FE52:63D1/Port": "-"
"300::2/Ask": "0"
"10::1/Port": "-"
"100::2/Vni": "0"
"100::2/State": "REACH/R"
"10::2/Location": "Local"
"10::2/Vid": "0"
"100::2/Vid": "100"
"100::2/Ask": "0"
"FE80::1/Port": "-"
"300::2/Interface": "Gi3/11"
"300::1/Vid": "0"
"10::1/Interface": "VLAN 10"
"300::2/Linklayer Addr": "0074.9c52.6151"
"10::2/Age(s)": "-"
"300::1/Vni": "0"
"10::1/Gid": "0"
"300::2/Vni": "0"
"IPv6 Address_list": ["10::1"
"10::2"
"100::1"
"100::2"
"300::1"
"300::2"
"FE80::274:9CFF:FE52:63D1"
"FE80::1"
"FE80::274:9CFF:FE52:63D1"
"FE80::274:9CFF:FE52:63D1"], "300::1/Inner vid": "0"
"100::1/State": "REACH/H"
"300::1/Age(s)": "-"
"300::2/Vid": "0"
"300::1/Ask": "0"
"100::2/Interface": "VLAN 100"
"10::2/State": "REACH/H"
"300::2/Inner vid": "0"
"FE80::274:9CFF:FE52:63D1/Vid": "0"
"300::1/State": "REACH/H"
"100::1/Inner vid": "0"
"FE80::274:9CFF:FE52:63D1/Interface": "VLAN 100"
"10::1/Vid": "0"
"100::1/Gid": "0"
"10::1/Inner vid": "0"
"FE80::1/Inner vid": "0"
"FE80::1/State": "REACH/H"
"300::2/Port": "-"
"300::2/Gid": "0"
"10::1/Linklayer Addr": "0000.5e00.020a"
"10::2/Inner vid": "0"
"10::1/State": "REACH/H"
"10::1/Ask": "0"
"300::1/Interface": "Gi3/11"
"FE80::274:9CFF:FE52:63D1/State": "REACH/H"
"10::2/Port": "-"
"FE80::274:9CFF:FE52:63D1/Vni": "0"
"FE80::274:9CFF:FE52:63D1/Linklayer Addr": "0074.9c52.63d1"
"100::2/Inner vid": "0"
"FE80::274:9CFF:FE52:63D1/Ask": "0"
"FE80::1/Location": "Local"
"100::2/Linklayer Addr": "0074.9c52.6151"
"300::1/Gid": "0"
"10::2/Vni": "0"
"100::1/Vni": "0"
"100::1/Age(s)": "-"
"100::1/Ask": "0"
"FE80::1/Ask": "0"
"10::2/Interface": "VLAN 10"
"FE80::274:9CFF:FE52:63D1/Location": "Local"
"FE80::1/Vid": "0"
"100::2/Gid": "0"
"10::2/Linklayer Addr": "0074.9c52.63d1"
"100::1/Location": "Local"
"100::2/Location": "Local"
"300::1/Port": "-"
"FE80::274:9CFF:FE52:63D1/Age(s)": "-"
"100::1/Linklayer Addr": "0074.9c52.63d1"
"FE80::274:9CFF:FE52:63D1/Inner vid": "0"
"300::2/State": "DELAY/R"
"10::2/Ask": "0"
"300::1/Location": "Local"
"100::2/Port": "Ag2"
"FE80::1/Vni": "0"
"10::1/Location": "Local"
"FE80::1/Interface": "VLAN 10"
"300::2/Location": "Local"
"100::1/Interface": "VLAN 100"
"10::1/Age(s)": "-"
"100::1/Port": "-"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 neighbors detail | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        #return self.dut_show_autoget_blank_list(show_info,"IPv6 Address")
        star, end, show_len_list, show_info_list_line = self.dut_common_get_linelist(show_info, "IPv6 Address")
        show_len_list = [41, 16, 16, 13, 9, 9, 9, 15, 9, 9, 9, 32]
        return self.dut_show_autoget_form(star, end, "IPv6 Address", show_len_list, show_info_list_line)
    def dut_get_show_ipv6_nd_snooping_statistics(self,show_info):
        """
        Function:show ipv6 nd snooping statistics回显解析函数
        CLI命令:show ipv6 nd snooping statistics
        回显信息示例:
Ruijie#show ipv6 nd snooping statistics
nd snp [global] statistics:
   nd snooping:disable
   stateless-user station-move:disable
   detect gateway prefix:enable
   check bind prefix:enable
   check link-layer address:disable
   print system log:disable
   auto save log message:disable
   data bind:enable
   auto router detect:enable
   nd check only:disable
   nd snooping loose mode:enable
   tentative wait:500ms, 
   detect wait:500ms, 
   detect packet num:2, interval time:250ms, 
   bind lifetime:300000ms, 
   recover start(0), recover end(0), enable timer(1), 
nd snp [prefix] statistics:
    static prefix capacity(0/256)
    dynamic prefix num(0), selected(0)
    router num(0)
nd snp [bind] statistics:
    bind table capacity(0/1024) warning threshold value(0%)
    table[ndsnp-ip-bind]: size(1056), bucket num(128), per bucket size(8), binds(0)
    table[ndsnp-mac-bind]: size(1056), bucket num(128), per bucket size(8), binds(0)
    err_time_hb(0)
nd snp [log] statistics:
    log enable(FALSE)
    log capacity(0/1000)
    syslog enalbe(FALSE)
    syslog frequency(5)
    syslog timer(0) curnum(0) total(0)
nd snp [notice] statistics:
    send_fd(27) success(0), fail(0)
    recv_fd(24) success(0), fail(0)
    domain path(/tmp/vsd/0/app/savi/.ndsnp_notice_socket)
    message list num(0), capacity(2048), dad_ns empty(TRUE) proxy empty(TRUE)
nd snp [timer] statistics:
    timer enable(TRUE)
    timer stautus(ON)
    timer period(250 ms)
    cli reform timer period(5000 ms)
ND_SNP [redis] statistics:
    tid(3045061600) global(0xb24a5050)
    connet(1/1), scan(0/0), rescan(0/0)
    fail oper:set(0), del(0), other(0)
    subscribe:total(46896), ignore(0), error(0)
Ruijie#

        Returns:
{"log/syslog timer(0) curnum(0) total": "0"
"global/recover start": "0"
"global/print system log": "disable"
"timer/ND_SNP [redis] statistics": ""
"global/auto router detect": "enable"
"timer/tid": "3045061600"
"global/enable timer": "1"
"notice/send_fd(27) success": "0"
"global/stateless-user station-move": "disable"
"global/check bind prefix": "enable"
"timer/rescan/1": "0"
"timer/scan/1": "0"
"timer/scan/2": "0"
"timer/rescan/2": "0"
"log/log capacity/1": "0"
"log/syslog frequency": "5"
"prefix/router num": "0"
"global/tentative wait": "500ms"
"log/log capacity/2": "1000"
"timer/connet/1": "1"
"global/recover end": "0"
"global/detect wait": "500ms"
"bind/err_time_hb": "0"
"global/nd snooping": "disable"
"global/check link-layer address": "disable"
"global/detect gateway prefix": "enable"
"bind/bind table capacity/2": "1024"
"prefix/dynamic prefix num": "0"
"notice/recv_fd(24) success": "0"
"notice/fail": "0"
"prefix/static prefix capacity/2": "256"
"prefix/static prefix capacity/1": "0"
"prefix/selected": "0"
"global/auto save log message": "disable"
"notice/capacity": "2048"
"global/bind lifetime": "300000ms"
"bind/bind table capacity/1": "0"
"global/data bind": "enable"
"timer/connet/2": "1"
"notice/message list num": "0"
"global/detect packet num": "2"
"global/nd snooping loose mode": "enable"
"global/nd check only": "disable"
"global/interval time": "250ms"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 nd snooping statistics | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        info_list = self.dut_get_start_show_info(show_info)
        dict_value ={}
        flag =0
        for value in info_list:
            if re.match(r"nd(.*) \[(.*)\] statistics:",value):
                obj = re.match(r"nd(.*) \[(.*)\] statistics:",value)
                key1 = obj.group(2).strip()
                flag = 1
                continue
            if flag == 1 :
                if re.match(r"table\[.*\]:",value.strip()) or "fail oper:" in value or "subscribe:" in value:
                    continue
                value = value.strip(",")
                if "," in value:
                    list1 = value.split(",")
                    for list1_value in list1:
                        list1_value = list1_value.strip()
                        if ":" in list1_value:
                            list2 = list1_value.split(":")
                            dict_value[key1+"/"+list2[0].strip()] = list2[1].strip()
                        elif re.match(r"(.*)\((\d+)\)",list1_value):
                            obj2 = re.match(r"(.*)\((\d+)\)",list1_value)
                            dict_value[key1+"/"+obj2.group(1).strip()] = obj2.group(2).strip()
                        elif re.match(r"(.*)\((\d+)/(\d+)\)",list1_value):
                            obj2 = re.match(r"(.*)\((\d+)/(\d+)\)",list1_value)
                            dict_value[key1+"/"+obj2.group(1).strip()+"/1"] = obj2.group(2).strip()
                            dict_value[key1 + "/" + obj2.group(1).strip() + "/2"] = obj2.group(3).strip()

                elif ":" in value:
                    list2 = value.split(":")
                    dict_value[key1 + "/" + list2[0].strip()] = list2[1].strip()
                elif re.match(r"(.*)\((\d+)\)", value):
                    obj2 = re.match(r"(.*)\((\d+)\)", value)
                    dict_value[key1 + "/" + obj2.group(1).strip()] = obj2.group(2).strip()
                elif re.match(r"(.*)\((\d+)/(\d+)\)", value):
                    obj2 = re.match(r"(.*)\((\d+)/(\d+)\)", value)
                    dict_value[key1 + "/" + obj2.group(1).strip() + "/1"] = obj2.group(2).strip()
                    dict_value[key1 + "/" + obj2.group(1).strip() + "/2"] = obj2.group(3).strip()
        return dict_value
    def dut_get_show_mls_qos_maps_expcos(self,show_info):
        """
        Function:show mls qos maps exp-cos回显解析函数
        CLI命令:show mls qos maps exp-cos
        回显信息示例:
S57H_2012(config)#show mls qos maps exp-cos 
exp      cos     
---      ---     
0        2       
1        2       
2        2       
3        2       
4        2       
5        2       
6        2       
7        2       

S57H_2012(config)#

        Returns:
{'1/cos': '2'
'0/cos': '2'
'3/cos': '2'
'2/cos': '2'
'5/cos': '2'
'4/cos': '2'
'7/cos': '2'
'6/cos': '2'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mls qos maps exp-cos | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        flag = 0
        dict_value = {}
        for value in show_info_list:
            if "---" in value :
                flag = 1
                continue
            if flag == 1 :
                list2 = value.split()
                dict_value[list2[0].strip()+"/cos"] = list2[1].strip()
        return dict_value
    def dut_get_show_mls_qos_maps_expdscp(self,show_info):
        """
        Function:show mls qos maps exp-dscp回显解析函数
        CLI命令:show mls qos maps exp-dscp
        回显信息示例:
S57H_2012(config)#show mls qos maps exp-dscp
exp dscp
--- ----
0   48
1   47
2   46
3   45
4   44
5   43
6   42
7   41

S57H_2012(config)#

        Returns:
{'1/cos': '47'
'0/cos': '48'
'3/cos': '45'
'2/cos': '46'
'5/cos': '43'
'4/cos': '44'
'7/cos': '41'
'6/cos': '42'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mls qos maps exp-dscp | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        flag = 0
        dict_value = {}
        for value in show_info_list:
            if "---" in value:
                flag = 1
                continue
            if flag == 1:
                list2 = value.split()
                dict_value[list2[0].strip() + "/dscp"] = list2[1].strip()
        return dict_value
    def dut_get_show_mls_qos_maps_dscpexp(self,show_info):
        """
        Function:show mls qos maps dscp-exp回显解析函数
        CLI命令:show mls qos maps dscp-exp
        回显信息示例:
S57H_2012(config)#show mls qos maps dscp-exp 
dscp exp     dscp exp     dscp exp     dscp exp
---- ---     ---- ---     ---- ---     ---- ---
 0   0        1   0        2   0        3   0       
 4   0        5   0        6   0        7   0       
 8   1        9   1       10   1       11   1       
12   1       13   1       14   1       15   1       
16   2       17   2       18   2       19   2       
20   2       21   2       22   2       23   2       
24   3       25   3       26   3       27   3       
28   3       29   3       30   3       31   3       
32   4       33   4       34   4       35   4       
36   4       37   4       38   4       39   4       
40   5       41   5       42   5       43   5       
44   5       45   5       46   5       47   5       
48   6       49   6       50   6       51   6       
52   6       53   6       54   6       55   6       
56   7       57   7       58   7       59   7       
60   7       61   7       62   7       63   7       

S57H_2012(config)#

        Returns:
{'24/cos': '3'
'44/cos': '5'
'56/cos': '7'
'48/cos': '6'
'16/cos': '2'
'0/cos': '0'
'20/cos': '2'
'40/cos': '5'
'52/cos': '6'
'60/cos': '7'
'8/cos': '1'
'28/cos': '3'
'4/cos': '0'
'32/cos': '4'
'12/cos': '1'
'36/cos': '4'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mls qos maps dscp-exp | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        flag = 0
        dict_value = {}
        for value in show_info_list:
            if "---" in value:
                flag = 1
                continue
            if flag == 1:
                list2 = value.split("\d{5}")
                for value2 in list2:
                    list3 = value2.split()
                    dict_value[list3[0].strip() + "/exp"] = list3[1].strip()
        return dict_value
    def dut_get_show_dot1x_multimab_quiet_user(self,show_info):
        """
        Function:show dot1x multi-mab quiet user回显解析函数
        CLI命令:show dot1x multi-mab quiet user
        回显信息示例:
Ruijie#show dot1x multi-mab quiet user 
User MAC        Interface  VLAN  Type       Time        Fail-times  Reject-times
--------------  ---------  ----  ---------  ----------  ----------  ------------
1000.0000.0001  Gi0/3      20    timeout    7     Sec   2           0           
000e.04b7.7aae  Gi0/3      20    timeout    7     Sec   2           0           
Ruijie#

        Returns:
{'1000.0000.0001/Gi0/3/Time': '7     Sec'
'000e.04b7.7aae/Gi0/3/Fail-times': '2'
'000e.04b7.7aae/Gi0/3/VLAN': '20'
'1000.0000.0001/Gi0/3/Type': 'timeout'
'000e.04b7.7aae/Gi0/3/Type': 'timeout'
'000e.04b7.7aae/Gi0/3/Time': '7     Sec'
'1000.0000.0001/Gi0/3/VLAN': '20'
'1000.0000.0001/Gi0/3/Reject-times': '0'
'000e.04b7.7aae/Gi0/3/Reject-times': '0'
'1000.0000.0001/Gi0/3/Fail-times': '2'
'User MAC_list': ['1000.0000.0001/Gi0/3'
'000e.04b7.7aae/Gi0/3']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show dot1x multi-mab quiet user | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"User MAC","Interface")
    def dut_get_show_users(self,show_info):
        """
        Function:show users回显解析函数
        CLI命令:show users
        回显信息示例:
S57H_2014#show users 
Line             User         Host(s)              Idle       Location
---------------- ------------ -------------------- ---------- ------------------
   0 con 0       ---          127.0.0.1            00:00:00   ---
   1 vty 0       ---          127.0.0.1            00:00:00   127.0.0.1
   2 vty 1       ruijie       127.0.0.1            00:00:00   127.0.0.1
   3 vty 2       ruijie       127.0.0.1            00:00:00   127.0.0.1
   4 vty 3       ruijie       127.0.0.1            00:00:00   127.0.0.1
   5 vty 4       ruijie       127.0.0.1            00:00:00   127.0.0.1
*  6 vty 5       ruijie       idle                 00:00:00   127.0.0.1

S57H_2014#

        Returns:
{'1 vty 0/User': '---'
'2 vty 1/User': 'ruijie'
'0 con 0/Idle': '00:00:00'
'2 vty 1/Location': '127.0.0.1'
'2 vty 1/Host(s)': '127.0.0.1'
'4 vty 3/Idle': '00:00:00'
'2 vty 1/Idle': '00:00:00'
'1 vty 0/Location': '127.0.0.1'
'5 vty 4/Idle': '00:00:00'
'3 vty 2/Host(s)': '127.0.0.1'
'0 con 0/Location': '---'
'Line_list': ['0 con 0'
'1 vty 0'
'2 vty 1'
'3 vty 2'
'4 vty 3'
'5 vty 4'
'*  6 vty 5'], '5 vty 4/Location': '127.0.0.1'
'0 con 0/User': '---'
'*  6 vty 5/Location': '127.0.0.1'
'5 vty 4/Host(s)': '127.0.0.1'
'3 vty 2/Idle': '00:00:00'
'*  6 vty 5/Host(s)': 'idle'
'3 vty 2/Location': '127.0.0.1'
'4 vty 3/Location': '127.0.0.1'
'1 vty 0/Idle': '00:00:00'
'4 vty 3/User': 'ruijie'
'*  6 vty 5/Idle': '00:00:00'
'*  6 vty 5/User': 'ruijie'
'4 vty 3/Host(s)': '127.0.0.1'
'5 vty 4/User': 'ruijie'
'0 con 0/Host(s)': '127.0.0.1'
'3 vty 2/User': 'ruijie'
'1 vty 0/Host(s)': '127.0.0.1'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show users | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Line")
    def dut_get_show_interfaces_counters_summary_up(self,show_info):
        """
        Function:show interfaces counters summary up回显解析函数
        CLI命令:show interfaces counters summary up
        回显信息示例:
Ruijie#show interfaces counters summary up
Interface     InOctets             InUcastPkts          InMulticastPkts      InBroadcastPkts
------------- -------------------- -------------------- -------------------- --------------------
Gi0/1         1254342045540        9609217908           739197335            4029601998          
Gi0/2         1318443714618        10279300547          1182310020           3262322602          
Gi0/3         1315089653517        9643060626           435429279            3310691110          
Gi0/4         1125618481529        9229147790           354543088            3601412358          
Gi0/11        1438244461362        10091332181          575308328            3856186664          
Gi0/12        897018765149         5421806425           1072778895           4183712258          
Gi0/13        722705814091         4515153495           292516214            3326881067          
Gi0/14        1242386000402        8396926650           384442003            3521448509          
Gi0/15        521827390603         2829827824           353157294            3444702910          
Gi0/16        304681855474         38477                463085997            3791863322          
Gi0/18        404087390246         3584                 794339521            4714899625          
Gi0/19        404530976176         844                  796745821            4717206997          
Gi0/21        296496348360         1265                 457548055            3681333763          
Gi0/29        416418710950         31967648             806465632            4779324121          
Gi0/37        1150701603374        9331021468           363161654            3688676190          
Gi0/38        312262283740         38841803             488801956            3755771940          
Gi0/39        314758694244         38174550             511057991            3757168982          
Gi0/40        431377904260         43430261             890972911            4822742929          
Gi0/48        256                  0                    0                    4                   
Te0/49        3131944623834        18550337515          2391990620           422377676           
Te0/50        3360201707499        18389571170          8239387059           8015675578          
Te0/51        637377148070         4463118735           2517744              34815742            
Te0/52        3669133431           10528154             358                  2396883             
Interface     OutOctets            OutUcastPkts         OutMulticastPkts     OutBroadcastPkts
------------- -------------------- -------------------- -------------------- --------------------
Gi0/1         1334412817053        6308940890           2147903629           341417537           
Gi0/2         1314704311104        7828862130           908916475            3564874829          
Gi0/3         633449446782         3675732655           257388562            3444019984          
Gi0/4         1123311057772        9270841047           359498270            3592826409          
Gi0/11        372131401261         2443249652           792651369            849513475           
Gi0/12        1341765509683        10440755507          197316359            3208408215          
Gi0/13        889099950012         4822108622           222365259            3284508656          
Gi0/14        552235841421         3121371771           313534461            3392647133          
Gi0/15        515756224548         2883871253           274988724            3328011287          
Gi0/16        295575667339         44338494             400377657            3634621123          
Gi0/18        414562491571         48319145             796383767            4716811269          
Gi0/19        411931174832         37743481             793944170            4714373339          
Gi0/21        286114129861         38783383             388627524            3537206661          
Gi0/29        412707662172         615                  813950082            4807543164          
Gi0/37        531376507895         2834619583           373245906            3552646599          
Gi0/38        309400599974         1063809              483641406            3833849565          
Gi0/39        310289186559         448648               507456550            3804329885          
Gi0/40        426479133936         806393               884664659            4886296898          
Gi0/48        625498831            735259               0                    8615182             
Te0/49        1963083639489        15176814227          826724724            4043594917          
Te0/50        1515566819056        10903839608          1510750959           3961502317          
Te0/51        947138568844         7868683108           51705986             292923096           
Te0/52        770276461904         7598432893           101337174            366133998           
Ruijie#

        Returns:
{'Gi0/12/OutMulticastPkts': '197316359'
'Gi0/29/InBroadcastPkts': '4779324121'
'Gi0/38/InUcastPkts': '38841803'
'Gi0/4/InOctets': '1125618481529'
'Gi0/2/OutBroadcastPkts': '3564874829'
'Te0/50/InMulticastPkts': '8239387059'
'Gi0/37/OutBroadcastPkts': '3552646599'
'Gi0/14/InBroadcastPkts': '3521448509'
'Te0/50/OutBroadcastPkts': '3961502317'
'Te0/52/InBroadcastPkts': '2396883'
'Gi0/4/OutOctets': '1123311057772'
'Gi0/14/OutBroadcastPkts': '3392647133'
'Gi0/19/OutMulticastPkts': '793944170'
'Gi0/18/InMulticastPkts': '794339521'
'Gi0/4/OutBroadcastPkts': '3592826409'
'Gi0/39/OutBroadcastPkts': '3804329885'
'Te0/50/OutMulticastPkts': '1510750959'
'Gi0/21/InBroadcastPkts': '3681333763'
'Gi0/1/InUcastPkts': '9609217908'
'Gi0/14/OutUcastPkts': '3121371771'
'Gi0/18/OutOctets': '414562491571'
'Gi0/14/InMulticastPkts': '384442003'
'Gi0/3/OutUcastPkts': '3675732655'
'Gi0/19/OutUcastPkts': '37743481'
'Gi0/1/OutOctets': '1334412817053'
'Te0/50/OutOctets': '1515566819056'
'Gi0/48/InUcastPkts': '0'
'Gi0/18/InUcastPkts': '3584'
'Gi0/15/InUcastPkts': '2829827824'
'Gi0/3/InMulticastPkts': '435429279'
'Gi0/29/OutUcastPkts': '615'
'Gi0/3/InUcastPkts': '9643060626'
'Gi0/2/InOctets': '1318443714618'
'Gi0/13/OutMulticastPkts': '222365259'
'Gi0/1/InMulticastPkts': '739197335'
'Gi0/19/OutBroadcastPkts': '4714373339'
'Gi0/38/InOctets': '312262283740'
'Te0/51/OutBroadcastPkts': '292923096'
'Gi0/18/OutMulticastPkts': '796383767'
'Gi0/18/InBroadcastPkts': '4714899625'
'Gi0/16/InOctets': '304681855474'
'Gi0/3/OutMulticastPkts': '257388562'
'Gi0/48/InBroadcastPkts': '4'
'Gi0/21/OutMulticastPkts': '388627524'
'Gi0/16/OutBroadcastPkts': '3634621123'
'Te0/52/InMulticastPkts': '358'
'Gi0/13/InMulticastPkts': '292516214'
'Te0/50/OutUcastPkts': '10903839608'
'Gi0/14/InOctets': '1242386000402'
'Gi0/13/InBroadcastPkts': '3326881067'
'Gi0/40/OutBroadcastPkts': '4886296898'
'Gi0/38/OutOctets': '309400599974'
'Gi0/1/InOctets': '1254342045540'
'Gi0/18/OutBroadcastPkts': '4716811269'
'Gi0/11/OutBroadcastPkts': '849513475'
'Gi0/11/InBroadcastPkts': '3856186664'
'Gi0/48/OutUcastPkts': '735259'
'Gi0/29/InOctets': '416418710950'
'Gi0/13/OutOctets': '889099950012'
'Gi0/2/OutUcastPkts': '7828862130'
'Gi0/18/InOctets': '404087390246'
'Te0/49/InBroadcastPkts': '422377676'
'Te0/52/OutOctets': '770276461904'
'Gi0/13/OutBroadcastPkts': '3284508656'
'Gi0/14/OutMulticastPkts': '313534461'
'Gi0/37/InOctets': '1150701603374'
'Gi0/39/OutMulticastPkts': '507456550'
'Gi0/19/InBroadcastPkts': '4717206997'
'Gi0/39/InBroadcastPkts': '3757168982'
'Gi0/39/OutUcastPkts': '448648'
'Gi0/19/OutOctets': '411931174832'
'Gi0/4/OutMulticastPkts': '359498270'
'Gi0/12/OutUcastPkts': '10440755507'
'Gi0/38/InMulticastPkts': '488801956'
'Gi0/15/InBroadcastPkts': '3444702910'
'Te0/49/InMulticastPkts': '2391990620'
'Te0/52/OutUcastPkts': '7598432893'
'Gi0/12/InMulticastPkts': '1072778895'
'Gi0/15/InOctets': '521827390603'
'Gi0/37/InMulticastPkts': '363161654'
'Gi0/15/OutMulticastPkts': '274988724'
'Gi0/37/OutMulticastPkts': '373245906'
'Gi0/16/InMulticastPkts': '463085997'
'Gi0/48/InMulticastPkts': '0'
'Gi0/12/InUcastPkts': '5421806425'
'Gi0/16/OutMulticastPkts': '400377657'
'Te0/51/OutOctets': '947138568844'
'Gi0/11/InMulticastPkts': '575308328'
'Gi0/37/OutUcastPkts': '2834619583'
'Gi0/1/OutBroadcastPkts': '341417537'
'Te0/52/OutBroadcastPkts': '366133998'
'Gi0/39/InMulticastPkts': '511057991'
'Gi0/3/OutBroadcastPkts': '3444019984'
'Gi0/39/InUcastPkts': '38174550'
'Gi0/38/OutUcastPkts': '1063809'
'Gi0/37/InBroadcastPkts': '3688676190'
'Gi0/21/InUcastPkts': '1265'
'Gi0/39/InOctets': '314758694244'
'Gi0/4/OutUcastPkts': '9270841047'
'Gi0/40/InUcastPkts': '43430261'
'Te0/50/InBroadcastPkts': '8015675578'
'Interface_list': ['Gi0/1'
'Gi0/2'
'Gi0/3'
'Gi0/4'
'Gi0/11'
'Gi0/12'
'Gi0/13'
'Gi0/14'
'Gi0/15'
'Gi0/16'
'Gi0/18'
'Gi0/19'
'Gi0/21'
'Gi0/29'
'Gi0/37'
'Gi0/38'
'Gi0/39'
'Gi0/40'
'Gi0/48'
'Te0/49'
'Te0/50'
'Te0/51'
'Te0/52'], 'Gi0/29/OutMulticastPkts': '813950082'
'Te0/52/InOctets': '3669133431'
'Te0/50/InOctets': '3360201707499'
'Gi0/4/InMulticastPkts': '354543088'
'Te0/49/OutMulticastPkts': '826724724'
'Gi0/11/InOctets': '1438244461362'
'Te0/49/OutBroadcastPkts': '4043594917'
'Gi0/15/OutUcastPkts': '2883871253'
'Te0/51/InUcastPkts': '4463118735'
'Gi0/40/InMulticastPkts': '890972911'
'Gi0/16/OutUcastPkts': '44338494'
'Gi0/12/InOctets': '897018765149'
'Gi0/1/OutUcastPkts': '6308940890'
'Gi0/4/InBroadcastPkts': '3601412358'
'Gi0/21/InOctets': '296496348360'
'Gi0/40/InBroadcastPkts': '4822742929'
'Gi0/48/OutMulticastPkts': '0'
'Te0/51/InBroadcastPkts': '34815742'
'Gi0/12/OutOctets': '1341765509683'
'Gi0/2/InBroadcastPkts': '3262322602'
'Gi0/3/InOctets': '1315089653517'
'Gi0/21/OutOctets': '286114129861'
'Gi0/29/InMulticastPkts': '806465632'
'Gi0/13/InUcastPkts': '4515153495'
'Te0/52/OutMulticastPkts': '101337174'
'Te0/51/OutUcastPkts': '7868683108'
'Gi0/48/OutOctets': '625498831'
'Te0/51/InMulticastPkts': '2517744'
'Te0/52/InUcastPkts': '10528154'
'Te0/49/OutUcastPkts': '15176814227'
'Gi0/48/OutBroadcastPkts': '8615182'
'Gi0/11/InUcastPkts': '10091332181'
'Te0/49/OutOctets': '1963083639489'
'Gi0/16/InBroadcastPkts': '3791863322'
'Gi0/11/OutOctets': '372131401261'
'Gi0/21/OutBroadcastPkts': '3537206661'
'Gi0/12/InBroadcastPkts': '4183712258'
'Gi0/11/OutUcastPkts': '2443249652'
'Gi0/2/InUcastPkts': '10279300547'
'Te0/49/InOctets': '3131944623834'
'Gi0/40/InOctets': '431377904260'
'Gi0/13/InOctets': '722705814091'
'Gi0/48/InOctets': '256'
'Gi0/2/OutOctets': '1314704311104'
'Gi0/1/InBroadcastPkts': '4029601998'
'Gi0/14/OutOctets': '552235841421'
'Gi0/29/InUcastPkts': '31967648'
'Gi0/40/OutOctets': '426479133936'
'Gi0/3/OutOctets': '633449446782'
'Gi0/4/InUcastPkts': '9229147790'
'Gi0/12/OutBroadcastPkts': '3208408215'
'Gi0/1/OutMulticastPkts': '2147903629'
'Te0/50/InUcastPkts': '18389571170'
'Te0/51/InOctets': '637377148070'
'Gi0/13/OutUcastPkts': '4822108622'
'Gi0/21/InMulticastPkts': '457548055'
'Gi0/29/OutOctets': '412707662172'
'Gi0/19/InMulticastPkts': '796745821'
'Gi0/2/OutMulticastPkts': '908916475'
'Gi0/15/InMulticastPkts': '353157294'
'Gi0/16/InUcastPkts': '38477'
'Gi0/19/InUcastPkts': '844'
'Gi0/15/OutBroadcastPkts': '3328011287'
'Gi0/29/OutBroadcastPkts': '4807543164'
'Gi0/2/InMulticastPkts': '1182310020'
'Gi0/3/InBroadcastPkts': '3310691110'
'Gi0/38/InBroadcastPkts': '3755771940'
'Gi0/21/OutUcastPkts': '38783383'
'Te0/51/OutMulticastPkts': '51705986'
'Gi0/40/OutUcastPkts': '806393'
'Gi0/19/InOctets': '404530976176'
'Gi0/11/OutMulticastPkts': '792651369'
'Gi0/15/OutOctets': '515756224548'
'Gi0/39/OutOctets': '310289186559'
'Gi0/18/OutUcastPkts': '48319145'
'Gi0/38/OutBroadcastPkts': '3833849565'
'Gi0/14/InUcastPkts': '8396926650'
'Gi0/37/InUcastPkts': '9331021468'
'Gi0/16/OutOctets': '295575667339'
'Gi0/37/OutOctets': '531376507895'
'Te0/49/InUcastPkts': '18550337515'
'Gi0/38/OutMulticastPkts': '483641406'
'Gi0/40/OutMulticastPkts': '884664659'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interfaces counters summary up | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = show_info.split("\n")
        show_list_1 = []
        show_list_2 = []
        flag = 0
        for value in show_info_list:
            if "InOctets" in value:
                flag = 1
            elif "OutOctets" in value:
                flag = 2
            if flag == 1 :
                show_list_1.append(value)
            else:
                show_list_2.append(value)
        show_info_1 = "\n".join(show_list_1)
        show_info_2 = "\n".join(show_list_2)
        dict_value_1  = self.dut_show_autoget_whippletree_form_analysis(show_info_1,"Interface")
        dict_value_2 = self.dut_show_autoget_whippletree_form_analysis(show_info_2, "Interface")
        return dict(dict_value_1.items()+dict_value_2.items())
    def dut_get_show_issu_state(self,show_info):
        """
        Function:show issu state回显解析函数
        CLI命令:show issu state
        回显信息示例:
7808_2004(config)#show issu state 
[Slot 1/M1]
    Issu State     : Init
    Issu Role      : Master
    Issu Version   : 
[Slot 2/M2]
    Issu State     : Init
    Issu Role      : Backup
    Issu Version   :

        Returns:
{"2/M2/Issu Version": ""
"2/M2/Issu State": "Init"
"2/M2/Issu Role": "Backup"
"1/M1/Issu Role": "Master"
"1/M1/Issu Version": ""
"1/M1/Issu State": "Init"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show issu state | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        flag = 0
        for value in show_info_list:
            if re.match(r"\[Slot (.*)\]",value):
                obj1 = re.match(r"\[Slot (.*)\]", value)
                key1 = obj1.group(1).strip()
                flag =1
            if flag == 1:
                if ":" in value:
                    list1 = value.split(":")
                    dict_value[key1 + "/"+list1[0].strip()] = list1[1].strip()
        return dict_value
    def dut_get_show_lldp_neighbors_order(self,show_info):
        """
        Function:show lldp neighbors order回显解析函数
        CLI命令:show lldp neighbors order
        回显信息示例:
Dut2#show lldp neighbors order
Capability codes:
    (R) Router, (B) Bridge, (T) Telephone, (C) DOCSIS Cable Device
    (W) WLAN Access Point, (P) Repeater, (S) Station, (O) Other
System Name                 Local Intf          Port ID                          Capability   Aging-time
DUT_2                       Te0/22              TenGigabitEthernet 0/22          P, B, R      1minutes 40seconds 
DUT_2                       Fo0/49              FortyGigabitEthernet 0/51        P, B, R      1minutes 49seconds 
Ruijie                      Mg0                 GigabitEthernet 0/36             P, B, R      1minutes 59seconds

        Returns:
{"Mg0/Aging-time": "1minutes 59seconds"
"Local Intf_list": ["Te0/22"
"Fo0/49"
"Mg0"], "Mg0/Capability": "P, B, R"
"Fo0/49/Capability": "P, B, R"
"Te0/22/Port ID": "TenGigabitEthernet 0/22"
"Mg0/System Name": "Ruijie"
"Fo0/49/Aging-time": "1minutes 49seconds"
"Mg0/Port ID": "GigabitEthernet 0/36"
"Fo0/49/System Name": "DUT_2"
"Te0/22/Aging-time": "1minutes 40seconds"
"Fo0/49/Port ID": "FortyGigabitEthernet 0/51"
"Te0/22/System Name": "DUT_2"
"Te0/22/Capability": "P, B, R"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show lldp neighbors order | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        flag = 0
        show_list_2 = []
        dict_value1 = {}
        for value in show_info_list:
            if "System Name" in value:
                flag = 1
            elif "Total entries displayed:" in value:
                list1 = value.split(":")
                dict_value1[list1[0].strip()] = list1[1].strip()
                flag = 0
            if flag == 1:
                show_list_2.append(value)
        show_info_2 = "\n".join(show_list_2)
        dict_value2 = self.dut_show_autoget_blank_list(show_info_2,"Local Intf")
        return dict(dict_value1.items()+dict_value2.items())
    def dut_get_show_vpdn_session(self,show_info):
        """
        Function:show vpdn session回显解析函数
        CLI命令:show vpdn session
        回显信息示例:
5DUT2#show vpdn session      

%No active L2TP tunnels

PPTP Session Information Total sessions 1


LocID RemID TunID  Intf    Username      State      Last Chg

2     55769 1      Va0     ruijie        connected  00:02:15

        Returns:
{'ruijie/Last_Chg': '00:02:15'
'Username_list': ['ruijie'], 'ruijie/State': 'connected'
'ruijie/TunID': '1'
'PPTP Session Information': '1'
'ruijie/Intf': 'Va0'
'ruijie/LocID': '2'
'ruijie/RemID': '55769'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show vpdn session | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        new_info_list = []
        flag = 0
        dict_value1={}
        for value in show_info_list:
            if "Username" in value and "Last Chg" in value:
                value  = value.replace("Last Chg","Last_Chg")
                flag = 1
            elif "Total sessions" in value:
                list1 = value.split("Total sessions")
                dict_value1[list1[0].strip()] =list1[1].strip()
            if flag == 1:
                new_info_list.append(value)
        show_info_1 = "\n".join(new_info_list)
        dict_value2 = self.dut_show_autoget_blank_list(show_info_1,"Username",split_one=1)
        return dict(dict_value1.items()+dict_value2.items())
    def dut_get_show_vpdn_tunnel_pptp_num(self,show_info):
        """
        Function:show vpdn tunnel pptp <num>回显解析函数
        CLI命令:show vpdn tunnel pptp <num>
        回显信息示例:
5DUT2#show vpdn tunnel pptp 1
PPTP tunnel id 1 is up, remote id is 0, 1 active session
  Tunnel state is estbed
  Remote tunnel name is 
    Internet Address 8.18.188.25, port 23001
  Local tunnel name is 
    Internet Address 8.18.188.100

        Returns:
{'active session': '1'
'Remote tunnel/port': '23001'
'PPTP tunnel id 1': 'up'
'unnel state is': 'estbed'
'Local tunnel/Internet Address': '8.18.188.100'
'remote id': '0'
'Remote tunnel/Internet Address': '8.18.188.25'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show vpdn tunnel pptp <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        flag1 = 0
        flag2 = 0
        for value in show_info_list:
            value = value.strip()
            if re.match(r"PPTP tunnel id (\d+) is (.*), remote id is (.*), (.*) active session",value):
                obj_1 = re.match(r"PPTP tunnel id (\d+) is (.*), remote id is (.*), (.*) active session",value)
                dict_value["PPTP tunnel id "+obj_1.group(1)] = obj_1.group(2).strip()
                dict_value["remote id"] = obj_1.group(3).strip()
                dict_value["active session"] = obj_1.group(4).strip()
            elif re.match(r"Tunnel state is (.*)",value):
                obj_2 = re.match(r"Tunnel state is (.*)",value)
                dict_value["unnel state is"] = obj_2.group(1).strip()
            elif "Remote tunnel name is" in value :
                flag1 = 1
                continue
            elif "Local tunnel name is" in value :
                flag1 = 0
                flag2 = 1
                continue
            if flag1 == 1 :
                if re.match(r"Internet Address (.*), port (.*)", value):
                    obj_3 = re.match(r"Internet Address (.*), port (.*)", value)
                    dict_value["Remote tunnel/Internet Address"] = obj_3.group(1).strip()
                    dict_value["Remote tunnel/port"] = obj_3.group(2).strip()
            if flag2 == 1:
                if re.match(r"Internet Address (.*)", value):
                    obj_3 = re.match(r"Internet Address (.*)", value)
                    dict_value["Local tunnel/Internet Address"] = obj_3.group(1).strip()
        return dict_value
    def dut_get_show_vpdn_log(self,show_info):
        """
        Function:show vpdn log回显解析函数
        CLI命令:show vpdn log
        回显信息示例:
Ruijie# show vpdn log 
Username                            IP         State  Online time        Offline time
user-1                               100.1.1.2    out    2014-11-16-14:09:04  2014-11-16-14:29:26
user-2                               100.1.2.2    out    2014-11-16-15:09:05  2014-11-16-16:09:27
user-3                               100.1.3.2    out    2014-11-16-17:09:04  2014-11-16-18:09:26
user-4                               100.1.4.2    in     2014-11-16-18:09:05

        Returns:
{"100.1.3.2/Online time": "2014-11-16-17:09"
"IP_list": ["100.1.1.2"
"100.1.2.2"
"100.1.3.2"
"100.1.4.2"], "100.1.3.2/Username": "user-3"
"100.1.1.2/Online time": "2014-11-16-14:09"
"100.1.3.2/Offline time": ":04  2014-11-16-18:09:26"
"100.1.2.2/Offline time": ":05  2014-11-16-16:09:27"
"100.1.4.2/Online time": "2014-11-16-18:09"
"100.1.1.2/State": "out"
"100.1.2.2/Online time": "2014-11-16-15:09"
"100.1.1.2/Username": "user-1"
"100.1.4.2/Username": "user-4"
"100.1.4.2/State": "in"
"100.1.3.2/State": "out"
"100.1.2.2/Username": "user-2"
"100.1.4.2/Offline time": ":05"
"100.1.1.2/Offline time": ":04  2014-11-16-14:29:26"
"100.1.2.2/State": "out"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show vpdn log | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        star,end,show_len_list,show_info_list_line = self.dut_common_get_linelist(show_info,"IP",split_num=2)
        return self.dut_show_autoget_form(star,end,"IP",show_len_list,show_info_list_line,)
    def dut_get_show_vpdn_log_user_word(self, show_info):
        """
        Function:show vpdn log user (word)回显解析函数
        CLI命令:show vpdn log user (word)
        回显信息示例:
Ruijie# show vpdn log user (word)
Username                            IP         State  Online time        Offline time
user-1                               100.1.1.2    out    2014-11-16-14:09:04  2014-11-16-14:29:26

        Returns:
{"100.1.1.2/Online time": "2014-11-16-14:09"
"100.1.1.2/Username": "user-1"
"100.1.1.2/State": "out"
"IP_list": ["100.1.1.2"], "100.1.1.2/Offline time": ":04  2014-11-16-14:29:26"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show vpdn log user (word) | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_vpdn_log(show_info)
    def dut_get_show_role_name_word(self,show_info):
        """
        Function:show role name (word)回显解析函数
        CLI命令:show role name (word)
        回显信息示例:
s57_2003#show role name(word)
Role: test
  Description: 
  Interface policy: deny
  Permit interfaces: 
  VLAN2 - 5,VLAN7
  VLAN policy: permit (default)
  Vrf policy: permit (default)

        Returns:
{"Vrf policy": "permit"
"Description": ""
"VLAN policy": "permit"
"Interface policy": "deny"
"Role": "test"
"Permit interfaces": "VLAN2 - 5,VLAN7"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show role name (word) | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        flag = 0
        for value in show_info_list:
            if flag == 1 :
                if ":" not in value:
                    dict_value["Permit interfaces"] = value.strip()
            if ":" in value :
                if "Permit interfaces" in value:
                    flag = 1
                    continue
                list1 = value.split(":")
                value_2 = list1[1].strip()
                if "permit (default)" in value_2:
                    value_2 = value_2.split("(")[0].strip()
                dict_value[list1[0].strip()] = value_2
        return dict_value
    def dut_get_show_cpuprotect_autodefend_summary(self,show_info):
        """
        Function:show cpu-protect auto-defend summary回显解析函数
        CLI命令:show cpu-protect auto-defend summary
        回显信息示例:
yuson#show cpu-protect auto-defend summary
Packet Type             Bandwidth(pps)  Rate(pps)  Drop(pps)  Enable   
----------------------  --------------  ---------  ---------  ---------
bgp                     100             0          0          false    
bgpv6                   100             0          0          false    
isis                    1600            0          0          false    
local-ipv4              3200            60         0          true     
local-ipv6              3200            0          0          false    
ospf                    1600            0          0          true     
ospf3                   1600            0          0          true     
rip                     480             0          0          false    
ripng                   102             0          0          false    
snmp                    880             0          0          false    
ssh                     880             0          0          false    
telnet                  880             0          0          false

        Returns:
{"bgp/Enable": "false"
"isis/Drop(pps)": "0"
"rip/Bandwidth(pps)": "480"
"local-ipv6/Enable": "false"
"ospf3/Bandwidth(pps)": "1600"
"isis/Rate(pps)": "0"
"ripng/Drop(pps)": "0"
"ospf/Enable": "true"
"bgp/Bandwidth(pps)": "100"
"telnet/Bandwidth(pps)": "880"
"ospf3/Drop(pps)": "0"
"ssh/Bandwidth(pps)": "880"
"bgpv6/Rate(pps)": "0"
"ripng/Enable": "false"
"rip/Rate(pps)": "0"
"ospf/Drop(pps)": "0"
"bgpv6/Bandwidth(pps)": "100"
"local-ipv6/Bandwidth(pps)": "3200"
"Packet Type_list": ["bgp"
"bgpv6"
"isis"
"local-ipv4"
"local-ipv6"
"ospf"
"ospf3"
"rip"
"ripng"
"snmp"
"ssh"
"telnet"], "local-ipv6/Drop(pps)": "0"
"ssh/Rate(pps)": "0"
"bgpv6/Drop(pps)": "0"
"snmp/Bandwidth(pps)": "880"
"bgpv6/Enable": "false"
"telnet/Drop(pps)": "0"
"ospf/Rate(pps)": "0"
"telnet/Enable": "false"
"isis/Enable": "false"
"ripng/Bandwidth(pps)": "102"
"rip/Drop(pps)": "0"
"local-ipv4/Enable": "true"
"snmp/Rate(pps)": "0"
"local-ipv4/Drop(pps)": "0"
"ospf3/Enable": "true"
"snmp/Enable": "false"
"isis/Bandwidth(pps)": "1600"
"bgp/Drop(pps)": "0"
"rip/Enable": "false"
"ripng/Rate(pps)": "0"
"ssh/Drop(pps)": "0"
"ospf/Bandwidth(pps)": "1600"
"local-ipv6/Rate(pps)": "0"
"local-ipv4/Rate(pps)": "60"
"telnet/Rate(pps)": "0"
"local-ipv4/Bandwidth(pps)": "3200"
"snmp/Drop(pps)": "0"
"ospf3/Rate(pps)": "0"
"ssh/Enable": "false"
"bgp/Rate(pps)": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show cpu-protect auto-defend summary | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Packet Type")
    def dut_get_show_cpuprotect_autodefend_config(self,show_info):
        """
        Function:show cpu-protect auto-defend config回显解析函数
        CLI命令:show cpu-protect auto-defend config
        回显信息示例:
logyuson(config)#show cpu-protect auto-defend config
Packet Type             Src-Ip                                    Src-Mac           
----------------------  ----------------------------------------  ------------------
bgp                     192.168.1.200                             -                 
ospf                    1.1.1.2                                   -                 
local-ipv4              192.168.1.105                             -

        Returns:
{"Src-Ip_list": ["192.168.1.200"
"1.1.1.2"
"192.168.1.105"], "192.168.1.105/Src-Mac": "-"
"1.1.1.2/Src-Mac": "-"
"1.1.1.2/Packet Type": "ospf"
"192.168.1.105/Packet Type": "local-ipv4"
"192.168.1.200/Src-Mac": "-"
"192.168.1.200/Packet Type": "bgp"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show cpu-protect auto-defend config | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info, "Src-Ip")
    def dut_get_show_cpuprotect_autodefend_conf(self,show_info):
        """
        Function:show cpu-protect auto-defend config回显解析函数
        CLI命令:show cpu-protect auto-defend config
        回显信息示例:
Ruijie#show cpu-protect auto-defend conf

Packet Type             Src-Ip                                    Src-Mac           
----------------------  ----------------------------------------  ------------------
local-ipv6              2001::2                                   -                 
isis                    -                                         0900.2b00.0104    
ospf                    1.1.1.2                                   -                 
Ruijie#

        Returns:
{"local-ipv6/Src-Ip": "2001::2"
"ospf/Src-Mac": "-"
"isis/Src-Ip": "-"
"isis/Src-Mac": "0900.2b00.0104"
"Packet Type_list": ["local-ipv6"
"isis"
"ospf"], "ospf/Src-Ip": "1.1.1.2"
"local-ipv6/Src-Mac": "-"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show cpu-protect auto-defend config | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info, "Packet Type")
    def dut_get_show_cpuprotect_autodefend_config_detail(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info, "Packet Type")
    def dut_get_show_cpuprotect_autoportdefend_summary(self,show_info):
        """
        Function:show cpu-protect auto-defend summary回显解析函数
        CLI命令:show cpu-protect auto-defend summary
        回显信息示例:
yuson(config)#show cpu-protect auto-defend summary                          
Packet Type             Bandwidth(pps)  Rate(pps)  Drop(pps)  Enable   
----------------------  --------------  ---------  ---------  ---------
bgp                     100             0          0          false    
bgpv6                   100             0          0          false    
isis                    1600            0          0          false    
local-ipv4              3200            60         0          true     
local-ipv6              3200            0          0          false    
ospf                    1600            0          0          true     
ospf3                   1600            0          0          true     
rip                     480             0          0          false    
ripng                   102             0          0          false    
snmp                    880             0          0          false    
ssh                     880             0          0          false    
telnet                  880             0          0          false

        Returns:
{"bgp/Enable": "false"
"isis/Drop(pps)": "0"
"rip/Bandwidth(pps)": "480"
"local-ipv6/Enable": "false"
"ospf3/Bandwidth(pps)": "1600"
"isis/Rate(pps)": "0"
"ripng/Drop(pps)": "0"
"ospf/Enable": "true"
"bgp/Bandwidth(pps)": "100"
"telnet/Bandwidth(pps)": "880"
"ospf3/Drop(pps)": "0"
"ssh/Bandwidth(pps)": "880"
"bgpv6/Rate(pps)": "0"
"ripng/Enable": "false"
"rip/Rate(pps)": "0"
"ospf/Drop(pps)": "0"
"bgpv6/Bandwidth(pps)": "100"
"local-ipv6/Bandwidth(pps)": "3200"
"Packet Type_list": ["bgp"
"bgpv6"
"isis"
"local-ipv4"
"local-ipv6"
"ospf"
"ospf3"
"rip"
"ripng"
"snmp"
"ssh"
"telnet"], "local-ipv6/Drop(pps)": "0"
"ssh/Rate(pps)": "0"
"bgpv6/Drop(pps)": "0"
"snmp/Bandwidth(pps)": "880"
"bgpv6/Enable": "false"
"telnet/Drop(pps)": "0"
"ospf/Rate(pps)": "0"
"telnet/Enable": "false"
"isis/Enable": "false"
"ripng/Bandwidth(pps)": "102"
"rip/Drop(pps)": "0"
"local-ipv4/Enable": "true"
"snmp/Rate(pps)": "0"
"local-ipv4/Drop(pps)": "0"
"ospf3/Enable": "true"
"snmp/Enable": "false"
"isis/Bandwidth(pps)": "1600"
"bgp/Drop(pps)": "0"
"rip/Enable": "false"
"ripng/Rate(pps)": "0"
"ssh/Drop(pps)": "0"
"ospf/Bandwidth(pps)": "1600"
"local-ipv6/Rate(pps)": "0"
"local-ipv4/Rate(pps)": "60"
"telnet/Rate(pps)": "0"
"local-ipv4/Bandwidth(pps)": "3200"
"snmp/Drop(pps)": "0"
"ospf3/Rate(pps)": "0"
"ssh/Enable": "false"
"bgp/Rate(pps)": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show cpu-protect auto-defend summary | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match(r"auto-port-defend monitor-period (.*)",value):
                obj1 = re.match(r"auto-port-defend monitor-period (.*)", value)
                dict_value["auto-port-defend monitor-period"] = obj1.group(1).strip().rstrip("s")
            elif re.match(r"auto-port-defend limit-threshold (.*)",value):
                obj1 = re.match(r"auto-port-defend limit-threshold (.*)", value)
                dict_value["auto-port-defend limit-threshold"] = obj1.group(1).strip().rstrip("%")
        dict_value2 = self.dut_show_autoget_whippletree_form_analysis(show_info,"Interface")
        return dict(dict_value.items()+dict_value2.items())
    def dut_get_show_nfpp_tcpsynguard_summary(self,show_info):
        """
        Function:show nfpp tcp-syn-guard summary回显解析函数
        CLI命令:show nfpp tcp-syn-guard summary
        回显信息示例:
yuson#show nfpp tcp-syn-guard summary

(Format of column Rate-limit and Attack-threshold is per-src-ip/per-src-mac/per-port.)
Interface Status  Isolate-period Rate-limit      Attack-threshold Scan-threshold
Global    Enable  0              20/-/50         100/-/200        0             
Te5/30    -       -              5/-/10          10/-/20          -             

Maximum count of monitored hosts: 20000
Monitor period: 600s

        Returns:
{"Interface_list": ["Global"
"Te5/30"], "Global/Status": "Enable"
"Te5/30/Isolate-period": "-"
"Te5/30/Attack-threshold": "10/-/20"
"Global/Rate-limit": "20/-/50"
"Global/Isolate-period": "0"
"Te5/30/Status": "-"
"Global/Attack-threshold": "100/-/200"
"Te5/30/Scan-threshold": "-"
"Global/Scan-threshold": "0"
"Maximum count of monitored hosts": "20000"
"Te5/30/Rate-limit": "5/-/10"
"Monitor period": "600"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show nfpp tcp-syn-guard summary | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value1 ={}
        show_info_list = self.dut_get_start_show_info(show_info)
        show_1_list = []
        for value in show_info_list:
            if "Maximum count of monitored hosts:" in value or "Monitor period:" in value:
                list1 = value.split(":")
                dict_value1[list1[0].strip()] = list1[1].strip().rstrip("s")
            else:
                show_1_list.append(value)
        show_1_info = "\n".join(show_1_list)
        dict_value2 = self.dut_show_autoget_blank_list(show_1_info,"Interface",split_one=1)
        return dict(dict_value1.items()+dict_value2.items())
    def dut_get_show_nfpp_tcpsynguard_trustedhost(self,show_info):
        """
        Function:show nfpp tcp-syn-guard trusted-host回显解析函数
        CLI命令:show nfpp tcp-syn-guard trusted-host
        回显信息示例:
yuson#show nfpp tcp-syn-guard trusted-host
IP address      mask            
----------      ----            
1.1.1.0         255.255.255.0   

Total: 1 record(s)

        Returns:
{"1.1.1.0/mask": "255.255.255.0"
"Total": "1 record(s)"
"IP address_list": ["1.1.1.0"]}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show nfpp tcp-syn-guard trusted-host | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"IP address",last_colon_ago_str="1")
    def dut_get_show_nfpp_tcpsynguard_hosts(self,show_info):
        """
        Function:show nfpp tcp-syn-guard hosts回显解析函数
        CLI命令:show nfpp tcp-syn-guard hosts
        回显信息示例:
yuson#show nfpp tcp-syn-guard hosts
If col_filter 1 shows '*', it means "hardware do not isolate host".
 VLAN    interface   IP address                          Reason    remain-time(s)          
 ----    ---------   ----------------------------        ------    --------------          
Total: 0 host

        Returns:
{"Total": "0 host"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show nfpp tcp-syn-guard hosts | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info, "IP address", last_colon_ago_str="1")
    def dut_get_show_issu_rollbacktimer(self,show_info):
        """
        Function:show issu rollback-timer回显解析函数
        CLI命令:show issu rollback-timer
        回显信息示例:
78-2004(config)#show issu rollback-timer
Rollback time configured : 2700 seconds.
                 remains : 2700 seconds.

        Returns:
{'remains': '2700 seconds'
'Rollback time configured': '2700 seconds'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show issu rollback-timer | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if ":" in value:
                list1 = value.split(":")
                dict_value[list1[0].strip()] = list1[1].strip().rstrip(".")
        return dict_value
    def dut_get_show_issu_state_detail(self,show_info):
        """
        Function:show issu state detail回显解析函数
        CLI命令:show issu state detail
        回显信息示例:
78-2004(config)#show issu state detail
[Slot M1]
    Issu State     : Init
    Issu Role      : Master
    Issu Version   : 
    Issu devID     : 1
    Issu slotID    : 30
    Issu sslotID   : 0
    Issu cardtype  : 217
    Issu dev state : ISSU_STATE_INIT
    Issu rootfsVer : 1.0.0.029736ac
[Slot M2]
    Issu State     : Init
    Issu Role      : Backup
    Issu Version   : 
    Issu devID     : 1
    Issu slotID    : 31
    Issu sslotID   : 0
    Issu cardtype  : 217
    Issu dev state : ISSU_STATE_INIT
    Issu rootfsVer : 1.0.0.029736ac
78-2004(config)#

        Returns:
{'M1/Issu slotID': '30'
'M2/Issu sslotID': '0'
'M1/Issu devID': '1'
'M1/Issu sslotID': '0'
'M2/Issu Role': 'Backup'
'M2/Issu dev state': 'ISSU_STATE_INIT'
'M1/Issu cardtype': '217'
'M2/Issu State': 'Init'
'M2/Issu devID': '1'
'M1/Issu Version': ''
'M1/Issu rootfsVer': '1.0.0.029736ac'
'M2/Issu Version': ''
'M2/Issu rootfsVer': '1.0.0.029736ac'
'M2/Issu slotID': '31'
'M1/Issu State': 'Init'
'M1/Issu dev state': 'ISSU_STATE_INIT'
'M2/Issu cardtype': '217'
'M1/Issu Role': 'Master'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show issu state detail | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("\[Slot (.*)\]",value):
                obj = re.match("\[Slot (.*)\]", value)
                key1 = obj.group(1).strip()
            elif ":" in value :
                list2 = value.split(":")
                dict_value[key1+"/"+list2[0].strip()] =list2[1].strip()
        return dict_value
    def dut_get_show_mac_all(self,show_info):
        """
        Function:show mac all回显解析函数
        CLI命令:show mac all
        回显信息示例:
Ruijie(config)#show mac all
VLAN/VSI/VNI   MAC Address          Type     Learned-From                   Live Time
-------------- -------------------- -------- ------------------------------ -------------
1/-/-          000c.2961.51b9       DYNAMIC  GigabitEthernet 0/0            0d 01:27:55
1/-/-          000c.29b6.1ced       DYNAMIC  GigabitEthernet 0/0            0d 01:23:52
-/-/10         0000.0000.0001       DYNAMIC  GigabitEthernet 0/1            0d 00:00:00
-/-/10         0000.0000.0002       EVPN     OverlayTunnel 6145             0d 00:00:01
Ruijie(config)#

        Returns:
{'000c.29b6.1ced/Live Time': '0d 01:23:52'
'000c.29b6.1ced/VLAN/VSI/VNI': '1/-/-'
'000c.2961.51b9/Learned-From': 'GigabitEthernet 0/0'
'0000.0000.0001/Learned-From': 'GigabitEthernet 0/1'
'000c.2961.51b9/Type': 'DYNAMIC'
'000c.29b6.1ced/Type': 'DYNAMIC'
'000c.29b6.1ced/Learned-From': 'GigabitEthernet 0/0'
'000c.2961.51b9/Live Time': '0d 01:27:55'
'0000.0000.0001/Type': 'DYNAMIC'
'0000.0000.0001/Live Time': '0d 00:00:00'
'0000.0000.0002/VLAN/VSI/VNI': '-/-/10'
'0000.0000.0001/VLAN/VSI/VNI': '-/-/10'
'MAC Address_list': ['000c.2961.51b9'
'000c.29b6.1ced'
'0000.0000.0001'
'0000.0000.0002'], '0000.0000.0002/Learned-From': 'OverlayTunnel 6145'
'0000.0000.0002/Type': 'EVPN'
'0000.0000.0002/Live Time': '0d 00:00:01'
'000c.2961.51b9/VLAN/VSI/VNI': '1/-/-'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mac all | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"MAC Address")
    def dut_get_show_sbfd_reflector_discriminator(self,show_info):
        """
        Function:show sbfd reflector discriminator回显解析函数
        CLI命令:show sbfd reflector discriminator
        回显信息示例:
Ruijie#show sbfd reflector discriminator
SBFD-Discr(INT)       SBFD-Discr(IP)                   State            CreateType
255                   0.0.0.255                        Inactive         IP        
16777216              1.0.0.0                          Inactive         Integer   
16777217              1.0.0.1                          Inactive         IP        
4294967294            255.255.255.254                  Inactive         Integer   
4294967295            255.255.255.255                  Inactive         IP        

Total Discriminator Num : 5
Ruijie#

        Returns:
{'0.0.0.255/SBFD-Discr(INT)': '255'
'0.0.0.255/State': 'Inactive'
'0.0.0.255/CreateType': 'IP'
'1.0.0.0/SBFD-Discr(INT)': '16777216'
'255.255.255.254/State': 'Inactive'
'255.255.255.254/SBFD-Discr(INT)': '4294967294'
'1.0.0.0/CreateType': 'Integer'
'1.0.0.1/CreateType': 'IP'
'255.255.255.255/State': 'Inactive'
'1.0.0.1/SBFD-Discr(INT)': '16777217'
'1.0.0.1/State': 'Inactive'
'255.255.255.255/SBFD-Discr(INT)': '4294967295'
'255.255.255.254/CreateType': 'Integer'
'Total Discriminator Num': '5'
'255.255.255.255/CreateType': 'IP'
'1.0.0.0/State': 'Inactive'
'SBFD-Discr(IP)_list': ['0.0.0.255'
'1.0.0.0'
'1.0.0.1'
'255.255.255.254'
'255.255.255.255']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show sbfd reflector discriminator | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value1 = {}
        show_list2 =[]
        for value in show_info_list:
            if "Total Discriminator Num :" in value:
                list1 = value.split(":")
                dict_value1[list1[0].strip()] =list1[1].strip()
            else:
                show_list2.append(value)
        show_info2 = "\n".join(show_list2)
        dict_value2 = self.dut_show_autoget_blank_list(show_info2,"SBFD-Discr(IP)")
        return dict(dict_value1.items()+dict_value2.items())
    def dut_get_show_cpuprotect_device_num(self,show_info):
        """
        Function:show cpu-protect device <num>回显解析函数
        CLI命令:show cpu-protect device <num>
        回显信息示例:
S5750#show cpu-protect device 1
%cpu port bandwidth: 4500(pps)
Traffic-class   Bandwidth(pps)  Rate(pps)  Drop(pps)
-------------   --------------  ---------  ---------
 0              1500            0          0        
 1              1500            0          0        
 2              1500            0          0        
 3              1500            0          0        
 4              1500            0          0        
 5              1500            0          0        
 6              1500            0          0        
 7              2000            0          0        
Packet Type         Traffic-class  Bandwidth(pps)  Rate(pps)  Drop(pps)  Total         Total Drop    DropTime                    
------------------  -------------  --------------  ---------  ---------  ---------     ----------    ----------------------------
arp                 1              512             0          0          0             0                                         
bfd                 6              1000            0          0          0             0                                         
bgp                 4              128             0          0          0             0                                         
bgpv6               4              128             0          0          0             0                                         
bpdu                6              128             0          0          0             0                                         
cdp                 5              256             0          0          0             0                                         
dhcp-relay-c        2              512             0          0          0             0                                         
dhcp-relay-s        2              512             0          0          0             0                                         
dhcp6-client        2              512             0          0          0             0                                         
dhcp6-relay         2              512             0          0          0             0                                         
dhcp6-server        2              512             0          0          0             0                                         
dhcps               2              512             0          0          0             0                                         
dhcps6              2              512             0          0          0             0                                         
dldp                6              400             0          0          0             0                                         
dns-client          3              200             0          0          0             0                                         
dns-server          3              200             0          0          0             0                                         
dot1x               2              512             0          0          0             0                                         
erps                5              128             0          0          0             0                                         
gvrp                5              128             0          0          0             0                                         
hop-limit           0              512             0          0          0             0                                         
icmp                3              800             0          0          0             0                                         
igmp                2              512             0          0          0             0                                         
ip-option           0              400             0          0          0             0                                         
ip-option6          0              400             0          0          0             0                                         
isis                4              512             0          0          0             0                                         
l3mtu-fail          0              100             0          0          0             0                                         
lacp                5              256             0          0          0             0                                         
lldp                5              256             0          0          0             0                                         
local-ipv4          3              1100            0          0          0             0                                         
local-ipv6          3              800             0          0          0             0                                         
mac-move            0              128             0          0          0             0                                         
mgmt                -              2000            1          0          2500013       0                                         
mld                 2              512             0          0          0             0                                         
nd-snp-ns-na        1              400             0          0          0             0                                         
nd-snp-ra-redirect  1              128             0          0          0             0                                         
nd-snp-rs           1              128             0          0          0             0                                         
ndsnp               1              400             0          0          0             0                                         
ospf                4              512             0          0          0             0                                         
ospf3               4              512             0          0          0             0                                         
other               0              512             0          0          0             0                                         
pim                 4              128             0          0          0             0                                         
pimv6               4              128             0          0          0             0                                         
reup                5              128             0          0          0             0                                         
rip                 4              128             0          0          0             0                                         
ripng               4              128             0          0          0             0                                         
rldp                5              128             0          0          0             0                                         
rt-host             4              256             0          0          0             0                                         
rt-hostv6           4              256             0          0          0             0                                         
sdn                 0              512             0          0          0             0                                         
sflow               0              512             0          0          0             0                                         
snmp                3              1100            0          0          0             0                                         
ssh                 3              1100            0          0          0             0                                         
tcp-syn             3              1000            0          0          0             0                                         
telnet              3              1100            0          0          0             0                                         
ttl0                0              128             0          0          0             0                                         
ttl1                0              512             0          0          0             0                                         
tunnel-bpdu         2              128             0          0          0             0                                         
tunnel-gvrp         2              128             0          0          0             0                                         
udp-flood           3              0               0          0          0             0                                         
unknown-v4mc        1              128             0          0          0             0                                         
unknown-v6mc        1              128             0          0          0             0                                         
v4uc-route          1              400             0          0          0             0                                         
v6uc-route          1              200             0          0          0             0                                         
vrrp                6              128             0          0          0             0                                         
vrrpv6              6              128             0          0          0             0                                         
web-auth            2              800             0          0          0             0                                         
xgv-ipmc            2              128             0          0          0             0                                         
xgv6-ipmc           1              128             0          0          0             0                                         
S5750#    
S5750#
S5750#

        Returns:
{"nd-snp-rs/Total Drop": "0"
"dhcp6-server/Drop(pps)": "0"
"mac-move/Total Drop": "0"
"bgp/Total": "0"
"hop-limit/Traffic-class": "0"
"dns-server/Traffic-class": "3"
"tunnel-gvrp/Traffic-class": "2"
"unknown-v6mc/DropTime": ""
"ospf3/Drop(pps)": "0"
"dhcp-relay-s/Drop(pps)": "0"
"unknown-v6mc/Traffic-class": "1"
"l3mtu-fail/Rate(pps)": "0"
"web-auth/DropTime": ""
"udp-flood/Rate(pps)": "0"
"v6uc-route/Drop(pps)": "0"
"hop-limit/Total Drop": "0"
"icmp/Rate(pps)": "0"
"ttl0/Bandwidth(pps)": "128"
"ttl0/Rate(pps)": "0"
"udp-flood/Drop(pps)": "0"
"nd-snp-ns-na/DropTime": ""
"rt-hostv6/Drop(pps)": "0"
"unknown-v6mc/Rate(pps)": "0"
"web-auth/Drop(pps)": "0"
"ip-option6/Drop(pps)": "0"
"cdp/Total": "0"
"dns-client/Total Drop": "0"
"ndsnp/Traffic-class": "1"
"ttl0/Drop(pps)": "0"
"lacp/Total": "0"
"erps/DropTime": ""
"reup/Rate(pps)": "0"
"rip/Bandwidth(pps)": "128"
"bfd/Drop(pps)": "0"
"dot1x/Total": "0"
"dhcp6-client/Total Drop": "0"
"other/Total": "0"
"lacp/Drop(pps)": "0"
"igmp/Total Drop": "0"
"v6uc-route/Rate(pps)": "0"
"dhcps/Bandwidth(pps)": "512"
"mld/Bandwidth(pps)": "512"
"hop-limit/DropTime": ""
"tcp-syn/Total": "0"
"sdn/Bandwidth(pps)": "512"
"2/Drop(pps)": "0"
"sdn/DropTime": ""
"nd-snp-ra-redirect/Traffic-class": "1"
"rip/Drop(pps)": "0"
"lldp/Rate(pps)": "0"
"2/Rate(pps)": "0"
"arp/Traffic-class": "1"
"lacp/DropTime": ""
"ripng/Total Drop": "0"
"ip-option/Total Drop": "0"
"nd-snp-rs/DropTime": ""
"ripng/Rate(pps)": "0"
"rldp/Drop(pps)": "0"
"ospf/DropTime": ""
"dhcps/Rate(pps)": "0"
"pim/Drop(pps)": "0"
"dhcp-relay-c/DropTime": ""
"ip-option6/Total": "0"
"tunnel-bpdu/Rate(pps)": "0"
"S5750#/Drop(pps)": ""
"dhcp-relay-c/Traffic-class": "2"
"tunnel-bpdu/DropTime": ""
"tcp-syn/DropTime": ""
"hop-limit/Drop(pps)": "0"
"1/Bandwidth(pps)": "1500"
"sdn/Total": "0"
"arp/Total Drop": "0"
"rip/Total Drop": "0"
"unknown-v4mc/Bandwidth(pps)": "128"
"dns-server/Rate(pps)": "0"
"unknown-v4mc/Total Drop": "0"
"dhcp6-server/Total Drop": "0"
"sdn/Total Drop": "0"
"snmp/Bandwidth(pps)": "1100"
"tcp-syn/Total Drop": "0"
"mld/Total": "0"
"ssh/DropTime": ""
"bgp/Traffic-class": "4"
"ripng/DropTime": ""
"v4uc-route/Total": "0"
"other/Rate(pps)": "0"
"tunnel-bpdu/Traffic-class": "2"
"bfd/DropTime": ""
"mac-move/Traffic-class": "0"
"snmp/Total Drop": "0"
"hop-limit/Bandwidth(pps)": "512"
"ttl0/Total Drop": "0"
"xgv-ipmc/DropTime": ""
"dns-client/DropTime": ""
"rt-hostv6/Traffic-class": "4"
"gvrp/Rate(pps)": "0"
"isis/Rate(pps)": "0"
"sflow/Drop(pps)": "0"
"cdp/DropTime": ""
"ospf/Total Drop": "0"
"icmp/Total Drop": "0"
"rldp/Total Drop": "0"
"dhcps6/Bandwidth(pps)": "512"
"telnet/Bandwidth(pps)": "1100"
"5/Rate(pps)": "0"
"rldp/DropTime": ""
"dhcps6/Total": "0"
"reup/Bandwidth(pps)": "128"
"gvrp/DropTime": ""
"cdp/Traffic-class": "5"
"tunnel-bpdu/Total": "0"
"arp/Bandwidth(pps)": "512"
"dldp/Total Drop": "0"
"dns-client/Total": "0"
"bgp/Rate(pps)": "0"
"xgv6-ipmc/Traffic-class": "1"
"sflow/Total": "0"
"1/Drop(pps)": "0"
"dns-client/Traffic-class": "3"
"tunnel-gvrp/Rate(pps)": "0"
"dns-client/Bandwidth(pps)": "200"
"6/Drop(pps)": "0"
"local-ipv6/DropTime": ""
"S5750#/Total Drop": ""
"dhcp6-client/Traffic-class": "2"
"ripng/Traffic-class": "4"
"dhcp6-client/DropTime": ""
"rip/Rate(pps)": "0"
"ip-option/Drop(pps)": "0"
"dhcp6-client/Drop(pps)": "0"
"ssh/Bandwidth(pps)": "1100"
"3/Drop(pps)": "0"
"bgp/DropTime": ""
"pimv6/Traffic-class": "4"
"ip-option6/Total Drop": "0"
"S5750#/DropTime": ""
"tcp-syn/Rate(pps)": "0"
"dhcp6-relay/Rate(pps)": "0"
"icmp/Total": "0"
"ospf3/Total Drop": "0"
"pim/Rate(pps)": "0"
"ip-option/Bandwidth(pps)": "400"
"dhcp6-client/Total": "0"
"local-ipv4/Drop(pps)": "0"
"lldp/DropTime": ""
"rt-hostv6/Bandwidth(pps)": "256"
"dhcp6-server/Bandwidth(pps)": "512"
"ssh/Drop(pps)": "0"
"xgv6-ipmc/Drop(pps)": "0"
"local-ipv6/Rate(pps)": "0"
"ip-option6/Traffic-class": "0"
"rldp/Rate(pps)": "0"
"ospf/Total": "0"
"dns-server/Total Drop": "0"
"dns-server/Drop(pps)": "0"
"dldp/Rate(pps)": "0"
"dhcp6-server/Total": "0"
"dhcp6-server/DropTime": ""
"arp/Drop(pps)": "0"
"dot1x/DropTime": ""
"lacp/Total Drop": "0"
"ndsnp/Bandwidth(pps)": "400"
"web-auth/Rate(pps)": "0"
"cdp/Drop(pps)": "0"
"local-ipv6/Bandwidth(pps)": "800"
"vrrpv6/Rate(pps)": "0"
"dhcp-relay-c/Total": "0"
"web-auth/Total Drop": "0"
"0/Drop(pps)": "0"
"0/Rate(pps)": "0"
"rt-hostv6/Total Drop": "0"
"unknown-v4mc/Total": "0"
"local-ipv6/Traffic-class": "3"
"tcp-syn/Drop(pps)": "0"
"5/Drop(pps)": "0"
"snmp/Rate(pps)": "0"
"3/Bandwidth(pps)": "1500"
"igmp/Drop(pps)": "0"
"lacp/Rate(pps)": "0"
"bgp/Drop(pps)": "0"
"mld/DropTime": ""
"dot1x/Drop(pps)": "0"
"rldp/Total": "0"
"dot1x/Total Drop": "0"
"sflow/Traffic-class": "0"
"rt-host/Traffic-class": "4"
"local-ipv4/Bandwidth(pps)": "1100"
"lldp/Total": "0"
"telnet/Traffic-class": "3"
"ospf3/Rate(pps)": "0"
"bfd/Bandwidth(pps)": "1000"
"tunnel-gvrp/Total Drop": "0"
"ospf3/Bandwidth(pps)": "512"
"ripng/Drop(pps)": "0"
"lacp/Bandwidth(pps)": "256"
"ip-option6/Bandwidth(pps)": "400"
"dhcp6-relay/Total": "0"
"dhcp-relay-s/Traffic-class": "2"
"nd-snp-ns-na/Traffic-class": "1"
"rldp/Bandwidth(pps)": "128"
"unknown-v4mc/Drop(pps)": "0"
"Packet Type_list": ["arp"
"bfd"
"bgp"
"bgpv6"
"bpdu"
"cdp"
"dhcp-relay-c"
"dhcp-relay-s"
"dhcp6-client"
"dhcp6-relay"
"dhcp6-server"
"dhcps"
"dhcps6"
"dldp"
"dns-client"
"dns-server"
"dot1x"
"erps"
"gvrp"
"hop-limit"
"icmp"
"igmp"
"ip-option"
"ip-option6"
"isis"
"l3mtu-fail"
"lacp"
"lldp"
"local-ipv4"
"local-ipv6"
"mac-move"
"mgmt"
"mld"
"nd-snp-ns-na"
"nd-snp-ra-redirect"
"nd-snp-rs"
"ndsnp"
"ospf"
"ospf3"
"other"
"pim"
"pimv6"
"reup"
"rip"
"ripng"
"rldp"
"rt-host"
"rt-hostv6"
"sdn"
"sflow"
"snmp"
"ssh"
"tcp-syn"
"telnet"
"ttl0"
"ttl1"
"tunnel-bpdu"
"tunnel-gvrp"
"udp-flood"
"unknown-v4mc"
"unknown-v6mc"
"v4uc-route"
"v6uc-route"
"vrrp"
"vrrpv6"
"web-auth"
"xgv-ipmc"
"xgv6-ipmc"
"S5750#"], "pimv6/Drop(pps)": "0"
"isis/Total": "0"
"ndsnp/Drop(pps)": "0"
"xgv-ipmc/Total": "0"
"v6uc-route/Total Drop": "0"
"dhcp6-relay/Drop(pps)": "0"
"rt-hostv6/DropTime": ""
"l3mtu-fail/Bandwidth(pps)": "100"
"tcp-syn/Bandwidth(pps)": "1000"
"hop-limit/Rate(pps)": "0"
"isis/DropTime": ""
"dhcp-relay-s/Rate(pps)": "0"
"icmp/Drop(pps)": "0"
"mgmt/Total Drop": "0"
"unknown-v4mc/DropTime": ""
"pim/Bandwidth(pps)": "128"
"ripng/Total": "0"
"rt-host/Rate(pps)": "0"
"pim/Traffic-class": "4"
"dns-client/Rate(pps)": "0"
"isis/Drop(pps)": "0"
"l3mtu-fail/DropTime": ""
"tunnel-gvrp/Bandwidth(pps)": "128"
"xgv6-ipmc/Total": "0"
"bgpv6/Traffic-class": "4"
"vrrp/Total": "0"
"ttl1/Rate(pps)": "0"
"S5750#/Traffic-class": ""
"udp-flood/DropTime": ""
"pim/Total": "0"
"pimv6/Total Drop": "0"
"dhcps/Drop(pps)": "0"
"dldp/Drop(pps)": "0"
"pim/Total Drop": "0"
"ospf3/Total": "0"
"icmp/Bandwidth(pps)": "800"
"unknown-v6mc/Bandwidth(pps)": "128"
"arp/Total": "0"
"igmp/Rate(pps)": "0"
"ttl0/Total": "0"
"igmp/Bandwidth(pps)": "512"
"nd-snp-ra-redirect/DropTime": ""
"vrrpv6/Bandwidth(pps)": "128"
"nd-snp-ra-redirect/Drop(pps)": "0"
"nd-snp-ns-na/Total": "0"
"nd-snp-ns-na/Drop(pps)": "0"
"l3mtu-fail/Total Drop": "0"
"ip-option/Total": "0"
"cdp/Rate(pps)": "0"
"ip-option/Rate(pps)": "0"
"xgv6-ipmc/Bandwidth(pps)": "128"
"dhcp6-relay/DropTime": ""
"mgmt/Rate(pps)": "1"
"ttl0/Traffic-class": "0"
"isis/Total Drop": "0"
"lldp/Bandwidth(pps)": "256"
"bgpv6/Bandwidth(pps)": "128"
"mac-move/Total": "0"
"unknown-v6mc/Drop(pps)": "0"
"nd-snp-ra-redirect/Bandwidth(pps)": "128"
"cdp/Total Drop": "0"
"other/DropTime": ""
"local-ipv6/Drop(pps)": "0"
"dhcps/Total Drop": "0"
"dhcp6-relay/Traffic-class": "2"
"pimv6/Total": "0"
"S5750#/Bandwidth(pps)": ""
"xgv6-ipmc/Total Drop": "0"
"rt-host/Bandwidth(pps)": "256"
"unknown-v6mc/Total": "0"
"tunnel-gvrp/DropTime": ""
"vrrp/Rate(pps)": "0"
"local-ipv4/Total": "0"
"udp-flood/Total Drop": "0"
"isis/Bandwidth(pps)": "512"
"udp-flood/Bandwidth(pps)": "0"
"mld/Rate(pps)": "0"
"bfd/Traffic-class": "6"
"igmp/Total": "0"
"local-ipv4/DropTime": ""
"%cpu port bandwidth": "4500(pps)"
"pim/DropTime": ""
"other/Drop(pps)": "0"
"dhcps6/Traffic-class": "2"
"dot1x/Rate(pps)": "0"
"dhcps/Total": "0"
"dhcp-relay-c/Bandwidth(pps)": "512"
"ospf/Rate(pps)": "0"
"snmp/Total": "0"
"igmp/Traffic-class": "2"
"telnet/Rate(pps)": "0"
"unknown-v4mc/Traffic-class": "1"
"other/Bandwidth(pps)": "512"
"ip-option/Traffic-class": "0"
"v6uc-route/Total": "0"
"dhcps6/Total Drop": "0"
"dns-client/Drop(pps)": "0"
"bfd/Total Drop": "0"
"v4uc-route/Drop(pps)": "0"
"xgv-ipmc/Total Drop": "0"
"igmp/DropTime": ""
"dhcps6/Rate(pps)": "0"
"ssh/Total Drop": "0"
"sflow/Bandwidth(pps)": "512"
"sdn/Traffic-class": "0"
"local-ipv6/Total Drop": "0"
"4/Bandwidth(pps)": "1500"
"erps/Drop(pps)": "0"
"reup/Total Drop": "0"
"snmp/Drop(pps)": "0"
"tunnel-bpdu/Drop(pps)": "0"
"rt-host/Drop(pps)": "0"
"ttl1/Bandwidth(pps)": "512"
"bpdu/Traffic-class": "6"
"ospf/Traffic-class": "4"
"snmp/DropTime": ""
"tunnel-gvrp/Drop(pps)": "0"
"dldp/Total": "0"
"l3mtu-fail/Drop(pps)": "0"
"sflow/Total Drop": "0"
"v4uc-route/Total Drop": "0"
"rip/DropTime": ""
"bgpv6/Total Drop": "0"
"lldp/Drop(pps)": "0"
"vrrpv6/Total": "0"
"dldp/Traffic-class": "6"
"vrrp/DropTime": ""
"reup/Drop(pps)": "0"
"dns-server/DropTime": ""
"dhcp-relay-c/Drop(pps)": "0"
"6/Bandwidth(pps)": "1500"
"v4uc-route/Rate(pps)": "0"
"bpdu/DropTime": ""
"telnet/Drop(pps)": "0"
"rt-host/Total": "0"
"web-auth/Bandwidth(pps)": "800"
"dot1x/Traffic-class": "2"
"dhcps6/DropTime": ""
"dldp/Bandwidth(pps)": "400"
"dhcp-relay-c/Rate(pps)": "0"
"xgv-ipmc/Rate(pps)": "0"
"tcp-syn/Traffic-class": "3"
"dhcps6/Drop(pps)": "0"
"7/Drop(pps)": "0"
"v6uc-route/Bandwidth(pps)": "200"
"reup/Total": "0"
"v6uc-route/DropTime": ""
"mac-move/DropTime": ""
"tunnel-bpdu/Total Drop": "0"
"nd-snp-ns-na/Total Drop": "0"
"ttl1/Total Drop": "0"
"ndsnp/Total Drop": "0"
"ospf/Drop(pps)": "0"
"bgp/Total Drop": "0"
"bpdu/Rate(pps)": "0"
"icmp/DropTime": ""
"bgpv6/Drop(pps)": "0"
"arp/DropTime": ""
"vrrp/Bandwidth(pps)": "128"
"telnet/DropTime": ""
"lldp/Total Drop": "0"
"S5750#/Rate(pps)": ""
"ripng/Bandwidth(pps)": "128"
"bfd/Rate(pps)": "0"
"nd-snp-rs/Traffic-class": "1"
"v4uc-route/Bandwidth(pps)": "400"
"xgv-ipmc/Traffic-class": "2"
"dhcp-relay-s/Total Drop": "0"
"ttl0/DropTime": ""
"tunnel-bpdu/Bandwidth(pps)": "128"
"dhcp-relay-s/Bandwidth(pps)": "512"
"ttl1/Drop(pps)": "0"
"nd-snp-rs/Drop(pps)": "0"
"ip-option/DropTime": ""
"rldp/Traffic-class": "5"
"bpdu/Bandwidth(pps)": "128"
"ndsnp/DropTime": ""
"3/Rate(pps)": "0"
"1/Rate(pps)": "0"
"dhcp6-server/Rate(pps)": "0"
"icmp/Traffic-class": "3"
"pimv6/Rate(pps)": "0"
"mac-move/Drop(pps)": "0"
"rt-host/DropTime": ""
"vrrpv6/Drop(pps)": "0"
"ndsnp/Rate(pps)": "0"
"mgmt/Bandwidth(pps)": "2000"
"rip/Traffic-class": "4"
"bpdu/Total Drop": "0"
"dhcp6-server/Traffic-class": "2"
"arp/Rate(pps)": "0"
"gvrp/Drop(pps)": "0"
"erps/Rate(pps)": "0"
"mac-move/Rate(pps)": "0"
"mld/Drop(pps)": "0"
"unknown-v4mc/Rate(pps)": "0"
"gvrp/Total": "0"
"dhcp6-client/Rate(pps)": "0"
"local-ipv4/Rate(pps)": "0"
"mac-move/Bandwidth(pps)": "128"
"ospf3/DropTime": ""
"udp-flood/Total": "0"
"rip/Total": "0"
"cdp/Bandwidth(pps)": "256"
"web-auth/Traffic-class": "2"
"lacp/Traffic-class": "5"
"unknown-v6mc/Total Drop": "0"
"mgmt/DropTime": ""
"bgp/Bandwidth(pps)": "128"
"S5750#/Total": ""
"snmp/Traffic-class": "3"
"bgpv6/Rate(pps)": "0"
"nd-snp-ra-redirect/Rate(pps)": "0"
"mld/Traffic-class": "2"
"reup/DropTime": ""
"ttl1/DropTime": ""
"dns-server/Bandwidth(pps)": "200"
"dhcps/DropTime": ""
"4/Rate(pps)": "0"
"vrrpv6/DropTime": ""
"other/Traffic-class": "0"
"vrrp/Traffic-class": "6"
"nd-snp-rs/Bandwidth(pps)": "128"
"local-ipv4/Traffic-class": "3"
"v6uc-route/Traffic-class": "1"
"0/Bandwidth(pps)": "1500"
"ip-option6/DropTime": ""
"other/Total Drop": "0"
"l3mtu-fail/Total": "0"
"6/Rate(pps)": "0"
"hop-limit/Total": "0"
"7/Bandwidth(pps)": "2000"
"xgv6-ipmc/DropTime": ""
"sflow/Rate(pps)": "0"
"bpdu/Total": "0"
"dhcp-relay-c/Total Drop": "0"
"rt-hostv6/Rate(pps)": "0"
"isis/Traffic-class": "4"
"bgpv6/DropTime": ""
"telnet/Total": "0"
"rt-host/Total Drop": "0"
"gvrp/Bandwidth(pps)": "128"
"ip-option6/Rate(pps)": "0"
"nd-snp-rs/Total": "0"
"l3mtu-fail/Traffic-class": "0"
"dns-server/Total": "0"
"dhcp6-relay/Bandwidth(pps)": "512"
"ndsnp/Total": "0"
"tunnel-gvrp/Total": "0"
"nd-snp-ra-redirect/Total Drop": "0"
"dot1x/Bandwidth(pps)": "512"
"v4uc-route/Traffic-class": "1"
"dldp/DropTime": ""
"pimv6/Bandwidth(pps)": "128"
"mld/Total Drop": "0"
"dhcp-relay-s/DropTime": ""
"dhcp6-relay/Total Drop": "0"
"rt-hostv6/Total": "0"
"vrrpv6/Total Drop": "0"
"bgpv6/Total": "0"
"xgv6-ipmc/Rate(pps)": "0"
"ospf3/Traffic-class": "4"
"erps/Bandwidth(pps)": "128"
"v4uc-route/DropTime": ""
"4/Drop(pps)": "0"
"dhcp6-client/Bandwidth(pps)": "512"
"lldp/Traffic-class": "5"
"bpdu/Drop(pps)": "0"
"erps/Traffic-class": "5"
"mgmt/Traffic-class": "-"
"gvrp/Total Drop": "0"
"nd-snp-ns-na/Rate(pps)": "0"
"vrrp/Drop(pps)": "0"
"mgmt/Drop(pps)": "0"
"vrrpv6/Traffic-class": "6"
"dhcps/Traffic-class": "2"
"telnet/Total Drop": "0"
"sflow/DropTime": ""
"erps/Total": "0"
"reup/Traffic-class": "5"
"local-ipv6/Total": "0"
"pimv6/DropTime": ""
"ssh/Traffic-class": "3"
"nd-snp-ra-redirect/Total": "0"
"erps/Total Drop": "0"
"ttl1/Traffic-class": "0"
"ssh/Rate(pps)": "0"
"web-auth/Total": "0"
"2/Bandwidth(pps)": "1500"
"gvrp/Traffic-class": "5"
"vrrp/Total Drop": "0"
"dhcp-relay-s/Total": "0"
"sdn/Rate(pps)": "0"
"Traffic-class_list": ["0"
"1"
"2"
"3"
"4"
"5"
"6"
"7"], "mgmt/Total": "2500013"
"7/Rate(pps)": "0"
"local-ipv4/Total Drop": "0"
"5/Bandwidth(pps)": "1500"
"xgv-ipmc/Drop(pps)": "0"
"ttl1/Total": "0"
"ssh/Total": "0"
"ospf/Bandwidth(pps)": "512"
"nd-snp-rs/Rate(pps)": "0"
"udp-flood/Traffic-class": "3"
"nd-snp-ns-na/Bandwidth(pps)": "400"
"xgv-ipmc/Bandwidth(pps)": "128"
"bfd/Total": "0"
"sdn/Drop(pps)": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show cpu-protect device <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(str(show_info).replace("\t"," "))
        show_list1 = []
        show_list2 = []
        flag = 0
        for value in show_info_list:
            if "Packet Type" in value:
                flag = 1
            if flag == 0 :
                show_list1.append(value)
            else:
                show_list2.append(value)
        show_info_1 = "\n".join(show_list1)
        show_info_2 = "\n".join(show_list2)
        dict_value1 = self.dut_show_autoget_whippletree_form_analysis(show_info_1,"Traffic-class",ago_colon_last_str=1)
        dict_value2 = self.dut_show_autoget_whippletree_form_analysis(show_info_2, "Packet Type")
        return dict(dict_value1.items()+dict_value2.items())
    def dut_get_show_cpuprotect_slot_num(self,show_info):
        return self.dut_get_show_cpuprotect_device_num(show_info)
    def dut_get_show_interface_virtualaccess_num(self,show_info):
        """
        Function:show interface virtual-access <num>回显解析函数
        CLI命令:show interface virtual-access <num>
        回显信息示例:
12DUT1#show int virtual-access 0
Index(dec):17 (hex):11
virtual-access 0 is UP  , line protocol is UP    
Hardware is  virtual-access
Interface address is:  unnumbered,using address of Loopback 0 (1.1.1.1/24)
  MTU 1500 bytes, BW 100000 Kbit
  Encapsulation protocol is PPP, loopback not set
  Keepalive interval is 10 sec ,retries 10.
  Carrier delay is 0 sec
  Rxload is 1/255, Txload is 1/255
  LCP Open
  Open: ipcp
  Queueing strategy: FIFO
    Output queue 0/40, 0 drops;
    Input queue 0/75, 0 drops
  5 minutes input rate 1006 bits/sec, 0 packets/sec
  5 minutes output rate 102 bits/sec, 0 packets/sec
    289 packets input, 22858 bytes, 0 no buffer, 0 dropped
    Received 0 broadcasts, 0 runts, 0 giants
    0 input errors, 0 CRC, 0 frame, 0 overrun, 0 abort
    36 packets output, 2337 bytes, 0 underruns , 0 dropped
    0 output errors, 0 collisions, 0 interface resets

        Returns:
{'Carrier delay': '0 sec'
'Rxload': '1/255'
'Queueing strategy': 'FIFO'
'Txload': '1/255'
'Encapsulation protocol': 'PPP'
'0 coll': 'ions'
'packets input': '289'
'virtual-access 0': 'UP'
'5 minutes input rate/packets/sec': '0'
'packets input/no buffer': '0'
'Hardware': 'virtual-access'
'Keepalive interval': '10 sec'
'5 minutes input rate/bits/sec': '1006'
'5 minutes output rate/bits/sec': '102'
'packets input/dropped': '0'
'5 minutes output rate/packets/sec': '0'
'Open': 'ipcp'
'Index(dec)': '17 (hex)'
'Interface address': 'unnumbered'
'packets input/bytes': '22858'
'line protocol': 'UP'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interface virtual-access <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        for value in show_list:
            value = value.strip()
            if "is" in value:
                if "," in value :
                    list1 = value.split(",")
                    for list1_value in list1 :
                        if "is" in list1_value:
                            list2 = list1_value.split("is")
                            dict_value[list2[0].strip()] = list2[1].strip(":").strip()
                else:
                    list2 = value.split("is")
                    dict_value[list2[0].strip()] = list2[1].strip()
            elif ":" in value:
                list2 = value.split(":")
                dict_value[list2[0].strip()] = list2[1].strip()
            elif re.match(u"5 minutes input rate (\d+) bits/sec, (\d+) packets/sec",value):
                obj1 = re.match(u"5 minutes input rate (\d+) bits/sec, (\d+) packets/sec",value)
                dict_value["5 minutes input rate/bits/sec"] =obj1.group(1).strip()
                dict_value["5 minutes input rate/packets/sec"] = obj1.group(2).strip()
            elif re.match(u"5 minutes output rate (\d+) bits/sec, (\d+) packets/sec",value):
                obj1 = re.match(u"5 minutes output rate (\d+) bits/sec, (\d+) packets/sec",value)
                dict_value["5 minutes output rate/bits/sec"] =obj1.group(1).strip()
                dict_value["5 minutes output rate/packets/sec"] = obj1.group(2).strip()
            elif re.match(u"(\d+) packets input, (\d+) bytes, (\d+) no buffer, (\d+) dropped",value):
                obj1 = re.match(u"(\d+) packets input, (\d+) bytes, (\d+) no buffer, (\d+) dropped",value)
                dict_value["packets input"] = obj1.group(1).strip()
                dict_value["packets input/bytes"] = obj1.group(2).strip()
                dict_value["packets input/no buffer"] = obj1.group(3).strip()
                dict_value["packets input/dropped"] = obj1.group(4).strip()
            elif re.match(u"(\d+) packets output, (\d+) bytes, (\d+) underruns, (\d+) dropped",value):
                obj1 = re.match(u"(\d+) packets output, (\d+) bytes, (\d+) underruns, (\d+) dropped",value)
                dict_value["packets output"] = obj1.group(1).strip()
                dict_value["packets output/bytes"] = obj1.group(2).strip()
                dict_value["packets output/underruns"] = obj1.group(3).strip()
                dict_value["packets output/dropped"] = obj1.group(4).strip()
        return dict_value
    def dut_get_show_cpuprotect_hardwarestatistics_device_num_slot_num(self,show_info):
        """
        Function:show cpu-protect hardware-statistics device <num> slot <num>回显解析函数
        CLI命令:show cpu-protect hardware-statistics device <num> slot <num>
        回显信息示例:
Ruijie#show cpu-protect hardware-statistics device 1 slot 4
Packet Type             Rate(pps)  Drop(pps)  Total         Total Drop    DropTime          
----------------------  ---------  ---------  ---------     ----------    ----------------------------
arp                     0          0          19            0                                         
arp-auth-proxy          0          0          0             0                                         
bfd                     0          0          0             0                                         
bgp                     0          0          0             0                                         
bgpv6                   0          0          0             0                                         
bpdu                    0          0          0             0                                         
cdp                     0          0          0             0                                         
cfm                     0          0          0             0                                         
dhcp-relay-c            0          0          0             0                                         
dhcp-relay-s            0          0          0             0                                         
dhcp6-client            0          0          0             0                                         
dhcp6-relay             0          0          0             0                                         
dhcp6-server            0          0          0             0                                         
dhcps                   0          0          0             0                                         
dhcps6                  0          0          0             0                                         
dldp                    0          0          0             0                                         
dns-client              0          0          0             0                                         
dns-server              0          0          0             0                                         
dot1x                   0          0          0             0                                         
dvmrp                   0          0          0             0                                         
efm                     0          0          0             0                                         
erps                    0          0          0             0                                         
fcoe-fip                0          0          0             0                                         
fcoe-local              0          0          0             0                                         
fpga-cfg                0          0          0             0                                         
fpga-notify             0          0          0             0                                         
gvrp                    0          0          0             0                                         
hop-limit               0          0          0             0                                         
icmp                    0          0          0             0                                         
igmp                    0          0          0             0                                         
igmp-drop               0          0          0             0                                         
ip-option               0          0          0             0                                         
ip-option6              0          0          0             0                                         
ipfix                   0          0          0             0                                         
ipv6-all                0          0          0             0                                         
isis                    0          0          18            0                                         
l3mtu-fail              0          0          0             0                                         
lacp                    0          0          0             0                                         
lldp                    0          0          0             0                                         
local-ipv4              0          0          0             0                                         
local-ipv6              0          0          0             0                                         
mac-move                0          0          0             0                                         
madp                    0          0          0             0                                         
mgmt                    0          0          0             0                                         
mlag                    0          0          0             0                                         
mld                     0          0          0             0                                         
mld-drop                0          0          0             0                                         
mpls-ctrl               0          0          0             0                                         
mpls-ctrl-v6            0          0          0             0                                         
mpls-ttl0               0          0          0             0                                         
mpls-ttl1               0          0          0             0                                         
nacm-drop               0          0          0             0                                         
nd-non-snp              0          0          0             0                                         
nd-snp-ns-na            0          0          0             0                                         
nd-snp-ns-na-l3         0          0          0             0                                         
nd-snp-ra-redirect      0          0          0             0                                         
nd-snp-ra-redirect-l3   0          0          0             0                                         
nd-snp-rs               0          0          0             0                                         
nd-snp-rs-l3            0          0          0             0                                         
nd-vxlan                0          0          0             0                                         
ndsnp                   0          0          0             0                                         
option82                0          0          0             0                                         
ospf                    1          0          64            0                                         
ospf3                   0          0          17            0                                         
other                   0          0          0             0                                         
pim                     0          0          0             0                                         
pimv6                   0          0          0             0                                         
rerp                    0          0          0             0                                         
reup                    0          0          0             0                                         
rip                     0          0          0             0                                         
ripng                   0          0          20            0                                         
rldp                    0          0          0             0                                         
rt-host                 0          0          0             0                                         
rt-hostv6               0          0          0             0                                         
sbfd                    0          0          0             0                                         
sdn                     0          0          0             0                                         
sflow                   0          0          0             0                                         
snmp                    0          0          0             0                                         
ssh                     0          0          0             0                                         
stargv-ipmc             0          0          0             0                                         
stargv6-ipmc            0          0          0             0                                         
tcp-syn                 0          0          0             0                                         
telnet                  0          0          0             0                                         
tpp                     0          0          0             0                                         
trill                   0          0          0             0                                         
trill-isis              0          0          0             0                                         
trill-local             0          0          0             0                                         
trill-oam               0          0          0             0                                         
ttl0                    0          0          0             0                                         
ttl1                    0          0          0             0                                         
tunnel-bpdu             0          0          0             0                                         
tunnel-gvrp             0          0          0             0                                         
udp-flood               0          0          0             0                                         
unknown-v4mc            0          0          0             0                                         
unknown-v6mc            0          0          0             0                                         
v4uc-route              0          0          0             0                                         
v6uc-route              0          0          0             0                                         
vrrp                    0          0          0             0                                         
vrrpv6                  0          0          0             0                                         
web-auth                0          0          0             0                                         
xgv-ipmc                0          0          0             0                                         
xgv6-ipmc               0          0          0             0

        Returns:
{"stargv6-ipmc/Total": "0"
"nd-non-snp/Total Drop": "0"
"nd-snp-rs/Total Drop": "0"
"dhcp6-server/Drop(pps)": "0"
"mac-move/Total Drop": "0"
"stargv-ipmc/DropTime": ""
"unknown-v6mc/DropTime": ""
"ospf3/Drop(pps)": "0"
"cfm/Total": "0"
"dhcp-relay-s/Drop(pps)": "0"
"tpp/DropTime": ""
"efm/DropTime": ""
"trill-oam/Total Drop": "0"
"l3mtu-fail/Rate(pps)": "0"
"web-auth/DropTime": ""
"udp-flood/Rate(pps)": "0"
"v6uc-route/Drop(pps)": "0"
"web-auth/Total Drop": "0"
"hop-limit/Total Drop": "0"
"icmp/Rate(pps)": "0"
"mpls-ctrl-v6/Total Drop": "0"
"mld-drop/Total Drop": "0"
"nd-snp-ra-redirect-l3/DropTime": ""
"ttl0/Rate(pps)": "0"
"udp-flood/Drop(pps)": "0"
"nd-snp-ns-na/DropTime": ""
"rt-hostv6/Drop(pps)": "0"
"stargv-ipmc/Rate(pps)": "0"
"unknown-v6mc/Rate(pps)": "0"
"web-auth/Drop(pps)": "0"
"ip-option6/Drop(pps)": "0"
"cdp/Total": "0"
"dns-client/Total Drop": "0"
"ttl0/Drop(pps)": "0"
"erps/DropTime": ""
"reup/Rate(pps)": "0"
"bfd/Drop(pps)": "0"
"efm/Drop(pps)": "0"
"dot1x/Total": "0"
"dhcp6-client/Total Drop": "0"
"other/Total": "0"
"nd-snp-ra-redirect-l3/Total Drop": "0"
"stargv6-ipmc/Rate(pps)": "0"
"lacp/Drop(pps)": "0"
"nd-snp-rs-l3/Drop(pps)": "0"
"igmp/Total Drop": "0"
"v6uc-route/Rate(pps)": "0"
"ipfix/DropTime": ""
"fcoe-fip/Rate(pps)": "0"
"hop-limit/DropTime": ""
"tcp-syn/Total": "0"
"madp/DropTime": ""
"fpga-cfg/DropTime": ""
"mlag/Total Drop": "0"
"ospf/Rate(pps)": "1"
"trill-local/Drop(pps)": "0"
"sdn/DropTime": ""
"rip/Drop(pps)": "0"
"lldp/Rate(pps)": "0"
"trill/Total Drop": "0"
"ripng/Total Drop": "0"
"ip-option/Total Drop": "0"
"nd-snp-rs/DropTime": ""
"rerp/Drop(pps)": "0"
"ripng/Rate(pps)": "0"
"stargv6-ipmc/DropTime": ""
"rldp/Drop(pps)": "0"
"cfm/Rate(pps)": "0"
"dhcps/Rate(pps)": "0"
"fcoe-local/Drop(pps)": "0"
"dhcp-relay-c/DropTime": ""
"ip-option6/Total": "0"
"mpls-ctrl-v6/DropTime": ""
"fpga-cfg/Drop(pps)": "0"
"madp/Total": "0"
"ospf3/DropTime": ""
"igmp-drop/DropTime": ""
"nd-vxlan/Rate(pps)": "0"
"arp/Total Drop": "0"
"rip/Total Drop": "0"
"other/DropTime": ""
"dns-server/Rate(pps)": "0"
"dhcp6-server/Total Drop": "0"
"mlag/Rate(pps)": "0"
"hop-limit/Total": "0"
"trill-local/Total Drop": "0"
"mpls-ctrl/Rate(pps)": "0"
"tcp-syn/Total Drop": "0"
"mld/Total": "0"
"ssh/DropTime": ""
"ripng/DropTime": ""
"v4uc-route/Total": "0"
"other/Rate(pps)": "0"
"bfd/DropTime": ""
"mld-drop/DropTime": ""
"snmp/Total Drop": "0"
"sflow/Rate(pps)": "0"
"ttl0/Total Drop": "0"
"nd-snp-ns-na-l3/Total Drop": "0"
"xgv-ipmc/DropTime": ""
"fcoe-local/Total": "0"
"dns-client/DropTime": ""
"nd-snp-ra-redirect-l3/Drop(pps)": "0"
"gvrp/Rate(pps)": "0"
"isis/Rate(pps)": "0"
"nd-snp-rs-l3/Rate(pps)": "0"
"cdp/DropTime": ""
"ospf/Total Drop": "0"
"icmp/Total Drop": "0"
"rldp/Total Drop": "0"
"dhcps6/Total": "0"
"mpls-ttl1/Total Drop": "0"
"nacm-drop/Rate(pps)": "0"
"rldp/DropTime": ""
"tpp/Drop(pps)": "0"
"arp-auth-proxy/Drop(pps)": "0"
"tunnel-bpdu/Total": "0"
"dldp/Total Drop": "0"
"dns-client/Total": "0"
"mpls-ttl0/Total": "0"
"mlag/Drop(pps)": "0"
"mpls-ctrl-v6/Total": "0"
"sflow/Total": "0"
"fcoe-fip/Total": "0"
"tunnel-gvrp/Rate(pps)": "0"
"ipv6-all/Drop(pps)": "0"
"local-ipv6/DropTime": ""
"stargv6-ipmc/Total Drop": "0"
"trill-oam/Drop(pps)": "0"
"dns-server/Drop(pps)": "0"
"ipfix/Rate(pps)": "0"
"rip/Rate(pps)": "0"
"ip-option/Drop(pps)": "0"
"dhcp6-client/Drop(pps)": "0"
"bgp/DropTime": ""
"ip-option6/Total Drop": "0"
"tcp-syn/Rate(pps)": "0"
"dhcp6-relay/Rate(pps)": "0"
"icmp/Total": "0"
"ospf3/Total Drop": "0"
"pim/Rate(pps)": "0"
"mpls-ttl0/Total Drop": "0"
"ttl1/Drop(pps)": "0"
"dhcp6-client/Total": "0"
"local-ipv4/Drop(pps)": "0"
"lldp/DropTime": ""
"fcoe-fip/Drop(pps)": "0"
"ssh/Drop(pps)": "0"
"bgpv6/Drop(pps)": "0"
"mlag/Total": "0"
"sbfd/Rate(pps)": "0"
"local-ipv6/Rate(pps)": "0"
"nacm-drop/Total": "0"
"ospf/Total": "64"
"tpp/Total Drop": "0"
"dvmrp/Total Drop": "0"
"vrrpv6/Drop(pps)": "0"
"nacm-drop/Total Drop": "0"
"dldp/Rate(pps)": "0"
"dhcp6-server/Total": "0"
"dhcp6-server/DropTime": ""
"arp/Drop(pps)": "0"
"dot1x/DropTime": ""
"lacp/Total Drop": "0"
"mpls-ttl1/Rate(pps)": "0"
"cdp/Drop(pps)": "0"
"ipfix/Total Drop": "0"
"vrrpv6/Rate(pps)": "0"
"dhcp-relay-c/Total": "0"
"dvmrp/Drop(pps)": "0"
"lldp/Total Drop": "0"
"rt-hostv6/Total Drop": "0"
"efm/Total Drop": "0"
"unknown-v4mc/Total": "0"
"sbfd/Total": "0"
"tcp-syn/Drop(pps)": "0"
"snmp/Rate(pps)": "0"
"local-ipv4/DropTime": ""
"igmp/Drop(pps)": "0"
"lacp/Rate(pps)": "0"
"telnet/DropTime": ""
"bgp/Drop(pps)": "0"
"mld/DropTime": ""
"dot1x/Drop(pps)": "0"
"dot1x/Total Drop": "0"
"lldp/Total": "0"
"nd-snp-ra-redirect/Total Drop": "0"
"ospf3/Rate(pps)": "0"
"tunnel-gvrp/Total Drop": "0"
"ripng/Drop(pps)": "0"
"trill-isis/Total": "0"
"dns-server/Total Drop": "0"
"dhcp6-relay/Total": "0"
"cfm/Total Drop": "0"
"rldp/Total": "0"
"unknown-v4mc/Drop(pps)": "0"
"dvmrp/Rate(pps)": "0"
"nd-snp-rs-l3/Total Drop": "0"
"Packet Type_list": ["arp"
"arp-auth-proxy"
"bfd"
"bgp"
"bgpv6"
"bpdu"
"cdp"
"cfm"
"dhcp-relay-c"
"dhcp-relay-s"
"dhcp6-client"
"dhcp6-relay"
"dhcp6-server"
"dhcps"
"dhcps6"
"dldp"
"dns-client"
"dns-server"
"dot1x"
"dvmrp"
"efm"
"erps"
"fcoe-fip"
"fcoe-local"
"fpga-cfg"
"fpga-notify"
"gvrp"
"hop-limit"
"icmp"
"igmp"
"igmp-drop"
"ip-option"
"ip-option6"
"ipfix"
"ipv6-all"
"isis"
"l3mtu-fail"
"lacp"
"lldp"
"local-ipv4"
"local-ipv6"
"mac-move"
"madp"
"mgmt"
"mlag"
"mld"
"mld-drop"
"mpls-ctrl"
"mpls-ctrl-v6"
"mpls-ttl0"
"mpls-ttl1"
"nacm-drop"
"nd-non-snp"
"nd-snp-ns-na"
"nd-snp-ns-na-l3"
"nd-snp-ra-redirect"
"nd-snp-ra-redirect-l3"
"nd-snp-rs"
"nd-snp-rs-l3"
"nd-vxlan"
"ndsnp"
"option82"
"ospf"
"ospf3"
"other"
"pim"
"pimv6"
"rerp"
"reup"
"rip"
"ripng"
"rldp"
"rt-host"
"rt-hostv6"
"sbfd"
"sdn"
"sflow"
"snmp"
"ssh"
"stargv-ipmc"
"stargv6-ipmc"
"tcp-syn"
"telnet"
"tpp"
"trill"
"trill-isis"
"trill-local"
"trill-oam"
"ttl0"
"ttl1"
"tunnel-bpdu"
"tunnel-gvrp"
"udp-flood"
"unknown-v4mc"
"unknown-v6mc"
"v4uc-route"
"v6uc-route"
"vrrp"
"vrrpv6"
"web-auth"
"xgv-ipmc"
"xgv6-ipmc"], "pimv6/Drop(pps)": "0"
"isis/Total": "18"
"ndsnp/Drop(pps)": "0"
"xgv-ipmc/Total": "0"
"v6uc-route/Total Drop": "0"
"dhcp6-relay/Drop(pps)": "0"
"mpls-ttl1/Drop(pps)": "0"
"rt-hostv6/DropTime": ""
"igmp-drop/Rate(pps)": "0"
"hop-limit/Rate(pps)": "0"
"isis/DropTime": ""
"dhcp-relay-s/Rate(pps)": "0"
"icmp/Drop(pps)": "0"
"mpls-ttl0/DropTime": ""
"ripng/Total": "20"
"trill/Drop(pps)": "0"
"rt-host/Rate(pps)": "0"
"madp/Drop(pps)": "0"
"snmp/DropTime": ""
"l3mtu-fail/DropTime": ""
"lldp/Drop(pps)": "0"
"xgv6-ipmc/Total": "0"
"vrrp/Total": "0"
"ttl1/Rate(pps)": "0"
"nd-snp-ns-na/Total Drop": "0"
"pim/Total": "0"
"pimv6/Total Drop": "0"
"nd-snp-ns-na-l3/Drop(pps)": "0"
"dhcps/Drop(pps)": "0"
"nd-snp-ns-na-l3/Rate(pps)": "0"
"option82/Drop(pps)": "0"
"dldp/Drop(pps)": "0"
"igmp-drop/Drop(pps)": "0"
"pim/Total Drop": "0"
"fcoe-local/Total Drop": "0"
"ospf3/Total": "17"
"trill-isis/Drop(pps)": "0"
"arp/Total": "19"
"igmp/Rate(pps)": "0"
"ttl0/Total": "0"
"mlag/DropTime": ""
"nd-snp-ra-redirect/DropTime": ""
"mpls-ttl0/Drop(pps)": "0"
"nd-snp-ra-redirect/Drop(pps)": "0"
"mld-drop/Total": "0"
"nd-snp-ns-na/Total": "0"
"nd-snp-ns-na/Drop(pps)": "0"
"l3mtu-fail/Total Drop": "0"
"ip-option/Total": "0"
"cdp/Rate(pps)": "0"
"ip-option/Rate(pps)": "0"
"dhcp6-relay/DropTime": ""
"mpls-ctrl-v6/Rate(pps)": "0"
"sbfd/Drop(pps)": "0"
"cfm/DropTime": ""
"isis/Total Drop": "0"
"mac-move/Total": "0"
"fpga-cfg/Total": "0"
"trill-local/Rate(pps)": "0"
"unknown-v6mc/Drop(pps)": "0"
"stargv-ipmc/Drop(pps)": "0"
"tunnel-bpdu/Rate(pps)": "0"
"fpga-notify/Rate(pps)": "0"
"option82/Rate(pps)": "0"
"cdp/Total Drop": "0"
"trill-isis/Total Drop": "0"
"local-ipv6/Drop(pps)": "0"
"dhcps/Total Drop": "0"
"madp/Total Drop": "0"
"pimv6/Total": "0"
"nd-non-snp/Drop(pps)": "0"
"xgv6-ipmc/Total Drop": "0"
"stargv-ipmc/Total": "0"
"unknown-v6mc/Total": "0"
"fcoe-local/DropTime": ""
"vrrp/Rate(pps)": "0"
"local-ipv4/Total": "0"
"udp-flood/Total Drop": "0"
"hop-limit/Drop(pps)": "0"
"ipv6-all/Total": "0"
"mld/Rate(pps)": "0"
"igmp/Total": "0"
"tunnel-gvrp/DropTime": ""
"pim/DropTime": ""
"nd-vxlan/Total Drop": "0"
"other/Drop(pps)": "0"
"dhcps6/Total Drop": "0"
"tpp/Total": "0"
"dhcp6-client/DropTime": ""
"efm/Total": "0"
"dot1x/Rate(pps)": "0"
"madp/Rate(pps)": "0"
"dhcps/Total": "0"
"nd-snp-ra-redirect-l3/Total": "0"
"snmp/Total": "0"
"telnet/Rate(pps)": "0"
"v6uc-route/Total": "0"
"fpga-notify/Drop(pps)": "0"
"dns-client/Drop(pps)": "0"
"bfd/Total Drop": "0"
"v4uc-route/Drop(pps)": "0"
"xgv-ipmc/Total Drop": "0"
"igmp/DropTime": ""
"dhcps6/Rate(pps)": "0"
"ssh/Total Drop": "0"
"local-ipv6/Total Drop": "0"
"erps/Drop(pps)": "0"
"reup/Total Drop": "0"
"snmp/Drop(pps)": "0"
"tunnel-bpdu/Drop(pps)": "0"
"mpls-ttl1/Total": "0"
"dns-client/Rate(pps)": "0"
"tpp/Rate(pps)": "0"
"mpls-ttl0/Rate(pps)": "0"
"isis/Drop(pps)": "0"
"tunnel-gvrp/Drop(pps)": "0"
"dldp/Total": "0"
"l3mtu-fail/Drop(pps)": "0"
"sflow/Total Drop": "0"
"rerp/Rate(pps)": "0"
"v4uc-route/Total Drop": "0"
"trill/Total": "0"
"rt-host/DropTime": ""
"sbfd/Total Drop": "0"
"bgpv6/Total Drop": "0"
"vrrpv6/Total": "0"
"arp-auth-proxy/Total": "0"
"vrrp/DropTime": ""
"ipv6-all/Rate(pps)": "0"
"reup/Drop(pps)": "0"
"dns-server/DropTime": ""
"dhcp-relay-c/Drop(pps)": "0"
"v4uc-route/Rate(pps)": "0"
"nd-non-snp/Total": "0"
"bpdu/DropTime": ""
"telnet/Drop(pps)": "0"
"pimv6/DropTime": ""
"nacm-drop/Drop(pps)": "0"
"stargv6-ipmc/Drop(pps)": "0"
"efm/Rate(pps)": "0"
"dhcps6/DropTime": ""
"option82/DropTime": ""
"lacp/Total": "0"
"dhcp-relay-c/Rate(pps)": "0"
"xgv-ipmc/Rate(pps)": "0"
"arp-auth-proxy/Total Drop": "0"
"option82/Total Drop": "0"
"ipfix/Total": "0"
"trill-isis/Rate(pps)": "0"
"dhcps6/Drop(pps)": "0"
"reup/Total": "0"
"v6uc-route/DropTime": ""
"mac-move/DropTime": ""
"tunnel-bpdu/Total Drop": "0"
"udp-flood/DropTime": ""
"ttl1/Total Drop": "0"
"ndsnp/Total Drop": "0"
"ospf/Drop(pps)": "0"
"bgp/Total Drop": "0"
"bpdu/Rate(pps)": "0"
"icmp/DropTime": ""
"xgv6-ipmc/Drop(pps)": "0"
"mpls-ttl1/DropTime": ""
"arp/DropTime": ""
"trill-oam/Total": "0"
"nd-vxlan/Drop(pps)": "0"
"dhcp-relay-s/DropTime": ""
"pim/Drop(pps)": "0"
"bfd/Rate(pps)": "0"
"mld-drop/Drop(pps)": "0"
"trill/DropTime": ""
"dhcp-relay-s/Total Drop": "0"
"ttl0/DropTime": ""
"igmp-drop/Total Drop": "0"
"nd-snp-rs/Drop(pps)": "0"
"ip-option/DropTime": ""
"nd-snp-rs-l3/Total": "0"
"ndsnp/DropTime": ""
"dhcp6-server/Rate(pps)": "0"
"fpga-notify/Total Drop": "0"
"pimv6/Rate(pps)": "0"
"mac-move/Drop(pps)": "0"
"igmp-drop/Total": "0"
"trill-local/DropTime": ""
"rip/DropTime": ""
"ndsnp/Rate(pps)": "0"
"sflow/Drop(pps)": "0"
"fpga-notify/DropTime": ""
"bpdu/Total Drop": "0"
"arp/Rate(pps)": "0"
"gvrp/Drop(pps)": "0"
"erps/Rate(pps)": "0"
"nd-vxlan/DropTime": ""
"mac-move/Rate(pps)": "0"
"mld/Drop(pps)": "0"
"fcoe-fip/DropTime": ""
"unknown-v4mc/Rate(pps)": "0"
"trill-local/Total": "0"
"gvrp/Total": "0"
"dhcp6-client/Rate(pps)": "0"
"tcp-syn/DropTime": ""
"local-ipv4/Rate(pps)": "0"
"vrrpv6/DropTime": ""
"mgmt/Total Drop": "0"
"udp-flood/Total": "0"
"nd-snp-ns-na-l3/DropTime": ""
"arp-auth-proxy/DropTime": ""
"gvrp/DropTime": ""
"unknown-v6mc/Total Drop": "0"
"stargv-ipmc/Total Drop": "0"
"mgmt/DropTime": ""
"mpls-ctrl/DropTime": ""
"fpga-notify/Total": "0"
"bgpv6/Rate(pps)": "0"
"nd-snp-ra-redirect/Rate(pps)": "0"
"bgp/Total": "0"
"reup/DropTime": ""
"mpls-ctrl/Drop(pps)": "0"
"ttl1/DropTime": ""
"rldp/Rate(pps)": "0"
"dhcps/DropTime": ""
"fpga-cfg/Rate(pps)": "0"
"nacm-drop/DropTime": ""
"unknown-v4mc/DropTime": ""
"lacp/DropTime": ""
"ipfix/Drop(pps)": "0"
"ospf/DropTime": ""
"sdn/Total": "0"
"rerp/Total": "0"
"ip-option6/DropTime": ""
"other/Total Drop": "0"
"l3mtu-fail/Total": "0"
"unknown-v4mc/Total Drop": "0"
"nd-vxlan/Total": "0"
"cfm/Drop(pps)": "0"
"xgv6-ipmc/DropTime": ""
"rerp/DropTime": ""
"tunnel-bpdu/DropTime": ""
"bpdu/Total": "0"
"dhcp-relay-c/Total Drop": "0"
"rt-hostv6/Rate(pps)": "0"
"bgpv6/DropTime": ""
"rip/Total": "0"
"trill-oam/Rate(pps)": "0"
"telnet/Total": "0"
"rt-host/Total Drop": "0"
"mld-drop/Rate(pps)": "0"
"sbfd/DropTime": ""
"ip-option6/Rate(pps)": "0"
"nd-snp-rs/Total": "0"
"dns-server/Total": "0"
"ndsnp/Total": "0"
"tunnel-gvrp/Total": "0"
"trill-oam/DropTime": ""
"trill/Rate(pps)": "0"
"ipv6-all/Total Drop": "0"
"dldp/DropTime": ""
"dvmrp/Total": "0"
"nd-non-snp/DropTime": ""
"fpga-cfg/Total Drop": "0"
"mld/Total Drop": "0"
"dhcp6-relay/Total Drop": "0"
"nd-snp-ra-redirect-l3/Rate(pps)": "0"
"rt-hostv6/Total": "0"
"vrrpv6/Total Drop": "0"
"nd-snp-ns-na-l3/Total": "0"
"bgpv6/Total": "0"
"xgv6-ipmc/Rate(pps)": "0"
"fcoe-fip/Total Drop": "0"
"sdn/Total Drop": "0"
"mpls-ctrl/Total Drop": "0"
"v4uc-route/DropTime": ""
"bpdu/Drop(pps)": "0"
"mpls-ctrl/Total": "0"
"rt-host/Drop(pps)": "0"
"gvrp/Total Drop": "0"
"nd-snp-ns-na/Rate(pps)": "0"
"vrrp/Drop(pps)": "0"
"mgmt/Drop(pps)": "0"
"option82/Total": "0"
"rerp/Total Drop": "0"
"fcoe-local/Rate(pps)": "0"
"dvmrp/DropTime": ""
"telnet/Total Drop": "0"
"sflow/DropTime": ""
"erps/Total": "0"
"nd-snp-rs-l3/DropTime": ""
"nd-non-snp/Rate(pps)": "0"
"local-ipv6/Total": "0"
"rt-host/Total": "0"
"nd-snp-ra-redirect/Total": "0"
"erps/Total Drop": "0"
"ssh/Rate(pps)": "0"
"web-auth/Total": "0"
"ipv6-all/DropTime": ""
"trill-isis/DropTime": ""
"vrrp/Total Drop": "0"
"dhcp-relay-s/Total": "0"
"mgmt/Rate(pps)": "0"
"sdn/Rate(pps)": "0"
"bgp/Rate(pps)": "0"
"mgmt/Total": "0"
"mpls-ctrl-v6/Drop(pps)": "0"
"local-ipv4/Total Drop": "0"
"arp-auth-proxy/Rate(pps)": "0"
"xgv-ipmc/Drop(pps)": "0"
"sdn/Drop(pps)": "0"
"ssh/Total": "0"
"nd-snp-rs/Rate(pps)": "0"
"web-auth/Rate(pps)": "0"
"bfd/Total": "0"
"ttl1/Total": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show cpu-protect hardware-statistics device <num> slot <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info, "Packet Type")
    def dut_get_show_cpuprotect(self,show_info):
        """
        Function:show cpu-protect回显解析函数
        CLI命令:show cpu-protect
        回显信息示例:
Ruijie#show cpu-protect  
%cpu port bandwidth: 100000(pps)
Traffic-class   Bandwidth(pps)  Rate(pps)  Drop(pps)
-------------   --------------  ---------  ---------
 0              20000           0          0        
 1              1000            0          0        
 2              20000           0          0        
 3              20000           0          0        
 4              20000           0          0        
 5              20000           0          0        
 6              20000           0          0        
 7              20000           0          0        
Packet Type             Traffic-class  Bandwidth(pps)  Rate(pps)  Drop(pps)  Total         Total Drop    DropTime                    
----------------------  -------------  --------------  ---------  ---------  ---------     ----------    ----------------------------
arp                     1              10000           0          0          5259          0                                         
arp-auth-proxy          1              10000           0          0          0             0                                         
bfd                     6              5120            0          0          0             0                                         
bgp                     4              2000            0          0          0             0                                         
bgpv6                   4              2000            0          0          0             0                                         
bpdu                    6              128             0          0          491           0                                         
cdp                     5              768             0          0          0             0                                         
cfm                     5              512             0          0          0             0                                         
dhcp-relay-c            2              1500            0          0          0             0                                         
dhcp-relay-s            2              1500            0          0          0             0                                         
dhcp6-client            2              1500            0          0          0             0                                         
dhcp6-relay             2              1500            0          0          0             0                                         
dhcp6-server            2              1500            0          0          0             0                                         
dhcps                   2              1500            0          0          0             0                                         
dhcps6                  2              1500            0          0          0             0                                         
dldp                    6              3200            0          0          0             0                                         
dns-client              3              200             0          0          0             0                                         
dns-server              3              200             0          0          0             0                                         
dot1x                   2              1500            0          0          0             0                                         
dvmrp                   4              128             0          0          0             0                                         
efm                     5              1000            0          0          0             0                                         
erps                    5              128             0          0          0             0                                         
fcoe-fip                4              1000            0          0          0             0                                         
fcoe-local              4              1000            0          0          0             0                                         
fpga-cfg                7              2000            0          0          0             0                                         
fpga-notify             0              1000            0          0          0             0                                         
gvrp                    5              128             0          0          0             0                                         
hop-limit               0              800             0          0          0             0                                         
icmp                    3              4500            0          0          0             0                                         
igmp                    2              1000            0          0          0             0                                         
igmp-drop               2              1000            0          0          0             0                                         
ip-option               0              800             0          0          0             0                                         
ip-option6              0              800             0          0          0             0                                         
ipfix                   0              2000            0          0          0             0                                         
ipv6-all                0              2000            0          0          0             0                                         
isis                    4              2000            0          0          0             0                                         
l3mtu-fail              0              100             0          0          0             0                                         
lacp                    5              256             0          0          0             0                                         
lldp                    5              768             0          0          0             0                                         
local-ipv4              3              4000            0          0          0             0                                         
local-ipv6              3              4000            0          0          0             0                                         
mac-move                0              2000            0          0          0             0                                         
madp                    6              1000            0          0          0             0                                         
mgmt                    -              2500            1          0          25906         0                                         
mlag                    5              1024            0          0          0             0                                         
mld                     2              1000            0          0          0             0                                         
mld-drop                2              128             0          0          0             0                                         
mpls-ctrl               4              128             0          0          0             0                                         
mpls-ctrl-v6            4              128             0          0          0             0                                         
mpls-ttl0               4              128             0          0          0             0                                         
mpls-ttl1               4              128             0          0          0             0                                         
nacm-drop               2              128             0          0          0             0                                         
nd-non-snp              1              10000           0          0          0             0                                         
nd-snp-ns-na            1              10000           0          0          0             0                                         
nd-snp-ns-na-l3         1              10000           0          0          0             0                                         
nd-snp-ra-redirect      1              1500            0          0          0             0                                         
nd-snp-ra-redirect-l3   1              1500            0          0          0             0                                         
nd-snp-rs               1              1500            0          0          0             0                                         
nd-snp-rs-l3            1              1500            0          0          0             0                                         
nd-vxlan                1              10000           0          0          0             0                                         
ndsnp                   1              4000            0          0          0             0                                         
option82                2              1500            0          0          0             0                                         
ospf                    4              2000            0          0          0             0                                         
ospf3                   4              2000            0          0          0             0                                         
other                   0              2000            0          0          0             0                                         
pim                     4              1000            0          0          0             0                                         
pimv6                   4              1000            0          0          0             0                                         
rerp                    5              128             0          0          0             0                                         
reup                    5              128             0          0          0             0                                         
rip                     4              600             0          0          0             0                                         
ripng                   4              128             0          0          0             0                                         
rldp                    5              128             0          0          0             0                                         
rt-host                 4              4096            0          0          0             0                                         
rt-hostv6               4              4096            0          0          0             0                                         
sbfd                    6              1000            0          0          0             0                                         
sdn                     0              20000           0          0          0             0                                         
sflow                   0              2000            0          0          0             0                                         
snmp                    3              1100            0          0          0             0                                         
ssh                     3              1100            0          0          0             0                                         
stargv-ipmc             2              128             0          0          0             0                                         
stargv6-ipmc            1              128             0          0          0             0                                         
tcp-syn                 3              1000            0

        Returns:
{"fcoe-fip/Traffic-class": "4"
"stargv6-ipmc/Total": "0"
"nd-non-snp/Total Drop": "0"
"nd-snp-rs/Total Drop": "0"
"nd-snp-rs-l3/Traffic-class": "1"
"dhcp6-server/Drop(pps)": "0"
"mac-move/Total Drop": "0"
"bgp/Total": "0"
"hop-limit/Traffic-class": "0"
"dns-server/Traffic-class": "3"
"fpga-notify/Bandwidth(pps)": "1000"
"stargv-ipmc/DropTime": ""
"ospf3/Drop(pps)": "0"
"cfm/Total": "0"
"dhcp-relay-s/Drop(pps)": "0"
"efm/DropTime": ""
"l3mtu-fail/Rate(pps)": "0"
"mld-drop/Bandwidth(pps)": "128"
"hop-limit/Total Drop": "0"
"arp-auth-proxy/Traffic-class": "1"
"icmp/Rate(pps)": "0"
"mpls-ctrl-v6/Total Drop": "0"
"mld-drop/Total Drop": "0"
"mld-drop/Traffic-class": "2"
"nd-snp-ns-na/DropTime": ""
"rt-hostv6/Drop(pps)": "0"
"stargv-ipmc/Rate(pps)": "0"
"ip-option6/Drop(pps)": "0"
"cdp/Total": "0"
"dns-client/Total Drop": "0"
"ndsnp/Traffic-class": "1"
"erps/DropTime": ""
"reup/Rate(pps)": "0"
"rip/Bandwidth(pps)": "600"
"mlag/Traffic-class": "5"
"bfd/Drop(pps)": "0"
"efm/Drop(pps)": "0"
"dot1x/Total": "0"
"dhcp6-client/Total Drop": "0"
"other/Total": "0"
"nd-snp-ra-redirect-l3/Total Drop": "0"
"mlag/Bandwidth(pps)": "1024"
"stargv6-ipmc/Rate(pps)": "0"
"l3mtu-fail/DropTime": ""
"nd-snp-rs-l3/Drop(pps)": "0"
"igmp/Total Drop": "0"
"ipfix/DropTime": ""
"dhcps/Bandwidth(pps)": "1500"
"dvmrp/Bandwidth(pps)": "128"
"mld/Bandwidth(pps)": "1000"
"hop-limit/DropTime": ""
"tcp-syn/Total": ""
"sbfd/Total": "0"
"sdn/Bandwidth(pps)": "20000"
"madp/DropTime": ""
"efm/Bandwidth(pps)": "1000"
"fpga-cfg/DropTime": ""
"mlag/Total Drop": "0"
"ospf/Rate(pps)": "0"
"sdn/DropTime": ""
"nd-snp-ra-redirect/Traffic-class": "1"
"rip/Drop(pps)": "0"
"lldp/Rate(pps)": "0"
"2/Rate(pps)": "0"
"arp/Traffic-class": "1"
"nd-snp-rs/Bandwidth(pps)": "1500"
"ripng/Total Drop": "0"
"ip-option/Total Drop": "0"
"nd-snp-rs/DropTime": ""
"rerp/Drop(pps)": "0"
"ripng/Rate(pps)": "0"
"stargv6-ipmc/DropTime": ""
"rldp/Drop(pps)": "0"
"ospf/DropTime": ""
"cfm/Rate(pps)": "0"
"dhcps/Rate(pps)": "0"
"mpls-ctrl/Traffic-class": "4"
"fcoe-local/Drop(pps)": "0"
"dhcp-relay-c/DropTime": ""
"ip-option6/Total": "0"
"mpls-ttl1/Traffic-class": "4"
"mpls-ctrl-v6/DropTime": ""
"fpga-cfg/Drop(pps)": "0"
"dhcp-relay-c/Traffic-class": "2"
"madp/Total": "0"
"ospf3/DropTime": ""
"igmp-drop/DropTime": ""
"1/Bandwidth(pps)": "1000"
"nd-vxlan/Rate(pps)": "0"
"arp/Total Drop": "0"
"cdp/Total Drop": "0"
"nd-snp-ns-na-l3/Traffic-class": "1"
"dns-server/Rate(pps)": "0"
"mlag/Rate(pps)": "0"
"nd-vxlan/Bandwidth(pps)": "10000"
"snmp/Bandwidth(pps)": "1100"
"mpls-ctrl/Rate(pps)": "0"
"tcp-syn/Total Drop": ""
"mld/Total": "0"
"ssh/DropTime": ""
"bgp/Traffic-class": "4"
"ripng/DropTime": ""
"other/Rate(pps)": "0"
"bfd/DropTime": ""
"mld-drop/DropTime": ""
"mac-move/Traffic-class": "0"
"snmp/Total Drop": "0"
"hop-limit/Bandwidth(pps)": "800"
"nd-snp-ns-na-l3/Total Drop": "0"
"fcoe-local/Total": "0"
"dns-client/DropTime": ""
"rt-hostv6/Traffic-class": "4"
"nd-snp-ra-redirect-l3/Drop(pps)": "0"
"nd-snp-rs-l3/Bandwidth(pps)": "1500"
"gvrp/Rate(pps)": "0"
"isis/Rate(pps)": "0"
"nd-snp-rs-l3/Rate(pps)": "0"
"cdp/DropTime": ""
"ospf/Total Drop": "0"
"icmp/Total Drop": "0"
"rldp/Total Drop": "0"
"dhcps6/Bandwidth(pps)": "1500"
"mpls-ttl1/Total Drop": "0"
"nacm-drop/Rate(pps)": "0"
"5/Rate(pps)": "0"
"rldp/DropTime": ""
"mld/Total Drop": "0"
"dhcps6/Total": "0"
"reup/Bandwidth(pps)": "128"
"gvrp/DropTime": ""
"cdp/Traffic-class": "5"
"arp-auth-proxy/Drop(pps)": "0"
"cfm/Bandwidth(pps)": "512"
"arp/Bandwidth(pps)": "10000"
"dns-client/Total": "0"
"bgp/Rate(pps)": "0"
"mlag/Drop(pps)": "0"
"nd-snp-ns-na-l3/Bandwidth(pps)": "10000"
"stargv6-ipmc/Traffic-class": "1"
"mpls-ctrl-v6/Total": "0"
"sflow/Total": "0"
"1/Drop(pps)": "0"
"fcoe-fip/Total": "0"
"dns-client/Bandwidth(pps)": "200"
"ipv6-all/Drop(pps)": "0"
"6/Drop(pps)": "0"
"local-ipv6/DropTime": ""
"stargv6-ipmc/Total Drop": "0"
"ripng/Traffic-class": "4"
"dhcp6-client/DropTime": ""
"ipfix/Rate(pps)": "0"
"rip/Rate(pps)": "0"
"ip-option/Drop(pps)": "0"
"dhcp6-client/Drop(pps)": "0"
"ssh/Bandwidth(pps)": "1100"
"3/Drop(pps)": "0"
"rt-host/Total Drop": "0"
"bgp/DropTime": ""
"pimv6/Traffic-class": "4"
"ip-option6/Total Drop": "0"
"igmp-drop/Traffic-class": "2"
"tcp-syn/Rate(pps)": "0"
"dhcp6-relay/Rate(pps)": "0"
"icmp/Total": "0"
"ospf3/Total Drop": "0"
"pim/Rate(pps)": "0"
"mpls-ttl0/Bandwidth(pps)": "128"
"mpls-ttl0/Total Drop": "0"
"ip-option/Bandwidth(pps)": "800"
"dhcp6-client/Total": "0"
"local-ipv4/Drop(pps)": "0"
"lldp/DropTime": ""
"rt-hostv6/Bandwidth(pps)": "4096"
"dhcp6-server/Bandwidth(pps)": "1500"
"fcoe-fip/Drop(pps)": "0"
"ssh/Drop(pps)": "0"
"bgpv6/Drop(pps)": "0"
"mlag/Total": "0"
"sbfd/Rate(pps)": "0"
"local-ipv6/Rate(pps)": "0"
"fpga-notify/Traffic-class": "0"
"ip-option6/Traffic-class": "0"
"nacm-drop/Total": "0"
"ospf/Total": "0"
"ip-option6/Rate(pps)": "0"
"dvmrp/Total Drop": "0"
"madp/Bandwidth(pps)": "1000"
"ip-option6/Bandwidth(pps)": "800"
"nacm-drop/Total Drop": "0"
"dns-server/Drop(pps)": "0"
"dldp/Rate(pps)": "0"
"dhcp6-server/Total": "0"
"dhcp6-server/DropTime": ""
"arp/Drop(pps)": "0"
"dot1x/DropTime": ""
"lacp/Total Drop": "0"
"ndsnp/Bandwidth(pps)": "4000"
"mpls-ttl1/Rate(pps)": "0"
"cdp/Drop(pps)": "0"
"local-ipv6/Bandwidth(pps)": "4000"
"nacm-drop/Traffic-class": "2"
"ipfix/Total Drop": "0"
"dhcp-relay-c/Total": "0"
"dvmrp/Drop(pps)": "0"
"0/Drop(pps)": "0"
"0/Rate(pps)": "0"
"rt-hostv6/Total Drop": "0"
"efm/Total Drop": "0"
"local-ipv6/Traffic-class": "3"
"tcp-syn/Drop(pps)": ""
"5/Drop(pps)": "0"
"snmp/Rate(pps)": "0"
"3/Bandwidth(pps)": "20000"
"igmp/Drop(pps)": "0"
"lacp/Rate(pps)": "0"
"bgp/Drop(pps)": "0"
"mld/DropTime": ""
"dot1x/Drop(pps)": "0"
"rldp/Total": "0"
"dot1x/Total Drop": "0"
"sflow/Traffic-class": "0"
"fcoe-local/Traffic-class": "4"
"rt-host/Traffic-class": "4"
"local-ipv4/Bandwidth(pps)": "4000"
"lldp/Total": "0"
"ipv6-all/Total Drop": "0"
"ospf3/Rate(pps)": "0"
"bfd/Bandwidth(pps)": "5120"
"ospf3/Bandwidth(pps)": "2000"
"ripng/Drop(pps)": "0"
"lacp/Bandwidth(pps)": "256"
"dns-server/Total Drop": "0"
"dhcp6-relay/Total": "0"
"cfm/Total Drop": "0"
"dhcp-relay-s/Traffic-class": "2"
"nd-snp-ns-na/Traffic-class": "1"
"rldp/Bandwidth(pps)": "128"
"arp-auth-proxy/Bandwidth(pps)": "10000"
"dvmrp/Rate(pps)": "0"
"nd-snp-rs-l3/Total Drop": "0"
"Packet Type_list": ["arp"
"arp-auth-proxy"
"bfd"
"bgp"
"bgpv6"
"bpdu"
"cdp"
"cfm"
"dhcp-relay-c"
"dhcp-relay-s"
"dhcp6-client"
"dhcp6-relay"
"dhcp6-server"
"dhcps"
"dhcps6"
"dldp"
"dns-client"
"dns-server"
"dot1x"
"dvmrp"
"efm"
"erps"
"fcoe-fip"
"fcoe-local"
"fpga-cfg"
"fpga-notify"
"gvrp"
"hop-limit"
"icmp"
"igmp"
"igmp-drop"
"ip-option"
"ip-option6"
"ipfix"
"ipv6-all"
"isis"
"l3mtu-fail"
"lacp"
"lldp"
"local-ipv4"
"local-ipv6"
"mac-move"
"madp"
"mgmt"
"mlag"
"mld"
"mld-drop"
"mpls-ctrl"
"mpls-ctrl-v6"
"mpls-ttl0"
"mpls-ttl1"
"nacm-drop"
"nd-non-snp"
"nd-snp-ns-na"
"nd-snp-ns-na-l3"
"nd-snp-ra-redirect"
"nd-snp-ra-redirect-l3"
"nd-snp-rs"
"nd-snp-rs-l3"
"nd-vxlan"
"ndsnp"
"option82"
"ospf"
"ospf3"
"other"
"pim"
"pimv6"
"rerp"
"reup"
"rip"
"ripng"
"rldp"
"rt-host"
"rt-hostv6"
"sbfd"
"sdn"
"sflow"
"snmp"
"ssh"
"stargv-ipmc"
"stargv6-ipmc"
"tcp-syn"], "fpga-cfg/Bandwidth(pps)": "2000"
"pimv6/Drop(pps)": "0"
"dvmrp/Traffic-class": "4"
"isis/Total": "0"
"ndsnp/Drop(pps)": "0"
"dhcp6-relay/Drop(pps)": "0"
"mpls-ttl1/Drop(pps)": "0"
"rt-hostv6/DropTime": ""
"l3mtu-fail/Bandwidth(pps)": "100"
"igmp-drop/Rate(pps)": "0"
"tcp-syn/Bandwidth(pps)": "1000"
"hop-limit/Rate(pps)": "0"
"isis/DropTime": ""
"dhcp-relay-s/Rate(pps)": "0"
"icmp/Drop(pps)": "0"
"mpls-ttl0/DropTime": ""
"pimv6/Bandwidth(pps)": "1000"
"pim/Bandwidth(pps)": "1000"
"ripng/Total": "0"
"mpls-ctrl-v6/Bandwidth(pps)": "128"
"rt-host/Rate(pps)": "0"
"ipfix/Bandwidth(pps)": "2000"
"dns-client/Rate(pps)": "0"
"isis/Drop(pps)": "0"
"lacp/Drop(pps)": "0"
"lldp/Drop(pps)": "0"
"bgpv6/Traffic-class": "4"
"dns-client/Traffic-class": "3"
"mpls-ttl1/Bandwidth(pps)": "128"
"rip/DropTime": ""
"nd-snp-ns-na/Total Drop": "0"
"pim/Total": "0"
"pimv6/Total Drop": "0"
"nd-snp-ns-na-l3/Drop(pps)": "0"
"dhcps/Drop(pps)": "0"
"nd-snp-ns-na-l3/Rate(pps)": "0"
"option82/Drop(pps)": "0"
"dldp/Drop(pps)": "0"
"igmp-drop/Drop(pps)": "0"
"pim/Total Drop": "0"
"fcoe-local/Total Drop": "0"
"ospf3/Total": "0"
"icmp/Bandwidth(pps)": "4500"
"arp/Total": "5259"
"igmp/Rate(pps)": "0"
"mlag/DropTime": ""
"igmp/Bandwidth(pps)": "1000"
"nd-snp-ra-redirect/DropTime": ""
"mpls-ttl0/Drop(pps)": "0"
"nd-snp-ra-redirect/Drop(pps)": "0"
"mld-drop/Total": "0"
"ipv6-all/Bandwidth(pps)": "2000"
"nd-snp-ns-na/Total": "0"
"nd-snp-ns-na/Drop(pps)": "0"
"l3mtu-fail/Total Drop": "0"
"fcoe-fip/Rate(pps)": "0"
"ip-option/Total": "0"
"cdp/Rate(pps)": "0"
"ip-option/Rate(pps)": "0"
"dhcp6-relay/DropTime": ""
"mpls-ctrl-v6/Rate(pps)": "0"
"sbfd/Drop(pps)": "0"
"cfm/DropTime": ""
"isis/Total Drop": "0"
"lldp/Bandwidth(pps)": "768"
"bgpv6/Bandwidth(pps)": "2000"
"mac-move/Total": "0"
"stargv-ipmc/Traffic-class": "2"
"fpga-cfg/Total": "0"
"stargv-ipmc/Drop(pps)": "0"
"nd-snp-ra-redirect/Bandwidth(pps)": "1500"
"fpga-notify/Rate(pps)": "0"
"option82/Rate(pps)": "0"
"dhcp6-client/Traffic-class": "2"
"other/DropTime": ""
"local-ipv6/Drop(pps)": "0"
"dhcps/Total Drop": "0"
"madp/Total Drop": "0"
"dhcp6-relay/Traffic-class": "2"
"pimv6/Total": "0"
"option82/Traffic-class": "2"
"nd-non-snp/Drop(pps)": "0"
"mpls-ctrl-v6/Traffic-class": "4"
"rt-host/Bandwidth(pps)": "4096"
"stargv-ipmc/Total": "0"
"fcoe-local/DropTime": ""
"nd-non-snp/Traffic-class": "1"
"local-ipv4/Total": "0"
"isis/Bandwidth(pps)": "2000"
"hop-limit/Drop(pps)": "0"
"ipv6-all/Total": "0"
"mld/Rate(pps)": "0"
"bfd/Traffic-class": "6"
"igmp/Total": "0"
"local-ipv4/DropTime": ""
"%cpu port bandwidth": "100000(pps)"
"pim/DropTime": ""
"nd-vxlan/Total Drop": "0"
"other/Drop(pps)": "0"
"nd-snp-ra-redirect-l3/Bandwidth(pps)": "1500"
"dhcps6/Total Drop": "0"
"dhcps6/Traffic-class": "2"
"efm/Total": "0"
"dot1x/Rate(pps)": "0"
"fcoe-local/Bandwidth(pps)": "1000"
"madp/Rate(pps)": "0"
"dhcps/Total": "0"
"nd-snp-ra-redirect-l3/Total": "0"
"dhcp6-server/Rate(pps)": "0"
"2/Drop(pps)": "0"
"snmp/Total": "0"
"igmp/Traffic-class": "2"
"icmp/Traffic-class": "3"
"rerp/Bandwidth(pps)": "128"
"other/Bandwidth(pps)": "2000"
"ip-option/Traffic-class": "0"
"fpga-notify/Drop(pps)": "0"
"dns-client/Drop(pps)": "0"
"bfd/Total Drop": "0"
"igmp/DropTime": ""
"dhcps6/Rate(pps)": "0"
"ssh/Total Drop": "0"
"sflow/Bandwidth(pps)": "2000"
"sdn/Traffic-class": "0"
"local-ipv6/Total Drop": "0"
"4/Bandwidth(pps)": "20000"
"dhcp6-server/Total Drop": "0"
"pim/Traffic-class": "4"
"reup/Total Drop": "0"
"sbfd/Traffic-class": "6"
"mpls-ttl1/Total": "0"
"madp/Drop(pps)": "0"
"bpdu/Traffic-class": "6"
"mpls-ttl0/Rate(pps)": "0"
"mpls-ttl0/Total": "0"
"ospf/Traffic-class": "4"
"snmp/DropTime": ""
"sflow/Drop(pps)": "0"
"dldp/Total": "0"
"l3mtu-fail/Drop(pps)": "0"
"sflow/Total Drop": "0"
"rerp/Rate(pps)": "0"
"rt-host/DropTime": ""
"sbfd/Total Drop": "0"
"bgpv6/Total Drop": "0"
"arp-auth-proxy/Total": "0"
"dldp/Traffic-class": "6"
"ipv6-all/Rate(pps)": "0"
"reup/Drop(pps)": "0"
"dns-server/DropTime": ""
"dhcp-relay-c/Drop(pps)": "0"
"6/Bandwidth(pps)": "20000"
"ipfix/Traffic-class": "0"
"nd-non-snp/Total": "0"
"bpdu/DropTime": ""
"pimv6/DropTime": ""
"nacm-drop/Drop(pps)": "0"
"stargv6-ipmc/Drop(pps)": "0"
"efm/Rate(pps)": "0"
"dot1x/Traffic-class": "2"
"dhcps6/DropTime": ""
"lacp/Total": "0"
"dhcp-relay-c/Rate(pps)": "0"
"arp-auth-proxy/Total Drop": "0"
"option82/Total Drop": "0"
"ipfix/Total": "0"
"tcp-syn/Traffic-class": "3"
"rt-host/Drop(pps)": "0"
"dhcps/Traffic-class": "2"
"dhcps6/Drop(pps)": "0"
"7/Drop(pps)": "0"
"reup/Total": "0"
"mac-move/DropTime": ""
"fpga-cfg/Traffic-class": "7"
"dldp/Total Drop": "0"
"ndsnp/Total Drop": "0"
"ospf/Drop(pps)": "0"
"bgp/Total Drop": "0"
"erps/Drop(pps)": "0"
"bpdu/Rate(pps)": "0"
"icmp/DropTime": ""
"dhcp6-client/Bandwidth(pps)": "1500"
"mpls-ttl1/DropTime": ""
"arp/DropTime": ""
"rt-host/Total": "0"
"nd-vxlan/Drop(pps)": "0"
"nacm-drop/Bandwidth(pps)": "128"
"lldp/Total Drop": "0"
"pim/Drop(pps)": "0"
"ripng/Bandwidth(pps)": "128"
"bfd/Rate(pps)": "0"
"mld-drop/Drop(pps)": "0"
"nd-vxlan/Traffic-class": "1"
"nd-snp-rs/Traffic-class": "1"
"snmp/Drop(pps)": "0"
"dhcp-relay-s/Total Drop": "0"
"nd-non-snp/Bandwidth(pps)": "10000"
"dhcp-relay-s/Bandwidth(pps)": "1500"
"igmp-drop/Total Drop": "0"
"option82/Bandwidth(pps)": "1500"
"nd-snp-rs/Drop(pps)": "0"
"ip-option/DropTime": ""
"rldp/Traffic-class": "5"
"nd-snp-rs-l3/Total": "0"
"bpdu/Bandwidth(pps)": "128"
"ndsnp/DropTime": ""
"3/Rate(pps)": "0"
"nd-snp-ra-redirect-l3/Traffic-class": "1"
"1/Rate(pps)": "0"
"dhcp-relay-c/Bandwidth(pps)": "1500"
"fpga-notify/Total Drop": "0"
"pimv6/Rate(pps)": "0"
"mac-move/Drop(pps)": "0"
"igmp-drop/Total": "0"
"nd-snp-ra-redirect-l3/DropTime": ""
"ndsnp/Rate(pps)": "0"
"mgmt/Bandwidth(pps)": "2500"
"rip/Traffic-class": "4"
"fpga-notify/DropTime": ""
"bpdu/Total Drop": "0"
"ipv6-all/Traffic-class": "0"
"dhcp6-server/Traffic-class": "2"
"arp/Rate(pps)": "0"
"gvrp/Drop(pps)": "0"
"erps/Rate(pps)": "0"
"ssh/Rate(pps)": "0"
"mac-move/Rate(pps)": "0"
"igmp-drop/Bandwidth(pps)": "1000"
"mld/Drop(pps)": "0"
"fcoe-fip/DropTime": ""
"mpls-ttl0/Traffic-class": "4"
"gvrp/Total": "0"
"dhcp6-client/Rate(pps)": "0"
"stargv-ipmc/Bandwidth(pps)": "128"
"tcp-syn/DropTime": ""
"local-ipv4/Rate(pps)": "0"
"mac-move/Bandwidth(pps)": "2000"
"mgmt/Total Drop": "0"
"nd-snp-ns-na-l3/DropTime": ""
"dldp/Bandwidth(pps)": "3200"
"arp-auth-proxy/DropTime": ""
"dvmrp/Total": "0"
"stargv-ipmc/Total Drop": "0"
"mgmt/DropTime": ""
"bgp/Bandwidth(pps)": "2000"
"mpls-ctrl/DropTime": ""
"fpga-notify/Total": "0"
"bgpv6/Rate(pps)": "0"
"nd-snp-ra-redirect/Rate(pps)": "0"
"mld/Traffic-class": "2"
"reup/DropTime": ""
"mpls-ctrl/Drop(pps)": "0"
"rldp/Rate(pps)": "0"
"dns-server/Bandwidth(pps)": "200"
"dhcps/DropTime": ""
"4/Rate(pps)": "0"
"fpga-cfg/Rate(pps)": "0"
"nacm-drop/DropTime": ""
"other/Traffic-class": "0"
"lacp/DropTime": ""
"cfm/Traffic-class": "5"
"local-ipv4/Traffic-class": "3"
"sdn/Total": "0"
"efm/Traffic-class": "5"
"0/Bandwidth(pps)": "20000"
"rerp/Total": "0"
"ip-option6/DropTime": ""
"other/Total Drop": "0"
"l3mtu-fail/Total": "0"
"6/Rate(pps)": "0"
"hop-limit/Total": "0"
"cfm/Drop(pps)": "0"
"7/Bandwidth(pps)": "20000"
"rerp/DropTime": ""
"sflow/Rate(pps)": "0"
"bpdu/Total": "491"
"rip/Total Drop": "0"
"dhcp-relay-c/Total Drop": "0"
"rt-hostv6/Rate(pps)": "0"
"isis/Traffic-class": "4"
"bgpv6/DropTime": ""
"rip/Total": "0"
"cdp/Bandwidth(pps)": "768"
"mld-drop/Rate(pps)": "0"
"madp/Traffic-class": "6"
"sbfd/DropTime": ""
"gvrp/Bandwidth(pps)": "128"
"fcoe-fip/Bandwidth(pps)": "1000"
"nd-snp-rs/Total": "0"
"l3mtu-fail/Traffic-class": "0"
"dns-server/Total": "0"
"nd-vxlan/Total": "0"
"dhcp6-relay/Bandwidth(pps)": "1500"
"ndsnp/Total": "0"
"rerp/Traffic-class": "5"
"lacp/Traffic-class": "5"
"dot1x/Bandwidth(pps)": "1500"
"dldp/DropTime": ""
"option82/DropTime": ""
"nd-non-snp/DropTime": ""
"fpga-cfg/Total Drop": "0"
"ipfix/Drop(pps)": "0"
"dhcp-relay-s/DropTime": ""
"dhcp6-relay/Total Drop": "0"
"nd-snp-ra-redirect-l3/Rate(pps)": "0"
"rt-hostv6/Total": "0"
"nd-snp-ns-na-l3/Total": "0"
"bgpv6/Total": "0"
"fcoe-fip/Total Drop": "0"
"sdn/Total Drop": "0"
"mpls-ctrl/Total Drop": "0"
"ospf3/Traffic-class": "4"
"erps/Bandwidth(pps)": "128"
"mpls-ctrl/Bandwidth(pps)": "128"
"4/Drop(pps)": "0"
"lldp/Traffic-class": "5"
"bpdu/Drop(pps)": "0"
"erps/Traffic-class": "5"
"mpls-ctrl/Total": "0"
"mgmt/Traffic-class": "-"
"gvrp/Total Drop": "0"
"nd-snp-ns-na/Rate(pps)": "0"
"mgmt/Drop(pps)": "0"
"option82/Total": "0"
"rerp/Total Drop": "0"
"fcoe-local/Rate(pps)": "0"
"dvmrp/DropTime": ""
"sflow/DropTime": ""
"erps/Total": "0"
"snmp/Traffic-class": "3"
"nd-snp-rs-l3/DropTime": ""
"nd-non-snp/Rate(pps)": "0"
"reup/Traffic-class": "5"
"stargv6-ipmc/Bandwidth(pps)": "128"
"local-ipv6/Total": "0"
"nd-snp-ra-redirect/Total Drop": "0"
"ssh/Traffic-class": "3"
"nd-snp-ra-redirect/Total": "0"
"erps/Total Drop": "0"
"nd-vxlan/DropTime": ""
"ipv6-all/DropTime": ""
"2/Bandwidth(pps)": "20000"
"gvrp/Traffic-class": "5"
"dhcp-relay-s/Total": "0"
"mgmt/Rate(pps)": "1"
"sdn/Rate(pps)": "0"
"Traffic-class_list": ["0"
"1"
"2"
"3"
"4"
"5"
"6"
"7"], "mgmt/Total": "25906"
"7/Rate(pps)": "0"
"mpls-ctrl-v6/Drop(pps)": "0"
"local-ipv4/Total Drop": "0"
"5/Bandwidth(pps)": "20000"
"sbfd/Bandwidth(pps)": "1000"
"arp-auth-proxy/Rate(pps)": "0"
"ssh/Total": "0"
"ospf/Bandwidth(pps)": "2000"
"nd-snp-rs/Rate(pps)": "0"
"nd-snp-ns-na/Bandwidth(pps)": "10000"
"bfd/Total": "0"
"sdn/Drop(pps)": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show cpu-protect | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(str(show_info).replace("\t"," "))
        show_list1 = []
        show_list2 = []
        flag = 0
        for value in show_info_list:
            if "Packet Type" in value:
                flag = 1
            if flag == 0 :
                show_list1.append(value)
            else:
                show_list2.append(value)
        show_info_1 = "\n".join(show_list1)
        show_info_2 = "\n".join(show_list2)
        dict_value1 = self.dut_show_autoget_whippletree_form_analysis(show_info_1,"Traffic-class",ago_colon_last_str=1)
        dict_value2 = self.dut_show_autoget_whippletree_form_analysis(show_info_2, "Packet Type")
        return dict(dict_value1.items()+dict_value2.items())
    def dut_get_show_cpuprotect_bak0601(self,show_info):
        """
        Auther: 王晓敏
        show vxlan以及show vxlan ${vni}

        Returns: 返回获取的回显信息

        Arguments:
                | show_info              | show回显信息(可选)                                    |
        Example:
                | returns   | *Keywords*             |  *Parameters*                             |
                | ${dict}   | dut_get_show_vxlan                                                 |
        """
        cmd_str = 'show cpu-protect'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        logging.debug(show_info_list_line)
        dict_value = self.dut_showinfo_split_on_colon([show_info_list_line[0]],dict_value)
        logging.debug(dict_value)
        dict1 = self.dut_showinfo_include_lines_analysiz(show_info_list_line[1:11])
        logging.debug(dict1)
        dict2 = self.dut_showinfo_include_lines_analysiz(show_info_list_line[11:])
        logging.debug(dict1)
        dict_value = dict(dict_value.items()+dict1.items()+dict2.items())
        return dict_value
    def dut_get_show_cpuprotect_device_num_slot_num(self,show_info):
        """
        Function:show cpu-protect device <num> slot <num>回显解析函数
        CLI命令:show cpu-protect device <num> slot <num>
        回显信息示例:
Ruijie#show cpu-protect device 1 slot 4
%cpu port bandwidth: 100000(pps)
Traffic-class   Bandwidth(pps)  Rate(pps)  Drop(pps)
-------------   --------------  ---------  ---------
 0              20000           0          0        
 1              1000            0          0        
 2              20000           0          0        
 3              20000           0          0        
 4              20000           0          0        
 5              20000           0          0        
 6              20000           1          0        
 7              20000           0          0        
Packet Type             Traffic-class  Bandwidth(pps)  Rate(pps)  Drop(pps)  Total         Total Drop    DropTime                    
----------------------  -------------  --------------  ---------  ---------  ---------     ----------    ----------------------------
arp                     1              10000           0          0          5275          16            Sat Feb 22 23:01:56 2020    
arp-auth-proxy          1              10000           0          0          0             0                                         
bfd                     6              5120            0          0          0             0                                         
bgp                     4              2000            0          0          0             0                                         
bgpv6                   4              2000            0          0          0             0                                         
bpdu                    6              128             1          0          696           0                                         
cdp                     5              768             0          0          0             0                                         
cfm                     5              512             0          0          0             0                                         
dhcp-relay-c            2              1500            0          0          0             0                                         
dhcp-relay-s            2              1500            0          0          0             0                                         
dhcp6-client            2              1500            0          0          0             0                                         
dhcp6-relay             2              1500            0          0          0             0                                         
dhcp6-server            2              1500            0          0          0             0                                         
dhcps                   2              1500            0          0          0             0                                         
dhcps6                  2              1500            0          0          0             0                                         
dldp                    6              3200            0          0          0             0                                         
dns-client              3              200             0          0          0             0                                         
dns-server              3              200             0          0          0             0                                         
dot1x                   2              1500            0          0          0             0                                         
dvmrp                   4              128             0          0          0             0                                         
efm                     5              1000            0          0          0             0                                         
erps                    5              128             0          0          0             0                                         
fcoe-fip                4              1000            0          0          0             0                                         
fcoe-local              4              1000            0          0          0             0                                         
fpga-cfg                7              2000            0          0          0             0                                         
fpga-notify             0              1000            0          0          0             0                                         
gvrp                    5              128             0          0          0             0                                         
hop-limit               0              800             0          0          0             0                                         
icmp                    3              4500            0          0          0             0                                         
igmp                    2              1000            0          0          0             0                                         
igmp-drop               2              1000            0          0          0             0                                         
ip-option               0              800             0          0          0             0                                         
ip-option6              0              800             0          0          0             0                                         
ipfix                   0              2000            0          0          0             0                                         
ipv6-all                0              2000            0          0          0             0                                         
isis                    4              2000            0          0          0             0                                         
l3mtu-fail              0              100             0          0          0             0                                         
lacp                    5              256             0          0          0             0                                         
lldp                    5              768             0          0          0             0                                         
local-ipv4              3              4000            0          0          0             0                                         
local-ipv6              3              4000            0          0          0             0                                         
mac-move                0              2000            0          0          0             0                                         
madp                    6              1000            0          0          0             0                                         
mgmt                    -              2500            0          0          0             0                                         
mlag                    5              1024            0          0          0             0                                         
mld                     2              1000            0          0          0             0                                         
mld-drop                2              128             0          0          0             0                                         
mpls-ctrl               4              128             0          0          0             0                                         
mpls-ctrl-v6            4              128             0          0          0             0                                         
mpls-ttl0               4              128             0          0          0             0                                         
mpls-ttl1               4              128             0          0          0             0                                         
nacm-drop               2              128             0          0          0             0                                         
nd-non-snp              1              10000           0          0          0             0                                         
nd-snp-ns-na            1              10000           0          0          0             0                                         
nd-snp-ns-na-l3         1              10000           0          0          0             0                                         
nd-snp-ra-redirect      1              1500            0          0          0             0                                         
nd-snp-ra-redirect-l3   1              1500            0          0          0             0                                         
nd-snp-rs               1              1500            0          0          0             0                                         
nd-snp-rs-l3            1              1500            0          0          0             0                                         
nd-vxlan                1              10000           0          0          0             0                                         
ndsnp                   1              4000            0          0          0             0                                         
option82                2              1500            0          0          0             0                                         
ospf                    4              2000            0          0          0             0                                         
ospf3                   4              2000            0          0          0             0                                         
other                   0              2000            0          0          0             0                                         
pim                     4              1000            0          0          0             0                                         
pimv6                   4              1000            0          0          0             0                                         
rerp                    5              128             0          0          0             0                                         
reup                    5              128             0          0          0             0                                         
rip                     4              600             0          0          0             0                                         
ripng                   4              128             0          0          0             0                                         
rldp                    5              128             0          0          0             0                                         
rt-host                 4              4096            0          0          0             0                                         
rt-hostv6               4              4096            0          0          0             0                                         
sbfd                    6              1000            0          0          0             0                                         
sdn                     0              20000           0          0          0             0                                         
sflow                   0              2000            0          0          0             0                                         
snmp                    3              1100            0          0          0             0                                         
ssh                     3              1100            0          0          0             0                                         
stargv-ipmc             2              128             0          0          0             0                                         
stargv6-ipmc            1              128             0          0          0             0                                         
tcp-syn                 3              1000            0          0          0             0                                         
telnet                  3              1100            0          0          0             0                                         
tpp                     6              128             0          0          0             0                                         
trill                   4              1000            0          0          0             0                                         
trill-isis              4              1000            0          0          0             0                                         
trill-local             4              1000            0          0          0             0                                         
trill-oam               4              1000            0          0          0             0                                         
ttl0                    0              128             0          0          0             0                                         
ttl1                    0              2000            0          0          0             0                                         
tunnel-bpdu             2              128             0          0          0             0                                         
tunnel-gvrp             2              128             0          0          0             0                                         
udp-flood               3              0               0          0          0             0                                         
unknown-v4mc            1              128             0          0          0             0                                         
unknown-v6mc            1              128             0          0          0             0                                         
v4uc-route              1              800             0          0          0             0                                         
v6uc-route              1              800             0          0          0             0                                         
vrrp                    6              256             0          0          0             0                                         
vrrpv6                  6              256             0          0          0             0                                         
web-auth                2              2000            0          0          0             0                                         
xgv-ipmc                2              128             0          0          0             0                                         
xgv6-ipmc               1              128             0          0          0             0

        Returns:
{"fcoe-fip/Traffic-class": "4"
"stargv6-ipmc/Total": "0"
"nd-non-snp/Total Drop": "0"
"nd-snp-rs/Total Drop": "0"
"lldp/Bandwidth(pps)": "768"
"dhcp6-server/Drop(pps)": "0"
"mac-move/Total Drop": "0"
"mld/Traffic-class": "2"
"hop-limit/Traffic-class": "0"
"dns-server/Traffic-class": "3"
"fpga-notify/Bandwidth(pps)": "1000"
"stargv-ipmc/DropTime": ""
"unknown-v6mc/DropTime": ""
"ospf3/Drop(pps)": "0"
"cfm/Total": "0"
"trill/Traffic-class": "4"
"sdn/Total": "0"
"dhcp-relay-s/Drop(pps)": "0"
"tpp/DropTime": ""
"efm/DropTime": ""
"trill-oam/Total Drop": "0"
"l3mtu-fail/Rate(pps)": "0"
"web-auth/DropTime": ""
"mld-drop/Bandwidth(pps)": "128"
"v6uc-route/Drop(pps)": "0"
"web-auth/Total Drop": "0"
"pimv6/Rate(pps)": "0"
"hop-limit/Total Drop": "0"
"arp-auth-proxy/Traffic-class": "1"
"icmp/Rate(pps)": "0"
"mpls-ctrl-v6/Total Drop": "0"
"mld-drop/Total Drop": "0"
"rt-hostv6/Total Drop": "0"
"ttl0/Rate(pps)": "0"
"udp-flood/Drop(pps)": "0"
"mld-drop/Traffic-class": "2"
"nd-snp-ns-na/DropTime": ""
"rt-hostv6/Drop(pps)": "0"
"ipv6-all/Total Drop": "0"
"stargv-ipmc/Rate(pps)": "0"
"unknown-v6mc/Rate(pps)": "0"
"web-auth/Drop(pps)": "0"
"ip-option6/Drop(pps)": "0"
"cdp/Total": "0"
"dns-client/Total Drop": "0"
"ndsnp/Traffic-class": "1"
"ttl0/Drop(pps)": "0"
"lacp/Total": "0"
"erps/DropTime": ""
"reup/Rate(pps)": "0"
"rip/Bandwidth(pps)": "600"
"mlag/Traffic-class": "5"
"bfd/Drop(pps)": "0"
"efm/Drop(pps)": "0"
"dot1x/Total": "0"
"trill-local/Bandwidth(pps)": "1000"
"dhcp6-client/Total Drop": "0"
"other/Total": "0"
"nd-snp-ra-redirect-l3/Total Drop": "0"
"mlag/Bandwidth(pps)": "1024"
"stargv6-ipmc/Rate(pps)": "0"
"l3mtu-fail/DropTime": ""
"nd-snp-rs-l3/Drop(pps)": "0"
"igmp/Total Drop": "0"
"v6uc-route/Rate(pps)": "0"
"ipfix/DropTime": ""
"dhcps/Bandwidth(pps)": "1500"
"dvmrp/Bandwidth(pps)": "128"
"bgpv6/Bandwidth(pps)": "2000"
"hop-limit/DropTime": ""
"tcp-syn/Total": "0"
"local-ipv6/Traffic-class": "3"
"sdn/Bandwidth(pps)": "20000"
"madp/DropTime": ""
"efm/Bandwidth(pps)": "1000"
"fpga-cfg/DropTime": ""
"mlag/Total Drop": "0"
"ospf/Rate(pps)": "0"
"trill-local/Drop(pps)": "0"
"sdn/DropTime": ""
"nd-snp-ra-redirect/Traffic-class": "1"
"rip/Drop(pps)": "0"
"lldp/Rate(pps)": "0"
"arp/Traffic-class": "1"
"lacp/DropTime": ""
"trill/Total Drop": "0"
"ripng/Total Drop": "0"
"ip-option/Total Drop": "0"
"nd-snp-rs/DropTime": ""
"rerp/Drop(pps)": "0"
"ripng/Rate(pps)": "0"
"bpdu/Total": "696"
"stargv6-ipmc/DropTime": ""
"rldp/Drop(pps)": "0"
"local-ipv4/Traffic-class": "3"
"cfm/Rate(pps)": "0"
"dhcps/Rate(pps)": "0"
"mpls-ctrl/Traffic-class": "4"
"fcoe-local/Drop(pps)": "0"
"dhcp-relay-c/DropTime": ""
"ip-option6/Total": "0"
"nd-snp-ra-redirect/Bandwidth(pps)": "1500"
"mpls-ttl1/Traffic-class": "4"
"mpls-ctrl-v6/DropTime": ""
"fpga-cfg/Drop(pps)": "0"
"dhcps6/Traffic-class": "2"
"dhcp-relay-c/Traffic-class": "2"
"madp/Total": "0"
"hop-limit/Drop(pps)": "0"
"igmp-drop/DropTime": ""
"nd-vxlan/Rate(pps)": "0"
"arp/Total Drop": "16"
"rip/Total Drop": "0"
"nd-snp-ns-na-l3/Traffic-class": "1"
"other/DropTime": ""
"dns-server/Rate(pps)": "0"
"mlag/Rate(pps)": "0"
"hop-limit/Total": "0"
"snmp/Bandwidth(pps)": "1100"
"trill-local/Total Drop": "0"
"mpls-ctrl/Rate(pps)": "0"
"tcp-syn/Total Drop": "0"
"mld/Total": "0"
"ssh/DropTime": ""
"ripng/DropTime": ""
"v4uc-route/Total": "0"
"other/Rate(pps)": "0"
"tunnel-bpdu/Traffic-class": "2"
"bfd/DropTime": ""
"mld-drop/DropTime": ""
"mac-move/Traffic-class": "0"
"snmp/Total Drop": "0"
"hop-limit/Bandwidth(pps)": "800"
"ttl0/Total Drop": "0"
"nd-snp-ns-na-l3/Total Drop": "0"
"xgv-ipmc/DropTime": ""
"fcoe-local/Total": "0"
"dns-client/DropTime": ""
"rt-hostv6/Traffic-class": "4"
"mgmt/Traffic-class": "-"
"nd-snp-ra-redirect-l3/Drop(pps)": "0"
"nd-snp-rs-l3/Bandwidth(pps)": "1500"
"gvrp/Rate(pps)": "0"
"isis/Rate(pps)": "0"
"nd-snp-rs-l3/Rate(pps)": "0"
"cdp/DropTime": ""
"ospf/Total Drop": "0"
"icmp/Total Drop": "0"
"telnet/Bandwidth(pps)": "1100"
"dhcps6/Bandwidth(pps)": "1500"
"mpls-ttl1/Total Drop": "0"
"rldp/Total Drop": "0"
"rldp/DropTime": ""
"dhcps6/Total": "0"
"reup/Bandwidth(pps)": "128"
"tpp/Drop(pps)": "0"
"cdp/Traffic-class": "5"
"arp-auth-proxy/Drop(pps)": "0"
"tunnel-bpdu/Total": "0"
"cfm/Bandwidth(pps)": "512"
"arp/Bandwidth(pps)": "10000"
"dldp/Total Drop": "0"
"dns-client/Total": "0"
"nacm-drop/Rate(pps)": "0"
"bgp/Rate(pps)": "0"
"mlag/Drop(pps)": "0"
"nd-snp-ns-na-l3/Bandwidth(pps)": "10000"
"xgv6-ipmc/Traffic-class": "1"
"stargv6-ipmc/Traffic-class": "1"
"mpls-ctrl-v6/Total": "0"
"sflow/Total": "0"
"cdp/Total Drop": "0"
"dns-client/Traffic-class": "3"
"tunnel-gvrp/Rate(pps)": "0"
"dns-client/Bandwidth(pps)": "200"
"ipv6-all/Drop(pps)": "0"
"local-ipv6/DropTime": ""
"stargv6-ipmc/Total Drop": "0"
"ripng/Traffic-class": "4"
"trill-oam/Drop(pps)": "0"
"dhcp6-client/DropTime": ""
"ipfix/Rate(pps)": "0"
"rip/Rate(pps)": "0"
"ip-option/Drop(pps)": "0"
"dhcp6-client/Drop(pps)": "0"
"ssh/Bandwidth(pps)": "1100"
"nd-non-snp/Traffic-class": "1"
"nd-snp-ra-redirect-l3/DropTime": ""
"bgp/DropTime": ""
"pimv6/Traffic-class": "4"
"ip-option6/Total Drop": "0"
"igmp-drop/Traffic-class": "2"
"tcp-syn/Rate(pps)": "0"
"dhcp6-relay/Rate(pps)": "0"
"icmp/Total": "0"
"ospf3/Total Drop": "0"
"pim/Rate(pps)": "0"
"fpga-notify/Drop(pps)": "0"
"mpls-ttl0/Bandwidth(pps)": "128"
"mpls-ttl0/Total Drop": "0"
"ip-option/Bandwidth(pps)": "800"
"dhcp6-client/Total": "0"
"local-ipv4/Drop(pps)": "0"
"lldp/DropTime": ""
"isis/Bandwidth(pps)": "2000"
"dhcp6-server/Bandwidth(pps)": "1500"
"fcoe-fip/Drop(pps)": "0"
"ssh/Drop(pps)": "0"
"xgv6-ipmc/Drop(pps)": "0"
"mlag/Total": "0"
"sbfd/Rate(pps)": "0"
"local-ipv6/Rate(pps)": "0"
"fpga-notify/Traffic-class": "0"
"ip-option6/Traffic-class": "0"
"nacm-drop/Total": "0"
"ospf/Total": "0"
"tpp/Total Drop": "0"
"fcoe-fip/Bandwidth(pps)": "1000"
"dvmrp/Total Drop": "0"
"madp/Bandwidth(pps)": "1000"
"ip-option6/Bandwidth(pps)": "800"
"nacm-drop/Total Drop": "0"
"dldp/Rate(pps)": "0"
"dhcp6-server/Total": "0"
"dhcp6-server/DropTime": ""
"arp/Drop(pps)": "0"
"dot1x/DropTime": ""
"lacp/Total Drop": "0"
"ndsnp/Bandwidth(pps)": "4000"
"mpls-ttl1/Rate(pps)": "0"
"cdp/Drop(pps)": "0"
"local-ipv6/Bandwidth(pps)": "4000"
"nacm-drop/Traffic-class": "2"
"ipfix/Total Drop": "0"
"vrrpv6/Rate(pps)": "0"
"dhcp-relay-c/Total": "0"
"dvmrp/Drop(pps)": "0"
"lldp/Total Drop": "0"
"ttl0/Bandwidth(pps)": "128"
"efm/Total Drop": "0"
"unknown-v4mc/Total": "0"
"sbfd/Total": "0"
"tcp-syn/Drop(pps)": "0"
"snmp/Rate(pps)": "0"
"local-ipv4/DropTime": ""
"igmp/Drop(pps)": "0"
"lacp/Rate(pps)": "0"
"telnet/DropTime": ""
"bgp/Drop(pps)": "0"
"mld/DropTime": ""
"dot1x/Drop(pps)": "0"
"rldp/Total": "0"
"dot1x/Total Drop": "0"
"sflow/Traffic-class": "0"
"fcoe-local/Traffic-class": "4"
"rt-host/Traffic-class": "4"
"local-ipv4/Bandwidth(pps)": "4000"
"lldp/Total": "0"
"telnet/Traffic-class": "3"
"ospf3/Rate(pps)": "0"
"bfd/Bandwidth(pps)": "5120"
"tunnel-gvrp/Total Drop": "0"
"ospf3/Bandwidth(pps)": "2000"
"ripng/Drop(pps)": "0"
"lacp/Bandwidth(pps)": "256"
"nd-vxlan/Total Drop": "0"
"dns-server/Total Drop": "0"
"dhcp6-relay/Total": "0"
"cfm/Total Drop": "0"
"dhcp-relay-s/Traffic-class": "2"
"nd-snp-ns-na/Traffic-class": "1"
"nd-snp-rs/Drop(pps)": "0"
"rldp/Bandwidth(pps)": "128"
"arp-auth-proxy/Bandwidth(pps)": "10000"
"trill/DropTime": ""
"unknown-v4mc/Drop(pps)": "0"
"dvmrp/Rate(pps)": "0"
"nd-snp-rs-l3/Total Drop": "0"
"Packet Type_list": ["arp"
"arp-auth-proxy"
"bfd"
"bgp"
"bgpv6"
"bpdu"
"cdp"
"cfm"
"dhcp-relay-c"
"dhcp-relay-s"
"dhcp6-client"
"dhcp6-relay"
"dhcp6-server"
"dhcps"
"dhcps6"
"dldp"
"dns-client"
"dns-server"
"dot1x"
"dvmrp"
"efm"
"erps"
"fcoe-fip"
"fcoe-local"
"fpga-cfg"
"fpga-notify"
"gvrp"
"hop-limit"
"icmp"
"igmp"
"igmp-drop"
"ip-option"
"ip-option6"
"ipfix"
"ipv6-all"
"isis"
"l3mtu-fail"
"lacp"
"lldp"
"local-ipv4"
"local-ipv6"
"mac-move"
"madp"
"mgmt"
"mlag"
"mld"
"mld-drop"
"mpls-ctrl"
"mpls-ctrl-v6"
"mpls-ttl0"
"mpls-ttl1"
"nacm-drop"
"nd-non-snp"
"nd-snp-ns-na"
"nd-snp-ns-na-l3"
"nd-snp-ra-redirect"
"nd-snp-ra-redirect-l3"
"nd-snp-rs"
"nd-snp-rs-l3"
"nd-vxlan"
"ndsnp"
"option82"
"ospf"
"ospf3"
"other"
"pim"
"pimv6"
"rerp"
"reup"
"rip"
"ripng"
"rldp"
"rt-host"
"rt-hostv6"
"sbfd"
"sdn"
"sflow"
"snmp"
"ssh"
"stargv-ipmc"
"stargv6-ipmc"
"tcp-syn"
"telnet"
"tpp"
"trill"
"trill-isis"
"trill-local"
"trill-oam"
"ttl0"
"ttl1"
"tunnel-bpdu"
"tunnel-gvrp"
"udp-flood"
"unknown-v4mc"
"unknown-v6mc"
"v4uc-route"
"v6uc-route"
"vrrp"
"vrrpv6"
"web-auth"
"xgv-ipmc"
"xgv6-ipmc"], "fpga-cfg/Bandwidth(pps)": "2000"
"pimv6/Drop(pps)": "0"
"dvmrp/Traffic-class": "4"
"isis/Total": "0"
"ndsnp/Drop(pps)": "0"
"xgv-ipmc/Total": "0"
"v6uc-route/Total Drop": "0"
"dhcp6-relay/Drop(pps)": "0"
"mpls-ttl1/Drop(pps)": "0"
"rt-hostv6/DropTime": ""
"l3mtu-fail/Bandwidth(pps)": "100"
"sflow/Rate(pps)": "0"
"igmp-drop/Rate(pps)": "0"
"tcp-syn/Bandwidth(pps)": "1000"
"hop-limit/Rate(pps)": "0"
"isis/DropTime": ""
"trill-oam/Traffic-class": "4"
"dhcp-relay-s/Rate(pps)": "0"
"icmp/Drop(pps)": "0"
"mpls-ttl0/DropTime": ""
"mgmt/Total Drop": "0"
"fpga-cfg/Total Drop": "0"
"pim/Bandwidth(pps)": "1000"
"ripng/Total": "0"
"mpls-ctrl-v6/Bandwidth(pps)": "128"
"rt-host/Rate(pps)": "0"
"ipfix/Bandwidth(pps)": "2000"
"dns-client/Rate(pps)": "0"
"isis/Drop(pps)": "0"
"lacp/Drop(pps)": "0"
"lldp/Drop(pps)": "0"
"xgv6-ipmc/Total": "0"
"bgpv6/Traffic-class": "4"
"vrrp/Total": "0"
"fcoe-fip/Total": "0"
"mpls-ttl1/Bandwidth(pps)": "128"
"ttl1/Rate(pps)": "0"
"nd-snp-ns-na/Total Drop": "0"
"pim/Total": "0"
"pimv6/Total Drop": "0"
"nd-snp-ns-na-l3/Drop(pps)": "0"
"dhcps/Drop(pps)": "0"
"nd-snp-ns-na-l3/Rate(pps)": "0"
"option82/Drop(pps)": "0"
"dldp/Drop(pps)": "0"
"igmp-drop/Drop(pps)": "0"
"pim/Total Drop": "0"
"fcoe-local/Total Drop": "0"
"ospf3/Total": "0"
"icmp/Bandwidth(pps)": "4500"
"unknown-v6mc/Bandwidth(pps)": "128"
"arp/Total": "5275"
"igmp/Rate(pps)": "0"
"ttl0/Total": "0"
"mlag/DropTime": ""
"igmp/Bandwidth(pps)": "1000"
"nd-snp-ra-redirect/DropTime": ""
"vrrpv6/Bandwidth(pps)": "256"
"mpls-ttl0/Drop(pps)": "0"
"nd-snp-ra-redirect/Drop(pps)": "0"
"mld-drop/Total": "0"
"ipv6-all/Bandwidth(pps)": "2000"
"nd-snp-ns-na/Total": "0"
"nd-snp-ns-na/Drop(pps)": "0"
"l3mtu-fail/Total Drop": "0"
"fcoe-fip/Rate(pps)": "0"
"ip-option/Total": "0"
"cdp/Rate(pps)": "0"
"ip-option/Rate(pps)": "0"
"xgv6-ipmc/Bandwidth(pps)": "128"
"dhcp6-relay/DropTime": ""
"mpls-ctrl-v6/Rate(pps)": "0"
"sbfd/Drop(pps)": "0"
"cfm/DropTime": ""
"isis/Total Drop": "0"
"nd-snp-rs-l3/Traffic-class": "1"
"mld/Bandwidth(pps)": "1000"
"mac-move/Total": "0"
"stargv-ipmc/Traffic-class": "2"
"fpga-cfg/Total": "0"
"trill-local/Rate(pps)": "0"
"unknown-v6mc/Drop(pps)": "0"
"stargv-ipmc/Drop(pps)": "0"
"tpp/Traffic-class": "6"
"tunnel-bpdu/Rate(pps)": "0"
"fpga-notify/Rate(pps)": "0"
"option82/Rate(pps)": "0"
"dhcp6-client/Traffic-class": "2"
"trill-isis/Total Drop": "0"
"local-ipv6/Drop(pps)": "0"
"dhcps/Total Drop": "0"
"madp/Total Drop": "0"
"dhcp6-relay/Traffic-class": "2"
"pimv6/Total": "0"
"option82/Traffic-class": "2"
"nd-non-snp/Drop(pps)": "0"
"xgv6-ipmc/Total Drop": "0"
"mpls-ctrl-v6/Traffic-class": "4"
"rt-host/Bandwidth(pps)": "4096"
"stargv-ipmc/Total": "0"
"unknown-v6mc/Total": "0"
"fcoe-local/DropTime": ""
"vrrp/Rate(pps)": "0"
"local-ipv4/Total": "0"
"udp-flood/Total Drop": "0"
"rt-hostv6/Bandwidth(pps)": "4096"
"ipv6-all/Total": "0"
"udp-flood/Bandwidth(pps)": "0"
"mld/Rate(pps)": "0"
"bfd/Traffic-class": "6"
"igmp/Total": "0"
"tunnel-gvrp/DropTime": ""
"pim/DropTime": ""
"trill-isis/Total": "0"
"other/Drop(pps)": "0"
"nd-snp-ra-redirect-l3/Bandwidth(pps)": "1500"
"tpp/Total": "0"
"dns-server/Drop(pps)": "0"
"efm/Total": "0"
"dot1x/Rate(pps)": "0"
"fcoe-local/Bandwidth(pps)": "1000"
"madp/Rate(pps)": "0"
"dhcps/Total": "0"
"nd-snp-ra-redirect-l3/Total": "0"
"dhcp-relay-c/Bandwidth(pps)": "1500"
"snmp/Total": "0"
"igmp/Traffic-class": "2"
"fpga-notify/Total Drop": "0"
"telnet/Rate(pps)": "0"
"rerp/Bandwidth(pps)": "128"
"other/Bandwidth(pps)": "2000"
"ip-option/Traffic-class": "0"
"v6uc-route/Total": "0"
"dhcps6/Total Drop": "0"
"dns-client/Drop(pps)": "0"
"bfd/Total Drop": "0"
"v4uc-route/Drop(pps)": "0"
"mgmt/Bandwidth(pps)": "2500"
"xgv-ipmc/Total Drop": "0"
"igmp/DropTime": ""
"dhcps6/Rate(pps)": "0"
"ssh/Total Drop": "0"
"sflow/Bandwidth(pps)": "2000"
"sdn/Traffic-class": "0"
"local-ipv6/Total Drop": "0"
"dhcp6-server/Total Drop": "0"
"pim/Traffic-class": "4"
"reup/Total Drop": "0"
"sbfd/Traffic-class": "6"
"tunnel-bpdu/Drop(pps)": "0"
"mpls-ttl1/Total": "0"
"madp/Drop(pps)": "0"
"tpp/Rate(pps)": "0"
"udp-flood/Rate(pps)": "0"
"mpls-ttl0/Rate(pps)": "0"
"mpls-ttl0/Total": "0"
"ospf/Traffic-class": "4"
"other/Traffic-class": "0"
"snmp/DropTime": ""
"tunnel-gvrp/Drop(pps)": "0"
"dldp/Total": "0"
"l3mtu-fail/Drop(pps)": "0"
"tunnel-gvrp/Traffic-class": "2"
"sflow/Total Drop": "0"
"rerp/Rate(pps)": "0"
"v4uc-route/Total Drop": "0"
"trill/Total": "0"
"rt-host/DropTime": ""
"sbfd/Total Drop": "0"
"trill/Bandwidth(pps)": "1000"
"tunnel-gvrp/Bandwidth(pps)": "128"
"vrrpv6/Total": "0"
"arp-auth-proxy/Total": "0"
"dldp/Traffic-class": "6"
"vrrp/DropTime": ""
"ipv6-all/Rate(pps)": "0"
"reup/Drop(pps)": "0"
"dns-server/DropTime": ""
"dhcp-relay-c/Drop(pps)": "0"
"v4uc-route/Rate(pps)": "0"
"ipfix/Traffic-class": "0"
"nd-non-snp/Total": "0"
"bpdu/DropTime": ""
"telnet/Drop(pps)": "0"
"pimv6/DropTime": ""
"nacm-drop/Drop(pps)": "0"
"web-auth/Bandwidth(pps)": "2000"
"stargv6-ipmc/Drop(pps)": "0"
"efm/Rate(pps)": "0"
"dot1x/Traffic-class": "2"
"dhcps6/DropTime": ""
"option82/DropTime": ""
"dldp/Bandwidth(pps)": "3200"
"rerp/Traffic-class": "5"
"dhcp-relay-c/Rate(pps)": "0"
"xgv-ipmc/Rate(pps)": "0"
"arp-auth-proxy/Total Drop": "0"
"option82/Total Drop": "0"
"ipfix/Total": "0"
"bpdu/Total Drop": "0"
"trill-isis/Rate(pps)": "0"
"dvmrp/DropTime": ""
"dhcps6/Drop(pps)": "0"
"v6uc-route/Bandwidth(pps)": "800"
"reup/Total": "0"
"v6uc-route/DropTime": ""
"mac-move/DropTime": ""
"fpga-cfg/Traffic-class": "7"
"tunnel-bpdu/Total Drop": "0"
"udp-flood/DropTime": ""
"ttl1/Total Drop": "0"
"ndsnp/Total Drop": "0"
"ospf/Drop(pps)": "0"
"bgp/Total Drop": "0"
"erps/Drop(pps)": "0"
"bpdu/Rate(pps)": "1"
"icmp/DropTime": ""
"bgpv6/Drop(pps)": "0"
"mpls-ttl1/DropTime": ""
"arp/DropTime": "Sat Feb 22 23:01:56 2020"
"vrrp/Bandwidth(pps)": "256"
"trill-oam/Total": "0"
"nd-vxlan/Drop(pps)": "0"
"nacm-drop/Bandwidth(pps)": "128"
"dhcp-relay-s/DropTime": ""
"pim/Drop(pps)": "0"
"ripng/Bandwidth(pps)": "128"
"bfd/Rate(pps)": "0"
"mld-drop/Drop(pps)": "0"
"nd-vxlan/Traffic-class": "1"
"nd-snp-rs/Traffic-class": "1"
"v4uc-route/Bandwidth(pps)": "800"
"xgv-ipmc/Traffic-class": "2"
"snmp/Drop(pps)": "0"
"dhcp-relay-s/Total Drop": "0"
"ttl0/DropTime": ""
"nd-non-snp/Bandwidth(pps)": "10000"
"tunnel-bpdu/Bandwidth(pps)": "128"
"dhcp-relay-s/Bandwidth(pps)": "1500"
"ttl1/Drop(pps)": "0"
"igmp-drop/Total Drop": "0"
"option82/Bandwidth(pps)": "1500"
"ttl0/Traffic-class": "0"
"ip-option/DropTime": ""
"rldp/Traffic-class": "5"
"nd-snp-rs-l3/Total": "0"
"ttl1/Bandwidth(pps)": "2000"
"bpdu/Bandwidth(pps)": "128"
"mld/Drop(pps)": "0"
"v4uc-route/Traffic-class": "1"
"nd-snp-ra-redirect-l3/Traffic-class": "1"
"bpdu/Traffic-class": "6"
"dhcp6-server/Rate(pps)": "0"
"icmp/Traffic-class": "3"
"unknown-v4mc/Traffic-class": "1"
"mac-move/Drop(pps)": "0"
"igmp-drop/Total": "0"
"trill-local/DropTime": ""
"rip/DropTime": ""
"vrrpv6/Drop(pps)": "0"
"ndsnp/Rate(pps)": "0"
"sflow/Drop(pps)": "0"
"rip/Traffic-class": "4"
"fpga-notify/DropTime": ""
"trill-local/Traffic-class": "4"
"tcp-syn/Traffic-class": "3"
"ipv6-all/Traffic-class": "0"
"dhcp6-server/Traffic-class": "2"
"arp/Rate(pps)": "0"
"gvrp/Drop(pps)": "0"
"erps/Rate(pps)": "0"
"nd-vxlan/DropTime": ""
"mac-move/Rate(pps)": "0"
"igmp-drop/Bandwidth(pps)": "1000"
"ndsnp/DropTime": ""
"fcoe-fip/DropTime": ""
"unknown-v4mc/Rate(pps)": "0"
"mpls-ttl0/Traffic-class": "4"
"gvrp/Total": "0"
"trill-isis/Drop(pps)": "0"
"trill-local/Total": "0"
"dhcp6-client/Rate(pps)": "0"
"stargv-ipmc/Bandwidth(pps)": "128"
"tcp-syn/DropTime": ""
"local-ipv4/Rate(pps)": "0"
"mac-move/Bandwidth(pps)": "2000"
"ospf3/DropTime": ""
"udp-flood/Total": "0"
"nd-snp-ns-na-l3/DropTime": ""
"cdp/Bandwidth(pps)": "768"
"web-auth/Traffic-class": "2"
"arp-auth-proxy/DropTime": ""
"gvrp/DropTime": ""
"unknown-v6mc/Total Drop": "0"
"stargv-ipmc/Total Drop": "0"
"mgmt/DropTime": ""
"bgp/Bandwidth(pps)": "2000"
"mpls-ctrl/DropTime": ""
"fpga-notify/Total": "0"
"bgpv6/Rate(pps)": "0"
"nd-snp-ra-redirect/Rate(pps)": "0"
"bgp/Total": "0"
"reup/DropTime": ""
"mpls-ctrl/Drop(pps)": "0"
"ttl1/DropTime": ""
"rldp/Rate(pps)": "0"
"dns-server/Bandwidth(pps)": "200"
"dhcps/DropTime": ""
"vrrpv6/DropTime": ""
"fpga-cfg/Rate(pps)": "0"
"nacm-drop/DropTime": ""
"unknown-v4mc/DropTime": ""
"vrrp/Traffic-class": "6"
"nd-snp-rs/Bandwidth(pps)": "1500"
"cfm/Traffic-class": "5"
"ipfix/Drop(pps)": "0"
"ospf/DropTime": ""
"bgpv6/Total Drop": "0"
"mgmt/Total": "0"
"unknown-v6mc/Traffic-class": "1"
"rerp/Total": "0"
"ip-option6/DropTime": ""
"other/Total Drop": "0"
"l3mtu-fail/Total": "0"
"unknown-v4mc/Total Drop": "0"
"nd-vxlan/Bandwidth(pps)": "10000"
"cfm/Drop(pps)": "0"
"bgp/Traffic-class": "4"
"xgv6-ipmc/DropTime": ""
"rerp/DropTime": ""
"tunnel-bpdu/DropTime": ""
"unknown-v4mc/Bandwidth(pps)": "128"
"dhcp-relay-c/Total Drop": "0"
"rt-hostv6/Rate(pps)": "0"
"isis/Traffic-class": "4"
"bgpv6/DropTime": ""
"rip/Total": "0"
"trill-oam/Rate(pps)": "0"
"telnet/Total": "0"
"rt-host/Total Drop": "0"
"mld-drop/Rate(pps)": "0"
"madp/Traffic-class": "6"
"sbfd/DropTime": ""
"gvrp/Bandwidth(pps)": "128"
"ip-option6/Rate(pps)": "0"
"nd-snp-rs/Total": "0"
"l3mtu-fail/Traffic-class": "0"
"dns-server/Total": "0"
"nd-vxlan/Total": "0"
"dhcp6-relay/Bandwidth(pps)": "1500"
"ndsnp/Total": "0"
"tunnel-gvrp/Total": "0"
"trill-oam/DropTime": ""
"trill/Rate(pps)": "0"
"nd-snp-ra-redirect/Total Drop": "0"
"lacp/Traffic-class": "5"
"dot1x/Bandwidth(pps)": "1500"
"tpp/Bandwidth(pps)": "128"
"dldp/DropTime": ""
"dvmrp/Total": "0"
"nd-non-snp/DropTime": ""
"pimv6/Bandwidth(pps)": "1000"
"mld/Total Drop": "0"
"dhcp6-relay/Total Drop": "0"
"nd-snp-ra-redirect-l3/Rate(pps)": "0"
"rt-hostv6/Total": "0"
"vrrpv6/Total Drop": "0"
"nd-snp-ns-na-l3/Total": "0"
"trill-isis/Bandwidth(pps)": "1000"
"bgpv6/Total": "0"
"xgv6-ipmc/Rate(pps)": "0"
"fcoe-fip/Total Drop": "0"
"sdn/Total Drop": "0"
"mpls-ctrl/Total Drop": "0"
"ospf3/Traffic-class": "4"
"trill-oam/Bandwidth(pps)": "1000"
"erps/Bandwidth(pps)": "128"
"mpls-ctrl/Bandwidth(pps)": "128"
"v4uc-route/DropTime": ""
"dhcp6-client/Bandwidth(pps)": "1500"
"lldp/Traffic-class": "5"
"bpdu/Drop(pps)": "0"
"erps/Traffic-class": "5"
"mpls-ctrl/Total": "0"
"rt-host/Drop(pps)": "0"
"gvrp/Total Drop": "0"
"nd-snp-ns-na/Rate(pps)": "0"
"vrrp/Drop(pps)": "0"
"mgmt/Drop(pps)": "0"
"vrrpv6/Traffic-class": "6"
"option82/Total": "0"
"rerp/Total Drop": "0"
"fcoe-local/Rate(pps)": "0"
"dhcps/Traffic-class": "2"
"telnet/Total Drop": "0"
"sflow/DropTime": ""
"trill-isis/Traffic-class": "4"
"erps/Total": "0"
"snmp/Traffic-class": "3"
"nd-snp-rs-l3/DropTime": ""
"nd-non-snp/Rate(pps)": "0"
"reup/Traffic-class": "5"
"stargv6-ipmc/Bandwidth(pps)": "128"
"local-ipv6/Total": "0"
"rt-host/Total": "0"
"ssh/Traffic-class": "3"
"nd-snp-ra-redirect/Total": "0"
"erps/Total Drop": "0"
"ttl1/Traffic-class": "0"
"ssh/Rate(pps)": "0"
"web-auth/Total": "0"
"ipv6-all/DropTime": ""
"trill-isis/DropTime": ""
"gvrp/Traffic-class": "5"
"vrrp/Total Drop": "0"
"dhcp-relay-s/Total": "0"
"mgmt/Rate(pps)": "0"
"sdn/Rate(pps)": "0"
"efm/Traffic-class": "5"
"mpls-ctrl-v6/Drop(pps)": "0"
"local-ipv4/Total Drop": "0"
"sbfd/Bandwidth(pps)": "1000"
"arp-auth-proxy/Rate(pps)": "0"
"xgv-ipmc/Drop(pps)": "0"
"sdn/Drop(pps)": "0"
"ssh/Total": "0"
"ospf/Bandwidth(pps)": "2000"
"nd-snp-rs/Rate(pps)": "0"
"web-auth/Rate(pps)": "0"
"v6uc-route/Traffic-class": "1"
"udp-flood/Traffic-class": "3"
"nd-snp-ns-na/Bandwidth(pps)": "10000"
"xgv-ipmc/Bandwidth(pps)": "128"
"trill/Drop(pps)": "0"
"bfd/Total": "0"
"ttl1/Total": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show cpu-protect device <num> slot <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        show_list1 = []
        show_list2 = []
        flag = 0
        for value in show_info_list:
            if "Packet Type" in value:
                flag = 1
            if flag == 0 :
                show_list1.append(value)
            else:
                show_list2.append(value)
        show_info_1 = "\n".join(show_list1)
        show_info_2 = "\n".join(show_list2)
        dict_value1 = self.dut_show_autoget_whippletree_form_analysis(show_info_1,"Traffic-class",ago_colon_last_str=1)
        dict_value2 = self.dut_show_autoget_whippletree_form_analysis(show_info_2, "Packet Type")
        return dict(dict_value1.items()+dict_value2.items())
    def dut_get_show_ip_flow_export(self,show_info):
        """
        Function:show ip flow export回显解析函数
        CLI命令:show ip flow export
        回显信息示例:
Ruijie#show ip flow export

IPV4 main Cache:
 Exporting flows to 12.0.0.2 (9996)
 Exporting using source IP address 12.0.0.1
 Version 10 flow records
 IPV4 Template ID = 266 
 IPV4 Template ID = 292 
  Template timeout = 10 Minute(s)
  Template refresh rate = 20
 0 flows exported in 0 udp datagrams
 0 flows failed to export
 0 messages failed to export

        Returns:
{"Exporting flows to": "12.0.0.2"
"Template timeout": "10 Minute(s)"
"messages failed": "0"
"udp datagrams": "0"
"flows exported": "0"
"Template refresh rate": "20"
"flows failed": "0"
"IPV4 Template ID": "292"
"Exporting flows to/port": "9996"
"source IP address": "12.0.0.1"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip flow export | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            value = value.strip()
            if re.match("Exporting flows to (\S+) \((\d+)\)",value):
                obj = re.match("Exporting flows to (\S+) \((\d+)\)",value)
                dict_value["Exporting flows to"] = obj.group(1).strip()
                dict_value["Exporting flows to/port"] = obj.group(2).strip()
            elif re.match("Exporting using source IP address (.*)",value):
                obj = re.match("Exporting using source IP address (.*)",value)
                dict_value["source IP address"] = obj.group(1).strip()
            elif "=" in value :
                list1 = value.split("=")
                dict_value[list1[0].strip()] =list1[1].strip()
            elif re.match("(\d+) flows exported in (\d+) udp datagrams",value):
                obj = re.match("(\d+) flows exported in (\d+) udp datagrams",value)
                dict_value["flows exported"] = obj.group(1).strip()
                dict_value["udp datagrams"] = obj.group(2).strip()
            elif re.match("(\d+) flows failed to export",value):
                obj = re.match("(\d+) flows failed to export",value)
                dict_value["flows failed"] = obj.group(1).strip()
            elif re.match("(\d+) messages failed to export",value):
                obj = re.match("(\d+) messages failed to export",value)
                dict_value["messages failed"] = obj.group(1).strip()
        return dict_value
    def dut_get_show_install(self, show_info):
        """
        Function:show install回显解析函数
        CLI命令:show install
        回显信息示例:
Ruijie#show install
Install information:
  [Slot 0]
     Name                                       State            Flag             Effective time           Package             
     mng-python_shell-usr_1.5.0.1_x86_64.de     Running          Hot              2020-05-27 09:55:06                          
     b

        Returns:
{'Slot 0/mng-python_shell-usr_1.5.0.1_x86_64.deb/Effective time': '2020-05-27 09:55:06'
'Slot 0/mng-python_shell-usr_1.5.0.1_x86_64.deb/Flag': 'Hot'
'Slot 0/mng-python_shell-usr_1.5.0.1_x86_64.deb/Package': ''
'Slot 0/mng-python_shell-usr_1.5.0.1_x86_64.deb/State': 'Running'
'Slot 0/Name_list': ['mng-python_shell-usr_1.5.0.1_x86_64.deb']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show install | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)

        show_all_list = []
        new_show_list = []
        for value in show_info_list:
            if "Install information:" in value:
                continue
            if re.match("\[(Slot \S+)\]", value.strip()):
                if len(new_show_list) != 0 :
                    show_all_list.append("\n".join(new_show_list))
                new_show_list = []
            new_show_list.append(value)
        show_all_list.append("\n".join(new_show_list))
        dict_value = {}
        dict_title = {}
        for value in show_all_list:
            show_info_list = value.split("\n")
            show_list_1 = []
            flag = 0
            for value in show_info_list:
                if re.match("\[(Slot \S+)\]", value.strip()):
                    obj = re.match("\[(Slot \S+)\]", value.strip())
                    key1 = obj.group(1)
                    flag = 1
                elif flag == 1:
                    if "#" in value:
                        continue
                    elif re.match("\S*b$", value.strip()):
                        dict_title[tmp_value.split()[0]] =  tmp_value.split()[0] + value.strip()
                        continue
                    tmp_value = value
                    show_list_1.append(value)
            show_1 = "\n".join(show_list_1)
            if "No install information" in show_1:
                continue
            star, end, show_len_list, show_info_list_line = self.dut_common_get_linelist(show_1, "Name", split_num=2)
            dict_value1 = self.dut_show_autoget_form(star, end, "Name", show_len_list, show_info_list_line)
            for key, value in dict_value1.items():
                if dict_title.has_key(key.split("/",1)[0]):
                    key = dict_title[key.split("/",1)[0]]+"/"+str(key).split("/",1)[1]
                elif "Name_list" in key:
                    new_list = []
                    for value1 in value:
                        if  dict_title.has_key(value1) :
                            value1 = dict_title[value1]
                        new_list.append(value1)
                    dict_value[key1 + "/" + key] = new_list
                    continue
                dict_value[key1 + "/" + key] = value
        return dict_value
    def dut_get_show_protocolvlan_ipv4(self,show_info):
        """
        Function:show protocol-vlan ipv4回显解析函数
        CLI命令:show protocol-vlan ipv4
        回显信息示例:
Ruijie(config-if-TenGigabitEthernet 0/1)#show protocol-vlan ipv4 

ip              mask            vlan
--------------- --------------- ----
1.1.1.0         255.255.255.0   2   

interface            ipv4 status
-------------------- -----------
Te0/1                enable

        Returns:
{"1.1.1.0/vlan": "2"
"1.1.1.0/mask": "255.255.255.0"
"interface_list": ["Te0/1"], "ip_list": ["1.1.1.0"], "Te0/1/ipv4 status": "enable"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show protocol-vlan ipv4 | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        show_list_1 = []
        show_list_2 = []
        flag = 0
        for value in show_info_list:
            if "interface" in value:
                flag = 1
            if flag == 1 :
                show_list_2.append(value)
            else:
                show_list_1.append(value)
        show_1 = "\n".join(show_list_1).replace("\t","  ")
        show_2 = "\n".join(show_list_2)
        dict_value_1 = self.dut_show_autoget_blank_list(show_1,"ip")
        dict_value_2 = self.dut_show_autoget_whippletree_form_analysis(show_2, "interface")
        return dict(dict_value_1.items()+dict_value_2.items())
    def dut_get_show_nfpp_arpguard_hosts(self,show_info):
        """
        Function:show nfpp arp-guard hosts回显解析函数
        CLI命令:show nfpp arp-guard hosts
        回显信息示例:
Ruijie(config-nfpp)#show nfpp arp-guard hosts 
If col_filter 1 shows '*'， it means 'hardware do not isolate host'.
VLAN    interface   IP address                          MAC address     remain-time(s)          
----    ---------   ----------------------------        -----------     --------------          
 -       Gi6/11      1.1.1.2                             -               20

        Returns:
{"1.1.1.2/remain-time(s)": "20"
"1.1.1.2/MAC address": "-"
"1.1.1.2/interface": "Gi6/11"
"IP address_list": ["1.1.1.2"], "1.1.1.2/VLAN": "-"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show nfpp arp-guard hosts | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info, "IP address")
    def dut_get_show_protocolvlan_profile(self,show_info):
        """
        Function:show protocol-vlan profile回显解析函数
        CLI命令:show protocol-vlan profile
        回显信息示例:
Ruijie(config-if-TenGigabitEthernet 0/4)#show protocol-vlan profile

profile frame-type       ether-type/DSAP+SSAP   interface       vlan
------- ---------------- ---------------------- --------------- ----
1       ETHERII          0x800
                                                Te0/1           4   

3       ETHERII          0x806
                                                Te0/3           10  
                                                Te0/4           12

        Returns:
{"1/Te0/1": "4"
"3/interface": ["Te0/3"
"Te0/4"], "3/ether-type/DSAP+SSAP": "0x806"
"1/ether-type/DSAP+SSAP": "0x800"
"3/frame-type": "ETHERII"
"profile_list": ["1"
"3"], "3/Te0/4": "12"
"3/Te0/3": "10"
"1/interface": ["Te0/1"], "1/frame-type": "ETHERII"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show protocol-vlan profile | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """
        list_0 = []
        show_info_list_0 = self.dut_get_start_show_info(show_info)
        for value in show_info_list_0:
            if re.match("\d+\s+0x\S+\Z",value):
                list_1 = value.strip().split()
                value = list_1[0].strip() + "    NA    "+ list_1[1].strip()
            elif "ether-type/DSAP SSAP" in value:
                value = value.replace("DSAP SSAP","DSAP+SSAP")
            list_0.append(value)
        show_info = "\n".join(list_0)

        show_info_list =  self.dut_get_start_show_info(show_info)
        new_show_list = []
        profile_value = ""
        for value in show_info_list:
            value = value.strip()
            value_list = value.split()
            if "-----" in value:
                continue
            elif len(value_list) > 3:
                if "profile" in value:
                    value = value.replace("vlan","").strip().replace("interface","interface:vlan")
                if len(value.split()) == 3:
                    value= value + "  \\"
                new_show_list.append(value)
            elif len(value_list) == 3 :
                if profile_value != "" :
                    if len(profile_value.split()) == 3:
                        profile_value = profile_value + "  \\"
                    new_show_list.append(profile_value)
                profile_value = ""
                profile_value = value
            elif len(value_list) == 2 and profile_value != "":
                if len(profile_value.split()) > 3:
                    new_value = ","+":".join(value_list)
                else:
                    new_value = "  "+":".join(value_list)
                profile_value = profile_value + new_value
        if len(profile_value.split()) == 3:
            profile_value = profile_value + "  \\"
        new_show_list.append(profile_value)
        new_show = "\n".join(new_show_list)
        dict_value = {}
        dict_value1 = self.dut_show_autoget_blank_list(new_show,"profile",split_one="1")
        for key,value in  dict_value1.items():
            if ":" in key:
                intf_list = []
                profile_id = key.split("/")[0]
                if "," in value:
                    list1 = value.split(",")
                    for list1_value in list1:
                        if ":" in list1_value:
                            list2 = list1_value.split(":")
                            intf_list.append(list2[0])
                            dict_value[profile_id+"/"+list2[0]] = list2[1]
                    dict_value[profile_id+"/interface"] = intf_list
                elif ":" in value:
                    list2 = value.split(":")
                    intf_list.append(list2[0])
                    dict_value[profile_id + "/" + list2[0]] = list2[1]
                    dict_value[profile_id + "/interface"] = intf_list
            else:
                dict_value[key] = value
        return dict_value
    def dut_get_show_macvlan_all(self,show_info):
        """
        Function:show mac-vlan all回显解析函数
        CLI命令:show mac-vlan all
        回显信息示例:
Ruijie(config-if-TenGigabitEthernet 0/1)#show mac-vlan all 
The following MAC VLAN address exist:
S: Static   D: Dynamic
MAC ADDR        MASK            VLAN ID  PRIO  STATE
----------------------------------------------------
0010.0001.0000  ffff.ffff.0000  4094     0     S    
Total MAC VLAN address count: 1

        Returns:
{"0010.0001.0000/PRIO": "0"
"Total MAC VLAN address count": " 1"
"0010.0001.0000/VLAN ID": "4094"
"0010.0001.0000/MASK": "ffff.ffff.0000"
"0010.0001.0000/STATE": "S"
"MAC ADDR_list": ["0010.0001.0000"]}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mac-vlan all | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_list = self.dut_get_start_show_info(show_info)
        show_list_1 = []
        flag = 0
        dict_value_0 = {}
        for value in show_list:
            if "MAC ADDR" in value:
                flag = 1
            elif "Total MAC VLAN address count:" in value:
                list_1 = value.split(":")
                dict_value_0[list_1[0]] = list_1[1]
                flag = 0
            elif "--------------" in value:
                continue
            if flag == 1 :
                show_list_1.append(value)
        show_1 = "\n".join(show_list_1)
        dict_value_1 =  self.dut_show_autoget_blank_list(show_1,"MAC ADDR")
        return dict(dict_value_0.items()+dict_value_1.items())
    def dut_get_show_macvlan_interface(self,show_info):
        """
        Function:show mac-vlan interface回显解析函数
        CLI命令:show mac-vlan interface
        回显信息示例:
Ruijie(config-if-TenGigabitEthernet 0/16)#show mac-vlan interface 
MAC VLAN is enabled on following interface:
-------------------------------------------
TenGigabitEthernet 0/15
TenGigabitEthernet 0/16

        Returns:
{"interface_list": ["TenGigabitEthernet 0/15"
"TenGigabitEthernet 0/16"]}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mac-vlan interface | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        list_port = []
        for value in show_info_list:
            value = value.strip()
            if "interface" in value or "---" in value:
                pass
            else:
                list_port.append(value)
        dict_value={}
        dict_value["interface_list"] = list_port
        return dict_value
    def dut_get_show_interfaces_remark(self,show_info):
        """
        Function:show interfaces remark回显解析函数
        CLI命令:show interfaces remark
        回显信息示例:
Ruijie#show interfaces remark
Ports        From COS   To COS    
------------ ---------- ----------
Te2/5        0          7         
Te2/5        1          6         
Te2/5        2          5         
Te2/5        3          4         
Te2/5        4          3         
Te2/5        5          2         
Te2/5        6          1         
Te2/5        7          0

        Returns:
{"1/Ports": "Te2/5"
"6/Ports": "Te2/5"
"0/To COS": "7"
"From COS_list": ["0"
"1"
"2"
"3"
"4"
"5"
"6"
"7"], "0/Ports": "Te2/5"
"4/Ports": "Te2/5"
"5/Ports": "Te2/5"
"2/Ports": "Te2/5"
"4/To COS": "3"
"1/To COS": "6"
"5/To COS": "2"
"3/Ports": "Te2/5"
"7/To COS": "0"
"6/To COS": "1"
"3/To COS": "4"
"7/Ports": "Te2/5"
"2/To COS": "5"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interfaces remark | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"From COS")
    def dut_get_show_ipv6_tcp_connect(self,show_info):
        """
        Function:show ipv6 tcp connect回显解析函数
        CLI命令:show ipv6 tcp connect
        回显信息示例:
S6910-3C#show ipv6 tcp connect 
Number   Local Address                                    Foreign Address                                  STATE         Process name     VRF name        
1        :::22                                            :::0                                             LISTEN        sshd-main        default         
2        :::23                                            :::0                                             LISTEN        telnetd-main     default         
3        :::830                                           :::0                                             LISTEN        sshd-main        default         
4        30::1:22                                         30::1:48110                                      ESTABLISHED   sshd-main        default         
5        30::1:23                                         30::1:38268                                      ESTABLISHED   telnetd-main     default         
6        30::1:38268                                      30::1:23                                         ESTABLISHED   tel_cmd          default         
7        30::1:48110                                      30::1:22                                         ESTABLISHED   ssh-client-cli   default         
8        :::22                                            :::0                                             LISTEN        sshd-main        ___Mgmt_oob     
9        :::23                                            :::0                                             LISTEN        telnetd-main     ___Mgmt_oob     
10       :::830                                           :::0                                             LISTEN        sshd-main        ___Mgmt_oob     
S6910-3C#

        Returns:
{':::830/Foreign Address': ':::0'
':::23/VRF name': '___Mgmt_oob'
'30::1:48110/Process name': 'ssh-client-cli'
':::22/Foreign Address': ':::0'
'30::1:38268/Foreign Address': '30::1:23'
'30::1:22/STATE': 'ESTABLISHED'
':::22/STATE': 'LISTEN'
':::22/Process name': 'sshd-main'
'30::1:22/VRF name': 'default'
':::23/Number': '9'
'30::1:23/Foreign Address': '30::1:38268'
'30::1:23/Number': '5'
':::830/Process name': 'sshd-main'
'30::1:22/Process name': 'sshd-main'
':::830/VRF name': '___Mgmt_oob'
':::23/Foreign Address': ':::0'
':::830/STATE': 'LISTEN'
'30::1:48110/Number': '7'
'30::1:23/STATE': 'ESTABLISHED'
'30::1:48110/VRF name': 'default'
':::22/Number': '8'
'30::1:38268/STATE': 'ESTABLISHED'
':::23/STATE': 'LISTEN'
':::23/Process name': 'telnetd-main'
'Local Address_list': [':::22'
':::23'
':::830'
'30::1:22'
'30::1:23'
'30::1:38268'
'30::1:48110'
':::22'
':::23'
':::830'], '30::1:23/Process name': 'telnetd-main'
':::22/VRF name': '___Mgmt_oob'
':::830/Number': '10'
'30::1:22/Foreign Address': '30::1:48110'
'30::1:48110/STATE': 'ESTABLISHED'
'30::1:22/Number': '4'
'30::1:38268/VRF name': 'default'
'30::1:23/VRF name': 'default'
'30::1:48110/Foreign Address': '30::1:22'
'30::1:38268/Process name': 'tel_cmd'
'30::1:38268/Number': '6'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 tcp connect | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_blank_list(show_info,"Local Address")
    def dut_get_show_ipv6_vrrp_brief(self,show_info):
        """
        Function:show ipv6 vrrp brief回显解析函数
        CLI命令:show ipv6 vrrp brief
        回显信息示例:
Ruijie#show ipv6 vrrp brief
Interface             Grp  Pri   timer   Own  Pre   State   Master addr                               Group addr                              
VLAN 16               1    100   3.60    -    P     Master  FE80::2D0:F8FF:FE22:3705                  FE80::1                                 
VLAN 16               2    100   3.60    -    P     Master  FE80::2D0:F8FF:FE22:3705                  FE80::2                                 
VLAN 16               3    100   3.60    -    P     Master  FE80::2D0:F8FF:FE22:3705                  FE80::3                                 
VLAN 16               4    100   3.60    -    P     Master  FE80::2D0:F8FF:FE22:3705                  FE80::4                                 
VLAN 16               5    100   3.60    -    P     Master  FE80::2D0:F8FF:FE22:3705                  FE80::5                                 
VLAN 16               6    100   3.60    -    P     Master  FE80::2D0:F8FF:FE22:3705                  FE80::6                                 
VLAN 16               7    100   3.60    -    P     Master  FE80::2D0:F8FF:FE22:3705                  FE80::7                                 
VLAN 16               8    100   3.60    -    P     Master  FE80::2D0:F8FF:FE22:3705                  FE80::8                                 
VLAN 16               9    100   3.60    -    P     Master  FE80::2D0:F8FF:FE22:3705                  FE80::9                                 
VLAN 16               10   100   3.60    -    P     Master  FE80::2D0:F8FF:FE22:3705                  FE80::10                                
VLAN 16               11   100   3.60    -    P     Master  FE80::2D0:F8FF:FE22:3705                  FE80::11                                
VLAN 16               12   100   3.60    -    P     Master  FE80::2D0:F8FF:FE22:3705                  FE80::12                                
VLAN 16               13   100   3.60    -    P     Master  FE80::2D0:F8FF:FE22:3705                  FE80::13                                
VLAN 16               14   100   3.60    -    P     Master  FE80::2D0:F8FF:FE22:3705                  FE80::14                                
VLAN 16               15   100   3.60    -    P     Master  FE80::2D0:F8FF:FE22:3705                  FE80::15                                
VLAN 16               16   100   3.60    -    P     Master  FE80::2D0:F8FF:FE22:3705                  FE80::16                                
VLAN 16               17   100   3.60    -    P     Master  FE80::2D0:F8FF:FE22:3705                  FE80::17                                
VLAN 16               18   100   3.60    -    P     Master  FE80::2D0:F8FF:FE22:3705                  FE80::18                                
VLAN 16               19   100   3.60    -    P     Master  FE80::2D0:F8FF:FE22:3705                  FE80::19                                
VLAN 16               20   100   3.60    -    P     Master  FE80::2D0:F8FF:FE22:3705                  FE80::20                                
VLAN 16               21   100   3.60    -    P     Master  FE80::2D0:F8FF:FE22:3705                  FE80::21                                
VLAN 16               22   100   3.60    -    P     Master  FE80::2D0:F8FF:FE22:3705                  FE80::22                                
VLAN 16               23   100   3.60    -    P     Master  FE80::2D0:F8FF:FE22:3705                  FE80::23                                
VLAN 16               24   100   3.60    -    P     Master  FE80::2D0:F8FF:FE22:3705                  FE80::24

        Returns:
{"FE80::2D0:F8FF:FE22:3705/FE80::15/timer": "3.60"
"FE80::2D0:F8FF:FE22:3705/FE80::20/Grp": "20"
"FE80::2D0:F8FF:FE22:3705/FE80::4/Pri": "100"
"FE80::2D0:F8FF:FE22:3705/FE80::21/timer": "3.60"
"FE80::2D0:F8FF:FE22:3705/FE80::18/Pri": "100"
"FE80::2D0:F8FF:FE22:3705/FE80::21/Interface": "VLAN 16"
"FE80::2D0:F8FF:FE22:3705/FE80::12/Pri": "100"
"FE80::2D0:F8FF:FE22:3705/FE80::2/Own": "-"
"FE80::2D0:F8FF:FE22:3705/FE80::9/State": "Master"
"FE80::2D0:F8FF:FE22:3705/FE80::4/timer": "3.60"
"FE80::2D0:F8FF:FE22:3705/FE80::17/timer": "3.60"
"FE80::2D0:F8FF:FE22:3705/FE80::11/State": "Master"
"FE80::2D0:F8FF:FE22:3705/FE80::12/Pre": "P"
"FE80::2D0:F8FF:FE22:3705/FE80::12/Own": "-"
"FE80::2D0:F8FF:FE22:3705/FE80::20/timer": "3.60"
"FE80::2D0:F8FF:FE22:3705/FE80::23/timer": "3.60"
"FE80::2D0:F8FF:FE22:3705/FE80::18/timer": "3.60"
"FE80::2D0:F8FF:FE22:3705/FE80::7/Pri": "100"
"FE80::2D0:F8FF:FE22:3705/FE80::6/Grp": "6"
"FE80::2D0:F8FF:FE22:3705/FE80::2/Pre": "P"
"FE80::2D0:F8FF:FE22:3705/FE80::2/Pri": "100"
"FE80::2D0:F8FF:FE22:3705/FE80::7/Pre": "P"
"FE80::2D0:F8FF:FE22:3705/FE80::14/State": "Master"
"FE80::2D0:F8FF:FE22:3705/FE80::7/Grp": "7"
"FE80::2D0:F8FF:FE22:3705/FE80::14/timer": "3.60"
"FE80::2D0:F8FF:FE22:3705/FE80::17/State": "Master"
"FE80::2D0:F8FF:FE22:3705/FE80::1/Own": "-"
"FE80::2D0:F8FF:FE22:3705/FE80::7/Own": "-"
"FE80::2D0:F8FF:FE22:3705/FE80::4/Pre": "P"
"FE80::2D0:F8FF:FE22:3705/FE80::23/Grp": "23"
"FE80::2D0:F8FF:FE22:3705/FE80::10/Own": "-"
"FE80::2D0:F8FF:FE22:3705/FE80::24/Pri": "100"
"FE80::2D0:F8FF:FE22:3705/FE80::1/State": "Master"
"FE80::2D0:F8FF:FE22:3705/FE80::16/timer": "3.60"
"FE80::2D0:F8FF:FE22:3705/FE80::14/Grp": "14"
"FE80::2D0:F8FF:FE22:3705/FE80::1/Pre": "P"
"FE80::2D0:F8FF:FE22:3705/FE80::10/Interface": "VLAN 16"
"FE80::2D0:F8FF:FE22:3705/FE80::1/Pri": "100"
"FE80::2D0:F8FF:FE22:3705/FE80::18/Own": "-"
"FE80::2D0:F8FF:FE22:3705/FE80::13/Grp": "13"
"FE80::2D0:F8FF:FE22:3705/FE80::9/Grp": "9"
"FE80::2D0:F8FF:FE22:3705/FE80::23/Own": "-"
"FE80::2D0:F8FF:FE22:3705/FE80::2/timer": "3.60"
"FE80::2D0:F8FF:FE22:3705/FE80::1/Grp": "1"
"FE80::2D0:F8FF:FE22:3705/FE80::22/timer": "3.60"
"FE80::2D0:F8FF:FE22:3705/FE80::21/Pri": "100"
"FE80::2D0:F8FF:FE22:3705/FE80::16/Interface": "VLAN 16"
"FE80::2D0:F8FF:FE22:3705/FE80::8/State": "Master"
"FE80::2D0:F8FF:FE22:3705/FE80::19/Own": "-"
"FE80::2D0:F8FF:FE22:3705/FE80::13/Interface": "VLAN 16"
"FE80::2D0:F8FF:FE22:3705/FE80::13/Pre": "P"
"FE80::2D0:F8FF:FE22:3705/FE80::18/State": "Master"
"FE80::2D0:F8FF:FE22:3705/FE80::23/State": "Master"
"FE80::2D0:F8FF:FE22:3705/FE80::4/Grp": "4"
"FE80::2D0:F8FF:FE22:3705/FE80::5/Pri": "100"
"FE80::2D0:F8FF:FE22:3705/FE80::21/State": "Master"
"FE80::2D0:F8FF:FE22:3705/FE80::5/Pre": "P"
"FE80::2D0:F8FF:FE22:3705/FE80::12/timer": "3.60"
"FE80::2D0:F8FF:FE22:3705/FE80::17/Interface": "VLAN 16"
"FE80::2D0:F8FF:FE22:3705/FE80::23/Interface": "VLAN 16"
"FE80::2D0:F8FF:FE22:3705/FE80::16/Grp": "16"
"FE80::2D0:F8FF:FE22:3705/FE80::22/Interface": "VLAN 16"
"FE80::2D0:F8FF:FE22:3705/FE80::22/State": "Master"
"FE80::2D0:F8FF:FE22:3705/FE80::13/State": "Master"
"FE80::2D0:F8FF:FE22:3705/FE80::3/Own": "-"
"FE80::2D0:F8FF:FE22:3705/FE80::3/Interface": "VLAN 16"
"FE80::2D0:F8FF:FE22:3705/FE80::6/Interface": "VLAN 16"
"FE80::2D0:F8FF:FE22:3705/FE80::14/Interface": "VLAN 16"
"FE80::2D0:F8FF:FE22:3705/FE80::8/Own": "-"
"FE80::2D0:F8FF:FE22:3705/FE80::6/timer": "3.60"
"Master addr_list": ["FE80::2D0:F8FF:FE22:3705/FE80::1"
"FE80::2D0:F8FF:FE22:3705/FE80::2"
"FE80::2D0:F8FF:FE22:3705/FE80::3"
"FE80::2D0:F8FF:FE22:3705/FE80::4"
"FE80::2D0:F8FF:FE22:3705/FE80::5"
"FE80::2D0:F8FF:FE22:3705/FE80::6"
"FE80::2D0:F8FF:FE22:3705/FE80::7"
"FE80::2D0:F8FF:FE22:3705/FE80::8"
"FE80::2D0:F8FF:FE22:3705/FE80::9"
"FE80::2D0:F8FF:FE22:3705/FE80::10"
"FE80::2D0:F8FF:FE22:3705/FE80::11"
"FE80::2D0:F8FF:FE22:3705/FE80::12"
"FE80::2D0:F8FF:FE22:3705/FE80::13"
"FE80::2D0:F8FF:FE22:3705/FE80::14"
"FE80::2D0:F8FF:FE22:3705/FE80::15"
"FE80::2D0:F8FF:FE22:3705/FE80::16"
"FE80::2D0:F8FF:FE22:3705/FE80::17"
"FE80::2D0:F8FF:FE22:3705/FE80::18"
"FE80::2D0:F8FF:FE22:3705/FE80::19"
"FE80::2D0:F8FF:FE22:3705/FE80::20"
"FE80::2D0:F8FF:FE22:3705/FE80::21"
"FE80::2D0:F8FF:FE22:3705/FE80::22"
"FE80::2D0:F8FF:FE22:3705/FE80::23"
"FE80::2D0:F8FF:FE22:3705/FE80::24"], "FE80::2D0:F8FF:FE22:3705/FE80::19/Pre": "P"
"FE80::2D0:F8FF:FE22:3705/FE80::15/Own": "-"
"FE80::2D0:F8FF:FE22:3705/FE80::19/Pri": "100"
"FE80::2D0:F8FF:FE22:3705/FE80::4/Interface": "VLAN 16"
"FE80::2D0:F8FF:FE22:3705/FE80::2/Interface": "VLAN 16"
"FE80::2D0:F8FF:FE22:3705/FE80::21/Pre": "P"
"FE80::2D0:F8FF:FE22:3705/FE80::20/Pre": "P"
"FE80::2D0:F8FF:FE22:3705/FE80::19/State": "Master"
"FE80::2D0:F8FF:FE22:3705/FE80::24/Pre": "P"
"FE80::2D0:F8FF:FE22:3705/FE80::5/timer": "3.60"
"FE80::2D0:F8FF:FE22:3705/FE80::1/Interface": "VLAN 16"
"FE80::2D0:F8FF:FE22:3705/FE80::13/Own": "-"
"FE80::2D0:F8FF:FE22:3705/FE80::20/Pri": "100"
"FE80::2D0:F8FF:FE22:3705/FE80::24/Interface": "VLAN 16"
"FE80::2D0:F8FF:FE22:3705/FE80::8/Pre": "P"
"FE80::2D0:F8FF:FE22:3705/FE80::4/State": "Master"
"FE80::2D0:F8FF:FE22:3705/FE80::8/Pri": "100"
"FE80::2D0:F8FF:FE22:3705/FE80::21/Own": "-"
"FE80::2D0:F8FF:FE22:3705/FE80::24/timer": "3.60"
"FE80::2D0:F8FF:FE22:3705/FE80::15/State": "Master"
"FE80::2D0:F8FF:FE22:3705/FE80::16/Pri": "100"
"FE80::2D0:F8FF:FE22:3705/FE80::16/Pre": "P"
"FE80::2D0:F8FF:FE22:3705/FE80::15/Grp": "15"
"FE80::2D0:F8FF:FE22:3705/FE80::2/State": "Master"
"FE80::2D0:F8FF:FE22:3705/FE80::5/Interface": "VLAN 16"
"FE80::2D0:F8FF:FE22:3705/FE80::11/Grp": "11"
"FE80::2D0:F8FF:FE22:3705/FE80::22/Grp": "22"
"FE80::2D0:F8FF:FE22:3705/FE80::3/Pri": "100"
"FE80::2D0:F8FF:FE22:3705/FE80::8/Grp": "8"
"FE80::2D0:F8FF:FE22:3705/FE80::3/Pre": "P"
"FE80::2D0:F8FF:FE22:3705/FE80::22/Own": "-"
"FE80::2D0:F8FF:FE22:3705/FE80::20/State": "Master"
"FE80::2D0:F8FF:FE22:3705/FE80::1/timer": "3.60"
"FE80::2D0:F8FF:FE22:3705/FE80::14/Own": "-"
"FE80::2D0:F8FF:FE22:3705/FE80::11/Interface": "VLAN 16"
"FE80::2D0:F8FF:FE22:3705/FE80::18/Grp": "18"
"FE80::2D0:F8FF:FE22:3705/FE80::20/Interface": "VLAN 16"
"FE80::2D0:F8FF:FE22:3705/FE80::11/timer": "3.60"
"FE80::2D0:F8FF:FE22:3705/FE80::10/Grp": "10"
"FE80::2D0:F8FF:FE22:3705/FE80::12/Grp": "12"
"FE80::2D0:F8FF:FE22:3705/FE80::24/State": "Master"
"FE80::2D0:F8FF:FE22:3705/FE80::10/State": "Master"
"FE80::2D0:F8FF:FE22:3705/FE80::3/timer": "3.60"
"FE80::2D0:F8FF:FE22:3705/FE80::8/Interface": "VLAN 16"
"FE80::2D0:F8FF:FE22:3705/FE80::15/Pre": "P"
"FE80::2D0:F8FF:FE22:3705/FE80::7/State": "Master"
"FE80::2D0:F8FF:FE22:3705/FE80::20/Own": "-"
"FE80::2D0:F8FF:FE22:3705/FE80::23/Pre": "P"
"FE80::2D0:F8FF:FE22:3705/FE80::6/State": "Master"
"FE80::2D0:F8FF:FE22:3705/FE80::11/Own": "-"
"FE80::2D0:F8FF:FE22:3705/FE80::11/Pri": "100"
"FE80::2D0:F8FF:FE22:3705/FE80::5/State": "Master"
"FE80::2D0:F8FF:FE22:3705/FE80::8/timer": "3.60"
"FE80::2D0:F8FF:FE22:3705/FE80::21/Grp": "21"
"FE80::2D0:F8FF:FE22:3705/FE80::11/Pre": "P"
"FE80::2D0:F8FF:FE22:3705/FE80::17/Grp": "17"
"FE80::2D0:F8FF:FE22:3705/FE80::22/Pri": "100"
"FE80::2D0:F8FF:FE22:3705/FE80::16/State": "Master"
"FE80::2D0:F8FF:FE22:3705/FE80::4/Own": "-"
"FE80::2D0:F8FF:FE22:3705/FE80::5/Own": "-"
"FE80::2D0:F8FF:FE22:3705/FE80::22/Pre": "P"
"FE80::2D0:F8FF:FE22:3705/FE80::7/Interface": "VLAN 16"
"FE80::2D0:F8FF:FE22:3705/FE80::10/Pri": "100"
"FE80::2D0:F8FF:FE22:3705/FE80::7/timer": "3.60"
"FE80::2D0:F8FF:FE22:3705/FE80::10/Pre": "P"
"FE80::2D0:F8FF:FE22:3705/FE80::24/Grp": "24"
"FE80::2D0:F8FF:FE22:3705/FE80::19/Interface": "VLAN 16"
"FE80::2D0:F8FF:FE22:3705/FE80::2/Grp": "2"
"FE80::2D0:F8FF:FE22:3705/FE80::24/Own": "-"
"FE80::2D0:F8FF:FE22:3705/FE80::17/Pre": "P"
"FE80::2D0:F8FF:FE22:3705/FE80::3/State": "Master"
"FE80::2D0:F8FF:FE22:3705/FE80::15/Pri": "100"
"FE80::2D0:F8FF:FE22:3705/FE80::9/timer": "3.60"
"FE80::2D0:F8FF:FE22:3705/FE80::15/Interface": "VLAN 16"
"FE80::2D0:F8FF:FE22:3705/FE80::17/Pri": "100"
"FE80::2D0:F8FF:FE22:3705/FE80::16/Own": "-"
"FE80::2D0:F8FF:FE22:3705/FE80::18/Pre": "P"
"FE80::2D0:F8FF:FE22:3705/FE80::12/State": "Master"
"FE80::2D0:F8FF:FE22:3705/FE80::13/Pri": "100"
"FE80::2D0:F8FF:FE22:3705/FE80::6/Pri": "100"
"FE80::2D0:F8FF:FE22:3705/FE80::6/Pre": "P"
"FE80::2D0:F8FF:FE22:3705/FE80::9/Interface": "VLAN 16"
"FE80::2D0:F8FF:FE22:3705/FE80::14/Pre": "P"
"FE80::2D0:F8FF:FE22:3705/FE80::14/Pri": "100"
"FE80::2D0:F8FF:FE22:3705/FE80::3/Grp": "3"
"FE80::2D0:F8FF:FE22:3705/FE80::18/Interface": "VLAN 16"
"FE80::2D0:F8FF:FE22:3705/FE80::9/Pri": "100"
"FE80::2D0:F8FF:FE22:3705/FE80::5/Grp": "5"
"FE80::2D0:F8FF:FE22:3705/FE80::9/Pre": "P"
"FE80::2D0:F8FF:FE22:3705/FE80::9/Own": "-"
"FE80::2D0:F8FF:FE22:3705/FE80::13/timer": "3.60"
"FE80::2D0:F8FF:FE22:3705/FE80::12/Interface": "VLAN 16"
"FE80::2D0:F8FF:FE22:3705/FE80::19/timer": "3.60"
"FE80::2D0:F8FF:FE22:3705/FE80::23/Pri": "100"
"FE80::2D0:F8FF:FE22:3705/FE80::17/Own": "-"
"FE80::2D0:F8FF:FE22:3705/FE80::10/timer": "3.60"
"FE80::2D0:F8FF:FE22:3705/FE80::6/Own": "-"
"FE80::2D0:F8FF:FE22:3705/FE80::19/Grp": "19"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 vrrp brief | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_list_1 = show_info.split("\n")
        show_list = []
        for value in show_list_1:
            show_list.append(value.strip())
        show_info = "\n".join(show_list)
        return self.dut_show_autoget_blank_list(show_info,"Master addr",value_title_2="Group addr")
    def dut_get_show_ipv6_vrrp_br(self,show_info):
        show_list_1 = show_info.split("\n")
        show_list = []
        for value in show_list_1:
            show_list.append(value.strip())
        show_info = "\n".join(show_list)
        return self.dut_show_autoget_blank_list(show_info,"Group addr")
    def dut_get_show_vxlan_subport_all(self,show_info):
        """
        Function:show vxlan subport all回显解析函数
        CLI命令:show vxlan subport all
        回显信息示例:
Ruijie#show vxlan subport all
Interface    VLAN   CVLAN VXLAN      Main Interface Admin Status Link Status  Proto Status
------------ ------ ----- ---------- -------------- ------------ ------------ ------------
Te4/1.1      -      -     10         Te4/1          UP           DOWN         DOWN

        Returns:
{'Te4/1.1/VLAN': '-'
'Te4/1.1/VXLAN': '10'
'Te4/1.1/Link Status': 'DOWN'
'Te4/1.1/Main Interface': 'Te4/1'
'Te4/1.1/CVLAN': '-'
'Interface_list': ['Te4/1.1'], 'Te4/1.1/Proto Status': 'DOWN'
'Te4/1.1/Admin Status': 'UP'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show vxlan subport all | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info, "Interface")
    def dut_get_show_vxlan_subport_vni_num(self,show_info):
        """
        Function:show vxlan subport vni <num>回显解析函数
        CLI命令:show vxlan subport vni <num>
        回显信息示例:
s79_1(config-subif-TenGigabitEthernet 4/1.5)#show vxlan subport vni 10
Interface    VLAN   CVLAN VXLAN      Main Interface Admin Status Link Status  Proto Status
------------ ------ ----- ---------- -------------- ------------ ------------ ------------
Te4/1.1      * 2    3     -          Te4/1          UP           DOWN         DOWN         
Te4/1.2      5      -     10         Te4/1          UP           DOWN         DOWN         
Te4/1.3      * 6    -     * 12       Te4/1          UP           DOWN         DOWN         
Te4/1.4      -      -     -          Te4/1          UP           DOWN         DOWN         
Te4/1.5      -      -     * 16777215 Te4/1          UP           DOWN         DOWN

        Returns:
{"Te4/1.2/Link Status": "DOWN"
"Te4/1.4/Link Status": "DOWN"
"Te4/1.2/Proto Status": "DOWN"
"Te4/1.1/VXLAN": "-"
"Te4/1.2/VXLAN": "10"
"Te4/1.2/Main Interface": "Te4/1"
"Te4/1.2/Admin Status": "UP"
"Te4/1.5/CVLAN": "-"
"Te4/1.3/VXLAN": "* 12"
"Interface_list": ["Te4/1.1"
"Te4/1.2"
"Te4/1.3"
"Te4/1.4"
"Te4/1.5"], "Te4/1.3/Main Interface": "Te4/1"
"Te4/1.3/VLAN": "* 6"
"Te4/1.4/VLAN": "-"
"Te4/1.5/Link Status": "DOWN"
"Te4/1.3/CVLAN": "-"
"Te4/1.4/Proto Status": "DOWN"
"Te4/1.4/Admin Status": "UP"
"Te4/1.4/CVLAN": "-"
"Te4/1.3/Admin Status": "UP"
"Te4/1.1/Proto Status": "DOWN"
"Te4/1.1/Admin Status": "UP"
"Te4/1.1/VLAN": "* 2"
"Te4/1.4/VXLAN": "-"
"Te4/1.1/Link Status": "DOWN"
"Te4/1.1/Main Interface": "Te4/1"
"Te4/1.5/Main Interface": "Te4/1"
"Te4/1.2/VLAN": "5"
"Te4/1.5/VXLAN": "* 16777215"
"Te4/1.5/Proto Status": "DOWN"
"Te4/1.5/Admin Status": "UP"
"Te4/1.3/Link Status": "DOWN"
"Te4/1.3/Proto Status": "DOWN"
"Te4/1.5/VLAN": "-"
"Te4/1.2/CVLAN": "-"
"Te4/1.1/CVLAN": "3"
"Te4/1.4/Main Interface": "Te4/1"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show vxlan subport vni <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info, "Interface")
    def dut_get_show_vxlan_subport_interface_dutport(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info, "Interface")
    def dut_get_show_interfaces_vlan_num(self,show_info):
        """
        Function:show interfaces vLAN <num>回显解析函数
        CLI命令:show interfaces vLAN <num>
        回显信息示例:
Ruijie#show interfaces vLAN 1
Index(dec):4097 (hex):1001
VLAN 1 is UP  ， line protocol is UP    
  Hardware is VLAN， address is 00d0.f822.3533 (bia 00d0.f822.3533)
  Interface address is: 172.16.10.3/24
  ARP type: ARPA， ARP Timeout: 3600 seconds
  Interface IPv6 address is:
    No IPv6 address
  MTU 1500 bytes， BW 1000000 Kbit
  Encapsulation protocol is Ethernet-II， loopback not set
  Keepalive interval is 10 sec ， set
  Carrier delay is 2 sec

        Returns:
{"Carrier delay": "2 sec"
"Hardware is VLAN\uff0c address": "00d0.f822.3533 (bia 00d0.f822.3533)"
"Encapsulation protocol": "Ethernet-II\uff0c loopback not set"
"BW_value": "1000000"
"ARP type: ARPA\uff0c ARP Timeout": "3600 seconds"
"VLAN 1 is UP  \uff0c line protocol": "UP"
"MTU": "1500 bytes\uff0c BW 1000000 Kbit"
"Keepalive interval": "10 sec \uff0c set"
"(hex)": "1001"
"Interface IPv6 address": ""
"Interface address": "172.16.10.3/24"
"Index(dec)": "4097"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interfaces vLAN <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_interfaces_dutport(show_info)
    def dut_get_show_line_console_num(self,show_info):
        """
        Function:show line console <num>回显解析函数
        CLI命令:show line console <num>
        回显信息示例:
Ruijie#show line console 0

CON     Type    speed   Overruns
* 0     CON     115200  0
Line 0, Location: "", Type: "vt100"
Length: 24 lines, Width: 79 columns
Special Chars: Escape  Disconnect  Activation
               ^^x     ^D          ^M
Timeouts:      Idle EXEC    Idle Session
               never        never
History is enabled, history size is 10.
Total input: 77318 bytes
Total output:  2776100 bytes
Data overflow:  0 bytes
stop rx interrupt:  0 times

Ruijie#

        Returns:
{"Total output": "2776100"
"stop rx interrupt": "0"
"speed": "115200"
"Total input": "77318"
"Data overflow": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show line console <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            value  = str(value).strip().replace("\t","  ")
            if " CON " in value:
                value_list = re.split(r'\s{2,}',value)
                speed = value_list[2]
                dict_value["speed"] = speed
            elif "Total input:" in value or "Total output:" in value or "Data overflow:" in value or "stop rx interrupt:" in value:
                value_list = value.split(":")
                dict_value[value_list[0].strip()] = str(value_list[1]).split()[0].strip()
        return dict_value
    def dut_get_show_sprs_vxlantable(self,show_info):
        """
        Function:show sprs vxlan-table回显解析函数
        CLI命令:show sprs vxlan-table
        回显信息示例:
Ruijie#show sprs vxlan-table
assc interface           vni          vrf          suppress     proxy        force proxy        anycast      source check       vlan check        
 Or10                     10           0            disable      enabled      disable            true         true               true              
 Or20                     20           0            disable      disable      disable            true         true               true              
 Or100                    100          0            disable      disable      disable            true         true               true

        Returns:
{"Or100/force proxy": "disable"
"Or10/vni": "10"
"Or10/suppress": "disable"
"Or20/force proxy": "disable"
"assc interface_list": ["Or10"
"Or20"
"Or100"], "Or20/proxy": "disable"
"Or100/vlan check": "true"
"Or100/vrf": "0"
"Or20/vlan check": "true"
"Or100/vni": "100"
"Or100/anycast": "true"
"Or100/source check": "true"
"Or10/anycast": "true"
"Or20/source check": "true"
"Or10/vlan check": "true"
"Or10/vrf": "0"
"Or20/anycast": "true"
"Or100/suppress": "disable"
"Or20/vni": "20"
"Or10/proxy": "enabled"
"Or100/proxy": "disable"
"Or10/source check": "true"
"Or20/suppress": "disable"
"Or20/vrf": "0"
"Or10/force proxy": "disable"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show sprs vxlan-table | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_blank_list(show_info,"assc interface")
    def dut_get_show_queuebuffer_interface_dutport_slot_num(self,show_info):
        """
        Function:show queue-buffer interface <dutport> slot 1回显解析函数
        CLI命令:show queue-buffer interface <dutport> slot 1
        回显信息示例:
Ruijiie#show queue-buffer interface hundredGigabitEthernet 1/1 slot 1
Interface HundredGigabitEthernet1/1:
Type        Queue   Used KBytes    Available KBytes    Usage    Usage warn limit    Usage warn count  Peak KBytes          Peak time
Voq         0       0              2093311             0.0%     NA                  0                 0                    NA                  
Voq         1       0              2093311             0.0%     NA                  0                 0                    NA                  
Voq         2       0              2093311             0.0%     NA                  0                 0                    NA                  
Voq         3       0              2093311             0.0%     NA                  0                 0                    NA                  
Voq         4       0              2093311             0.0%     NA                  0                 0                    NA                  
Voq         5       0              2093311             0.0%     NA                  0                 0                    NA                  
Voq         6       0              2093311             0.0%     NA                  0                 0                    NA                  
Voq         7       0              2093311             0.0%     NA                  0                 0                    NA                  
Voq         total   0              4193824             0.0%     NA                  0                 NA                   NA
Slot       Port-group   Total KBytes  Total usage   Usage warn limit   Usage warn count  Static used KBytes   Global shared KBytes   Available shared KBytes 
1          1            4194303       0.0%          NA                 0                 0                    4194303                4193824                 

Type        Queue   Used KBytes    Available KBytes    Usage    Usage warn limit    Usage warn count  Peak KBytes          Peak time
Voq         0       0              2093311             0.0%     NA                  0                 0                    NA                  
Voq         1       0              2093311             0.0%     NA                  0                 0                    NA                  
Voq         2       0              2093311             0.0%     NA                  0                 0                    NA                  
Voq         3       0              2093311             0.0%     NA                  0                 0                    NA                  
Voq         4       0              2093311             0.0%     NA                  0                 0                    NA                  
Voq         5       0              2093311             0.0%     NA                  0                 0                    NA                  
Voq         6       0              2093311             0.0%     NA                  0                 0                    NA                  
Voq         7       0              2093311             0.0%     NA                  0                 0                    NA                  
Voq         total   0              4193824             0.0%     NA                  0                 NA                   NA
Slot       Port-group   Total KBytes  Total usage   Usage warn limit   Usage warn count  Static used KBytes   Global shared KBytes   Available shared KBytes 
1          2            4194303       0.0%          NA                 0                 0                    4194303                4193824

        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show queue-buffer interface <dutport> slot 1 | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        if "Port Group" in show_info and "Slice" in show_info:
            show_info_list = self.dut_get_start_show_info(show_info)
            new_list = []
            flag = 0
            for value in show_info_list:
                if re.match("Slot (\d+) Port Group (\d+):", value):
                    flag = 1
                    if len(new_list) != 0:
                        new_show_info = "\n".join(new_list)
                        dict_value1 = self.dut_show_autoget_blank_list(new_show_info, "Queue", "Slot", "Type")
                        dict_value2 = self.dut_show_autoget_blank_list(new_show_info, "Slot")
                        dict_value3 = dict(dict_value1.items() + dict_value2.items())
                        for k, v in dict_value3.items():
                            dict_value[key_1 + "/" + k] = v
                    new_list = []
                    obj = re.match("Slot (\d+) Port Group (\d+):", value)
                    key_1 = obj.group(2)
                else:
                    if flag == 1:
                        if value.strip() != "":
                            new_list.append(value)
            if len(new_list) != 0:
                new_show_info = "\n".join(new_list)
                dict_value1 = self.dut_show_autoget_blank_list(new_show_info, "Queue", "Slot", "Type")
                dict_value2 = self.dut_show_autoget_blank_list(new_show_info, "Slot")
                dict_value3 = dict(dict_value1.items() + dict_value2.items())
                for k, v in dict_value3.items():
                    dict_value[key_1 + "/" + k] = v
        elif "Slice" in show_info:
            dict_value1 = self.dut_show_autoget_blank_list(show_info, "Queue", "Slot", "Type")
            dict_value2 = self.dut_show_autoget_blank_list(show_info, "Slot")
            dict_value = dict(dict_value1.items() + dict_value2.items())
        else:
            dict_value1 = self.dut_show_autoget_blank_list(show_info, "Dev/slot", "Interface")
            dict_value2 = self.dut_show_autoget_blank_list(show_info, "Queue", value_title_2="Type")
            dict_value = dict(dict_value1.items() + dict_value2.items())
        return dict_value
    def dut_get_show_queuecounter_interface_dutport_slot_num(self,show_info):
        """
        Function:show queue-counter interface <dutport> slot <num>回显解析函数
        CLI命令:show queue-counter interface <dutport> slot <num>
        回显信息示例:
Ruijie#show queue-counter interface hundredGigabitEthernet 1/1 slot 1
Interface HundredGigabitEthernet1/1:
Slot 1 Port Group 1 Voq:
    Voq
  Queue     Transmitted Bytes         Dropped Bytes    Transmit Rate(bps)    Loss Rate(%)     Loss Rate Peak(%)          Loss Peak Time
      0                     0                     0                     0               0                     0                      NA
      1                     0                     0                     0               0                     0                      NA
      2                     0                     0                     0               0                     0                      NA
      3                     0                     0                     0               0                     0                      NA
      4                     0                     0                     0               0                     0                      NA
      5                     0                     0                     0               0                     0                      NA
      6                 27288                     0                     0               0                     0                      NA
      7                     0                     0                     0               0                     0                      NA
  Queue   Transmitted Packets       Dropped Packets    Transmit Rate(pps)    Loss Rate(%)     Loss Rate Peak(%)          Loss Peak Time
      0                     0                     0                     0               0                     0                      NA
      1                     0                     0                     0               0                     0                      NA
      2                     0                     0                     0               0                     0                      NA
      3                     0                     0                     0               0                     0                      NA
      4                     0                     0                     0               0                     0                      NA
      5                     0                     0                     0               0                     0                      NA
      6                    85                     0                     0               0                     0                      NA
      7                     0                     0                     0               0                     0                      NA
Slot 1 Port Group 2 Voq:
    Voq
  Queue     Transmitted Bytes         Dropped Bytes    Transmit Rate(bps)    Loss Rate(%)     Loss Rate Peak(%)          Loss Peak Time
      0                     0                     0                     0               0                     0                      NA
      1                     0                     0                     0               0                     0                      NA
      2                     0                     0                     0               0                     0                      NA
      3                     0                     0                     0               0                     0                      NA
      4                     0                     0                     0               0                     0                      NA
      5                     0                     0                     0               0                     0                      NA
      6                     0                     0                     0               0                     0                      NA
      7                     0                     0                     0               0                     0                      NA
  Queue   Transmitted Packets       Dropped Packets    Transmit Rate(pps)    Loss Rate(%)     Loss Rate Peak(%)          Loss Peak Time
      0                     0                     0                     0               0                     0                      NA
      1                     0                     0                     0               0                     0                      NA
      2                     0                     0                     0               0                     0                      NA
      3                     0                     0                     0               0                     0                      NA
      4                     0                     0                     0               0                     0                      NA
      5                     0                     0                     0               0                     0                      NA
      6                     0                     0                     0               0                     0                      NA
      7                     0                     0                     0               0                     0                      NA

        Returns:
{"Group 2/1/Loss Peak Time": "NA"
"Group 2/5/Transmitted Packets": "0"
"Group 2/0/Transmitted Bytes": "0"
"Group 2/1/Transmitted Packets": "0"
"Group 1/5/Dropped Bytes": "0"
"Group 1/2/Dropped Packets": "0"
"Group 2/6/Transmitted Bytes": "0"
"Group 2/5/Dropped Bytes": "0"
"Group 1/5/Transmit Rate(bps)": "0"
"Group 1/6/Transmit Rate(pps)": "0"
"Group 2/0/Transmitted Packets": "0"
"Group 1/2/Transmitted Packets": "0"
"Group 2/1/Transmit Rate(pps)": "0"
"Group 2/5/Transmitted Bytes": "0"
"Group 1/7/Transmitted Packets": "0"
"Group 2/6/Loss Rate Peak(%)": "0"
"Group 2/7/Transmit Rate(bps)": "0"
"Queue_list": ["Group 2/0"
"Group 2/1"
"Group 2/2"
"Group 2/3"
"Group 2/4"
"Group 2/5"
"Group 2/6"
"Group 2/7"], "Group 2/4/Transmitted Packets": "0"
"Group 2/1/Transmitted Bytes": "0"
"Group 1/4/Dropped Bytes": "0"
"Group 1/1/Dropped Packets": "0"
"Group 2/4/Loss Peak Time": "NA"
"Group 1/1/Transmit Rate(pps)": "0"
"Group 1/3/Transmitted Bytes": "0"
"Group 2/3/Transmit Rate(pps)": "0"
"Group 2/1/Dropped Bytes": "0"
"Group 2/4/Transmitted Bytes": "0"
"Group 2/5/Transmit Rate(bps)": "0"
"Group 1/0/Transmitted Packets": "0"
"Group 2/7/Loss Rate Peak(%)": "0"
"Group 2/5/Loss Rate(%)": "0"
"Group 1/7/Transmit Rate(pps)": "0"
"Group 2/4/Transmit Rate(bps)": "0"
"Group 1/1/Transmitted Bytes": "0"
"Group 2/2/Transmitted Bytes": "0"
"Group 2/0/Dropped Bytes": "0"
"Group 2/3/Loss Rate Peak(%)": "0"
"Group 1/5/Dropped Packets": "0"
"Group 1/6/Loss Peak Time": "NA"
"Group 1/7/Loss Peak Time": "NA"
"Group 1/2/Dropped Bytes": "0"
"Group 2/6/Transmit Rate(pps)": "0"
"Group 2/2/Loss Rate(%)": "0"
"Group 1/6/Loss Rate Peak(%)": "0"
"Group 2/2/Dropped Bytes": "0"
"Group 1/7/Loss Rate(%)": "0"
"Group 2/7/Transmitted Packets": "0"
"Group 1/3/Loss Rate(%)": "0"
"Group 2/2/Transmitted Packets": "0"
"Group 2/1/Dropped Packets": "0"
"Group 1/4/Loss Peak Time": "NA"
"Group 1/7/Transmitted Bytes": "0"
"Group 1/1/Transmitted Packets": "0"
"Group 1/6/Loss Rate(%)": "0"
"Group 1/3/Transmit Rate(pps)": "0"
"Group 1/0/Dropped Packets": "0"
"Group 2/2/Loss Rate Peak(%)": "0"
"Group 2/7/Transmitted Bytes": "0"
"Group 1/3/Dropped Packets": "0"
"Group 1/5/Loss Rate(%)": "0"
"Group 1/5/Loss Rate Peak(%)": "0"
"Group 2/3/Transmit Rate(bps)": "0"
"Group 1/1/Transmit Rate(bps)": "0"
"Group 1/2/Transmit Rate(pps)": "0"
"Group 2/3/Loss Peak Time": "NA"
"Group 1/0/Transmitted Bytes": "0"
"Group 1/0/Transmit Rate(pps)": "0"
"Group 2/0/Dropped Packets": "0"
"Group 2/5/Loss Peak Time": "NA"
"Group 2/6/Dropped Bytes": "0"
"Group 1/0/Loss Rate(%)": "0"
"Group 1/3/Loss Peak Time": "NA"
"Group 1/2/Transmitted Bytes": "0"
"Group 1/6/Transmit Rate(bps)": "0"
"Group 2/4/Dropped Bytes": "0"
"Group 2/7/Dropped Packets": "0"
"Group 2/0/Loss Peak Time": "NA"
"Group 2/5/Dropped Packets": "0"
"Group 1/0/Loss Rate Peak(%)": "0"
"Group 2/6/Loss Peak Time": "NA"
"Group 2/2/Transmit Rate(pps)": "0"
"Group 1/4/Transmit Rate(bps)": "0"
"Group 2/6/Dropped Packets": "0"
"Group 1/1/Loss Peak Time": "NA"
"Group 2/5/Loss Rate Peak(%)": "0"
"Group 2/2/Loss Peak Time": "NA"
"Group 2/4/Dropped Packets": "0"
"Group 2/3/Transmitted Bytes": "0"
"Group 1/2/Transmit Rate(bps)": "0"
"Group 1/2/Loss Rate(%)": "0"
"Group 1/6/Dropped Packets": "0"
"Group 1/3/Transmitted Packets": "0"
"Group 2/5/Transmit Rate(pps)": "0"
"Group 1/4/Dropped Packets": "0"
"Group 1/6/Transmitted Packets": "85"
"Group 1/3/Loss Rate Peak(%)": "0"
"Group 2/1/Loss Rate(%)": "0"
"Group 1/1/Dropped Bytes": "0"
"Group 2/0/Loss Rate(%)": "0"
"Group 1/5/Transmitted Packets": "0"
"Group 1/3/Dropped Bytes": "0"
"Group 1/3/Transmit Rate(bps)": "0"
"Group 2/3/Loss Rate(%)": "0"
"Group 2/7/Dropped Bytes": "0"
"Group 1/0/Loss Peak Time": "NA"
"Group 2/6/Loss Rate(%)": "0"
"Group 2/3/Dropped Packets": "0"
"Group 2/7/Loss Peak Time": "NA"
"Group 1/1/Loss Rate(%)": "0"
"Group 1/2/Loss Rate Peak(%)": "0"
"Group 1/7/Dropped Packets": "0"
"Group 2/1/Transmit Rate(bps)": "0"
"Group 1/4/Loss Rate Peak(%)": "0"
"Group 1/1/Loss Rate Peak(%)": "0"
"Group 2/0/Transmit Rate(pps)": "0"
"Group 2/3/Transmitted Packets": "0"
"Group 2/0/Transmit Rate(bps)": "0"
"Group 1/7/Loss Rate Peak(%)": "0"
"Group 1/4/Transmitted Packets": "0"
"Group 2/3/Dropped Bytes": "0"
"Group 2/7/Transmit Rate(pps)": "0"
"Group 1/4/Loss Rate(%)": "0"
"Group 2/2/Dropped Packets": "0"
"Group 2/2/Transmit Rate(bps)": "0"
"Group 2/4/Loss Rate Peak(%)": "0"
"Group 2/0/Loss Rate Peak(%)": "0"
"Group 1/0/Dropped Bytes": "0"
"Group 1/4/Transmit Rate(pps)": "0"
"Group 2/7/Loss Rate(%)": "0"
"Group 1/4/Transmitted Bytes": "0"
"Group 1/7/Dropped Bytes": "0"
"Group 2/1/Loss Rate Peak(%)": "0"
"Group 1/2/Loss Peak Time": "NA"
"Group 1/7/Transmit Rate(bps)": "0"
"Group 1/5/Transmitted Bytes": "0"
"Group 1/6/Dropped Bytes": "0"
"Group 2/6/Transmit Rate(bps)": "0"
"Group 2/6/Transmitted Packets": "0"
"Group 1/5/Loss Peak Time": "NA"
"Group 2/4/Transmit Rate(pps)": "0"
"Group 1/0/Transmit Rate(bps)": "0"
"Group 1/5/Transmit Rate(pps)": "0"
"Group 2/4/Loss Rate(%)": "0"
"Group 1/6/Transmitted Bytes": "27288"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show queue-counter interface <dutport> slot <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value_all = {}
        show_list = self.dut_get_start_show_info(show_info)
        list1 = []
        flag = 0
        for value in show_list:
            if re.match(".*Port (Group \d+).*",value):
                obj1 = re.match(".*Port (Group \d+).*",value)
                value1 = obj1.group(1)
                if len(list1) != 0 :
                    list2 = []
                    for value2 in list1:
                        value2 = value2.strip()
                        if "Queue" in value2:
                            if len(list2) != 0:
                                show_info_2 = "\n".join(list2)
                                dict_value = self.dut_show_autoget_blank_list(show_info_2,"Queue")
                                dict_value_all = dict(dict_value_all.items()+dict_value.items())
                            list2 = []
                            list2.append(value2)
                        else:
                            list2.append(value2)
                    if len(list2) != 0:
                        show_info_2 = "\n".join(list2)
                        dict_value = self.dut_show_autoget_blank_list(show_info_2, "Queue")
                        dict_value_all = dict(dict_value_all.items() + dict_value.items())
                list1 = []
                flag = 1
                continue
            if flag == 1 :
                if "Voq" == value.strip():
                    pass
                else:
                    if "Queue" not in value:
                        value = value1+"/"+value.strip()
                    list1.append(value)
        if len(list1) != 0:
            list2 = []
            for value2 in list1:
                value2 = value2.strip()
                if "Queue" in value2:
                    if len(list2) != 0:
                        show_info_2 = "\n".join(list2)
                        dict_value = self.dut_show_autoget_blank_list(show_info_2, "Queue")
                        dict_value_all = dict(dict_value_all.items() + dict_value.items())
                    list2 = []
                    list2.append(value2)
                else:
                    list2.append(value2)
            if len(list2) != 0:
                show_info_2 = "\n".join(list2)
                dict_value = self.dut_show_autoget_blank_list(show_info_2, "Queue")
                dict_value_all = dict(dict_value_all.items() + dict_value.items())
        return dict_value_all
    def dut_get_show_isis_database_verbose(self,show_info):
        """
        Function:show isis database verbose回显解析函数
        CLI命令:show isis database verbose
        回显信息示例:
DUT4(config-router)#show isis database verbose 

Area (null):
IS-IS Level-1 Link State Database:
LSPID                   LSP Seq Num  LSP Checksum  LSP Holdtime      ATT/P/OL
DUT1.00-00              0x00000035   0x17DB        467               0/0/0
  Area Address: 49.0001
  NLPID:        0xCC
  Hostname:     DUT1
  IP Address:   192.168.1.1
  Metric:   1          IS DUT2.01
  Metric:   1          IS DUT2.01  
  Metric:   1          IP 192.168.1.0 255.255.255.0
  Metric:   1          IP 100.0.0.0 255.255.255.0
  Metric:   0          IP 1.1.1.1 255.255.255.255
DUT2.00-00              0x00000008   0x7E2A        1016              0/0/0
  Area Address: 49.0001
  NLPID:        0xCC
  Hostname:     DUT2
  IP Address:   192.168.1.2
  Metric:   1          IS-Extended DUT2.01  
  Metric:   1          IS-Extended DUT2.02  
  Metric:   1          IP-Extended 192.168.1.0/24
  Metric:   1          IP-Extended 192.168.2.0/24
  Metric:   0          IP-Extended 2.2.2.2/32
DUT2.01-00              0x00000006   0x7450        1007              0/0/0
  Metric:   0          IS-Extended DUT2.00  
  Metric:   0          IS-Extended DUT1.00  
DUT2.02-00              0x00000006   0x952C        1016              0/0/0
  Metric:   0          IS-Extended DUT2.00  
  Metric:   0          IS-Extended DUT4.00  
DUT4.00-00           *  0x00000007   0x0C42        1016              0/0/0
  Area Address: 49.0001
  NLPID:        0xCC
  Hostname:     DUT4
  IP Address:   192.168.2.2
  Metric:   1          IS-Extended DUT2.02  
  Metric:   1          IP-Extended 200.0.0.0/24
  Metric:   1          IP-Extended 192.168.2.0/24
  Metric:   0          IP-Extended 4.4.4.4/32

IS-IS Level-2 Link State Database:
LSPID                   LSP Seq Num  LSP Checksum  LSP Holdtime      ATT/P/OL
DUT1.00-00              0x00000059   0x6E05        1015              0/0/0
  Area Address: 49.0001
  NLPID:        0xCC
  Hostname:     DUT1
  IP Address:   192.168.1.1
  Router ID:    1.1.1.1
  Metric:   1          IS-Extended DUT2.01  
    Affinity: 0x00000000 
    Interface IP Address: 192.168.1.1
    Physical BW: 1000000 kbits/sec
    Reservable Global Pool BW: 1000000 kbits/sec
    Global Pool BW Unreserved:
    [0]:  1000000 kbits/sec， [1]:  1000000 kbits/sec
    [2]:  1000000 kbits/sec， [3]:  1000000 kbits/sec
    [4]:  1000000 kbits/sec， [5]:  1000000 kbits/sec
    [6]:  1000000 kbits/sec， [7]:  1000000 kbits/sec
  Metric:   1          IP-Extended 192.168.1.0/24
  Metric:   1          IP-Extended 100.0.0.0/24
  Metric:   100000     IP-Extended 1.1.1.1/32
DUT2.00-00              0x00000054   0x1EED        1015              0/0/0
  Area Address: 49.0001
  NLPID:        0xCC
  Hostname:     DUT2
  IP Address:   192.168.1.2
  Router ID:    2.2.2.2
  Metric:   1          IS-Extended DUT2.01  
    Affinity: 0x00000000 
    Interface IP Address: 192.168.1.2
    Physical BW: 1000000 kbits/sec
    Reservable Global Pool BW: 1000000 kbits/sec
    Global Pool BW Unreserved:
    [0]:  1000000 kbits/sec， [1]:  1000000 kbits/sec
    [2]:  1000000 kbits/sec， [3]:  1000000 kbits/sec
    [4]:  1000000 kbits/sec， [5]:  1000000 kbits/sec
    [6]:  1000000 kbits/sec， [7]:  1000000 kbits/sec
  Metric:   1          IS-Extended DUT2.02  
    Affinity: 0x00000000 
    Interface IP Address: 192.168.2.1
    Physical BW: 1000000 kbits/sec
    Reservable Global Pool BW: 1000000 kbits/sec
    Global Pool BW Unreserved:
    [0]:  1000000 kbits/sec， [1]:  1000000 kbits/sec
    [2]:  1000000 kbits/sec， [3]:  1000000 kbits/sec
    [4]:  1000000 kbits/sec， [5]:  1000000 kbits/sec
    [6]:  1000000 kbits/sec， [7]:  1000000 kbits/sec
  Metric:   1          IP-Extended 192.168.1.0/24
  Metric:   1          IP-Extended 192.168.2.0/24
  Metric:   0          IP-Extended 2.2.2.2/32
  Metric:   1          IP-Extended 4.4.4.4/32
  Metric:   2          IP-Extended 200.0.0.0/24
DUT2.01-00              0x00000006   0x7450        1007              0/0/0
  Metric:   0          IS-Extended DUT2.00  
  Metric:   0          IS-Extended DUT1.00  
DUT2.02-00              0x00000006   0x952C        1015              0/0/0
  Metric:   0          IS-Extended DUT2.00  
  Metric:   0          IS-Extended DUT4.00  
DUT4.00-00           *  0x00000058   0xF85D        1016              0/0/0
  Area Address: 49.0001
  NLPID:        0xCC
  Hostname:     DUT4
  IP Address:   192.168.2.2
  Router ID:    4.4.4.4
  Metric:   1          IS-Extended DUT2.02  
    Affinity: 0x00000000 
    Interface IP Address: 192.168.2.2
    Physical BW: 1000000 kbits/sec
    Reservable Global Pool BW: 1000000 kbits/sec
    Global Pool BW Unreserved:
    [0]:  1000000 kbits/sec， [1]:  1000000 kbits/sec
    [2]:  1000000 kbits/sec， [3]:  1000000 kbits/sec
    [4]:  1000000 kbits/sec， [5]:  1000000 kbits/sec
    [6]:  1000000 kbits/sec， [7]:  1000000 kbits/sec
  Metric:   1          IP-Extended 200.0.0.0/24
  Metric:   1          IP-Extended 192.168.2.0/24
  Metric:   0          IP-Extended 4.4.4.4/32
  Metric:   1          IP-Extended 2.2.2.2/32
  Metric:   2          IP-Extended 192.168.1.0/24

        Returns:
{'IS-IS Level-2/DUT2.01-00/LSP Seq Num': '0x00000006'
'IS-IS Level-2/DUT2.00-00/DUT2.02/Reservable Global Pool BW': '1000000'
'IS-IS Level-1/DUT2.02-00/LSP Checksum': '0x952C'
'IS-IS Level-1/DUT2.01-00/ATT/P/OL': '0/0/0'
'IS-IS Level-1/DUT4.00-00/LSP Holdtime': '1016'
'IS-IS Level-2/DUT2.00-00/NLPID': '0xCC'
'IS-IS Level-2/DUT4.00-00/DUT2.02/Affinity': '0x00000000'
'IS-IS Level-2/DUT4.00-00/DUT2.02/Metric': '1'
'IS-IS Level-2/DUT4.00-00/IP Address': '192.168.2.2'
'IS-IS Level-2/DUT2.00-00/192.168.1.0/24/Metric': '1'
'IS-IS Level-2/DUT2.02-00/LSP Checksum': '0x952C'
'IS-IS Level-2/DUT4.00-00/DUT2.02/Physical BW': '1000000'
'IS-IS Level-1/DUT2.01-00/DUT1.00/Metric': '0'
'IS-IS Level-2/DUT1.00-00/LSP Seq Num': '0x00000059'
'IS-IS Level-1/DUT4.00-00/NLPID': '0xCC'
'IS-IS Level-1/DUT2.00-00/192.168.1.0/24/Metric': '1'
'IS-IS Level-1/DUT4.00-00/ATT/P/OL': '0/0/0'
'IS-IS Level-2/DUT2.00-00/Interface IP Address': '192.168.2.1'
'IS-IS Level-1/DUT4.00-00/200.0.0.0/24/Metric': '1'
'IS-IS Level-2/DUT2.00-00/Hostname': 'DUT2'
'IS-IS Level-1/DUT1.00-00/LSP Holdtime': '467'
'IS-IS Level-1/DUT1.00-00/NLPID': '0xCC'
'IS-IS Level-2/DUT4.00-00/200.0.0.0/24/Metric': '1'
'IS-IS Level-2/DUT1.00-00/DUT2.01/Physical BW': '1000000'
'IS-IS Level-1/DUT2.02-00/DUT4.00/Metric': '0'
'IS-IS Level-2/DUT1.00-00/ATT/P/OL': '0/0/0'
'IS-IS Level-2/DUT1.00-00/DUT2.01/Metric': '1'
'IS-IS Level-2/DUT2.01-00/DUT1.00/Metric': '0'
'IS-IS Level-1/DUT2.00-00/DUT2.02/Metric': '1'
'IS-IS Level-2/DUT2.00-00/4.4.4.4/32/Metric': '1'
'IS-IS Level-2/DUT2.00-00/192.168.2.0/24/Metric': '1'
'IS-IS Level-2/DUT4.00-00/2.2.2.2/32/Metric': '1'
'IS-IS Level-2/DUT2.00-00/DUT2.01/Reservable Global Pool BW': '1000000'
'IS-IS Level-1/DUT2.00-00/IP Address': '192.168.1.2'
'IS-IS Level-1/DUT2.00-00/LSP Seq Num': '0x00000008'
'IS-IS Level-2/DUT4.00-00/192.168.1.0/24/Metric': '2'
'IS-IS Level-1/DUT2.02-00/DUT2.00/Metric': '0'
'IS-IS Level-1/DUT2.01-00/LSP Seq Num': '0x00000006'
'IS-IS Level-2/DUT2.00-00/DUT2.02/Affinity': '0x00000000'
'IS-IS Level-2/DUT1.00-00/100.0.0.0/24/Metric': '1'
'IS-IS Level-2/DUT4.00-00/4.4.4.4/32/Metric': '0'
'IS-IS Level-2/DUT2.00-00/2.2.2.2/32/Metric': '0'
'IS-IS Level-1/DUT4.00-00/4.4.4.4/32/Metric': '0'
'IS-IS Level-2/DUT2.00-00/200.0.0.0/24/Metric': '2'
'IS-IS Level-2/DUT2.00-00/DUT2.02/Physical BW': '1000000'
'IS-IS Level-1/DUT4.00-00/DUT2.02/Metric': '1'
'IS-IS Level-1/DUT1.00-00/Hostname': 'DUT1'
'IS-IS Level-2/DUT1.00-00/LSP Checksum': '0x6E05'
'IS-IS Level-1/DUT2.00-00/192.168.2.0/24/Metric': '1'
'IS-IS Level-2/DUT2.02-00/DUT4.00/Metric': '0'
'IS-IS Level-1/DUT4.00-00/IP Address': '192.168.2.2'
'IS-IS Level-2/DUT1.00-00/LSP Holdtime': '1015'
'IS-IS Level-2/DUT4.00-00/192.168.2.0/24/Metric': '1'
'IS-IS Level-1/DUT1.00-00/DUT2.01/Metric': '1'
'IS-IS Level-2/DUT1.00-00/DUT2.01/Reservable Global Pool BW': '1000000'
'IS-IS Level-1/DUT4.00-00/192.168.2.0/24/Metric': '1'
'IS-IS Level-2/DUT2.01-00/DUT2.00/Metric': '0'
'IS-IS Level-1/DUT2.00-00/ATT/P/OL': '0/0/0'
'IS-IS Level-1/DUT2.00-00/NLPID': '0xCC'
'IS-IS Level-2/DUT2.00-00/DUT2.01/Physical BW': '1000000'
'IS-IS Level-2/DUT2.00-00/Router ID': '2.2.2.2'
'IS-IS Level-2/DUT4.00-00/NLPID': '0xCC'
'IS-IS Level-2/DUT1.00-00/DUT2.01/Affinity': '0x00000000'
'IS-IS Level-1/DUT2.01-00/DUT2.00/Metric': '0'
'IS-IS Level-2/DUT2.01-00/LSP Holdtime': '1007'
'IS-IS Level-2/DUT4.00-00/DUT2.02/Reservable Global Pool BW': '1000000'
'IS-IS Level-2/DUT4.00-00/LSP Checksum': '0xF85D'
'IS-IS Level-2/DUT2.00-00/LSP Holdtime': '1015'
'IS-IS Level-1/DUT1.00-00/LSP Checksum': '0x17DB'
'IS-IS Level-1/DUT1.00-00/IP Address': '192.168.1.1'
'IS-IS Level-2/DUT2.00-00/DUT2.01/Affinity': '0x00000000'
'IS-IS Level-1/DUT1.00-00/100.0.0.0 255.255.255.0/Metric': '1'
'IS-IS Level-2/DUT1.00-00/Interface IP Address': '192.168.1.1'
'IS-IS Level-2/DUT2.00-00/DUT2.01/Metric': '1'
'IS-IS Level-1/DUT2.00-00/LSP Holdtime': '1016'
'IS-IS Level-1/DUT2.00-00/Hostname': 'DUT2'
'IS-IS Level-1/DUT1.00-00/1.1.1.1 255.255.255.255/Metric': '0'
'IS-IS Level-2/DUT2.02-00/LSP Holdtime': '1015'
'IS-IS Level-2/DUT2.02-00/LSP Seq Num': '0x00000006'
'IS-IS Level-1/DUT4.00-00/LSP Seq Num': '0x00000007'
'IS-IS Level-2/DUT4.00-00/Interface IP Address': '192.168.2.2'
'IS-IS Level-2/DUT1.00-00/1.1.1.1/32/Metric': '100000'
'IS-IS Level-1/DUT2.02-00/LSP Seq Num': '0x00000006'
'IS-IS Level-1/DUT2.00-00/LSP Checksum': '0x7E2A'
'IS-IS Level-2/DUT1.00-00/IP Address': '192.168.1.1'
'IS-IS Level-2/DUT2.00-00/IP Address': '192.168.1.2'
'IS-IS Level-1/DUT2.01-00/LSP Checksum': '0x7450'
'IS-IS Level-2/DUT2.01-00/LSP Checksum': '0x7450'
'IS-IS Level-1/DUT2.00-00/DUT2.01/Metric': '1'
'IS-IS Level-1/DUT1.00-00/192.168.1.0 255.255.255.0/Metric': '1'
'IS-IS Level-1/DUT4.00-00/LSP Checksum': '0x0C42'
'IS-IS Level-2/DUT4.00-00/Router ID': '4.4.4.4'
'IS-IS Level-2/DUT2.00-00/ATT/P/OL': '0/0/0'
'IS-IS Level-2/DUT2.00-00/LSP Seq Num': '0x00000054'
'IS-IS Level-2/DUT2.01-00/ATT/P/OL': '0/0/0'
'IS-IS Level-1/DUT2.00-00/2.2.2.2/32/Metric': '0'
'IS-IS Level-2/DUT2.02-00/ATT/P/OL': '0/0/0'
'IS-IS Level-2/DUT4.00-00/LSP Seq Num': '0x00000058'
'IS-IS Level-1/DUT1.00-00/ATT/P/OL': '0/0/0'
'IS-IS Level-1/DUT4.00-00/Hostname': 'DUT4'
'IS-IS Level-1/DUT2.01-00/LSP Holdtime': '1007'
'IS-IS Level-2/DUT1.00-00/Router ID': '1.1.1.1'
'IS-IS Level-2/DUT2.00-00/LSP Checksum': '0x1EED'
'IS-IS Level-1/DUT2.02-00/ATT/P/OL': '0/0/0'
'IS-IS Level-2/DUT4.00-00/ATT/P/OL': '0/0/0'
'IS-IS Level-2/DUT2.00-00/DUT2.02/Metric': '1'
'IS-IS Level-2/DUT4.00-00/Hostname': 'DUT4'
'IS-IS Level-2/DUT4.00-00/LSP Holdtime': '1016'
'IS-IS Level-2/DUT1.00-00/Hostname': 'DUT1'
'IS-IS Level-1/DUT1.00-00/LSP Seq Num': '0x00000035'
'IS-IS Level-2/DUT2.02-00/DUT2.00/Metric': '0'
'IS-IS Level-1/DUT2.02-00/LSP Holdtime': '1016'
'IS-IS Level-2/DUT1.00-00/NLPID': '0xCC'
'IS-IS Level-2/DUT1.00-00/192.168.1.0/24/Metric': '1'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show isis database verbose | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_list = self.dut_get_start_show_info(show_info)
        for value in show_list:
            if "Link State Database" in value:
                key_1 = value.split("Link")[0].strip()
            elif "LSPID" in value or "Area" in value:
                pass
            elif re.match("\S+(.*)",value):
                value = value.replace("*","").strip()
                lspid_list = value.split()
                key_2 = lspid_list[0].strip()
                if len(lspid_list) == 5:
                    dict_value[key_1+"/"+key_2+"/LSP Seq Num"] = lspid_list[1]
                    dict_value[key_1 + "/" + key_2 + "/LSP Checksum"] = lspid_list[2]
                    dict_value[key_1 + "/" + key_2 + "/LSP Holdtime"] = lspid_list[3]
                    dict_value[key_1 + "/" + key_2 + "/ATT/P/OL"] = lspid_list[4]
            else:
                if "Area Address:" in value or "NLPID:" in value or "Hostname:" in value or "IP Address:" in value or "Router ID:" in value:
                    list_colon = value.strip().split(":")
                    dict_value[key_1 + "/" + key_2 +"/"+list_colon[0].strip()] = list_colon[1].strip()
                elif re.match("Metric:\s+\d+\s+\S+\s+(.*)",value.strip()):
                    obj_metric = re.match("Metric:\s+(\d+)\s+\S+\s+(.*)",value.strip())
                    key_3 = obj_metric.group(2).strip()
                    dict_value[key_1 + "/" + key_2 +"/"+key_3+"/Metric"] = obj_metric.group(1).strip()
                elif "Affinity:" in value or "Interface IP Address:" in value or "Physical BW:" in value or "Reservable Global Pool BW:" in value:
                    list_colon = value.strip().split(":")
                    dict_value[key_1 + "/" + key_2 + "/" + key_3+"/"+list_colon[0].strip()] = list_colon[1].strip("kbits/sec").strip()
                elif re.match("\[(\d+)\]:\s+(\d+) kbits/sec, \[(\d+)\]:\s+(\d+) kbits/sec",value.strip()):
                    obj_BW = re.match("\[(\d+)\]:\s+(\d+) kbits/sec, \[(\d+)\]:\s+(\d+) kbits/sec", value.strip())
                    dict_value[key_1 + "/" + key_2 + "/" + key_3 + "/" +obj_BW.group(1)] = obj_BW.group(2)
                    dict_value[key_1 + "/" + key_2 + "/" + key_3 + "/" + obj_BW.group(3)] = obj_BW.group(4)

        return dict_value
    def dut_get_show_bgp_linkstate_linkstate_detail(self,show_info):
        dict_value = {}
        show_list = self.dut_get_start_show_info(show_info)
        flag = 0
        list_2=[]
        for value in show_list:
            if re.match("BGP routing table entry for (.*)/\d+\Z", value):
                obj = re.match("BGP routing table entry for (.*)/\d+\Z", value)
                key_1 = obj.group(1).strip()
            elif re.match("BGP routing table entry for .*", value):
                obj = re.match("BGP routing table entry for (.*)", value)
                key_1 = obj.group(1).strip()
            elif re.match("\s+(\d+\.\d+\.\d+\.\d+) \(metric (\d+)\) from (\d+\.\d+\.\d+\.\d+).*",value):
                obj_2 = re.match("\s+(\d+\.\d+\.\d+\.\d+) \(metric (\d+)\) from (\d+\.\d+\.\d+\.\d+).*",value)
                key_2 = obj_2.group(1)
                dict_value[key_1 + "/" + key_2 + "/metric"] = obj_2.group(2).strip()
                dict_value[key_1 + "/" + key_2 + "/from"] = obj_2.group(3).strip()
            elif re.match("\s+(\d+\.\d+\.\d+\.\d+) from \d+\.\d+\.\d+\.\d+ \((\d+\.\d+\.\d+\.\d+)\).*",value):
                obj_2 = re.match("\s+(\d+\.\d+\.\d+\.\d+) from \d+\.\d+\.\d+\.\d+ \((\d+\.\d+\.\d+\.\d+)\).*",value)
                key_2 = obj_2.group(1)
                dict_value[key_1 + "/" + key_2 + "/from"] = obj_2.group(2).strip()
            elif re.match("IGP instance id: (\d+)",value.strip()):
                obj_5 = re.match("IGP instance id: (\d+)",value.strip())
                dict_value[key_1 + "/" + key_2 + "/IGP instance id"] = obj_5.group(1).strip()
            elif re.match("Origin (.*), metric (\d+), localpref (\d+), (\S+), (\S+), (\S+)",value.strip()):
                obj_3 = re.match("Origin (.*), metric (\d+), localpref (\d+), (\S+), (\S+), (\S+)",value.strip())
                dict_value[key_1 + "/" + key_2 + "/Origin"] = obj_3.group(1).strip()
                dict_value[key_1 + "/" + key_2 + "/Origin/metric"] = obj_3.group(2).strip()
                if "best" in value:
                    dict_value[key_1 + "/" + key_2 + "/Origin/optimized"] = "best"
            elif re.match("Origin (.*), metric (\d+), localpref (\d+), (\S+), (\S+)",value.strip()):
                obj_3 = re.match("Origin (.*), metric (\d+), localpref (\d+), (\S+), (\S+)",value.strip())
                dict_value[key_1 + "/" + key_2 + "/Origin"] = obj_3.group(1).strip()
                dict_value[key_1 + "/" + key_2 + "/Origin/metric"] = obj_3.group(2).strip()
                if "best" in value:
                    dict_value[key_1 + "/" + key_2 + "/Origin/optimized"] = "best"
            elif re.match("Origin (.*), (\S*metric) (\d+), localpref (\d+), (\S+), (\S+)",value.strip()):
                obj_3 = re.match("Origin (.*), (\S*metric) (\d+), localpref (\d+), (\S+), (\S+)",value.strip())
                dict_value[key_1 + "/" + key_2 + "/Origin"] = obj_3.group(1).strip()
                dict_value[key_1 + "/" + key_2 + "/Origin/"+obj_3.group(2).strip()] = obj_3.group(3).strip()
                dict_value[key_1 + "/" + key_2 + "/Origin/metric"] = obj_3.group(3).strip()
                if "best" in value:
                    dict_value[key_1 + "/" + key_2 + "/Origin/optimized"] = "best"
            elif re.match("Local IPv4 Router-ID: (\d+\.\d+\.\d+\.\d+)",value.strip()):
                obj_4 = re.match("Local IPv4 Router-ID: (\d+\.\d+\.\d+\.\d+)",value.strip())
                dict_value[key_1 + "/" + key_2 + "/Local IPv4 Router-ID"] = obj_4.group(1).strip()
            elif re.match("Link-State: Local TE Router-ID: (\d+\.\d+\.\d+\.\d+)",value.strip()):
                obj_4 = re.match("Link-State: Local TE Router-ID: (\d+\.\d+\.\d+\.\d+)",value.strip())
                dict_value[key_1 + "/" + key_2 + "/Local TE Router-ID"] = obj_4.group(1).strip()
            elif re.match("Link-State: Local TE Router-ID: (.*), Remote TE Router-ID: (.*)",value.strip()):
                obj_4 = re.match("Link-State: Local TE Router-ID: (.*), Remote TE Router-ID: (.*)",value.strip())
                dict_value[key_1 + "/" + key_2 + "/Local TE Router-ID"] = obj_4.group(1).strip()
                dict_value[key_1 + "/" + key_2 + "/Remote TE Router-ID"] = obj_4.group(2).strip()
            elif re.match("Link-State: Node-name: (.*)",value.strip()):
                obj_4 = re.match("Link-State: Node-name: (.*)",value.strip())
                dict_value[key_1 + "/" + key_2 + "/Node-name"] = obj_4.group(1).strip()
            elif re.match("Node-name: (.*)",value.strip()):
                obj_4 = re.match("Node-name: (.*)",value.strip())
                dict_value[key_1 + "/" + key_2 + "/Node-name"] = obj_4.group(1).strip()
            elif re.match("Isis-area:(.*), Local TE Router-ID:(.*)",value.strip()):
                obj_4 = re.match("Isis-area:(.*), Local TE Router-ID:(.*)",value.strip())
                dict_value[key_1 + "/" + key_2 + "/Isis-area"] = obj_4.group(1).strip()
                dict_value[key_1 + "/" + key_2 + "/Local TE Router-ID"] = obj_4.group(2).strip()
            elif re.match("Isis-area:(.*)",value.strip()):
                obj_4 = re.match("Isis-area:(.*)",value.strip())
                dict_value[key_1 + "/" + key_2 + "/Isis-area"] = obj_4.group(1).strip()
            elif re.match("Max-link-bw\(kbits/sec\): (.*), Max-Reserv-bw\(kbits/sec\): (.*)",value.strip()):
                obj_4 = re.match("Max-link-bw\(kbits/sec\): (.*), Max-Reserv-bw\(kbits/sec\): (.*)",value.strip())
                dict_value[key_1 + "/" + key_2 + "/Max-link-bw"] = obj_4.group(1).strip()
                dict_value[key_1 + "/" + key_2 + "/Max-Reserv-bw"] = obj_4.group(2).strip()
            elif re.match("Max-link-bw\(kbits/sec\): (.*)",value.strip()):
                obj_4 = re.match("Max-link-bw\(kbits/sec\): (.*)",value.strip())
                dict_value[key_1 + "/" + key_2 + "/Max-link-bw"] = obj_4.group(1).strip()
            elif re.match("Max-Reserv-bw\(kbits/sec\)", value.strip()):
                obj_4 = re.match("Max-Reserv-bw\(kbits/sec\): (.*)", value.strip())
                dict_value[key_1 + "/" + key_2 + "/Max-Reserv-bw"] = obj_4.group(1).strip()
            elif re.match("Unreserve Bandwidth\(kbits/sec\):(.*)",value.strip()):
                obj_4 = re.match("Unreserve Bandwidth\(kbits/sec\):(.*)",value.strip())
                if obj_4.group(1).strip() == "":
                    flag = 1
                    list_2 = []
                else:
                    list_2 = obj_4.group(1).strip().split()
                    dict_value[key_1 + "/" + key_2 + "/Unreserve Bandwidth"] = list_2
            elif re.match("IGP Metric-Bytes: (.*), IGP Metric: (.*)",value.strip()):
                if flag == 1 and len(list_2) > 0:
                    dict_value[key_1 + "/" + key_2 + "/Unreserve Bandwidth"] = list_2
                flag = 0
                obj_4 = re.match("IGP Metric-Bytes: (.*), IGP Metric: (.*)",value.strip())
                dict_value[key_1 + "/" + key_2 + "/IGP Metric-Bytes"] = obj_4.group(1).strip()
                dict_value[key_1 + "/" + key_2 + "/IGP Metric"] = obj_4.group(2).strip()
            elif re.match("IGP metric: (\d+)",value.strip()):
                obj = re.match("IGP metric: (\d+)",value.strip())
                dict_value[key_1 + "/" + key_2 + "/IGP Metric"] = obj.group(1).strip()
            elif re.match("RX ID: (.*),\s*TX ID: (.*)",value.strip()):
                obj_4 = re.match("RX ID: (.*),\s*TX ID: (.*)",value.strip())
                dict_value[key_1 + "/" + key_2 + "/IGP Metric-Bytes/RX ID"] = obj_4.group(1).strip()
                dict_value[key_1 + "/" + key_2 + "/IGP Metric/TX ID"] = obj_4.group(2).strip()
            if flag == 1 :
                if re.match("\[0\].*\[1\]:.*",value.strip()) or re.match("\[4\].*\[5\]:.*",value.strip()):
                    list_3 = value.strip().split("  ")
                    for value_list3 in list_3:
                        if value_list3.strip() !="":
                            list_4 = value_list3.strip().split(":")
                            list_2.append(list_4[-1].strip())
        return dict_value
    def dut_get_show_interfaces_tunnel_num(self,show_info):
        """
        Function:show interfaces tunnel <num>回显解析函数
        CLI命令:show interfaces tunnel <num>
        回显信息示例:
S79_2#show interfaces  tunnel 510
    Index(dec):559 (hex):22f
    Tunnel 510 is UP  ， line protocol is UP    
      Hardware is Tunnel
      Interface address is: 172.1.255.2/24
      Interface IPv6 address is:
        No IPv6 address
      MTU 1480 bytes， BW 9 Kbit
      Encapsulation protocol is Tunnel， loopback not set
      Keepalive interval is 10 sec ，retries 0.
      Carrier delay is 2 sec
    Tunnel attributes:
      Tunnel source 20.1.255.2， destination 10.1.255.1， routable
      Tunnel TOS/Traffic Class not set， Tunnel TTL 254
      Tunnel config nested limit is 0， current nested number is 0
      Tunnel protocol/transport is ipip 
      Tunnel transport VPN is no set

        Returns:
{"Interface IPv6 address is": ["No IPv6 address"], "Encapsulation protocol": "Tunnel\uff0c loopback not set"
"Carrier delay": "2 sec"
"Tunnel 510": "UP  \uff0c line protocol"
"Hardware": "Tunnel"
"Tunnel config nested limit": "0\uff0c current nested number"
"Keepalive interval": "10 sec \uff0cretries 0."
"Tunnel transport VPN": "no set"
"Tunnel protocol/transport": "ipip"
"(hex)": "22f"
"Interface address": ": 172.1.255.2/24"
"Index(dec)": "559"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interfaces tunnel <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_list = self.dut_get_start_show_info(show_info)
        flag = 0
        for value in show_list:
            value = value.strip()
            if re.match("Index\(dec\):\d+\s+\(hex\):(.*)", value):
                obj_1 = re.match("Index\(dec\):(\d+)\s+\(hex\):(.*)",value)
                dict_value["Index(dec)"] = obj_1.group(1)
                dict_value["(hex)"] = obj_1.group(2).strip()
            elif "Interface IPv6 address is:" in value:
                flag = 1
                ipv6_list = []
                continue
            elif "MTU" in value:
                if flag == 1 :
                    dict_value["Interface IPv6 address is"] = ipv6_list
                flag = 0
                ipv6_list = []
                if re.match("MTU (\d+) bytes, BW (\d+) Kbit",value):
                    obj_1 = re.match("MTU (\d+) bytes, BW (\d+) Kbit",value)
                    dict_value["MTU"] = obj_1.group(1)
                    dict_value["BW"] = obj_1.group(2)

            elif "," in value and re.match(".*is.*,.*is.*",value):
                list_1 = value.split(",")
                for list_1_value in list_1:
                    list_2 = list_1_value.split("is")
                    dict_value[list_2[0].strip()] = list_2[1].strip()
            elif "," not in value and re.match(".*is.*",value) and "IPv6 address is" not in value:
                list_2 = value.split("is")
                dict_value[list_2[0].strip()] = list_2[1].strip()
            elif re.match("Encapsulation protocol is (.*), loopback (.*)",value):
                obj_1 = re.match("Encapsulation protocol is (.*), loopback (.*)",value)
                dict_value["Encapsulation protocol"] = obj_1.group(1).strip()
                dict_value["loopback"] = obj_1.group(2).strip()
            elif re.match("Keepalive interval is (\d+) sec ,retries (\d+).*",value):
                obj_1 = re.match("Keepalive interval is (\d+) sec ,retries (\d+).*",value)
                dict_value["Keepalive interval"] = obj_1.group(1).strip()
                dict_value["retries"] = obj_1.group(2).strip()
            elif re.match("Tunnel source (.*), destination (.*), (.*)",value):
                obj_1 = re.match("Tunnel source (.*), destination (.*), (.*)",value)
                dict_value["Tunnel source"] = obj_1.group(1).strip()
                dict_value["destination"] = obj_1.group(2).strip()
                dict_value["dip_status"] = obj_1.group(3).strip()
            elif re.match("Tunnel TOS/Traffic Class (.*), Tunnel TTL (\d+)",value):
                obj_1 = re.match("Tunnel TOS/Traffic Class (.*), Tunnel TTL (\d+)",value)
                dict_value["Tunnel TOS/Traffic Class"] = obj_1.group(1).strip()
                dict_value["Tunnel TTL"] = obj_1.group(2).strip()
            if flag == 1 :
                ipv6_list.append(value)
        return dict_value
    def dut_get_show_bfd_neighbors_parmconsult(self,show_info):
        """
        Function:show bfd neighbors parm-consult回显解析函数
        CLI命令:show bfd neighbors parm-consult
        回显信息示例:


        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bfd neighbors parm-consult | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_list = self.dut_get_start_show_info(show_info)
        for value in show_list:
            if re.match("IPV4 sessions: (.*), UP: (.*)  Consult-Finish:(.*)",value):
                obj = re.match("IPV4 sessions: (.*), UP: (.*)  Consult-Finish:(.*)",value)
                dict_value["IPV4 sessions"] = obj.group(1).strip()
                dict_value["IPV4 sessions/UP"] = obj.group(2).strip()
                dict_value["IPV4 sessions/Consult-Finish"] = obj.group(3).strip()
            elif re.match("IPV6 sessions: (.*), UP: (.*)  Consult-Finish:(.*)",value):
                obj = re.match("IPV6 sessions: (.*), UP: (.*)  Consult-Finish:(.*)",value)
                dict_value["IPV6 sessions"] = obj.group(1).strip()
                dict_value["IPV6 sessions/UP"] = obj.group(2).strip()
                dict_value["IPV6 sessions/Consult-Finish"] = obj.group(3).strip()
        return dict_value
    def dut_get_show_ipv6_mld_snooping_gda(self,show_info):
        """
        Function:show ipv6 mld snooping gda回显解析函数
        CLI命令:show ipv6 mld snooping gda
        回显信息示例:
Ruijie#show ipv6 mld snooping gda
    Multicast Switching Cache Table
      D: DYNAMIC
      S: STATIC
      M: MROUTE
    (*， FF15::1， 2):
      VLAN(2) 2 OPORTS:
        ROUTER(M)
        TenGigabitEthernet 1/7/15(D)

        Returns:
{"ROUTER": "M"
"VLAN": "2"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 mld snooping gda | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_list = self.dut_get_start_show_info(show_info)
        for value in show_list:
            if re.match("\((\S+), (\S+), (\S+)\):",value.strip()):
                obj = re.match("\((\S+), (\S+), (\S+)\):",value.strip())
                dict_value["IP"] = obj.group(2)
            elif re.match("VLAN\(\d+\) \d+ OPORTS:",value.strip()):
                obj_1 =  re.match("VLAN\((\d+)\) \d+ OPORTS:",value.strip())
                dict_value["VLAN"] = obj_1.group(1)
            elif re.match("(\S+)\((\w)\)",value.strip()):
                obj_2 = re.match("(\S+)\((\w)\)",value.strip())
                dict_value[obj_2.group(1)] = obj_2.group(2)
            elif re.match("(\S+\s\d+/\d+(/d+)*)\(\w\)", value.strip()):
                obj_2 = re.match("(\S+\s\d+/\d+(/d+)*)\((\w)\)", value.strip())
                dict_value["port"] = obj_2.group(2)
                dict_value[obj_2.group(2)+"/mode"] = obj_2.group(3)
        return dict_value
    def dut_get_show_efm_packet_interface_dutport(self,show_info):
        """
        Function:show efm packet interface <dutport>回显解析函数
        CLI命令:show efm packet interface <dutport>
        回显信息示例:
R1#show efm packet interface gigabitEthernet 0/0
GigabitEthernet 0/0:
OAMPDU statistic:               Tx         Rx
---------------------------------------------------
  Information OAMPDU:           40         0       
  Unique Event OAMPDU:          0          0       
  Duplicate Event OAMPDU:       0          0       
  Loopback Control OAMPDU:      0          0       
  Variable Request OAMPDU:      0          0       
  Variable Response OAMPDU:     0          0       
  Organization Specific OAMPDU: 0          0       
  Unsupported OAMPDU:           0          0       
  Lost OAMPDU:                  0          -

R1#

        Returns:
{'GigabitEthernet 0/0/Organization Specific OAMPDU/Tx': '0'
'GigabitEthernet 0/0/Variable Response OAMPDU/Tx': '0'
'GigabitEthernet 0/0/Unique Event OAMPDU/Rx': '0'
'GigabitEthernet 0/0/Lost OAMPDU/Tx': '0'
'GigabitEthernet 0/0/Variable Request OAMPDU/Tx': '0'
'GigabitEthernet 0/0/Information OAMPDU/Tx': '40'
'GigabitEthernet 0/0/Lost OAMPDU/Rx': '0'
'GigabitEthernet 0/0/Unique Event OAMPDU/Tx': '0'
'GigabitEthernet 0/0/Duplicate Event OAMPDU/Tx': '0'
'GigabitEthernet 0/0/Loopback Control OAMPDU/Rx': '0'
'GigabitEthernet 0/0/Organization Specific OAMPDU/Rx': '0'
'GigabitEthernet 0/0/Variable Request OAMPDU/Rx': '0'
'GigabitEthernet 0/0/Loopback Control OAMPDU/Tx': '0'
'GigabitEthernet 0/0/Variable Response OAMPDU/Rx': '0'
'GigabitEthernet 0/0/Unsupported OAMPDU/Rx': '0'
'GigabitEthernet 0/0/Information OAMPDU/Rx': '40'
'GigabitEthernet 0/0/Duplicate Event OAMPDU/Rx': '0'
'GigabitEthernet 0/0/Unsupported OAMPDU/Tx': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show efm packet interface <dutport> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        show_info_list = self.dut_get_start_show_info(show_info)
        for info_list_value in show_info_list:
            if "OAMPDU statistic" in info_list_value:
                list_0 = re.split(r'\s{2,}',info_list_value.strip())
                key_3_1 = list_0[1].strip()
                key_3_2 = list_0[2].strip()
            elif ":" in info_list_value :
                list_1 = info_list_value.split(":")
                if list_1[1].strip() == "":
                    key_1 = list_1[0].strip()
                else:
                    key_2 = list_1[0].strip()
                    list_2 = list_1[1].strip().split()
                    value_1 = list_2[0].strip()
                    value_2 = list_2[0].strip()
                    dict_value[key_1+"/"+key_2+"/"+key_3_1] = value_1
                    dict_value[key_1+"/"+key_2+"/"+key_3_2] = value_2
        return dict_value
    def dut_get_show_mmu_bufferconfig_interface_dutport(self,show_info):
        """
        Function:show mmu buffer-config interface <dutport>回显解析函数
        CLI命令:show mmu buffer-config interface <dutport>
        回显信息示例:
Ruijie#show mmu buffer-config interface <dutport>
Interface TenGigabitEthernet0/1:
Slot 0 Port Group 1:
Type       Queue  Admin-gua Oper-gua Admin-thr(%) Oper-thr(%)
voq        0      0         0        0            0          
voq        1      30        0        60           60         
voq        2      0         0        0            0          
voq        3      0         0        0            0          
voq        4      0         0        0            0          
voq        5      0         0        0            0          
voq        6      0         0        0            0          
voq        7      0         0        0            0          

Slot 0 Port Group 2:
Type       Queue  Admin-gua Oper-gua Admin-thr(%) Oper-thr(%)
voq        0      0         0        0            0          
voq        1      30        0        60           60         
voq        2      0         0        0            0          
voq        3      0         0        0            0          
voq        4      0         0        0            0          
voq        5      0         0        0            0          
voq        6      0         0        0            0          
voq        7      0         0        0            0          

Slot 0 Port Group 3:
Type       Queue  Admin-gua Oper-gua Admin-thr(%) Oper-thr(%)
voq        0      0         0        0            0          
voq        1      30        0        60           60         
voq        2      0         0        0            0          
voq        3      0         0        0            0          
voq        4      0         0        0            0          
voq        5      0         0        0            0          
voq        6      0         0        0            0          
voq        7      0         0        0            0          

Slot 0 Port Group 4:
Type       Queue  Admin-gua Oper-gua Admin-thr(%) Oper-thr(%)
voq        0      0         0        0            0          
voq        1      30        0        60           60         
voq        2      0         0        0            0          
voq        3      0         0        0            0          
voq        4      0         0        0            0          
voq        5      0         0        0            0          
voq        6      0         0        0            0          
voq        7      0         0        0            0

        Returns:
{'Slot 0 Port Group 2/4/Admin-gua': '0'
'Slot 0 Port Group 4/5/Admin-gua': '0'
'Slot 0 Port Group 1/3/Oper-thr(%)': '0'
'Slot 0 Port Group 2/0/Type': 'voq'
'Slot 0 Port Group 3/5/Type': 'voq'
'Slot 0 Port Group 4/6/Type': 'voq'
'Slot 0 Port Group 4/3/Oper-gua': '0'
'Slot 0 Port Group 3/7/Admin-gua': '0'
'Slot 0 Port Group 1/3/Oper-gua': '0'
'Slot 0 Port Group 1/2/Type': 'voq'
'Slot 0 Port Group 2/4/Oper-thr(%)': '0'
'Slot 0 Port Group 4/1/Oper-gua': '0'
'Slot 0 Port Group 2/5/Admin-thr(%)': '0'
'Slot 0 Port Group 2/3/Oper-gua': '0'
'Slot 0 Port Group 2/7/Type': 'voq'
'Slot 0 Port Group 2/4/Type': 'voq'
'Slot 0 Port Group 4/4/Type': 'voq'
'Slot 0 Port Group 1/2/Admin-thr(%)': '0'
'Queue_list': ['Slot 0 Port Group 4/0'
'Slot 0 Port Group 4/1'
'Slot 0 Port Group 4/2'
'Slot 0 Port Group 4/3'
'Slot 0 Port Group 4/4'
'Slot 0 Port Group 4/5'
'Slot 0 Port Group 4/6'
'Slot 0 Port Group 4/7'], 'Slot 0 Port Group 4/7/Oper-thr(%)': '0'
'Slot 0 Port Group 1/3/Admin-thr(%)': '0'
'Slot 0 Port Group 2/6/Oper-gua': '0'
'Slot 0 Port Group 4/0/Admin-thr(%)': '0'
'Slot 0 Port Group 3/1/Oper-gua': '0'
'Slot 0 Port Group 4/0/Oper-gua': '0'
'Slot 0 Port Group 1/1/Oper-gua': '0'
'Slot 0 Port Group 2/3/Type': 'voq'
'Slot 0 Port Group 4/6/Admin-gua': '0'
'Slot 0 Port Group 3/4/Type': 'voq'
'Slot 0 Port Group 3/7/Type': 'voq'
'Slot 0 Port Group 4/7/Type': 'voq'
'Slot 0 Port Group 2/6/Type': 'voq'
'Slot 0 Port Group 4/1/Admin-thr(%)': '60'
'Slot 0 Port Group 3/6/Type': 'voq'
'Slot 0 Port Group 4/4/Admin-gua': '0'
'Slot 0 Port Group 4/2/Oper-thr(%)': '0'
'Slot 0 Port Group 1/6/Admin-gua': '0'
'Slot 0 Port Group 1/5/Oper-gua': '0'
'Slot 0 Port Group 3/3/Type': 'voq'
'Slot 0 Port Group 2/0/Oper-gua': '0'
'Slot 0 Port Group 2/1/Type': 'voq'
'Slot 0 Port Group 1/7/Admin-thr(%)': '0'
'Slot 0 Port Group 1/1/Oper-thr(%)': '60'
'Slot 0 Port Group 3/1/Admin-thr(%)': '60'
'Slot 0 Port Group 2/3/Admin-gua': '0'
'Slot 0 Port Group 1/4/Oper-gua': '0'
'Slot 0 Port Group 4/5/Oper-gua': '0'
'Slot 0 Port Group 3/4/Oper-gua': '0'
'Slot 0 Port Group 3/0/Admin-gua': '0'
'Slot 0 Port Group 4/3/Admin-thr(%)': '0'
'Slot 0 Port Group 4/6/Admin-thr(%)': '0'
'Slot 0 Port Group 1/2/Admin-gua': '0'
'Slot 0 Port Group 3/4/Admin-gua': '0'
'Slot 0 Port Group 3/6/Oper-thr(%)': '0'
'Slot 0 Port Group 3/3/Admin-thr(%)': '0'
'Slot 0 Port Group 3/5/Oper-thr(%)': '0'
'Slot 0 Port Group 1/3/Admin-gua': '0'
'Slot 0 Port Group 3/7/Oper-thr(%)': '0'
'Slot 0 Port Group 3/4/Admin-thr(%)': '0'
'Slot 0 Port Group 4/3/Type': 'voq'
'Slot 0 Port Group 2/4/Oper-gua': '0'
'Slot 0 Port Group 3/6/Admin-thr(%)': '0'
'Slot 0 Port Group 2/3/Oper-thr(%)': '0'
'Slot 0 Port Group 1/7/Oper-thr(%)': '0'
'Slot 0 Port Group 2/5/Oper-thr(%)': '0'
'Slot 0 Port Group 2/5/Oper-gua': '0'
'Slot 0 Port Group 3/1/Oper-thr(%)': '60'
'Slot 0 Port Group 3/6/Admin-gua': '0'
'Slot 0 Port Group 1/7/Oper-gua': '0'
'Slot 0 Port Group 4/7/Admin-thr(%)': '0'
'Slot 0 Port Group 2/0/Oper-thr(%)': '0'
'Slot 0 Port Group 2/6/Oper-thr(%)': '0'
'Slot 0 Port Group 4/1/Oper-thr(%)': '60'
'Slot 0 Port Group 4/2/Admin-gua': '0'
'Slot 0 Port Group 4/2/Type': 'voq'
'Slot 0 Port Group 1/2/Oper-gua': '0'
'Slot 0 Port Group 4/0/Type': 'voq'
'Slot 0 Port Group 2/0/Admin-gua': '0'
'Slot 0 Port Group 2/2/Oper-gua': '0'
'Slot 0 Port Group 4/1/Type': 'voq'
'Slot 0 Port Group 2/4/Admin-thr(%)': '0'
'Slot 0 Port Group 4/7/Oper-gua': '0'
'Slot 0 Port Group 1/5/Type': 'voq'
'Slot 0 Port Group 2/2/Type': 'voq'
'Slot 0 Port Group 1/0/Oper-gua': '0'
'Slot 0 Port Group 2/6/Admin-thr(%)': '0'
'Slot 0 Port Group 2/5/Type': 'voq'
'Slot 0 Port Group 4/3/Oper-thr(%)': '0'
'Slot 0 Port Group 1/0/Admin-gua': '0'
'Slot 0 Port Group 2/2/Oper-thr(%)': '0'
'Slot 0 Port Group 2/1/Admin-thr(%)': '60'
'Slot 0 Port Group 1/6/Type': 'voq'
'Slot 0 Port Group 1/5/Admin-gua': '0'
'Slot 0 Port Group 3/4/Oper-thr(%)': '0'
'Slot 0 Port Group 1/6/Admin-thr(%)': '0'
'Slot 0 Port Group 3/3/Oper-thr(%)': '0'
'Slot 0 Port Group 3/5/Oper-gua': '0'
'Slot 0 Port Group 4/7/Admin-gua': '0'
'Slot 0 Port Group 3/0/Oper-gua': '0'
'Slot 0 Port Group 1/6/Oper-gua': '0'
'Slot 0 Port Group 1/2/Oper-thr(%)': '0'
'Slot 0 Port Group 1/4/Oper-thr(%)': '0'
'Slot 0 Port Group 1/5/Oper-thr(%)': '0'
'Slot 0 Port Group 1/0/Oper-thr(%)': '0'
'Slot 0 Port Group 4/0/Admin-gua': '0'
'Slot 0 Port Group 4/0/Oper-thr(%)': '0'
'Slot 0 Port Group 4/5/Type': 'voq'
'Slot 0 Port Group 1/1/Admin-thr(%)': '60'
'Slot 0 Port Group 2/7/Oper-thr(%)': '0'
'Slot 0 Port Group 2/7/Admin-gua': '0'
'Slot 0 Port Group 3/0/Type': 'voq'
'Slot 0 Port Group 4/2/Admin-thr(%)': '0'
'Slot 0 Port Group 2/7/Admin-thr(%)': '0'
'Slot 0 Port Group 2/2/Admin-thr(%)': '0'
'Slot 0 Port Group 1/4/Type': 'voq'
'Slot 0 Port Group 4/5/Admin-thr(%)': '0'
'Slot 0 Port Group 1/0/Admin-thr(%)': '0'
'Slot 0 Port Group 3/3/Oper-gua': '0'
'Slot 0 Port Group 1/1/Type': 'voq'
'Slot 0 Port Group 2/3/Admin-thr(%)': '0'
'Slot 0 Port Group 4/3/Admin-gua': '0'
'Slot 0 Port Group 3/0/Admin-thr(%)': '0'
'Slot 0 Port Group 3/1/Admin-gua': '30'
'Slot 0 Port Group 3/1/Type': 'voq'
'Slot 0 Port Group 1/4/Admin-gua': '0'
'Slot 0 Port Group 1/0/Type': 'voq'
'Slot 0 Port Group 3/7/Admin-thr(%)': '0'
'Slot 0 Port Group 4/1/Admin-gua': '30'
'Slot 0 Port Group 4/6/Oper-gua': '0'
'Slot 0 Port Group 3/2/Type': 'voq'
'Slot 0 Port Group 1/7/Type': 'voq'
'Slot 0 Port Group 2/5/Admin-gua': '0'
'Slot 0 Port Group 2/1/Oper-gua': '0'
'Slot 0 Port Group 1/1/Admin-gua': '30'
'Slot 0 Port Group 3/2/Admin-gua': '0'
'Slot 0 Port Group 2/2/Admin-gua': '0'
'Slot 0 Port Group 4/2/Oper-gua': '0'
'Slot 0 Port Group 2/7/Oper-gua': '0'
'Slot 0 Port Group 4/4/Oper-gua': '0'
'Slot 0 Port Group 1/5/Admin-thr(%)': '0'
'Slot 0 Port Group 3/6/Oper-gua': '0'
'Slot 0 Port Group 2/6/Admin-gua': '0'
'Slot 0 Port Group 1/6/Oper-thr(%)': '0'
'Slot 0 Port Group 3/2/Oper-thr(%)': '0'
'Slot 0 Port Group 2/1/Admin-gua': '30'
'Slot 0 Port Group 1/3/Type': 'voq'
'Slot 0 Port Group 1/4/Admin-thr(%)': '0'
'Slot 0 Port Group 4/5/Oper-thr(%)': '0'
'Slot 0 Port Group 4/6/Oper-thr(%)': '0'
'Slot 0 Port Group 1/7/Admin-gua': '0'
'Slot 0 Port Group 3/2/Oper-gua': '0'
'Slot 0 Port Group 2/0/Admin-thr(%)': '0'
'Slot 0 Port Group 3/7/Oper-gua': '0'
'Slot 0 Port Group 3/3/Admin-gua': '0'
'Slot 0 Port Group 3/0/Oper-thr(%)': '0'
'Slot 0 Port Group 2/1/Oper-thr(%)': '60'
'Slot 0 Port Group 4/4/Admin-thr(%)': '0'
'Slot 0 Port Group 4/4/Oper-thr(%)': '0'
'Slot 0 Port Group 3/5/Admin-gua': '0'
'Slot 0 Port Group 3/2/Admin-thr(%)': '0'
'Slot 0 Port Group 3/5/Admin-thr(%)': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mmu buffer-config interface <dutport> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        flag = 0
        list1 = []
        new_info_list = []
        for value in show_info_list:
            if re.match("Slot \w+ Port Group \d+:",value):
                if len(new_info_list) != 0:
                    list1.append(new_info_list)
                new_info_list = []
                key_1 = value.strip(":")
                flag = 1
                continue
            if flag == 1:
                if value.strip() != "":
                    if "Queue" in value:
                        new_value_list = value.strip().split()
                        new_value = "   ".join(new_value_list)
                        new_info_list.append(new_value)
                    else:
                        new_value_list = value.strip().split()
                        new_value_list[1] = key_1+"/"+new_value_list[1]
                        new_value = "   ".join(new_value_list)
                        new_info_list.append(new_value)
        if len(new_info_list) != 0:
            list1.append(new_info_list)
        dict_value = {}
        for value in list1:
            show_info_new = "\n".join(value)
            dict_value_tmp =self.dut_show_autoget_blank_list(show_info_new,"Queue")
            dict_value = dict(dict_value.items()+dict_value_tmp.items())
        return dict_value
    def dut_get_show_registrationtable(self,show_info):
        """
        Function:show registration-table回显解析函数
        CLI命令:show registration-table
        回显信息示例:
Ruijie(config)#show registration-table 

Ports        Type       Outer-VID  Inner-VID-list    
------------ ---------- ---------- ------------------
Gi6/1        Add-outer  111        1-2，5，85
Gi6/1        Add-outer  10         111-112，118
Ruijie(config)#

        Returns:
{'Ports_list': ['Gi6/1'
'Gi6/1'], 'Gi6/1/Inner-VID-list': '111-112\xef\xbc\x8c118'
'Gi6/1/Type': 'Add-outer'
'Gi6/1/Ports': 'Gi6/1'
'Gi6/1/Outer-VID': '10'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show registration-table | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show registration-table'
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_include_lines_analysiz(show_info_list_line,0)
        return dict_value
    def dut_get_show_registrationtabl(self,show_info):
        """
        Function:show registration-table回显解析函数
        CLI命令:show registration-table
        回显信息示例:
Ruijie(config)#show registration-table 

Ports        Type       Outer-VID  Inner-VID-list    
------------ ---------- ---------- ------------------
Gi6/1        Add-outer  111        1-2，5，85
Gi6/1        Add-outer  10         111-112，118

        Returns:
{"Ports_list": ["Gi6/1"
"Gi6/1"], "Gi6/1/Inner-VID-list": "111-112\uff0c118"
"Gi6/1/Type": "Add-outer"
"Gi6/1/Ports": "Gi6/1"
"Gi6/1/Outer-VID": "10"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show registration-table | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_list = self.dut_get_start_show_info(show_info)
        new_list = []
        len_show_list = len(show_list)
        for i in range(len_show_list):
            if len(show_list[i].strip().split()) > 3:
                title_list_num = i
            else:
                show_list[title_list_num] =show_list[title_list_num].strip()+ "," + show_list[i].strip().split()[-1].strip()
        for value in show_list:
            if len(value.strip().split()) > 3 and "-----" not in value:
                new_list.append(value)
        new_show =  "\n".join(new_list)

        return self.dut_show_autoget_blank_list(new_show,"Ports",value_title_2="Outer-VID")
    def dut_get_show_dns_proxy_hide_qps(self,show_info):
        """
        Function:show dns proxy hide qps回显解析函数
        CLI命令:show dns proxy hide qps
        回显信息示例:
S7910E#show dns proxy hide qps
s: staitc reply  c: cahche reply        f: froward reply
t: timeout       d: cache full drop  sock: socket fail
============== 30 second qps， reverse order ==============
NO.      request            reply                             fail
1        0                  0[s:0，c:0，f:0]                    0[t:0， d:0， sock:0]
2        1                  0[s:0，c:0，f:0]                    1[t:1， d:0， sock:0]
3        0                  0[s:0，c:0，f:0]                    1[t:1， d:0， sock:0]
4        1                  0[s:0，c:0，f:0]                    1[t:1， d:0， sock:0]
5        1                  0[s:0，c:0，f:0]                    1[t:1， d:0， sock:0]
6        3                  2[s:0，c:0，f:2]                    0[t:0， d:0， sock:0]
7        1                  0[s:0，c:0，f:0]                    0[t:0， d:0， sock:0]
8        0                  0[s:0，c:0，f:0]                    0[t:0， d:0， sock:0]
9        0                  0[s:0，c:0，f:0]                    1[t:1， d:0， sock:0]
10       0                  0[s:0，c:0，f:0]                    0[t:0， d:0， sock:0]
11       1                  0[s:0，c:0，f:0]                    2[t:2， d:0， sock:0]
12       0                  0[s:0，c:0，f:0]                    1[t:1， d:0， sock:0]
13       2                  0[s:0，c:0，f:0]                    1[t:1， d:0， sock:0]
14       1                  0[s:0，c:0，f:0]                    0[t:0， d:0， sock:0]
15       1                  0[s:0，c:0，f:0]                    1[t:1， d:0， sock:0]
16       0                  0[s:0，c:0，f:0]                    0[t:0， d:0， sock:0]
17       1                  0[s:0，c:0，f:0]                    1[t:1， d:0， sock:0]
18       0                  0[s:0，c:0，f:0]                    1[t:1， d:0， sock:0]
19       1                  0[s:0，c:0，f:0]                    1[t:1， d:0， sock:0]
20       1                  0[s:0，c:0，f:0]                    0[t:0， d:0， sock:0]
21       1                  0[s:0，c:0，f:0]                    0[t:0， d:0， sock:0]
22       0                  0[s:0，c:0，f:0]                    1[t:1， d:0， sock:0]
23       0                  0[s:0，c:0，f:0]                    0[t:0， d:0， sock:0]
24       1                  0[s:0，c:0，f:0]                    0[t:0， d:0， sock:0]
25       0                  0[s:0，c:0，f:0]                    1[t:1， d:0， sock:0]
26       0                  0[s:0，c:0，f:0]                    1[t:1， d:0， sock:0]
27       1                  0[s:0，c:0，f:0]                    0[t:0， d:0， sock:0]
28       1                  0[s:0，c:0，f:0]                    1[t:1， d:0， sock:0]
29       0                  0[s:0，c:0，f:0]                    2[t:2， d:0， sock:0]
30       1                  0[s:0，c:0，f:0]                    1[t:1， d:0， sock:0]

        Returns:
{'20/request': '1'
'18/reply': '0'
'13/fail': '1'
'15/fail': '1'
'7/request': '1'
'16/request': '0'
'5/reply': '0'
'22/fail': '1'
'29/request': '0'
'23/reply': '0'
'9/fail': '1'
'1/reply': '0'
'19/reply': '0'
'20/fail': '0'
'1/request': '0'
'17/reply': '0'
'3/request': '0'
'10/fail': '0'
'6/fail': '0'
'28/fail': '1'
'10/request': '0'
'6/reply': '2'
'10/reply': '0'
'30/fail': '1'
'14/fail': '0'
'9/request': '0'
'30/request': '1'
'21/reply': '0'
'29/reply': '0'
'6/request': '3'
'12/request': '0'
'2/reply': '0'
'9/reply': '0'
'22/request': '0'
'15/request': '1'
'20/reply': '0'
'5/fail': '1'
'21/fail': '0'
'27/reply': '0'
'17/request': '1'
'8/fail': '0'
'28/reply': '0'
'1/fail': '0'
'3/reply': '0'
'27/fail': '0'
'30/reply': '0'
'11/reply': '0'
'23/fail': '0'
'4/fail': '1'
'3/fail': '1'
'28/request': '1'
'14/request': '1'
'NO._list': ['1'
'2'
'3'
'4'
'5'
'6'
'7'
'8'
'9'
'10'
'11'
'12'
'13'
'14'
'15'
'16'
'17'
'18'
'19'
'20'
'21'
'22'
'23'
'24'
'25'
'26'
'27'
'28'
'29'
'30'], '19/fail': '1'
'13/request': '2'
'11/request': '1'
'24/reply': '0'
'26/fail': '1'
'4/reply': '0'
'2/fail': '1'
'14/reply': '0'
'23/request': '0'
'21/request': '1'
'26/request': '0'
'24/request': '1'
'7/reply': '0'
'15/reply': '0'
'5/request': '1'
'4/request': '1'
'12/reply': '0'
'13/reply': '0'
'22/reply': '0'
'11/fail': '2'
'25/fail': '1'
'29/fail': '2'
'18/fail': '1'
'8/reply': '0'
'7/fail': '0'
'19/request': '1'
'12/fail': '1'
'25/reply': '0'
'8/request': '0'
'16/fail': '0'
'26/reply': '0'
'2/request': '1'
'18/request': '0'
'24/fail': '0'
'17/fail': '1'
'16/reply': '0'
'27/request': '1'
'25/request': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show dns proxy hide qps | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_list = self.dut_get_start_show_info(show_info)
        new_list = []
        flag = 0
        for value in show_list:
            if "request" in value:
                flag = 1
            if flag == 1 :
                new_list.append(value)
        new_show_info =  "\n".join(new_list)
        dict_value = self.dut_show_autoget_blank_list(new_show_info,"NO.")
        dict_value1={}
        for key,value in dict_value.items():
            if "[" in value:
                value = value.split("[")[0]
            dict_value1[key] = value
        return dict_value1
    def dut_get_show_interfaces_usage_up(self,show_info):
        """
        Function:show interfaces usage up回显解析函数
        CLI命令:show interfaces usage up
        回显信息示例:
DU2s7910(config-if-TenGigabitEthernet 2/13)#show interfaces usage up 
Interface                                Bandwidth   Average Usage    Input Usage      Output Usage     
---------------------------------------- ----------- ---------------- ---------------- ---------------- 
TenGigabitEthernet 2/13                  10000  Mbit 38.09%           76.19%           0.00%           
TenGigabitEthernet 2/15                  10000  Mbit 38.09%           0.00%            76.19%          
DU2s7910(config-if-TenGigabitEthernet 2/13)#

        Returns:
{'TenGigabitEthernet 2/15/Average Usage': '38.09'
'TenGigabitEthernet 2/13/Input Usage': '76.19'
'TenGigabitEthernet 2/13/Average Usage': '38.09'
'TenGigabitEthernet 2/15/Output Usage': '76.19'
'TenGigabitEthernet 2/13/Output Usage': '0.00'
'TenGigabitEthernet 2/15/Input Usage': '0.00'
'Interface_list': ['TenGigabitEthernet 2/13'
'TenGigabitEthernet 2/15'], 'TenGigabitEthernet 2/15/Bandwidth': '10000  Mbit'
'TenGigabitEthernet 2/13/Bandwidth': '10000  Mbit'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interfaces usage up | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value1 = {}
        dict_value = self.dut_show_autoget_whippletree_form_analysis(show_info,"Interface")
        for key,value in dict_value.items():
            if "%" in value:
                value = value.strip("%").strip()
            dict_value1[key] = value
        return dict_value1
    def dut_get_show_efm_event_link_local(self,show_info):
        """
        Function:show efm event link local回显解析函数
        CLI命令:show efm event link local
        回显信息示例:
r1#show efm event link local
GigabitEthernet 0/1:
----------------
  Errored-frame Event: 
    Event Time Stamp    : 0            Window              : 0
    Threshold           : 0            Errors              : 0
    Error Running Total : 0            Event Running Total : 0
  Errored-frame-period Event: 
    Event Time Stamp    : 0            Window              : 0
    Threshold           : 0            Errors              : 0
    Error Running Total : 0            Event Running Total : 0
  Errored-frame-seconds Event: 
    Event Time Stamp    : 0            Window              : 0
    Threshold           : 0            Errors              : 0
    Error Running Total : 0            Event Running Total : 0
  Errored-symbol Event: 
    Event Time Stamp    : 0            Window              : 0
    Threshold           : 0            Errors              : 0
    Error Running Total : 0            Event Running Total : 0
    
GigabitEthernet 0/2:
----------------
  Errored-frame Event: 
    Event Time Stamp    : 0            Window              : 0
    Threshold           : 0            Errors              : 0
    Error Running Total : 0            Event Running Total : 0
  Errored-frame-period Event: 
    Event Time Stamp    : 0            Window              : 0
    Threshold           : 0            Errors              : 0
    Error Running Total : 0            Event Running Total : 0
  Errored-frame-seconds Event: 
    Event Time Stamp    : 0            Window              : 0
    Threshold           : 0            Errors              : 0
    Error Running Total : 0            Event Running Total : 0
  Errored-symbol Event: 
    Event Time Stamp    : 0            Window              : 0
    Threshold           : 0            Errors              : 0
    Error Running Total : 0            Event Running Total : 0

        Returns:
{'GigabitEthernet 0/1/Errored-symbol Event/Threshold': '0'
'GigabitEthernet 0/2/Errored-frame-period Event/Error Running Total': '0'
'GigabitEthernet 0/1/Errored-symbol Event/Error Running Total': '0'
'GigabitEthernet 0/1/Errored-frame-seconds Event/Errors': '0'
'GigabitEthernet 0/2/Errored-frame Event/Errors': '0'
'GigabitEthernet 0/2/Errored-symbol Event/Window': '0'
'GigabitEthernet 0/1/Errored-frame Event/Threshold': '0'
'GigabitEthernet 0/2/Errored-frame Event/Event Running Total': '0'
'GigabitEthernet 0/1/Errored-frame-seconds Event/Event Time Stamp': '0'
'GigabitEthernet 0/1/Errored-symbol Event/Event Running Total': '0'
'GigabitEthernet 0/1/Errored-frame-period Event/Window': '0'
'GigabitEthernet 0/1/Errored-frame-period Event/Event Running Total': '0'
'GigabitEthernet 0/1/Errored-frame Event/Event Running Total': '0'
'GigabitEthernet 0/2/Errored-frame Event/Event Time Stamp': '0'
'GigabitEthernet 0/2/Errored-symbol Event/Errors': '0'
'GigabitEthernet 0/2/Errored-frame-seconds Event/Error Running Total': '0'
'GigabitEthernet 0/2/Errored-frame-period Event/Event Time Stamp': '0'
'GigabitEthernet 0/2/Errored-symbol Event/Error Running Total': '0'
'GigabitEthernet 0/1/Errored-frame-seconds Event/Threshold': '0'
'GigabitEthernet 0/2/Errored-frame Event/Error Running Total': '0'
'GigabitEthernet 0/2/Errored-frame Event/Window': '0'
'GigabitEthernet 0/1/Errored-frame-seconds Event/Error Running Total': '0'
'GigabitEthernet 0/2/Errored-frame-seconds Event/Event Time Stamp': '0'
'GigabitEthernet 0/2/Errored-frame-seconds Event/Errors': '0'
'GigabitEthernet 0/1/Errored-frame-period Event/Error Running Total': '0'
'GigabitEthernet 0/1/Errored-frame-period Event/Errors': '0'
'GigabitEthernet 0/2/Errored-frame-period Event/Event Running Total': '0'
'GigabitEthernet 0/2/Errored-frame-period Event/Window': '0'
'GigabitEthernet 0/1/Errored-frame Event/Errors': '0'
'GigabitEthernet 0/2/Errored-frame-period Event/Errors': '0'
'GigabitEthernet 0/1/Errored-frame Event/Event Time Stamp': '0'
'GigabitEthernet 0/2/Errored-frame-seconds Event/Window': '0'
'GigabitEthernet 0/2/Errored-frame Event/Threshold': '0'
'GigabitEthernet 0/1/Errored-frame-period Event/Event Time Stamp': '0'
'GigabitEthernet 0/1/Errored-frame Event/Window': '0'
'GigabitEthernet 0/2/Errored-frame-seconds Event/Event Running Total': '0'
'GigabitEthernet 0/1/Errored-symbol Event/Event Time Stamp': '0'
'GigabitEthernet 0/1/Errored-frame-seconds Event/Window': '0'
'GigabitEthernet 0/1/Errored-symbol Event/Errors': '0'
'GigabitEthernet 0/1/Errored-frame Event/Error Running Total': '0'
'GigabitEthernet 0/1/Errored-frame-period Event/Threshold': '0'
'GigabitEthernet 0/2/Errored-frame-period Event/Threshold': '0'
'GigabitEthernet 0/1/Errored-frame-seconds Event/Event Running Total': '0'
'GigabitEthernet 0/2/Errored-symbol Event/Event Running Total': '0'
'GigabitEthernet 0/1/Errored-symbol Event/Window': '0'
'GigabitEthernet 0/2/Errored-frame-seconds Event/Threshold': '0'
'GigabitEthernet 0/2/Errored-symbol Event/Threshold': '0'
'GigabitEthernet 0/2/Errored-symbol Event/Event Time Stamp': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show efm event link local | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list =self.dut_get_start_show_info(show_info)
        flag = 0
        dict_value = {}
        for value in show_info_list:
            if re.match("\A\w+.*:",value):
                key_1 = value.split(":")[0].strip()
                flag = 1
                continue
            if flag == 1 :
                if str(value).count(":") == 1:
                    key_2 = value.split(":")[0].strip()
                    continue
                elif str(value).count(":") == 2:
                    obj = re.match("(.*): (\d+)\s+(.*): (\d+)",value)
                    dict_value[key_1 + "/" + key_2 + "/" + obj.group(1).strip()] = obj.group(2).strip()
                    dict_value[key_1 + "/" + key_2 + "/" + obj.group(3).strip()] = obj.group(4).strip()
        return dict_value
    def dut_get_show_efm_event_link_local_dutport(self,show_info):
        """
        Function:show efm event link local <dutport>回显解析函数
        CLI命令:show efm event link local <dutport>
        回显信息示例:
r1#show efm event link local interface gi 0/1
GigabitEthernet 0/1:
----------------
  Errored-frame Event: 
    Event Time Stamp    : 0            Window              : 0
    Threshold           : 0            Errors              : 0
    Error Running Total : 0            Event Running Total : 0
  Errored-frame-period Event: 
    Event Time Stamp    : 0            Window              : 0
    Threshold           : 0            Errors              : 0
    Error Running Total : 0            Event Running Total : 0
  Errored-frame-seconds Event: 
    Event Time Stamp    : 0            Window              : 0
    Threshold           : 0            Errors              : 0
    Error Running Total : 0            Event Running Total : 0
  Errored-symbol Event: 
    Event Time Stamp    : 0            Window              : 0
    Threshold           : 0            Errors              : 0
    Error Running Total : 0            Event Running Total : 0

        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show efm event link local <dutport> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_efm_event_link_local(show_info)
    def dut_get_show_tftpc_time_stat(self,show_info):
        """
        Function:show tftpc time_stat回显解析函数
        CLI命令:show tftpc time_stat
        回显信息示例:
7810vsu#show tftpc time_stat
debug: OFF
performance static debug: ON
tftp source address no config
tftp option: enable
tftp option timeout :0
tftp option blksize 0
-------tftp transfer time statistics--------
 receive packet num:    481
 send packet num:       482
 resend packet num:     0
 write flash num:       60
 tftpc transfer total time:                  0(s).913957(us)
 tftpc transfer average rate(kb/s):          262
 tftpc data deal average time(us):           425
 tftpc packet send/receive average time(us): 1459
 tftpc average write flash time(us):         445

        Returns:
{'tftpc packet send/receive average time(us)': '1459'
'write flash num': '60'
'send packet num': '482'
'resend packet num': '0'
'tftp option': 'enable'
'tftpc transfer average rate(kb/s)': '262'
'receive packet num': '481'
'tftpc data deal average time(us)': '425'
'tftpc transfer total time': '0(s).913957(us)'
'performance static debug': 'ON'
'debug': 'OFF'
'tftpc average write flash time(us)': '445'
'tftp option timeout': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show tftpc time_stat | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_fabricinterface_connectivity_slot_num_port_num(self,show_info):
        """
        Function:show fabric-interface connectivity slot <num> port <num>回显解析函数
        CLI命令:show fabric-interface connectivity slot <num> port <num>
        回显信息示例:
Ruijie#show fabric-interface connectivity slot 4 port 512
Fabric-interface    Physical status    Remote-interface    Remote status
----------------    ---------------    ----------------    -------------
4/512               UP                 FE1/520             UP

        Returns:
{'4/512/Remote-interface': 'FE1/520'
'Fabric-interface_list': ['4/512'], '4/512/Physical status': 'UP'
'4/512/Remote status': 'UP'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show fabric-interface connectivity slot <num> port <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Fabric-interface")
    def dut_get_show_fabricinterface_isolate_info(self,show_info):
        """
        Function:show fabric-interface isolate info回显解析函数
        CLI命令:show fabric-interface isolate info
        回显信息示例:
Ruijie#show fabric-interface isolate info 
        FABRIC-INTERFACE IOSLATE COUNTER
---------------------------------------------------------
Fabric-interface    Reason            Isolate time
----------------    --------------    -------------------
4/512               CRC               2020-03-10 09:54:57

        Returns:
{'4/512/Reason': 'CRC'
'4/512/Isolate time': '2020-03-10 09:54:57'
'Fabric-interface_list': ['4/512']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show fabric-interface isolate info | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        new_list = []
        for value in show_info_list:
            if "--------" in value or "FABRIC-INTERFACE IOSLATE COUNTER" in value:
                pass
            else:
                new_list.append(value)
        new_show = "\n".join(new_list)
        dict_value = self.dut_show_autoget_blank_list(new_show,"Fabric-interface")
        return dict_value
    def dut_get_show_fabricinterface_monitor_plan(self,show_info):
        """
        Function:show fabric-interface monitor plan回显解析函数
        CLI命令:show fabric-interface monitor plan
        回显信息示例:
Ruijie# show fabric-interface monitor plan 
            FABRIC-INTERFACE MONITOR-PLAN RELATIVE CONFIGURATIONS
--------------------------------------------------------------------------------
Isolate-switch: OFF
--------------------------------------------------------------------------------
Polling-cnt: 3
Polling-period: 60
--------------------------------------------------------------------------------
Warning-limit: 30
CRC-warning switch: ON
Jitter-warning switch: ON
Abnormal_down-warning switch: ON

        Returns:
{'CRC-warning switch': 'ON'
'Polling-period': '60'
'Abnormal_down-warning switch': 'ON'
'Isolate-switch': 'OFF'
'Polling-cnt': '3'
'Jitter-warning switch': 'ON'
'Warning-limit': '30'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show fabric-interface monitor plan | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_info_analy_all_colon(show_info,"#")
    def dut_get_show_fabricinterface_status_slot_num_port_num(self,show_info):
        """
        Function:show fabric-interface status slot <num> port <num>回显解析函数
        CLI命令:show fabric-interface status slot <num> port <num>
        回显信息示例:
Ruijie#show fabric-interface status slot 4 port 512
Fabric-interface    Physical status    Isolate
----------------    ---------------    -------
4/512               UP                 FALSE

        Returns:
{'4/512/Physical status': 'UP'
'Fabric-interface_list': ['4/512'], '4/512/Isolate': 'FALSE'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show fabric-interface status slot <num> port <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info, "Fabric-interface")
    def dut_get_show_mpls_forwardingtable_frr(self,show_info):
        """
        Function:show mpls forwarding-table frr回显解析函数
        CLI命令:show mpls forwarding-table frr
        回显信息示例:
RGOS_12_1#show mpls forwarding-table frr

Label Operation Code:
PH--PUSH label
PP--POP label
SW--SWAP label
SP--SWAP topmost label and push new label
DP--DROP packet
PC--POP label and continue lookup by IP or Label
PI--POP label and do ip lookup forward
PN--POP label and forward to nexthop
PM--POP label and do MAC lookup forward
PV--POP label and output to VC attach interface
IP--IP lookup forward
 s--stale
Status codes: m - main entry， b - backup entry， * - active.
     Local   Outgoing OP FEC                         Outgoing         Nexthop        
     label   label                                   interface                     
m*   --      imp-null PH 2.2.2.2/32                  Gi0/1            12.1.1.2       
m*   --      imp-null PH 3.3.3.3/32                  Gi0/2            13.1.1.3       
m*   --      60928    PH 4.4.4.4/32(V)               Gi0/1            12.1.1.2       
b    --      60928    PH 4.4.4.4/32(V)               Gi0/2            13.1.1.3       
m*   --      60928    PH 24.1.1.0/24(V)              Gi0/1            12.1.1.2       
b    --      60928    PH 24.1.1.0/24(V)              Gi0/2            13.1.1.3       
m*   --      60928    PH 34.1.1.0/24(V)              Gi0/2            13.1.1.3       
m*   --      60928    PH 70.1.1.0/24(V)              Gi0/1            12.1.1.2       
b    --      60928    PH 70.1.1.0/24(V)              Gi0/2            13.1.1.3       
m*   11264   imp-null PP 2.2.2.2/32                  Gi0/1            12.1.1.2       
m*   11265   imp-null PP 3.3.3.3/32                  Gi0/2            13.1.1.3       
m*   60928   --       PI VRF(vpna)                   --               0.0.0.0

        Returns:
{'70.1.1.0/24(V)/b/Outgoing': '60928'
'3.3.3.3/32/m*/Local label': '11265'
'4.4.4.4/32(V)/m*/Nexthop': '12.1.1.2'
'70.1.1.0/24(V)/b/Nexthop': '13.1.1.3'
'3.3.3.3/32/m*/OP': 'PP'
'24.1.1.0/24(V)/b/Outgoing': '60928'
'24.1.1.0/24(V)/m*/OP': 'PH'
'24.1.1.0/24(V)/b/Outgoing interface': 'Gi0/2'
'70.1.1.0/24(V)/b/OP': 'PH'
'4.4.4.4/32(V)/m*/Outgoing': '60928'
'2.2.2.2/32/m*/Nexthop': '12.1.1.2'
'24.1.1.0/24(V)/m*/Outgoing interface': 'Gi0/1'
'34.1.1.0/24(V)/m*/Outgoing': '60928'
'70.1.1.0/24(V)/b/Outgoing interface': 'Gi0/2'
'34.1.1.0/24(V)/m*/Outgoing interface': 'Gi0/2'
'70.1.1.0/24(V)/b/Local label': '--'
'4.4.4.4/32(V)/b/Local label': '--'
'24.1.1.0/24(V)/m*/Local label': '--'
'24.1.1.0/24(V)/b/Nexthop': '13.1.1.3'
'2.2.2.2/32/m*/Outgoing interface': 'Gi0/1'
'4.4.4.4/32(V)/m*/OP': 'PH'
'VRF(vpna)/m*/Outgoing': '--'
'70.1.1.0/24(V)/m*/OP': 'PH'
'4.4.4.4/32(V)/m*/Local label': '--'
'24.1.1.0/24(V)/b/OP': 'PH'
'4.4.4.4/32(V)/b/Outgoing interface': 'Gi0/2'
'4.4.4.4/32(V)/b/Outgoing': '60928'
'70.1.1.0/24(V)/m*/Local label': '--'
'24.1.1.0/24(V)/m*/Nexthop': '12.1.1.2'
'3.3.3.3/32/m*/Outgoing interface': 'Gi0/2'
'24.1.1.0/24(V)/m*/Outgoing': '60928'
'VRF(vpna)/m*/Outgoing interface': '--'
'34.1.1.0/24(V)/m*/Local label': '--'
'VRF(vpna)/m*/Nexthop': '0.0.0.0'
'3.3.3.3/32/m*/Outgoing': 'imp-null'
'2.2.2.2/32/m*/Local label': '11264'
'4.4.4.4/32(V)/b/Nexthop': '13.1.1.3'
'2.2.2.2/32/m*/Outgoing': 'imp-null'
'3.3.3.3/32/m*/Nexthop': '13.1.1.3'
'4.4.4.4/32(V)/b/OP': 'PH'
'34.1.1.0/24(V)/m*/OP': 'PH'
'4.4.4.4/32(V)/m*/Outgoing interface': 'Gi0/1'
'VRF(vpna)/m*/OP': 'PI'
'24.1.1.0/24(V)/b/Local label': '--'
'34.1.1.0/24(V)/m*/Nexthop': '13.1.1.3'
'70.1.1.0/24(V)/m*/Outgoing interface': 'Gi0/1'
'70.1.1.0/24(V)/m*/Outgoing': '60928'
'70.1.1.0/24(V)/m*/Nexthop': '12.1.1.2'
'VRF(vpna)/m*/Local label': '60928'
'FEC_list': ['2.2.2.2/32/m*'
'3.3.3.3/32/m*'
'4.4.4.4/32(V)/m*'
'4.4.4.4/32(V)/b'
'24.1.1.0/24(V)/m*'
'24.1.1.0/24(V)/b'
'34.1.1.0/24(V)/m*'
'70.1.1.0/24(V)/m*'
'70.1.1.0/24(V)/b'
'2.2.2.2/32/m*'
'3.3.3.3/32/m*'
'VRF(vpna)/m*'], '2.2.2.2/32/m*/OP': 'PP'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mpls forwarding-table frr | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        new_show_list = []
        title = "Status codes   Local label    Outgoing   OP   FEC   Outgoing interface   Nexthop"
        new_show_list.append(title)
        flag = 0
        for value in show_info_list:
            if re.search(r"\d+\.\d+\.\d+\.\d+",value):
                flag = 1
            if flag == 1 :
                value = value.replace(" ","  ")
                new_show_list.append(value)
        new_show = "\n".join(new_show_list)
        dict_value = self.dut_show_autoget_blank_list(new_show,"FEC",value_title_2="Status codes")
        return dict_value
    def dut_get_show_mpls_forwardingtable_fr(self,show_info):
        """
        Function:show mpls forwarding-table fr回显解析函数
        CLI命令:show mpls forwarding-table fr
        回显信息示例:
Ruijie#show mpls forwarding-table fr
Label Operation Code:
PH--PUSH label
PP--POP label
SW--SWAP label
SP--SWAP topmost label and push new label
DP--DROP packet
PC--POP label and continue lookup by IP or Label
PI--POP label and do ip lookup forward
PN--POP label and forward to nexthop
PM--POP label and do MAC lookup forward
PV--POP label and output to VC attach interface
IP--IP lookup forward
 s--stale
Status codes: m - main entry， b - backup entry， * - active.
     Local   Outgoing OP FEC                         Outgoing         Nexthop        
     label   label                                   interface                     
m*   --      imp-null PH 12::12/128                  Gi0/1            fe80::250:56ff:fe91:5775
b    --      11265    PH 12::12/128                  Gi0/2            2002::2        
m*   --      11265    PH 13::13/128                  Gi0/1            fe80::250:56ff:fe91:5775
b    --      imp-null PH 13::13/128                  Gi0/2            2002::2  
m*   --      11266    PH 14::14/128                  Gi0/1            fe80::250:56ff:fe91:5775
b    --      11266    PH 14::14/128                  Gi0/2            2002::2        
m*   --      imp-null PH 3001::/96                   Gi0/1            fe80::250:56ff:fe91:5775
b    --      11269    PH 3001::/96                   Gi0/2            2002::2        
m*   --      11269    PH 3002::/96                   Gi0/1            fe80::250:56ff:fe91:5775
b    --      imp-null PH 3002::/96                   Gi0/2            2002::2        
m*   11264   11266    SW 14::14/128                  Gi0/1            fe80::250:56ff:fe91:5775
b    11264   11266    SW 14::14/128                  Gi0/2            2002::2        
m*   11265   imp-null PP 3001::/96                   Gi0/1            fe80::250:56ff:fe91:5775
b    11265   11269    SW 3001::/96                   Gi0/2            2002::2        
m*   11266   11269    SW 3002::/96                   Gi0/1            fe80::250:56ff:fe91:5775
b    11266   imp-null PP 3002::/96                   Gi0/2            2002::2        
m*   11267   imp-null PP 12::12/128                  Gi0/1            fe80::250:56ff:fe91:5775
b    11267   11265    SW 12::12/128                  Gi0/2            2002::2        
m*   11268   11265    SW 13::13/128                  Gi0/1            fe80::250:56ff:fe91:5775
b    11268   imp-null PP 13::13/128                  Gi0/2            2002::2

        Returns:
{'3001::/96/Gi0/2/Code': 'b'
'13::13/128/Gi0/2/Code': 'b'
'14::14/128/Gi0/2/Local': '11264'
'3002::/96/Gi0/1/Outgoing': '11269'
'3001::/96/Gi0/1/Outgoing': 'imp-null'
'13::13/128/Gi0/1/Outgoing': '11265'
'3002::/96/Gi0/2/Local': '11266'
'12::12/128/Gi0/1/Outgoing': 'imp-null'
'12::12/128/Gi0/2/Nexthop': '2002::2'
'14::14/128/Gi0/1/Outgoing': '11266'
'14::14/128/Gi0/1/Nexthop': 'fe80::250:56ff:fe91:5775'
'3002::/96/Gi0/2/OP': 'PP'
'3001::/96/Gi0/2/OP': 'SW'
'13::13/128/Gi0/2/OP': 'PP'
'12::12/128/Gi0/1/Nexthop': 'fe80::250:56ff:fe91:5775'
'3002::/96/Gi0/1/Code': 'm*'
'3002::/96/Gi0/1/Nexthop': 'fe80::250:56ff:fe91:5775'
'12::12/128/Gi0/2/Code': 'b'
'12::12/128/Gi0/1/OP': 'PP'
'13::13/128/Gi0/1/Local': '11268'
'13::13/128/Gi0/2/Local': '11268'
'13::13/128/Gi0/2/Outgoing': 'imp-null'
'3001::/96/Gi0/2/Outgoing': '11269'
'3002::/96/Gi0/2/Outgoing': 'imp-null'
'14::14/128/Gi0/1/Local': '11264'
'14::14/128/Gi0/1/OP': 'SW'
'3001::/96/Gi0/1/Local': '11265'
'3002::/96/Gi0/1/OP': 'SW'
'3001::/96/Gi0/2/Local': '11265'
'3002::/96/Gi0/1/Local': '11266'
'14::14/128/Gi0/2/Outgoing': '11266'
'13::13/128/Gi0/1/OP': 'SW'
'12::12/128/Gi0/1/Local': '11267'
'12::12/128/Gi0/2/Local': '11267'
'3001::/96/Gi0/1/OP': 'PP'
'12::12/128/Gi0/2/Outgoing': '11265'
'14::14/128/Gi0/2/Nexthop': '2002::2'
'13::13/128/Gi0/1/Code': 'm*'
'3001::/96/Gi0/1/Code': 'm*'
'14::14/128/Gi0/1/Code': 'm*'
'14::14/128/Gi0/2/OP': 'SW'
'14::14/128/Gi0/2/Code': 'b'
'FEC_list': ['12::12/128/Gi0/1'
'12::12/128/Gi0/2'
'13::13/128/Gi0/1'
'13::13/128/Gi0/2'
'14::14/128/Gi0/1'
'14::14/128/Gi0/2'
'3001::/96/Gi0/1'
'3001::/96/Gi0/2'
'3002::/96/Gi0/1'
'3002::/96/Gi0/2'
'14::14/128/Gi0/1'
'14::14/128/Gi0/2'
'3001::/96/Gi0/1'
'3001::/96/Gi0/2'
'3002::/96/Gi0/1'
'3002::/96/Gi0/2'
'12::12/128/Gi0/1'
'12::12/128/Gi0/2'
'13::13/128/Gi0/1'
'13::13/128/Gi0/2'], '3001::/96/Gi0/1/Nexthop': 'fe80::250:56ff:fe91:5775'
'3002::/96/Gi0/2/Code': 'b'
'13::13/128/Gi0/2/Nexthop': '2002::2'
'12::12/128/Gi0/1/Code': 'm*'
'3001::/96/Gi0/2/Nexthop': '2002::2'
'3002::/96/Gi0/2/Nexthop': '2002::2'
'12::12/128/Gi0/2/OP': 'SW'
'13::13/128/Gi0/1/Nexthop': 'fe80::250:56ff:fe91:5775'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mpls forwarding-table fr | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = show_info.split("\n")
        show_info_list1 = []
        show_info_list1.append("Code Local   Outgoing OP FEC                         Outgoing_int     Nexthop")
        flag = 0
        for value in show_info_list:
            if "Outgoing" in value:
                flag = flag + 1
                continue
            if flag > 1 :
                show_info_list1.append(value)
            if flag > 0:
                flag = flag + 1
        show_info = "\n".join(show_info_list1)
        star,end,show_len_list,show_info_list_line =  self.dut_common_get_linelist(show_info,"FEC")
        return self.dut_show_autoget_form(star,end,"FEC",show_len_list,show_info_list_line,"Outgoing_int")
    def dut_get_show_mpls_srgb(self,show_info):
        """
        Function:show mpls srgb回显解析函数
        CLI命令:show mpls srgb
        回显信息示例:
RGOS_12_4#show mpls srgb 
Label space:0
  Global srgb min label:16000
  Global srgb max label:51199
  Global srgb range:35200
RGOS_12_4#

        Returns:
{'Global srgb max label': '51199'
'Global srgb min label': '16000'
'Global srgb range': '35200'
'Label space': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mpls srgb | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        if " Instance" not in show_info:
            return self.dut_get_show_info_analy_all_colon(show_info,"show")
        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Instance",ago_colon_last_str=1)
    def dut_get_show_ip_ospf_segmentrouting_srgb(self,show_info):
        """
        Function:show ip ospf segment-routing srgb回显解析函数
        CLI命令:show ip ospf segment-routing srgb
        回显信息示例:
RGOS_12_3#show ip ospf segment-routing srgb 
OSPF process 100:
  Segment Routing MPLS: disable
  SRGB retry timer: inactive
  SRGB state: init
  SRGB base: unknown
  SRGB range: unknown

OSPF process 200:
  Segment Routing MPLS: enable
  SRGB retry timer: inactive
  SRGB state: valid
  SRGB base: 16000
  SRGB range: 35200

RGOS_12_3#

        Returns:
{'200/SRGB retry timer': 'inactive'
'200/SRGB range': '35200'
'100/SRGB retry timer': 'inactive'
'100/Segment Routing MPLS': 'disable'
'100/SRGB base': 'unknown'
'100/SRGB range': 'unknown'
'200/Segment Routing MPLS': 'enable'
'200/SRGB state': 'valid'
'200/SRGB base': '16000'
'100/SRGB state': 'init'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip ospf segment-routing srgb | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        for value in show_info_list:
            if re.match("OSPF process \d+:",value):
                obj = re.match("OSPF process (\d+):",value)
                key_1 = obj.group(1)
            elif ":" in value:
                list_1 = value.split(":")
                dict_value[key_1+"/"+list_1[0].strip()]= list_1[1].strip()
        return dict_value
    def dut_get_show_mpls_srlb(self,show_info):
        """
        Function:show mpls srlb回显解析函数
        CLI命令:show mpls srlb
        回显信息示例:
RGOS_12_4#show mpls srlb 
Label space:0
  Global srlb min label:12000
  Global srlb max label:15999
  Global srlb range:4000
  Type         Min-label            Max-label            Label-range          Protocol Instance
  ------------ -------------------- -------------------- -------------------- -------- --------
  Global SRLB  12000                15999                4000                 OSPF     100     
  Global SRLB  12000                15999                4000                 OSPF     200     
  Global SRLB  12000                15999                4000                 OSPF     300     
RGOS_12_4#

        Returns:
{'Global srlb range': '4000'
'Global srlb min label': '12000'
'100/Max-label': '15999'
'100/Type': 'Global SRLB'
'300/Type': 'Global SRLB'
'200/Min-label': '12000'
'200/Protocol': 'OSPF'
'300/Label-range': '4000'
'200/Label-range': '4000'
'200/Max-label': '15999'
'Instance_list': ['100'
'200'
'300'], '300/Protocol': 'OSPF'
'100/Protocol': 'OSPF'
'Label space': '0'
'300/Min-label': '12000'
'100/Label-range': '4000'
'100/Min-label': '12000'
'300/Max-label': '15999'
'200/Type': 'Global SRLB'
'Global srlb max label': '15999'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mpls srlb | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info, "Instance", ago_colon_last_str=1)
    def dut_get_show_ip_ospf_segmentrouting_srlb(self,show_info):
        """
        Function:show ip ospf segment-routing srlb回显解析函数
        CLI命令:show ip ospf segment-routing srlb
        回显信息示例:
RGOS_12_3#show ip ospf segment-routing srlb 
OSPF process 100:
  Segment Routing MPLS: disable
  SRLB retry timer: inactive
  SRLB state: init
  SRLB base: unknown
  SRLB range: unknown

OSPF process 200:
  Segment Routing MPLS: enable
  SRLB retry timer: inactive
  SRLB state: valid
  SRLB base: 12000
  SRLB range: 4000

RGOS_12_3#

        Returns:
{'100/SRLB state': 'init'
'200/SRLB base': '12000'
'100/Segment Routing MPLS': 'disable'
'100/SRLB retry timer': 'inactive'
'200/SRLB retry timer': 'inactive'
'200/SRLB range': '4000'
'100/SRLB base': 'unknown'
'200/Segment Routing MPLS': 'enable'
'100/SRLB range': 'unknown'
'200/SRLB state': 'valid'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip ospf segment-routing srlb | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        for value in show_info_list:
            if re.match("OSPF process \d+:",value):
                obj = re.match("OSPF process (\d+):",value)
                key_1 = obj.group(1)
            elif ":" in value:
                list_1 = value.split(":")
                dict_value[key_1+"/"+list_1[0].strip()]= list_1[1].strip()
        return dict_value
    def dut_get_show_ip_ospf_segmentrouting_prefixsid(self,show_info):
        """
        Function:show ip ospf segment-routing prefix-sid回显解析函数
        CLI命令:show ip ospf segment-routing prefix-sid
        回显信息示例:
RGOS_12_3#show ip ospf segment-routing prefix-sid 

OSPF process 100:
prefix-sid     flags    lock        address             interface
16010          0x00     2           1.1.1.1/32          Loopback 0
RGOS_12_3#

        Returns:
{'100/1.1.1.1/32/interface': 'Loopback 0'
'100/1.1.1.1/32/prefix-sid': '16010'
'100/1.1.1.1/32/lock': '2'
'100/1.1.1.1/32/flags': '0x00'
'100/address_list': ['1.1.1.1/32']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip ospf segment-routing prefix-sid | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        new_list = []
        dict_value = {}
        for value in show_info_list:
            if re.match("OSPF process \d+:", value):
                if len(new_list) > 0 :
                    new_info = "\n".join(new_list)
                    for value1 in new_list:
                        if re.match("OSPF process \d+:", value1):
                            obj = re.match("OSPF process (\d+):", value1)
                            id = obj.group(1)
                    #dict_value_1 = self.dut_show_autoget_blank_list(new_info, "address")
                    star,end,show_len_list,show_info_list_line = self.dut_common_get_linelist(new_info,"address")
                    dict_value_1 = self.dut_show_autoget_form(star,end,"address",show_len_list,show_info_list_line)
                    for k, v in dict_value_1.items():
                        dict_value[id + "/" + k] = v
                new_list = []
                new_list.append(value)
            else:
                new_list.append(value)
        if len(new_list) > 0:
            new_info = "\n".join(new_list)
            for value1 in new_list:
                if re.match("OSPF process \d+:", value1):
                    obj = re.match("OSPF process (\d+):", value1)
                    id = obj.group(1)
            #dict_value_1 = self.dut_show_autoget_blank_list(new_info, "address")
            star, end, show_len_list, show_info_list_line = self.dut_common_get_linelist(new_info, "address")
            dict_value_1 = self.dut_show_autoget_form(star, end, "address", show_len_list, show_info_list_line)
            for k, v in dict_value_1.items():
                dict_value[id + "/" + k] = v
        return dict_value
    def dut_get_show_ip_ospf_segmentrouting_ilm(self, show_info):
        """
        Function:show ip ospf segment-routing ilm回显解析函数
        CLI命令:show ip ospf segment-routing ilm
        回显信息示例:
RGOS_12_3#show ip ospf segment-routing ilm
Codes: C - Connected， D - Discard， O - OSPF， IA - OSPF inter area
       N1 - OSPF NSSA external type 1， N2 - OSPF NSSA external type 2
       E1 - OSPF external type 1， E2 - OSPF external type 2， A - Adjacency
       PH - PUSH label， PP - POP label， SW - SWAP label
       PC - POP label and continue lookup by IP or Label
       PI - POP label and lookup by IP

OSPF process 100:
  C   1.1.1.1/32， vrf_id: 0， safi: 4， iif_ix: 0， in_label: 16010， nh_num 1.
    16010       --          PC      0.0.0.0          Loopback 0(16385)
RGOS_12_3#

        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip ospf segment-routing ilm | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        for value in show_info_list:
            if re.match("OSPF process \d+:", value):
                obj = re.match("OSPF process (\d+):", value)
                id = obj.group(1)
            elif re.match(
                    "(\S+)\s+(\d+\.\d+\.\d+\.\d+/\d+), vrf_id: (\d+), safi: (\d+), iif_ix: (\d+), in_label: (\d+), nh_num (\d+)\.",
                    value.strip()):
                obj_1 = re.match(
                    "(\S+)\s+(\d+\.\d+\.\d+\.\d+/\d+), vrf_id: (\d+), safi: (\d+), iif_ix: (\d+), in_label: (\d+), nh_num (\d+)\.",
                    value.strip())
                ip = obj_1.group(2).strip()
                dict_value[id + "/" + ip + "/status"] = obj_1.group(1).strip()
                dict_value[id + "/" + ip + "/vrf_id"] = obj_1.group(3).strip()
                dict_value[id + "/" + ip + "/safi"] = obj_1.group(4).strip()
                dict_value[id + "/" + ip + "/iif_ix"] = obj_1.group(5).strip()
                dict_value[id + "/" + ip + "/in_label"] = obj_1.group(6).strip()
                dict_value[id + "/" + ip + "/nh_num"] = obj_1.group(7).strip()
            elif re.match("(\d+)\s+(\S+)\s+(\S+)\s+(\d+\.\d+\.\d+\.\d+)\s+(\S+\s\S+)\((\d+)\)", value.strip()):
                obj_2 = re.match("(\d+)\s+(\S+)\s+(\S+)\s+(\d+\.\d+\.\d+\.\d+)\s+(\S+\s\S+)\((\d+)\)",
                                 value.strip())
                dict_value[id + "/" + ip + "/in"] = obj_2.group(1).strip()
                dict_value[id + "/" + ip + "/out"] = obj_2.group(2).strip()
                dict_value[id + "/" + ip + "/code"] = obj_2.group(3).strip()
                dict_value[id + "/" + ip + "/nexthop"] = obj_2.group(4).strip()
                dict_value[id + "/" + ip + "/interface"] = obj_2.group(5).strip()
                dict_value[id + "/" + ip + "/interface_index"] = obj_2.group(6).strip()
            elif re.match("(\S+)\s+(\S+)\s+(\d+\.\d+\.\d+\.\d+)\s+(\S+\s\S+)\((\d+)\)", value.strip()):
                obj_2 = re.match("(\S+)\s+(\S+)\s+(\d+\.\d+\.\d+\.\d+)\s+(\S+\s\S+)\((\d+)\)", value.strip())
                dict_value[id + "/" + ip + "/out"] = obj_2.group(1).strip()
                dict_value[id + "/" + ip + "/code"] = obj_2.group(2).strip()
                dict_value[id + "/" + ip + "/nexthop"] = obj_2.group(3).strip()
                dict_value[id + "/" + ip + "/interface"] = obj_2.group(4).strip()
                dict_value[id + "/" + ip + "/interface_index"] = obj_2.group(5).strip()
        return dict_value
    def dut_get_show_ip_ospf_segmentrouting_il(self, show_info):
        """
        Function:show ip ospf segment-routing ilm回显解析函数
        CLI命令:show ip ospf segment-routing ilm
        回显信息示例:
RGOS_12_3#show ip ospf segment-routing ilm
Codes: C - Connected， D - Discard， O - OSPF， IA - OSPF inter area
       N1 - OSPF NSSA external type 1， N2 - OSPF NSSA external type 2
       E1 - OSPF external type 1， E2 - OSPF external type 2， A - Adjacency
       PH - PUSH label， PP - POP label， SW - SWAP label
       PC - POP label and continue lookup by IP or Label
       PI - POP label and lookup by IP

OSPF process 100:
  C   1.1.1.1/32， vrf_id: 0， safi: 4， iif_ix: 0， in_label: 16010， nh_num 1.
    16010       --          PC      0.0.0.0          Loopback 0(16385)

        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip ospf segment-routing ilm | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        tmp_in = ""
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        dict_value_1 = {}
        for value in show_info_list:
            if re.match("OSPF process \d+:", value):
                obj = re.match("OSPF process (\d+):", value)
                id = obj.group(1)
            elif re.match(
                    "(\S+)\s+(\d+\.\d+\.\d+\.\d+/\d+), vrf_id: (\d+), safi: (\d+), iif_ix: (\d+), in_label: (\d+), nh_num (\d+)\.",
                    value.strip()):
                obj_1 = re.match(
                    "(\S+)\s+(\d+\.\d+\.\d+\.\d+/\d+), vrf_id: (\d+), safi: (\d+), iif_ix: (\d+), in_label: (\d+), nh_num (\d+)\.",
                    value.strip())
                ip = obj_1.group(2).strip()
                dict_value_1["/status"] = obj_1.group(1).strip()
                dict_value_1["/ip"] = obj_1.group(2).strip()
                dict_value_1["/vrf_id"] = obj_1.group(3).strip()
                dict_value_1["/safi"] = obj_1.group(4).strip()
                dict_value_1["/iif_ix"] = obj_1.group(5).strip()
                dict_value_1["/in_label"] = obj_1.group(6).strip()
                dict_value_1["/nh_num"] = obj_1.group(7).strip()
            elif re.match("(\d+)\s+(\S+)\s+(\S+)\s+(\d+\.\d+\.\d+\.\d+)\s+(\S+\s\S+)\((\d+)\)", value.strip()):
                obj_2 = re.match("(\d+)\s+(\S+)\s+(\S+)\s+(\d+\.\d+\.\d+\.\d+)\s+(\S+\s\S+)\((\d+)\)",
                                 value.strip())
                ip_next = obj_2.group(4).strip()
                dict_value[id + "/" + ip_next + "/in"] = obj_2.group(1).strip()
                tmp_in = obj_2.group(1).strip()
                dict_value[id + "/" + ip_next + "/out"] = obj_2.group(2).strip()
                dict_value[id + "/" + ip_next + "/code"] = obj_2.group(3).strip()
                # dict_value[id + "/" + ip + "/nexthop"] = obj_2.group(4).strip()
                dict_value[id + "/" + ip_next + "/interface"] = obj_2.group(5).strip()
                dict_value[id + "/" + ip_next + "/interface_index"] = obj_2.group(6).strip()
                if dict_value_1:
                    for k, v in dict_value_1.items():
                        dict_value[id + "/" + ip_next + k] = v
            elif re.match("(\S+)\s+(\S+)\s+(\d+\.\d+\.\d+\.\d+)\s+(\S+\s\S+)\((\d+)\)", value.strip()):
                obj_2 = re.match("(\S+)\s+(\S+)\s+(\d+\.\d+\.\d+\.\d+)\s+(\S+\s\S+)\((\d+)\)", value.strip())
                ip_next = obj_2.group(3).strip()
                dict_value[id + "/" + ip_next + "/in"] = tmp_in
                dict_value[id + "/" + ip_next + "/out"] = obj_2.group(1).strip()
                dict_value[id + "/" + ip_next + "/code"] = obj_2.group(2).strip()
                # dict_value[id + "/" + ip + "/nexthop"] = obj_2.group(4).strip()
                dict_value[id + "/" + ip_next + "/interface"] = obj_2.group(4).strip()
                dict_value[id + "/" + ip_next + "/interface_index"] = obj_2.group(5).strip()
                if dict_value_1:
                    for k, v in dict_value_1.items():
                        dict_value[id + "/" + ip_next + k] = v
        return dict_value
    def dut_get_show_ip_ospf_segmentrouting_i(self, show_info):
        tmp_in = ""
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        dict_value_1 = {}
        for value in show_info_list:
            if re.match("OSPF process \d+:", value):
                obj = re.match("OSPF process (\d+):", value)
                id = obj.group(1)
            elif re.match(
                    "(\S+)\s+(\d+\.\d+\.\d+\.\d+/\d+), vrf_id: (\d+), safi: (\d+), iif_ix: (\d+), in_label: (\d+), nh_num (\d+)\.",
                    value.strip()):
                obj_1 = re.match(
                    "(\S+)\s+(\d+\.\d+\.\d+\.\d+/\d+), vrf_id: (\d+), safi: (\d+), iif_ix: (\d+), in_label: (\d+), nh_num (\d+)\.",
                    value.strip())
                ip = obj_1.group(2).strip()
                dict_value_1["/status"] = obj_1.group(1).strip()
                dict_value_1["/ip"] = obj_1.group(2).strip()
                dict_value_1["/vrf_id"] = obj_1.group(3).strip()
                dict_value_1["/safi"] = obj_1.group(4).strip()
                dict_value_1["/iif_ix"] = obj_1.group(5).strip()
                dict_value_1["/in_label"] = obj_1.group(6).strip()
                dict_value_1["/nh_num"] = obj_1.group(7).strip()
            elif re.match("(\d+)\s+(\S+)\s+(\S+)\s+(\d+\.\d+\.\d+\.\d+)\s+(\S+\s\S+)\((\d+)\)", value.strip()):
                obj_2 = re.match("(\d+)\s+(\S+)\s+(\S+)\s+(\d+\.\d+\.\d+\.\d+)\s+(\S+\s\S+)\((\d+)\)",
                                 value.strip())
                ip_next = obj_2.group(4).strip()
                dict_value[id + "/" + ip + "/" + ip_next + "/in"] = obj_2.group(1).strip()
                tmp_in = obj_2.group(1).strip()
                dict_value[id + "/" + ip + "/" + ip_next + "/out"] = obj_2.group(2).strip()
                dict_value[id + "/" + ip + "/" + ip_next + "/code"] = obj_2.group(3).strip()
                # dict_value[id + "/" + ip + "/nexthop"] = obj_2.group(4).strip()
                dict_value[id + "/" + ip + "/" + ip_next + "/interface"] = obj_2.group(5).strip()
                dict_value[id + "/" + ip + "/" + ip_next + "/interface_index"] = obj_2.group(6).strip()
                if dict_value_1:
                    for k, v in dict_value_1.items():
                        dict_value[id + "/" + ip + "/" + ip_next + k] = v
            elif re.match("(\S+)\s+(\S+)\s+(\d+\.\d+\.\d+\.\d+)\s+(\S+\s\S+)\((\d+)\)", value.strip()):
                obj_2 = re.match("(\S+)\s+(\S+)\s+(\d+\.\d+\.\d+\.\d+)\s+(\S+\s\S+)\((\d+)\)", value.strip())
                ip_next = obj_2.group(3).strip()
                dict_value[id + "/" + ip + "/" + ip_next + "/in"] = tmp_in
                dict_value[id + "/" + ip + "/" + ip_next + "/out"] = obj_2.group(1).strip()
                dict_value[id + "/" + ip + "/" + ip_next + "/code"] = obj_2.group(2).strip()
                # dict_value[id + "/" + ip + "/nexthop"] = obj_2.group(4).strip()
                dict_value[id + "/" + ip + "/" + ip_next + "/interface"] = obj_2.group(4).strip()
                dict_value[id + "/" + ip + "/" + ip_next + "/interface_index"] = obj_2.group(5).strip()
                if dict_value_1:
                    for k, v in dict_value_1.items():
                        dict_value[id + "/" + ip + "/" + ip_next + k] = v
            elif re.match("Backup Label Stack \(Top -> Bottom\): { (.*) }", value.strip()):
                obj = re.match("Backup Label Stack \(Top -> Bottom\): { (.*) }", value.strip())
                dict_value[id + "/" + ip + "/Backup Label Stack"] = obj.group(1).strip()
        return dict_value
    def dut_get_show_ip_ospf_segmentrouting_adjacencysid(self,show_info):
        """
        Function:show ip ospf segment-routing adjacency-sid回显解析函数
        CLI命令:show ip ospf segment-routing adjacency-sid
        回显信息示例:
RGOS_12_1#show ip ospf segment-routing adjacency-sid 

OSPF process 100:
adjacency-sid  flags    lock        nbr-id              interface
12000          0x00     1           11.1.1.2            GigabitEthernet 0/1
RGOS_12_1#

        Returns:
{'GigabitEthernet 0/1/nbr-id': '11.1.1.2'
'interface_list': ['GigabitEthernet 0/1'], 'GigabitEthernet 0/1/adjacency-sid': '12000'
'GigabitEthernet 0/1/lock': '1'
'GigabitEthernet 0/1/flags': '0x00'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip ospf segment-routing adjacency-sid | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list =self.dut_get_start_show_info(show_info)
        new_list = []
        flag = 0
        for value in show_info_list:
            if "interface" in value:
                flag = 1
            if flag == 1 :
                new_list.append(value)
        star,end,show_len_list,show_info_list_line = self.dut_common_get_linelist("\n".join(new_list),"interface")
        x_list = [15, 9, 12, 18, 35]
        dict_value = self.dut_show_autoget_form(star,end,"interface",x_list,show_info_list_line)
        return dict_value
    def dut_get_show_mpls_forwardingtable_ilm(self,show_info):
        """
        Function:show mpls forwarding-table ilm回显解析函数
        CLI命令:show mpls forwarding-table ilm
        回显信息示例:
RGOS_12_2#show mpls forwarding-table ilm

Label Operation Code:
PH--PUSH label
PP--POP label
SW--SWAP label
SP--SWAP topmost label and push new label
DP--DROP packet
PC--POP label and continue lookup by IP or Label
PI--POP label and do ip lookup forward
PN--POP label and forward to nexthop
PM--POP label and do MAC lookup forward
PV--POP label and output to VC attach interface
IP--IP lookup forward
 s--stale
  Local   Outgoing OP FEC                         Outgoing         Nexthop        
  label   label                                   interface                     
  12000   imp-null PP --                          Gi0/1            12.2.2.1       
  12010   imp-null PP --                          Gi0/2            23.2.2.3       

RGOS_12_2#

        Returns:
{'--/OP': 'PP'
'--/Outgoing interface': 'Gi0/2'
'--/Local label': '12010'
'--/Nexthop': '23.2.2.3'
'--/Outgoing label': 'imp-null'
'FEC_list': ['--'
'--']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mpls forwarding-table ilm | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        new_show_list = []
        title = "Local label    Outgoing label   OP   FEC   Outgoing interface   Nexthop"
        new_show_list.append(title)
        flag = 0
        for value in show_info_list:
            if re.search(r"\d+\.\d+\.\d+\.\d+",value):
                flag = 1
            if flag == 1 :
                value = value.replace(" ","  ")
                new_show_list.append(value)
        new_show = "\n".join(new_show_list)
        dict_value = self.dut_show_autoget_blank_list(new_show,"FEC")
        return dict_value
    def dut_get_show_mpls_forwardingtable_il(self,show_info):
        """
        Function:show mpls forwarding-table ilm回显解析函数
        CLI命令:show mpls forwarding-table ilm
        回显信息示例:
RGOS_12_2#show mpls forwarding-table ilm

Label Operation Code:
PH--PUSH label
PP--POP label
SW--SWAP label
SP--SWAP topmost label and push new label
DP--DROP packet
PC--POP label and continue lookup by IP or Label
PI--POP label and do ip lookup forward
PN--POP label and forward to nexthop
PM--POP label and do MAC lookup forward
PV--POP label and output to VC attach interface
IP--IP lookup forward
 s--stale
  Local   Outgoing OP FEC                         Outgoing         Nexthop        
  label   label                                   interface                     
  12000   imp-null PP --                          Gi0/1            12.2.2.1       
  12010   imp-null PP --                          Gi0/2            23.2.2.3

        Returns:
{"--/OP": "PP"
"--/Outgoing interface": "Gi0/2"
"--/Local label": "12010"
"--/Nexthop": "23.2.2.3"
"--/Outgoing label": "imp-null"
"FEC_list": ["--"
"--"]}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mpls forwarding-table ilm | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        new_show_list = []
        title = "Local label    Outgoing label   OP   FEC   Outgoing interface   Nexthop"
        new_show_list.append(title)
        flag = 0
        for value in show_info_list:
            if re.search(r"\d+\.\d+\.\d+\.\d+",value):
                flag = 1
            if flag == 1 :
                value = value.replace(" ","  ")
                new_show_list.append(value)
        new_show = "\n".join(new_show_list)
        dict_value = self.dut_show_autoget_blank_list(new_show,"Nexthop")
        return dict_value
    def dut_get_show_mpls_ldp_backupfrr(self,show_info):
        """
        Function:show mpls ldp backup-frr回显解析函数
        CLI命令:show mpls ldp backup-frr
        回显信息示例:
Ruijie#show mpls ldp backup-frr
Default VRF:
    FEC: 1.1.1.1/32
        Primary Nexthop: 0.0.0.0， out if: Loopback 0
        Backup Entry: none
    FEC: 11::11/128
        Primary Nexthop: ::， out if: Loopback 0
        Backup Entry: none
    FEC: 12::12/128
        Primary Nexthop: fe80::250:56ff:fe91:5775， out if: GigabitEthernet 0/1
        Valid Manual Backup Nexthop: 2002::2， acl: permit
        Backup Entry: manual， session: 3.3.3.3:0， label: 11265， out if: GigabitEthernet 0/2， active: FALSE
    FEC: 13::13/128
        Primary Nexthop: fe80::250:56ff:fe91:5775， out if: GigabitEthernet 0/1
        Valid Manual Backup Nexthop: 2002::2， acl: permit
        Backup Entry: manual， session: 3.3.3.3:0， label: 3， out if: GigabitEthernet 0/2， active: FALSE
    FEC: 14::14/128
        Primary Nexthop: fe80::250:56ff:fe91:5775， out if: GigabitEthernet 0/1
        Valid Manual Backup Nexthop: 2002::2， acl: permit
        Backup Entry: manual， session: 3.3.3.3:0， label: 11266， out if: GigabitEthernet 0/2， active: FALSE
    FEC: 2000::/96
        Primary Nexthop: ::， out if: GigabitEthernet 0/0
        Backup Entry: none
    FEC: 2001::/96
        Primary Nexthop: ::， out if: GigabitEthernet 0/1
        Valid Manual Backup Nexthop: 2002::2， acl: permit
        Backup Entry: none
    FEC: 2002::/96
        Primary Nexthop: ::， out if: GigabitEthernet 0/2
        Backup Entry: none
    FEC: 2003::/96
        Primary Nexthop: ::， out if: GigabitEthernet 0/3
        Backup Entry: none
    FEC: 3000::/96
        Primary Nexthop: none
        Backup Entry: none
    FEC: 3001::/96
        Primary Nexthop: fe80::250:56ff:fe91:5775， out if: GigabitEthernet 0/1
        Valid Manual Backup Nexthop: 2002::2， acl: permit
        Backup Entry: manual， session: 3.3.3.3:0， label: 11269， out if: GigabitEthernet 0/2， active: FALSE
    FEC: 3002::/96
        Primary Nexthop: fe80::250:56ff:fe91:5775， out if: GigabitEthernet 0/1
        Valid Manual Backup Nexthop: 2002::2， acl: permit
        Backup Entry: manual， session: 3.3.3.3:0， label: 3， out if: GigabitEthernet 0/2， active: FALSE

        Returns:
{"1024::/64/Primary Nexthop": "fe80::250:56ff:feb2:f53b"
"2004::1/128/acl": "permit"
"1012::/64/Primary Nexthop": "::"
"1014::/64/Backup Entry": "none"
"1013::/64/out if": "GigabitEthernet 0/2"
"1034::/64/Primary Nexthop": "fe80::250:56ff:feb2:143a"
"2004::1/128/Primary Nexthop": "fe80::250:56ff:feb2:1e5a"
"2002::1/128/out if": "GigabitEthernet 0/1"
"2004::1/128/Backup Entry": "manual"
"1040::/64/label": "11268"
"1014::/64/Primary Nexthop": "::"
"2003::1/128/out if": "GigabitEthernet 0/2"
"2003::1/128/Primary Nexthop": "fe80::250:56ff:feb2:143a"
"1040::/64/active": "FALSE"
"1.1.1.1/32/Primary Nexthop": "0.0.0.0"
"2002::1/128/Backup Entry": "none"
"1034::/64/Backup Entry": "none"
"1024::/64/out if": "GigabitEthernet 0/1"
"1014::/64/acl": "permit"
"2001::1/128/Backup Entry": "none"
"1014::/64/out if": "GigabitEthernet 0/3"
"1034::/64/out if": "GigabitEthernet 0/2"
"1014::/64/Valid Manual Backup Nexthop": "1012::2"
"1010::/64/out if": "GigabitEthernet 0/0"
"1040::/64/Valid Manual Backup Nexthop": "1012::2"
"1013::/64/Backup Entry": "none"
"1.1.1.1/32/Backup Entry": "none"
"1012::/64/out if": "GigabitEthernet 0/1"
"1040::/64/Primary Nexthop": "fe80::250:56ff:feb2:1e5a"
"2004::1/128/session": "2.2.2.2:0"
"2004::1/128/label": "11269"
"1024::/64/Backup Entry": "none"
"2004::1/128/active": "FALSE"
"1013::/64/Primary Nexthop": "::"
"2001::1/128/Primary Nexthop": "::"
"2002::1/128/Primary Nexthop": "fe80::250:56ff:feb2:f53b"
"1040::/64/acl": "permit"
"2004::1/128/out if": "GigabitEthernet 0/1"
"2001::1/128/out if": "Loopback 0"
"2004::1/128/Valid Manual Backup Nexthop": "1012::2"
"1040::/64/session": "2.2.2.2:0"
"1012::/64/Backup Entry": "none"
"1010::/64/Backup Entry": "none"
"1040::/64/Backup Entry": "manual"
"2003::1/128/Backup Entry": "none"
"1010::/64/Primary Nexthop": "::"
"1040::/64/out if": "GigabitEthernet 0/1"
"1.1.1.1/32/out if": "Loopback 0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mpls ldp backup-frr | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        flag = 0
        for value in show_info_list:
            if re.match("FEC: (\S+/\d+)",value.strip()):
                obj_1 = re.match("FEC: (\S+/\d+)",value.strip())
                key_1 = obj_1.group(1)
                flag = 1
            else:
                if flag == 1 :
                    if "," in value :
                        list_1 = value.split(",")
                        for list_1_value in list_1:
                            if ":" in list_1_value:
                                list_2 = list_1_value.split(":",1)
                                dict_value[key_1+"/"+list_2[0].strip()] = list_2[1].strip()
                    elif ":" in value:
                        list_2 = value.split(":")
                        dict_value[key_1+"/"+list_2[0].strip()] = list_2[1].strip()
        return dict_value
    def dut_get_show_mpls_ldp_frr(self,show_info):
        """
        Function:show mpls ldp frr回显解析函数
        CLI命令:show mpls ldp frr
        回显信息示例:
r1#show mpls ldp frr 
Status codes: * - valid.
Default VRF:
  INTF-GigabitEthernet 0/0:
  INTF-GigabitEthernet 0/1:
  INTF-GigabitEthernet 0/1:
    nexthop 1.3.0.3 (*)
    auto-frr is valid
  INTF-GigabitEthernet 0/2:
  INTF-GigabitEthernet 0/3:
  INTF-Local 1:
  INTF-Null 0:
  INTF-VLAN 1:
  INTF-VMgmt 0:
  INTF-Loopback 0:
  INTF-WAVI 0:

        Returns:
{'INTF-GigabitEthernet 0/1/Status codes': '*'
'INTF-GigabitEthernet 0/1/nexthop': '1.3.0.3'
'INTF-GigabitEthernet 0/1/auto-frr': 'valid'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mpls ldp frr | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        flag = 0
        dict_value = {}
        for value in show_info_list:
            if "Default VRF" in value:
                flag = 0
                continue
            elif ":" in value:
                key_1 = value.split(":")[0].strip()
                flag = 1
                continue
            flag = flag + 1
            if flag > 1 :
                if re.search("nexthop (\d+\.\d+\.\d+\.\d+) \((\*)\)",value):
                    obj = re.search("nexthop (\d+\.\d+\.\d+\.\d+) \((\*)\)",value)
                    dict_value[key_1 + "/nexthop"] = obj.group(1)
                    dict_value[key_1 + "/Status codes"] = obj.group(2)
                elif " is " in value:
                    list_1 = value.split("is")
                    dict_value[key_1 + "/" + list_1[0].strip()] = list_1[1].strip()
        return dict_value
    def dut_get_show_ip_ospf_segmentrouting_ftn(self,show_info):
        """
        Function:show ip ospf segment-routing ftn回显解析函数
        CLI命令:show ip ospf segment-routing ftn
        回显信息示例:
RGOS_12_2#show ip ospf segment-routing ftn 
Codes: C - Connected， D - Discard， O - OSPF， IA - OSPF inter area
       N1 - OSPF NSSA external type 1， N2 - OSPF NSSA external type 2
       E1 - OSPF external type 1， E2 - OSPF external type 2， A - Adjacency
       PH - PUSH label， PP - POP label， SW - SWAP label
       PC - POP label and continue lookup by IP or Label
       PI - POP label and lookup by IP

OSPF process 100:
  O   120.1.1.1/32， vrf_id: 0， safi: 4， metric: 1， distance: 110， nh_num 1.
    --          imp-null    PH      11.1.1.1         GigabitEthernet 0/1(2)
  O   120.1.1.2/32， vrf_id: 0， safi: 4， metric: 1， distance: 110， nh_num 1.
    --          imp-null    PH      11.1.1.1         GigabitEthernet 0/1(2)
RGOS_12_2#

        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip ospf segment-routing ftn | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        for value in show_info_list:
            if re.match("OSPF process \d+:",value):
                obj = re.match("OSPF process (\d+):",value)
                id = obj.group(1)
            elif re.match("(\S+)\s+(\d+\.\d+\.\d+\.\d+/\d+), vrf_id: (\d+), safi: (\d+), metric: (\d+), distance: (\d+), nh_num (\d+)\.",value.strip()):
                obj_1 = re.match("(\S+)\s+(\d+\.\d+\.\d+\.\d+/\d+), vrf_id: (\d+), safi: (\d+), metric: (\d+), distance: (\d+), nh_num (\d+)\.",value.strip())
                ip = obj_1.group(2).strip()
                dict_value[id+"/"+ip+"/status"] = obj_1.group(1).strip()
                dict_value[id+"/"+ip+"/vrf_id"] = obj_1.group(3).strip()
                dict_value[id+"/"+ip+"/safi"] = obj_1.group(4).strip()
                dict_value[id + "/" + ip + "/metric"] = obj_1.group(5).strip()
                dict_value[id + "/" + ip + "/distance"] = obj_1.group(6).strip()
                dict_value[id + "/" + ip + "/nh_num"] = obj_1.group(7).strip()
            elif re.match("(\S+)\s+(\S+)\s+(\S+)\s+(\d+\.\d+\.\d+\.\d+)\s+(\S+\s\S+)\((\d+)\)",value.strip()):
                obj_2 = re.match("(\S+)\s+(\S+)\s+(\S+)\s+(\d+\.\d+\.\d+\.\d+)\s+(\S+\s\S+)\((\d+)\)",value.strip())
                dict_value[id + "/" + ip + "/in"] = obj_2.group(1).strip()
                dict_value[id + "/" + ip + "/out"] = obj_2.group(2).strip()
                dict_value[id + "/" + ip + "/code"] = obj_2.group(3).strip()
                dict_value[id + "/" + ip + "/nexthop"] = obj_2.group(4).strip()
                dict_value[id + "/" + ip + "/interface"] = obj_2.group(5).strip()
                dict_value[id + "/" + ip + "/interface_index"] = obj_2.group(6).strip()
        return dict_value
    def dut_get_show_mpls_forwardingtable_ftn(self,show_info):
        """
        Function:show mpls forwarding-table ftn回显解析函数
        CLI命令:show mpls forwarding-table ftn
        回显信息示例:
RGOS_12_2#show mpls forwarding-table ftn 

Label Operation Code:
PH--PUSH label
PP--POP label
SW--SWAP label
SP--SWAP topmost label and push new label
DP--DROP packet
PC--POP label and continue lookup by IP or Label
PI--POP label and do ip lookup forward
PN--POP label and forward to nexthop
PM--POP label and do MAC lookup forward
PV--POP label and output to VC attach interface
IP--IP lookup forward
 s--stale
  Local   Outgoing OP FEC                         Outgoing         Nexthop        
  label   label                                   interface                     
  --      imp-null PH 120.1.1.1/32                Gi0/1            11.1.1.1       
  --      imp-null PH 120.1.1.2/32                Gi0/1            11.1.1.1       

RGOS_12_2#

        Returns:
{'120.1.1.1/32/OP': 'PH'
'120.1.1.2/32/Local_label': '--'
'120.1.1.1/32/Outgoing_label': 'imp-null'
'120.1.1.2/32/Outgoing_label': 'imp-null'
'120.1.1.2/32/OP': 'PH'
'120.1.1.2/32/Nexthop': '11.1.1.1'
'120.1.1.1/32/Local_label': '--'
'120.1.1.1/32/Nexthop': '11.1.1.1'
'120.1.1.2/32/Outgoing': 'Gi0/1'
'120.1.1.1/32/Outgoing': 'Gi0/1'
'FEC_list': ['120.1.1.1/32'
'120.1.1.2/32']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mpls forwarding-table ftn | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_mpls_forwardingtable(show_info)
    def dut_get_show_mpls_forwardingtable_ft(self,show_info):
        show_info_list = show_info.split("\n")
        show_info_list1 = []
        show_info_list1.append("  Local   Outgoing OP FEC                         Outgoing_int     Nexthop     Uptime")
        flag = 0
        for value in show_info_list:
            if "Outgoing" in value:
                flag = flag + 1
                continue
            if flag > 1 :
                show_info_list1.append(value)
            if flag > 0:
                flag = flag + 1
        show_info = "\n".join(show_info_list1)
        star,end,show_len_list,show_info_list_line =  self.dut_common_get_linelist(show_info,"FEC")
        return self.dut_show_autoget_form(star,end,"FEC",show_len_list,show_info_list_line,"Outgoing_int")
    def dut_get_show_bgp_ipv4_flowspec(self,show_info):
        """
        Function:show bgp ipv4 flowspec回显解析函数
        CLI命令:show bgp ipv4 flowspec
        回显信息示例:
Ruijie#show bgp ipv4 flowspec
['FLOW-SPEC v4 {
      Dest 10.1.1.0/24;}
                     
* i   AS-PATH:Local
      Next Hop:0.0.0.0 from 12.1.1.1 (172.28.59.177)
      Origin IGP， metric 0， localpref 100， valid， internal
      Extended Community: Traffic-rate: 12.00KBps-as12

*>i   AS-PATH:Local
      Next Hop:0.0.0.0 from 11.1.1.1 (172.28.59.177)
      Origin IGP， metric 0， localpref 100， valid， internal， best
      Extended Community: Traffic-rate: 11.00KBps-as12

    FLOW-SPEC v4 {
      Dest 20.1.1.0/24;}
                     
* i   AS-PATH:Local
      Next Hop:0.0.0.0 from 12.1.1.1 (172.28.59.177)
      Origin IGP， metric 0， localpref 100， valid， internal
      Extended Community: Traffic-rate: 22.00KBps-as12

*>i   AS-PATH:Local
      Next Hop:0.0.0.0 from 11.1.1.1 (172.28.59.177)
      Origin IGP， metric 0， localpref 100， valid， internal， best
      Extended Community: Traffic-rate: 21.00KBps-as12

    FLOW-SPEC v4 {
      Dest 30.1.1.0/24;}
                     
* i   AS-PATH:Local
      Next Hop:0.0.0.0 from 12.1.1.1 (172.28.59.177)
      Origin IGP， metric 0， localpref 100， valid， internal
      Extended Community: Traffic-rate: 32.00KBps-as12

*>i   AS-PATH:Local
      Next Hop:0.0.0.0 from 11.1.1.1 (172.28.59.177)
      Origin IGP， metric 0， localpref 100， valid， internal， best
      Extended Community: Traffic-rate: 31.00KBps-as12']

        Returns:
{'10.1.1.0/24/*>i/interface_ip': '11.1.1.1'
'30.1.1.0/24/* i/router_ip': '172.28.59.177'
'20.1.1.0/24/*>i/router_ip': '172.28.59.177'
'20.1.1.0/24/*>i/AS-PATH': 'Local'
'10.1.1.0/24/* i/Traffic-rate': '12.00'
'20.1.1.0/24/*>i/interface_ip': '11.1.1.1'
'30.1.1.0/24/*>i/AS-PATH': 'Local'
'10.1.1.0/24/*>i/router_ip': '172.28.59.177'
'10.1.1.0/24/* i/interface_ip': '12.1.1.1'
'20.1.1.0/24/* i/Next Hop': '0.0.0.0'
'30.1.1.0/24/*>i/Next Hop': '0.0.0.0'
'30.1.1.0/24/* i/Next Hop': '0.0.0.0'
'20.1.1.0/24/* i/router_ip': '172.28.59.177'
'30.1.1.0/24/* i/Traffic-rate': '32.00'
'30.1.1.0/24/*>i/Traffic-rate': '31.00'
'20.1.1.0/24/*>i/Next Hop': '0.0.0.0'
'20.1.1.0/24/*>i/Traffic-rate': '21.00'
'10.1.1.0/24/*>i/Next Hop': '0.0.0.0'
'20.1.1.0/24/* i/interface_ip': '12.1.1.1'
'20.1.1.0/24/* i/Traffic-rate': '22.00'
'30.1.1.0/24/*>i/router_ip': '172.28.59.177'
'20.1.1.0/24/* i/AS-PATH': 'Local'
'10.1.1.0/24/*>i/AS-PATH': 'Local'
'10.1.1.0/24/* i/router_ip': '172.28.59.177'
'30.1.1.0/24/* i/AS-PATH': 'Local'
'10.1.1.0/24/* i/AS-PATH': 'Local'
'30.1.1.0/24/*>i/interface_ip': '11.1.1.1'
'30.1.1.0/24/* i/interface_ip': '12.1.1.1'
'10.1.1.0/24/* i/Next Hop': '0.0.0.0'
'10.1.1.0/24/*>i/Traffic-rate': '11.00'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bgp ipv4 flowspec | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        for value in show_info_list:
            if re.search("Dest (\d+\.\d+\.\d+\.\d+/\d+);",value):
                obj = re.search("Dest (\d+\.\d+\.\d+\.\d+/\d+);",value)
                key_1 = obj.group(1)
            elif "AS-PATH:" in value:
                list_1 = value.split("AS-PATH:")
                key_2 = list_1[0].strip()
                dict_value[key_1 + "/" +key_2 + "/AS-PATH"] = list_1[1].strip()
            elif re.search("Next Hop:(\S+) from (\S+) \((\S+)\)",value):
                obj_1 = re.search("Next Hop:(\S+) from (\S+) \((\S+)\)",value)
                dict_value[key_1 + "/" +key_2 + "/Next Hop"] = obj_1.group(1).strip()
                dict_value[key_1 + "/" + key_2 + "/interface_ip"] = obj_1.group(2).strip()
                dict_value[key_1 + "/" + key_2 + "/router_ip"] = obj_1.group(3).strip()
            elif re.search("Origin (\S+), metric (\d+), localpref (\d+), (.*)",value):
                obj_2 = re.search("Origin (\S+), metric (\d+), localpref (\d+), (.*)",value)
                dict_value[key_1 + "/" + key_2 + "/Origin"] = obj_2.group(1).strip()
                dict_value[key_1 + "/" + key_2 + "/metric"] = obj_2.group(2).strip()
                dict_value[key_1 + "/" + key_2 + "/localpref"] = obj_2.group(3).strip()
                dict_value[key_1 + "/" + key_2 + "/staus"] = obj_2.group(4).strip()
            elif re.search("Extended Community: Traffic-rate: (.*)KBps-as12",value):
                obj_3 = re.search("Extended Community: Traffic-rate: (.*)KBps-as12",value)
                dict_value[key_1 + "/" + key_2 + "/Traffic-rate"] = obj_3.group(1).strip()
        return dict_value
    def dut_get_show_bgp_all_neighbors(self,show_info):
        """
        Function:show bgp all neighbors回显解析函数
        CLI命令:show bgp all neighbors
        回显信息示例:
RGOS_12_1#show bgp all neighbors 

For address family: IPv4 Flowspec
BGP neighbor is 4.1.1.2， remote AS 2， local AS 1， external link
 Member of peer-group p1 for session parameters
  BGP version 4， remote router ID 4.1.1.2
  BGP state = Established， up for 02:32:32
  Last read 02:32:30， hold time is 180， keepalive interval is 60 seconds
  Neighbor capabilities:
    Route refresh: advertised and received (old and new)
    Four-octets ASN Capability: advertised and received
    Address family IPv4 Flowspec: advertised and received
    Graceful Restart Capability: advertised and received
      Remote Restart timer is 120 seconds
      Address families preserved by peer:
        IPv4 Unicast (was preserved)
        IPv4 Labeled (was preserved)
        VPNv4 Unicast (was preserved)
        IPv4 Flowspec (was preserved)
        IPv6 Unicast (was preserved)
        IPv6 Labeled (was preserved)
        VPNv6 Unicast (was preserved)
        IPv6 Flowspec (was preserved)
        L2VPN VPLS (was preserved)
        L2VPN EVPN (was preserved)
        L2VPN VPWS (was preserved)
        Link-state Link-state (was preserved)
  Received 156 messages， 0 notifications， 0 in queue
    open message:1 update message:2 keepalive message:153
    refresh message:0 dynamic cap:0 notifications:0
  Sent 155 messages， 0 notifications， 0 in queue
    open message:1 update message:2 keepalive message:152
    refresh message:0 dynamic cap:0 notifications:0
  Route refresh request: received 0， sent 0
  Minimum time between advertisement runs is 30 seconds
  Minimum time between as origination advertisement runs is 1 seconds
 For address family: IPv4 Flowspec
  BGP table version 4， neighbor version 4
  Index 1， Offset 0， Mask 0x2
  p1 peer-group member
  3 update-group member
  Dest ip validation disable
  Inbound path policy configured
  Route map for incoming advertisements is *rm1
  1 accepted prefixes
  1 announced prefixes in update-group 3

 Connections established 2; dropped 1
 Graceful-restart Status:
  Remote restart-time is 120 sec

Local host: 4.1.1.1， Local port: 179
Foreign host: 4.1.1.2， Foreign port: 37707
Sock_fd: 56
Nexthop: 4.1.1.1
Last Reset: 02:34:04， due to BGP Notification received
Notification Error Message: (Cease/Other Configuration Change.)


For address family: IPv6 Flowspec
BGP neighbor is 6::2， remote AS 2， local AS 1， external link
 Member of peer-group p1 for session parameters
  BGP version 4， remote router ID 4.1.1.2
  BGP state = Established， up for 02:53:50
  Last read 02:52:25， hold time is 180， keepalive interval is 60 seconds
  Neighbor capabilities:
    Route refresh: advertised and received (old and new)
    Four-octets ASN Capability: advertised and received
    Address family IPv6 Flowspec: advertised and received
    Graceful Restart Capability: advertised and received
      Remote Restart timer is 120 seconds
      Address families preserved by peer:
        IPv4 Unicast (was preserved)
        IPv4 Labeled (was preserved)
        VPNv4 Unicast (was preserved)
        IPv4 Flowspec (was preserved)
        IPv6 Unicast (was preserved)
        IPv6 Labeled (was preserved)
        VPNv6 Unicast (was preserved)
        IPv6 Flowspec (was preserved)
        L2VPN VPLS (was preserved)
        L2VPN EVPN (was preserved)
        L2VPN VPWS (was preserved)
        Link-state Link-state (was preserved)
  Received 177 messages， 0 notifications， 0 in queue
    open message:1 update message:2 keepalive message:174
    refresh message:0 dynamic cap:0 notifications:0
  Sent 176 messages， 0 notifications， 0 in queue
    open message:1 update message:2 keepalive message:173
    refresh message:0 dynamic cap:0 notifications:0
  Route refresh request: received 0， sent 0
  Minimum time between advertisement runs is 30 seconds
  Minimum time between as origination advertisement runs is 1 seconds
 For address family: IPv6 Flowspec
  BGP table version 2， neighbor version 2
  Index 1， Offset 0， Mask 0x2
  p1 peer-group member
  2 update-group member
  Dest ip validation disable
  Inbound path policy configured
  Route map for incoming advertisements is *rm1
  1 accepted prefixes
  1 announced prefixes in update-group 2

 Connections established 1; dropped 0
 Graceful-restart Status:
  Remote restart-time is 120 sec

Local host: 6::1， Local port: 179
Foreign host: 6::2， Foreign port: 43139
Sock_fd: 58
Nexthop global: 6::1
Nexthop local: fe80::250:56ff:fe91:cc8a
BGP connection: shared network
Last Reset:         ， due to BGP Notification received
Notification Error Message: (Cease/Other Configuration Change.)

RGOS_12_1#

        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bgp all neighbors | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        flag = 0
        for value in show_info_list:
            if re.search("BGP neighbor is (\S+), remote AS (\d+), local AS (\d+),.*",value):
                obj_1 = re.search("BGP neighbor is (\S+), remote AS (\d+), local AS (\d+),.*",value)
                key_1 = obj_1.group(1).strip()
                dict_value[key_1+"/remote AS"] = obj_1.group(2).strip()
                dict_value[key_1 + "/local AS" ] = obj_1.group(3).strip()
                flag = 1
            elif re.search("BGP version (\S+), remote router ID (\S+)",value):
                obj_2 = re.search("BGP version (\S+), remote router ID (\S+)",value)
                dict_value[key_1 + "/BGP version" ] = obj_2.group(1).strip()
                dict_value[key_1 + "/remote router ID" ] = obj_2.group(2).strip()
            elif re.search("BGP state = (\S+), up for (\S+)",value):
                obj_3 = re.search("BGP state = (\S+), up for (\S+)",value)
                dict_value[key_1 + "/BGP state" ] = obj_3.group(1).strip()
                dict_value[key_1 + "/up for" ] = obj_3.group(2).strip()
            elif re.search("Last read (\S+), hold time is (\S+), keepalive interval is (\S+) seconds",value):
                obj_4 = re.search("Last read (\S+), hold time is (\S+), keepalive interval is (\S+) seconds",value)
                dict_value[key_1 + "/Last read" ] = obj_4.group(1).strip()
                dict_value[key_1 + "/hold time" ] = obj_4.group(2).strip()
                dict_value[key_1 + "/keepalive interval"] = obj_4.group(3).strip()
            elif re.search("For address family: (.*)",value):
                if flag == 1 :
                    obj_5 = re.search("For address family: (.*)",value)
                    dict_value[key_1 + "/For address family"] = obj_5.group(1).strip()
                    flag = 0
            elif re.search("Local host: (\S+), Local port: (\S+)",value):
                obj_6 = re.search("Local host: (\S+), Local port: (\S+)",value)
                dict_value[key_1 + "/Local host"] = obj_6.group(1).strip()
                dict_value[key_1 + "/Local port"] = obj_6.group(2).strip()
            elif re.search("Foreign host: (\S+), Foreign port: (\S+)",value):
                obj_7 = re.search("Foreign host: (\S+), Foreign port: (\S+)",value)
                dict_value[key_1 + "/Foreign host"] = obj_7.group(1).strip()
                dict_value[key_1 + "/Foreign port"] = obj_7.group(2).strip()
            elif re.search("Sock_fd: (\S+)",value):
                obj_8 = re.search("Sock_fd: (\S+)",value)
                dict_value[key_1 + "/Sock_fd"] = obj_8.group(1).strip()
            elif re.search("Nexthop: (\S+)",value):
                obj_8 = re.search("Nexthop: (\S+)",value)
                dict_value[key_1 + "/Nexthop"] = obj_8.group(1).strip()
        return dict_value
    def dut_get_show_bgp_ipv4_flowspec_neighbors(self,show_info):
        """
        Function:show bgp ipv4 flowspec neighbors回显解析函数
        CLI命令:show bgp ipv4 flowspec neighbors
        回显信息示例:
RGOS_12_1#show bgp ipv4 flowspec neighbors

For address family: IPv4 Flowspec
BGP neighbor is 4.1.1.2， remote AS 2， local AS 1， external link
 Member of peer-group p1 for session parameters
  BGP version 4， remote router ID 4.1.1.2
  BGP state = Established， up for 03:08:51
  Last read 03:08:49， hold time is 180， keepalive interval is 60 seconds
  Neighbor capabilities:
    Route refresh: advertised and received (old and new)
    Four-octets ASN Capability: advertised and received
    Address family IPv4 Flowspec: advertised and received
    Graceful Restart Capability: advertised and received
      Remote Restart timer is 120 seconds
      Address families preserved by peer:
        IPv4 Unicast (was preserved)
        IPv4 Labeled (was preserved)
        VPNv4 Unicast (was preserved)
        IPv4 Flowspec (was preserved)
        IPv6 Unicast (was preserved)
        IPv6 Labeled (was preserved)
        VPNv6 Unicast (was preserved)
        IPv6 Flowspec (was preserved)
        L2VPN VPLS (was preserved)
        L2VPN EVPN (was preserved)
        L2VPN VPWS (was preserved)
        Link-state Link-state (was preserved)
  Received 192 messages， 0 notifications， 0 in queue
    open message:1 update message:2 keepalive message:189
    refresh message:0 dynamic cap:0 notifications:0
  Sent 191 messages， 0 notifications， 0 in queue
    open message:1 update message:2 keepalive message:188
    refresh message:0 dynamic cap:0 notifications:0
  Route refresh request: received 0， sent 0
  Minimum time between advertisement runs is 30 seconds
  Minimum time between as origination advertisement runs is 1 seconds
 For address family: IPv4 Flowspec
  BGP table version 4， neighbor version 4
  Index 1， Offset 0， Mask 0x2
  p1 peer-group member
  3 update-group member
  Dest ip validation disable
  Inbound path policy configured
  Route map for incoming advertisements is *rm1
  1 accepted prefixes
  1 announced prefixes in update-group 3
          
 Connections established 2; dropped 1
 Graceful-restart Status:
  Remote restart-time is 120 sec
          
Local host: 4.1.1.1， Local port: 179
Foreign host: 4.1.1.2， Foreign port: 37707
Sock_fd: 56
Nexthop: 4.1.1.1
Last Reset: 03:10:23， due to BGP Notification received
Notification Error Message: (Cease/Other Configuration Change.)

RGOS_12_1#

        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show bgp ipv4 flowspec neighbors | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_bgp_all_neighbors(show_info)
    def dut_get_show_mpls_rib(self,show_info):
        """
        Function:show mpls rib回显解析函数
        CLI命令:show mpls rib
        回显信息示例:
RGOS_12_1#show mpls rib
    Status codes: m-main entry， b-backup entry， *-active， s-stale.
    Default VRF:
      LSP Information     Total
      STATIC LSP          0
      LDP LSP             2
      RSVP LSP            0
      BGP LSP             0
      L3VPN LSP           0
      STATIC CR LSP       0
      ISIS LSP            0
    LDP LSP:
------------------------------------------------------------------------------------
       FEC                     In/Out Label  In/Out IF                    Nexthop
    m* 2.2.2.2/32               -/3           -/Gi0/1                     12.1.1.2
    m* 3.3.3.3/32               -/3           -/Gi0/2                     13.1.1.3
    m* 2.2.2.2/32           11264/3           -/Gi0/1                     12.1.1.2
    m* 3.3.3.3/32           11265/3           -/Gi0/2                     13.1.1.3
------------------------------------------------------------------------------------
    RGOS_12_1#
    RGOS_12_1#

        Returns:
{'2.2.2.2/32/-/3/Status codes': 'm*'
'BGP': 'LSP'
'2.2.2.2/32/-/3/In/Out IF': '-/Gi0/1'
'2.2.2.2/32/11264/3/Status codes': 'm*'
'ISIS': 'LSP'
'3.3.3.3/32/-/3/In/Out IF': '-/Gi0/2'
'3.3.3.3/32/11265/3/Nexthop': '13.1.1.3'
'3.3.3.3/32/-/3/Nexthop': '13.1.1.3'
'L3VPN': 'LSP'
'3.3.3.3/32/-/3/Status codes': 'm*'
'LDP': 'LSP'
'STATIC': 'CR'
'3.3.3.3/32/11265/3/In/Out IF': '-/Gi0/2'
'2.2.2.2/32/-/3/Nexthop': '12.1.1.2'
'2.2.2.2/32/11264/3/Nexthop': '12.1.1.2'
'3.3.3.3/32/11265/3/Status codes': 'm*'
'2.2.2.2/32/11264/3/In/Out IF': '-/Gi0/1'
'FEC_list': ['2.2.2.2/32/-/3'
'3.3.3.3/32/-/3'
'2.2.2.2/32/11264/3'
'3.3.3.3/32/11265/3'], 'RSVP': 'LSP'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mpls rib | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        flag = 0
        new_list_1 = []
        new_list_2 = []
        for value in show_info_list:
            if "LSP Information" in value :
                flag = 1
                continue
            elif "LDP LSP:" in value:
                flag = 0
                continue
            elif "Nexthop" in value :
                flag = 2
            elif "-------------------" in value :
                continue
            if flag == 1 :
                new_list_1.append(value)
            elif flag == 2 :
                if "Nexthop" in value:
                    value = "Status codes   " + value
                else:
                    value = value.replace(" ","  ")
                new_list_2.append(value)
        for value in new_list_1:
            list_1 = value.strip().split()
            dict_value[list_1[0].strip()] = list_1[1].strip()
        new_info = "\n".join(new_list_2)
        dict_value_2 = self.dut_show_autoget_blank_list(new_info,"FEC",value_title_2="In/Out Label")
        return  dict(dict_value.items()+dict_value_2.items())
    def dut_get_show_mpls_ldp_measure(self,show_info):
        """
        Function:show mpls ldp measure回显解析函数
        CLI命令:show mpls ldp measure
        回显信息示例:
R2#show mpls ldp measure  
ldp measure count : 12
ldp measure route add interval: 1
ldp measure ftn interval: 1
ldp measure ilm interval: 1
    index  vrf       opcode  prefix                         inlabel/outlabel  out_ifx   time/us
    1      0      ROUTE_DEL  10.0.12.0/24                        --/--        --        1595614101.542692
    2      0      ROUTE_DEL  10.0.12.0/24                        --/--        --        1595614101.551870
    3      0      ROUTE_DEL  1.1.1.1/32                          --/--        --        1595614102.547536
    4      0      ROUTE_DEL  10.0.10.0/24                        --/--        --        1595614102.547566
    5      0        FTN_DEL  1.1.1.1/32                          --/3         2         1595614102.552593
    6      0        ILM_DEL  1.1.1.1/32                       11264/3         2         1595614102.552597
    7      0        FTN_DEL  10.0.10.0/24                        --/3         2         1595614102.552933
    8      0        ILM_DEL  10.0.10.0/24                     11265/3         2         1595614102.552935
    9      0      ROUTE_ADD  10.0.12.0/24                        --/--        --        1595614105.307122
    10     0      ROUTE_ADD  10.0.12.0/24                        --/--        --        1595614105.308367
    11     0      ROUTE_ADD  1.1.1.1/32                          --/--        --        1595614128.556274
    12     0      ROUTE_ADD  10.0.10.0/24                        --/--        --        1595614128.556325
R2#

        Returns:
{'1.1.1.1/32/FTN_DEL/vrf': '0'
'1.1.1.1/32/ILM_DEL/inlabel/outlabel': '11264/3'
'10.0.12.0/24/ROUTE_ADD/vrf': '0'
'10.0.10.0/24/FTN_DEL/inlabel/outlabel': '--/3'
'ldp measure ftn interval': '1'
'1.1.1.1/32/ILM_DEL/time/us': '1595614102.552597'
'10.0.12.0/24/ROUTE_DEL/vrf': '0'
'ldp measure route add interval': '1'
'10.0.12.0/24/ROUTE_ADD/time/us': '1595614105.308367'
'10.0.10.0/24/FTN_DEL/index': '7'
'1.1.1.1/32/ILM_DEL/out_ifx': '2'
'1.1.1.1/32/ROUTE_ADD/time/us': '1595614128.556274'
'10.0.10.0/24/ILM_DEL/time/us': '1595614102.552935'
'10.0.12.0/24/ROUTE_ADD/index': '10'
'1.1.1.1/32/ROUTE_DEL/index': '3'
'1.1.1.1/32/FTN_DEL/index': '5'
'10.0.10.0/24/FTN_DEL/vrf': '0'
'1.1.1.1/32/ILM_DEL/index': '6'
'10.0.10.0/24/ROUTE_ADD/time/us': '1595614128.556325'
'1.1.1.1/32/FTN_DEL/inlabel/outlabel': '--/3'
'10.0.10.0/24/ROUTE_DEL/index': '4'
'ldp measure count': '12'
'10.0.10.0/24/ILM_DEL/vrf': '0'
'1.1.1.1/32/ROUTE_DEL/inlabel/outlabel': '--/--'
'prefix_list': ['10.0.12.0/24/ROUTE_DEL'
'10.0.12.0/24/ROUTE_DEL'
'1.1.1.1/32/ROUTE_DEL'
'10.0.10.0/24/ROUTE_DEL'
'1.1.1.1/32/FTN_DEL'
'1.1.1.1/32/ILM_DEL'
'10.0.10.0/24/FTN_DEL'
'10.0.10.0/24/ILM_DEL'
'10.0.12.0/24/ROUTE_ADD'
'10.0.12.0/24/ROUTE_ADD'
'1.1.1.1/32/ROUTE_ADD'
'10.0.10.0/24/ROUTE_ADD'], '10.0.10.0/24/ILM_DEL/index': '8'
'10.0.10.0/24/ILM_DEL/inlabel/outlabel': '11265/3'
'10.0.12.0/24/ROUTE_ADD/inlabel/outlabel': '--/--'
'1.1.1.1/32/ROUTE_ADD/vrf': '0'
'10.0.10.0/24/FTN_DEL/out_ifx': '2'
'10.0.12.0/24/ROUTE_DEL/time/us': '1595614101.551870'
'10.0.10.0/24/ROUTE_ADD/index': '12'
'10.0.10.0/24/ROUTE_DEL/out_ifx': '--'
'1.1.1.1/32/ROUTE_DEL/vrf': '0'
'1.1.1.1/32/ROUTE_DEL/out_ifx': '--'
'10.0.10.0/24/ROUTE_ADD/out_ifx': '--'
'10.0.10.0/24/ROUTE_ADD/inlabel/outlabel': '--/--'
'10.0.12.0/24/ROUTE_ADD/out_ifx': '--'
'10.0.10.0/24/FTN_DEL/time/us': '1595614102.552933'
'1.1.1.1/32/FTN_DEL/out_ifx': '2'
'10.0.10.0/24/ROUTE_DEL/inlabel/outlabel': '--/--'
'1.1.1.1/32/ROUTE_DEL/time/us': '1595614102.547536'
'10.0.12.0/24/ROUTE_DEL/out_ifx': '--'
'1.1.1.1/32/ROUTE_ADD/index': '11'
'1.1.1.1/32/ROUTE_ADD/inlabel/outlabel': '--/--'
'10.0.12.0/24/ROUTE_DEL/index': '2'
'1.1.1.1/32/ILM_DEL/vrf': '0'
'1.1.1.1/32/ROUTE_ADD/out_ifx': '--'
'1.1.1.1/32/FTN_DEL/time/us': '1595614102.552593'
'10.0.10.0/24/ROUTE_ADD/vrf': '0'
'ldp measure ilm interval': '1'
'10.0.12.0/24/ROUTE_DEL/inlabel/outlabel': '--/--'
'10.0.10.0/24/ROUTE_DEL/time/us': '1595614102.547566'
'10.0.10.0/24/ILM_DEL/out_ifx': '2'
'10.0.10.0/24/ROUTE_DEL/vrf': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mpls ldp measure | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        flag = 0
        new_list = []
        for value in show_info_list:
            if "index" in value:
                flag = 1
            elif ":" in value and flag == 0:
                list_1 = value.split(":")
                dict_value[list_1[0].strip()] = list_1[1].strip()
            if flag == 1 :
                new_list.append(value.strip())
        new_show_info = "\n".join(new_list)
        dict_valu_1 = self.dut_show_autoget_blank_list(new_show_info,"prefix",value_title_2="opcode")
        for k,v in dict_valu_1.items():
            dict_value[k] = v
        return dict_value
    def dut_get_show_spanningtree_vstp_information(self,show_info):
        """
        Function:show spanning-tree v-stp information回显解析函数
        CLI命令:show spanning-tree v-stp information
        回显信息示例:
dut1(config)#show spanning-tree v-stp information 

V-STP status                 : disable
Local bridge mac             : 0010.9300.0202
Selected bridge mac          : 0010.9300.0202
Peerlink Port                : Virtual-port
Calculate Virtrual Index     : 0
Mlag Remote device connected : Y

MST 0 Root Port         : None

        Returns:
{'V-STP status': 'disable'
'Selected bridge mac': '0010.9300.0202'
'Mlag Remote device connected': 'Y'
'Peerlink Port': 'Virtual-port'
'Local bridge mac': '0010.9300.0202'
'MST 0 Root Port': 'None'
'Calculate Virtrual Index': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show spanning-tree v-stp information | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_ip_ospf_hide_bgpls_recordnlri_num_ip_detail(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        key_2 = ""
        for value in show_info_list:
            value = value.replace("\xc2\xa0"," ")
            if re.match("BGP routing table entry for (.*)",value.strip()):
                obj_1 = re.match("BGP routing table entry for (.*)",value.strip())
                key_1 = obj_1.group(1)
                key_2 = ""
            elif re.match("Local Node Descriptor:",value):
                key_2 = "Local"
            elif re.match("Remote Node Descriptor:",value):
                key_2 = "Remote"
            elif re.match("Link Descriptor:",value):
                key_2 = "Link"
            elif re.match("Prefix Descriptor:",value):
                key_2 = "Prefix"
            elif re.search("Link-state:.*",value):
                obj_2 = re.search("Link-state:(.*)",value)
                key_2 = "Link-state"
                obj_2_value = obj_2.group(1).strip()
                if "," in obj_2_value:
                    list_1 = obj_2_value.split(",")
                    for list_1_value in list_1:
                        if ": " in list_1_value:
                            list_2 = list_1_value.split(": ")
                            dict_value[key_1+"/"+key_2+"/"+list_2[0].strip()] = list_2[1].strip()
                elif ": " in obj_2_value:
                    if ": " in obj_2_value:
                        list_2 = obj_2_value.split(": ")
                        dict_value[key_1 + "/" + key_2 + "/" + list_2[0].strip()] = list_2[1].strip()
            elif "," in value:
                if "SRGB:" in value:
                    key_2 = key_2 + "/SRGB"
                    value = value.replace("SRGB:","")
                elif "SRLB:" in value:
                    key_2 = key_2 + "/SRLB"
                    value = value.replace("SRLB:","")
                elif re.match("\S+: \S+:.*",value.strip()):
                    obj = re.match("(\S+): \S+:.*",value.strip())
                    key_3 = obj.group(1).strip()
                    key_2 = key_2 + "/" + key_3
                    value = value.replace(key_3+":", "")
                list_0 = value.split(",")
                for list_0_value in list_0:
                    if ": " in list_0_value:
                        list_1 = list_0_value.split(": ")
                        dict_value[key_1 + "/" + key_2 + "/" +list_1[0].strip()] = list_1[1].strip()
            elif re.search("Total number of node routes (\d+)",value):
                obj_3 = re.search("Total number of node routes (\d+)",value)
                dict_value["Total number of node routes"] = obj_3.group(1)
            elif re.search("Total number of link routes (\d+)",value):
                obj_3 = re.search("Total number of link routes (\d+)",value)
                dict_value["Total number of link routes"] = obj_3.group(1)
            elif re.search("Total number of ipv4 reachable routes (\d+)",value):
                obj_3 = re.search("Total number of ipv4 reachable routes (\d+)",value)
                dict_value["Total number of ipv4 reacheable routes"] = obj_3.group(1)
            elif re.search("Total number of ipv6 reachable routes (\d+)",value):
                obj_3 = re.search("Total number of ipv6 reachable routes (\d+)",value)
                dict_value["Total number of ipv6 reacheable routes"] = obj_3.group(1)
            elif ": " in value:
                if key_2 == "":
                    list_1 = value.split(": ")
                    dict_value[key_1 + "/"+list_1[0].strip()] = list_1[1].strip()
                else:
                    list_1 = value.split(": ")
                    dict_value[key_1 + "/" +key_2 + "/"+ list_1[0].strip()] = list_1[1].strip()
        return dict_value
    def dut_get_show_routemap(self,show_info):
        """
        Function:show route-map回显解析函数
        CLI命令:show route-map
        回显信息示例:
Ruijie#show route-map
route-map routemap1， permit， sequence 10
  Match clauses:
    ip next-hop stdacl1
  Set clauses:
    vpn fast-reroute backup-next-hop auto

        Returns:
{"": ["route-map routemap1\uff0c permit\uff0c sequence 10"], 
"Match clauses": ["ip next-hop stdacl1"], 
"Set clauses": ["vpn fast-reroute backup-next-hop auto"]}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show route-map | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        key_1 = ""
        list_1 = []
        for value in show_info_list:
            if re.match("route-map (\S+), (\S+), sequence (\S+)",value):
                obj = re.match("route-map (\S+), (\S+), sequence (\S+)",value)
                dict_value["route-map"] = obj.group(1)
                dict_value["sequence"] = obj.group(3)
            elif "Match clauses:" in value:
                if len(list_1) > 0:
                    dict_value[key_1] = list_1
                key_1 = "Match clauses"
                list_1 = []
            elif "Set clauses:" in value:
                if len(list_1) > 0:
                    dict_value[key_1] = list_1
                key_1 = "Set clauses"
                list_1 = []
            else:
                list_1.append(value.strip())
        if len(list_1) > 0:
            dict_value[key_1] = list_1
        return dict_value
    def dut_get_show_ip_rnsserver_udpecho(self,show_info):
        """
        Function:show ip rns-server udp-echo回显解析函数
        CLI命令:show ip rns-server udp-echo
        回显信息示例:
Ruijie#show ip rns-server udp-echo 
    UDP-Echo-Server: 0.0.0.0:1025
    Receive packets number: 0
    Reflect packets success number: 0
    Reflect packets fail number: 0

        Returns:
{"UDP-Echo-Server": "0.0.0.0:1025"
"Reflect packets success number": "0"
"Reflect packets fail number": "0"
"Receive packets number": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip rns-server udp-echo | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_ip_rns_configuration_num(self,show_info):
        """
        Function:show ip rns configuration <num>回显解析函数
        CLI命令:show ip rns configuration <num>
        回显信息示例:
Ruijie#show ip rns configuration 4
Entry number: 4
Tag:
Type of operation to perform: udp-echo
Operation timeout (milliseconds): 5000
Operation frequency (milliseconds): 60000
Threshold (milliseconds): 5000
Target host name: ruijie
Target Address: 0.0.0.0
Target Port: 1025
Request size (ARR data portion): 36

肖飞 8-4 17:45:29
Ruijie#show ip rns configuration 4
Entry number: 4
Tag:
Type of operation to perform: udp-echo
Operation timeout (milliseconds): 5000
Operation frequency (milliseconds): 60000
Threshold (milliseconds): 5000
Recurring (Starting Everyday): FALSE
Life (seconds): 3600
Next Scheduled Start Time: Pending trigger
Target host name: ruijie
Target Address: 0.0.0.0
Target Port: 1025
Request size (ARR data portion): 36

        Returns:
{"Type of operation to perform": "udp-echo"
"Next Scheduled Start Time": "Pending trigger"
"Entry number": "4"
"Target host name": "ruijie"
"Operation frequency (milliseconds)": "60000"
"Request size (ARR data portion)": "36"
"Threshold (milliseconds)": "5000"
"Recurring (Starting Everyday)": "FALSE"
"Operation timeout (milliseconds)": "5000"
"Tag": ""
"Target Port": "1025"
"Life (seconds)": "3600"
"\u8096\u98de 8-4 17": "45:29"
"Target Address": "0.0.0.0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip rns configuration <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_info_analy_all_colon(show_info, "show")
    def dut_get_show_ip_rns_collectionstatistics_num(self,show_info):
        """
        Function:show ip rns collection-statistics <num>回显解析函数
        CLI命令:show ip rns collection-statistics <num>
        回显信息示例:
Ruijie#show ip rns collection-statistics 1
Entry number: 1
Start Time Index: *2014-03-20 19:53:51
Number of successful operations: 919
Number of operations over threshold: 0
Number of failed operations due to a Disconnect: 0
Number of failed operations due to a Timeout: 2
Number of failed operations due to a Busy: 0
Number of failed operations due to a No Connection: 0
Number of failed operations due to an Internal Error: 2
Number of failed operations due to a Sequence Error: 0
Number of failed operations due to a Verify Error: 0
Last packet sent sequence: 5
RTT Values:
RTTAvg: 18       RTTMin: 16       RTTMax: 37
NumOfRTT: 919     RTTSum: 16654       RTTSum2: 302786
jitter of operations: 0.000000
Lost packet ratio :0%

        Returns:
{"Number of failed operations due to an Internal Error": "2"
"Last packet sent sequence": "5"
"Number of failed operations due to a No Connection": "0"
"Number of failed operations due to a Busy": "0"
"RTTMin": "16"
"RTTSum": "16654"
"Number of failed operations due to a Timeout": "2"
"Start Time Index": "*2014-03-20 19:53:51"
"RTTSum2": "302786"
"NumOfRTT": "919"
"Number of operations over threshold": "0"
"RTT Values": ""
"RTTMax": "37"
"jitter of operations": "0.000000"
"Entry number": "1"
"Number of failed operations due to a Verify Error": "0"
"Lost packet ratio": "0"
"RTTAvg": "18"
"Number of failed operations due to a Sequence Error": "0"
"Number of failed operations due to a Disconnect": "0"
"Number of successful operations": "919"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip rns collection-statistics <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if len(re.split("\s{2}",value)) > 1 :
                list_1 = re.split("\s{2}",value)
                for list_value in list_1:
                    if ":" in list_value:
                        list_value_split = list_value.split(":", 1)  # 以冒号分割一次
                        key_name = '%s' % (list_value_split[0].lstrip().rstrip().replace("%", "").rstrip().replace("\r", ""))
                        dict_value[key_name] = list_value_split[1].lstrip().rstrip().replace("%", "").rstrip().replace("\r", "")
            elif ":" in value:
                list_value_split = value.split(":", 1)  # 以冒号分割一次
                key_name = '%s' % (list_value_split[0].lstrip().rstrip().replace("%", "").rstrip().replace("\r", ""))
                dict_value[key_name] = list_value_split[1].lstrip().rstrip().replace("%", "").rstrip().replace("\r", "")
        return dict_value
    def dut_get_show_ip_rns_operationalstate_num(self,show_info):
        return self.dut_get_show_ip_rns_collectionstatistics_num(show_info)
    def dut_get_show_ip_rns_reactionconfiguration_num(self,show_info):
        return self.dut_get_show_ip_rns_collectionstatistics_num(show_info)
    def dut_get_show_ip_rns_reactiontrigger_num(self,show_info):
        return self.dut_get_show_ip_rns_collectionstatistics_num(show_info)
    def dut_get_show_ip_rns_statistics_num(self,show_info):
        return self.dut_get_show_ip_rns_collectionstatistics_num(show_info)
    def dut_get_show_track_client(self,show_info):
        return self.dut_get_show_ip_rns_collectionstatistics_num(show_info)
    def dut_get_show_track_num(self,show_info):
        dict_value = {}
        show_info_list =self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            value = value.strip()
            if re.match("Reliable Network Service (\d+)",value):
                obj_1 = re.match("Reliable Network Service (\d+)",value)
                dict_value["Reliable Network Service"] = obj_1.group(1)
            elif re.match("The state is (\S+)",value):
                obj_1 = re.match("The state is (\S+)",value)
                dict_value["The state"] = obj_1.group(1)
            elif re.match("(\d+) change,current state last:(\d+) secs",value):
                obj_1 = re.match("(\d+) change,current state last:(\d+) secs",value)
                dict_value["change"] = obj_1.group(1)
                dict_value["current state last"] = obj_1.group(2)
            elif re.match("Delay up (\d+) secs,down (\d+) secs",value):
                obj_1 = re.match("Delay up (\d+) secs,down (\d+) secs",value)
                dict_value["Delay up"] = obj_1.group(1)
                dict_value["Delay down"] = obj_1.group(2)
        return dict_value
    def dut_get_show_isis_sync(self,show_info):
        dict_value = {}
        show_info_list =self.dut_get_start_show_info(show_info)
        key_1 = ""
        for value in show_info_list:
            if re.match("Area (\d+):",value):
                obj_1 = re.match("Area (\d+):",value)
                key_1 = obj_1.group(1)
            elif ":" in value :
                list_1 = value.split(":")
                if key_1 == "":
                    dict_value[list_1[0].strip()] = list_1[1].strip()
                else:
                    dict_value[key_1+"/"+list_1[0].strip()] =list_1[1].strip()
        return dict_value
    def dut_get_show_vap_consistencycheck_global_all(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        new_list = []
        tmp_value = ""
        for value in show_info_list:
            list_1 = re.split(r'\s{2,}',value.strip())
            if "------------" in value:
                continue
            elif len(list_1) > 2:
                if tmp_value != "":
                    new_list.append(tmp_value)
                tmp_value = value
            elif len(list_1) == 2:
                list_2 = re.split(r'\s{2,}',tmp_value)
                list_2[3]= list_2[3]+","+list_1[0]
                list_2[4] = list_2[4] + "," + list_1[1]
                tmp_value = "       ".join(list_2)
        new_list.append(tmp_value)
        show_info = "\n".join(new_list)
        value_title = "Configuration"
        value_title_end = None
        value_title_2 = None
        split_one = None
        star_num_count_flag = None
        end_num_count_flag = None
        ago_value_title = None
        dict_value={}
        rol_title_list = []
        title_row =[]

        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
            if re.match("\s*-{3,}\s+-{3,}.*",i):
                show_info_list_line.remove(i)
            if '====' in i:
                show_info_list_line.remove(i)
        length = len(show_info_list_line)
        star_num_count = 0
        end_num_count = 0
        for line_len_num in range(0,length):
            if value_title in show_info_list_line[line_len_num]:              #***********
                star_num_count = star_num_count + 1
                if star_num_count_flag is not None:
                    if int(star_num_count_flag) == star_num_count and star_num_count < 100:
                        start_num=line_len_num
                        star_num_count = 101
                else:
                    start_num=line_len_num
            if value_title_end is not None:
                if value_title_end in show_info_list_line[line_len_num]:
                    if end_num_count_flag is not None :
                        if end_num_count < 1:
                            end_num = line_len_num
                            end_num_count = 1
                    else:
                        end_num = line_len_num
            else:
                end_num = length
        for k in range(start_num,end_num):
            if split_one is not None :
                col_value_list = re.split(r'\s{1,}', str(show_info_list_line[k]).strip())
            else:
                col_value_list = re.split(r'\s{2,}', str(show_info_list_line[k]).strip())
            if value_title in col_value_list :
                title_row = col_value_list
                x_len = len(title_row)
                for i in range(x_len) :
                    if title_row[i] == value_title :
                        new_list_title_key = i
                    if value_title_2 is not None :
                        if title_row[i] == value_title_2 :
                            new_list_title_key_2 = i

            else:
                if col_value_list != "":
                    title_col = col_value_list[new_list_title_key]           #表头的列值位*****
                    if ago_value_title:
                        title_col = ago_value_title+"/"+title_col
                    if value_title_2 is not None :
                        title_col = title_col+"/"+col_value_list[new_list_title_key_2]
                    rol_title_list.append(title_col.strip())
                    if new_list_title_key+1 < x_len :
                        for s in range(new_list_title_key+1,x_len):  #需要变参的地方
                            if value_title_2 is not None :
                                if s == new_list_title_key_2 :
                                    continue
                            key_name = '%s/%s'%(title_col,title_row[s])
                            try:
                                dict_value[key_name]=col_value_list[s].strip()
                            except:
                                pass
                    if new_list_title_key > 0 :
                        for s in range(0,new_list_title_key):  #需要变参的地方
                            ##遍历列头边的值
                            if value_title_2 is not None :
                                if s == new_list_title_key_2 :
                                    continue
                            key_name = '%s/%s' % (title_col, title_row[s])
                            dict_value[key_name.strip()]=col_value_list[s].strip()
        if ago_value_title:
            value_title = ago_value_title+"/"+value_title
        dict_value[value_title+"_list"] = rol_title_list
        return dict_value
    def dut_get_show_vap_consistencycheck_vap_num_all(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info, "Configuration")
    def dut_get_show_ip_ospf_bgpls_state(self,show_info):
        dict_value = {}
        show_info_list =self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("Process (\d+):",value):
                obj_1 = re.match("Process (\d+):",value)
                key_1 = obj_1.group(1)
            elif ":" in value :
                list_1 = value.split(":")
                dict_value[key_1+"/"+list_1[0].strip()] =list_1[1].strip()
        return dict_value
    def dut_get_show_mpls_ldp_bindings(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            value = value.strip()
            if re.search("lib entry: (\S+/\d+)",value):
                obj_1 = re.search("lib entry: (\S+/\d+)",value)
                key_1 = obj_1.group(1)
            elif re.match("local binding:  to lsr:   (.*), label: (.*)",value):
                obj_2 = re.match("local binding:  to lsr:   (.*), label: (.*)",value)
                dict_value[key_1+"/local binding/to lsr"] = obj_2.group(1).strip()
                dict_value[key_1 + "/local binding/label"] = obj_2.group(2).strip()
            elif re.match("remote binding: from lsr: (.*), label: (.*)",value):
                obj_2 = re.match("remote binding: from lsr: (.*), label: (.*)",value)
                dict_value[key_1+"/remote binding/from lsr"] = obj_2.group(1).strip()
                dict_value[key_1 + "/remote binding/label"] = obj_2.group(2).strip()
        return dict_value
    def dut_get_show_spaninfo_information_outflowgroup(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        new_list = []
        for value in show_info_list:
            value = value.strip()
            if "------" not in value or "show" not in value:
                if len(value.split("  ")) == 1 :
                    value = tmp_value+", " + value
                    new_list.pop()
                    new_list.append(value)
                else:
                    tmp_value = value
                    new_list.append(value)
        show_info_1 = "\n".join(new_list)
        return self.dut_show_autoget_blank_list(show_info_1,"Group")
    def dut_get_show_vap_consistencycheck_vap_num(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info, "Configuration")
    def dut_get_show_outflowgroup_summary(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        new_list = []
        flag = 0
        for value in show_info_list:
            value = value.strip()
            if "outflow-group" in value:
                flag = 1
            if flag == 1 :
                if "------" not in value or "show" not in value:
                    if len(re.split("\s{2,}",value)) == 1 :
                        value = tmp_value+", " + value
                        new_list.pop()
                        new_list.append(value)
                    elif len(re.split("\s{2,}",value)) == 2 :
                        value = value + "  NA"
                        new_list.append(value)
                    else:
                        tmp_value = value
                        new_list.append(value)
        show_info_1 = "\n".join(new_list)
        return self.dut_show_autoget_blank_list(show_info_1,"outflow-group")
    def dut_get_show_outflowgroup_num(self,show_info):
        return self.dut_get_show_outflowgroup_summary(show_info)
    def dut_get_show_vxlan_vnistatistics_vni_num(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("VXLAN (\d+):",value.strip()):
                obj = re.match("VXLAN (\d+):",value.strip())
                key_1 = obj.group(1)
            elif re.match("10 seconds input rate (\d+) bits/sec, (\d+) packets/sec",value.strip()):
                obj_1 = re.match("10 seconds input rate (\d+) bits/sec, (\d+) packets/sec",value.strip())
                dict_value[key_1 + "/10 seconds input rate/bits"] = obj_1.group(1)
                dict_value[key_1 + "/10 seconds input rate/packets"] = obj_1.group(2)
            elif re.match("10 seconds output rate (\d+) bits/sec, (\d+) packets/sec",value.strip()):
                obj_1 = re.match("10 seconds output rate (\d+) bits/sec, (\d+) packets/sec",value.strip())
                dict_value[key_1 + "/10 seconds output rate/bits"] = obj_1.group(1)
                dict_value[key_1 + "/10 seconds output rate/packets"] = obj_1.group(2)
            elif re.match("\d+ seconds input rate (\d+) bits/sec, (\d+) packets/sec",value.strip()):
                obj_1 = re.match("(\d+ seconds input rate) (\d+) bits/sec, (\d+) packets/sec",value.strip())
                dict_value[key_1 + "/"+obj_1.group(1) +"/bits"] = obj_1.group(2)
                dict_value[key_1 + "/"+obj_1.group(1) +"/packets"] = obj_1.group(3)
            elif re.match("\d+ seconds output rate (\d+) bits/sec, (\d+) packets/sec",value.strip()):
                obj_1 = re.match("(\d+ seconds output rate) (\d+) bits/sec, (\d+) packets/sec",value.strip())
                dict_value[key_1 + "/"+obj_1.group(1) +"/bits"] = obj_1.group(2)
                dict_value[key_1 + "/"+obj_1.group(1) +"/packets"] = obj_1.group(3)
            elif re.match("(\d+) packets input, (\d+) bytes",value.strip()):
                obj_2 = re.match("(\d+) packets input, (\d+) bytes",value.strip())
                dict_value[key_1 + "/packets input"] = obj_2.group(1)
                dict_value[key_1 + "/bytes input"] = obj_2.group(2)
            elif re.match("(\d+) packets output, (\d+) bytes",value.strip()):
                obj_2 = re.match("(\d+) packets output, (\d+) bytes",value.strip())
                dict_value[key_1 + "/packets output"] = obj_2.group(1)
                dict_value[key_1 + "/bytes output"] = obj_2.group(2)
        return dict_value
    def dut_get_show_vxlan_statistics_overlaytunnel_num(self,show_info):
        return self.dut_get_show_vxlan_vnistatistics_vni_num(show_info)
    def dut_get_show_vxlan_statistics_overlaytunnel_num_vni_num(self,show_info):
        return self.dut_get_show_vxlan_vnistatistics_vni_num(show_info)
    def dut_get_show_efmp_counter(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("RX\s+: \d+",value.strip()):
                obj_1 =re.match("RX\s+: (\d+)",value.strip())
                dict_value["RX"] = obj_1.group(1)
            elif re.match("TX\s+: \d+",value.strip()):
                obj_1 =re.match("TX\s+: (\d+)",value.strip())
                dict_value["TX"] = obj_1.group(1)
            elif re.match("  \S+:",value):
                obj_2 = re.match("  (\S+):",value)
                key_1 = obj_2.group(1)
            elif re.match("    \S+.*:.*",value):
                obj_3 = re.match("    (\S+.*):(.*)",value)
                dict_value[key_1+"/"+obj_3.group(1).strip()] =obj_3.group(2).strip()
        return dict_value
    def dut_get_show_efmp_rxpnt(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if ":" in value:
                list_1 = value.split(":")
                dict_value[list_1[0].strip()] = list_1[1].strip().rstrip(".").strip()
        return dict_value
    def dut_get_show_efmp_ring(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if ":" in value:
                list_1 = value.split(":")
                dict_value[list_1[0].strip()] = list_1[1].strip().rstrip(".").strip()
        return dict_value
    def dut_get_show_pcep_peer(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        peer_list = []
        for value in show_info_list:
            if "peer address" in value:
                key_1 = value.split(":")[1].strip()
                peer_list.append(key_1)
            elif ":" in value:
                list_1 = value.split(":")
                dict_value[key_1 + "/" +list_1[0].strip()] = list_1[1].strip()
        dict_value["peer_ip"] = peer_list
        return dict_value
    def dut_get_show_pcep_peer_ip(self,show_info):
        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_pcep_peer_statistics(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        if "peer address" in show_info_list[0] and "peer address" in show_info_list[1]:
            peer_list = []
            for value in show_info_list:
                if "peer address" in value:
                    list_1 = value.split(":")
                    peer_list.append(list_1[1].strip())
                elif ":" in value:
                    list_2 = value.split(":")
                    dict_value[list_2[0].strip()] = list_2[1].strip()
            dict_value["peer_ip"] = peer_list
            return dict_value
        else:
            return self.dut_get_show_pcep_peer(show_info)
    def dut_get_show_pcep_peer_ip_statistics(self,show_info):
        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_pcep_lsp(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        flag = 0
        show_list = []
        for value in show_info_list:
            if re.match("count:\d+",value.strip()):
                obj_1 = re.match("count:(\d+)",value.strip())
                dict_value["count"] = obj_1.group(1)
            elif "PLSP-ID" in value:
                flag = 1
            if flag == 1 :
                show_list.append(value)
        show_1 = "\n".join(show_list)
        star,end,show_len_list,show_info_list_line = self.dut_common_get_linelist(show_1,"PLSP-ID",split_num=2)
        show_len_list = [10, 9, 12, 11, 12, 18, 32]
        dict_value_1 = self.dut_show_autoget_form(star,end,"PLSP-ID",show_len_list,show_info_list_line)
        return dict(dict_value.items()+dict_value_1.items())
    def dut_get_show_pcep_lsp_num(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        flag = 0
        show_list = []
        for value in show_info_list:
            if re.match("count:\d+",value.strip()):
                obj_1 = re.match("count:(\d+)",value.strip())
                dict_value["count"] = obj_1.group(1)
            elif "PLSP-ID" in value:
                flag = 1
            if flag == 1 :
                show_list.append(value)
        show_1 = "\n".join(show_list)
        star,end,show_len_list,show_info_list_line = self.dut_common_get_linelist(show_1,"PLSP-ID",split_num=2)
        show_len_list = [10, 9, 12, 11, 12, 18, 32]
        dict_value_1 = self.dut_show_autoget_form(star,end,"PLSP-ID",show_len_list,show_info_list_line)
        return dict(dict_value.items()+dict_value_1.items())
    def dut_get_show_arp_ip(self,show_info):
        return self.dut_show_autoget_blank_list(show_info,"Address")
    def dut_get_show_arp_detail_ip(self,show_info):
        star,end,show_len_list,show_info_list_line = self.dut_common_get_linelist(show_info,"IP Address")
        show_len_list = [17,16,9,9,13,11,11,11,11,32]
        return self.dut_show_autoget_form(star,end,"IP Address",show_len_list,show_info_list_line)
    def dut_get_show_ipv6_neighbors_ipv6(self,show_info):
        return self.dut_show_autoget_blank_list(show_info, "IPv6 Address")
    def dut_get_show_bgp_ipv4_srpolicy_detail_word(self,show_info):
        dict_value = {}
        segments_list = []
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("(\d+\.\d+\.\d+\.\d+) from \d+\.\d+\.\d+\.\d+ \((\d+\.\d+\.\d+\.\d+)\)",value.strip()):
                obj = re.match("(\d+\.\d+\.\d+\.\d+) from \d+\.\d+\.\d+\.\d+ \((\d+\.\d+\.\d+\.\d+)\)",value.strip())
                dict_value[obj.group(1)+"/from"] = obj.group(2)
            elif re.match("Origin IGP, localpref (\d+), .*",value.strip()):
                obj_1 = re.match("Origin IGP, localpref (\d+), .*",value.strip())
                dict_value["localpref"] = obj_1.group(1)
            elif re.match("Community: (.*)",value.strip()):
                obj_1 = re.match("Community: (.*)",value.strip())
                dict_value["Community"] = obj_1.group(1)
            elif re.match("Extended Community: RT:(.*) RT:(.*) RT:(.*) SoO:(.*)",value.strip()):
                obj_1 = re.match("Extended Community: RT:(.*) RT:(.*) RT:(.*) SoO:(.*)",value.strip())
                RT_list = []
                RT_list.append(obj_1.group(1))
                RT_list.append(obj_1.group(2))
                RT_list.append(obj_1.group(3))
                dict_value["Extended Community/RT"] = RT_list
                dict_value["Extended Community/SoO"] = obj_1.group(4).strip()
            elif re.match("Extended Community: RT:(.*) RT:(.*) RT:(.*) Unknown:(.*)",value.strip()):
                obj_1 = re.match("Extended Community: RT:(.*) RT:(.*) RT:(.*) Unknown:(.*)",value.strip())
                RT_list = []
                RT_list.append(obj_1.group(1))
                RT_list.append(obj_1.group(2))
                RT_list.append(obj_1.group(3))
                dict_value["Extended Community/RT"] = RT_list
                dict_value["Extended Community/Unknown"] = obj_1.group(4).strip()
            elif re.match("RX ID: (\d+),TX ID: (\d+)",value.strip()):
                obj_1 = re.match("RX ID: (\d+),TX ID: (\d+)",value.strip())
                dict_value["RX ID"] = obj_1.group(1)
                dict_value["TX ID"] = obj_1.group(2)
            elif re.match("Tunnel encap attribute type: (\d+) \(SR Policy\)",value.strip()):
                obj_1 = re.match("Tunnel encap attribute type: (\d+) \(SR Policy\)",value.strip())
                dict_value["Tunnel encap attribute type"] = obj_1.group(1)
            elif re.match("passed to the sr-policy module: (.*)",value.strip()):
                obj_1 = re.match("passed to the sr-policy module: (.*)",value.strip())
                dict_value["passed to the sr-policy module"] = obj_1.group(1)
            elif re.match("candidate path name: (.*)",value.strip()):
                obj_1 = re.match("candidate path name: (.*)",value.strip())
                dict_value["candidate path name"] = obj_1.group(1)
            elif re.match("bsid:\s+(\d+)\[s-flag\((\d+)\), i-flag\((\d+)\).*], preference: (\d+), num of segment-lists: (\d+)",value.strip()):
                obj_1 = re.match("bsid:\s+(\d+)\[s-flag\((\d+)\), i-flag\((\d+)\)], preference: (\d+), num of segment-lists: (\d+)",value.strip())
                dict_value["bsid"] = obj_1.group(1)
                dict_value["bsid/s-flag"] = obj_1.group(2)
                dict_value["bsid/i-flag"] = obj_1.group(3)
                dict_value["bsid/preference"] = obj_1.group(4)
                dict_value["bsid/num of segment-lists"] = obj_1.group(5)
            elif re.match("segment-list: (\d+), weight: (.*), num of segments: (.*)",value.strip()):
                if len(segments_list) != 0 :
                    dict_value[key_1+"/segments_list"] = segments_list
                obj_1 = re.match("segment-list: (\d+), weight: (.*), num of segments: (.*)",value.strip())
                key_1 = obj_1.group(1)
                dict_value[key_1 + "/weight"] = obj_1.group(2)
                dict_value[key_1 + "/num of segments"] = obj_1.group(3)
            elif "segments:" in value:
                segments_list = []
                segments_value = value.split("segments:")[1]
                if re.match(".*{.*}.*",segments_value):
                    segments_list_tmp = segments_value.split()
                    segments_list = segments_list_tmp
            elif re.search(".*{.*}.*",value):
                    segments_list_tmp_2 = value.split()
                    segments_list = segments_list + segments_list_tmp_2
        dict_value[key_1+"/segments_list"] = segments_list
        return dict_value
    def dut_get_show_bgp_ipv6_srpolicy_detail_word(self,show_info):
        return self.dut_get_show_bgp_ipv4_srpolicy_detail_word(show_info)
    def dut_get_show_bgp_ipv6_srpolicy(self,show_info):
        return self.dut_get_bgp_network(show_info)
    def dut_get_show_bgp_ipv4_srpolicy(self,show_info):
        return self.dut_get_bgp_network(show_info)
    def dut_get_show_rdnd_disable(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match(".*Elements:",value.strip()):
                obj = re.match("(.*Elements):",value.strip())
                key_1 = obj.group(1).strip()
            elif ":" in value:
                list_1 = value.split(":")
                dict_value[key_1+"/"+list_1[0].strip()] =list_1[1].strip().strip(".")
        return dict_value
    def dut_get_show_ipv6_ospf_hide_bgpls_recordnlri_num_ip_detail(self,show_info):
        return self.dut_get_show_ip_ospf_hide_bgpls_recordnlri_num_ip_detail(show_info)
    def dut_get_show_ipv6_ospf_bgpls_state(self,show_info):
        return self.dut_get_show_ip_ospf_bgpls_state(show_info)
    def dut_get_show_macaddresstable_address_mac_vni(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info,"MAC Address")
    def dut_get_show_power_version(self,show_info):
        dict_value = {}
        power_id_list = []
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if "Chassis-type:" in value :
                list_1 = value.split(":")
                dict_value[list_1[0].strip()] = list_1[1].strip()
            elif "Power-id:" in value:
                list_2 = value.split(":")
                key_1 = list_2[1].strip()
                power_id_list.append(str(key_1))
            elif ":" in value:
                list_3 = value.split(":")
                dict_value[key_1+"/"+list_3[0].strip()] = list_3[1].strip()
        dict_value["power_id_list"] = power_id_list
        return dict_value
    def dut_get_show_mmu_bufferconfig_queuethreshold_cell_interface_dutport(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        new_list = []
        key_1 = ""
        for value in show_info_list:
            if re.match("Slot \S+ Port Group \S+:",value.strip()):
                if len(new_list) != 0 :
                    new_show = "\n".join(new_list)
                    dict_value_1 = self.dut_show_autoget_blank_list(new_show,"Queue",split_one=1)
                    for k,v in dict_value_1.items():
                        dict_value[key_1 + "/" + k] = v
                key_1 = value.split(":")[0].strip()
                new_list = []
            elif re.match("Interface .*",value.strip()):
                pass
            else:
                new_list.append(value)
        if len(new_list) != 0:
            new_show = "\n".join(new_list)
            dict_value_1 = self.dut_show_autoget_blank_list(new_show, "Queue",split_one=1)
            for k, v in dict_value_1.items():
                dict_value[key_1 + "/" + k] = v
        return dict_value
    def dut_get_show_pcep(self,show_info):
        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_interfaces_dutport_transceiver(self,show_info):
        dict_value = {}
        show_list = []
        show_info_list = self.dut_get_start_show_info(show_info)
        flag = 0
        flag_1 = 0
        flag_2 = 0
        flag_3 = 0
        Transceiver_list = []
        for value in show_info_list:
            if re.match("Transceiver Type\s+:(.*)",value.strip()):
                obj = re.match("Transceiver Type\s+:(.*)",value.strip())
                dict_value["Transceiver Type"] = obj.group(1).strip()
            elif re.match("Connector Type\s+:(.*)",value.strip()):
                obj = re.match("Connector Type\s+:(.*)",value.strip())
                dict_value["Connector Type"] = obj.group(1).strip()
            elif re.match("Wavelength\(nm\)\s+:(.*)",value.strip()):
                obj = re.match("Wavelength\(nm\)\s+:(.*)",value.strip())
                dict_value["Wavelength(nm)"] = obj.group(1).strip()
            elif re.match("Wavelength tolerance\(nm\)\s*:(.*)",value.strip()):
                obj = re.match("Wavelength tolerance\(nm\)\s*:(.*)",value.strip())
                dict_value["Wavelength tolerance(nm)"] = obj.group(1).strip()
            elif re.match("Digital Diagnostic Monitoring\s+:(.*)",value.strip()):
                obj = re.match("Digital Diagnostic Monitoring\s+:(.*)",value.strip())
                dict_value["Digital Diagnostic Monitoring"] = obj.group(1).strip()
            elif re.match("Vendor Serial Number\s+:(.*)",value.strip()):
                obj = re.match("Vendor Serial Number\s+:(.*)",value.strip())
                dict_value["Vendor Serial Number"] = obj.group(1).strip()
            elif "Temp(Celsius)" in value:
                flag = 1
                continue
            elif "Transceiver current state information" in value:
                flag = 0
                flag_2 = 1
            elif "Transceiver current alarm information" in value :
                Transceiver_list = []
                flag = 0
                flag_1 = 1
                flag_3 = 0
                continue
            if flag == 1:
                if value.strip() == "":
                    flag = 0
                    continue
                list_1 = re.split("\s{2,}",value.strip())
                if len(list_1) == 5 :
                    Bias_list = []
                    RX_power_list = []
                    TX_power_list = []
                    Bias_num_list = []
                    RX_power_num_list = []
                    TX_power_num_list = []
                    dict_value["Temp(Celsius)"] = list_1[0].strip()
                    dict_value["Voltage(V)"] = list_1[1].strip()
                    if re.match(".*\d+\.\d+(\(.*)",list_1[2].strip()):
                        Bias_value = re.match(".*\d+\.\d+(\(.*)",list_1[2].strip()).group(1).strip()
                        Bias_num = re.match("(.*\d+\.\d+)\(.*",list_1[2].strip()).group(1).strip()
                    else:
                        Bias_value = list_1[2].strip()
                        Bias_num = "NA"
                    if re.match(".*\d+\.\d+(\(.*)",list_1[3].strip()):
                        RX_power_value = re.match(".*\d+\.\d+(\(.*)",list_1[3].strip()).group(1).strip()
                        RX_power_num = re.match("(.*\d+\.\d+)\(.*", list_1[3].strip()).group(1).strip()
                    else:
                        RX_power_value = list_1[3].strip()
                        RX_power_num = "NA"
                    if re.match(".*\d+\.\d+(\(.*)",list_1[4].strip()):
                        TX_power_value = re.match(".*\d+\.\d+(\(.*)",list_1[4].strip()).group(1).strip()
                        TX_power_num = re.match("(.*\d+\.\d+)\(.*", list_1[4].strip()).group(1).strip()
                    else:
                        TX_power_value = list_1[4].strip()
                        TX_power_num = "NA"
                    Bias_list.append(Bias_value)
                    RX_power_list.append(RX_power_value)
                    TX_power_list.append(TX_power_value)
                    Bias_num_list.append(Bias_num)
                    RX_power_num_list.append(RX_power_num)
                    TX_power_num_list.append(TX_power_num)
                elif len(list_1) == 3 :
                    if re.match(".*\d+\.\d+(\(.*)",list_1[0].strip()):
                        Bias_value = re.match(".*\d+\.\d+(\(.*)",list_1[0].strip()).group(1).strip()
                        RX_power_num = re.match("(.*\d+\.\d+)\(.*", list_1[0].strip()).group(1).strip()
                    else:
                        Bias_value = list_1[0].strip()
                        Bias_num = "NA"
                    if re.match(".*\d+\.\d+(\(.*)",list_1[1].strip()):
                        RX_power_value = re.match(".*\d+\.\d+(\(.*)",list_1[1].strip()).group(1).strip()
                        RX_power_num = re.match("(.*\d+\.\d+)\(.*", list_1[1].strip()).group(1).strip()
                    else:
                        RX_power_value = list_1[1].strip()
                        RX_power_num = "NA"
                    if re.match(".*\d+\.\d+(\(.*)",list_1[2].strip()):
                        TX_power_value = re.match(".*\d+\.\d+(\(.*)",list_1[2].strip()).group(1).strip()
                        TX_power_num = re.match("(.*\d+\.\d+)\(.*", list_1[2].strip()).group(1).strip()
                    else:
                        TX_power_value = list_1[2].strip()
                        TX_power_num = "NA"
                    Bias_list.append(Bias_value)
                    RX_power_list.append(RX_power_value)
                    TX_power_list.append(TX_power_value)
                    Bias_num_list.append(Bias_num)
                    RX_power_num_list.append(RX_power_num)
                    TX_power_num_list.append(TX_power_num)
            elif flag_1 == 1 :
                if value.strip() != "":
                    Transceiver_list.append(value)
            elif flag_2 == 1:
                if ":" in value:
                    list_1 = value.strip().split()
                    dict_value[list_1[0].strip()] = list_1[1].strip()
                elif "Data Path State" in value:
                    show_list = []
                    show_list.append(value)
                    flag_3 = 1
                if flag_3 == 1 :
                    if value.strip() != "":
                        show_list.append(value)

        if len(show_list) != 0:
            show_2 = "\n".join(show_list)
            dict_value_2 = self.dut_show_autoget_blank_list(show_2,"Lane")
            for k,v in dict_value_2.items():
                dict_value[k] = v
        dict_value["Bias_list"] = Bias_list
        dict_value["RX_power_list"] = RX_power_list
        dict_value["TX_power_list"] = TX_power_list
        dict_value["Bias_num_list"] = Bias_num_list
        dict_value["RX_power_num_list"] = RX_power_num_list
        dict_value["TX_power_num_list"] = TX_power_num_list
        dict_value["Transceiver current alarm information"] = Transceiver_list
        return dict_value
    def dut_get_show_interface_dutport_transceiver(self,show_info):
        dict_value = {}
        show_list = []
        show_info_list = self.dut_get_start_show_info(show_info)
        flag = 0
        flag_1 = 0
        flag_2 = 0
        flag_3 = 0
        Transceiver_list = []
        for value in show_info_list:
            if re.match("Transceiver Type\s+:(.*)",value.strip()):
                obj = re.match("Transceiver Type\s+:(.*)",value.strip())
                dict_value["Transceiver Type"] = obj.group(1).strip()
            elif re.match("Connector Type\s+:(.*)",value.strip()):
                obj = re.match("Connector Type\s+:(.*)",value.strip())
                dict_value["Connector Type"] = obj.group(1).strip()
            elif re.match("Wavelength\(nm\)\s+:(.*)",value.strip()):
                obj = re.match("Wavelength\(nm\)\s+:(.*)",value.strip())
                dict_value["Wavelength(nm)"] = obj.group(1).strip()
            elif re.match("Wavelength tolerance\(nm\)\s*:(.*)",value.strip()):
                obj = re.match("Wavelength tolerance\(nm\)\s*:(.*)",value.strip())
                dict_value["Wavelength tolerance(nm)"] = obj.group(1).strip()
            elif re.match("Digital Diagnostic Monitoring\s+:(.*)",value.strip()):
                obj = re.match("Digital Diagnostic Monitoring\s+:(.*)",value.strip())
                dict_value["Digital Diagnostic Monitoring"] = obj.group(1).strip()
            elif re.match("Vendor Serial Number\s+:(.*)",value.strip()):
                obj = re.match("Vendor Serial Number\s+:(.*)",value.strip())
                dict_value["Vendor Serial Number"] = obj.group(1).strip()
            elif "Temp(Celsius)" in value:
                flag = 1
                continue
            elif "Transceiver current state information" in value:
                flag = 0
                flag_2 = 1
            elif "Transceiver current alarm information" in value :
                Transceiver_list = []
                flag = 0
                flag_1 = 1
                flag_3 = 0
                continue
            if flag == 1:
                if value.strip() == "":
                    flag = 0
                    continue
                list_1 = re.split("\s{2,}",value.strip())
                if len(list_1) == 5 :
                    Bias_list = []
                    RX_power_list = []
                    TX_power_list = []
                    Bias_num_list = []
                    RX_power_num_list = []
                    TX_power_num_list = []
                    dict_value["Temp(Celsius)"] = list_1[0].strip()
                    dict_value["Voltage(V)"] = list_1[1].strip()
                    if re.match(".*\d+\.\d+(\(.*)",list_1[2].strip()):
                        Bias_value = re.match(".*\d+\.\d+(\(.*)",list_1[2].strip()).group(1).strip()
                        Bias_num = re.match("(.*\d+\.\d+)\(.*",list_1[2].strip()).group(1).strip()
                    else:
                        Bias_value = list_1[2].strip()
                        Bias_num = "NA"
                    if re.match(".*\d+\.\d+(\(.*)",list_1[3].strip()):
                        RX_power_value = re.match(".*\d+\.\d+(\(.*)",list_1[3].strip()).group(1).strip()
                        RX_power_num = re.match("(.*\d+\.\d+)\(.*", list_1[3].strip()).group(1).strip()
                    else:
                        RX_power_value = list_1[3].strip()
                        RX_power_num = "NA"
                    if re.match(".*\d+\.\d+(\(.*)",list_1[4].strip()):
                        TX_power_value = re.match(".*\d+\.\d+(\(.*)",list_1[4].strip()).group(1).strip()
                        TX_power_num = re.match("(.*\d+\.\d+)\(.*", list_1[4].strip()).group(1).strip()
                    else:
                        TX_power_value = list_1[4].strip()
                        TX_power_num = "NA"
                    Bias_list.append(Bias_value)
                    RX_power_list.append(RX_power_value)
                    TX_power_list.append(TX_power_value)
                    Bias_num_list.append(Bias_num)
                    RX_power_num_list.append(RX_power_num)
                    TX_power_num_list.append(TX_power_num)
                elif len(list_1) == 3 :
                    if re.match(".*\d+\.\d+(\(.*)",list_1[0].strip()):
                        Bias_value = re.match(".*\d+\.\d+(\(.*)",list_1[0].strip()).group(1).strip()
                        RX_power_num = re.match("(.*\d+\.\d+)\(.*", list_1[0].strip()).group(1).strip()
                    else:
                        Bias_value = list_1[0].strip()
                        Bias_num = "NA"
                    if re.match(".*\d+\.\d+(\(.*)",list_1[1].strip()):
                        RX_power_value = re.match(".*\d+\.\d+(\(.*)",list_1[1].strip()).group(1).strip()
                        RX_power_num = re.match("(.*\d+\.\d+)\(.*", list_1[1].strip()).group(1).strip()
                    else:
                        RX_power_value = list_1[1].strip()
                        RX_power_num = "NA"
                    if re.match(".*\d+\.\d+(\(.*)",list_1[2].strip()):
                        TX_power_value = re.match(".*\d+\.\d+(\(.*)",list_1[2].strip()).group(1).strip()
                        TX_power_num = re.match("(.*\d+\.\d+)\(.*", list_1[2].strip()).group(1).strip()
                    else:
                        TX_power_value = list_1[2].strip()
                        TX_power_num = "NA"
                    Bias_list.append(Bias_value)
                    RX_power_list.append(RX_power_value)
                    TX_power_list.append(TX_power_value)
                    Bias_num_list.append(Bias_num)
                    RX_power_num_list.append(RX_power_num)
                    TX_power_num_list.append(TX_power_num)
            elif flag_1 == 1 :
                if value.strip() != "":
                    Transceiver_list.append(value)
            elif flag_2 == 1:
                if ":" in value:
                    list_1 = value.strip().split()
                    dict_value[list_1[0].strip()] = list_1[1].strip()
                elif "Data Path State" in value:
                    show_list = []
                    show_list.append(value)
                    flag_3 = 1
                if flag_3 == 1 :
                    if value.strip() != "":
                        show_list.append(value)

        if len(show_list) != 0:
            show_2 = "\n".join(show_list)
            dict_value_2 = self.dut_show_autoget_blank_list(show_2,"Lane")
            for k,v in dict_value_2.items():
                dict_value[k] = v
        dict_value["Bias_list"] = Bias_list
        dict_value["RX_power_list"] = RX_power_list
        dict_value["TX_power_list"] = TX_power_list
        dict_value["Bias_num_list"] = Bias_num_list
        dict_value["RX_power_num_list"] = RX_power_num_list
        dict_value["TX_power_num_list"] = TX_power_num_list
        dict_value["Transceiver current alarm information"] = Transceiver_list
        return dict_value
    def dut_get_show_mpls_ldp_neighbor_vrf_word(self,show_info):
        return self.dut_get_show_mpls_ldp_neighbor(show_info)
    def dut_get_show_ip_ospf_sync(self,show_info):
        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_ipv6_ospf_sync(self,show_info):
        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_bgp_vpnv4_unicast_all(self,show_info):
        dict_value1 = {}
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*#.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        for value in show_info_list_line[:]:
            if "Route Distinguisher" in value:
                if re.match("Route Distinguisher:(.*)\((.*)\)",value):
                    obj_1 = re.match("Route Distinguisher:(.*)\((.*)\)",value)
                    obj_1_value_1 = obj_1.group(1).strip()
                    obj_1_value_2 = obj_1.group(2).strip()
                    dict_value1["Route Distinguisher"+"/"+obj_1_value_2] = obj_1_value_1
                    show_info_list_line.remove(value)
                elif re.match("Route Distinguisher:(.*)",value):
                    obj_1 = re.match("Route Distinguisher:(.*)",value)
                    obj_1_value_1 = obj_1.group(1).strip()
                    dict_value1["Route Distinguisher"] = obj_1_value_1
                    show_info_list_line.remove(value)
            if "Total number of prefixes" in value:
                obj_2 = re.match("Total number of prefixes (\d+)",value)
                obj_2_value_1 = obj_2.group(1).strip()
                dict_value1["Total number of prefixes"+"/"+obj_1_value_1] = obj_2_value_1
                total_num = value
                show_info_list_line.remove(value)
        show_info_list_line.append(total_num)
        show_info ="\n".join(show_info_list_line)
        dict_value2 = self.dut_get_bgp_network(show_info)
        dict_value =dict(dict_value1.items()+dict_value2.items())
        dict_value.pop("Total number of prefixes")
        return dict_value
    def dut_get_show_bgp_vpnv6_unicast_all(self,show_info):
        return self.dut_get_show_bgp_vpnv4_unicast_all(show_info)
    def dut_get_show_srp_ref_sidlist(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Name")
    def dut_get_show_srp_ref_bsidmpls(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Bind Sid")
    def dut_get_show_isis_segmentrouting_adjacencysid(self,show_info):
        return self.dut_show_autoget_blank_list(show_info,"adjacency-sid")
    def dut_get_show_queuebuffer_interface_dutport(self, show_info):
        """
        Function:show queue-buffer interface <dutport>回显解析函数
        CLI命令:show queue-buffer interface <dutport>
        回显信息示例:
N18K#show queue-buffer interface HundredGigabitEthernet 10/32
Interface HundredGigabitEthernet 10/32:
Slice 1:
Type       Queue  Used cells  Available cells  Usage  Usage warn limit  Usage warn count  Peaked cells
Unicast    1      0           114032           0%     0%                0                0
Unicast    2      0           114032           0%     0%                0                0
Unicast    3      0           114032           0%     0%                0                0
Unicast    4      0           114032           0%     0%                0                0
Unicast    5      0           114032           0%     0%                0                0
Unicast    6      0           114032           0%     0%                0                0
Unicast    7      0           114032           0%     0%                0                0
Unicast    8      0           114032           0%     0%                0                0
Multicast  1      0           14261            0%     0%                0                0
Multicast  2      0           14261            0%     0%                0                0
Multicast  3      0           14261            0%     0%                0                0
Multicast  4      0           14261            0%     0%                0                0
Multicast  5      0           14261            0%     0%                0                0
Multicast  6      0           14261            0%     0%                0                0
Multicast  7      0           14261            0%     0%                0                0
Multicast  8      0           14261            0%     0%                0                0
Slot   Slice  PortGroup  Total cells  Total usage  Usage warn limit  Static used cells  Global shared cells  Available shared cells
10     1      4          131072       0%           0%                0                  128277               128277

        Returns:
{'10/Slice': '1'
'2/Multicast/Usage warn limit': '0%'
'5/Unicast/Used cells': '0'
'7/Multicast/Used cells': '0'
'7/Unicast/Used cells': '0'
'5/Unicast/Usage warn count': '0'
'1/Unicast/Used cells': '0'
'2/Multicast/Usage': '0%'
'1/Multicast/Usage warn count': '0'
'5/Unicast/Usage': '0%'
'3/Multicast/Usage warn limit': '0%'
'Queue_list': ['1/Unicast'
'2/Unicast'
'3/Unicast'
'4/Unicast'
'5/Unicast'
'6/Unicast'
'7/Unicast'
'8/Unicast'
'1/Multicast'
'2/Multicast'
'3/Multicast'
'4/Multicast'
'5/Multicast'
'6/Multicast'
'7/Multicast'
'8/Multicast'], '2/Unicast/Available cells': '114032'
'7/Multicast/Usage': '0%'
'3/Unicast/Used cells': '0'
'2/Unicast/Used cells': '0'
'4/Unicast/Usage warn count': '0'
'3/Unicast/Available cells': '114032'
'2/Unicast/Usage': '0%'
'10/PortGroup': '4'
'7/Unicast/Available cells': '114032'
'3/Unicast/Usage': '0%'
'6/Multicast/Usage': '0%'
'4/Unicast/Peaked cells': '0'
'3/Multicast/Usage warn count': '0'
'5/Multicast/Peaked cells': '0'
'8/Multicast/Usage warn count': '0'
'10/Total usage': '0%'
'4/Unicast/Available cells': '114032'
'10/Global shared cells': '128277'
'7/Unicast/Usage warn count': '0'
'1/Unicast/Available cells': '114032'
'2/Unicast/Usage warn limit': '0%'
'6/Unicast/Used cells': '0'
'1/Unicast/Peaked cells': '0'
'3/Multicast/Peaked cells': '0'
'4/Multicast/Used cells': '0'
'3/Multicast/Available cells': '14261'
'10/Available shared cells': '128277'
'8/Multicast/Used cells': '0'
'3/Unicast/Usage warn limit': '0%'
'8/Unicast/Peaked cells': '0'
'10/Static used cells': '0'
'5/Unicast/Peaked cells': '0'
'1/Unicast/Usage warn count': '0'
'6/Unicast/Peaked cells': '0'
'6/Unicast/Available cells': '114032'
'4/Multicast/Peaked cells': '0'
'6/Multicast/Available cells': '14261'
'2/Unicast/Usage warn count': '0'
'5/Unicast/Available cells': '114032'
'7/Multicast/Peaked cells': '0'
'6/Unicast/Usage warn count': '0'
'8/Unicast/Available cells': '114032'
'3/Multicast/Usage': '0%'
'2/Multicast/Available cells': '14261'
'7/Unicast/Peaked cells': '0'
'8/Unicast/Usage warn count': '0'
'7/Unicast/Usage warn limit': '0%'
'4/Unicast/Used cells': '0'
'1/Multicast/Usage': '0%'
'6/Multicast/Usage warn limit': '0%'
'2/Multicast/Usage warn count': '0'
'1/Multicast/Peaked cells': '0'
'5/Unicast/Usage warn limit': '0%'
'2/Unicast/Peaked cells': '0'
'8/Multicast/Usage': '0%'
'3/Multicast/Used cells': '0'
'8/Multicast/Available cells': '14261'
'3/Unicast/Peaked cells': '0'
'4/Multicast/Usage warn limit': '0%'
'2/Multicast/Used cells': '0'
'Slot_list': ['10'], '1/Unicast/Usage': '0%'
'6/Multicast/Peaked cells': '0'
'5/Multicast/Usage': '0%'
'8/Multicast/Usage warn limit': '0%'
'8/Unicast/Used cells': '0'
'10/Total cells': '131072'
'5/Multicast/Usage warn limit': '0%'
'7/Multicast/Usage warn count': '0'
'10/Usage warn limit': '0%'
'3/Unicast/Usage warn count': '0'
'8/Unicast/Usage warn limit': '0%'
'8/Multicast/Peaked cells': '0'
'1/Unicast/Usage warn limit': '0%'
'5/Multicast/Available cells': '14261'
'4/Unicast/Usage': '0%'
'6/Multicast/Usage warn count': '0'
'4/Multicast/Usage warn count': '0'
'6/Multicast/Used cells': '0'
'4/Multicast/Available cells': '14261'
'2/Multicast/Peaked cells': '0'
'4/Multicast/Usage': '0%'
'8/Unicast/Usage': '0%'
'1/Multicast/Available cells': '14261'
'1/Multicast/Usage warn limit': '0%'
'1/Multicast/Used cells': '0'
'4/Unicast/Usage warn limit': '0%'
'6/Unicast/Usage warn limit': '0%'
'7/Multicast/Usage warn limit': '0%'
'5/Multicast/Used cells': '0'
'7/Multicast/Available cells': '14261'
'7/Unicast/Usage': '0%'
'6/Unicast/Usage': '0%'
'5/Multicast/Usage warn count': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show queue-buffer interface <dutport> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        if "Port Group" in show_info and "Slice" in show_info:
            show_info_list = self.dut_get_start_show_info(show_info)
            new_list = []
            flag = 0
            for value in show_info_list:
                if re.match("Slot (\d+) Port Group (\d+):", value):
                    flag = 1
                    if len(new_list) != 0:
                        new_show_info = "\n".join(new_list)
                        dict_value1 = self.dut_show_autoget_blank_list(new_show_info, "Queue", "Slot", "Type")
                        dict_value2 = self.dut_show_autoget_blank_list(new_show_info, "Slot")
                        dict_value3 = dict(dict_value1.items() + dict_value2.items())
                        for k, v in dict_value3.items():
                            dict_value[key_1 + "/" + k] = v
                    new_list = []
                    obj = re.match("Slot (\d+) Port Group (\d+):", value)
                    key_1 = obj.group(2)
                else:
                    if flag == 1:
                        if value.strip() != "":
                            new_list.append(value)
            if len(new_list) != 0:
                new_show_info = "\n".join(new_list)
                dict_value1 = self.dut_show_autoget_blank_list(new_show_info, "Queue", "Slot", "Type")
                dict_value2 = self.dut_show_autoget_blank_list(new_show_info, "Slot")
                dict_value3 = dict(dict_value1.items() + dict_value2.items())
                for k, v in dict_value3.items():
                    dict_value[key_1 + "/" + k] = v
        elif "Slice" in show_info and "Service pool Global shared cells" in " ".join(show_info.split()):
            show_info_list = self.dut_get_start_show_info(show_info)
            show_list_1 = []
            show_list_2 = []
            show_list_3 = []
            flag = 0
            for value in show_info_list:
                if " Queue " in value:
                    flag = 1
                elif "Service pool Global shared cells" in " ".join(value.split()):
                    flag = 2
                elif "Slot" in value:
                    flag = 3
                if flag == 1:
                    show_list_1.append(value)
                elif flag == 2:
                    show_list_2.append(value)
                elif flag == 3:
                    show_list_3.append(value)
            show_1 = "\n".join(show_list_1)
            show_2 = "\n".join(show_list_2)
            show_3 = "\n".join(show_list_3)
            dict_value1 = self.dut_show_autoget_blank_list(show_1, "Queue", value_title_2="Type")
            dict_value3 = self.dut_show_autoget_blank_list(show_2, "Service pool")
            dict_value2 = self.dut_show_autoget_blank_list(show_3, "Slot")
            dict_value = dict(dict_value1.items() + dict_value2.items() + dict_value3.items())
        elif "Slice" in show_info:
            dict_value1 = self.dut_show_autoget_blank_list(show_info, "Queue", "Slot", "Type")
            dict_value2 = self.dut_show_autoget_blank_list(show_info, "Slot")
            dict_value = dict(dict_value1.items() + dict_value2.items())
        else:
            dict_value1 = self.dut_show_autoget_blank_list(show_info, "Dev/slot", "Interface")
            dict_value2 = self.dut_show_autoget_blank_list(show_info, "Queue", value_title_2="Type")
            dict_value = dict(dict_value1.items() + dict_value2.items())
        return dict_value
    def dut_get_show_mpls_l2transport_vc_detail(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        for value in show_info_list:
            value = value.strip()
            if re.match("VC ID: (\d+) \(\S+\), Status: (\S+)",value):
                obj = re.match("VC ID: (\d+) \(\S+\), Status: (\S+)",value)
                key_1 = obj.group(1)
                dict_value[key_1+"/Status"] = obj.group(2)
            elif re.match("Local interface : (.*) \((\S+)\)",value):
                obj = re.match("Local interface : (.*) \((\S+)\)",value)
                dict_value[key_1 + "/Local interface"] = obj.group(1).strip()
                dict_value[key_1 + "/Local interface/status"] = obj.group(2).strip()
            elif re.match("VC type: (.*) VC mode: (.*)",value):
                obj = re.match("VC type: (.*) VC mode: (.*)",value)
                dict_value[key_1 + "/VC type"] = obj.group(1).strip()
                dict_value[key_1 + "/VC mode"] = obj.group(2).strip()
            elif " is " in value and "," not in value and ":" not in value:
                list_1 = value.split(" is ")
                dict_value[key_1 + "/"+list_1[0].strip()] = list_1[1].strip()
            elif re.match("Depend LSP info: nhlfe count \d+, install count \d+",value):
                obj = re.match("Depend LSP info: nhlfe count (\d+), install count (\d+)",value)
                dict_value[key_1 + "/Depend LSP info/nhlfe count"] = obj.group(1)
                dict_value[key_1 + "/Depend LSP info/install count"] = obj.group(2)
            elif re.match("Install: (.*), Output interface: (.*), imposed label stack { (.*) }",value):
                obj = re.match("Install: (.*), Output interface: (.*), imposed label stack { (.*) }",value)
                dict_value[key_1+"/Install"] = obj.group(1).strip()
                dict_value[key_1 + "/Output interface"] = obj.group(2).strip()
                dict_value[key_1 + "/imposed label stack"] = obj.group(3).strip()
            elif re.match("Create time: (.*), last change time: (.*), Up time: (.*)",value):
                obj = re.match("Create time: (.*), last change time: (.*), Up time: (.*)",value)
                dict_value[key_1 + "/Create time"] = obj.group(1).strip()
                dict_value[key_1 + "/last change time"] = obj.group(2).strip()
                dict_value[key_1 + "/Up time"] = obj.group(3).strip()
            elif ":" in value:
                list_2 = value.split(":")
                dict_value[key_1 + "/"+list_2[0].strip()] = list_2[1].strip()
        return dict_value
    def dut_get_show_mpls_l2transport_vc(self, show_info):
        """
        Function:show mpls l2transport vc回显解析函数
        CLI命令:show mpls l2transport vc
        回显信息示例:
Ruijie#show mpls l2transport vc

Local intf                Dest address    VC ID       Status
-----------               --------------- -------     ----------
Vl10                      3.3.3.3         1           down

        Returns:
{"3.3.3.3/Status": "down"
"3.3.3.3/Local intf": "Vl10"
"Dest address_list": ["3.3.3.3"], "3.3.3.3/VC ID": "1"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mpls l2transport vc | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info, "Dest address")
    def dut_get_show_mpls_l2transport_v(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info, "Local intf")
    def dut_get_show_macaddress_vsi_num(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info,"MAC Address")
    def dut_get_show_acl_capability_more(self,show_info):
        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_srv6_globalparameter(self,show_info):
        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_ip_rns_twamplight_statistics_all_testdelay(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        for value in show_info_list:
            if re.match("Test Session (.*) Delay Statistics:",value):
                obj = re.match("Test Session (.*) Delay Statistics:",value)
                key_1 = obj.group(1).strip()
            elif re.match("(.*):(.*)\s{10,}(.*):(.*)",value):
                obj_1 = re.match("(.*):(.*)\s{10,}(.*):(.*)",value)
                dict_value[key_1 + "/"+ obj_1.group(1).strip()] = obj_1.group(2).strip()
                dict_value[key_1 + "/" + obj_1.group(3).strip()] = obj_1.group(4).strip()
            elif re.match("(.*):(.*)",value):
                obj_2 = re.match("(.*):(.*)",value)
                dict_value[key_1 + "/" + obj_2.group(1).strip()] = obj_2.group(2).strip()
        return dict_value
    def dut_get_show_ip_rns_twamplight_statistics_all_testloss(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        for value in show_info_list:
            if re.match("Test Session (.*) Loss Statistics:", value):
                obj = re.match("Test Session (.*) Loss Statistics:", value)
                key_1 = obj.group(1).strip()
            elif re.match("(.*):(.*)\s{10,}(.*):(.*)", value):
                obj_1 = re.match("(.*):(.*)\s{10,}(.*):(.*)", value)
                dict_value[key_1 + "/" + obj_1.group(1).strip()] = obj_1.group(2).strip().strip("%")
                dict_value[key_1 + "/" + obj_1.group(3).strip()] = obj_1.group(4).strip().strip("%")
            elif re.match("(.*):(.*)", value):
                obj_2 = re.match("(.*):(.*)", value)
                dict_value[key_1 + "/" + obj_2.group(1).strip()] = obj_2.group(2).strip().strip("%")
        return dict_value
    def dut_get_show_ip_rns_twamplight_statistics_testsession_num_testdelay(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        for value in show_info_list:
            if re.match("(.*):(.*)\s{10,}(.*):(.*)", value):
                obj_1 = re.match("(.*):(.*)\s{10,}(.*):(.*)", value)
                dict_value[obj_1.group(1).strip()] = obj_1.group(2).strip()
                dict_value[obj_1.group(3).strip()] = obj_1.group(4).strip()
            elif re.match("(.*):(.*)", value):
                obj_2 = re.match("(.*):(.*)", value)
                dict_value[obj_2.group(1).strip()] = obj_2.group(2).strip()
        return dict_value
    def dut_get_show_ip_rns_twamplight_statistics_testsession_num_testloss(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        for value in show_info_list:
            if re.match("(.*):(.*)\s{10,}(.*):(.*)", value):
                obj_1 = re.match("(.*):(.*)\s{10,}(.*):(.*)", value)
                dict_value[obj_1.group(1).strip()] = obj_1.group(2).strip().strip("%")
                dict_value[obj_1.group(3).strip()] = obj_1.group(4).strip().strip("%")
            elif re.match("(.*):(.*)", value):
                obj_2 = re.match("(.*):(.*)", value)
                dict_value[obj_2.group(1).strip()] = obj_2.group(2).strip().strip("%")
        return dict_value
    def dut_get_show_ip_rns_twamplight_configuration_testsession_num(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if ":" in value:
                list_1 = value.split(":",1)
                dict_value[list_1[0].strip()] = list_1[1].strip()
        return dict_value
    def dut_get_show_ip_rns_twamplight_configuration_testsession_num_threshold(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if ":" in value:
                list_1 = value.split(":", 1)
                dict_value[list_1[0].strip()] = list_1[1].strip().strip("%")
        return dict_value
    def dut_get_show_ip_rns_twamplight_configuration_all(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        flag = 0
        for value in show_info_list:
            if "Session ID" in value and ":" in value:
                key_1 = value.split(":")[1].strip()
                flag = 1
            if flag == 1 :
                if ":" in value:
                    list_1 = value.split(":", 1)
                    dict_value[key_1 + "/" + list_1[0].strip()] = list_1[1].strip().strip("%")
        return dict_value
    def dut_get_show_ip_rns_twamplight_configuration_all_threshold(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        flag = 0
        for value in show_info_list:
            if "Session ID" in value and ":" in value:
                key_1 = value.split(":")[1].strip()
                flag = 1
            if flag == 1:
                if ":" in value:
                    list_1 = value.split(":", 1)
                    dict_value[key_1 + "/" + list_1[0].strip()] = list_1[1].strip().strip("%")
        return dict_value
    def dut_get_show_ip_rns_twamplightresponder_configuration_all(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        flag = 0
        for value in show_info_list:
            if "Session ID" in value and ":" in value:
                key_1 = value.split(":")[1].strip()
                flag = 1
            if flag == 1:
                if ":" in value:
                    list_1 = value.split(":", 1)
                    dict_value[key_1 + "/" + list_1[0].strip()] = list_1[1].strip().strip("%")
        return dict_value
    def dut_get_show_ip_rns_twamplightresponder_configuration_testsession_num(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if ":" in value:
                list_1 = value.split(":", 1)
                dict_value[list_1[0].strip()] = list_1[1].strip()
        return dict_value
    def dut_get_show_ip_rns_twamplight_operationalstate_all(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        flag = 0
        for value in show_info_list:
            if "Session ID" in value and ":" in value:
                key_1 = value.split(":")[1].strip()
                flag = 1
            if flag == 1:
                if ":" in value:
                    list_1 = value.split(":", 1)
                    dict_value[key_1 + "/" + list_1[0].strip()] = list_1[1].strip().strip("%")
        return dict_value
    def dut_get_show_ip_rns_twamplight_operationalstate_testsession_num(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if ":" in value:
                list_1 = value.split(":", 1)
                dict_value[list_1[0].strip()] = list_1[1].strip()
        return dict_value
    def dut_get_show_ip_rns_twamplight_operationalstate_brief(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if ":" in value:
                list_1 = value.split(":", 1)
                dict_value[list_1[0].strip()] = list_1[1].strip()
        return dict_value
    def dut_get_show_mac_other(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info,"MAC Address")
    def dut_get_show_grtd_configue_all(self,show_info):
        return self.dut_show_autoget_blank_list(show_info,"item",split_one=1)
    def dut_get_show_grtd_configue_all_detail(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        flag = 0
        for value in show_info_list:
            value = value.strip()
            if re.match("total amount:\d+",value):
                list_1 = value.split(":")
                dict_value[list_1[0].strip()] = list_1[1].strip()
                continue
            elif re.match("\d+> name:(.*)",value):
                list_2 = value.split(":")
                key_1 = list_2[1].strip()
                flag = 1
                continue
            if flag == 1:
                if "," in value :
                    list_3 = value.split(",")
                    for list_3_value in list_3:
                        if ":" in list_3_value:
                            list_1 = list_3_value.split(":")
                            dict_value[key_1+"/"+list_1[0].strip()] = list_1[1].strip().strip("m")
                elif ":" in value:
                    list_1 = value.split(":")
                    dict_value[key_1+"/"+list_1[0].strip()] = list_1[1].strip().strip("m")
        return dict_value
    def dut_get_show_smart_manager_policy_registered(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        for value in show_info_list:
            value = value.strip()
            if re.match("\d+\s+\S+\s+\S+\s+\S+",value):
                obj = re.match("\d+\s+(\S+)\s+(\S+)\s+(\S+)",value)
                key_1 = obj.group(1).strip()
                dict_value[key_1+"/Type"] = obj.group(2).strip()
                dict_value[key_1 + "/Event Type"] = obj.group(3).strip()
            elif re.match("\S+: timer: countdown time (\d+)",value):
                obj_2 = re.match("(\S+): timer: countdown time (\d+)",value)
                dict_value[key_1 + "/event_name"] = obj_2.group(1).strip()
                dict_value[key_1 + "/countdown time"] = obj_2.group(2).strip()
            elif re.match("action (.*) syslog msg \"(.*)\" priority (\d+)",value):
                obj_3 = re.match("action (.*) syslog msg \"(.*)\" priority (\d+)",value)
                dict_value[key_1 + "/action"] = obj_3.group(1).strip()
                dict_value[key_1 + "/action "+obj_3.group(1).strip() +"/syslog msg"] = obj_3.group(2).strip()
                dict_value[key_1 + "/action " + obj_3.group(1).strip()+"/priority"] = obj_3.group(3).strip()
        return dict_value
    def dut_get_show_smart_manager_policy_registered_statistics(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        for value in show_info_list:
            value = value.strip()
            if re.match("\d+\s+\S+\s+\S+\s+\S+", value):
                obj = re.match("\d+\s+(\S+)\s+(\S+)\s+(\S+)", value)
                key_1 = obj.group(1).strip()
                dict_value[key_1 + "/Type"] = obj.group(2).strip()
                dict_value[key_1 + "/Event Type"] = obj.group(3).strip()
            elif re.match("\S+: timer: countdown time (\d+)", value):
                obj_2 = re.match("(\S+): timer: countdown time (\d+)", value)
                dict_value[key_1 + "/event_name"] = obj_2.group(1).strip()
                dict_value[key_1 + "/countdown time"] = obj_2.group(2).strip()
            elif re.match("action (.*) syslog msg \"(.*)\" priority (\d+)", value):
                obj_3 = re.match("action (.*) syslog msg \"(.*)\" priority (\d+)", value)
                dict_value[key_1 + "/action"] = obj_3.group(1).strip()
                dict_value[key_1 + "/action " + obj_3.group(1).strip() + "/syslog msg"] = obj_3.group(2).strip()
                dict_value[key_1 + "/action " + obj_3.group(1).strip() + "/priority"] = obj_3.group(3).strip()
            elif str(value).count(":") == 1 :
                list_1 = value.split(":")
                dict_value[key_1 + "/" + list_1[0].strip()] = list_1[1].strip()

        return dict_value
    def dut_get_show_bgp_linkstate_linkstate_lsclient(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value_1 = {}
        show_list_1 = []
        flag = 0
        for value in show_info_list:
            if re.match("Link-State server is (.*)",value.strip()):
                obj_1 = re.match("Link-State server is (.*)",value.strip())
                dict_value_1["Link-State server"] = obj_1.group(1).strip()
            elif "Client-Name" in value:
                flag = 1
            elif "Total number of" in value:
                if re.match("(Total number of .*) (\d+)",value.strip()):
                    obj_2 = re.match("(Total number of .*) (\d+)",value.strip())
                    dict_value_1[obj_2.group(1).strip()] = obj_2.group(2).strip()
                flag = 0
            if flag == 1 :
                show_list_1.append(value)
        show_1 = "\n".join(show_list_1)
        dict_value_2 = self.dut_show_autoget_blank_list(show_1,"Client-Name")
        return dict(dict_value_1.items()+dict_value_2.items())
    def dut_get_show_grtd_status_all_detail(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        failed_messages_list = []
        key_failed_messages = ""
        flag = 0
        for value in show_info_list:
            value = value.strip()
            if re.match("total amount:\d+", value):
                list_1 = value.split(":")
                dict_value[list_1[0].strip()] = list_1[1].strip()
                continue
            elif re.match("\d+> name:(.*)", value):
                if len(failed_messages_list) != 0:
                    dict_value[key_1 + "/"+key_failed_messages] = failed_messages_list
                list_2 = value.split(":")
                key_1 = list_2[1].strip()
                flag = 0
                continue
            elif re.match("last \d+ failed messages:",value):
                key_failed_messages = value.split(":")[0].strip()
                failed_messages_list = []
                flag = 1
                continue
            elif ":" in value and str(value).count(":") == 1:
                list_1 = value.split(":")
                dict_value[key_1 + "/" + list_1[0].strip()] = list_1[1].strip()
            if flag == 1 :
                failed_messages_list.append(value)
        if len(failed_messages_list) != 0 and key_failed_messages != "":
                dict_value[key_1 + "/" + key_failed_messages] = failed_messages_list
        return dict_value
    def dut_get_show_bgp_l2vpn_evpn_all_ipprefix_detail(self,show_info):
        dict_value ={}
        show_info_list_line = self.dut_get_start_show_info(show_info)
        num = 0
        for value in show_info_list_line:
            if re.match("Route Distinguisher:(.*)\(Default for(.*)\)",value.strip()):
                obj1 = re.match("Route Distinguisher:(.*)\(Default for(.*)\)",value.strip())
                dict_value["Route Distinguisher"+str(num)] = obj1.group(1).strip()
                dict_value["Default for"] = obj1.group(2).strip()
                key_1 = obj1.group(1).strip()
                num = num + 1
            elif re.match("Route Distinguisher:(.*)",value.strip()):
                obj2 = re.match("Route Distinguisher:(.*)",value.strip())
                dict_value["Route Distinguisher" + str(num)] = obj2.group(1).strip()
                key_1 = obj2.group(1).strip()
                num = num + 1
            elif "BGP routing table entry" in value:
                list1 = value.split("for")
                title = key_1+"/"+list1[1].strip()
                #dict_value["BGP routing table entry for"] = title
            elif re.match("Origin incomplete, metric (\d+), localpref (\d+), weight (\d+), .*",value.strip()):
                obj = re.match("Origin incomplete, metric (\d+), localpref (\d+), weight (\d+), .*",value.strip())
                dict_value[title+"/metric"] = obj.group(1).strip()
                dict_value[title + "/localpref"] = obj.group(2).strip()
                dict_value[title + "/weight"] = obj.group(3).strip()
            elif re.match("Origin incomplete, metric (\d+), localpref (\d+),.*",value.strip()):
                obj = re.match("Origin incomplete, metric (\d+), localpref (\d+),.*",value.strip())
                dict_value[title + "/metric"] = obj.group(1).strip()
                dict_value[title + "/localpref"] = obj.group(2).strip()
            elif "Extended Community" in value:
                if "Router's MAC" in value:
                    if re.match("Extended Community:(.*) Encapsulation:(.*) Router's MAC:(.*)",value.strip()):
                        obj2 = re.match("Extended Community:(.*) Encapsulation:(.*) Router's MAC:(.*)",value.strip())
                        dict_value[title+"/"+"Extended Community"] = obj2.group(1).strip()
                        dict_value[title+"/"+"Encapsulation"] = obj2.group(2).strip()
                        dict_value[title+"/"+"Router's MAC"] = obj2.group(3).strip()
                else:
                    if re.match("Extended Community:(.*) RT:(.*) Encapsulation:(.*)",value.strip()):
                        obj2 = re.match("Extended Community:(.*) RT:(.*) Encapsulation:(.*)",value.strip())
                        dict_value[title+"/"+"Extended Community"] = obj2.group(1).strip()
                        dict_value[title+"/"+"RT"] = obj2.group(2).strip()
                        dict_value[title+"/"+"Encapsulation"] = obj2.group(3).strip()
                    elif re.match("Extended Community: RT:(\S+)",value.strip()):
                        obj2 = re.match("Extended Community: RT:(\S+)",value.strip())
                        dict_value[title+"/"+"RT"] = obj2.group(1).strip()
            elif re.match("ESI:(.*) label:(.*)",value.strip()):
                obj3 = re.match("ESI:(.*) label:(.*)",value.strip())
                dict_value[title+"/"+"ESI"] = obj3.group(1).strip()
                dict_value[title+"/"+"label"] = obj3.group(2).strip()
            elif re.match("ESI:(.*) in-label:(.*)",value.strip()):
                obj3 = re.match("ESI:(.*) in-label:(.*)",value.strip())
                dict_value[title+"/"+"ESI"] = obj3.group(1).strip()
                dict_value[title+"/"+"in-label"] = obj3.group(2).strip()
            elif "Total number of prefixes" in value:
                obj4 = re.match("Total number of prefixes(.*)",value.strip())
                dict_value["Total number of prefixes"] = obj4.group(1).strip()
            elif "," in value :
                list2 = value.split(",")
                for list2_value in list2 :
                    if list2_value.count(":") == 1 :
                        list3 = list2_value.split(":")
                        dict_value[title+"/"+list3[0].strip()] = list3[1].strip()
        return dict_value
    def dut_get_show_smart_manager_detector_all(self,show_info):
        return self.dut_show_autoget_blank_list(show_info,"Name")
    def dut_get_show_smart_manager_history_events(self,show_info):
        return self.dut_show_autoget_blank_list(show_info,"Job id")
    def dut_get_show_smart_manager_policy_all(self,show_info):
        return self.dut_show_autoget_blank_list(show_info,"Policy Name")
    def dut_get_show_mls_qos_status(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        flag_1 = 0
        dict_value = {}
        for value in show_info_list:
            if "IF TYPE:" in value:
                flag_1 = 1
            elif "QOSD QUEUE STATUS" in value or " ----------" in value:
                flag_1 = 0
            elif "dscp to cos:" in value or "dscp to exp:" in value :
                key_1 = value.split(":")[0].strip()
                flag_1 = 2
                continue
            if flag_1 == 0:
                if ":" in value:
                    list_1 = value.split(":",1)
                    dict_value[list_1[0].strip()] = list_1[1].strip()
                    if re.match("\d+\s+\d+\s+.*",list_1[1].strip()):
                        list_num = list_1[1].strip().split()
                        dict_value[list_1[0].strip()+"_list"] = list_num
            elif flag_1 == 1:
                if "IF TYPE:" in value:
                    key_1 = value.split(":")[1].strip()
                elif ":" in value:
                    list_1 = value.split(":", 1)
                    dict_value[key_1+"/"+list_1[0].strip()] = list_1[1].strip()
                    if re.match("\d+\s+\d+\s+.*",list_1[1].strip()):
                        list_num = list_1[1].strip().split()
                        dict_value[key_1+"/"+list_1[0].strip()+"_list"] = list_num
            elif flag_1 == 2 :
                if re.match("\d+\s+\d+.*",value.strip()):
                    list_2 = re.split(r'\s{5,}',value.strip())
                    for list_2_value in list_2:
                        list_3 = list_2_value.strip().split()
                        dict_value[key_1+"/"+list_3[0].strip()] = list_3[1].strip()
                elif ":" in value:
                    list_1 = value.split(":", 1)
                    dict_value[list_1[0].strip()] = list_1[1].strip()
                    flag_1 = 0
        return dict_value
    def dut_get_show_ip_route_vrf_word_bgp(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        ip_list = []
        for value in show_info_list:
            if re.match("Routing Table: (.*)",value):
                obj_1 = re.match("Routing Table: (.*)",value)
                dict_value["Routing Table"] = obj_1.group(1).strip()
            elif re.match("(.*) (\d+\.\d+\.\d+\.\d+/\d+ \[\d+/\d+\]) via (\d+\.\d+\.\d+\.\d+), .*",value):
                obj_1 = re.match("(.*) (\d+\.\d+\.\d+\.\d+/\d+ \[\d+/\d+\]) via (\d+\.\d+\.\d+\.\d+), .*",value)
                key_1 = obj_1.group(2).strip()
                ip_list.append(key_1)
                dict_value[key_1+"/code"] = obj_1.group(1).strip()
                dict_value[key_1 + "/via"] = obj_1.group(3).strip()
        dict_value["ip_list"] = ip_list
        return dict_value
    def dut_get_show_mpls_rib_vrf_word(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        new_list = []
        flag = 0
        dict_value_1 = {}
        for value in show_info_list:
            if re.match("\S+.*LSP\s+\d+",value.strip()):
                obj = re.match("(\S+.*LSP)\s+(\d+)",value.strip())
                dict_value_1[obj.group(1).strip()] = obj.group(2).strip()
            elif "FEC " in value:
                flag = 1
            if flag == 1 :
                if "-----" in value:
                    continue
                elif "FEC " in value:
                    value = "Status codes       FEC                     In/Out Label  In/Out IF                    Nexthop"
                else:
                    value = value.replace(" ","  ")
                new_list.append(value.strip())
        show_1 = "\n".join(new_list)
        dict_value_2 = self.dut_show_autoget_blank_list(show_1,"FEC")
        dict_value = dict(dict_value_1.items()+dict_value_2.items())
        return dict_value
    def dut_get_show_arp_detail_vxlan(self,show_info):
        return self.dut_get_show_arp_detail(show_info)
    def dut_get_show_grtd_status_all(self,show_info):
        return self.dut_show_autoget_blank_list(show_info,"item")
    def dut_get_show_upgrade_startupversion(self,show_info):
        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_ip_ospf_hide_bgpls_recordnlri_num_ip(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("Total number of .* \d+",value.strip()):
                obj = re.match("(Total number of .*) (\d+)",value.strip())
                dict_value[obj.group(1).strip()] = obj.group(2).strip()
            else:
                dict_value[value.strip()] = ""
        return dict_value
    def dut_get_show_ipv6_ospf_hide_bgpls_recordnlri_num_ip(self,show_info):
        return self.dut_get_show_ip_ospf_hide_bgpls_recordnlri_num_ip(show_info)
    def dut_get_show_bgp_vpnv4_unicast_vrf_word_ip(self, show_info):
        dict_value = {}
        show_list = self.dut_get_start_show_info(show_info)
        flag = 0
        list_2 = []
        for value in show_list:
            if re.match("BGP routing table entry for .*", value):
                obj = re.match("BGP routing table entry for (.*)/\d+", value)
                key_1 = obj.group(1).strip()
            elif re.match("\s+(\S+) \((\S*metric) (\d+)\) from (\S+).*", value):
                obj_2 = re.match("\s+(\S+) \((\S*metric) (\d+)\) from (\S+).*", value)
                key_2 = obj_2.group(1)
                dict_value[key_1 + "/" + key_2 + "/"+obj_2.group(2).strip()] = obj_2.group(3).strip()
                dict_value[key_1 + "/" + key_2 + "/metric"] = obj_2.group(3).strip()
                dict_value[key_1 + "/" + key_2 + "/from"] = obj_2.group(4).strip()
            elif re.match("\s+(\S+) from \S+ \((\d+\.\d+\.\d+\.\d+)\).*", value):
                obj_2 = re.match("\s+(\S+) from \S+ \((\d+\.\d+\.\d+\.\d+)\).*", value)
                key_2 = obj_2.group(1)
                dict_value[key_1 + "/" + key_2 + "/from"] = obj_2.group(2).strip()
            elif re.match("IGP instance id: (\d+)", value.strip()):
                obj_5 = re.match("IGP instance id: (\d+)", value.strip())
                dict_value[key_1 + "/" + key_2 + "/IGP instance id"] = obj_5.group(1).strip()
            elif re.match("Origin (.*), (\S*metric) (\d+), localpref (\d+), (\S+), (\S+), (\S+)", value.strip()):
                obj_3 = re.match("Origin (.*), (\S*metric) (\d+), localpref (\d+), (\S+), (\S+), (\S+)", value.strip())
                dict_value[key_1 + "/" + key_2 + "/Origin"] = obj_3.group(1).strip()
                dict_value[key_1 + "/" + key_2 + "/Origin/"+obj_3.group(2).strip()] = obj_3.group(3).strip()
                dict_value[key_1 + "/" + key_2 + "/Origin/metric"] = obj_3.group(3).strip()
                if "best" in value:
                    dict_value[key_1 + "/" + key_2 + "/Origin/optimized"] = "best"
            elif re.match("Origin (.*), (\S*metric) (\d+), localpref (\d+), (\S+), (\S+)", value.strip()):
                obj_3 = re.match("Origin (.*), (\S*metric) (\d+), localpref (\d+), (\S+), (\S+)", value.strip())
                dict_value[key_1 + "/" + key_2 + "/Origin"] = obj_3.group(1).strip()
                dict_value[key_1 + "/" + key_2 + "/Origin/" + obj_3.group(2).strip()] = obj_3.group(3).strip()
                dict_value[key_1 + "/" + key_2 + "/Origin/metric"] = obj_3.group(3).strip()
                if "best" in value:
                    dict_value[key_1 + "/" + key_2 + "/Origin/optimized"] = "best"
            elif re.match("Extended Community: (.*)", value.strip()):
                obj_4 = re.match("Extended Community: (.*)", value.strip())
                dict_value[key_1 + "/" + key_2 + "/Local IPv4 Router-ID"] = obj_4.group(1).strip()
                dict_value[key_1 + "/" + key_2 + "/Extended Community"] = obj_4.group(1).strip()
            elif re.match("Prefix-SID: (.*), Flags (.*), Endpoint Behavior (.*)", value.strip()):
                obj_4 = re.match("Prefix-SID: (.*), Flags (.*), Endpoint Behavior (.*)", value.strip())
                dict_value[key_1 + "/" + key_2 + "/Prefix-SID"] = obj_4.group(1).strip()
                dict_value[key_1 + "/" + key_2 + "/Flags"] = obj_4.group(2).strip()
                dict_value[key_1 + "/" + key_2 + "/Endpoint Behavior"] = obj_4.group(3).strip()
                if re.match("Prefix-SID: (.*) SID (.*), Flags (.*)", value.strip()):
                    obj_4 = re.match("Prefix-SID: (.*) SID (.*), Flags (.*)", value.strip())
                    dict_value[key_1 + "/" + key_2 + "/Prefix-SID/SID"] = obj_4.group(2).strip()
            elif re.match("Remote-Prefix-SID: (.*), Flags (.*), Endpoint Behavior (.*)", value.strip()):
                obj_4 = re.match("Remote-Prefix-SID: (.*), Flags (.*), Endpoint Behavior (.*)", value.strip())
                dict_value[key_1 + "/" + key_2 + "/Remote-Prefix-SID"] = obj_4.group(1).strip()
                dict_value[key_1 + "/" + key_2 + "/Flags"] = obj_4.group(2).strip()
                dict_value[key_1 + "/" + key_2 + "/Endpoint Behavior"] = obj_4.group(3).strip()
                if re.match("Remote-Prefix-SID: (.*) SSID (.*), Flags (.*)", value.strip()):
                    obj_4 = re.match("Remote-Prefix-SID: (.*) SSID (.*), Flags (.*)", value.strip())
                    dict_value[key_1 + "/" + key_2 + "/Remote-Prefix-SID/SSID"] = obj_4.group(2).strip()
            elif re.match("Originator: (.*), Cluster list: (.*)", value.strip()):
                obj_4 = re.match("Originator: (.*), Cluster list: (.*)", value.strip())
                dict_value[key_1 + "/" + key_2 + "/Originator"] = obj_4.group(1).strip()
                dict_value[key_1 + "/" + key_2 + "/Cluster list"] = obj_4.group(2).strip()
            elif re.match("RX ID: (.*), TX ID: (.*)", value.strip()):
                obj_4 = re.match("RX ID: (.*), TX ID: (.*)", value.strip())
                dict_value[key_1 + "/" + key_2 + "/IGP Metric-Bytes"] = obj_4.group(1).strip()
                dict_value[key_1 + "/" + key_2 + "/IGP Metric"] = obj_4.group(2).strip()
        return dict_value
    def dut_get_show_hideisis_route_all_ipv6(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}

        for value in show_info_list:
            if re.match("Area \d+:",value.strip()):
                obj = re.match("Area (\d+):",value.strip())
                key_1 = obj.group(1).strip()
            elif re.match("(.*)\s{1,}(\S+) \[(\d+)\]",value.strip()):
                obj_1 = re.match("(.*)\s{1,}(\S+) \[(\d+)\]",value.strip())
                key_2 = obj_1.group(2)
                dict_value[key_1+"/"+key_2+"/codes"] = obj_1.group(1).strip()
                dict_value[key_1 + "/" + key_2 + "/cost"] = obj_1.group(3).strip()
            elif re.match("via (\S+), (.*), (\S+)",value.strip()):
                obj_2 = re.match("via (\S+), (.*), (\S+)",value.strip())
                dict_value[key_1 + "/" + key_2 + "/via"] = obj_2.group(1).strip()
                dict_value[key_1 + "/" + key_2 + "/next_hop"] = obj_2.group(2).strip()
                dict_value[key_1 + "/" + key_2 + "/weight"] = obj_2.group(3).strip()
        return dict_value
    def dut_get_show_srv6_locator(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("locator (.*)",value.strip()):
                obj = re.match("locator (.*)",value.strip())
                key_1 = obj.group(1).strip()
            elif re.match("prefix (\S+ \d+) block (\d+) \S+ static (\d+) static-coc (\d+) args (\d+)",value.strip()):
                obj_1 = re.match("prefix (\S+ \d+) block (\d+) \S+ static (\d+) static-coc (\d+) args (\d+)",value.strip())
                dict_value[key_1 + "/prefix"] = obj_1.group(1).strip()
                dict_value[key_1 + "/block"] = obj_1.group(2).strip()
                dict_value[key_1 + "/static"] = obj_1.group(3).strip()
                dict_value[key_1 + "/static-coc"] = obj_1.group(4).strip()
                dict_value[key_1 + "/args"] = obj_1.group(5).strip()
            elif re.match("prefix (\S+ \d+) block (\d+) \S+ static (\d+) bind-sid (\d+) static-coc (\d+) args (\d+)",value.strip()):
                obj_1 = re.match("prefix (\S+ \d+) block (\d+) \S+ static (\d+) bind-sid (\d+) static-coc (\d+) args (\d+)",value.strip())
                dict_value[key_1 + "/prefix"] = obj_1.group(1).strip()
                dict_value[key_1 + "/block"] = obj_1.group(2).strip()
                dict_value[key_1 + "/static"] = obj_1.group(3).strip()
                dict_value[key_1 + "/bind-sid"] = obj_1.group(4).strip()
                dict_value[key_1 + "/static-coc"] = obj_1.group(5).strip()
                dict_value[key_1 + "/args"] = obj_1.group(6).strip()
            elif re.match("prefix (\S+ \d+) block (\d+) static (\d+) bind-sid (\d+) g-static (\d+)",value.strip()):
                obj_1 = re.match("prefix (\S+ \d+) block (\d+) static (\d+) bind-sid (\d+) g-static (\d+)",value.strip())
                dict_value[key_1 + "/prefix"] = obj_1.group(1).strip()
                dict_value[key_1 + "/block"] = obj_1.group(2).strip()
                dict_value[key_1 + "/static"] = obj_1.group(3).strip()
                dict_value[key_1 + "/bind-sid"] = obj_1.group(4).strip()
                dict_value[key_1 + "/g-static"] = obj_1.group(5).strip()
            elif re.match("prefix (\S+ \d+) static (\d+) bind-sid (\d+) args (\d+)",value.strip()):
                obj_1 = re.match("prefix (\S+ \d+) static (\d+) bind-sid (\d+) args (\d+)",value.strip())
                dict_value[key_1 + "/prefix"] = obj_1.group(1).strip()
                dict_value[key_1 + "/static"] = obj_1.group(2).strip()
                dict_value[key_1 + "/bind-sid"] = obj_1.group(3).strip()
                dict_value[key_1 + "/args"] = obj_1.group(4).strip()
            elif re.match("prefix (\S+ \d+) block (\d+) static (\d+) g-static (\d+)",value.strip()):
                obj_1 = re.match("prefix (\S+ \d+) block (\d+) static (\d+) g-static (\d+)",value.strip())
                dict_value[key_1 + "/prefix"] = obj_1.group(1).strip()
                dict_value[key_1 + "/block"] = obj_1.group(2).strip()
                dict_value[key_1 + "/static"] = obj_1.group(3).strip()
                dict_value[key_1 + "/g-static"] = obj_1.group(4).strip()
            elif re.match("prefix (\S+ \d+) block (\d+) coc32",value.strip()):
                obj_1 = re.match("prefix (\S+ \d+) block (\d+) coc32",value.strip())
                dict_value[key_1 + "/prefix"] = obj_1.group(1).strip()
                dict_value[key_1 + "/block"] = obj_1.group(2).strip()
            elif re.match("opcode (\S+) (end.*)  - SR\((\S+)\) (\S+)",value.strip()):
                obj = re.match("opcode (\S+) (end.*)  - SR\((\S+)\) (\S+)",value.strip())
                dict_value[key_1+"/"+obj.group(3).strip()+"/opcode"] = obj.group(1).strip()
                dict_value[key_1 + "/" + obj.group(3).strip() + "/end"] = obj.group(2).strip()
                dict_value[key_1 + "/" + obj.group(3).strip() + "/status"] = obj.group(4).strip()
            elif re.match("opcode \S+ (\S+) (end.*)  - SR\((\S+)\) (\S+)",value.strip()):
                obj = re.match("opcode \S+ (\S+) (end.*)  - SR\((\S+)\) (\S+)",value.strip())
                dict_value[key_1+"/"+obj.group(3).strip()+"/opcode"] = obj.group(1).strip()
                dict_value[key_1 + "/" + obj.group(3).strip() + "/end"] = obj.group(2).strip()
                dict_value[key_1 + "/" + obj.group(3).strip() + "/status"] = obj.group(4).strip()
            elif re.match("opcode (\S+) (end.*)  - SR\((\S+)\)",value.strip()):
                obj = re.match("opcode (\S+) (end.*)  - SR\((\S+)\)",value.strip())
                dict_value[key_1+"/"+obj.group(3).strip()+"/opcode"] = obj.group(1).strip()
                dict_value[key_1 + "/" + obj.group(3).strip() + "/end"] = obj.group(2).strip()
            elif " : " in value:
                list_1 = value.split(" : ")
                dict_value[key_1 + "/" + list_1[0].strip()] = list_1[1].strip()

        return dict_value
    def dut_get_show_bgp_l2vpn_evpn_all_updategroup(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        upgrade_group_list = []
        Format_state_list = []
        flag_1 = 0
        flag_2 = 0
        for value in show_info_list:
            if re.match("BGP version (\d+) update-group (\d+) \(VRF: \S+\), external, Address Family: (.*)",value.strip()):
                obj_1 = re.match("BGP version (\d+) update-group (\d+) \(VRF: \S+\), external, Address Family: (.*)",value.strip())
                key_1 = obj_1.group(2).strip()
                dict_value[key_1+"/BGP version"] = obj_1.group(1).strip()
                dict_value[key_1 + "/Address Family"] = obj_1.group(3).strip()
                upgrade_group_list.append(key_1)
                flag_2 = 0
            elif re.match("Update message formated (\d+), replicated (\d+)",value.strip()):
                obj_2 = re.match("Update message formated (\d+), replicated (\d+)",value.strip())
                dict_value[key_1 + "/Update message formated"] = obj_2.group(1).strip()
                dict_value[key_1 + "/replicated"] = obj_2.group(2).strip()
            elif re.match("Minimum route advertisement interval is (\d+) seconds",value.strip()):
                obj_3 = re.match("Minimum route advertisement interval is (\d+) seconds",value.strip())
                dict_value[key_1 + "/Minimum route advertisement interval"] = obj_3.group(1).strip()
            elif re.match("Minimum AS origination interval is (\d+) seconds",value.strip()):
                obj_3 = re.match("Minimum AS origination interval is (\d+) seconds", value.strip())
                dict_value[key_1 + "/Minimum AS origination interval"] = obj_3.group(1).strip()
            elif re.match("Advertise encap type (.*)",value.strip()):
                obj_3 = re.match("Advertise encap type (.*)", value.strip())
                dict_value[key_1 + "/Advertise encap type"] = obj_3.group(1).strip()
            elif re.match("Old peer count: (\d+)",value.strip()):
                obj_3 = re.match("Old peer count: (\d+)", value.strip())
                dict_value[key_1 + "/Old peer count"] = obj_3.group(1).strip()
            elif re.match("Format state: (.*)",value.strip()):
                obj_4 = re.match("Format state: (.*)", value.strip())
                Format_state_list = []
                Format_state_list.append(obj_4.group(1).strip())
                flag_1 = 1
                continue
            elif re.match("Has (\d+) members:",value.strip()):
                obj_5 = re.match("Has (\d+) members:",value.strip())
                dict_value[key_1 + "/Has members"] = obj_5.group(1).strip()
                dict_value["Format state"] = Format_state_list
                flag_1 = 0
                flag_2 = 1
                continue
            if flag_1 == 1:
                Format_state_list.append(value.strip())
            if flag_2 == 1:
                list_1 = value.strip().split()
                dict_value[key_1 + "/Has members list"] = list_1
        dict_value["upgrade_group_list"] = upgrade_group_list
        return dict_value
    def dut_get_show_bgp_vpnv4_unicast_all_updategroup(self,show_info):
        return self.dut_get_show_bgp_l2vpn_evpn_all_updategroup(show_info)
    def dut_get_show_bgp_vpnv6_unicast_all_updategroup(self,show_info):
        return self.dut_get_show_bgp_l2vpn_evpn_all_updategroup(show_info)
    def dut_get_show_issu_report(self,show_info):
        dict_value = {}
        show_info_list= self.dut_get_start_show_info(show_info)
        flag = 0
        for value in show_info_list:
            if "Upgrade procedure information" in value:
                flag = 1
                continue
            if flag == 0 :
                if ":" in value:
                    list_1 = value.split(":",1)
                    dict_value[list_1[0].strip()] = list_1[1].strip()
            else:
                if re.match("Slot (\S+) : (\S+)",value.strip()):
                    obj = re.match("Slot (\S+) : (\S+)",value.strip())
                    slot_num = obj.group(1).strip()
                    dict_value["Slot "+slot_num] = obj.group(2).strip()
                elif ":" in value:
                    list_1 = value.split(":", 1)
                    dict_value[slot_num+"/"+list_1[0].strip()] = list_1[1].strip()
        return dict_value
    def dut_get_show_bgp_vpnv6_unicast_vrf_word_ipv6mask(self,show_info):
        dict_value = {}
        show_list = self.dut_get_start_show_info(show_info)
        flag = 0
        list_2 = []
        for value in show_list:
            if re.match("BGP routing table entry for .*", value):
                obj = re.match("BGP routing table entry for (.*)/\d+", value)
                key_1 = obj.group(1).strip()
            elif re.match("\s+(\S+) \(\S*metric (\d+)\) from (\S+).*", value):
                obj_2 = re.match("\s+(\S+) \(\S*metric (\d+)\) from (\S+).*", value)
                key_2 = obj_2.group(1)
                dict_value[key_1 + "/" + key_2 + "/metric"] = obj_2.group(2).strip()
                dict_value[key_1 + "/" + key_2 + "/from"] = obj_2.group(3).strip()
            elif re.match("\s+(\S+) from \S+ \((\S+)\).*", value):
                obj_2 = re.match("\s+(\S+) from \S+ \((\S+)\).*", value)
                key_2 = obj_2.group(1)
                dict_value[key_1 + "/" + key_2 + "/from"] = obj_2.group(2).strip()
            elif re.match("IGP instance id: (\d+)", value.strip()):
                obj_5 = re.match("IGP instance id: (\d+)", value.strip())
                dict_value[key_1 + "/" + key_2 + "/IGP instance id"] = obj_5.group(1).strip()
            elif re.match("Origin (.*), \S*metric (\d+), localpref (\d+), (\S+), (\S+), (\S+)", value.strip()):
                obj_3 = re.match("Origin (.*), \S*metric (\d+), localpref (\d+), (\S+), (\S+), (\S+)", value.strip())
                dict_value[key_1 + "/" + key_2 + "/Origin"] = obj_3.group(1).strip()
                dict_value[key_1 + "/" + key_2 + "/Origin/metric"] = obj_3.group(2).strip()
                if "best" in value:
                    dict_value[key_1 + "/" + key_2 + "/Origin/optimized"] = "best"
            elif re.match("Origin (.*), \S*metric (\d+), localpref (\d+), (\S+), (\S+)", value.strip()):
                obj_3 = re.match("Origin (.*), \S*metric (\d+), localpref (\d+), (\S+), (\S+)", value.strip())
                dict_value[key_1 + "/" + key_2 + "/Origin"] = obj_3.group(1).strip()
                dict_value[key_1 + "/" + key_2 + "/Origin/metric"] = obj_3.group(2).strip()
                if "best" in value:
                    dict_value[key_1 + "/" + key_2 + "/Origin/optimized"] = "best"
            elif re.match("Extended Community: (.*)", value.strip()):
                obj_4 = re.match("Extended Community: (.*)", value.strip())
                dict_value[key_1 + "/" + key_2 + "/Local IPv4 Router-ID"] = obj_4.group(1).strip()
                dict_value[key_1 + "/" + key_2 + "/Extended Community"] = obj_4.group(1).strip()
            elif re.match("Prefix-SID: (.*), Flags (.*), Endpoint Behavior (.*)", value.strip()):
                obj_4 = re.match("Prefix-SID: (.*), Flags (.*), Endpoint Behavior (.*)", value.strip())
                dict_value[key_1 + "/" + key_2 + "/Prefix-SID"] = obj_4.group(1).strip()
                dict_value[key_1 + "/" + key_2 + "/Flags"] = obj_4.group(2).strip()
                dict_value[key_1 + "/" + key_2 + "/Endpoint Behavior"] = obj_4.group(3).strip()
                if re.match("Prefix-SID: (.*) SID (.*), Flags (.*)", value.strip()):
                    obj_4 = re.match("Prefix-SID: (.*) SID (.*), Flags (.*)", value.strip())
                    dict_value[key_1 + "/" + key_2 + "/Prefix-SID/SID"] = obj_4.group(2).strip()
            elif re.match("Remote-Prefix-SID: (.*), Flags (.*), Endpoint Behavior (.*)", value.strip()):
                obj_4 = re.match("Remote-Prefix-SID: (.*), Flags (.*), Endpoint Behavior (.*)", value.strip())
                dict_value[key_1 + "/" + key_2 + "/Remote-Prefix-SID"] = obj_4.group(1).strip()
                dict_value[key_1 + "/" + key_2 + "/Flags"] = obj_4.group(2).strip()
                dict_value[key_1 + "/" + key_2 + "/Endpoint Behavior"] = obj_4.group(3).strip()
                if re.match("Remote-Prefix-SID: (.*) SSID (.*), Flags (.*)", value.strip()):
                    obj_4 = re.match("Remote-Prefix-SID: (.*) SSID (.*), Flags (.*)", value.strip())
                    dict_value[key_1 + "/" + key_2 + "/Remote-Prefix-SID/SSID"] = obj_4.group(2).strip()
            elif re.match("Originator: (.*), Cluster list: (.*)", value.strip()):
                obj_4 = re.match("Originator: (.*), Cluster list: (.*)", value.strip())
                dict_value[key_1 + "/" + key_2 + "/Originator"] = obj_4.group(1).strip()
                dict_value[key_1 + "/" + key_2 + "/Cluster list"] = obj_4.group(2).strip()
            elif re.match("RX ID: (.*), TX ID: (.*)", value.strip()):
                obj_4 = re.match("RX ID: (.*), TX ID: (.*)", value.strip())
                dict_value[key_1 + "/" + key_2 + "/IGP Metric-Bytes"] = obj_4.group(1).strip()
                dict_value[key_1 + "/" + key_2 + "/IGP Metric"] = obj_4.group(2).strip()
        return dict_value
    def dut_get_show_bgp_l2vpn_evpn_all_ipprefix_ip_detail(self,show_info):
        dict_value ={}
        show_info_list_line = self.dut_get_start_show_info(show_info)
        num = 0
        for value in show_info_list_line:
            if re.match("Route Distinguisher:(.*)\(Default for(.*)\)",value.strip()):
                obj1 = re.match("Route Distinguisher:(.*)\(Default for(.*)\)",value.strip())
                dict_value["Route Distinguisher"+str(num)] = obj1.group(1).strip()
                dict_value["Default for"] = obj1.group(2).strip()
                key_1 = obj1.group(1).strip()
                num = num + 1
            elif re.match("Route Distinguisher:(.*)",value.strip()):
                obj2 = re.match("Route Distinguisher:(.*)",value.strip())
                dict_value["Route Distinguisher" + str(num)] = obj2.group(1).strip()
                key_1 = obj2.group(1).strip()
                num = num + 1
            elif re.match("BGP routing table entry for (\S+)/\d+",value.strip()):
                obj5 =  re.match("BGP routing table entry for (\S+)/\d+",value.strip())
                title = key_1 + "/" + obj5.group(1).strip()
            elif re.match("Origin incomplete, (\S*metric) (\d+), localpref (\d+), weight (\d+), .*",value.strip()):
                obj = re.match("Origin incomplete, (\S*metric) (\d+), localpref (\d+), weight (\d+), .*",value.strip())
                dict_value[title + "/"+obj.group(1).strip() ] = obj.group(2).strip()
                dict_value[title+"/metric"] = obj.group(2).strip()
                dict_value[title + "/localpref"] = obj.group(3).strip()
                dict_value[title + "/weight"] = obj.group(4).strip()
            elif re.match("Origin incomplete, (\S*metric) (\d+), localpref (\d+),.*",value.strip()):
                obj = re.match("Origin incomplete, (\S*metric) (\d+), localpref (\d+),.*",value.strip())
                dict_value[title + "/" + obj.group(1).strip()] = obj.group(2).strip()
                dict_value[title + "/metric"] = obj.group(2).strip()
                dict_value[title + "/localpref"] = obj.group(3).strip()
            elif re.match("Extended Community: RT:(\S+)",value.strip()):
                obj2 = re.match("Extended Community: RT:(\S+)",value.strip())
                dict_value[title+"/Extended Community/RT"] = obj2.group(1).strip()
            elif re.match("Import to VRF:(.*)",value.strip()):
                obj2 = re.match("Import to VRF:(.*)",value.strip())
                dict_value[title+"/Import to VRF"] = obj2.group(1).strip()
            elif re.match("Prefix-SID: (.*), Flags (.*), Endpoint Behavior (.*)", value.strip()):
                obj_4 = re.match("Prefix-SID: (.*), Flags (.*), Endpoint Behavior (.*)", value.strip())
                dict_value[title + "/Prefix-SID"] = obj_4.group(1).strip()
                dict_value[title + "/Flags"] = obj_4.group(2).strip()
                dict_value[title + "/Endpoint Behavior"] = obj_4.group(3).strip()
                if re.match("Prefix-SID: (.*) SID (.*), Flags (.*)", value.strip()):
                    obj_4 = re.match("Prefix-SID: (.*) SID (.*), Flags (.*)", value.strip())
                    dict_value[title + "/Prefix-SID/SID"] = obj_4.group(2).strip()
            elif re.match("Remote-Prefix-SID: (.*), Flags (.*), Endpoint Behavior (.*)", value.strip()):
                obj_4 = re.match("Remote-Prefix-SID: (.*), Flags (.*), Endpoint Behavior (.*)", value.strip())
                dict_value[title +  "/Remote-Prefix-SID"] = obj_4.group(1).strip()
                dict_value[title +  "/Flags"] = obj_4.group(2).strip()
                dict_value[title +  "/Endpoint Behavior"] = obj_4.group(3).strip()
                if re.match("Remote-Prefix-SID: (.*) SSID (.*), Flags (.*)", value.strip()):
                    obj_4 = re.match("Remote-Prefix-SID: (.*) SSID (.*), Flags (.*)", value.strip())
                    dict_value[title +  "/Remote-Prefix-SID/SSID"] = obj_4.group(2).strip()

            elif re.match("ESI: (\S+) GW IP: (\S+) label: (.*)",value.strip()):
                obj3 = re.match("ESI: (\S+) GW IP: (\S+) label: (.*)",value.strip())
                dict_value[title+"/"+"ESI"] = obj3.group(1).strip()
                dict_value[title + "/" + "GW IP"] = obj3.group(2).strip()
                dict_value[title+"/"+"label"] = obj3.group(3).strip()
            elif "Total number of prefixes" in value:
                obj4 = re.match("Total number of prefixes(.*)",value.strip())
                dict_value["Total number of prefixes"] = obj4.group(1).strip()
            elif "," in value :
                list2 = value.split(",")
                for list2_value in list2 :
                    if list2_value.count(":") == 1 :
                        list3 = list2_value.split(":")
                        dict_value[title+"/"+list3[0].strip()] = list3[1].strip()
        return dict_value
    def dut_get_show_bgp_l2vpn_evpn_all_ipprefix_ipv6_detail(self,show_info):
        return self.dut_get_show_bgp_l2vpn_evpn_all_ipprefix_ip_detail(show_info)
    def dut_get_show_card_voltage(self,show_info):
        dict_value_1 = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        show_list = []
        key_1 = ""
        len_id = -1
        for value in show_info_list:
            if re.match("Chassis-type: (.*)",value):
                obj = re.match("Chassis-type: (.*)",value)
                dict_value_1["Chassis-type"] = obj.group(1).strip()
                continue
            elif "------" in value or "(Volt)" in value:
                continue
            elif "SensorID" in value:
                len_id = len(value.strip().split())
            if len(value.strip().split()) == len_id:
                key_1 = value.strip().split()[0]
                show_list.append(value.strip())
            elif len(value.strip().split()) == len_id - 1:
                value = key_1 + "    " +value.strip()
                show_list.append(value.strip())
        show_1 = "\n".join(show_list)
        dict_value_2 = self.dut_show_autoget_blank_list(show_1,"Slot",value_title_2="SensorID")
        return dict(dict_value_1.items()+dict_value_2.items())
    def dut_get_show_cpu_slot(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("\[Slot (\S+): (.*), Cpu (\d+)\]",value.strip()):
                obj = re.match("\[Slot (\S+): (.*), Cpu (\d+)\]",value.strip())
                key_1 = obj.group(1).strip()
                dict_value[key_1 + "/slot_name"] = obj.group(2).strip()
                dict_value[key_1 + "/cpu"] = obj.group(3).strip()
            elif re.match("Five seconds: (.*)%, One minute: (.*)%, Five minutes: (.*)%\.",value.strip()):
                obj = re.match("Five seconds: (.*)%, One minute: (.*)%, Five minutes: (.*)%\.",value.strip())
                dict_value[key_1 + "/Five seconds" ] = obj.group(1).strip()
                dict_value[key_1 + "/One minute"] = obj.group(2).strip()
                dict_value[key_1 + "/Five minutes"] = obj.group(3).strip()
            elif re.match("Interval: (\d+) minutes, Avg: (.*)%, Max: (.*)%, Min: (.*)%\.",value.strip()):
                obj = re.match("Interval: (\d+) minutes, Avg: (.*)%, Max: (.*)%, Min: (.*)%\.",value.strip())
                dict_value[key_1 + "/Interval" ] = obj.group(1).strip()
                dict_value[key_1 + "/Avg"] = obj.group(2).strip()
                dict_value[key_1 + "/Max"] = obj.group(3).strip()
                dict_value[key_1 + "/Min"] = obj.group(4).strip()
        return dict_value
    def dut_get_show_mpls_te_segmentrouting_tunnel_num(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("primary: lsp-id: (\d+), reachable: (.*), sbfd: (.*)",value.strip()):
                obj = re.match("primary: lsp-id: (\d+), reachable: (.*), sbfd: (.*)",value.strip())
                dict_value["primary/lsp-id"] = obj.group(1).strip()
                dict_value["primary/reachable"] = obj.group(2).strip()
                dict_value["primary/sbfd"] = obj.group(3).strip()
            elif re.match("destination reachable: nexthop (\S+), outintf (.*)",value.strip()):
                obj = re.match("destination reachable: nexthop (\S+), outintf (.*)",value.strip())
                dict_value["destination reachable/nexthot"] = obj.group(1).strip()
                dict_value["destination reachable/outintf"] = obj.group(2).strip()
            elif "lsp encap:" in value:
                list_3 = value.split(":")
                dict_value[list_3[0].strip()] = list_3[1].strip()
            elif "," in value:
                list_1 = value.strip().split(",")
                for value_1 in list_1:
                    if ":" in value_1:
                        list_2 = value_1.split(":")
                        dict_value[list_2[0].strip()] = list_2[1].strip()
            elif ":" in value:
                list_2 = value.split(":")
                dict_value[list_2[0].strip()] = list_2[1].strip()
        return dict_value
    def dut_get_show_mpls_labelreach_detail(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("label: (\S+), ref count: (\d+), type (.*)",value.strip()):
                obj = re.match("label: (\S+), ref count: (\d+), type (.*)",value.strip())
                key_1 = obj.group(1).strip()
                dict_value[key_1+"/ref count"] =obj.group(2).strip()
                dict_value[key_1 + "/type"] = obj.group(3).strip()
            elif re.match("nexthop ecmp: (\d+)",value.strip()):
                obj = re.match("nexthop ecmp: (\d+)",value.strip())
                dict_value[key_1 + "/nexthop ecmp"] = obj.group(1).strip()
            elif re.match("(index \d+): (\S+), (.*)",value.strip()):
                obj = re.match("(index \d+): (\S+), (.*)",value.strip())
                dict_value[key_1 + "/" + obj.group(1).strip() +"/ip"] = obj.group(2).strip()
                dict_value[key_1 + "/" + obj.group(1).strip() + "/port"] = obj.group(3).strip()
            elif re.match("te-tunnel lsp tunnel-id: (\d+).*",value.strip()):
                obj = re.match("te-tunnel lsp tunnel-id: (\d+).*",value.strip())
                dict_value[key_1 + "/te-tunnel lsp tunnel-id"] = obj.group(1).strip()
        return dict_value
    def dut_get_show_ipv6_nd_snooping_binding_mac(self,show_info):
        return  self.dut_show_autoget_whippletree_form_analysis(show_info,"IPv6 address",ago_colon_last_str=1)
    def dut_get_show_segmentrouting_policy_srv6(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("global sbfd (\S+)\.",value):
                obj = re.match("global sbfd (\S+)\.",value)
                dict_value["global sbfd"] = obj.group(1).strip()
            elif re.match("path up time (.*), down time (.*)\.",value):
                obj_2 = re.match("path up time (.*), down time (.*)\.",value)
                dict_value["path up time"] = obj_2.group(1).strip()
                dict_value["down time"] = obj_2.group(2).strip()
            elif " is " in value:
                list_1 = value.split(" is ")
                dict_value[list_1[0].strip()] = list_1[1].strip().strip(".").strip("s")
            elif "," in value:
                list_2 = value.split(",")
                for value_2 in list_2:
                    if ":" in value_2:
                        list_3 = value_2.split(":",1)
                        dict_value[list_3[0].strip()] = list_3[1].strip().strip(".").strip("s")
            elif ":" in value:
                list_1 = value.split(":",1)
                dict_value[list_1[0].strip()] = list_1[1].strip().strip(".").strip("s")
        return dict_value
    def dut_get_show_redundancy_pairs(self,show_info):
        dict_value_1 = {}
        flag = 0
        flag_2 = 0
        flag_3 = 0
        local_list = []
        peer_list = []
        name_list = []
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if "name  " in value:
                flag = 1
                name_list = []
            elif "=================" in value:
                continue
            elif "total paired count" in value:
                flag = 0
                if ":" in value:
                    list_1 = value.split(":")
                    dict_value_1[list_1[0].strip()] = list_1[1].strip()
            elif "Local unpaired elements" in value:
                local_list = []
                flag_2 = 1
                continue
            elif "Peer unpaired elements" in value:
                peer_list = []
                flag_2 = 0
                flag_3 = 1
                continue
            if value.strip() == "":
                continue
            if flag == 1:
                name_list.append(value.strip())
            elif flag_2 == 1 :
                local_list.append(value.strip())
            elif flag_3 == 1 :
                peer_list.append(value.strip())
        if len(name_list) > 1 :
            show_1 = "\n".join(name_list)
            dict_value_2 = self.dut_show_autoget_blank_list(show_1,"name")
        else:
            dict_value_2 = {}
        dict_value_1["Local unpaired elements"] = local_list
        dict_value_1["Peer unpaired elements"] = peer_list
        return dict(dict_value_1.items()+dict_value_2.items())
    def dut_get_show_segmentrouting_policy_name_word(self,show_info):
        dict_value = {}
        path_id_list = []
        service_class_list = []
        flag = 0
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("(.*)path id:(\d+),(.*)",value):
                obj = re.match("(.*)path id:(\d+),(.*)",value)
                key_1 = obj.group(2).strip()
                flag = 1
                path_id_list.append(key_1)
                list_1 = obj.group(1).strip().split(",")
                for list_1_value in list_1:
                    if ":" in list_1_value:
                        list_2 = list_1_value.split(":")
                        dict_value[key_1+"/"+list_2[0].strip()] = list_2[1].strip().strip(".")
            elif flag == 1 and re.match("path is (.*), (.*), (.*)\.",value.strip()):
                obj = re.match("path is (.*), (.*), (.*)\.",value.strip())
                dict_value[key_1+"/path"] = obj.group(1).strip()
                dict_value[key_1 + "/status"] = obj.group(2).strip()
                dict_value[key_1 + "/select_status"] = obj.group(3).strip()
            elif flag == 1 and re.match("path up time (.*), down time (.*)\.",value.strip()):
                obj = re.match("path up time (.*), down time (.*)\.",value.strip())
                dict_value[key_1+"/path up time"] = obj.group(1).strip()
                dict_value[key_1 + "/down time"] = obj.group(2).strip()
            elif flag == 1 and "," in value:
                list_1 = value.split(",")
                for list_1_value in list_1:
                    if ":" in list_1_value:
                        list_2 = list_1_value.split(":")
                        dict_value[key_1+"/"+list_2[0].strip()] = list_2[1].strip().strip(".")
            elif flag == 1 and ":" in value:
                if ":" in value:
                    list_2 = value.split(":")
                    dict_value[key_1+"/"+list_2[0].strip()] = list_2[1].strip().strip(".")
            elif "," in value:
                list_1 = value.split(",")
                for list_1_value in list_1:
                    if ":" in list_1_value:
                        list_2 = list_1_value.split(":",1)
                        dict_value[list_2[0].strip()] = list_2[1].strip().strip(".")
            elif " is " in value:
                list_2 = value.split(" is ")
                dict_value[list_2[0].strip()] = list_2[1].strip().strip(".")
            elif ":" in value:
                list_2 = value.split(":")
                dict_value[list_2[0].strip()] = list_2[1].strip().strip(".")
            elif re.match("Encap mode (.*)\.",value.strip()):
                obj = re.match("Encap mode (.*)\.",value.strip())
                dict_value["Encap mode"] = obj.group(1).strip()
            elif re.match("global sbfd (.*)\.",value.strip()):
                obj = re.match("global sbfd (.*)\.",value.strip())
                dict_value["global sbfd"] = obj.group(1).strip()
            elif re.match("service-class \d+ color \S+ bsid \S+",value.strip()):
                obj = re.match("service-class (\d+) color (\S+) bsid (\S+)",value.strip())
                service_class_list.append(obj.group(1).strip())
                dict_value[obj.group(1).strip()+"/color"] = obj.group(2).strip()
                dict_value[obj.group(1).strip() + "/bsid"] = obj.group(3).strip()
        dict_value["service_class_list"]  = service_class_list
        return dict_value
    def dut_get_show_mka_session_interface_dutport_verbose(self,show_info):
        dict_value = {}
        peer_list = []
        flag = 0
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if ": " in value:
                list_1 = value.split(": ")
                dict_value[list_1[0].strip()] = list_1[1].strip()
            elif len(str(value).split()) == 5:
                if " Rx-SCI" in value:
                    flag = flag + 1
                    if flag > 1:
                        continue
                peer_list.append(value)
        if len(peer_list) > 1:
            show_1 = "\n".join(peer_list)
            dict_value_2 = self.dut_show_autoget_blank_list(show_1,"MI")
        else:
            dict_value_2 = {}
        return dict(dict_value.items()+dict_value_2.items())
    def dut_get_show_macsec_info_interface_dutport_verbose(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        key_1 = ""
        for value in show_info_list:
            if "Transmit secure channel" in value:
                key_1 = "Transmit secure channel"
                continue
            elif "Receive secure channel" in value:
                key_1 = "Receive secure channel"
                continue
            if ": " in value :
                list_1 = value.split(": ")
                if key_1 == "":
                    dict_value[list_1[0].strip()] = list_1[1].strip()
                else:
                    dict_value[key_1+"/"+list_1[0].strip()] = list_1[1].strip()
        return dict_value
    def dut_get_show_mka_statistics_interface_dutport(self,show_info):
        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_macsec_statistics_interface_dutport(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        key_1 = ""
        for value in show_info_list:
            if "Received" in value:
                key_1 = "Received"
                continue
            elif "Transmited" in value:
                key_1 = "Transmited"
                continue
            if ": " in value :
                list_1 = value.split(": ")
                if key_1 == "":
                    dict_value[list_1[0].strip()] = list_1[1].strip()
                else:
                    dict_value[key_1+"/"+list_1[0].strip()] = list_1[1].strip()
        return dict_value
    def dut_get_show_macaddresstable_count_interface_dutport(self,show_info):
        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_mpls_l2transport_vc_count(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("UP VC count: (\d+)\(vpls: (\d+), vpws: (\d+)\)",value):
                obj = re.match("UP VC count: (\d+)\(vpls: (\d+), vpws: (\d+)\)",value)
                dict_value["UP VC count"] = obj.group(1)
                dict_value["UP VC count/vpls"] = obj.group(2)
                dict_value["UP VC count/vpws"] = obj.group(3)
            elif re.match("DOWN VC count: (\d+)\(vpls: (\d+), vpws: (\d+)\)",value):
                obj = re.match("DOWN VC count: (\d+)\(vpls: (\d+), vpws: (\d+)\)",value)
                dict_value["DOWN VC count"] = obj.group(1)
                dict_value["DOWN VC count/vpls"] = obj.group(2)
                dict_value["DOWN VC count/vpws"] = obj.group(3)
            elif ": " in value:
                list_1 = value.split(": ")
                dict_value[list_1[0].strip()] = list_1[1].strip()
        return dict_value
    def dut_get_show_mpls_ldp_master(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if " is " in value:
                list_1 = value.split(" is ")
                dict_value[list_1[0].strip()] = list_1[1].strip()
            elif ":" in value:
                list_1 = value.split(":")
                dict_value[list_1[0].strip()] = list_1[1].strip()
            elif re.match("(.* num) (\d+)",value.strip()):
                obj = re.match("(.* num) (\d+)",value.strip())
                dict_value[obj.group(1).strip()] = obj.group(2).strip()
        return dict_value
    def dut_get_show_evpn_detail(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        RT_list = []
        for value in show_info_list:
            if re.match("EVI (\S+), RD (.*)",value.strip()):
                if len(RT_list) > 0 :
                    dict_value[key_1 + "/RT_list"] = RT_list
                RT_list = []
                obj = re.match("EVI (\S+), RD (.*)",value.strip())
                key_1 = obj.group(1).strip()
                dict_value[key_1 + "/RD"] = obj.group(2).strip()
            elif re.match("RT: (\S+)",value.strip()):
                obj = re.match("RT: (\S+)",value.strip())
                RT_list.append(obj.group(1).strip())
            elif re.match("(.*): (\S+)\Z",value.strip()):
                obj = re.match("(.*): (\S+)",value.strip())
                dict_value[key_1+"/"+obj.group(1).strip()] = obj.group(2).strip()
            elif re.match("(.*): Total (\d+), Local (\d+), Remote (\d+)",value.strip()):
                obj = re.match("(.*): Total (\d+), Local (\d+), Remote (\d+)",value.strip())
                dict_value[key_1 + "/"+obj.group(1).strip()+"/Total"] = obj.group(2).strip()
                dict_value[key_1 + "/" + obj.group(1).strip() + "/Local"] = obj.group(3).strip()
                dict_value[key_1 + "/" + obj.group(1).strip() + "/Remote"] = obj.group(4).strip()
        dict_value[key_1 + "/RT_list"] = RT_list
        return dict_value
    def dut_get_show_netconf_authorization_username_word_rulelist_detail(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        new_show_list = []
        key_1 = ""
        flag = 0
        rule_list = []
        for value in show_info_list:
            if "-----------------" in value or "[R:Read C:Create" in value or value.strip() == "":
                pass
            elif "RuleList:" in value:
                list_1 = value.split(":")
                key_1 = list_1[1].strip()
                rule_list.append(key_1)
            elif "AccessOperation" in value:
                if flag == 0:
                    new_show_list.append(value.strip())
                    flag = 1
            else:
                if len(value.strip().split()) == 4:
                    value = value +"    NA"
                new_show_list.append(key_1+"/"+value.strip())
        show_info_1 =  "\n".join(new_show_list)
        dict_value = self.dut_show_autoget_blank_list(show_info_1,"Rule")
        dict_value_1 = {}
        for k,v in dict_value.items():
            if v == "NA":
                dict_value_1[k] = ""
            else:
                dict_value_1[k] = v
        dict_value_1["Rule_list"] = rule_list
        return dict_value_1
    def dut_get_show_ip_deny_nullscan(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Interface")
    def dut_get_show_ip_defense_icmpflood(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info, "Interface")
    def dut_get_show_ip_defense_synflood(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info, "Interface")
    def dut_get_show_interfaces_dutport_counters(self,show_info):
        dict_value = {}
        key_1 = None
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("10 seconds input rate  :(\d+) bits/sec, (\d+) packets/sec",value.strip()):
                obj = re.match("10 seconds input rate  :(\d+) bits/sec, (\d+) packets/sec",value.strip())
                dict_value["10 seconds input rate/bits/sec"] = obj.group(1).strip()
                dict_value["10 seconds input rate/packets/sec"] = obj.group(2).strip()
            elif re.match("10 seconds output rate  :(\d+) bits/sec, (\d+) packets/sec",value.strip()):
                obj = re.match("10 seconds output rate  :(\d+) bits/sec, (\d+) packets/sec",value.strip())
                dict_value["10 seconds output rate/bits/sec"] = obj.group(1).strip()
                dict_value["10 seconds output rate/packets/sec"] = obj.group(2).strip()
            elif re.match("Packet increment in last sampling interval\((\d+) milliseconds\):",value.strip()):
                obj = re.match("Packet increment in last sampling interval\((\d+) milliseconds\):",value.strip())
                dict_value["Packet increment in last sampling interval"] = obj.group(1).strip()
                key_1 = "last sampling interval"
            elif re.match("(.*)\s+: (\d+) \(Unicast: (\d+)%, Multicast: (\d+)%, Broadcast: (\d+)%\)",value.strip()):
                obj = re.match("(.*)\s+: (\d+) \(Unicast: (\d+)%, Multicast: (\d+)%, Broadcast: (\d+)%\)",value.strip())
                if key_1:
                    dict_value[key_1 + "/" + obj.group(1).strip()] = obj.group(2).strip()
                    dict_value[key_1 + "/" + obj.group(1).strip()+"/Unicast"] = obj.group(3).strip()
                    dict_value[key_1 + "/" + obj.group(1).strip() + "/Multicast"] = obj.group(4).strip()
                    dict_value[key_1 + "/" + obj.group(1).strip() + "/Broadcast"] = obj.group(5).strip()
                else:
                    dict_value[obj.group(1).strip()] = obj.group(2).strip()
                    dict_value[obj.group(1).strip() + "/Unicast"] = obj.group(3).strip()
                    dict_value[obj.group(1).strip() + "/Multicast"] = obj.group(4).strip()
                    dict_value[obj.group(1).strip() + "/Broadcast"] = obj.group(5).strip()
            elif str(value).count(":") == 1 :
                list_1 = value.split(":")
                if key_1:
                    dict_value[key_1 + "/" + list_1[0].strip()] = list_1[1].strip().strip("%")
                else:
                    dict_value[list_1[0].strip()] = list_1[1].strip().strip("%")
        return dict_value
    def dut_get_show_ntp_broadcastserver(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info,"ntp-broadcast-server")
    def dut_get_show_ntp_peer(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info, "ntp-peer")
    def dut_get_show_ipv6_dhcp_snooping_binding_mac(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info, "MAC Address", ago_colon_last_str=1)
    def dut_get_show_ipsec_proposal_word(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("ipsec proposal name (\S+)\(len (\d+)\), ref (\d+)",value):
                obj = re.match("ipsec proposal name (\S+)\(len (\d+)\), ref (\d+)",value)
                dict_value["ipsec proposal name"] = obj.group(1).strip()
                key_1 = obj.group(1).strip()
                dict_value[key_1 + "/len"] = obj.group(2).strip()
                dict_value[key_1 + "/ref"] = obj.group(3).strip()
            elif re.match("ESP protocol: authentication (.*), encryption (.*)",value.strip()):
                obj = re.match("ESP protocol: authentication (.*), encryption (.*)",value.strip())
                dict_value["ESP protocol/authentication"] = obj.group(1).strip()
                dict_value["ESP protocol/encryption"] = obj.group(2).strip()
            elif ":" in value:
                list_1 = value.split(":")
                dict_value[list_1[0].strip()] =list_1[1].strip()
        return dict_value
    def dut_get_show_ipsec_manual_sa_word(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("ip security association name (\S+)\(len (\d+)\), ref (\d+)", value):
                obj = re.match("ip security association name (\S+)\(len (\d+)\), ref (\d+)", value)
                dict_value["ip security association name"] = obj.group(1).strip()
                key_1 = obj.group(1).strip()
                dict_value[key_1+"/len"] = obj.group(2).strip()
                dict_value[key_1+"/ref"] = obj.group(3).strip()
            elif re.match("ESP protocol: authentication (.*), encryption (.*)", value.strip()):
                obj = re.match("ESP protocol: authentication (.*), encryption (.*)", value.strip())
                dict_value["ESP protocol/authentication"] = obj.group(1).strip()
                dict_value["ESP protocol/encryption"] = obj.group(2).strip()
            elif ":" in value:
                list_1 = value.split(":")
                dict_value[list_1[0].strip()] = list_1[1].strip()
        return dict_value
    def dut_get_show_nfpp_ipguard_hosts_statistics(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        key_list = []
        for value in show_info_list:
            if "---" in value:
                pass
            elif len(value.strip().split()) == 3:
                if "Success" in value :
                    key_list = value.strip().split()
                else:
                    value_list = value.strip().split()
                    break
        dict_value = {}
        for i in range(len(key_list)):
            dict_value[key_list[i].strip()] = value_list[i].strip()
        return dict_value
    def dut_get_queuebuffer_interface_dutport(self,show_info):
        dict_value = {}
        varDict = locals()
        show_info_list = self.dut_get_start_show_info(show_info)
        flag = 0
        flag_slot = 0
        id = 0
        for value in show_info_list:
            if " PortGroup " in value or "Port-group" in value:
                slot_title_list = re.split(r'\s{2,}',value.strip())
                flag = 0
                flag_slot = 1
                continue
            elif " Queue " in value:
                title_list = re.split(r'\s{2,}',value.strip())
                for value_1 in title_list:
                    varDict[str(value_1)+"_list"] = []
                flag = 1
                flag_slot = 0
                id = 0
                continue
            if flag == 1 :
                id = id + 1
                value_list = re.split(r'\s{2,}', value.strip())
                for i in range(len(value_list)):
                    varDict[str(title_list[i]) + "_list"].append(value_list[i].strip("%"))

                list_voq = value.strip().split()
                list_voq_tmp = []
                for value in list_voq:
                    list_voq_tmp.append(value.strip("%"))
                # type_id = list_voq[0].strip()
                # queue_id = list_voq[1].strip()
                # dict_value[type_id + "_" + queue_id] = list_voq_tmp
                dict_value[str(id) + "_line"] = list_voq_tmp
            elif flag_slot == 1:
                slot_value_list = re.split(r'\s{2,}', value.strip())
                for i in range(len(slot_value_list)):
                    dict_value[slot_title_list[i]] = slot_value_list[i].strip("%")
                flag_slot = 0
        for value_1 in title_list:
            dict_value[str(value_1) + "_list"] = varDict[str(value_1) + "_list"]
        return dict_value
    def dut_get_show_interfaces_dutport_troubleshooting(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Interface")
    def dut_get_show_accesslists_num(self,show_info):
        dict_value = {}
        show_info_list_line = self.dut_get_start_show_info(show_info)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        key = show_info_list_line[0]
        key_tmp = key.strip().split()[-1]
        value=[]
        for line in show_info_list_line[1:]:
            if re.match("(\S+)\s+.*\((\d+) matchs\)",line.strip()):
                obj = re.match("(\S+)\s+.*\((\d+) matchs\)",line.strip())
                dict_value[key_tmp+"/"+obj.group(1)+"/matchs"] = obj.group(2)
            elif re.match("\((\d+) packets filtered\)",line.strip()):
                obj = re.match("\((\d+) packets filtered\)",line.strip())
                dict_value[key_tmp+"/packets filtered"] = obj.group(1)
            value = value + [line.strip()]
        dict_value[key] = value
        return dict_value
    def dut_get_show_accesslists_word(self,show_info):
        return self.dut_get_show_accesslists_num(show_info)
    def dut_get_show_pgbuffer_interface_dutport(self,show_info):
        dict_value = {}
        new_list = []
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if "PriGroupId" in value and "headroom" in value:
                if len(new_list) > 1:
                    show_1 = "\n".join(new_list)
                    dict_value_1 = self.dut_show_autoget_blank_list(show_1,"PriGroupId")
                    dict_value = dict(dict_value.items() + dict_value_1.items())
                new_list = []
                new_list.append(value)
            elif re.match("Service pool .*",value):
                if len(new_list) > 1:
                    show_1 = "\n".join(new_list)
                    dict_value_tmp = self.dut_show_autoget_blank_list(show_1,"PriGroupId")
                    dict_value_1 = {}
                    for k,v in dict_value_tmp.items():
                        dict_value_1["headroom/"+k] = v
                    dict_value = dict(dict_value.items() + dict_value_1.items())
                new_list = []
                new_list.append(value)
            elif "Slot" in value:
                if len(new_list) > 1:
                    show_1 = "\n".join(new_list)
                    dict_value_1 = self.dut_show_autoget_blank_list(show_1,"Service pool")
                    dict_value = dict(dict_value.items() + dict_value_1.items())
                new_list = []
                new_list.append(value)
            else:
                new_list.append(value)
        if len(new_list) > 1:
            show_1 = "\n".join(new_list)
            dict_value_1 = self.dut_show_autoget_blank_list(show_1, "Slot")
            dict_value = dict(dict_value.items() + dict_value_1.items())
        dict_value_all = {}
        for k,v in dict_value.items():
            if "str" in str(type(v)):
                dict_value_all[k] = v.strip("%")
            else:
                dict_value_all[k] = v
        return dict_value_all
    def dut_get_show_interface_counters_errors_up(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        new_list = []
        dict_value = {}
        for value in show_info_list:
            if "Interface" in value :
                if len(new_list) >= 3:
                    show_1 = "\n".join(new_list)
                    dict_value_1 = self.dut_show_autoget_whippletree_form_analysis(show_1,"Interface")
                    dict_value = dict(dict_value.items()+dict_value_1.items())
                new_list = []
                new_list.append(value)
            else:
                new_list.append(value)
        if len(new_list) >= 3:
            show_1 = "\n".join(new_list)
            dict_value_1 = self.dut_show_autoget_whippletree_form_analysis(show_1, "Interface")
            dict_value = dict(dict_value.items() + dict_value_1.items())
        return dict_value
    def dut_get_show_loadbalanceprofile_default(self,show_info):
        dict_value = {}
        flag = 0
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if "Hash Field" in value:
                flag = 1
                continue
            elif "Load-balance-profile:" in value:
                list_1 = value.split(":", 1)
                dict_value[list_1[0].strip()] = list_1[1].strip()
            if flag == 1 :
                if ":" in value:
                    list_1 = value.split(":",1)
                    dict_value[list_1[0].strip()] =list_1[1].strip().split()
        return dict_value
    def dut_get_show_mpls_ldp_parameters(self,show_info):
        dict_value={}
        show_info_list_line = self.dut_get_start_show_info(show_info)
        for list_value in show_info_list_line:
            if re.match(".*:.*",list_value) :
                list_value_split = list_value.split (":",1)   #以冒号分割一次
                key_name = '%s'%(list_value_split[0].lstrip().rstrip().replace("\r",""))
                dict_value[key_name] = list_value_split[1].lstrip().rstrip().replace("\r","").replace(" sec","").strip()
        #print u"------》解析结果："
        #print dict_value
        return dict_value
    def dut_get_show_interfaces_usage(self,show_info):
        dict_value_1 = self.dut_show_autoget_whippletree_form_analysis(show_info,"Interface")
        dict_value = {}
        for k,v in dict_value_1.items():
            try:
                dict_value[k] = str(v).replace("%","").replace("Mbit","").strip()
            except:
                dict_value[k] = v
        return dict_value
    def dut_get_show_mpls_ldp_nsr(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if ":" in value:
                list_1 = value.split(":")
                dict_value[list_1[0].strip()] = list_1[1].strip()
        return dict_value
    def dut_get_show_ip_flow_cache_statistic_dev_num_slot_num(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            value = value.strip()
            if re.match("(IPV4 Flow) Switching Cache, (\d+) bytes",value):
                obj = re.match("(IPV4 Flow) Switching Cache, (\d+) bytes",value)
                dict_value["bytes"] = obj.group(2).strip()
            elif re.match("(\S+) active, (\S+) inactive, (\S+) added",value):
                obj = re.match("(\S+) active, (\S+) inactive, (\S+) added",value)
                dict_value["active"] = obj.group(1).strip()
                dict_value["inactive"] = obj.group(2).strip()
                dict_value["added"] = obj.group(3).strip()
            elif re.match("(\S+) flow alloc failures",value):
                obj = re.match("(\S+) flow alloc failures",value)
                dict_value["flow alloc failures"] = obj.group(1).strip()
            elif re.match("(\S+) displayed",value):
                obj = re.match("(\S+) displayed",value)
                dict_value["displayed"] = obj.group(1).strip()
            elif re.match("Last clearing of statistics (\S+) Days (\S+)",value):
                obj = re.match("Last clearing of statistics (\S+) Days (\S+)",value)
                dict_value["Last clearing of statistics/Days"] = obj.group(1).strip()
        return dict_value
    def dut_get_show_ipv6_flow_cache_statistic_dev_num_slot_num(self, show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            value = value.strip()
            if re.match("(IPV6 Flow) Switching Cache, (\d+) bytes", value):
                obj = re.match("(IPV4 Flow) Switching Cache, (\d+) bytes", value)
                dict_value["bytes"] = obj.group(2).strip()
            elif re.match("(\S+) active, (\S+) inactive, (\S+) added", value):
                obj = re.match("(\S+) active, (\S+) inactive, (\S+) added", value)
                dict_value["active"] = obj.group(1).strip()
                dict_value["inactive"] = obj.group(2).strip()
                dict_value["added"] = obj.group(3).strip()
            elif re.match("(\S+) flow alloc failures", value):
                obj = re.match("(\S+) flow alloc failures", value)
                dict_value["flow alloc failures"] = obj.group(1).strip()
            elif re.match("(\S+) displayed", value):
                obj = re.match("(\S+) displayed", value)
                dict_value["displayed"] = obj.group(1).strip()
            elif re.match("Last clearing of statistics (\S+) Days (\S+)", value):
                obj = re.match("Last clearing of statistics (\S+) Days (\S+)", value)
                dict_value["Last clearing of statistics/Days"] = obj.group(1).strip()
        return dict_value
    def dut_get_show_vrf_detail_word(self,show_info):
        dict_value = {}
        flag_1 = 0
        flag_2 = 0
        key_1 = ""
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("VRF (\S+) \(VRF ID = (\d+)\); default RD (.*); default VPNID (.*)",value):
                obj = re.match("VRF (\S+) \(VRF ID = (\d+)\); default RD (.*); default VPNID (.*)",value)
                dict_value["VRF ID"] = obj.group(2).strip()
            elif "Interface:" in value:
                flag_1 = 1
            elif "Diffserv-mode:" in value:
                flag_1 = 0
                list_1 = value.split(":")
                dict_value[list_1[0].strip()] = list_1[1].strip()
            elif re.match("Address family ipv(\d+):",value):
                obj = re.match("Address family ipv(\d+):",value)
                key_1 = "ipv" + obj.group(1).strip()
                flag_2 = 1
                continue
            if flag_1 == 1 :
                dict_value["Interface"] = value.strip()
            if flag_2 == 1:
                if "Export VPN route-target communities" in value:
                    key_2 = "Export VPN route-target communities"
                elif "Import VPN route-target communities" in value:
                    key_2 = "Import VPN route-target communities"
                elif re.match("RT:(.*)",value.strip()):
                    obj = re.match("RT:(.*)",value.strip())
                    dict_value[key_1+"/"+key_2+"/RT"] = obj.group(1).strip()
                elif re.match("No ((Export|Import|BGP|Apply) .*)",value.strip(),re.I):
                    obj = re.match("No ((Export|Import|BGP|Apply) .*)",value.strip(),re.I)
                    dict_value[key_1+"/"+obj.group(1).strip()] = "No"
                elif re.match("BGP MPLS EVPN Routing (.*)",value.strip()):
                    obj = re.match("BGP MPLS EVPN Routing (.*)",value.strip())
                    dict_value[key_1+"/"+"BGP MPLS EVPN Routing"] = obj.group(1).strip()
                elif re.match("VRF IP Frr (.*)", value.strip()):
                    obj = re.match("VRF IP Frr (.*)", value.strip())
                    dict_value[key_1+"/"+"VRF IP Frr"] = obj.group(1).strip()
                elif re.match("Alloc-label per-vrf: (.*)",value.strip()):
                    obj = re.match("Alloc-label per-vrf: (.*)",value.strip())
                    dict_value[key_1+"/"+"Alloc-label per-vrf"] = obj.group(1).strip()
        return dict_value
    def dut_get_show_vrf_detail(self,show_info):
        return self.dut_get_show_vrf_detail_word(show_info)
    def dut_get_show_nak_counters_interface_dutport(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Interface")
    def dut_get_show_cnp_counters_interface_dutport(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Interface")
    def dut_get_show_cnp_counters(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info, "Interface")
    def dut_get_show_nak_counters(self, show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info, "Interface")
    def dut_get_show_mpls_ldp_neighbor_all(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        flag = 0
        flag2 = 0
        for value in show_info_list:
            value =value.strip()
            if re.match("(Targeted Hello \d+\.\d+\.\d+\.\d+) -> (\d+\.\d+\.\d+\.\d+), (\S+);", value.strip()):
                obj_1 = re.match("(Targeted Hello \d+\.\d+\.\d+\.\d+) -> (\d+\.\d+\.\d+\.\d+), (\S+);", value.strip())
                dict_value[key1 + "/" + obj_1.group(1).strip()] = obj_1.group(2).strip()
                dict_value[key1 + "/" + obj_1.group(1).strip() + "/status"] = obj_1.group(3).strip()
            if ";" in value:
                if flag2 == 2:
                    dict_value[key1+"/"+"Addresses bound to peer LDP Ident"] = addr_list
                    addr_list=[]
                flag = 0
                list1 = value.split(";")
                for value_list1 in list1:
                    if ":" in value_list1:
                        list2 = value_list1.split(":",1)
                        if "Peer LDP Ident" in value_list1 or re.match("LDP Ident:.*",value_list1):
                            key1 = list2[1].strip()
                        else:
                            dict_value[key1+"/"+list2[0].strip()] = list2[1].strip()
            elif "," in value:
                list1 = value.split(",")
                for value_list1 in list1:
                    if ":" in value_list1:
                        list2 = value_list1.split(":",1)
                        dict_value[key1+"/"+list2[0].strip()] = list2[1].strip()
                    elif "Link Peer on" in value_list1 :
                        list3 = value_list1.split("on")
                        dict_value[key1+"/"+"Link Peer on"] = list3[1].strip()
                if re.match("Link Peer on (.*), Src IP addr: (.*)",value.strip()):
                    obj_1 = re.match("Link Peer on (.*), Src IP addr: (.*)",value.strip())
                    dict_value[key1+"/"+obj_1.group(1).strip()] = obj_1.group(2).strip()
            elif ":" in value:
                if "Addresses bound to peer LDP Ident" in value:
                    addr_list = []
                    flag = 1
                    continue
                else:
                    if "Default VRF" in value or re.match("VRF \S+\(id \d+\):",value.strip()):
                        continue
                    list2 = value.split(":",1)
                    dict_value[key1+"/"+list2[0].strip()] = list2[1].strip()
            if flag ==1 :
                list4 = value.split()
                for value_list4 in list4:
                    addr_list.append(value_list4)
                flag2 =2
        if flag2 == 2:
            dict_value[key1+"/"+"Addresses bound to peer LDP Ident"] = addr_list
        return dict_value
    def dut_get_show_priorityflowcontrol_statistics_interface_dutport(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        new_list = []
        for value in show_info_list:
            if "packets/sec" in value:
                pass
            else:
                new_list.append(value)
        dict_value = self.dut_show_autoget_whippletree_form_analysis("\n".join(new_list),"interface","Priority")
        return dict_value
    def dut_get_show_priorityflowcontrol_deadlock_statistics_interface_dutport(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info, "Interface")
    def dut_get_show_switch_virtual_link(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        new_list = []
        for value in show_info_list:
            if "--------------------" in value:
                pass
            else:
                new_list.append(value)
        show_info_1 = "\n".join(new_list)
        return self.dut_show_autoget_blank_list(show_info_1,"VSL-AP")
    def dut_get_show_qos_wredecn_statistics_interface_dutport(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        new_list = []
        for value in show_info_list:
            if "--------------------" in value or ":" in value:
                pass
            else:
                new_list.append(value)
        show_info_1 = "\n".join(new_list)
        return self.dut_show_autoget_blank_list(show_info_1, "Port")
    def dut_get_show_priorityflowcontrol_statistics_historytop_interface_dutport(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("Interface :",value.strip()):
                obj = re.match("Interface : (.*)",value.strip())
                dict_value["Interface"] = obj.group(1).strip()
            elif re.match("Priority : \d+",value.strip()):
                obj = re.match("Priority : (\d+)",value.strip())
                key_1 = obj.group(1).strip()
            elif re.match("\S+\s+:\s+(\d+)\s+\S+,\s+\d+-\d+-\d+\s+\d+:\d+:\d+",value.strip()):
                obj = re.match("(\S+)\s+:\s+(\d+)\s+\S+,\s+(\d+-\d+-\d+\s+\d+:\d+:\d+)",value.strip())
                dict_value[key_1 + "/" +obj.group(1).strip()] = obj.group(2).strip()
                dict_value[key_1 + "/" +obj.group(1).strip() + "/time"] = obj.group(3).strip()
            elif ":" in value:
                list_1 = value.split(":",1)
                dict_value[key_1 + "/" + list_1[0].strip()] = list_1[1].replace("packets/sec","").strip()
        return dict_value
    def dut_get_show_priorityflowcontrol_status_interface_dutport(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info,"interface")
    def dut_get_show_webauth_capability(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        for value in show_info_list:
            if "....." in value :
                value = str(value).replace("."," ").strip()
                if re.match("\[(.*)\](.*)",value):
                    obj = re.match("\[(.*)\](.*)",value)
                    key_1 = obj.group(1).strip()
                    value_list = re.split("\s{2,}",obj.group(2).strip())
                    if re.match("(.*)\((.*)\)",value_list[1].strip()):
                        obj_1 = re.match("(.*)\((.*)\)",value_list[1].strip())
                        dict_value[key_1+"/"+value_list[0].strip()] = obj_1.group(1).strip()
                        dict_value[key_1+"/"+value_list[0].strip()+"_2"] = obj_1.group(2).strip()
                    else:
                        dict_value[key_1+"/"+value_list[0].strip()] = value_list[1].strip()
                else:
                    list_2 = re.split("\s{2,}",value.strip())
                    dict_value[list_2[0].strip()] = list_2[1].strip()
        return dict_value
    def dut_get_show_manuinfo(self,show_info):
        dict_value = {}
        device_list = []
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("Device \d+",value.strip()):
                obj = re.match("Device (\d+)",value.strip())
                key_1 = value.strip()
                device_list.append(obj.group(1).strip())
            elif ":" in value:
                list_value_split = value.split(":", 1)
                dict_value[key_1 + "/" +list_value_split[0].strip()] = list_value_split[1].strip()
        dict_value["device_list"] = device_list
        return dict_value
    def dut_get_show_ip_dhcp_snooping_packet(self,show_info):
        dict_value = {}
        dict_value = self.dut_show_autoget_whippletree_form_analysis(show_info,"Interface")
        show_info_list =self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("Total port num:(\d+)\s+.*",value):
                obj = re.match("Total port num:(\d+)\s+.*",value)
                dict_value["Total port num"] = obj.group(1)
                break
        return dict_value
    def dut_get_show_ipv6_dhcp_snooping_packet(self,show_info):
        dict_value = {}
        dict_value = self.dut_show_autoget_whippletree_form_analysis(show_info,"Interface")
        show_info_list =self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("Total port num:(\d+)\s+.*",value):
                obj = re.match("Total port num:(\d+)\s+.*",value)
                dict_value["Total port num"] = obj.group(1)
                break
        return dict_value
    def dut_get_show_acl_res(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info.replace("\t","    "))
        used_0_total_list = []
        acl_key = ""
        IFP_ACL_list = []
        EFP_ACL_list = []
        for value in show_info_list:
            value = value.strip()
            if re.match("acl usage warn limit: (\d+)%",value):
                obj = re.match("acl usage warn limit: (\d+)%",value)
                dict_value["acl usage warn limit"] = obj.group(1).strip()
            elif re.match("type\s+total\s+used\s+free\s+usage",value) or "-------" in value:
                pass
            elif re.match("##Dev=(\d+),Slot=(\d+),unit=(\d+) ACL RES",value):
                obj = re.match("##Dev=(\d+),Slot=(\d+),unit=(\d+) ACL RES",value)
                dev = obj.group(1)
                slot = obj.group(2)
                unit = obj.group(3)
                key_1 = dev + "/" + slot + "/" + unit
            elif len(re.split("\s{2,}",value)) == 5 and re.match("\S+\sACL.*",value):
                if acl_key != "":
                    dict_value[key_1 + "/" + acl_key +"/used_0_total_list"] = used_0_total_list
                    if acl_key.upper() == "IFP ACL":
                        IFP_ACL_list.append(key_1)
                    elif acl_key.upper() == "EFP ACL":
                        EFP_ACL_list.append(key_1)
                    used_0_total_list = []

                list_1 = re.split("\s{2,}",value)
                dict_value[key_1 + "/"+list_1[0]+"/total"] =list_1[1]
                dict_value[key_1 + "/" + list_1[0] + "/used"] =list_1[2]
                dict_value[key_1 + "/" + list_1[0] + "/free"] =list_1[3]
                dict_value[key_1 + "/" + list_1[0] + "/usage"] =list_1[4].replace("%","")
                acl_key = list_1[0]
            elif len(re.split("\s{2,}",value)) == 5 and re.match("slice.*",value):
                list_1 = re.split("\s{2,}",value)
                dict_value[key_1 + "/" + acl_key +"/"+list_1[0]+"/total"] =list_1[1]
                dict_value[key_1 + "/" + acl_key + "/" + list_1[0] + "/used"] =list_1[2]
                dict_value[key_1 + "/" + acl_key + "/" + list_1[0] + "/free"] =list_1[3]
                dict_value[key_1 + "/" + acl_key + "/" + list_1[0] + "/usage"] =list_1[4].replace("%","")
                if list_1[2] == "0":
                    used_0_total_list.append(list_1[1])
            elif re.match("##Dev=(\d+),Slot=(\d+),unit=(\d+) TOP(\d+)",value):
                obj = re.match("##Dev=(\d+),Slot=(\d+),unit=(\d+) TOP(\d+)", value)
                dev = obj.group(1)
                slot = obj.group(2)
                unit = obj.group(3)
                key_2 = dev + "/" + slot + "/" + unit
            elif re.match("(\S+ ACL)\s+time:(\S+ \S+): used=(\d+)",value):
                obj = re.match("(\S+ ACL)\s+time:(\S+ \S+): used=(\d+)",value)
                dict_value[key_2 + "/" + obj.group(1) + "/time"] = obj.group(2).strip()
                dict_value[key_2 + "/" + obj.group(1) + "/used"] = obj.group(3).strip()

        dict_value[key_1 + "/" + acl_key + "/used_0_total_list"] = used_0_total_list
        dict_value["IFP_ACL_list"] = IFP_ACL_list
        dict_value["EFP_ACL_list"] = EFP_ACL_list
        return dict_value
    def dut_get_show_isis_segmentrouting_ilm(self, show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        dict_value_1 = {}
        for value in show_info_list:
            if re.match("(\S+)\s+(\S+/\d+), vrf_id: (\d+), safi: (\d+), iif_ix: (\d+), in_label: (\d+), nh_num (\d+)\.",value.strip()):
                obj_1 = re.match("(\S+)\s+(\S+/\d+), vrf_id: (\d+), safi: (\d+), iif_ix: (\d+), in_label: (\d+), nh_num (\d+)\.",value.strip())
                ip = obj_1.group(2).strip()
                dict_value_1["/status"] = obj_1.group(1).strip()
                dict_value_1["/ip"] = obj_1.group(2).strip()
                dict_value_1["/vrf_id"] = obj_1.group(3).strip()
                dict_value_1["/safi"] = obj_1.group(4).strip()
                dict_value_1["/iif_ix"] = obj_1.group(5).strip()
                dict_value_1["/in_label"] = obj_1.group(6).strip()
                dict_value_1["/nh_num"] = obj_1.group(7).strip()
            elif re.match("(\d+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+\s\S+)\((\d+)\)", value.strip()):
                obj_2 = re.match("(\d+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+\s\S+)\((\d+)\)",value.strip())
                ip_next = obj_2.group(4).strip()
                dict_value[ip+ "/" + ip_next + "/in"] = obj_2.group(1).strip()
                dict_value[ip+ "/" + ip_next + "/out"] = obj_2.group(2).strip()
                dict_value[ip+ "/" + ip_next + "/code"] = obj_2.group(3).strip()
                # dict_value[id + "/" + ip + "/nexthop"] = obj_2.group(4).strip()
                dict_value[ip+ "/" + ip_next + "/interface"] = obj_2.group(5).strip()
                dict_value[ip+ "/" + ip_next + "/interface_index"] = obj_2.group(6).strip()
                if dict_value_1:
                    for k, v in dict_value_1.items():
                        dict_value[ip+ "/" + ip_next + k] = v
            elif re.match("(\d\S+)\s+(\S+)\s+(\S+)\s+(\S+\s\S+)\((\d+)\)", value.strip()):
                obj_2 = re.match("(\d+\S+)\s+(\S+)\s+(\S+)\s+(\S+\s\S+)\((\d+)\)",value.strip())
                ip_next = obj_2.group(3).strip()
                dict_value[ip+ "/" + ip_next + "/out"] = obj_2.group(1).strip()
                dict_value[ip+ "/" + ip_next + "/code"] = obj_2.group(2).strip()
                # dict_value[id + "/" + ip + "/nexthop"] = obj_2.group(4).strip()
                dict_value[ip+ "/" + ip_next + "/interface"] = obj_2.group(4).strip()
                dict_value[ip+ "/" + ip_next + "/interface_index"] = obj_2.group(5).strip()
                if dict_value_1:
                    for k, v in dict_value_1.items():
                        dict_value[ip+ "/" + ip_next + k] = v
            elif re.match("(\d+)\s+(\S+)\s+(\S+)\s+via (\S+)\s+(\S+\s\S+)\((\d+)\)", value.strip()):
                obj_2 = re.match("(\d+)\s+(\S+)\s+(\S+)\s+via (\S+)\s+(\S+\s\S+)\((\d+)\)",value.strip())
                ip_next = obj_2.group(4).strip()
                dict_value[ip+ "/" + ip_next + "/in"] = obj_2.group(1).strip()
                dict_value[ip+ "/" + ip_next + "/out"] = obj_2.group(2).strip()
                dict_value[ip+ "/" + ip_next + "/code"] = obj_2.group(3).strip()
                # dict_value[id + "/" + ip + "/nexthop"] = obj_2.group(4).strip()
                dict_value[ip+ "/" + ip_next + "/interface"] = obj_2.group(5).strip()
                dict_value[ip+ "/" + ip_next + "/interface_index"] = obj_2.group(6).strip()
                if dict_value_1:
                    for k, v in dict_value_1.items():
                        dict_value[ip+ "/" + ip_next + k] = v
            elif re.match("(\d+)\s+(\S+)\s+\(\S+\)\s+(\S+)\s+(\S+)\s+(\S+\s\S+)\((\d+)\)", value.strip()):
                obj_2 = re.match("(\d+)\s+(\S+)\s+\(\S+\)\s+(\S+)\s+(\S+)\s+(\S+\s\S+)\((\d+)\)",
                                 value.strip())
                ip_next = obj_2.group(4).strip()
                dict_value[ip+ "/" + ip_next + "/in"] = obj_2.group(1).strip()
                dict_value[ip+ "/" + ip_next + "/out"] = obj_2.group(2).strip()
                dict_value[ip+ "/" + ip_next + "/code"] = obj_2.group(3).strip()
                # dict_value[id + "/" + ip + "/nexthop"] = obj_2.group(4).strip()
                dict_value[ip+ "/" + ip_next + "/interface"] = obj_2.group(5).strip()
                dict_value[ip+ "/" + ip_next + "/interface_index"] = obj_2.group(6).strip()
                if dict_value_1:
                    for k, v in dict_value_1.items():
                        dict_value[ip+ "/" + ip_next + k] = v
            elif re.match("Backup Label Stack \(Top -> Bottom\): {(.*)}",value.strip()):
                obj = re.match("Backup Label Stack \(Top -> Bottom\): {(.*)}",value.strip())
                dict_value[ip+ "/Backup Label Stack"] = obj.group(1).strip()
        return dict_value
    def dut_get_show_isis_route_ipv6_verbose(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            value = value.strip()
            if re.match("Area (\d+):",value):
                obj = re.match("Area (\d+):",value)
                area_id = obj.group(1)
            elif re.match("ISISv6 route summary: (\d+)",value):
                obj = re.match("ISISv6 route summary: (\d+)",value)
                dict_value[area_id +"/" +"ISISv6 route summary"] = obj.group(1).strip()
            elif re.match("ISISv6 route selected summary: (\d+)",value):
                obj = re.match("ISISv6 route selected summary: (\d+)",value)
                dict_value[area_id +"/" +"ISISv6 route selected summary"] = obj.group(1).strip()
            elif re.match("\S+\s+\S+\s+\[\d+\]",value):
                obj = re.match("(\S+)\s+(\S+)\s+\[(\d+)\]",value)
                code = obj.group(1).strip()
                ip  = obj.group(2)
                key_1 = area_id + "/" + ip
                dict_value[key_1 + "/code"] = code
            elif re.match("via (\S+), (.*), weight (\d+)",value):
                obj = re.match("via (\S+), (.*), weight (\d+)",value)
                via_ip = obj.group(1).strip()
                key_2 = key_1 +"/"+ via_ip
                dict_value[key_2 + "/interface"] = obj.group(2).strip()
                dict_value[key_2+"/weight"] = obj.group(3).strip()
            elif re.match("TILFA backup via (\S+), (.*)",value):
                obj = re.match("TILFA backup via (\S+), (.*)",value)
                via_ip = obj.group(1).strip()
                key_2 = key_1 + via_ip
                dict_value[key_2 + "/interface"] = obj.group(2).strip()
            elif re.match("LabelStack \(Top -> Bottom\): \{(.*)\}",value):
                print value
                obj = re.match("LabelStack \(Top -> Bottom\): \{(.*)\}",value)
                dict_value[key_1 + "/LabelStack"] = obj.group(1).strip()
        return dict_value
    def dut_get_debug_dot1x_dump_global(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("(\S+.*):\Z",value):
                obj = re.match("(\S+.*):\Z",value)
                key_1 = obj.group(1).strip()
            elif re.match("\s+(.*)\s+\.+\s(\S+)(\(per-sec\)|Byte)",value):
                obj = re.match("\s+(.*)\s+\.+\s(\S+)(\(per-sec\)|Byte)",value)
                dict_value[key_1+ "/" + obj.group(1).strip()] = obj.group(2).strip()
            elif re.match("\s+(.*)\s+\.+\s(\d+)",value):
                obj = re.match("\s+(.*)\s+\.+\s(\d+)",value)
                dict_value[key_1+ "/" + obj.group(1).strip()] = obj.group(2).strip()
            elif re.match("\s+(.*):(.*)",value):
                obj = re.match("\s+(.*):(.*)",value)
                dict_value[key_1 + "/" + obj.group(1).strip()] = obj.group(2).strip()
            elif re.match("(\S+.*)\s+\.+\s(\S+)(\(per-sec\)|Byte)",value):
                obj = re.match("(\S+.*)\s+\.+\s(\S+)(\(per-sec\)|Byte)",value)
                dict_value[obj.group(1).strip()] = obj.group(2).strip()
        return dict_value
    def dut_show_autoget_form_bgp_network_1(self, star_num, end_num,title_value,x_list,show_info_list_line):
        '''
        对设备有关杆号的列表进行字典的遍历
        *b  120.0.9.0/24     40.1.1.2                 0                       0 20 i
        *>                   20.1.1.2                 0                       0 20 i
        '''
        dict_value ={}
        address_list = []
        title_list =[]
        ip_flag =""
        flag_2 = 0
        ip_flag_2=""
        ori_network=""
        net_side=3
        for i in range (star_num,end_num):    #line_len-1:上面删除“-----”这一行了
            ##print show_info_list_line[i]
            x_len = len(x_list)
            cut_star = 0
            cut_end=0
            new_list = []
            show_info_list_line[i] = show_info_list_line[i]
            ##print show_info_list_line[i]

            if show_info_list_line[i] != "" :
                #print show_info_list_line[i]
                if re.match("Total number of (.*) (\d+)",show_info_list_line[i]):
                    obj = re.match("(Total number of .*) (\d+)",show_info_list_line[i])
                    dict_value[obj.group(1).strip()] = obj.group(2).strip()
                    continue
                if "Route Distinguisher" in show_info_list_line[i]:
                    if re.match(r"Route Distinguisher:(.*)\(Default for EVI (\d+)\)",show_info_list_line[i].strip()):
                        obj_route =re.match(r".*Route Distinguisher:(.*)\(Default for EVI (\d+)\)",show_info_list_line[i].strip())
                        dict_value["Route Distinguisher"] = obj_route.group(1).strip()
                        dict_value["Default for EVI"] = obj_route.group(2).strip()
                elif re.match(r"(.*\s)(\d+.*/\d+$)",show_info_list_line[i].strip()):
                    #print show_info_list_line[i].strip()
                    obj = re.match(r"(.*\s)(\d+.*/\d+)",show_info_list_line[i].strip())
                    status = obj.group(1)
                    ip_flag_2 = obj.group(2)
                    ip_flag_2_network =obj.group(0)
                    flag_2 = 1
                elif re.match(r"(\d+.*/\d+$)",show_info_list_line[i].strip()):
                    obj = re.match(r"(\d+.*/\d+)",show_info_list_line[i].strip())
                    status = obj.group(1)
                    ip_flag_2 = obj.group(1)
                    ip_flag_2_network =obj.group(0)
                    flag_2 = 1
                elif re.match(r"(.*\s)(\[\d+.*/\d+$)", show_info_list_line[i].strip()):
                    # print show_info_list_line[i].strip()
                    obj = re.match(r"(.*\s)(\[\d+.*/\d+)", show_info_list_line[i].strip())
                    status = obj.group(1)
                    ip_flag_2 = obj.group(2)
                    ip_flag_2_network = obj.group(0)
                    flag_2 = 1
                elif re.match(r"(.*\s)(\[.*/\d+$)", show_info_list_line[i].strip()):
                    # print show_info_list_line[i].strip()
                    obj = re.match(r"(.*\s)(\[.*/\d+)", show_info_list_line[i].strip())
                    status = obj.group(1)
                    ip_flag_2 = obj.group(2)
                    ip_flag_2_network = obj.group(0)
                    flag_2 = 1


                elif re.match(r"(\[\d+.*/\d+$)", show_info_list_line[i].strip()):
                    obj = re.match(r"(\[\d+.*/\d+)", show_info_list_line[i].strip())
                    status = obj.group(1)
                    ip_flag_2 = obj.group(1)
                    ip_flag_2_network = obj.group(0)
                    flag_2 = 1
                else:
                    for j in range(x_len):
                        cut_end = cut_end+int(x_list[j])
                        col_value = show_info_list_line[i][cut_star:cut_end]
                        cut_star = cut_end
                        if "Network" in col_value :
                            ori_network = col_value
                            net_side=int(ori_network.find("N"))
                        col_value = col_value.lstrip()
                        col_value = col_value.rstrip()
                        new_list.append(col_value)
                    #获取表头的列，用于组合
                    ##print col_value_list
                    for i in range(len(new_list)) :
                        if new_list[i] == title_value :
                            new_list_title_key = i
                    new_list_title_value = new_list[new_list_title_key]          #需要变参的地方
                    if "/" in new_list_title_value:
                        ip_obj = re.findall(r"(\d+.*/\d+)",new_list_title_value)
                        ip_flag = ip_obj[0]
                    else:
                        if flag_2 == 1 :
                            if new_list_title_value == "":
                                new_list_title_value = ip_flag_2_network
                            else:
                                new_list_title_value = new_list_title_value+ip_flag_2
                        else:
                            if len(new_list_title_value) < net_side:
                                dif_value = net_side - len(new_list_title_value)
                                dif_value_2=""
                                for i in range(int(dif_value)):
                                    dif_value_2 = dif_value_2+" "
                                new_list_title_value =  new_list_title_value+dif_value_2
                            new_list_title_value = new_list_title_value+ip_flag
                    if new_list_title_value == title_value:
                        title_list = new_list
                    elif new_list_title_value!= title_value:
                        #生成字典
                        address_list.append(new_list_title_value)
                        #遍历列头右边的值
                        if new_list_title_key+1 < x_len :
                            for s in range(new_list_title_key+1,x_len):  #需要变参的地方
                                #key_name = '%s/%s' % (title_col,title_row[s])
                                key_name = '%s/%s'%(new_list_title_value,title_list[s])
                                dict_value[key_name]=new_list[s]
                        if new_list_title_key > 0 :
                            for s in range(0,new_list_title_key):  #需要变参的地方
                                ##遍历列头边的值
                                key_name = '%s/%s' % (new_list_title_value, title_list[s])
                                dict_value[key_name]=new_list[s]
                    dict_value[title_value+"_list"]=address_list
        return dict_value
    def dut_get_bgp_network_1(self,show_info):
        dict_value = {}
        #########################################################################################
        # 用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        line_len = len (show_info_split)
        for line_len_num in range (0,line_len):
            if "For address family" in show_info_split[line_len_num]:
                list1 = show_info_split[line_len_num].split(":")
                dict_value[list1[0].strip()]=list1[1].strip()
            if "BGP table version" in show_info_split[line_len_num]:
                list2 = show_info_split[line_len_num].split(",")
                for list2_value in list2:
                    if "is" in list2_value:
                        list3 = list2_value.split("is")
                        dict_value[list3[0].strip()]=list3[1].strip()
                    if re.match("bgp instance(.*)",list2_value.strip()):
                        obj_0 = re.match("bgp instance(.*)",list2_value.strip())
                        dict_value["bgp instance"] = obj_0.group(1).strip()
            if "Total number of prefixes" in show_info_split[line_len_num]:
                end_num = line_len_num
                list1 = show_info_split[line_len_num].split("prefixes")
                dict_value["Total number of prefixes"]=list1[1].strip()
            if "Next Hop" in show_info_split[line_len_num]:
                star_num = line_len_num
        whippletree_list_2=[20,20,12,11,9,50]
        dict_value1 = self.dut_show_autoget_form_bgp_network_1(star_num,end_num,"Network",whippletree_list_2,show_info_split)
        dict_value2 =dict(dict_value.items()+dict_value1.items())
        return dict_value2
    def dut_get_show_bgp_linkstate_linkstate(self,show_info):
        return self.dut_get_bgp_network_1(show_info)
    def dut_get_show_version_module_detail_word(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if ":" in value:
                list_value_split = value.split(":", 1)  # 以冒号分割一次
                key_name = '%s' % (list_value_split[0].lstrip().rstrip().replace("\r", ""))
                dict_value[key_name] = list_value_split[1].lstrip().rstrip().replace("\r", "")
        return dict_value
    def dut_get_show_segmentrouting_policy_counters(self,show_info):
        dict_value = {}
        key_2 = None
        key_3 = None
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if "total policy number:" in value:
                list_0 = value.split(":")
                key_0 = list_0[1].strip(".").strip()
                dict_value["total policy number"] = key_0
            elif "policy name:" in value:
                list_1 = value.split(":")
                key_1 = list_1[1].strip(".").strip()
                key_2 = None
                key_3 = None
            elif "candidate path id:" in value:
                list_2 = value.split(":")
                key_2 = list_2[1].strip(".").strip()
            elif "sidlist name:" in value:
                list_3 = value.split(":")
                key_3 = list_3[1].strip(".").strip()
            elif re.match("5 seconds avg rate : (\d+) bits/sec, (\d+) packets/sec\.",value.strip()):
                obj_1 = re.match("5 seconds avg rate : (\d+) bits/sec, (\d+) packets/sec\.",value.strip())
                bits_5 = obj_1.group(1)
                packets_5 = obj_1.group(2)
                key = key_1
                if key_2:
                    key = key + "/" + key_2
                if key_3:
                    key = key + "/" + key_3
                dict_value[key+"/5 seconds avg rate/bits"] = bits_5
                dict_value[key + "/5 seconds avg rate/packets"] = packets_5
            elif re.match("Peak rate\s+: (\d+) bits/sec, (\d+) packets/sec\.",value.strip()):
                obj_2 = re.match("Peak rate\s+: (\d+) bits/sec, (\d+) packets/sec\.",value.strip())
                bits_5 = obj_2.group(1)
                packets_5 = obj_2.group(2)
                key = key_1
                if key_2:
                    key = key + "/" + key_2
                if key_3:
                    key = key + "/" + key_3
                dict_value[key + "/Peak rate/bits"] = bits_5
                dict_value[key + "/Peak rate/packets"] = packets_5
            elif ":" in value:
                list_4 = value.split(":")
                key = key_1
                if key_2:
                    key = key + "/" + key_2
                if key_3:
                    key = key + "/" + key_3
                dict_value[key + "/"+list_4[0].strip()] = list_4[1].strip(".").strip()
        return dict_value
    def dut_get_show_segmentrouting_policy_name_word_counters(self,show_info):
        dict_value = {}
        key = None
        key_2 = None
        key_3 = None
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if "policy name:" in value:
                list_1 = value.split(":")
                key_1 = list_1[1].strip(".").strip()
                dict_value["policy name"] = key_1

            elif "candidate path id:" in value:
                list_2 = value.split(":")
                key_2 = list_2[1].strip(".").strip()
                key_3 = None
            elif "sidlist name:" in value:
                list_3 = value.split(":")
                key_3 = list_3[1].strip(".").strip()
            elif re.match("5 seconds avg rate : (\d+) bits/sec, (\d+) packets/sec\.",value.strip()):
                obj_1 = re.match("5 seconds avg rate : (\d+) bits/sec, (\d+) packets/sec\.",value.strip())
                bits_5 = obj_1.group(1)
                packets_5 = obj_1.group(2)
                if key_2:
                    key = key_2
                if key_3:
                    key = key + "/" + key_3
                if key:
                    dict_value[key+"/5 seconds avg rate/bits"] = bits_5
                    dict_value[key + "/5 seconds avg rate/packets"] = packets_5
                else:
                    dict_value["5 seconds avg rate/bits"] = bits_5
                    dict_value["5 seconds avg rate/packets"] = packets_5
            elif re.match("Peak rate\s+: (\d+) bits/sec, (\d+) packets/sec\.",value.strip()):
                obj_2 = re.match("Peak rate\s+: (\d+) bits/sec, (\d+) packets/sec\.",value.strip())
                bits_5 = obj_2.group(1)
                packets_5 = obj_2.group(2)
                if key_2:
                    key = key_2
                if key_3:
                    key = key + "/" + key_3
                if key:
                    dict_value[key + "/Peak rate/bits"] = bits_5
                    dict_value[key + "/Peak rate/packets"] = packets_5
                else:
                    dict_value["Peak rate/bits"] = bits_5
                    dict_value["Peak rate/packets"] = packets_5
            elif ":" in value:
                list_4 = value.split(":")
                if key_2:
                    key = key_2
                if key_3:
                    key = key + "/" + key_3
                if key:
                    dict_value[key + "/"+list_4[0].strip()] = list_4[1].strip(".").strip()
                else:
                    dict_value[list_4[0].strip()] = list_4[1].strip(".").strip()
        return dict_value
    def dut_get_show_srp_ref_bsidsrv6(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Bind Sid")
    def dut_get_show_srv6_ref_global(self,show_info):
        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_srv6_sid_counters(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        sid_list = []
        for value in show_info_list:
            value = value.strip()
            if re.match("SID\s+: (.*)",value):
                obj = re.match("SID\s+: (.*)",value)
                key_1 = obj.group(1).strip()
                sid_list.append(key_1)
            elif re.match("dir\s+: (IN|OUT)",value):
                obj = re.match("dir\s+: (IN|OUT)",value)
                key_1 = key_1 + "/" + obj.group(1)
            elif re.match("5 seconds rate : (\d+) bits/sec, (\d+) packets/sec.",value):
                obj = re.match("5 seconds rate : (\d+) bits/sec, (\d+) packets/sec.",value)
                dict_value[key_1+"/5 seconds rate/bits/sec"] = obj.group(1).strip()
                dict_value[key_1 + "/5 seconds rate/packets/sec"] = obj.group(2).strip()
            elif re.match("Peak rate\s+: (\d+) bits/sec, (\d+) packets/sec.",value):
                obj = re.match("Peak rate\s+: (\d+) bits/sec, (\d+) packets/sec.",value)
                dict_value[key_1+"/Peak rate/bits/sec"] = obj.group(1).strip()
                dict_value[key_1 + "/Peak rate/packets/sec"] = obj.group(2).strip()
            elif re.match(".*:.*",value):
                list_value_split = value.split(":", 1)
                dict_value[key_1 + "/" + list_value_split[0].strip()] = list_value_split[1].strip().strip(".")
        dict_value["sid_list"] = sid_list
        return dict_value
    def dut_get_show_segmentrouting_policy_segmentlist_counters(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        name_list = []
        for value in show_info_list:
            value = value.strip()
            if re.match("total segment list number: (\d+)\.",value):
                obj = re.match("total segment list number: (\d+)\.",value)
                dict_value["total segment list number"] = obj.group(1).strip()
            elif re.match("segment list name: (\S+)\.",value):
                key_1 =  re.match("segment list name: (\S+)\.",value).group(1).strip()
                name_list.append(key_1)
            elif re.match("5 seconds avg rate : (\d+) bits/sec, (\d+) packets/sec.", value):
                obj = re.match("5 seconds avg rate : (\d+) bits/sec, (\d+) packets/sec.", value)
                dict_value[key_1 + "/5 seconds avg rate/bits/sec"] = obj.group(1).strip()
                dict_value[key_1 + "/5 seconds avg rate/packets/sec"] = obj.group(2).strip()
            elif re.match("Peak rate\s+: (\d+) bits/sec, (\d+) packets/sec.", value):
                obj = re.match("Peak rate\s+: (\d+) bits/sec, (\d+) packets/sec.", value)
                dict_value[key_1 + "/Peak rate/bits/sec"] = obj.group(1).strip()
                dict_value[key_1 + "/Peak rate/packets/sec"] = obj.group(2).strip()
            elif re.match(".*:.*",value):
                list_value_split = value.split(":", 1)
                dict_value[key_1+"/"+list_value_split[0].strip()] = list_value_split[1].strip().strip(".")
        dict_value["name_list"] = name_list
        return dict_value
    def dut_get_show_queuecounter_interface_dutport(self, show_info):
        """
        Function:show queue-counter interface <dutport>回显解析函数
        CLI命令:show queue-counter interface <dutport>
        回显信息示例:
N18K#show queue-counter interface HundredGigabitEthernet 10/32
Interface HundredGigabitEthernet 10/32:
  Unicast
  Queue     Transmitted Bytes         Dropped Bytes    Frame Loss Rate(%)    Transmit Rate(bps)
      1                     0                     0                     0                     0
      2                     0                     0                     0                     0
      3                     0                     0                     0                     0
      4                     0                     0                     0                     0
      5                     0                     0                     0                     0
      6                     0                     0                     0                     0
      7                     0                     0                     0                     0
      8                370417                     0                     0                    64
  Multicast
  Queue     Transmitted Bytes         Dropped Bytes    Frame Loss Rate(%)    Transmit Rate(bps)
      1                     0                     0                     0                     0
      2                     0                     0                     0                     0
      3                     0                     0                     0                     0
      4                     0                     0                     0                     0
      5                     0                     0                     0                     0
      6                     0                     0                     0                     0
      7                     0                     0                     0                     0
      8                     0                     0                     0                     0
  Unicast
  Queue   Transmitted Packets       Dropped Packets    Frame Loss Rate(%)    Transmit Rate(pps)
      1                     0                     0                     0                     0
      2                     0                     0                     0                     0
      3                     0                     0                     0                     0
      4                     0                     0                     0                     0
      5                     0                     0                     0                     0
      6                     0                     0                     0                     0
      7                     0                     0                     0                     0
      8                  2492                     0                     0                     0
  Multicast
  Queue   Transmitted Packets       Dropped Packets    Frame Loss Rate(%)    Transmit Rate(pps)
      1                     0                     0                     0                     0
      2                     0                     0                     0                     0
      3                     0                     0                     0                     0
      4                     0                     0                     0                     0
      5                     0                     0                     0                     0
      6                     0                     0                     0                     0
      7                     0                     0                     0                     0
      8                     0                     0                     0                     0

        Returns:
{'Multicast1/1/Transmit Rate(bps)': '0'
'Unicast1/5/Dropped Bytes': '0'
'Multicast2/5/Transmit Rate(bps)': '0'
'Multicast1/7/Dropped Bytes': '0'
'Multicast2/6/Transmitted Bytes': '0'
'Unicast2/4/Transmitted Bytes': '0'
'Unicast2/1/Frame Loss Rate(%)': '0'
'Unicast2/6/Frame Loss Rate(%)': '0'
'Unicast2/2/Transmitted Bytes': '0'
'Unicast1/7/Dropped Bytes': '0'
'Unicast2/1/Dropped Bytes': '0'
'Multicast2/7/Transmit Rate(bps)': '0'
'Unicast2/1/Transmitted Bytes': '0'
'Unicast2/7/Frame Loss Rate(%)': '0'
'Multicast1/2/Dropped Bytes': '0'
'Unicast2/4/Frame Loss Rate(%)': '0'
'Unicast2/5/Transmitted Bytes': '0'
'Unicast2/3/Transmit Rate(bps)': '0'
'Multicast1/2/Transmitted Bytes': '0'
'Unicast2/7/Dropped Bytes': '0'
'Multicast1/1/Dropped Bytes': '0'
'Multicast2/5/Frame Loss Rate(%)': '0'
'Unicast2/3/Frame Loss Rate(%)': '0'
'Multicast2/3/Transmitted Bytes': '0'
'Unicast2/1/Transmit Rate(bps)': '0'
'Unicast2/5/Dropped Bytes': '0'
'Multicast1/8/Frame Loss Rate(%)': '0'
'Multicast2/7/Transmitted Bytes': '0'
'Multicast1/7/Frame Loss Rate(%)': '0'
'Multicast2/3/Transmit Rate(bps)': '0'
'Multicast2/2/Dropped Bytes': '0'
'Unicast1/4/Dropped Bytes': '0'
'Multicast2/5/Dropped Bytes': '0'
'Unicast2/6/Transmitted Bytes': '0'
'Multicast1/8/Dropped Bytes': '0'
'Unicast2/4/Dropped Bytes': '0'
'Unicast1/2/Transmit Rate(bps)': '0'
'Multicast1/2/Transmit Rate(bps)': '0'
'Multicast1/1/Frame Loss Rate(%)': '0'
'Unicast2/6/Dropped Bytes': '0'
'Multicast1/5/Dropped Bytes': '0'
'Multicast1/3/Transmitted Bytes': '0'
'Multicast2/8/Frame Loss Rate(%)': '0'
'Unicast1/3/Transmit Rate(bps)': '0'
'Unicast2/8/Dropped Bytes': '0'
'Multicast2/1/Transmit Rate(bps)': '0'
'Multicast1/5/Transmitted Bytes': '0'
'Unicast2/2/Frame Loss Rate(%)': '0'
'Unicast1/1/Transmit Rate(bps)': '0'
'Unicast2/3/Transmitted Bytes': '0'
'Multicast1/4/Frame Loss Rate(%)': '0'
'Unicast1/2/Frame Loss Rate(%)': '0'
'Unicast2/7/Transmit Rate(bps)': '0'
'Multicast2/8/Dropped Bytes': '0'
'Unicast1/5/Transmit Rate(bps)': '0'
'Multicast2/3/Dropped Bytes': '0'
'Unicast1/7/Frame Loss Rate(%)': '0'
'Unicast1/8/Frame Loss Rate(%)': '0'
'Unicast2/2/Dropped Bytes': '0'
'Multicast2/4/Transmitted Bytes': '0'
'Unicast1/3/Transmitted Bytes': '0'
'Multicast1/8/Transmit Rate(bps)': '0'
'Multicast2/1/Transmitted Bytes': '0'
'Unicast1/6/Frame Loss Rate(%)': '0'
'Unicast1/1/Frame Loss Rate(%)': '0'
'Unicast1/5/Transmitted Bytes': '0'
'Unicast1/6/Dropped Bytes': '0'
'Unicast1/8/Transmit Rate(bps)': '64'
'Unicast1/8/Transmitted Bytes': '370417'
'Unicast1/6/Transmitted Bytes': '0'
'Multicast2/2/Transmit Rate(bps)': '0'
'Unicast1/3/Frame Loss Rate(%)': '0'
'Unicast1/2/Transmitted Bytes': '0'
'Unicast1/4/Transmit Rate(bps)': '0'
'Unicast1/7/Transmitted Bytes': '0'
'Multicast1/1/Transmitted Bytes': '0'
'Multicast2/8/Transmit Rate(bps)': '0'
'Unicast2/8/Frame Loss Rate(%)': '0'
'Unicast1/4/Frame Loss Rate(%)': '0'
'Multicast2/2/Frame Loss Rate(%)': '0'
'Multicast2/6/Transmit Rate(bps)': '0'
'Multicast2/1/Dropped Bytes': '0'
'Unicast1/6/Transmit Rate(bps)': '0'
'Unicast1/2/Dropped Bytes': '0'
'Multicast2/3/Frame Loss Rate(%)': '0'
'Multicast1/3/Dropped Bytes': '0'
'Multicast1/4/Transmitted Bytes': '0'
'Unicast1/8/Dropped Bytes': '0'
'Unicast1/7/Transmit Rate(bps)': '0'
'Unicast2/3/Dropped Bytes': '0'
'Multicast1/4/Dropped Bytes': '0'
'Unicast1/1/Transmitted Bytes': '0'
'Multicast2/2/Transmitted Bytes': '0'
'Multicast2/4/Transmit Rate(bps)': '0'
'Unicast1/3/Dropped Bytes': '0'
'Unicast2/8/Transmitted Bytes': '2492'
'Unicast2/5/Transmit Rate(bps)': '0'
'Multicast2/7/Dropped Bytes': '0'
'Multicast2/8/Transmitted Bytes': '0'
'Unicast2/7/Transmitted Bytes': '0'
'Unicast1/1/Dropped Bytes': '0'
'Multicast1/7/Transmitted Bytes': '0'
'Unicast2/4/Transmit Rate(bps)': '0'
'Multicast1/6/Transmitted Bytes': '0'
'Multicast1/3/Frame Loss Rate(%)': '0'
'Multicast2/6/Dropped Bytes': '0'
'Multicast1/2/Frame Loss Rate(%)': '0'
'Multicast1/5/Frame Loss Rate(%)': '0'
'Multicast1/3/Transmit Rate(bps)': '0'
'Unicast1/5/Frame Loss Rate(%)': '0'
'Unicast2/8/Transmit Rate(bps)': '0'
'Unicast2/6/Transmit Rate(bps)': '0'
'Multicast2/6/Frame Loss Rate(%)': '0'
'Multicast1/8/Transmitted Bytes': '0'
'Multicast1/6/Frame Loss Rate(%)': '0'
'Unicast1/4/Transmitted Bytes': '0'
'Multicast1/5/Transmit Rate(bps)': '0'
'Multicast1/6/Transmit Rate(bps)': '0'
'Multicast2/4/Frame Loss Rate(%)': '0'
'Multicast1/6/Dropped Bytes': '0'
'Multicast2/4/Dropped Bytes': '0'
'Unicast2/5/Frame Loss Rate(%)': '0'
'Multicast1/4/Transmit Rate(bps)': '0'
'Multicast2/1/Frame Loss Rate(%)': '0'
'Unicast2/2/Transmit Rate(bps)': '0'
'Multicast2/7/Frame Loss Rate(%)': '0'
'Multicast2/5/Transmitted Bytes': '0'
'Multicast1/7/Transmit Rate(bps)': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show queue-counter interface <dutport> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        if "Port Group" in show_info and " Voq" in show_info:
            show_info_list = self.dut_get_start_show_info(show_info)
            new_list = []
            flag = 0
            for value in show_info_list:
                if re.match("Slot (\d+) Port Group (\d+):", value):
                    flag = 1
                    if len(new_list) != 0:
                        info_list1 = []
                        info_list2 = []
                        flag_list = 0
                        for new_list_value in new_list:
                            if "Transmitted Packets" in new_list_value:
                                flag_list = 1
                            if flag_list == 1:
                                info_list2.append(new_list_value)
                            else:
                                info_list1.append(new_list_value)
                        show_info_1 = "\n".join(info_list1)
                        show_info_2 = "\n".join(info_list2)
                        dict_value1 = self.dut_show_autoget_blank_list(show_info_1, "Queue")
                        dict_value2 = self.dut_show_autoget_blank_list(show_info_2, "Queue")
                        dict_value3 = dict(dict_value1.items() + dict_value2.items())
                        for k, v in dict_value3.items():
                            dict_value[key_1 + "/" + k] = v
                    new_list = []
                    obj = re.match("Slot (\d+) Port Group (\d+):", value)
                    key_1 = obj.group(2)
                else:
                    if flag == 1:
                        if value.strip() == "Voq":
                            pass
                        elif value.strip() != "":
                            new_list.append(value)
            if len(new_list) != 0:
                info_list1 = []
                info_list2 = []
                flag_list = 0
                for new_list_value in new_list:
                    if "Transmitted Packets" in new_list_value:
                        flag_list = 1
                    if flag_list == 1:
                        info_list2.append(new_list_value)
                    else:
                        info_list1.append(new_list_value)
                show_info_1 = "\n".join(info_list1)
                show_info_2 = "\n".join(info_list2)
                dict_value1 = self.dut_show_autoget_blank_list(show_info_1, "Queue")
                dict_value2 = self.dut_show_autoget_blank_list(show_info_2, "Queue")
                dict_value3 = dict(dict_value1.items() + dict_value2.items())
                for k, v in dict_value3.items():
                    dict_value[key_1 + "/" + k] = v
            return dict_value
        elif show_info.count("Unicast") == 1 and show_info.count("Queue") == 2:
            show_list_1 = []
            show_list_2 = []
            flag_1 = 0
            flag_2 = 0
            show_info_list = self.dut_get_start_show_info(show_info)
            for value in show_info_list:
                if "Transmitted Bytes" in value:
                    flag_1 = 1
                elif "Transmitted Packets" in value:
                    flag_2 = 1
                    flag_1 = 0
                if flag_1 == 1:
                    show_list_1.append(value)
                elif flag_2 == 1:
                    show_list_2.append(value)
            show_1 = "\n".join(show_list_1)
            show_2 = "\n".join(show_list_2)
            show_1 = show_1.replace("Loss", "Bytes/Loss").replace("Transmit Rate", "Bytes/Transmit Rate")
            show_2 = show_2.replace("Loss", "Packets/Loss").replace("Transmit Rate", "Packets/Transmit Rate")
            dict_value1 = self.dut_show_autoget_blank_list(show_1, "Queue")
            dict_value2 = self.dut_show_autoget_blank_list(show_2, "Queue")
            return dict(dict_value1.items() + dict_value2.items())

        else:
            title_list = []
            col_len_list = []
            title_list2 = []
            data_list = []
            show_info_list_line = show_info.split("\n")
            if re.match(r'.*#sh.*', show_info_list_line[0]):
                show_info_list_line.remove(show_info_list_line[0])
            if re.match(r'.*Interface.*', show_info_list_line[0]):
                show_info_list_line.remove(show_info_list_line[0])
            if re.match(r'.*#.*', show_info_list_line[-1]):
                show_info_list_line.remove(show_info_list_line[-1])
            for i in show_info_list_line:
                if '' in show_info_list_line:
                    show_info_list_line.remove('')
            line_len = len(show_info_list_line)
            for line_len_num in range(0, line_len):
                if "Unicast" in show_info_list_line[line_len_num]:  # ***********
                    table_1 = line_len_num
                    show_info_list_line[line_len_num] = show_info_list_line[line_len_num].replace("Unicast",
                                                                                                  "Unicast1").strip()
                    break
            for line_len_num in range(0, line_len):
                if show_info_list_line[line_len_num].strip() == "Unicast":
                    table_3 = line_len_num
                    show_info_list_line[line_len_num] = show_info_list_line[line_len_num].replace("Unicast",
                                                                                                  "Unicast2").strip()
            for line_len_num in range(0, line_len):
                if "Multicast" in show_info_list_line[line_len_num]:  # ***********
                    table_2 = line_len_num
                    show_info_list_line[line_len_num] = show_info_list_line[line_len_num].replace("Multicast",
                                                                                                  "Multicast1").strip()
                    break
            for line_len_num in range(0, line_len):
                if show_info_list_line[line_len_num].strip() == "Multicast":
                    table_4 = line_len_num
                    show_info_list_line[line_len_num] = show_info_list_line[line_len_num].replace("Multicast",
                                                                                                  "Multicast2").strip()
            # table1表项生成字典
            title_list = show_info_list_line[table_1 + 1].split("  ")
            for i in title_list:
                if len(i) > 1:
                    title_list2.append(i.strip())
            for i in range(table_1 + 2, table_2):
                data_list.append(show_info_list_line[i].split())
            for i in range(0, len(data_list)):
                for j in range(1, len(data_list[i])):
                    dict_value[show_info_list_line[table_1] + "/" + data_list[i][0] + "/" + title_list2[j]] = \
                        data_list[i][j]
            # table2表项生成字典
            title_list = show_info_list_line[table_2 + 1].split("  ")
            for i in title_list:
                if len(i) > 1:
                    title_list2.append(i.strip())
            for i in range(table_2 + 2, table_3):
                data_list.append(show_info_list_line[i].split())
            for i in range(0, len(data_list)):
                for j in range(1, len(data_list[i])):
                    dict_value[show_info_list_line[table_2] + "/" + data_list[i][0] + "/" + title_list2[j]] = \
                        data_list[i][j]
            # table3表项生成字典
            title_list = show_info_list_line[table_3 + 1].split("  ")
            for i in title_list:
                if len(i) > 1:
                    title_list2.append(i.strip())
            for i in range(table_3 + 2, table_4):
                data_list.append(show_info_list_line[i].split())
            for i in range(0, len(data_list)):
                for j in range(1, len(data_list[i])):
                    dict_value[show_info_list_line[table_3] + "/" + data_list[i][0] + "/" + title_list2[j]] = \
                        data_list[i][j]
            # table4表项生成字典
            title_list = show_info_list_line[table_4 + 1].split("  ")
            for i in title_list:
                if len(i) > 1:
                    title_list2.append(i.strip())
            for i in range(table_4 + 2, len(show_info_list_line)):
                data_list.append(show_info_list_line[i].split())
            for i in range(0, len(data_list)):
                for j in range(1, len(data_list[i])):
                    dict_value[show_info_list_line[table_4] + "/" + data_list[i][0] + "/" + title_list2[j]] = \
                        data_list[i][j]
            return dict_value
    def dut_get_show_srv6_ref_localsrv6id(self, show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info, "ID")
    def dut_get_show_bgp_vpnv4_unicast_all_summary(self, show_info):
        return self.dut_get_show_bgp_all_summary(show_info)
    def dut_get_show_bgp_vpnv6_unicast_all_summary(self, show_info):
        return self.dut_get_show_bgp_all_summary(show_info)
    def dut_get_show_bgp_ipv6_unicast_all_summary(self, show_info):
        return self.dut_get_show_bgp_all_summary(show_info)
    def dut_get_show_srp_ref_nhp_ipv6(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Sid list name","Nexthop")
    def dut_get_show_bgp_ipv6_unicast_summary(self,show_info):
        dict_value = {}
        show_1_list = []
        show_info_list = self.dut_get_start_show_info(show_info)
        flag = 0
        for value in show_info_list:
            value = value.strip()
            if re.match("For address family: (.*)",value):
                obj = re.match("For address family: (.*)",value)
                dict_value["For address family"] = obj.group(1).strip()
            elif re.match("BGP router identifier (.*), local AS number (\d+)",value):
                obj = re.match("BGP router identifier (.*), local AS number (\d+)",value)
                dict_value["BGP router identifier"] = obj.group(1).strip()
                dict_value["local AS number"] = obj.group(2).strip()
            elif re.match("BGP table version is (\d+)",value):
                obj =  re.match("BGP table version is (\d+)",value)
                dict_value["BGP table version is"] = obj.group(1).strip()
            elif re.match("(\d+) BGP AS-PATH entries",value):
                obj = re.match("(\d+) BGP AS-PATH entries",value)
                dict_value["BGP AS-PATH entries"] = obj.group(1).strip()
            elif re.match("(\d+) BGP Community entries",value):
                obj = re.match("(\d+) BGP Community entries",value)
                dict_value["BGP Community entries"] = obj.group(1).strip()
            elif re.match("(\d+) BGP Prefix entries \(Maximum-prefix:(\d+)\)",value):
                obj = re.match("(\d+) BGP Prefix entries \(Maximum-prefix:(\d+)\)",value)
                dict_value["BGP Prefix entries"] = obj.group(1).strip()
                dict_value["Maximum-prefix"] = obj.group(2).strip()
            elif "Neighbor " in value:
                flag = 1
            elif re.match("Total number of neighbors (\d+), established neighbors (\d+)",value):
                obj = re.match("Total number of neighbors (\d+), established neighbors (\d+)", value)
                dict_value["Total number of neighbors"] = obj.group(1).strip()
                dict_value["established neighbors"] = obj.group(2).strip()
                flag = 0
            if flag == 1 :
                if value.strip() != "" :
                    show_1_list.append(value)
        dict_value_2 = self.dut_show_autoget_blank_list("\n".join(show_1_list),"Neighbor",split_one=1)
        return dict(dict_value.items()+dict_value_2.items())
    def dut_get_show_power_fault(self,show_info):
        dict_value = {}
        power_id_list = []
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if "Chassis-type:" in value:
                list_1 = value.split(":")
                dict_value["Chassis-type"] = list_1[-1].strip()
            elif "Power-id:" in value:
                key_1 = value.split(":")[-1].strip()
                power_id_list.append(key_1)
            elif ":" in value:
                list_2 = value.split(":")
                dict_value[key_1 + "/" + list_2[0].strip()] = list_2[-1].strip()
            elif "Fault_type" in value or "------------" in value:
                pass
            else:
                if len(value.strip())>0:
                    list_3 =  re.split(r'\s{2,}', str(value).strip())
                    dict_value[key_1 + "/" + list_3[0].strip()] = list_3[-1].strip()
        dict_value["power_id_list"] = power_id_list
        return dict_value
    def dut_get_show_power_temperature(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        power_id_list = []
        for value in show_info_list:
            if "Chassis-type:" in value:
                list_1 = value.split(":")
                dict_value["Chassis-type"] = list_1[-1].strip()
            elif "Power-id:" in value:
                key_1 = value.split(":")[-1].strip()
                power_id_list.append(key_1)
            elif ":" in value:
                list_2 = value.split(":")
                dict_value[key_1 + "/" + list_2[0].strip()] = list_2[-1].strip()
        dict_value["power_id_list"] = power_id_list
        return dict_value
    def dut_get_show_queuecounter_statistics_interface_dutport_output(self,show_info):
        dict_value = {}
        queue_id_list = []
        show_info_list = show_info.split("\n")
        for value in show_info_list:
            if "output statistics" in value:
                pass
            elif re.match("\[Queue-id (\d+)\]",value.strip()):
                obj = re.match("\[Queue-id (\d+)\]",value.strip())
                key_1 = obj.group(1).strip()
                queue_id_list.append(key_1)
            elif re.match("Queue name: (.*)",value.strip()):
                obj = re.match("Queue name: (.*)",value.strip())
                dict_value[key_1 + "/Queue name"] = obj.group(1).strip()
            elif re.match("(.*):\s+(\d+) (\S+)\s+(\d+) (\S+)",value.strip()):
                obj = re.match("(.*):\s+(\d+) (\S+)\s+(\d+) (\S+)",value.strip())
                key_2 = obj.group(1).strip()
                key_3 = obj.group(3).strip()
                key_4 = obj.group(5).strip()
                dict_value[key_1 + "/"+key_2+ "/" + key_3] = obj.group(2).strip()
                dict_value[key_1 + "/"+key_2+ "/" + key_4] = obj.group(4).strip()
        dict_value["queue_id_list"] = queue_id_list
        return dict_value
    def dut_get_show_stats_macall_all(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        show_1_list = []
        for value in show_info_list:
            if "----------" in value or "Show " in value:
                pass
            else:
                show_1_list.append(value)
        show_1 = "\n".join(show_1_list)
        dict_value = self.dut_show_autoget_blank_list(show_1,"Gport")
        dict_value_1 = dict_value
        for k,v in dict_value_1.items():
            if "_list" not in k:
                dict_value["Gport_index"] = k.split("/")[0][:-2]
                break
        return dict_value
    def dut_get_show_interfaces_counters_summary(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        show_1_list = []
        show_2_list = []
        flag_1 = 0
        flag_2 = 0
        for value in show_info_list:
            if "InOctets" in value:
                flag_1 = 1
            elif "OutOctets" in value:
                flag_1 = 0
                flag_2 = 1
            if flag_1 == 1:
                show_1_list.append(value)
            elif flag_2 == 1:
                show_2_list.append(value)
        show_1 = "\n".join(show_1_list)
        show_2 = "\n".join(show_2_list)
        dict_value_1 = self.dut_show_autoget_whippletree_form_analysis(show_1,"Interface")
        dict_value_2 = self.dut_show_autoget_whippletree_form_analysis(show_2,"Interface")
        return dict(dict_value_1.items()+dict_value_2.items())
    def dut_get_show_clustermonitor_status(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        show_1_list = []
        show_2_list = []
        flag_1 = 0
        flag_2 = 0
        for value in show_info_list:
            if "Control-Status" in value:
                flag_1 = 1
            elif "Master-Status" in value:
                flag_1 = 0
                flag_2 = 1
            if flag_1 == 1:
                show_1_list.append(value)
            elif flag_2 == 1:
                show_2_list.append(value)
        show_1 = "\n".join(show_1_list)
        show_2 = "\n".join(show_2_list)
        dict_value_1 = self.dut_show_autoget_whippletree_form_analysis(show_1,"Dev","Slot")
        dict_value_2 = self.dut_show_autoget_whippletree_form_analysis(show_2,"Dev","Slot")
        return dict(dict_value_1.items()+dict_value_2.items())
    def dut_get_show_internalinterface_counters(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        show_1_list = []
        show_2_list = []
        flag_1 = 0
        flag_2 = 0
        for value in show_info_list:
            if "InOctets" in value:
                flag_1 = 1
            elif "OutOctets" in value:
                flag_1 = 0
                flag_2 = 1
            if flag_1 == 1:
                show_1_list.append(value)
            elif flag_2 == 1:
                show_2_list.append(value)
        show_1 = "\n".join(show_1_list)
        show_2 = "\n".join(show_2_list)
        dict_value_1 = self.dut_show_autoget_whippletree_form_analysis(show_1,"Internal-interface")
        dict_value_2 = self.dut_show_autoget_whippletree_form_analysis(show_2,"Internal-interface")
        return dict(dict_value_1.items()+dict_value_2.items())
    def dut_get_show_internalinterface_status(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info, "Internal-interface")
    def dut_get_show_internalinterface_counters_errors(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        show_1_list = []
        show_2_list = []
        flag_1 = 0
        flag_2 = 0
        for value in show_info_list:
            if "UnderSize" in value:
                flag_1 = 1
            elif "Jabbers" in value:
                flag_1 = 0
                flag_2 = 1
            if flag_1 == 1:
                show_1_list.append(value)
            elif flag_2 == 1:
                show_2_list.append(value)
        show_1 = "\n".join(show_1_list)
        show_2 = "\n".join(show_2_list)
        dict_value_1 = self.dut_show_autoget_whippletree_form_analysis(show_1,"Internal-interface")
        dict_value_2 = self.dut_show_autoget_whippletree_form_analysis(show_2,"Internal-interface")
        return dict(dict_value_1.items()+dict_value_2.items())
    def dut_get_show_snmp_traprecord(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        id_num = 0
        trap_oid_list = []
        id_list = []
        for value in show_info_list:
            value = value.strip()
            if re.match("SNMP trap record state\s+: (.*)",value.strip()):
                obj = re.match("SNMP trap record state\s+: (.*)",value.strip())
                dict_value["SNMP trap record state"] = obj.group(1).strip()
            elif re.match("SNMP trap record size\s+: (.*)",value.strip()):
                obj = re.match("SNMP trap record size\s+: (.*)",value.strip())
                dict_value["SNMP trap record size"] = obj.group(1).strip()
            elif re.match("id\s+:\s\d+",value):
                obj = re.match("id\s+:\s(\d+)",value)
                #key_1 = obj.group(1).strip()
                id_list.append(obj.group(1).strip())
            elif re.match("trap oid\s+: (.*)",value):
                obj = re.match("trap oid\s+: (.*)",value)
                key_1 = obj.group(1).strip()
                trap_oid_list.append(key_1)
                #dict_value[key_1 + "/trap oid"] = obj.group(1).strip()
            elif re.match("generated time\s+: (\S+) .*",value):
                obj = re.match("generated time\s+: (\S+) .*",value)
                dict_value[key_1 + "/generated time"] = obj.group(1).strip()
            elif re.match("bind var information\s+: (.*)",value):
                obj = re.match("bind var information\s+: (.*)",value)
                if "," in obj.group(1).strip():
                    list_1 = obj.group(1).strip().split(",")
                    for list_1_value in list_1 :
                        if "=" in list_1_value:
                            list_2 = list_1_value.split("=")
                            dict_value[key_1 + "/bind var information/"+list_2[0].strip()] =list_2[1].strip()
        dict_value["id_num"] = str(len(id_list))
        dict_value["trap_oid_list"] = list(set(trap_oid_list))
        return dict_value
    def dut_get_show_grpc_server_information(self,show_info):
        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_ip_ref_route_slot_num(self,show_info):
        star,end,show_len_list,show_info_list_line =  self.dut_common_get_linelist(show_info,"ip/mask")
        return self.dut_show_autoget_form(star, end, "ip/mask", show_len_list, show_info_list_line)
    def dut_get_show_ip_ref_rout_slot_num(self,show_info):
        star,end,show_len_list,show_info_list_line =  self.dut_common_get_linelist(show_info,"ip/mask")
        return self.dut_show_autoget_form(star, end, "ip/mask", show_len_list, show_info_list_line,"next-hop")
    def dut_get_show_ip_ref_rou_slot_num(self,show_info):
        star,end,show_len_list,show_info_list_line =  self.dut_common_get_linelist(show_info,"ip/mask")
        return self.dut_show_autoget_form(star, end, "ip/mask", show_len_list, show_info_list_line,"interface")
    def dut_get_show_ip_ref_adjacency_slot_num(self,show_info):
        show_info = str(show_info).replace("(header data)","")
        star,end,show_len_list,show_info_list_line =  self.dut_common_get_linelist(show_info,"interface")
        return self.dut_show_autoget_form(star, end, "ip", show_len_list, show_info_list_line,title_value2="interface")

    def _dut_get_rg_at_show_info(self,show_info):
        show_info_list = show_info.split("\n")
        show_1_list = []
        flag = 0
        for value in show_info_list:
            if "command execute begin" in value:
                flag = 1
                continue
            elif "command execute end" in value:
                flag = 0
            elif re.match("rg_at/.*", value.strip()):
                continue
            if flag == 1 :
                show_1_list.append(value)
        return "\n".join(show_1_list)
    def dut_get_ut_show_ef_all_pool_info_num(self,show_info):
        show_info = self._dut_get_rg_at_show_info(show_info)
        return self.dut_show_autoget_blank_list(show_info,"NrmlpoolID")
    def dut_get_ut_show_ef_interface_by_ifx_num(self,show_info):
        show_info = self._dut_get_rg_at_show_info(show_info)
        dict_value = {}
        show_info_list = show_info.split("\n")
        for value in show_info_list:
            value = value.strip()
            if re.match("index: (\S+) intf:(\S+)",value):
                obj = re.match("index: (\S+) intf:(\S+)",value)
                dict_value["index"] = obj.group(1).strip()
                dict_value["intf"] = obj.group(2).strip()
            elif re.match("Pri-ip:(\S+), mask:(\S+)",value):
                obj = re.match("Pri-ip:(\S+), mask:(\S+)", value)
                dict_value["Pri-ip"] = obj.group(1).strip()
                dict_value["Pri-ip/mask"] = obj.group(2).strip()
            elif re.match("Second-ip:(\S+), mask:(\S+)",value):
                obj = re.match("Second-ip:(\S+), mask:(\S+)", value)
                dict_value["Second-ip"] = obj.group(1).strip()
                dict_value["Second-ip/mask"] = obj.group(2).strip()
            elif value.count(":") == 1 :
                list_1 = value.split(":")
                dict_value[list_1[0].strip()] = list_1[1].strip()
        return dict_value
    def dut_get_ut_show_ef_topo_by_ifx_num(self,show_info):
        show_info = self._dut_get_rg_at_show_info(show_info)
        dict_value = {}
        show_info_list = show_info.split("\n")
        for value in show_info_list:
            value = value.strip()
            if ":" in value:
                if "," in value:
                    list_1 = value.split(",")
                    for list_1_value in list_1 :
                        if ":" in list_1_value:
                            list_2 = list_1_value.split(":")
                            dict_value[list_2[0].strip()] = list_2[1].strip()
        return dict_value
    def dut_get_ut_show_ef_all_svi(self,show_info):
        show_info = self._dut_get_rg_at_show_info(show_info)
        dict_value = {}
        show_info_list = show_info.split("\n")
        for value in show_info_list:
            value = value.strip()
            if re.match("(SVI \S+): (\S+), ifx:(\S+)",value):
                obj = re.match("(SVI \S+): (\S+), ifx:(\S+)",value)
                dict_value[obj.group(1).strip()] = obj.group(2).strip().strip(".")
                dict_value[obj.group(1).strip() + "/ifx" ] = obj.group(3).strip().strip(".")
        return dict_value
    def dut_get_ut_show_ef_all_ifx(self,show_info):
        show_info = self._dut_get_rg_at_show_info(show_info)
        dict_value = {}
        show_info_list = show_info.split("\n")
        port_list = []
        for value in show_info_list:
            value = value.strip()
            if re.match(".*ifx:\s+(\S+), name:\s+(.*)\s+ef_get_intfcb\(.*",value):
                obj = re.match(".*ifx:\s+(\S+), name:\s+(.*)\s+ef_get_intfcb\(.*",value)
                dict_value[obj.group(2).strip()+"/ifx"] =obj.group(1).strip()
                port_list.append(obj.group(2).strip())
        dict_value["port_list"] = port_list
        return dict_value
    def dut_get_ut_ef_cfks_show_cf_info_num(self,show_info):
        show_info = self._dut_get_rg_at_show_info(show_info)
        dict_value = {}
        show_info_list = show_info.split("\n")
        thread_list = []
        for value in show_info_list:
            value = value.strip()
            if re.match("thread (\S+)\[\S+\] info: stat\[(\S+)\] / mass_num\[(\S+)\]",value):
                obj = re.match("thread (\S+)\[\S+\] info: stat\[(\S+)\] / mass_num\[(\S+)\]",value)
                key_1 = obj.group(1).strip()
                thread_list.append(key_1)
                dict_value[key_1+"/info/stat"] = obj.group(2).strip()
                dict_value[key_1 + "/info/mass_num"] = obj.group(3).strip()
            elif re.match("schedule: sched\[(\S+)\] sched-5S\[(\S+)\] max-cost\[(\S+)\] max-cost-5S\[(\S+)\] Avg-cost-5S\[(\S+)\]",value):
                obj = re.match("schedule: sched\[(\S+)\] sched-5S\[(\S+)\] max-cost\[(\S+)\] max-cost-5S\[(\S+)\] Avg-cost-5S\[(\S+)\]",value)
                dict_value[key_1+"/schedule/sched"] = obj.group(1).strip()
                dict_value[key_1 + "/schedule/sched-5S"] = obj.group(2).strip()
                dict_value[key_1 + "/schedule/max-cost"] = obj.group(3).strip()
                dict_value[key_1 + "/schedule/max-cost-5S"] = obj.group(4).strip()
                dict_value[key_1+"/schedule/Avg-cost-5S"] = obj.group(5).strip()
            elif re.match("tcb_info: out_que_0 = (\S+) out_que_1 = (\S+) in_que_0 = (\S+) in_que_1 = (\S+) mass_num = (\S+) mass\[0\] = (\S+) mass\[1\] = (\S+)",value):
                obj = re.match("tcb_info: out_que_0 = (\S+) out_que_1 = (\S+) in_que_0 = (\S+) in_que_1 = (\S+) mass_num = (\S+) mass\[0\] = (\S+) mass\[1\] = (\S+)",value)
                dict_value[key_1+"/tcb_info/out_que_0"] = obj.group(1).strip()
                dict_value[key_1 + "/tcb_info/out_que_1"] = obj.group(2).strip()
                dict_value[key_1 + "/tcb_info/in_que_0"] = obj.group(3).strip()
                dict_value[key_1 + "/tcb_info/in_que_1"] = obj.group(4).strip()
                dict_value[key_1 + "/tcb_info/mass_num"] = obj.group(5).strip()
                dict_value[key_1 + "/tcb_info/mass_0"] = obj.group(6).strip()
                dict_value[key_1 + "/tcb_info/mass_1"] = obj.group(7).strip()
            elif re.match("Mass Packets statistics: \[(\S+)\]",value):
                obj = re.match("Mass Packets statistics: \[(\S+)\]",value)
                dict_value[key_1 + "/Mass Packets statistics"] = obj.group(1).strip()
            elif re.match("(\S+)\s+:\s+(\S+)\s+(\S+):\s+(\S+)\s+(\S+)\s+:\s+(\S+)",value):
                obj = re.match("(\S+)\s+:\s+(\S+)\s+(\S+):\s+(\S+)\s+(\S+)\s+:\s+(\S+)",value)
                dict_value[key_1 + "/" + obj.group(1).strip()] = obj.group(2).strip()
                dict_value[key_1 + "/" + obj.group(3).strip()] = obj.group(4).strip()
                dict_value[key_1 + "/" + obj.group(5).strip()] = obj.group(6).strip()
            elif re.match("in mode\[(\S+)\],in pool\[(\S+)\],out mode\[(\S+)\],out pool\[(\S+)\]",value):
                obj = re.match("in mode\[(\S+)\],in pool\[(\S+)\],out mode\[(\S+)\],out pool\[(\S+)\]",value)
                dict_value[key_1 + "/in mode"] = obj.group(1).strip()
                dict_value[key_1 + "/in pool"] = obj.group(2).strip()
                dict_value[key_1 + "/out mode"] = obj.group(3).strip()
                dict_value[key_1 + "/out pool"] = obj.group(4).strip()
            elif re.match("attr\[(\S+)\],mass token\[(\S+)\],redo round\[(\S+)\],round token\[(\S+)\],sched token\[(\S+)\]",value):
                obj = re.match("attr\[(\S+)\],mass token\[(\S+)\],redo round\[(\S+)\],round token\[(\S+)\],sched token\[(\S+)\]",value)
                dict_value[key_1 + "/attr"] = obj.group(1).strip()
                dict_value[key_1 + "/mass token"] = obj.group(2).strip()
                dict_value[key_1 + "/redo round"] = obj.group(3).strip()
                dict_value[key_1 + "/round token"] = obj.group(4).strip()
                dict_value[key_1 + "/sched token"] = obj.group(5).strip()
            elif re.match("mass func\[(\S+)\],mass mode\[(\S+)\],rem chain\[(\S+)\]",value):
                obj = re.match("mass func\[(\S+)\],mass mode\[(\S+)\],rem chain\[(\S+)\]",value)
                dict_value[key_1 + "/mass func"] = obj.group(1).strip()
                dict_value[key_1 + "/mass mode"] = obj.group(2).strip()
                dict_value[key_1 + "/rem chain"] = obj.group(3).strip()
            elif re.match("Get pkts: (\S+)s+ToPF pkts: (\S+)s+Sched cnt: (\S+)",value):
                obj = re.match("Get pkts: (\S+)s+ToPF pkts: (\S+)s+Sched cnt: (\S+)",value)
                dict_value["Get pkts"] = obj.group(1).strip()
                dict_value["ToPF pkts"] = obj.group(2).strip()
                dict_value["Sched cnt"] = obj.group(3).strip()
            elif re.match("(.*statistics):(.*)",value):
                obj = re.match("(.*statistics):(.*)",value)
                dict_value[obj.group(1).strip()] = obj.group(2).strip()
        dict_value["thread_list"] = thread_list
        return dict_value
    def dut_get_ut_efd_show_cpu_bind(self,show_info):
        show_info = self._dut_get_rg_at_show_info(show_info)
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if ":" in value :
                list_1 = value.split(":",1)
                dict_value[list_1[0].strip()] = list_1[1].strip()
        return dict_value
    def dut_get_ut_efd_show_prod_para(self,show_info):
        show_info = self._dut_get_rg_at_show_info(show_info)
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if ":" in value:
                list_1 = value.split(":", 1)
                dict_value[list_1[0].strip()] = list_1[1].strip()
        return dict_value
    def dut_get_ut_show_port_cap(self,show_info):
        show_info = self._dut_get_rg_at_show_info(show_info)
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:

            value = value.strip()
            if re.match("\<num=(\d+)\>\s+is_inner=(\d+)\s+slot=(\d+)\s+lport=(\d+)\s+bport=(\d+)\s+lphyid=(\S+)\s+peer_lphyid=(\S+)\s+proto_status=(\S+)",value):
                obj = re.match("\<num=(\d+)\>\s+is_inner=(\d+)\s+slot=(\d+)\s+lport=(\d+)\s+bport=(\d+)\s+lphyid=(\S+)\s+peer_lphyid=(\S+)\s+proto_status=(\S+)",value)
                key_1 = obj.group(1).strip()
                key_2 = obj.group(2).strip()
                key_3 = key_1 + "/" + key_2
                dict_value[key_3 + "/slot"] = obj.group(3).strip()
                dict_value[key_3 + "/lport"] = obj.group(4).strip()
                dict_value[key_3 + "/bport"] = obj.group(5).strip()
                dict_value[key_3 + "/lphyid"] = obj.group(6).strip()
                dict_value[key_3 + "/peer_lphyid"] = obj.group(7).strip()
                dict_value[key_3 + "/peer_lphyid_2"] = str(obj.group(7).strip())[-2:]
                dict_value[key_3 + "/proto_status"] = obj.group(8).strip()
            elif value.count("=") == 1 :
                list_1 = value.split("=")
                if len(list_1) == 2 :
                    dict_value[key_3 + "/" + list_1[0].strip()] = list_1[1].strip()
                elif len(list_1) == 1 :
                    dict_value[key_3 + "/" + list_1[0].strip()] = ""
            elif re.match("\<config\> -----> type =(.*) hg2mod =(.*) speed =(.*) ipg =(.*)",value):
                obj = re.match("\<config\> -----> type =(.*) hg2mod =(.*) speed =(.*) ipg =(.*)",value)
                dict_value[key_3 + "/type"] = obj.group(1).strip()
                dict_value[key_3 + "/hg2mod"] = obj.group(2).strip()
                dict_value[key_3 + "/speed"] = obj.group(3).strip()
                dict_value[key_3 + "/ipg"] = obj.group(4).strip()
            elif re.match("is_trunk=(.*) trunk_id=(.*)",value):
                obj = re.match("is_trunk=(.*) trunk_id=(.*)", value)
                dict_value[key_3 + "/is_trunk"] = obj.group(1).strip()
                dict_value[key_3 + "/trunk_id"] = obj.group(2).strip()
            elif re.match("config_time:(.*)\(s\) , (.*)\(us\)",value):
                obj = re.match("config_time:(.*)\(s\) , (.*)\(us\)", value)
                dict_value[key_3 + "/config_time/s"] = obj.group(1).strip()
                dict_value[key_3 + "/config_time/us"] = obj.group(2).strip()
        return dict_value
    def dut_get_ut_check_efb_leak(self,show_info):
        show_info = self._dut_get_rg_at_show_info(show_info)
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        NrmlpoolID = ""
        bufID = ""
        alloc_time = ""
        now_time = ""
        dict_value["NrmlpoolID"] = NrmlpoolID
        dict_value["bufID"] = bufID
        dict_value["alloc_time"] = alloc_time
        dict_value["now_time"] = now_time
        for value in show_info_list:
            value = value.strip()
            if re.match("(\d+)\s+(\d+)\s+(\d+)\s+(\d+)",value):
                obj = re.match("(\d+)\s+(\d+)\s+(\d+)\s+(\d+)",value)
                NrmlpoolID = obj.group(1).strip()
                bufID = obj.group(2).strip()
                alloc_time = obj.group(3).strip()
                now_time = obj.group(4).strip()
                dict_value["NrmlpoolID"] = NrmlpoolID
                dict_value["bufID"] = bufID
                dict_value["alloc_time"] = alloc_time
                dict_value["now_time"] = now_time
                break
        return dict_value
    def dut_get_ut_check_rte_ring_num(self,show_info):
        show_info = self._dut_get_rg_at_show_info(show_info)
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        for value in show_info_list:
            value = value.strip()
            if re.match("(\S+)=(\S+)",value):
                obj = re.match("(\S+)=(\S+)",value)
                dict_value[obj.group(1).strip()] = obj.group(2).strip()
        return dict_value
    def dut_get_ut_alloc_efb_num_num(self,show_info):
        show_info = self._dut_get_rg_at_show_info(show_info)
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        for value in show_info_list:
            if "," in value:
                list_1 = value.split(",")
                for list_1_value in list_1:
                    if "=" in list_1_value:
                        list_2 = list_1_value.split("=")
                        dict_value[list_2[0].strip()] = list_2[1].strip()
            elif "=" in value:
                list_2 = value.split("=")
                dict_value[list_2[0].strip()] = list_2[1].strip()
            elif re.match("buf chain : (.*)",value.strip()):
                list_3 = re.match("buf chain : (.*)",value.strip()).group(1).strip().split()
                dict_value["buf chain"] = list_3
        return dict_value
    def dut_get_ut_show_ef_pool_buf_info_num_num(self,show_info):
        show_info = self._dut_get_rg_at_show_info(show_info)
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        for value in show_info_list:
            if re.match("start = (\d+)\s+,end = (\d+)\s+,poolID = (\d+)\s+efbhead = (\d+)",value.strip()):
                obj = re.match("start = (\d+)\s+,end = (\d+)\s+,poolID = (\d+)\s+efbhead = (\d+)",value.strip())
                dict_value["start"] = obj.group(1).strip()
                dict_value["end"] = obj.group(2).strip()
                dict_value["poolID"] = obj.group(3).strip()
                dict_value["efbhead"] = obj.group(4).strip()
            elif re.match("=====Packet\(efb: (\S+), bufid: (\S+)\) Data====",value.strip()):
                obj = re.match("=====Packet\(efb: (\S+), bufid: (\S+)\) Data====",value.strip())
                dict_value["efb"] = obj.group(1).strip()
                dict_value["bufid"] = obj.group(2).strip()
            elif "," in value:
                list_1 = value.split(",")
                for list_1_value in list_1:
                    if "=" in list_1_value:
                        list_2 = list_1_value.split("=")
                        print list_2
                        dict_value[list_2[0].strip()] = list_2[1].strip().strip(".")
            elif re.match("magic\s+:(\d+)",value.strip()):
                obj = re.match("magic\s+:(\d+)",value.strip())
                dict_value["magic"] = obj.group(1).strip()

        return dict_value
    def dut_get_ut_show_ef_pool_detail_info_num_num(self,show_info):
        show_info = self._dut_get_rg_at_show_info(show_info)
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        for value in show_info_list:
            value = value.strip()
            if re.match("(\d+)\s+(\d+)\s+(\d+)\s+(\d+)",value):
                obj = re.match("(\d+)\s+(\d+)\s+(\d+)\s+(\d+)",value)
                dict_value["NrmlpoolID"] = obj.group(1).strip()
                dict_value["pay_size"] = obj.group(2).strip()
                dict_value["available"] = obj.group(3).strip()
                dict_value["total"] = obj.group(4).strip()
            elif re.match("NrmlpoolID \d+ MemBlocks (\d+): (.*)",value):
                obj = re.match("NrmlpoolID \d+ (MemBlocks \d+): (.*)",value)
                dict_value[obj.group(1).strip()] = obj.group(2).strip()
            elif re.match("idx\s+(\d+): (.*)",value):
                obj = re.match("idx\s+(\d+): (.*)",value)
                dict_value["dex "+obj.group(1).strip()] = obj.group(2).strip().split()
        return dict_value
    def dut_get_ut_show_buf_copy_count_num(self,show_info):
        show_info = self._dut_get_rg_at_show_info(show_info)
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        key_list = []
        value_list = []
        for value in show_info_list:
            value = value.strip()
            if re.match("[RT]XQ:(.*)",value):
                obj = re.match("[RT]XQ:(.*)",value)
                key_list = obj.group(1).strip().split()
                continue
            elif re.match("\d+\s+.*",value):
                value_list = value.strip().split()
                for i in range(len(key_list)):
                    dict_value[key_list[i]] = value_list[i]
        return dict_value
    def dut_get_ut_dump_ifx_tbl(self,show_info):
        show_info = self._dut_get_rg_at_show_info(show_info)
        show_info_list = self.dut_get_start_show_info(show_info)
        new_list = []
        for value in show_info_list:
            value = value.replace("|","    ").strip()
            new_list.append(value)
        new_show_info = "\n".join(new_list)
        return self.dut_show_autoget_blank_list(new_show_info,"ifx")
    def dut_get_ut_show_ef_inner_by_slot_num(self,show_info):
        show_info = self._dut_get_rg_at_show_info(show_info)
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        for value in show_info_list:
            if ":" in value:
                list_1 = value.split(":")
                dict_value[list_1[0].strip()] = list_1[1].strip()
        return dict_value
    def dut_get_ut_debug_start_all(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        flag = 0
        for value in show_info_list:
            if "efd to ctrl" in value:
                flag = 1
            elif "ctrl to efd" in value:
                flag = 0
            if flag == 1:
                if re.match("magic\s*:(\d+)",value.strip()):
                    obj = re.match("magic\s*:(\d+)",value.strip())
                    dict_value["magic"] = obj.group(1).strip()
                elif re.match("=====Packet\(efb: (\S+), bufid: (\d+)\) Data====",value):
                    obj = re.match("=====Packet\(efb: (\S+), bufid: (\d+)\) Data====",value)
                    dict_value["efb"] = obj.group(1).strip()
                    dict_value["bufid"] = obj.group(2).strip()
                elif "," in value:
                    list_1 = value.strip().split(",")
                    for list_1_value in list_1:
                        if "=" in list_1_value:
                            list_2 = list_1_value.split("=")
                            dict_value[list_2[0].strip()] = list_2[1].strip().strip(".")
        return dict_value
    def dut_get_ut_rnfp_count_show(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        for value in show_info_list:
            if re.match("RNFP is (.*)",value.strip()):
                obj = re.match("RNFP is (.*)",value.strip())
                dict_value["RNFP"] = obj.group(1).strip()
            elif re.match("(.*) pass pkts (\S+) drop pkts (\S+) cfg (\S+) pps",value):
                obj = re.match("(.*) pass pkts (\S+) drop pkts (\S+) cfg (\S+) pps",value)
                dict_value[obj.group(1).strip() + "/pass pkts"] = obj.group(2).strip()
                dict_value[obj.group(1).strip() + "/drop pkts"] = obj.group(3).strip()
                dict_value[obj.group(1).strip() + "/cfg"] = obj.group(4).strip()
        return dict_value
    def dut_get_ut_showinterfacestatus_all(self,show_info):
        show_info = self._dut_get_rg_at_show_info(show_info)
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_vlaue = {}
        show_list = []
        show_info_2 = "\n".join(show_info_list)
        return self.dut_show_autoget_whippletree_form_analysis(show_info_2,"Oob-interface")

    def dut_get_show_ip_ref_route_fast(self,show_info):
        return self.dut_show_autoget_blank_list(show_info,"ip/mask",value_title_2="interface")
    def dut_get_show_ipv6_ref_route_fast(self,show_info):
        return self.dut_show_autoget_blank_list(show_info,"prefix/len",value_title_2="interface")
    def dut_get_show_efd_efinterface_dutport(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("index: (\d+) \(device ID:(\d+), global ID:(\d+), local ID:(\d+)\)",value.strip()):
                obj = re.match("index: (\d+) \(device ID:(\d+), global ID:(\d+), local ID:(\d+)\)",value.strip())
                dict_value["index"] = obj.group(1).strip()
                dict_value["device ID"] = obj.group(2).strip()
                dict_value["local ID"] = obj.group(3).strip()
            elif ":" in value:
                list_1 = value.split(":",1)
                dict_value[list_1[0].strip()] = list_1[1].strip()
        return dict_value
    def dut_get_show_efd_efinterface_num(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("index: (\d+) \(device ID:(\d+), global ID:(\d+), local ID:(\d+)\)",value.strip()):
                obj = re.match("index: (\d+) \(device ID:(\d+), global ID:(\d+), local ID:(\d+)\)",value.strip())
                dict_value["index"] = obj.group(1).strip()
                dict_value["device ID"] = obj.group(2).strip()
                dict_value["local ID"] = obj.group(3).strip()
            elif ":" in value:
                list_1 = value.split(":",1)
                dict_value[list_1[0].strip()] = list_1[1].strip()
        return dict_value
    def dut_get_show_efd_slot_num_efinterface_num(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("index: (\d+) \(device ID:(\d+), global ID:(\d+), local ID:(\d+)\)",value.strip()):
                obj = re.match("index: (\d+) \(device ID:(\d+), global ID:(\d+), local ID:(\d+)\)",value.strip())
                dict_value["index"] = obj.group(1).strip()
                dict_value["device ID"] = obj.group(2).strip()
                dict_value["local ID"] = obj.group(3).strip()
            elif ":" in value:
                list_1 = value.split(":",1)
                dict_value[list_1[0].strip()] = list_1[1].strip()
        return dict_value
    def dut_get_show_mac_dynamic(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info,"MAC Address")
    def dut_get_show_bgp_ipv4_unicast_vrf_word_summary(self,show_info):
        show_line_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        for value in show_line_list:
            value = value.strip()
            if "For address family" in value:
                list1 = value.split(":")
                dict_value[list1[0].strip()] = list1[1].strip()
            elif re.match("BGP router identifier(.*), local AS number (.*)", value):
                obj1 = re.match("BGP router identifier(.*), local AS number (.*)", value)
                dict_value["BGP router identifier"] = obj1.group(1).strip()
                dict_value["local AS number"] = obj1.group(2).strip()
            elif "BGP VRF vrf1 Route Distinguisher" in value:
                list1 = value.split(":", 1)
                dict_value[list1[0].strip()] = list1[1].strip()
            elif "BGP table version" in value:
                list1 = value.split("is")
                dict_value[list1[0].strip()] = list1[1].strip()
            elif re.match("(.*)BGP AS-PATH entries", value):
                obj1 = re.match("(.*)BGP AS-PATH entries", value)
                dict_value["BGP AS-PATH entries"] = obj1.group(1).strip()
            elif re.match("(.*)BGP Community entries", value):
                obj1 = re.match("(.*)BGP Community entries", value)
                dict_value["BGP AS-PATH entries"] = obj1.group(1).strip()
            elif re.match("(.*)BGP Prefix entries \(Maximum-prefix:(.*)\)", value):
                obj1 = re.match("(.*)BGP Prefix entries \(Maximum-prefix:(.*)\)", value)
                dict_value["BGP Prefix entries"] = obj1.group(1).strip()
                dict_value["Maximum-prefix"] = obj1.group(2).strip()
            elif re.match("Total number of neighbors(.*), established neighbors(.*)", value):
                obj1 = re.match("Total number of neighbors(.*), established neighbors(.*)", value)
                dict_value["Total number of neighbors"] = obj1.group(1).strip()
                dict_value["established neighbors"] = obj1.group(2).strip()
        dict_value2 = self.dut_show_autoget_blank_list(show_info, "Neighbor", "Total number of neighbors",split_one="1")
        return dict(dict_value.items() + dict_value2.items())
    def dut_get_show_bgp_ipv6_unicast_vrf_word_summary(self,show_info):
        return self.dut_get_show_bgp_ipv4_unicast_vrf_word_summary(show_info)
    def dut_get_show_ip_pim_sparsemode_interface_dutport_detail(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            value = value.strip()
            if re.match("Address (\S+), DR (\S+)",value):
                obj = re.match("Address (\S+), DR (\S+)",value)
                dict_value["Address"] = obj.group(1)
                dict_value["DR"] = obj.group(2)
            elif re.match("Hello period (\S+) seconds\(default: \S+ seconds\), Next Hello in (\S+) seconds",value):
                obj = re.match("Hello period (\S+) seconds\(default: \S+ seconds\), Next Hello in (\S+) seconds",value)
                dict_value["Hello period"] = obj.group(1)
                dict_value["Next Hello"] = obj.group(2)
            elif re.match("Triggered Hello period (\S+) seconds(default: \S+ seconds)",value):
                obj = re.match("Triggered Hello period (\S+) seconds(default: \S+ seconds)",value)
                dict_value["Triggered Hello period"] = obj.group(1)
            elif re.match("Subvlan config, disable_config\((\S+)\), all_config\((\S+)\), vlan_config\((\S+)\)",value):
                obj = re.match("Subvlan config, disable_config\((\S+)\), all_config\((\S+)\), vlan_config\((\S+)\)",value)
                dict_value["disable_config"] = obj.group(1)
                dict_value["all_config"] = obj.group(2)
                dict_value["vlan_config"] = obj.group(3)
            elif re.match("Subvlan id (\S+)",value):
                obj = re.match("Subvlan id (\S+)",value)
                dict_value["Subvlan id"] = obj.group(1)
            elif re.match("Propagation Delay: (\S+) milliseconds, default: (\S+) milliseconds",value):
                obj = re.match("Propagation Delay: (\S+) milliseconds, default: (\S+) milliseconds",value)
                dict_value["Propagation Delay"] = obj.group(1)
                dict_value["Propagation Delay/default"] = obj.group(2)
            elif re.match("Override interval: (\S+) milliseconds, default: (\S+) milliseconds",value):
                obj = re.match("Override interval: (\S+) milliseconds, default: (\S+) milliseconds",value)
                dict_value["Override interval"] = obj.group(1)
                dict_value["Override interval/default"] = obj.group(2)
            elif re.match("T-bit: (\S+)",value):
                obj = re.match("T-bit: (\S+)",value)
                dict_value["T-bit"] = obj.group(1)
            elif re.match("DR priority\(on\): (\S+), default: (\S+)",value):
                obj = re.match("DR priority\(on\): (\S+), default: (\S+)",value)
                dict_value["DR priority(on)"] = obj.group(1)
                dict_value["DR priority(on)/default"] = obj.group(2)
            elif re.match("Gen ID: (\S+)",value):
                obj = re.match("Gen ID: (\S+)",value)
                dict_value["Gen ID"] = obj.group(1)
            elif re.match("Propagation Delay: (\S+) milliseconds",value):
                obj = re.match("Propagation Delay: (\S+) milliseconds",value)
                dict_value["Propagation Delay"] = obj.group(1)
            elif re.match("Override interval: (\S+) milliseconds",value):
                obj = re.match("Override interval: (\S+) milliseconds",value)
                dict_value["Override interval"] = obj.group(1)
            elif re.match("TTL for multicast forwarding: (\S+)",value):
                obj = re.match("TTL for multicast forwarding: (\S+)",value)
                dict_value["TTL for multicast forwarding"] = obj.group(1)
        return dict_value
    def dut_get_show_merge_summary(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Port")
    def dut_get_show_srv6_policy_policyname_word(self,show_info):
        dict_value = {}
        key_1 = ""
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            value_1 = value
            value = value.strip()

            if re.match("Segment routing ipv6 policy is (.*)",value):
                obj = re.match("Segment routing ipv6 policy is (.*)",value)
                dict_value["Segment routing ipv6 policy is"] = obj.group(1).strip()
            elif re.match("Oam Relay is (.*)",value):
                obj = re.match("Oam Relay is (.*)",value)
                dict_value["Oam Relay is"] = obj.group(1).strip()
            elif re.match("BGP-LS is (.*)",value):
                obj = re.match("BGP-LS is (.*)",value)
                dict_value["BGP-LS is"] = obj.group(1).strip()
            elif re.match("Router Id IPv6 :(.*)",value):
                obj = re.match("Router Id IPv6 :(.*)",value)
                dict_value["Router Id IPv6"] = obj.group(1).strip()
            elif re.match("Global BFD Echo : (.*), Global SBFD : (.*)",value):
                obj = re.match("Global BFD Echo : (.*), Global SBFD : (.*)",value)
                dict_value["Global BFD Echo"] = obj.group(1).strip()
                dict_value["Global SBFD"] = obj.group(1).strip()
            elif re.match("PolicyName :(.*)",value):
                obj = re.match("PolicyName :(.*)",value)
                dict_value["PolicyName"] = obj.group(1).strip()
            elif re.match("Candidate-path Preference : (.*)",value):
                key_1 = re.match("Candidate-path Preference : (.*)",value).group(1).strip()
            elif value.count(":") >= 2 and len(value) > 55 :
                str1 = value_1[0:55]
                str2 = value_1[55:]
                if ":" in str1:
                    list_1 = str1.split(":",1)
                    if key_1 != "":
                        dict_value[key_1+"/"+list_1[0].strip()] = list_1[1].strip()
                    else:
                        dict_value[list_1[0].strip()] = list_1[1].strip()
                if ":" in str2:
                    list_2 = str2.split(":",1)
                    if key_1 != "":
                        dict_value[key_1+"/"+list_2[0].strip()] = list_2[1].strip()
                    else:
                        dict_value[list_2[0].strip()] = list_2[1].strip()
        return dict_value
    def dut_get_show_bgp_bmp_summary(self,show_info):
        return self.dut_show_autoget_blank_list(show_info,"Host")
    def dut_get_show_bgp_bmp_neighbor(self,show_info):
        return self.dut_show_autoget_blank_list(show_info,"Neighbor")
    def dut_get_show_ip_mroute(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        flag = 0
        Outgoing_interface_list = []
        for value in show_info_list:
            if re.match("\((.*)\), uptime (.*), stat expires (.*)",value):
                obj = re.match("\((.*)\), uptime (.*), stat expires (.*)",value)
                ip_list = "".join(obj.group(1).split(",")).split()
                dict_value["ip_list"] = ip_list
                dict_value["uptime"] = obj.group(2).strip()
                dict_value["stat expires"] = obj.group(3).strip()
            elif re.match("Owner (.*), Flags: (.*)",value):
                obj = re.match("Owner (.*), Flags: (.*)",value)
                dict_value["Owner"] = obj.group(1).strip()
                dict_value["Flags"] = obj.group(2).strip()
            elif re.match("Incoming interface: (.*)",value):
                obj = re.match("Incoming interface: (.*)",value)
                dict_value["Incoming interface"] = obj.group(1).strip()
            elif "Outgoing interface list" in value:
                flag = 1
                Outgoing_interface_list = []
                continue
            if flag == 1 and re.match(".* \(\d+\)",value):
                obj = re.match("(.*) \(\d+\)",value)
                Outgoing_interface_list.append(obj.group(1).strip())
            elif flag == 1 and not re.match(".* \(\d+\)",value):
                flag = 0
        dict_value["Outgoing_interface_list"] = Outgoing_interface_list
        return dict_value
    def dut_get_show_flowspec_interfacegroup(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("Interface group \d+: (.*)",value):
                obj = re.match("(Interface group \d+): (.*)",value)
                dict_value[obj.group(1).strip()] = obj.group(2).strip().split()
        return dict_value
    def dut_get_show_ip_route_vrf_word_fastreroute(self,show_info):
        dict_value = {}
        via_ip_list=[]
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if "via" in value:
                if re.match("(\w+.*)\s+(\S+)\[(\w+)\]\s+via\s+(\S+), \S+,(.*)",value):
                    obj1 = re.match("(\w+.*)\s+(\S+)\[(\w+)\]\s+via\s+(\S+), \S+,(.*)",value)
                    Codes = obj1.group(1).strip()
                    ip = obj1.group(2).strip()
                    ststus = obj1.group(3).strip()
                    via_ip = obj1.group(4).strip()
                    via_ip_list.append(via_ip.strip())
                    intf = obj1.group(5).strip()
                    dict_value[ip+"/"+"codes"] = Codes
                    dict_value[ip+"/"+via_ip+"/"+"status"] = ststus
                    dict_value[ip+"/"+via_ip+"/"+"interface"] = intf
                elif re.match("\s+\[(\w+)\]\s+via\s+(\S+), \S+,(.*)",value):
                    obj2 = re.match("\s+\[(\w+)\]\s+via\s+(\S+), \S+,(.*)",value)
                    ststus = obj2.group(1).strip()
                    via_ip = obj2.group(2).strip()
                    via_ip_list.append(via_ip.strip())
                    intf = obj2.group(3).strip()
                    dict_value[ip+"/"+via_ip+"/"+"status"] = ststus
                    dict_value[ip+"/"+via_ip+"/"+"interface"] = intf
        dict_value["via_list"] = via_ip_list
        return dict_value
    def dut_get_show_ipv6_route_vrf_word_fastreroute(self,show_info):
        dict_value = {}
        via_ip_list=[]
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if "via" in value:
                if re.match("(\w+.*)\s+(\S+)\[(\w+)\]\s+\[\S+\]\s+via\s+(\S+),(.*)",value):
                    obj1 = re.match("(\w+.*)\s+(\S+)\[(\w+)\]\s+\[\S+\]\s+via\s+(\S+),(.*)",value)
                    Codes = obj1.group(1).strip()
                    ip = obj1.group(2).strip()
                    ststus = obj1.group(3).strip()
                    via_ip = obj1.group(4).strip()
                    via_ip_list.append(via_ip.strip())
                    intf = obj1.group(5).strip()
                    dict_value[ip+"/"+"codes"] = Codes
                    dict_value[ip+"/"+ststus+"/"+"via"] = via_ip
                    dict_value[ip+"/"+ststus+"/"+"interface"] = intf
                elif re.match("\s+\[(\w+)\]\s+\[\S+\]\s+via\s+(\S+),(.*)",value):
                    obj2 = re.match("\s+\[(\w+)\]\s+\[\S+\]\s+via\s+(\S+),(.*)",value)
                    ststus = obj2.group(1).strip()
                    via_ip = obj2.group(2).strip()
                    via_ip_list.append(via_ip.strip())
                    intf = obj2.group(3).strip()
                    dict_value[ip+"/"+ststus+"/"+"via"] = via_ip
                    dict_value[ip+"/"+ststus+"/"+"interface"] = intf
        dict_value["via_list"] = via_ip_list
        return dict_value
    def dut_get_show_ip_pim_sparsemode_interface(self,show_info):
        star,end,show_len_list,show_info_list_line = self.dut_common_get_linelist_improve(show_info,"Address")
        return self.dut_show_autoget_form(star,end,"Address",show_len_list,show_info_list_line)
    def dut_get_show_interfaces_faultinfo(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        list_1 = []
        for value in show_info_list:
            if re.match("===*(Interface .*\d+)==*",value):
                if len(list_1) > 0 :
                    dict_value[key_1] = list_1
                    list_1 = []
                obj = re.match("===*(Interface .*\d+)==*",value)
                key_1 = obj.group(1).strip()
            elif "Fault" in value:
                list_1.append(value.strip().split("  ")[0])
        return dict_value
    def dut_get_show_ip_ospf_segmentrouting_mappingserver_prefixsidmap(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        new_list = []
        flag = 0
        for value in show_info_list:
            if re.match("OSPF Router with ID \((\S+)\) \(Process ID (\d+)\)",value.strip()):
                if len(new_list) > 0 :
                    new_show = "\n".join(new_list)
                    dict_value_1 = self.dut_show_autoget_blank_list(new_show,"Destination")
                    for k ,v in dict_value_1.items():
                        dict_value[key_1+"/"+k] = v
                new_list = []
                flag = 0
                key_1 = re.match("OSPF Router with ID \((\S+)\) \(Process ID (\d+)\)",value.strip()).group(2).strip()
            elif "Mapping-Server Information" in value:
                pass
            elif "Destination" in value:
                flag = 1
            if flag == 1 :
                new_list.append(value)
        if len(new_list) > 0:
            new_show = "\n".join(new_list)
            dict_value_1 = self.dut_show_autoget_blank_list(new_show, "Destination")
            for k, v in dict_value_1.items():
                dict_value[key_1 + "/" + k] = v
        return dict_value
    def dut_get_show_mls_qos_ratelimit_interface_dutport(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("rate limit (\S+) Kbps = (\d+) burst = (\d+) percentage = (\d+)",value.strip()):
                obj = re.match("rate limit (\S+) Kbps = (\d+) burst = (\d+) percentage = (\d+)",value.strip())
                dict_value[obj.group(1)+"/Kbps"] = obj.group(2)
                dict_value[obj.group(1) + "/burst"] = obj.group(3)
                dict_value[obj.group(1) + "/percentage"] = obj.group(4)
        return dict_value
    def dut_get_show_qos_statistics_interface_dutport_input(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("Passed: (\d+) bytes, (\d+) packets", value.strip()):
                obj = re.match("Passed: (\d+) bytes, (\d+) packets", value.strip())
                dict_value["Passed/bytes"] = obj.group(1)
                dict_value["Passed/packets"] = obj.group(2)
        return dict_value
    def dut_get_show_ip_route_static(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("(\S+)\s+(\S+/\d+) \[(\d+)/(\d+)\] via (\S+), \d+:\d+:\d+",value.strip()):
                obj = re.match("(\S+)\s+(\S+/\d+) \[(\d+)/(\d+)\] via (\S+), \d+:\d+:\d+",value.strip())
                ip  = obj.group(2).strip()
                dict_value[ip + "/status"] = obj.group(1).strip()
                dict_value[ip + "/AD"] = obj.group(3).strip()
                dict_value[ip + "/metric"] = obj.group(4).strip()
                dict_value[ip + "/via"] = obj.group(5).strip()
            elif re.match("(\S+)\s+(\S+/\d+) \[(\d+)/(\d+)\] via (\S+), (.*), \d+:\d+:\d+",value.strip()):
                obj = re.match("(\S+)\s+(\S+/\d+) \[(\d+)/(\d+)\] via (\S+), (.*), \d+:\d+:\d+",value.strip())
                ip = obj.group(2).strip()
                dict_value[ip + "/status"] = obj.group(1).strip()
                dict_value[ip + "/AD"] = obj.group(3).strip()
                dict_value[ip + "/metric"] = obj.group(4).strip()
                dict_value[ip + "/via"] = obj.group(5).strip()
                dict_value[ip + "/interface"] = obj.group(6).strip()
        return dict_value
    def dut_get_show_srv6_policy(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        key_2 = ""
        key_1 = ""
        for value in show_info_list:
            if re.match("Segment Routing Ipv6 is (.*), Oam Relay is (\S+)",value):
                obj = re.match("Segment Routing Ipv6 is (.*), Oam Relay is (\S+)",value)
                dict_value["Segment Routing Ipv6"] = obj.group(1).strip()
                dict_value["Oam Relay"] = obj.group(2).strip()
            elif re.match("Segment Routing Ipv6 is (.*)",value):
                obj = re.match("Segment Routing Ipv6 is (.*)",value)
                dict_value["Segment Routing Ipv6"] = obj.group(1).strip()
            elif re.match("Backup Hot-Standby is (\S+), Switch Delay Time (\S+), Delete Delay Time (\S+)",value):
                obj = re.match("Backup Hot-Standby is (\S+), Switch Delay Time (\S+), Delete Delay Time (\S+)",value)
                dict_value["Backup Hot-Standby"] = obj.group(1).strip()
                dict_value["Switch Delay Time"] = obj.group(2).strip()
                dict_value["Delete Delay Time"] = obj.group(3).strip()
            elif re.match("Backup Hot-Standby is (\S+), Traffic-Statistics is (\S+), BGP-LS is (\S+)",value):
                obj = re.match("Backup Hot-Standby is (\S+), Traffic-Statistics is (\S+), BGP-LS is (\S+)",value)
                dict_value["Backup Hot-Standby"] = obj.group(1).strip()
                dict_value["Traffic-Statistics"] = obj.group(2).strip()
                dict_value["BGP-LS"] = obj.group(3).strip()
            elif re.match("Traffic-Statistics is (\S+), Oam Relay is (\S+), BGP-LS is (\S+)",value):
                obj = re.match("Traffic-Statistics is (\S+), Oam Relay is (\S+), BGP-LS is (\S+)",value)
                dict_value["Traffic-Statistics"] = obj.group(1).strip()
                dict_value["Oam Relay"] = obj.group(2).strip()
                dict_value["BGP-LS"] = obj.group(3).strip()
            elif re.match("Encap Mode (\S+), Encaps Local-End.X is (\S+)",value):
                obj = re.match("Encap Mode (\S+), Encaps Local-End.X is (\S+)",value)
                dict_value["Encap Mode"] = obj.group(1).strip()
                dict_value["Encaps Local-End.X"] = obj.group(2).strip()
            elif re.match("Encap IPv6 is (.*), Encap IPv6 (\S+)",value):
                obj = re.match("Encap IPv6 is (.*), Encap IPv6 (\S+)",value)
                dict_value["Encap IPv6 is"] = obj.group(1).strip()
                dict_value["Encap IPv6"] = obj.group(2).strip()
            elif re.match("Router Id IPv6 is (.*), Router Id IPv6 (\S+)",value):
                obj = re.match("Router Id IPv6 is (.*), Router Id IPv6 (\S+)",value)
                dict_value["Router Id IPv6 is"] = obj.group(1).strip()
                dict_value["Router Id IPv6"] = obj.group(2).strip()
            elif re.match("Encaps Source Address is (.*), Encaps Source Address (\S+)",value):
                obj = re.match("Encaps Source Address is (.*), Encaps Source Address (\S+)",value)
                dict_value["Encaps Source Address is"] = obj.group(1).strip()
                dict_value["Encaps Source Address"] = obj.group(2).strip()
            elif re.match("BSID Register Mode is (\S+)", value):
                obj = re.match("BSID Register Mode is (\S+)", value)
                dict_value["BSID Register Mode"] = obj.group(1).strip()
            elif re.match("BSID Register Mode (\S+)",value):
                obj = re.match("BSID Register Mode (\S+)",value)
                dict_value["BSID Register Mode"] = obj.group(1).strip()
            elif re.match("Segment-List Encaps Mode is (\S+), Encaps Local-End is (\S+), Encaps Local-End.X is (\S+)",value):
                obj = re.match("Segment-List Encaps Mode is (\S+), Encaps Local-End is (\S+), Encaps Local-End.X is (\S+)",value)
                dict_value["Segment-List Encaps Mode"] = obj.group(1).strip()
                dict_value["Encaps Local-End"] = obj.group(2).strip()
                dict_value["Encaps Local-End.X"] = obj.group(3).strip()
            elif re.match("Candidate-path Preference : (\d+)",value.strip()):
                obj = re.match("Candidate-path Preference : (\d+)",value.strip())
                key_2 = obj.group(1).strip()
            elif re.match("PolicyName : (.*)",value):
                key_1 = re.match("PolicyName : (.*)",value).group(1).strip()
            elif value.count(":") >= 2 and len(value.strip()) > 55 and re.search("\S+\s{8,}\S+",value):
                str_1 = value[0:55]
                str_2 = value[55:]
                list_1 = str_1.split(":",1)
                list_2 = str_2.split(":", 1)
                key_11 = list_1[0].strip()
                value_11 = list_1[1].strip()
                key_22 = list_2[0].strip()
                value_22 = list_2[1].strip()
                if key_2 == "":
                    dict_value[key_1 + "/" + key_11] = value_11
                    dict_value[key_1 + "/" + key_22] = value_22
                else:
                    dict_value[key_1 + "/" + key_2 + "/" + key_11] = value_11
                    dict_value[key_1 + "/" + key_2 + "/" + key_22] = value_22
        return dict_value
    def dut_get_show_srv6_policy_bfd_echo_neighbor(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        key_2 = ""
        key_1 = ""
        for value in show_info_list:
            if re.match("BFD Echo is (\S+), Interval (\S+), Multiplier (\S+), Backup Interval (\S+), Backup Multiplier (\S+)",value):
                obj = re.match("BFD Echo is (\S+), Interval (\S+), Multiplier (\S+), Backup Interval (\S+), Backup Multiplier (\S+)",value)
                dict_value["BFD Echo"] = obj.group(1).strip()
                dict_value["Interval"] = obj.group(2).strip()
                dict_value["Multiplier"] = obj.group(3).strip()
                dict_value["Backup Interval"] = obj.group(4).strip()
                dict_value["Backup Multiplier"] = obj.group(5).strip()
            #Backup Interval 50, Backup Min-Rx 10, Backup Multiplier 10
            elif re.match("Backup Interval (\S+), Backup Min-Rx (\S+), Backup Multiplier (\S+)",value):
                obj = re.match("Backup Interval (\S+), Backup Min-Rx (\S+), Backup Multiplier (\S+)",value)
                dict_value["Backup Interval"] = obj.group(1).strip()
                dict_value["Backup Min-Rx"] = obj.group(2).strip()
                dict_value["Backup Multiplier"] = obj.group(3).strip()
            elif re.match("BFD Echo is (\S+)\Z",value):
                obj = re.match("BFD Echo is (\S+)\Z",value)
                dict_value["BFD Echo"] = obj.group(1).strip()
            elif re.match("Interval (\S+), Min-Rx (\S+), Multiplier (\S+)",value):
                obj = re.match("Interval (\S+), Min-Rx (\S+), Multiplier (\S+)",value)
                dict_value["Interval"] = obj.group(1).strip()
                dict_value["Min-Rx"] = obj.group(2).strip()
                dict_value["Multiplier"] = obj.group(3).strip()
            elif re.match("Wait Status Time (\S+), Delay Recover Time (\S+)",value):
                obj = re.match("Wait Status Time (\S+), Delay Recover Time (\S+)",value)
                dict_value["Wait Status Time"] = obj.group(1).strip()
                dict_value["Delay Recover Time"] = obj.group(2).strip()
            elif re.match("BFD Echo Sessions (\S+), UP (\S+)",value):
                obj = re.match("BFD Echo Sessions (\S+), UP (\S+)",value)
                dict_value["BFD Echo Sessions"] = obj.group(1).strip()
                dict_value["UP"] = obj.group(2).strip()
            elif re.match("Candidate-path Preference : (\d+)",value.strip()):
                obj = re.match("Candidate-path Preference : (\d+)",value.strip())
                key_2 = obj.group(1).strip()
            elif re.match("PolicyName : (.*)",value):
                key_1 = re.match("PolicyName : (.*)",value).group(1).strip()

            elif value.count(":") >= 2 and len(value.strip()) > 55:
                str_1 = value[0:55]
                str_2 = value[55:]
                list_1 = str_1.split(":",1)
                list_2 = str_2.split(":", 1)

                key_11 = list_1[0].strip()
                value_11 = list_1[1].strip()
                key_22 = list_2[0].strip()
                value_22 = list_2[1].strip()

                if key_2 == "":
                    dict_value[key_1 + "/" + key_11] = value_11
                    dict_value[key_1 + "/" + key_22] = value_22
                else:
                    dict_value[key_1 + "/" + key_2 + "/" + key_11] = value_11
                    dict_value[key_1 + "/" + key_2 + "/" + key_22] = value_22
        return dict_value
    def dut_get_show_srv6_policy_sbfd_neighbor(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        key_2 = ""
        key_1 = ""
        for value in show_info_list:
            if re.match("SBFD is (\S+)\Z",value):
                obj = re.match("SBFD is (\S+)",value)
                dict_value["SBFD"] = obj.group(1).strip()
            elif re.match("SBFD is (\S+), No-bypass is (\S+)",value):
                obj = re.match("SBFD is (\S+), No-bypass is (\S+)",value)
                dict_value["SBFD"] = obj.group(1).strip()
                dict_value["No-bypass"] = obj.group(2).strip()
            elif re.match("Interval (\S+), Min-Rx (\S+), Multiplier (\S+)",value):
                obj = re.match("Interval (\S+), Min-Rx (\S+), Multiplier (\S+)",value)
                dict_value["Interval"] = obj.group(1).strip()
                dict_value["Min-Rx"] = obj.group(2).strip()
                dict_value["Multiplier"] = obj.group(3).strip()
            elif re.match("SBFD is (\S+), Interval (\S+), Multiplier (\S+), Backup Interval (\S+), Backup Multiplier (\S+)",value):
                obj = re.match("SBFD is (\S+), Interval (\S+), Multiplier (\S+), Backup Interval (\S+), Backup Multiplier (\S+)",value)
                dict_value["SBFD"] = obj.group(1).strip()
                dict_value["Interval"] = obj.group(2).strip()
                dict_value["Multiplier"] = obj.group(3).strip()
                dict_value["Backup Interval"] = obj.group(4).strip()
                dict_value["Backup Multiplier"] = obj.group(5).strip()
            elif re.match("Wait Status Time (\S+), Delay Recover Time (\S+)",value):
                obj = re.match("Wait Status Time (\S+), Delay Recover Time (\S+)",value)
                dict_value["Wait Status Time"] = obj.group(1).strip()
                dict_value["Delay Recover Time"] = obj.group(2).strip()
            elif re.match("SBFD Sessions (\S+), UP (\S+)",value):
                obj = re.match("SBFD Sessions (\S+), UP (\S+)",value)
                dict_value["SBFD Sessions"] = obj.group(1).strip()
                dict_value["UP"] = obj.group(2).strip()
            elif re.match("Candidate-path Preference : (\d+)",value.strip()):
                obj = re.match("Candidate-path Preference : (\d+)",value.strip())
                key_2 = obj.group(1).strip()
            elif re.match("PolicyName : (.*)",value):
                key_1 = re.match("PolicyName : (.*)",value).group(1).strip()

            elif value.count(":") >= 2 and len(value.strip()) > 55:
                str_1 = value[0:55]
                str_2 = value[55:]
                list_1 = str_1.split(":",1)
                list_2 = str_2.split(":", 1)

                key_11 = list_1[0].strip()
                value_11 = list_1[1].strip()
                key_22 = list_2[0].strip()
                value_22 = list_2[1].strip()

                if key_2 == "":
                    dict_value[key_1 + "/" + key_11] = value_11
                    dict_value[key_1 + "/" + key_22] = value_22
                else:
                    dict_value[key_1 + "/" + key_2 + "/" + key_11] = value_11
                    dict_value[key_1 + "/" + key_2 + "/" + key_22] = value_22
        return dict_value
    def dut_get_show_loadbalance_all(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        list_1 = []
        for value in show_info_list:
            if re.match("(.*):",value.strip()):
                if len(list_1) > 0 :
                    dict_value[key] = list_1
                obj = re.match("(.*):",value.strip())
                key = obj.group(1).strip()
                list_1 = []
            elif value != "" and value != "!":
                list_1.append(value.strip())
        dict_value[key] = list_1
        return dict_value
    def dut_get_show_srv6_policy_statistics(self,show_info):
        dict_value = {}
        show_list = self.dut_get_start_show_info(show_info)
        flag = 0
        for value in show_list:
            if "-----------" in value:
                flag = 1
            if ":" in value and flag == 1:
                list_1 = value.split(":")
                list_2 = list_1[1].strip().split()
                Total_value = list_2[0].strip()
                Up_value = list_2[1].strip()
                dict_value[list_1[0].strip() + "/Total"] = Total_value
                dict_value[list_1[0].strip() + "/Up"] = Up_value
        return dict_value

    def dut_get_show_ipv6_urpf(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        key_1 = ""
        for value in show_info_list:
            value = value.strip()
            if re.match("IPV6 verify URPF drop-rate compute interval is (\d+)s",value):
                obj = re.match("IPV6 verify URPF drop-rate compute interval is (\d+)s",value)
                dict_value["IPV6 verify URPF drop-rate compute interval"] = obj.group(1).strip()
            elif re.match("IPV6 verify URPF drop-rate notify hold-down is (\d+)s",value):
                obj = re.match("IPV6 verify URPF drop-rate notify hold-down is (\d+)s",value)
                dict_value["IPV6 verify URPF drop-rate notify hold-down is"] = obj.group(1).strip()
            elif re.match("Interface (.*)",value):
                key_1 = re.match("Interface (.*)",value).group(1).strip()
            elif key_1 != "":
                if " is " in value:
                    list_1 = value.split(" is ")
                    dict_value[key_1 + "/"+list_1[0].strip()] = str(list_1[1]).replace("pps","")
                elif " source " in value:
                    list_1 = value.split(" source ")
                    dict_value[key_1 + "/"+list_1[0].strip()] = list_1[1]
        return dict_value
    def dut_get_show_ip_urpf(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        key_1 = ""
        for value in show_info_list:
            value = value.strip()
            if re.match("IP verify URPF drop-rate compute interval is (\d+)s",value):
                obj = re.match("IP verify URPF drop-rate compute interval is (\d+)s",value)
                dict_value["IP verify URPF drop-rate compute interval"] = obj.group(1).strip()
            elif re.match("IP verify URPF drop-rate notify hold-down is (\d+)s",value):
                obj = re.match("IP verify URPF drop-rate notify hold-down is (\d+)s",value)
                dict_value["IP verify URPF drop-rate notify hold-down is"] = obj.group(1).strip()
            elif re.match("Interface (.*)",value):
                key_1 = re.match("Interface (.*)",value).group(1).strip()
            elif key_1 != "":
                if " is " in value:
                    list_1 = value.split(" is ")
                    dict_value[key_1 + "/"+list_1[0].strip()] = str(list_1[1]).replace("pps","")
                elif " source " in value:
                    list_1 = value.split(" source ")
                    dict_value[key_1 + "/"+list_1[0].strip()] = list_1[1]
        return dict_value
    def dut_get_show_ipv6_ref_route_statistics_slot_num(self, show_info):
        return self.dut_get_show_info_analy_all_colon(show_info, "show")
    def dut_get_show_ip_ref_route_statistics_slot_num(self, show_info):
        return self.dut_get_show_info_analy_all_colon(show_info, "show")
    def dut_get_show_efd_ip_fpm_statistics(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("alloc pool num (\d+) free pool cnt (\d+) free num (\d+)",value):
                obj = re.match("alloc pool num (\d+) free pool cnt (\d+) free num (\d+)",value)
                dict_value["alloc pool num"] = obj.group(1).strip()
                dict_value["free pool cnt"] = obj.group(2).strip()
                dict_value["free num"] = obj.group(3).strip()
            elif "," in value:
                list_1 = value.split(",")
                for list_1_value in list_1:
                    if ":" in list_1_value:
                        list_2 = list_1_value.split(":")
                        dict_value[list_2[0].strip()] = list_2[1].strip()
            elif ":" in value:
                list_2 = value.split(":")
                dict_value[list_2[0].strip()] = list_2[1].strip()
        return dict_value
    def dut_get_show_efd_slot_num_ip_fpm_statistics(self, show_info):
        return self.dut_get_show_efd_ip_fpm_statistics(show_info)
    def dut_get_show_efd_ipv6_fpm_statistics(self, show_info):
        return self.dut_get_show_efd_ip_fpm_statistics(show_info)
    def dut_get_show_efd_slot_num_ipv6_fpm_statistics(self, show_info):
        return self.dut_get_show_efd_ip_fpm_statistics(show_info)
    def dut_get_show_efd_ip_fpm_counters(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("(\d+)\s{2,}(.*)",value.strip()):
                obj = re.match("(\d+)\s{2,}(.*)",value.strip())
                dict_value[obj.group(2).strip()] = obj.group(1).strip()
        return dict_value
    def dut_get_show_efd_ipv6_fpm_counters(self,show_info):
        return self.dut_get_show_efd_ip_fpm_counters(show_info)
    def dut_get_show_efd_slot_num_ip_fpm_counters(self,show_info):
        return self.dut_get_show_efd_ip_fpm_counters(show_info)
    def dut_get_show_efd_slot_num_ipv6_fpm_counters(self,show_info):
        return self.dut_get_show_efd_ip_fpm_counters(show_info)
    def dut_get_show_efd_core(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match("thread (\S+)\[(\S+)\] info: stat\[(\S+)\] / mass_num\[(\S+)\]",value):
                obj = re.match("thread (\S+)\[(\S+)\] info: stat\[(\S+)\] / mass_num\[(\S+)\]",value)
                key_1 = obj.group(1).strip()
                dict_value[key_1+"/code"] = obj.group(2).strip()
                dict_value[key_1 + "/stat"] = obj.group(3).strip()
                dict_value[key_1 + "/mass_num"] = obj.group(4).strip()
            elif "schedule:" in value :
                value_1 = value.split(":")[1].strip()
                list_1 = re.findall("(\S+)\[(\S+)\]",value_1)
                for list_1_value in list_1:
                    dict_value[key_1 + "/" + list_1_value[0].strip()] = list_1_value[1].strip()
            elif "tcb_info:" in value :
                value_1 = value.split(":")[1].strip()
                list_1 = re.findall("(\S+) = (\S+)",value_1)
                for list_1_value in list_1:
                    dict_value[key_1 + "/" + list_1_value[0].strip()] = list_1_value[1].strip()
            elif re.match("Mass Packets statistics: \[(.*)\]",value):
                obj = re.match("Mass Packets statistics: \[(.*)\]",value)
                dict_value[key_1 + "/Mass Packets statistics"] = obj.group(1).strip()
            elif ":" in value and value.count(":") >= 2 :
                list_1 = re.split("\s{3,}",value.strip())
                for list_1_value in list_1 :
                    if ":" in list_1_value:
                        list_2 = list_1_value.split(":")
                        dict_value[key_1 + "/" + list_2[0].strip()] = list_2[1].strip()
            elif "," in value :
                list_1 = value.strip().split(",")
                for list_1_value in list_1:
                    if re.match("(.*)\[\S+\]",list_1_value.strip()):
                        obj = re.match("(.*)\[(\S+)\]",list_1_value.strip())
                        dict_value[key_1 + "/" + obj.group(1).strip()] = obj.group(2).strip()
        return dict_value
    def dut_get_show_efd_slot_num_core(self,show_info):
        return self.dut_get_show_efd_core(show_info)
    def dut_get_show_portqueue_statistics_interface_dutport(self, show_info):
      dict_value = {}
      show_info_list = show_info.split("\n")
      for value in show_info_list:
         if re.match("\[\S+\]",value):
            obj = re.match("\[(\S+)\]",value)
            key_1 = obj.group(1)
         elif ":" in value:
            list_1 = value.split(":")
            key_2 = list_1[0].strip()
            list_2 = list_1[1].split(",")
            for list_2_value in list_2:
               if re.match("\d+\s+\S+",list_2_value.strip()):
                  obj = re.match("(\d+)\s+(\S+)",list_2_value.strip())
                  tmp_value = obj.group(1).strip()
                  key_3 = obj.group(2).strip()
                  dict_value[key_1+"/"+key_2+"/"+key_3] = tmp_value
      return dict_value
    def dut_get_show_portqueue(self,show_info):
      dict_value = {}
      show_info_list = show_info.split("\n")
      for value in show_info_list:
         if "#" in value or value.strip() == "":
            continue
         if re.match("port queue (\S+):",value):
            obj = re.match("port queue (\S+):",value)
            key_1 = obj.group(1).strip()
         elif re.match(".*\s\S+\Z",value):
            obj = re.match("(.*)\s(\S+)\Z",value)
            key_2 =  obj.group(1).strip()
            tmp_value = obj.group(2).strip()
            dict_value[key_1+"/"+key_2] = tmp_value
      return dict_value
    def dut_get_show_dldp_ipv6_statistic(self, show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Interface")
    def dut_get_show_vxlan_server_route(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info,"VXLAN",ago_colon_last_str=1)
    def dut_get_show_mac_vni_num(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info, "MAC Address")
    def dut_get_show_wred_word(self, show_info):
        return self.dut_show_autoget_blank_list(show_info,"color")
    def dut_get_show_efd_ef_hpage_poolinfo(self,show_info):
        dict_value = {}
        new_list = []
        show_info_list = self.dut_get_start_show_info(show_info)
        flag = 0
        for value in show_info_list:
            if re.match("deviceID : \S+ slot ID : \S+",value):
                obj = re.match("deviceID : (\S+) slot ID : (\S+)",value)
                dict_value["deviceID"] = obj.group(1).strip()
                dict_value["slot ID"] = obj.group(2).strip()
                continue
            elif "Pool/Task" in value:
                if len(new_list) > 0 :
                    show_1 = "\n".join(new_list)
                    dict_value_1 = self.dut_show_autoget_blank_list(show_1,"Pool/Task")
                    dict_value = dict(dict_value.items()+dict_value_1.items())
                new_list = []
            elif "=========" in value or value.strip() == "":
                continue
            value = value.replace("|","").strip()
            new_list.append(value)
        if len(new_list) > 0:
            show_1 = "\n".join(new_list)
            dict_value_1 = self.dut_show_autoget_blank_list(show_1, "Pool/Task")
            dict_value = dict(dict_value.items() + dict_value_1.items())
        return dict_value
    def dut_get_show_efd_slot_num_ef_hpage_poolinfo(self, show_info):
        return self.dut_get_show_efd_ef_hpage_poolinfo(show_info)
    def dut_get_show_efd_ef_hpage_slabinfo(self, show_info):
        dict_value = {}
        new_list = []
        show_info_list = self.dut_get_start_show_info(show_info)
        flag = 0
        for value in show_info_list:
            if "memory-cache-name" in value:
                flag =1
            elif "=============" in value:
                continue
            if flag == 1:
                value = value.replace("|"," ")
                new_list.append(value)
        show_1 = "\n".join(new_list)
        return self.dut_show_autoget_blank_list(show_1,"memory-cache-name")
    def dut_get_show_efd_slot_num_ef_hpage_slabinfo(self, show_info):
        return self.dut_get_show_efd_ef_hpage_slabinfo(show_info)
    def dut_get_show_macaddresstable_dynamic_interface_dutport(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info, "MAC Address")
    def dut_get_show_egressqueue_trafficstatistics_interface_dutport(self,show_info):
        dict_value = {}
        new_list = []
        show_info_list = self.dut_get_start_show_info(show_info)
        flag = 0
        for value in show_info_list:

            if "Queue Name" in value:
                flag = 1
                if len(new_list) > 0 :
                    show_1 = "\n".join(new_list)
                    dict_value_1 = self.dut_show_autoget_blank_list(show_1,"Queue Name")
                    dict_value = dict(dict_value.items()+dict_value_1.items())
                new_list = []
            if "--------------" in value or re.match("ID\s+",value):
                continue
            if flag == 1:
                new_list.append(value)
        if len(new_list) > 0:
            show_1 = "\n".join(new_list)
            dict_value_1 = self.dut_show_autoget_blank_list(show_1, "Queue Name")
            dict_value = dict(dict_value.items() + dict_value_1.items())
        return dict_value
    def dut_get_show_fabricinterface_status(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info, "Fabric-interface")
    def dut_get_show_fabricinterface_status_linkhistory_device_num_slot_num(self,show_info):
        return self.dut_get_show_fabricinterface_status(show_info)
    def dut_get_show_fabricinterface_status_linkhistory_slot_num(self,show_info):
        return self.dut_get_show_fabricinterface_status(show_info)
    def dut_get_show_efd_efb(self,show_info):
        dict_value = {}
        new_list = []
        show_info_list = self.dut_get_start_show_info(show_info)
        flag = 0
        for value in show_info_list:
            if re.match("deviceID : (.*) slot ID : (.*)",value):
                obj = re.match("deviceID : (.*) slot ID : (.*)",value)
                dict_value["deviceID"] = obj.group(1).strip()
                dict_value["slot ID"] = obj.group(2).strip()
                continue
            elif "poolID" in value:
                if len(new_list) > 0 :
                    show_1 = "\n".join(new_list)
                    dict_value_1 = self.dut_show_autoget_blank_list(show_1,key_1)
                    dict_value_1_tmp = {}
                    for k ,v in dict_value_1.items():
                        dict_value_1_tmp[key_1 + "/" + k] = v
                    dict_value = dict(dict_value.items()+dict_value_1_tmp.items())
                key_1 = value.strip().split()[0]
                new_list = []
            new_list.append(value.strip())
        if len(new_list) > 0:
            show_1 = "\n".join(new_list)
            dict_value_1 = self.dut_show_autoget_blank_list(show_1, key_1)
            dict_value_1_tmp = {}
            for k, v in dict_value_1.items():
                dict_value_1_tmp[key_1 + "/" + k] = v
            dict_value = dict(dict_value.items() + dict_value_1_tmp.items())
        return dict_value
    def dut_get_show_efd_slot_num_efb(self,show_info):
        return self.dut_get_show_efd_efb(show_info)
    def dut_get_show_cpldfpga_version_detail_fan(self,show_info):
        return self.dut_show_autoget_whippletree_form_analysis(show_info,"Fan-id")
    def dut_get_show_cpldfpga_version_detail_slot(self, show_info):
        dict_value = {}
        new_list = []
        show_info_list = self.dut_get_start_show_info(show_info)
        flag = 0
        for value in show_info_list:
            if "Dev" in value:
                if len(new_list) > 0 :
                    show_1 = "\n".join(new_list)
                    dict_value_1 = self.dut_show_autoget_blank_list(show_1, "Slot",value_title_2="Name")
                    dict_value = dict(dict_value.items()+dict_value_1.items())
                new_list = []
            if "=========" in value or value.strip() == "":
                continue
            new_list.append(value)
        if len(new_list) > 0:
            show_1 = "\n".join(new_list)
            dict_value_1 = self.dut_show_autoget_blank_list(show_1, "Slot",value_title_2="Name")
            dict_value = dict(dict_value.items() + dict_value_1.items())
        return dict_value
    def dut_get_show_cpldfpga_version_detail(self,show_info):
        dict_value = {}
        new_list = []
        show_info_list = self.dut_get_start_show_info(show_info)
        flag = 0
        for value in show_info_list:
            if "Dev" in value:
                if "Slot" in value:
                    flag = 1
                if len(new_list) > 0 :
                    show_1 = "\n".join(new_list)
                    dict_value_1 = self.dut_show_autoget_blank_list(show_1, "Slot",value_title_2="Name")
                    dict_value = dict(dict_value.items()+dict_value_1.items())
                new_list = []
            if "=========" in value or value.strip() == "":
                continue
            new_list.append(value)
        if len(new_list) > 0:
            show_1 = "\n".join(new_list)
            if flag == 1:
                dict_value_1 = self.dut_show_autoget_blank_list(show_1, "Fan-id", value_title_2="Name")
            else:
                dict_value_1 = self.dut_show_autoget_blank_list(show_1, "Slot",value_title_2="Name")
            dict_value = dict(dict_value.items() + dict_value_1.items())
        return dict_value
    def dut_get_show_efd_slot_num_ef_hpage_meminfo(self, show_info):
        dict_value = {}
        show_info_list = show_info.split("\n")
        for value in show_info_list:
            if re.match("(.*): (\d+)\((\d+)KB\)", value):
                obj = re.match("(.*): (\d+)\((\d+)KB\)", value)
                dict_value[obj.group(1).strip()] = obj.group(2).strip()
                dict_value[obj.group(1).strip() + "/KB"] = obj.group(3).strip()
            elif re.match("deviceID : (.*) slot ID : (.*)",value):
                obj = re.match("deviceID : (.*) slot ID : (.*)",value)
                dict_value["deviceID"] = obj.group(1).strip()
                dict_value["slot ID"] = obj.group(2).strip()
            elif ":" in value:
                list_1 = value.split(":")
                key_1 = list_1[0].strip()
                tmp_value1 = list_1[1].strip()
                dict_value[key_1] = tmp_value1
        return dict_value
    def dut_get_show_ipv6_ref_route_slot_num(self,show_info):
        return self.dut_show_autoget_blank_list(show_info,"prefix/len")
    def dut_get_show_ipv6_ref_adjacency_slot_num(self,show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        list1 = []
        for value in show_info_list:
            if "(header data)" in value:
                value = value.replace("(header data)","")
            list1.append(value)
        show_info = "\n".join(list1)
        star,end,show_len_list,show_info_list_line = self.dut_common_get_linelist(show_info,"ip")
        show_len_list.pop()
        show_len_list.append(64)
        return self.dut_show_autoget_form(star,end,"ip",show_len_list,show_info_list_line,"interface")
    def dut_get_show_efd_ipv6_fpm_flows_filter(self,show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        id = 0
        for value in show_info_list:
            if re.match("Total number of flow entries: (\d+)",value):
                obj = re.match("Total number of flow entries: (\d+)",value)
                dict_value["Total number of flow entries"] = obj.group(1).strip()
            if " Vrf " in value:
                id = value.find("Vrf")
                break
        if id > 0 :
            show_list_1 = []
            flag = 0
            for value in show_info_list:
                if " Vrf " in value:
                    flag = 1
                if flag == 1 and value != "":
                    value_1 = "/".join(re.split("\s{2,}",value[0:id].strip()))
                    if "Proto" in value_1:
                        value_1 = "title"
                    value_1 = value_1 + "  "
                    value_2 = value[id:]
                    value_3 = value_1 + value_2
                    show_list_1.append(value_3)
            show_1 = "\n".join(show_list_1)
            dict_value_2 = self.dut_show_autoget_blank_list(show_1,"title")
            dict_value = dict(dict_value.items()+dict_value_2.items())
        return dict_value
    def dut_get_show_efd_slot_num_ipv6_fpm_flows_filter(self,show_info):
        return self.dut_get_show_efd_ipv6_fpm_flows_filter(show_info)
    def dut_get_show_efd_ip_fpm_flows_filter(self,show_info):
        return self.dut_get_show_efd_ipv6_fpm_flows_filter(show_info)
    def dut_get_show_efd_slot_num_ip_fpm_flows_filter(self,show_info):
        return self.dut_get_show_efd_ipv6_fpm_flows_filter(show_info)
#实习
    def dut_get_show_wlan_hotbackup_ip(self,show_info):
        """
        Function:show wlan hot-backup x.x.x.x回显解析函数
        CLI命令:show wlan hot-backup x.x.x.x
        回显信息示例:
Ruijie#show wlan hot-backup 10.10.10.10
wlan hot-backup 10.10.10.10         
  hot-backup     : Enable
  connect state  : CHANNEL_UP
  hello-interval : 2000
  kplv-pkt       : ip
  work-mode      : normal
  !
  context 10
    hot-backup role        : PAIR-STANDBY
    hot-backup rdnd state  : REALTIME-SYN
    hot-backup priority    : 4
Ruijie#

        Returns:
{'context 10/hot-backup rdnd state': 'REALTIME-SYN'
'hello-interval': '2000'
'hot-backup': 'Enable'
'connect state': 'CHANNEL_UP'
'context': ['context 10'], 'work-mode': 'normal'
'kplv-pkt': 'ip'
'context 10/hot-backup role': 'PAIR-STANDBY'
'context 10/hot-backup priority': '4'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show wlan hot-backup x.x.x.x | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value={}
        key_list=[]
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        line_len = len (show_info_list_line)
        for line_len_num in range (0,line_len):
             if re.match(".*(context \d+)",show_info_list_line[line_len_num]):
                 key=re.match(".*(context \d+)",show_info_list_line[line_len_num])
                 key1=key.group(1)
                 key_list.append(key1)
                 dict_value['context']=key_list
                 temp1=[]
                 temp2=[]
                 for i in range(line_len_num+1,line_len):
                     if not re.match(r'.*:.*',show_info_list_line[i]):
                         break
                     else:
                         temp1.append(show_info_list_line[i].split(':'))
                 for i in range(len(temp1)):
                     for j in range(2):
                       temp2.append(temp1[i][j].strip())
                 for i in range(len(temp1)):
                   key =key1+'/' + temp2[i*2]
                   dict_value[key.strip()] = temp2[i*2+1]
        for line_len_num in range (0,line_len):
                if re.match(r".*(context \d+)",show_info_list_line[line_len_num]):
                    i=line_len_num
                    break
        for line_len_num in range (0,line_len):
                if re.match(r".*:.*",show_info_list_line[line_len_num]) :
                    if line_len_num<i:
                        list_value_split = show_info_list_line[line_len_num].split (":",1)   #以冒号分割一次
                        key_name = '%s'%(list_value_split[0].strip())
                        dict_value[key_name] = list_value_split[1].strip()
        return dict_value
    def dut_get_show_processes_cpu(self,show_info):
        """
        Function:show processes cpu回显解析函数
        CLI命令:show processes cpu
        回显信息示例:
Ruijie#show processes cpu
System Uptime: 01:04:06.9
CPU utilization for five seconds: 26.5%; one minute: 20.5%; five minutes: 16.4%
Virtual CPU usage in five seconds:  0.0%; one minute:  0.0%; five minutes:  0.0%
set system cpu watermark (open): high up 85%, down 75%
Tasks Statistics: 829 total, 1 running, 828 sleeping, 0 stopped, 0 zombie
  Pid Vsd S   PRI  P        5Sec        1Min        5Min       15Min Process
    1   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) procd
    2   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) kthreadd
    3   0 S    20  0    0.2(0.4)    0.1(0.3)    0.1(0.2)    0.1(0.2) ksoftirqd/0
    5   0 S     0  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) kworker/0:0H
    7   0 S    20  1    0.1(0.2)    0.0(0.1)    0.0(0.1)    0.0(0.1) rcu_sched
    8   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) rcu_bh
    9   0 S  -100  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) migration/0
   10   0 S  -100  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) migration/1
   11   0 S    20  1    0.2(0.4)    0.0(0.1)    0.0(0.1)    0.0(0.1) ksoftirqd/1
   12   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) kworker/1:0
   13   0 S     0  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) kworker/1:0H
   14   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) kdevtmpfs
   15   0 S     0  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) netns
  141   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) khungtaskd
  142   0 S     0  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) writeback
  144   0 S     0  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) crypto
  145   0 S     0  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  147   0 S     0  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) kblockd
  246   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) kworker/0:1
  247   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) kworker/1:1
  256   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) kswapd0
  257   0 S     0  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) vmstat
  337   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) fsnotify_mark
  411   0 S     0  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  412   0 S     0  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  413   0 S     0  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  414   0 S     0  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  415   0 S     0  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  416   0 S     0  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  417   0 S     0  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  418   0 S     0  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  419   0 S     0  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  420   0 S     0  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  421   0 S     0  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  422   0 S     0  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  423   0 S     0  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  424   0 S     0  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  425   0 S     0  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  426   0 S     0  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  460   0 S     0  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  467   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) spi1
  471   0 S     0  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  476   0 S     0  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  481   0 S     0  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  486   0 S     0  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  491   0 S     0  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  496   0 S     0  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  501   0 S     0  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  526   0 S     0  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ipv6_addrconf
  541   0 S     0  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) deferwq
  634   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) kworker/0:2
  660   0 S     0  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  664   0 S     0  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  669   0 S     0  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  675   0 S     0  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  680   0 S     0  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  685   0 S     0  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  690   0 S     0  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  701   0 S     0  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  704   0 S     0  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  707   0 S     0  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  710   0 S     0  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  713   0 S     0  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  715   0 S     0  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  719   0 S     0  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  722   0 S     0  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bioset
  747   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ubi_bgt0d
  751   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ubifs_bgt0_0
  762   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ubi_bgt1d
  766   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ubifs_bgt1_0
  996   0 D    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dump_memoryinfo
 1044   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) lmk_cap_get_val
 1045   0 D    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) lmk_ham_mon_thr
 1046   0 D    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) lmk_event_task
 1047   0 D    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) lmk_task
 1099   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ham
 1110   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bspinfo.elf
 1134   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ras_logfile_tim
 1145   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) hamk_cap_get_va
 1146   0 D    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) hamk_cpu0
 1147   0 D    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) hamk_cpu1
 1161   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) coredump-mon
 1163   0 S  -100  0    3.8(7.7)    0.3(0.7)    0.1(0.2)    0.0(0.1) ham_cnmsg_handl
 1164   0 S  -100  0    0.1(0.3)    0.0(0.0)    0.0(0.0)    0.0(0.0) ham_process_net
 1165   0 S  -100  1    0.7(1.5)    0.5(1.1)    0.4(0.9)    0.5(1.0) ham_process_dom
 1166   0 S  -100  0    0.3(0.6)    0.2(0.4)    0.2(0.4)    0.2(0.4) ham_thread_noti
 1168   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ham_availabilit
 1169   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ham_inotify_for
 1170   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ham_delay_resta
 1171   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ham-cli
 1509   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ubusd
 1525   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) logd
 3209   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ce.tran.cap.sw
 3245   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) kernel_fib_moni
 3277   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) cli-server
 3278   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) tty-admin
 3284   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ip
 3293   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) fe.uft.sw
 3306   0 S    20  1    0.7(1.5)    0.2(0.5)    0.2(0.4)    0.2(0.4) redis-server
 3318   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) configd
 3329   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) cli-dump
 3330   0 S    20  1    0.2(0.5)    1.8(3.6)    1.0(2.1)    1.3(2.6) cli-server
 3331   0 S    20  1    0.1(0.3)    0.1(0.2)    0.1(0.2)    0.1(0.2) prt.elf
 3347   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) tty_secu_enable
 3351   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) 3347_aaalib_th
 3356   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis-server
 3357   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis-server
 3358   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis-server
 3366   0 S    20  0    0.2(0.5)    0.2(0.4)    0.2(0.4)    0.2(0.4) rgmomd
 3379   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) cap
 3430   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ef-ring-disp
 3443   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) packet-copy
 3444   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) packet_msg_t
 3468   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) tipc-tap
 3504   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) lsm-kthread
 3581   0 S    20  0    0.2(0.5)    0.2(0.4)    0.1(0.3)    0.1(0.3) efmp_frame.elf
 3637   0 S    20  1    0.1(0.3)    0.1(0.2)    0.1(0.2)    0.1(0.2) redis_ctrl_host
 3644   0 S    20  2    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bknRTx
 3649   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_ctrl_host
 3650   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_ctrl_host
 3651   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_ctrl_host
 3660   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) mom_rdnd_ctrl
 3709   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_dp
 3720   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) psh_proxy
 3726   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ras_logfile_tim
 3734   0 S    20  0    0.0(0.1)    0.1(0.2)    0.0(0.1)    0.0(0.1) sysmon
 3736   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) psh_proxy
 3742   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_logfile_time
 3747   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) app_df
 3758   0 S     0  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dfd_irq.elf
 3770   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_app_pd
 3781   0 S    20  0    0.1(0.3)    0.1(0.3)    0.1(0.2)    0.1(0.2) dfd_core.elf
 3792   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) rbac
 3811   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_logfile_time
 3819   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) rdnd_server.
 3830   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) aaad
 3841   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) vsdm
 3844   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dp_mfast_thread
 3845   0 S    20  1    0.0(0.1)    0.0(0.0)    0.0(0.0)    0.0(0.0) dp_mom_thread
 3847   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) aaad
 3863   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dp_global_db_th
 3864   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_timer_task
 3870   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ras_logfile_tim
 3875   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ldp_mb_task
 3876   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ldp_lc_task
 3877   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ldp_proxy_task
 3878   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_rdnd_task
 3879   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) gdp_task
 3880   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) vsl_timer_task
 3881   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) vsl-db-mngpkt
 3882   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) vsl-db-sync-tas
 3885   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) aaa_logmsg
 3886   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) aaa_other_th
 3887   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) aaa_core_0
 3888   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) aaa_core_1
 3889   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) aaa_core_2
 3890   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) aaa_other_msg_1
 3891   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) aaa_inner_msg_0
 3892   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) aaa_timer_th
 3893   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) vsl_cli_thread
 3894   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_logfile_time
 3895   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dtm_timer_task
 3898   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dtm_tm_task
 3901   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dtm_pkt_task
 3902   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) vsu_cfg_local
 3904   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) cap_tran
 3906   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) vsu_cfg_l_sync
 3907   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_rebuild_thre
 3908   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_rebuild_pkt
 3923   0 S    20  0    0.1(0.3)    0.1(0.2)    0.1(0.2)    0.1(0.2) redis_de_standa
 3940   0 S    20  0    0.1(0.3)    0.1(0.2)    0.1(0.2)    0.1(0.2) redis_host_fwd
 3951   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_de_standa
 3952   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_de_standa
 3953   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_de_standa
 3956   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_host_fwd
 3957   0 S    20  0    0.1(0.3)    0.1(0.2)    0.0(0.1)    0.0(0.1) redis_cfg_can
 3958   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_host_fwd
 3959   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_host_fwd
 3966   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) kir thread
 3970   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ipv4_send_efbuf
 3972   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ipv4_send_msg_t
 3979   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_cfg_can
 3980   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_cfg_can
 3981   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_cfg_can
 4004   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ipv6_send_efbuf
 4006   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ipv6_send_msg_t
 4015   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dp_mfast_thread
 4016   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_app_mom_thre
 4017   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dp_global_db_th
 4018   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_timer_task
 4021   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ras_logfile_tim
 4025   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_lsm_client_t
 4026   0 S    20  1    0.1(0.2)    0.0(0.1)    0.0(0.1)    0.0(0.1) gdp_work_task
 4027   0 S    20  0    0.2(0.4)    0.1(0.3)    0.1(0.3)    0.1(0.3) gdp_power
 4028   0 S    20  1    0.4(0.9)    0.3(0.7)    0.3(0.6)    0.3(0.6) gdp_fan
 4030   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_tech_tac_sup
 4031   0 S    20  1    0.0(0.1)    0.1(0.3)    0.1(0.3)    0.1(0.3) tcpip.elf
 4033   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) sync_data
 4034   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) sync_app_rpc
 4035   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) sync_lib_rpc
 4036   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) sync_fnotify
 4037   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) addr_mngpkt_dea
 4038   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_grpc_thread
 4040   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_tipc_server_
 4041   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_tipc_client_
 4042   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_board_tipc_t
 4045   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) intp_mngpkt_tas
 4046   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) intp_task
 4047   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) intp_event_task
 4048   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dcs_card_temp
 4049   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) card_mon_info
 4050   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dev_mon_info
 4051   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_fe_offline
 4057   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dcs_mem_info
 4058   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dcs_cpu_info
 4060   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) timerange
 4064   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dcs_fs_info
 4066   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dad_tx_dtct_pkt
 4067   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dad_mng_thrd
 4068   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dad_tmr_thrd
 4069   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dad_lldp_thrd
 4071   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_vsd0-mib_thr
 4072   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm-trap-thrd
 4073   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm-cwmp-VSD0
 4074   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_rebuild_thre
 4075   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_rebuild_pkt
 4076   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm-mon-reset
 4083   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) nsm.elf
 4094   0 S    20  0    0.2(0.4)    0.3(0.6)    0.2(0.4)    0.2(0.4) lsm.elf
 4109   0 D    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) MIB_MGMT_KTHR
 4110   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) lsm.elf
 4120   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) tty-admin
 4122   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) efmp_frame.elf
 4124   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ping.elf
 4128   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_logfile_time
 4129   0 S    10  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) efmp_drv_rx
 4130   0 S    10  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) EFMP-1
 4134   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_logfile_time
 4139   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) cli-rdnd
 4141   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) cli-logcmd
 4142   0 S    20  1    0.0(0.0)    0.1(0.2)    0.1(0.2)    0.1(0.2) mstp.elf
 4146   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) cli-srv-cmds
 4147   0 S    10  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ef_out_ring_thd
 4148   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) cli-srv-record
 4149   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) cli-grpc-loop
 4152   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) lib_event_sysmo
 4153   0 S    20  0    0.0(0.1)    0.0(0.0)    0.0(0.0)    0.0(0.0) lib_data_sysmon
 4154   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) lib_librpc_sysm
 4160   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) cli_tech_proc
 4161   0 S    10  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) efmp-topf
 4163   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ref_proxy.elf
 4165   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) efmp_ipfrag_ref
 4166   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) lib_vsl_task
 4167   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) efmp_ipv6frag_r
 4168   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dp_mom_thread
 4174   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) sysmon-snmp
 4179   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dcm_lib_3277
 4180   0 S    20  0    0.1(0.3)    0.0(0.0)    0.0(0.0)    0.0(0.0) monitor_netlink
 4181   0 R    20  0    0.8(1.6)    0.6(1.3)    0.6(1.2)    0.6(1.2) monitor_procps
 4182   0 S    20  0    0.1(0.3)    0.1(0.2)    0.0(0.1)    0.0(0.1) sysmon0_externa
 4183   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) sysmon1_externa
 4184   0 S    20  0    0.6(1.2)    0.4(0.9)    0.4(0.8)    0.4(0.8) efmp-task
 4190   0 S    20  1    0.3(0.6)    0.3(0.6)    0.2(0.5)    0.2(0.4) redis_ce_global
 4193   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) sshd
 4196   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) mem_utilize
 4197   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) mem_nodeutilize
 4203   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dns_agent_routi
 4204   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ref_res_thread
 4206   0 S    20  1    0.1(0.3)    0.1(0.2)    0.1(0.2)    0.1(0.2) redis_ce_fwd_gl
 4218   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) telnetd
 4219   0 S    10  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ref_mom_thread
 4221   0 S    20  1    0.2(0.4)    0.1(0.3)    0.1(0.3)    0.1(0.2) redis_de_global
 4229   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) sshd-main
 4236   0 S    20  0    0.1(0.3)    0.1(0.2)    0.1(0.2)    0.1(0.2) redis_de_fwd_gl
 4239   0 S    20  1    0.0(0.0)    0.1(0.2)    0.0(0.1)    0.0(0.1) rldp.elf
 4244   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) refv6_res_threa
 4249   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) tty-admin-cmds
 4252   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) tty-rdnd
 4255   0 S    20  0    0.1(0.3)    0.1(0.2)    0.1(0.2)    0.1(0.2) redis_cfg_globa
 4268   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_ce_fwd_gl
 4269   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_ce_fwd_gl
 4270   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_ce_fwd_gl
 4273   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) telnetd-main
 4275   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) rpi.elf
 4277   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) telnetd-cli
 4278   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) tty-admin-passw
 4279   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) tty-admin-acct
 4282   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_ce_global
 4283   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_ce_global
 4284   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_ce_global
 4285   0 S    10  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) refv6_mom_threa
 4287   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) 3278_aaalib_th
 4288   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_de_fwd_gl
 4290   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_de_fwd_gl
 4291   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_de_fwd_gl
 4294   0 S    20  1    0.1(0.3)    0.1(0.3)    0.1(0.2)    0.1(0.2) redis_cap
 4295   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_logfile_time
 4305   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) packet-fwd
 4308   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bgp.elf
 4313   0 S    10  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ip-proxy-top-0
 4315   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_de_global
 4316   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_de_global
 4317   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_de_global
 4318   0 S    10  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ip6-proxy-top-0
 4321   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ip_proxy
 4323   0 S    10  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ef_output_thd
 4329   0 S    20  1    0.1(0.3)    0.0(0.1)    0.0(0.1)    0.0(0.1) redis_ctrl_glob
 4333   0 S    20  0    0.2(0.4)    0.1(0.2)    0.1(0.2)    0.1(0.2) erps.elf
 4337   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_cap
 4338   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_cap
 4339   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_cap
 4348   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dcm_lib_3278
 4354   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_cfg_globa
 4356   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_cfg_globa
 4357   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_cfg_globa
 4358   0 S    20  0    0.1(0.3)    0.2(0.5)    0.2(0.4)    0.2(0.4) redis_cap_cfg_l
 4362   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) grpc.elf
 4368   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_ctrl_glob
 4369   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_ctrl_glob
 4370   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_ctrl_glob
 4376   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_logfile_time
 4384   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) telnet-rdnd
 4385   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_cap_cfg_l
 4386   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_cap_cfg_l
 4387   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) redis_cap_cfg_l
 4388   0 S    20  1    0.0(0.1)    0.0(0.0)    0.0(0.0)    0.0(0.0) grpc_vty.elf
 4399   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) grpc_vty_cli_wo
 4400   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) grpc_vty_cli_wo
 4401   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) grpc_vty_cli_wo
 4402   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) grpc_vty_cli_wo
 4405   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ospf.elf
 4417   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) rip.elf
 4430   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) tcp_nss_tipc
 4448   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dns_client.elf
 4451   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_logfile_time
 4461   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) isis.elf
 4466   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ssh-cli
 4467   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ssh-main-sync
 4468   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ssh-key-regener
 4472   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ssh-trap
 4473   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ssh-rdnd
 4477   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ospfv3.elf
 4505   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ospf_ka_thread
 4506   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ospf_rdnd_threa
 4534   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ripng.elf
 4546   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) bgp_io
 4566   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ce.cap.sw
 4588   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ospf6_rdnd_thre
 4598   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) fe.cap.sw
 4616   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) isis_rdnd_threa
 4625   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) isis_ka_thread
 4627   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ipmix.elf
 4635   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ospf6_ka_thread
 4652   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) rnsmib.elf
 4683   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) rns-mib-snmp
 4688   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) licns
 4719   0 S    20  0    0.1(0.2)    0.0(0.1)    0.0(0.1)    0.0(0.1) congestctrl_ser
 4727   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) lic_cli_hdl
 4728   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) licns_refres
 4730   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_logfile_time
 4736   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) lib_event_RG_LI
 4737   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) lib_data_RG_LIC
 4738   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) lib_librpc_RG_L
 4747   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) lib_vsl_task
 4748   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dp_mom_thread
 4764   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) telnetc
 4772   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) grpc_yang_timer
 4778   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) tunnel.elf
 4789   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) telnetc-cli
 4790   0 S    20  1    0.2(0.4)    0.1(0.2)    0.1(0.2)    0.1(0.2) telnetc-check
 4791   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dns_agent_routi
 4792   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) acllib-rcv1-476
 4793   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) sshc
 4804   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) netconf.elf
 4807   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_logfile_time
 4814   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) ssh-client-cli
 4815   0 S    20  0    0.2(0.4)    0.1(0.2)    0.1(0.2)    0.1(0.2) ssh-client-chec
 4816   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dns_agent_routi
 4819   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) acllib-rcv1-479
 4831   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) nc-notification
 4833   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) nc-session-loop
 4841   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) tech-support
 4844   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) nc-tty-service
 4853   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) mom_trace
 4855   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) nc-tty-connect
 4864   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) tech-module_pro
 4865   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) tech-reg_inpath
 4866   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) tech-diag
 4867   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) tech-cli_proces
 4868   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) tech-hotkey_pro
 4869   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) tech-vsd_proces
 4871   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) mlag.elf
 4876   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) tech-rdnd_proce
 4879   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) dm_logfile_time
 4903   0 S    20  1    0.2(0.4)    0.0(0.1)    0.0(0.1)    0.0(0.1) ce.proxy.brg.dp
 4909   0 S    20  1    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) demo_proxy-io2n
 4910   0 S    20  0    0.0(0.0)    0.0(0.0)    0.0(0.0)    0.0(0.0) tech-master_pro
 4912   0 S    20  0    0.0

        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show processes cpu | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="Process"     #需要变参的地方
        col_len_list = []
        #创建字典
        dict_value={}
        rol_title_list = []
        title_row =[]

        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        line_len = len (show_info_list_line)
        for line_len_num in range(0,line_len):
            if "System Uptime" in show_info_list_line[line_len_num]:              #***********
                list_1 = show_info_list_line[line_len_num].split(": ")
                key_name = '%s'%list_1[0].strip()
                dict_value[key_name] = '%s'%list_1[1].strip()
            if "CPU utilization" in show_info_list_line[line_len_num]:              #***********
                list_1 = show_info_list_line[line_len_num].split(";")
                for list_1_num in range(len(list_1)):
                    list_1_1 = list_1[list_1_num].split(":")
                    if 'CPU utilization' in list_1_1[0].strip():
                        key_name = '%s' %list_1_1[0].lstrip("").strip()
                    else:
                        key_name = 'CPU utilization for %s' %list_1_1[0].strip()
                    dict_value[key_name] = '%s' %list_1_1[1].lstrip().rstrip()
            if "set system cpu" in show_info_list_line[line_len_num]:              #***********
                if re.match(r'.*high.*down',show_info_list_line[line_len_num]):
                    matchObj = re.match(r'.*(high)\s*\w+\s*(\d+.*),\s*(down)\s*(\d+.*)',show_info_list_line[line_len_num])
                    dict_value[matchObj.group(1)] = '%s' %matchObj.group(2).strip()
                    dict_value[matchObj.group(3)] = '%s' %matchObj.group(4).strip()
            if "Tasks Statistics" in show_info_list_line[line_len_num]:              #***********
                end_num = line_len_num
                list_1 = show_info_list_line[line_len_num].split(",")
                print list_1
                for list_1_num in list_1:
                    if re.match(r'\s*(\d+)\s*(\w+)',list_1_num):
                        matchObj = re.match(r'\s*(\d+)\s*(\w+)',list_1_num)
                        key_name = '%s' % matchObj.group(2).strip()
                        dict_value[key_name] = '%s' % matchObj.group(1).strip()
        for k in range(end_num+1,line_len):
            col_value_list = re.split(r'\s{1,}', show_info_list_line[k].lstrip())
            title_col = col_value_list[9]           #*****
            if value_title in col_value_list :
                title_row = col_value_list
            else:
                if col_value_list != "":
                    rol_title_list.append(title_col)
                    for s in range (0,len(col_value_list)-1):           #*****
                        key_name = '%s/%s'%(title_col,title_row[s])
                        dict_value[key_name]=col_value_list[s]
        dict_value["Process_list"] = rol_title_list
        return dict_value
    def dut_get_show_install_detail(self,show_info):
        """
        Function:show install detail回显解析函数
        CLI命令:show install detail
        回显信息示例:
Ruijie#show install detail                  
  [Slot 0 : EG2000D]
     Name                                     State                     Flag                  Description
     smu_bugid105.bin                         Install                   Hot                   smu, revise some bug.
          -------------------------------------------------------------------------------------------
          Pkg_name                            Current_version           Last_version          Current   
          cpurule-cli                         105.0.0                   100.0.0               No        
          erps-usr                            105.0.0                   100.0.0               No        
          -------------------------------------------------------------------------------------------

     smu_bugid100.bin                         Install                   Hot                   smu, revise some bug.
          -------------------------------------------------------------------------------------------
          Pkg_name                            Current_version           Last_version          Current   
          cpurule-cli                         100.0.0                   105.0.0               No        
          erps-usr                            100.0.0                   105.0.0               No        
          -------------------------------------------------------------------------------------------

        Returns:
{'Slot 0 : EG2000D/smu_bugid105.bin/cpurule-cli/urrent': 'o'
'Slot 0 : EG2000D/smu_bugid100.bin/cpurule-cli/Current_version           Las': '100.0.0                   105'
'Slot 0 : EG2000D/smu_bugid105.bin/erps-usr/t_version          C': '.0.0               N'
'Slot 0 : EG2000D/smu_bugid105.bin/State': 'Install'
'Slot 0 : EG2000D/smu_bugid105.bin/cpurule-cli/t_version          C': '.0.0               N'
'Slot 0 : EG2000D/smu_bugid105.bin/Description': 'smu, revise some bug.'
'Slot 0 : EG2000D/smu_bugid100.bin/erps-usr/Current_version           Las': '100.0.0                   105'
'Slot 0 : EG2000D/smu_bugid105.bin/Flag': 'Hot'
'Slot 0 : EG2000D/smu_bugid100.bin/erps-usr/urrent': 'o'
'Slot 0 : EG2000D/smu_bugid100.bin/Flag': 'Hot'
'Slot 0 : EG2000D/smu_bugid105.bin/erps-usr/Current_version           Las': '105.0.0                   100'
'Slot 0 : EG2000D/smu_bugid105.bin/cpurule-cli/Current_version           Las': '105.0.0                   100'
'Slot 0 : EG2000D/smu_bugid100.bin/Description': 'smu, revise some bug.'
'Slot 0 : EG2000D/smu_bugid105.bin/erps-usr/urrent': 'o'
'Slot 0 : EG2000D/smu_bugid100.bin/cpurule-cli/t_version          C': '.0.0               N'
'Slot 0 : EG2000D/smu_bugid100.bin/erps-usr/t_version          C': '.0.0               N'
'Slot 0 : EG2000D/smu_bugid100.bin/State': 'Install'
'Slot 0 : EG2000D/smu_bugid100.bin/cpurule-cli/urrent': 'o'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show install detail | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        key_main_onekey = ''
        key_main = ''
        value_title_1 = 'Name' # value_title_1是[Slot..]下的第一张表key，表项为.bin
        value_title_2 = 'Pkg_name' # .bin下的表key
        blank_list = []

        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        length = len(dut_info_split)
        # =====================================================
        # 删除dut_info_split中空字符所在行
        # =====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        length = len(dut_info_split)
        # ======================================================================
        # 判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        # ======================================================================
        length_list = [64]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        for i in range(length):
            blank_list = [] # #此回显，存在有一个表中的项带有独立的表情况
            if re.match(r'\s*\[(Slot.*)\]', dut_info_split[i]):
                matchObj = re.match(r'\s*\[(Slot.*)\]', dut_info_split[i])
                key_main_onekey = matchObj.group(1).strip()
                for j in range(1, length - i):
                    if re.match(r'\s*\[(Slot.*)\]', dut_info_split[i + j]):
                        break
                    elif re.match(r'\s*Name', dut_info_split[i + j]):
                        blank_list.append(dut_info_split[i + j])
                    elif re.match(r'\s*.*\.bin', dut_info_split[i + j]):
                        blank_list.append(dut_info_split[i + j])

                rol_title_list = []
                if blank_list != [] and re.match(r'\s*Name', blank_list[0]):
                    for j in range(len(blank_list)):
                        col_value_list = re.split(r'\s{2,}', blank_list[j])
                        if '' in col_value_list:
                                col_value_list.remove('')
                        if value_title_1 in col_value_list:
                            title_row = col_value_list
                            x_len = len(title_row)
                            for k in range(x_len):
                                if title_row[k] == value_title_1:
                                    new_list_title_key = k
                        else:
                            if col_value_list != "":
                                title_col = col_value_list[new_list_title_key]           #表头的列值位*****
                                rol_title_list.append(title_col)
                                if new_list_title_key + 1 < x_len:
                                    for s in range(new_list_title_key+1, x_len):  #需要变参的地方
                                        key_name = '%s/%s/%s' % (key_main_onekey, title_col, title_row[s])
                                        if s < len(col_value_list):
                                            dict_value[key_name] = col_value_list[s]
                                if new_list_title_key > 0:
                                    for s in range(0, new_list_title_key):  #需要变参的地方
                                        ##遍历列头边的值
                                        key_name = '%s/%s/%s' % (key_main_onekey, title_col, title_row[s])
                                        if s < len(col_value_list):
                                            dict_value[key_name] = col_value_list[s]


            if re.match(r'\s*(.*\.bin)', dut_info_split[i]):
                matchObj = re.match(r'\s*(.*\.bin)', dut_info_split[i])
                key_main = key_main_onekey + '/' + matchObj.group(1).strip()
            blank_list = []
            if re.match(r'\s*-----', dut_info_split[i]):
                for j in range(1, length - i):
                    if re.match(r'\s*-----', dut_info_split[i + j]):
                        break
                    else:
                        blank_list.append(dut_info_split[i + j])
            rol_title_list = []
            if blank_list != [] and re.match(r'\s*Pkg_name', blank_list[0]):
                for j in range(len(blank_list)):
                    x_list= [45, 30, 20, 21]
                    #x_list = [55, 23, 17, 7,10]
                    x_len= len(x_list)
                    cut_star = 0
                    cut_end = 0
                    col_value_list = []
                    for k in range(x_len):
                        cut_end = cut_end+int(x_list[k])
                        col_value = blank_list[j][cut_star:cut_end]
                        cut_star = cut_end
                        col_value = col_value.lstrip()
                        col_value = col_value.rstrip()
                        col_value_list.append(col_value)
                    if value_title_2 in col_value_list:
                        title_row = col_value_list
                        x_len = len(title_row)
                        for k in range(x_len):
                            if title_row[k] == value_title_2:
                                new_list_title_key = k
                    else:
                        if col_value_list != "":
                            title_col = col_value_list[new_list_title_key]           #表头的列值位*****
                            rol_title_list.append(title_col)
                            if new_list_title_key + 1 < x_len:
                                for s in range(new_list_title_key+1, x_len):  #需要变参的地方
                                    key_name = '%s/%s/%s' % (key_main, title_col, title_row[s])
                                    dict_value[key_name] = col_value_list[s]
                            if new_list_title_key > 0:
                                for s in range(0, new_list_title_key):  #需要变参的地方
                                    ##遍历列头边的值
                                    key_name = '%s/%s/%s' % (key_main, title_col, title_row[s])
                                    dict_value[key_name] = col_value_list[s]
        return dict_value

    def dut_get_show_mls_qos_ratelimit(self, show_info):
        """
        Function:show mls qos rate-limit回显解析函数
        CLI命令:show mls qos rate-limit
        回显信息示例:
Ruijie#show mls qos rate-limit
Interface: GigabitEthernet 0/1
rate limit input Kbps = 30720 burst = 256
Interface: GigabitEthernet 0/3
rate limit input Kbps = 51200 burst = 256
Interface: GigabitEthernet 0/24
rate limit output Kbps = 102400 burst = 256
Ruijie# show class-map cmap_dscp7
Class Map cmap_dscp7
Match ip dscp 7
Ruijie# show policy-map pmap_shiyan
Policy Map pmap_shiyan
Class cmap_dscp7
police 20480 128 exceed-action dscp 16
Ruijie#

        Returns:
{'GigabitEthernet 0/1/rate limit input Kbps': '30720'
'GigabitEthernet 0/1/burst': '256'
'GigabitEthernet 0/24/burst': '256'
'GigabitEthernet 0/3/rate limit input Kbps': '51200'
'Interface: GigabitEthernet 0/24/rate limit output': 'rate limit output Kbps = 102400 burst = 256'
'GigabitEthernet 0/3/burst': '256'
'GigabitEthernet 0/24/rate limit output Kbps': '102400'
'Interface: GigabitEthernet 0/1/rate limit input': 'rate limit input Kbps = 30720 burst = 256'
'Interface_list': ['GigabitEthernet 0/1'
'GigabitEthernet 0/3'
'GigabitEthernet 0/24'], 'Interface: GigabitEthernet 0/3/rate limit input': 'rate limit input Kbps = 51200 burst = 256'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mls qos rate-limit | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        address_list = []
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        for value in show_info_list_line:
            if "Interface" in value :
                obj = re.match("Interface:(.*)", value.strip())
                value_title = obj.group(1).strip()
                address_list.append(value_title)
            elif "rate limit" in value :
                obj1 = re.match("(.*) = (\d+)(.*)= (\d+)", value.strip())
                dict_value[ value_title + "/" + obj1.group(1).strip()] = obj1.group(2).strip()
                dict_value[value_title + "/" + obj1.group(3).strip() ]= obj1.group(4).strip()
        dict_value["Interface_list"] = address_list
        #兼任事业部
        cmd_str = 'show mls qos rate-limit'
        # dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        while show_info_list_line:
            key = show_info_list_line[0]
            show_info_list_line = show_info_list_line[1:]
            value = []
            logging.debug(show_info_list_line)
            for index,line in enumerate(show_info_list_line):
                if line.find('Interface') != -1:
                    show_info_list_line = show_info_list_line[index:]
                    break
                else:
                    if line.find('rate limit input') != -1:
                        keyname = key + '/rate limit input'
                        dict_value[keyname] = line
                    elif line.find('rate limit output') != -1:
                        keyname = key + '/rate limit output'
                        dict_value[keyname] = line
                if index == len(show_info_list_line)-1:
                    show_info_list_line=[]
        return dict_value
    def dut_get_show_spaninfo_information_globalinfo(self, show_info):
        """
        Function:show span-info information global-info回显解析函数
        CLI命令:show span-info information global-info
        回显信息示例:
57-2#show span-info information global-info
Driver client index           : 2
Max session number            : 4
Remote span support           : Y
  Max remote span number: 4
  Max remote vlan number: 0
  Remote vlans used     : 
  Span ap mumber support: N
ERSPAN support                : Y
  ERSPAN enhance support      : Y
Reflect port support          : N
Dest port can be aggregateport: Y
Dest port can enable switch   : Y
Dest port can encapsulation   : Y
CPU mirror support   : Y
Span filter support information: 
  Span by source vlan support: RX 0, TX 0
    Source vlans rx used: 
    Source vlans tx used: 
  Span by filter vlan support: RX 1, TX 0
  Span by by ACL support     : RX 1, TX 0
  Span by MAC support        : N
57-2#

        Returns:
{'Span by source vlan support/TX': '0'
'Span ap mumber support': 'N'
'Span by source vlan support/RX': '0'
'Source vlans tx used': ''
'Dest port can encapsulation': 'Y'
'Span by filter vlan support/TX': '0'
'Span by MAC support': 'N'
'Span by filter vlan support/RX': '1'
'Max remote vlan number': '0'
'Driver client index': '2'
'Remote vlans used': ''
'Span by by ACL support/TX': '0'
'Source vlans rx used': ''
'Max remote span number': '4'
'Remote span support': 'Y'
'Dest port can enable switch': 'Y'
'Dest port can be aggregateport': 'Y'
'Span by by ACL support/RX': '1'
'Span filter support information': ''
'Max session number': '4'
'Reflect port support': 'N'
'CPU mirror support': 'Y'
'ERSPAN enhance support': 'Y'
'ERSPAN support': 'Y'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show span-info information global-info | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        address_list = []
        show_info_list_line = show_info.split("\n")
        if re.match(r'.*show.*', show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        for value in show_info_list_line:
            if "," in value :
                obj2 = re.match("(.*): RX (\d+), TX (\d+)", value.strip())
                dict_value[obj2.group(1).strip()+ "/" + "RX"] = obj2.group(2).strip()
                dict_value[obj2.group(1).strip()+ "/" + "TX"] = obj2.group(3).strip()
            elif ":" in value :
                obj1 = re.match("(.*):(.*)", value.strip())
                dict_value[obj1.group(1).strip()] = obj1.group(2).strip()
        return dict_value
    def dut_get_show_ip_ospf(self, show_info):
        """
        Function:show ip ospf回显解析函数
        CLI命令:show ip ospf
        回显信息示例:
dut1(config-if-AggregatePort 3)#show ip ospf 
 Routing Process "ospf 1" with ID 172.29.116.41
 Process uptime is 1 day 22 hours 10 minutes
 Process bound to VRF default
 Memory Overflow is enabled.
 Router is not in overflow state now.
 Conforms to RFC2328, and RFC1583Compatibility flag is enabled
 Supports only single TOS(TOS0) routes
 Supports opaque LSA
 Enable two-way-maintain
 Initial SPF schedule delay 1000 msecs
 Minimum hold time between two consecutive SPFs 5000 msecs
 Maximum wait time between two consecutive SPFs 10000 msecs
 Initial LSA throttle delay 0 msecs
 Minimum hold time for LSA throttle 5000 msecs
 Maximum wait time for LSA throttle 5000 msecs
 Lsa Transmit Pacing timer 40 msecs, 1 LS-Upd
 Minimum LSA arrival 1000 msecs
 Pacing lsa-group: 30 secs
 Number of incomming current DD exchange neighbors 0/5
 Number of outgoing current DD exchange neighbors 0/5
 Number of external LSA 0. Checksum 0x000000
 Number of opaque AS LSA 0. Checksum 0x000000
 Number of non-default external LSA 0
 External LSA database is unlimited.
 Number of LSA originated 0
 Number of LSA received 0
 Log Neighbor Adjency Changes : Enabled 
 Graceful-restart enabled
    Restart grace period 120 secs
    Current Restart status is notRestarting
 Graceful-restart helper support enabled
 Nonstop Routing disabled
  Number of areas attached to this router: 0: 0 normal 0 stub 0 nssa

dut1(config-if-AggregatePort 3)#

        Returns:
{'Current Restart status': 'notRestarting'
'Maximum wait time between two consecutive SPFs': '10000 msecs'
'Nonstop Routing': 'disabled'
'Graceful-restart helper support': 'enabled'
'Memory Overflow': 'enabled'
'Initial LSA throttle': '0 msecs'
'Number of incomming current DD': 'neighbors 0/5'
'Restart grace period': '120 secs'
'Number of outgoing current DD': 'neighbors 0/5'
'RFC1583Compatibility flag': 'enabled'
'Number of areas attached to this router/stub': '0'
'Number of areas attached to this router/normal': '0'
'Pacing lsa-group': '30 secs'
'Number of opaque AS LSA 0.': '0x000000'
'Process bound': 'VRF default'
'Number of LSA received': '0'
'Process uptime': '1 day 22 hours 10 minutes'
'External LSA database': 'unlimited'
'Conforms': 'RFC2328'
'Number of areas attached to this router': '0'
'Number of areas attached': 'this router: 0: 0 normal 0 stub 0 nssa'
'Number of non-default external LSA': '0'
'Number of external LSA 0.': '0x000000'
'Router': 'not in overflow state now'
'Number of areas attached to this router/nssa': '0'
'Lsa Transmit Pacing timer': '40 msecs'
'Routing Process "ospf 1"': 'ID 172.29.116.41'
'Maximum wait time for LSA throttle': '5000 msecs'
'Log Neighbor Adjency Changes': 'Enabled'
'Minimum hold time between two consecutive SPFs': '5000 msecs'
'Number of LSA originated': '0'
'Initial SPF schedule': '1000 msecs'
'Minimum hold time for LSA throttle': '5000 msecs'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip ospf | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_list_line=self.dut_get_start_show_info(show_info)
        for value in show_info_list_line:
            if "Number of areas attached to this router" in value:
                print value
                obj =re.match("Number of areas attached to this router: (.*): (.*)normal (.*)stub (.*)nssa", value.strip())
                dict_value["Number of areas attached to this router"] = obj.group(1).strip()
                dict_value["Number of areas attached to this router" + "/" + "normal"] = obj.group(2).strip()
                dict_value["Number of areas attached to this router" + "/" + "stub"] = obj.group(3).strip()
                dict_value["Number of areas attached to this router" + "/" + "nssa"] = obj.group(4).strip()
            if " with " in value:
                list_with = value.split(" with ")
                dict_value[list_with[0].strip()] = list_with[1].strip()
            elif "," in value:
                list1 = value.split(",")
                for value1 in list1:
                    if " to " in value1:
                        list_to1 = value1.split(" to ")
                        dict_value[list_to1[0].strip()] = list_to1[1].strip()
                    elif " is " in value1:
                        word = re.match("and RFC1583Compatibility flag is(.*)", value1.strip())
                        dict_value["RFC1583Compatibility flag"] = word.group(1).strip()
                    elif "Lsa Transmit Pacing timer" in value1:
                        word1 = re.match("Lsa Transmit Pacing timer(.*)", value1.strip())
                        dict_value["Lsa Transmit Pacing timer"] = word1.group(1).strip()
            elif " is " in value:
                list_is = value.split(" is ")
                dict_value[list_is[0].strip()] = list_is[1].strip().strip(".")
            elif " to " in value:
                list_to = value.split(" to ")
                dict_value[list_to[0].strip()] = list_to[1].strip()
            elif " exchange " in value:
                list_exchange = value.split(" exchange ")
                dict_value[list_exchange[0].strip()] = list_exchange[1].strip()
            elif " Checksum " in value:
                list_Checksum = value.split(" Checksum ")
                dict_value[list_Checksum[0].strip()] = list_Checksum[1].strip()
            elif "Number of LSA" in value:
                list_Number = value.split()
                dict_value["Number of LSA "+list_Number[3].strip()] = list_Number[4].strip()
            elif ":" in value:
                list2 = value.split(":")
                dict_value[list2[0].strip()] = list2[1].strip()
            elif "delay" in value:
                list5 = value.split("delay")
                dict_value[list5[0].strip()] = list5[1].strip()
            elif "consecutive SPFs" in value:
                list3 = value.split("consecutive SPFs")
                dict_value[list3[0].strip()+ " consecutive SPFs"] = list3[1].strip()
            elif "LSA throttle" in value:
                list4 = value.split("LSA throttle")
                dict_value[list4[0].strip()+ " LSA throttle"] = list4[1].strip()
            elif "Number of non-default external LSA" in value:
                word2 = re.match("Number of non-default external LSA(.*)", value.strip())
                dict_value["Number of non-default external LSA"] = word2.group(1).strip()
            elif "Restart grace period" in value:
                word3 = re.match("Restart grace period(.*)", value.strip())
                dict_value["Restart grace period"] = word3.group(1).strip()
            elif "Graceful-restart helper support" in value:
                word4 = re.match("Graceful-restart helper support(.*)", value.strip())
                dict_value["Graceful-restart helper support"] = word4.group(1).strip()
            elif "Nonstop Routing" in value:
                word5 = re.match("Nonstop Routing(.*)", value.strip())
                dict_value["Nonstop Routing"] = word5.group(1).strip()
        return dict_value
    def dut_get_show_isis_gracefulrestart(self, show_info):
        """
        Function:show isis graceful-restart回显解析函数
        CLI命令:show isis graceful-restart
        回显信息示例:
DUT1(config-router)#show isis graceful-restart 

Area (null):
  Graceful-restart Helper: enabled
    Level 1:
      VLAN 8: RR received: 0
      VLAN 9: RR received: 0
    Level 2:
      VLAN 8: RR received: 0
      VLAN 9: RR received: 0
  Graceful-restart: enabled
    Graceful-period: 300s, Level timer: 60s, Interface timer: 3s
    Instance GR status: not restarting

DUT1(config-router)#

        Returns:
{'Level 2:/VLAN 9': 'RR'
'Level 2:/VLAN 8': 'RR'
'Graceful-period': '300s'
'Graceful-restart Helper': 'enabled'
'Level 1:/VLAN 8/received': '0'
'Level 1:/VLAN 9/received': '0'
'Interface timer': '3s'
'Level 1:/VLAN 8': 'RR'
'Level 1:/VLAN 9': 'RR'
'Instance GR status': 'not restarting'
'Level 2:/VLAN 8/received': '0'
'Level timer': '60s'
'Graceful-restart': 'enabled'
'Area (null)': ''
'Level 2:/VLAN 9/received': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show isis graceful-restart | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_list_line = self.dut_get_start_show_info(show_info)
        for value in show_info_list_line:
            value = value.strip()
            if "Graceful-period:" in value:
                list = value.split(",")
                for value1 in list:
                    if ":" in value1:
                        list1 = value1.split(":")
                        dict_value[list1[0].strip()] = list1[1].strip()
            elif "Level" in value:
                key_1 = value
            elif "VLAN" in value:
                obj = re.match("VLAN(.*): (.*)received: (.*)", value.strip())
                dict_value[key_1 + "/" + "VLAN " + obj.group(1).strip()] = obj.group(2).strip()
                dict_value[key_1 + "/" + "VLAN " + obj.group(1).strip() + "/" + "received"] = obj.group(3).strip()
            elif ":" in value:
                list2 = value.split(":")
                dict_value[list2[0].strip()] = list2[1].strip()
        return dict_value
    def dut_get_show_ipv6_ref_route_vrf_word(self,show_info):
        """
        Function:show ipv6 ref route vrf (word)回显解析函数
        CLI命令:show ipv6 ref route vrf (word)
        回显信息示例:
EG2000D#show ipv6 ref route vrf vpn1
Codes: * - default route
 prefix/len                                   weight  path_id next_hop                               interface
*::/0                                         1       38      1000::2                                Loopback 1
*::/0                                         1       39      1000::3                                Loopback 1
 ::1/128                                      1       2       ::1                                    Local 1 
 1000::/64                                    1       37      ::                                     Loopback 1
 1000::1/128                                  1       2       ::1                                    Local 1 
 2000::/16                                    1       38      1000::2                                Loopback 1
 2000::/16                                    1       39      1000::3                                Loopback 1
 fe80::/10                                    1       27      ::                                     Null 0  
 fe80::274:9cff:fe51:8aec/128                 1       2       ::1                                    Local 1

        Returns:
{'::1/128/interface': 'Local 1'
'Codes': '* - default route'
'prefix/len_list': ['*::/0'
'*::/0'
'::1/128'
'1000::/64'
'1000::1/128'
'2000::/16'
'2000::/16'
'fe80::/10'
'fe80::274:9cff:fe51:8aec/128'], 'fe80::/10/next_hop': '::'
'2000::/16/weight': '1'
'1000::1/128/weight': '1'
'fe80::/10/path_id': '27'
'fe80::274:9cff:fe51:8aec/128/weight': '1'
'2000::/16/path_id': '39'
'1000::1/128/next_hop': '::1'
'1000::/64/weight': '1'
'*::/0/weight': '1'
'*::/0/interface': 'Loopback 1'
'2000::/16/next_hop': '1000::3'
'1000::/64/path_id': '37'
'1000::1/128/interface': 'Local 1'
'::1/128/next_hop': '::1'
'fe80::/10/weight': '1'
'*::/0/next_hop': '1000::3'
'::1/128/path_id': '2'
'1000::/64/interface': 'Loopback 1'
'*::/0/path_id': '39'
'fe80::274:9cff:fe51:8aec/128/next_hop': '::1'
'1000::1/128/path_id': '2'
'1000::/64/next_hop': '::'
'fe80::274:9cff:fe51:8aec/128/path_id': '2'
'fe80::/10/interface': 'Null 0'
'::1/128/weight': '1'
'2000::/16/interface': 'Loopback 1'
'fe80::274:9cff:fe51:8aec/128/interface': 'Local 1'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 ref route vrf (word) | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        col_len_list = []
        # 创建字典
        dict_value = {}
        rol_title_list = []
        title_row = []
        value_title = "prefix/len"
        show_info_list_line=self.dut_get_start_show_info(show_info)
        for value in show_info_list_line:
            if "Codes" in value:
                list1 = value.split(":")
                dict_value[list1[0].strip()] = list1[1].strip()
        length = len(show_info_list_line)
        for line_len_num in range(0, length):
            if value_title in show_info_list_line[line_len_num]:  # ***********
                start_num = line_len_num
                end_num = length
                break
        for k in range(start_num, end_num):
            if "prefix/len" in show_info_list_line[k]:
                col_value_list = re.split(r'\s{1,}', show_info_list_line[k].strip())
            else:
                col_value_list = re.split(r'\s{2,}', show_info_list_line[k].strip())
            if value_title in col_value_list:
                title_row = col_value_list
                x_len = len(title_row)
                for i in range(x_len):
                    if title_row[i] == value_title:
                        new_list_title_key = i
            else:
                if col_value_list != "":
                    title_col = col_value_list[new_list_title_key]  # 表头的列值位*****
                    rol_title_list.append(title_col)
                    if new_list_title_key + 1 < x_len:
                        for s in range(new_list_title_key + 1, x_len):  # 需要变参的地方
                            key_name = '%s/%s' % (title_col, title_row[s])
                            dict_value[key_name] = col_value_list[s]
                    if new_list_title_key > 0:
                        for s in range(0, new_list_title_key):  # 需要变参的地方
                            ##遍历列头边的值
                            key_name = '%s/%s' % (title_col, title_row[s])
                            dict_value[key_name] = col_value_list[s]
        dict_value[value_title + "_list"] = rol_title_list
        return dict_value
    def dut_get_show_ipv6_ref_route_vr_word(self,show_info):
        """
        Function:show ipv6 ref route vrf  (word)回显解析函数
        CLI命令:show ipv6 ref route vrf  (word)
        回显信息示例:
Ruijie(config)#show ipv6 ref route vrf (word)
Codes: * - default route
 prefix/len                                   weight  path_id next_hop                               interface
*::/0                                         2       23      ::                                     GigabitEthernet 2/0/1
 ::1/128                                      1       2       ::1                                    Local 1 
 1100::/64                                    1       23      ::                                     GigabitEthernet 2/0/1
 1100::1/128                                  1       2       ::1                                    Local 1 
 2001::/64                                    3       23      ::                                     GigabitEthernet 2/0/1
 2002::/64                                    4       19      ::                                     Null 0  
 fe80::/10                                    1       19      ::                                     Null 0  
 fe80::2d0:f8ff:fe22:33e3/128                 1       2       ::1                                    Local 1

        Returns:
{"::1/128/interface": "Local 1"
"Codes": "* - default route"
"2001::/64/interface": "GigabitEthernet 2/0/1"
"1100::/64/interface": "GigabitEthernet 2/0/1"
"1100::/64/path_id": "23"
"2002::/64/weight": "4"
"1100::/64/next_hop": "::"
"1100::1/128/weight": "1"
"fe80::2d0:f8ff:fe22:33e3/128/weight": "1"
"1100::/64/weight": "1"
"1100::1/128/next_hop": "::1"
"*::/0/weight": "2"
"1100::1/128/path_id": "2"
"fe80::/10/path_id": "19"
"2001::/64/next_hop": "::"
"*::/0/interface": "GigabitEthernet 2/0/1"
"::1/128/next_hop": "::1"
"2001::/64/weight": "3"
"fe80::/10/weight": "1"
"prefix/len_list": ["*::/0"
"::1/128"
"1100::/64"
"1100::1/128"
"2001::/64"
"2002::/64"
"fe80::/10"
"fe80::2d0:f8ff:fe22:33e3/128"], "*::/0/next_hop": "::"
"::1/128/path_id": "2"
"2002::/64/interface": "Null 0"
"*::/0/path_id": "23"
"fe80::2d0:f8ff:fe22:33e3/128/next_hop": "::1"
"2002::/64/next_hop": "::"
"fe80::2d0:f8ff:fe22:33e3/128/path_id": "2"
"fe80::/10/next_hop": "::"
"1100::1/128/interface": "Local 1"
"fe80::/10/interface": "Null 0"
"2002::/64/path_id": "19"
"::1/128/weight": "1"
"fe80::2d0:f8ff:fe22:33e3/128/interface": "Local 1"
"2001::/64/path_id": "23"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 ref route vrf  (word) | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_line = self.dut_get_start_show_info(show_info)
        new_show_line =[]
        for value in show_line:
            if "prefix/len" in value:
                value = value.replace(" ","  ")
            new_show_line.append(value)
        show_info = "\n".join(new_show_line)
        return self.dut_show_autoget_blank_list(show_info,"prefix/len",value_title_2="next_hop")
    def dut_get_show_lsm_interface(self,show_info):
        """
        Function:show lsm interface回显解析函数
        CLI命令:show lsm interface
        回显信息示例:
Ruijie(config)#show lsm interface 
Interface count             : 526
Ethernet count              : 7
  GigabitEthernet           : 7
  Null                      : 1
  Mgmt                      : 1
  Local                     : 2
  WAVI                      : 2
  VMgmt                     : 1
  PseudoWire                : 512
Interface index allocation
  Name                                      Index
  ----------------------------------------  -------------
  GigabitEthernet 0/1                       1      [0x1]
  GigabitEthernet 0/2                       2      [0x2]
  GigabitEthernet 0/3                       3      [0x3]
  GigabitEthernet 0/4                       4      [0x4]
  GigabitEthernet 0/5                       5      [0x5]
  GigabitEthernet 0/6                       6      [0x6]
  GigabitEthernet 0/7                       7      [0x7]
  Null 0                                    4096   [0x1000]
  Mgmt 0                                    8193   [0x2001]
  Local 0                                   4094   [0xffe]
  Local 1                                   4095   [0xfff]
  WAVI 0                                    8449   [0x2101]
Ruijie(config)#

        Returns:
{'GigabitEthernet 0/6/Index/hex': '0x6'
'GigabitEthernet 0/5/Index/hex': '0x5'
'Name_list': ['GigabitEthernet 0/1'
'GigabitEthernet 0/2'
'GigabitEthernet 0/3'
'GigabitEthernet 0/4'
'GigabitEthernet 0/5'
'GigabitEthernet 0/6'
'GigabitEthernet 0/7'
'Null 0'
'Mgmt 0'
'Local 0'
'Local 1'
'WAVI 0'], 'WAVI 0/Index/des': '8449'
'PseudoWire': '512'
'Mgmt 0/Index/hex': '0x2001'
'Local 0/Index/hex': '0xffe'
'GigabitEthernet 0/1/Index/des': '1'
'Local': '2'
'Interface count': '526'
'Null 0/Index/hex': '0x1000'
'Mgmt 0/Index/des': '8193'
'VMgmt': '1'
'Local 1/Index/hex': '0xfff'
'GigabitEthernet 0/1/Index/hex': '0x1'
'Mgmt': '1'
'Ethernet count': '7'
'GigabitEthernet 0/4/Index/hex': '0x4'
'WAVI': '2'
'GigabitEthernet 0/3/Index/hex': '0x3'
'WAVI 0/Index/hex': '0x2101'
'GigabitEthernet 0/2/Index/hex': '0x2'
'GigabitEthernet': '7'
'Local 1/Index/des': '4095'
'GigabitEthernet 0/2/Index/des': '2'
'GigabitEthernet 0/7/Index/hex': '0x7'
'Null': '1'
'Null 0/Index/des': '4096'
'GigabitEthernet 0/5/Index/des': '5'
'GigabitEthernet 0/4/Index/des': '4'
'GigabitEthernet 0/6/Index/des': '6'
'Local 0/Index/des': '4094'
'GigabitEthernet 0/3/Index/des': '3'
'GigabitEthernet 0/7/Index/des': '7'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show lsm interface | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        rol_title_list = []
        title_row = []
        show_info_list_line = self.dut_get_start_show_info(show_info)
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')
        for value in show_info_list_line:
            if ":" in value:
                list1 = value.split(":")
                dict_value[list1[0].strip()] = list1[1].strip()
        value_title = "Name"
        length = len(show_info_list_line)
        for line_len_num in range(0, length):
            if value_title in show_info_list_line[line_len_num]:  # ***********
                start_num = line_len_num
                end_num = length
                break
        (whippletree_list_1, cut_del_1) = self.dut_show_autoget_whippletree(start_num, end_num, show_info_list_line)
        show_info_list_line.remove(show_info_list_line[cut_del_1])
        for k in range(start_num, end_num-1):
            col_value_list = re.split(r'\s{2,}', show_info_list_line[k].strip())
            if value_title in col_value_list:
                title_row = col_value_list
                x_len = len(title_row)
                for i in range(x_len):
                    if title_row[i] == value_title:
                        new_list_title_key = i
            else:
                if col_value_list != "":
                    title_col = col_value_list[new_list_title_key]  # 表头的列值位*****
                    rol_title_list.append(title_col)
                    if new_list_title_key + 1 < x_len:
                        for s in range(new_list_title_key + 1, x_len):  # 需要变参的地方
                            key_name1 = '%s/%s' % (title_col, "Index/des")
                            dict_value[key_name1] = col_value_list[1]
                            key_name2 = '%s/%s' % (title_col, "Index/hex")
                            dict_value[key_name2] = col_value_list[2].strip("[]")
        dict_value[value_title + "_list"] = rol_title_list
        return dict_value

    def dut_get_show_efd_ef_hpage_meminfo(self, show_info):
        dict_value = {}
        show_info_list = show_info.split("\n")
        for value in show_info_list:
            if re.match("(.*): (\d+)\((\d+)KB\)", value):
                obj = re.match("(.*): (\d+)\((\d+)KB\)", value)
                dict_value[obj.group(1).strip()] = obj.group(2).strip()
                dict_value[obj.group(1).strip() + "/KB"] = obj.group(3).strip()
            elif ":" in value:
                list_1 = value.split(":")
                key_1 = list_1[0].strip()
                tmp_value1 = list_1[1].strip()
                dict_value[key_1] = tmp_value1

        return dict_value
    def dut_get_show_ipv6_ref_route_detail_device_num_slot_num(self, show_info):
        dict_value = {}
        show_info_list = show_info.split("\n")
        for value in show_info_list:
            if re.match('IPv6 \S+ vrf:\S+ ecmp_id:\S+ nh_id:\S+ HW:\S+', value.strip()):
                obj = re.match('IPv6 (\S+) vrf\W(\w+) ecmp_id\W(\w+) nh_id\W(\w+) HW\W([A-Z]+)', value.strip())
                key_1 = obj.group(1).strip()
                value_1 = obj.group(2).strip()
                value_2 = obj.group(3).strip()
                value_3 = obj.group(4).strip()
                value_4 = obj.group(5).strip()
                dict_value[key_1 + '/' + 'vrf'] = value_1
                dict_value[key_1 + '/' + 'ecmp_id'] = value_2
                dict_value[key_1 + '/' + 'nh_id'] = value_3
                dict_value[key_1 + '/' + 'HW'] = value_4
            elif re.match('\[(.*)\] \d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+', value.strip()):
                obj = re.match("\[(.*)\] (\d+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)", value.strip())
                value_5 = obj.group(1).strip()
                value_6 = obj.group(2).strip()
                value_7 = obj.group(3).strip()
                value_8 = obj.group(4).strip()
                value_9 = obj.group(5).strip()
                value_10 = obj.group(6).strip()
                value_11 = obj.group(7).strip()
                dict_value[key_1+'/'+'ifx_1'] = value_5
                dict_value[key_1 + '/' + 'ifx_2'] = value_6
                dict_value[key_1 + '/' + 'nh_ip'] = value_7
                dict_value[key_1 + '/' + 'mac'] = value_8
                dict_value[key_1 + '/' + 'cmd'] = value_9
                dict_value[key_1 + '/' + 'vid'] = value_10
                dict_value[key_1 + '/' + 'phyid'] = value_11
        return dict_value
    def dut_get_show_traffic_policy(self, show_info):
        dict_value = {}
        show_info_list = show_info.split("\n")
        for value in show_info_list:
            if re.match('traffic policy \S+', value):
                obj = re.match('traffic policy (\S+)', value)
                key_0 = obj.group(1)
            elif re.match('classifier \w+\s\w+ \w+\s\w+ \d+', value.strip()):
                obj = re.match('classifier (\w+)\s(\w+) (\w+)\s(\w+) (\d+)', value.strip())
                key_1 = obj.group(1).strip()
                key_2 = obj.group(2).strip()
                value_1 = obj.group(3).strip()
                key_3 = obj.group(4).strip()
                value_2 = obj.group(5).strip()
                dict_value[key_0 + '/' + key_1 + '/' + key_2] = value_1
                dict_value[key_0 + '/' + key_1 + '/' + key_3] = value_2
        return dict_value
    def dut_get_show_traffic_policy_word(self, show_info):
        dict_value = {}
        show_info_list = show_info.split("\n")
        for value in show_info_list:
            if re.match('traffic policy \S+', value):
                obj = re.match('traffic policy (\S+)', value)
                key_0 = obj.group(1)
            elif re.match('classifier \w+\s\w+ \w+\s\w+ \d+', value.strip()):
                obj = re.match('classifier (\w+)\s(\w+) (\w+)\s(\w+) (\d+)', value.strip())
                key_1 = obj.group(1).strip()
                key_2 = obj.group(2).strip()
                value_1 = obj.group(3).strip()
                key_3 = obj.group(4).strip()
                value_2 = obj.group(5).strip()
                dict_value[key_1 + '/' + key_2] = value_1
                dict_value[key_1 + '/' + key_3] = value_2
        return dict_value
    def dut_get_show_fabricinterface_status_linkhistory(self, show_info):
        dict_value = {}
        show_info_list = show_info.split("\n")
        flag = 0
        for value in show_info_list:
            if re.match('Fabric-interface \S+', value):
                obj = re.match('Fabric-interface (\S+)', value)
                key_1 = obj.group(1).strip()
            elif re.match('Total counts: \S+', value):
                obj = re.match('Total counts: (\S+)', value)
                value_1 = obj.group(1).strip()
                dict_value[key_1+'/'+'Total counts'] = value_1
            elif "------ " in value.strip():
                flag = 1
                continue
            elif re.match('\S+\s+\d+\S\d+\S\d+ \d+\S\d+\S\d+', value):
                obj = re.match('(\S+)\s+(\d+\S\d+\S\d+ \d+\S\d+\S\d+)', value)
                value_2 = obj.group(1)
                value_3 = obj.group(2)
                dict_value[key_1+'/'+'Status'] = value_2
                dict_value[key_1+'/'+'Change time'] = value_3
            if flag == 1:
                if "----" in value:
                    dict_value[key_1 + '/' + 'Status'] = ""
                    dict_value[key_1 + '/' + 'Change time'] = ""
                flag = 0
        return dict_value
    def dut_get_show_tcp_statistics(self,show_info):

        dict_value = {}
        show_info_list = show_info.split("\n")
        for value in show_info_list:
            if re.match("(.*): (\d+)\((\w+): (\d+)\)", value):
                obj = re.match("(.*): (\d+)\((\w+): (\d+)\)", value)
                dict_value[obj.group(1).strip()] = obj.group(2).strip()
                dict_value[obj.group(3).strip()] = obj.group(4).strip()
            elif ":" in value:
                list_1 = value.split(":")
                key_1 = list_1[0].strip()
                tmp_value1 = list_1[1].strip()
                dict_value[key_1] = tmp_value1

        return dict_value
    def dut_get_show_ipv6_tcp_statistics(self,show_info):
        return self.dut_get_show_tcp_statistics(show_info)
    def dut_get_show_ip_packet_statistic_total(self,show_info):
        dict_value = {}
        show_info_list = show_info.split("\n")
        for value in show_info_list:
            if re.match("Received (\d+) packets, (\d+) bytes",value):
                obj = re.match("Received (\d+) packets, (\d+) bytes",value)
                key_1 = "Received"
                dict_value[key_1+"/packets"] = obj.group(1).strip()
                dict_value[key_1 + "/bytes"] = obj.group(1).strip()
            elif re.match("Sent (\d+) packets, (\d+) bytes",value):
                obj = re.match("Sent (\d+) packets, (\d+) bytes",value)
                key_1 = "Sent"
                dict_value[key_1+"/packets"] = obj.group(1).strip()
                dict_value[key_1 + "/bytes"] = obj.group(1).strip()
            elif re.match("HdrErrors:(\d+)\(BadChecksum:(\d+),TTLExceeded:(\d+),Others:(\d+)\)",value):
                obj = re.match("HdrErrors:(\d+)\(BadChecksum:(\d+),TTLExceeded:(\d+),Others:(\d+)\)",value)
                dict_value["HdrErrors"] = obj.group(1).strip()
                dict_value["HdrErrors/BadChecksum"] = obj.group(2).strip()
                dict_value["HdrErrors/TTLExceeded"] = obj.group(3).strip()
                dict_value["HdrErrors/Others"] = obj.group(4).strip()
            elif re.match("Unicast:(\d+),Multicast:(\d+),Broadcast:(\d+)",value):
                obj = re.match("Unicast:(\d+),Multicast:(\d+),Broadcast:(\d+)",value)
                dict_value[key_1 + "/Unicast"] = obj.group(1).strip()
                dict_value[key_1 + "/Multicast"] = obj.group(2).strip()
                dict_value[key_1 + "/Broadcast"] = obj.group(3).strip()


            elif ":" in value:
                list_1 = value.split(":")
                key_11 = list_1[0].strip()
                tmp_value10 = list_1[1].strip()
                dict_value[key_11] = tmp_value10
        return dict_value
    def dut_get_show_ipv6_packet_statistic_total(self,show_info):
        dict_value = {}
        show_info_list = show_info.split("\n")
        for value in show_info_list:
            if re.match("Received (\d+) packets, (\d+) bytes", value):
                obj = re.match("Received (\d+) packets, (\d+) bytes", value)
                key_1 = "Received"
                dict_value[key_1 + "/packets"] = obj.group(1).strip()
                dict_value[key_1 + "/bytes"] = obj.group(1).strip()
            elif re.match("Sent (\d+) packets, (\d+) bytes", value):
                obj = re.match("Sent (\d+) packets, (\d+) bytes", value)
                key_1 = "Sent"
                dict_value[key_1 + "/packets"] = obj.group(1).strip()
                dict_value[key_1 + "/bytes"] = obj.group(1).strip()
            elif re.match("HdrErrors:(\d+)\(HoplimitExceeded:(\d+),Others:(\d+)\)", value):
                obj = re.match("HdrErrors:(\d+)\(HoplimitExceeded:(\d+),Others:(\d+)\)", value)
                dict_value["HdrErrors"] = obj.group(1).strip()
                dict_value["HdrErrors/HoplimitExceeded"] = obj.group(2).strip()
                dict_value["HdrErrors/Others"] = obj.group(3).strip()
            elif re.match("Unicast:(\d+),Multicast:(\d+)", value):
                obj = re.match("Unicast:(\d+),Multicast:(\d+)", value)
                dict_value[key_1 + "/Unicast"] = obj.group(1).strip()
                dict_value[key_1 + "/Multicast"] = obj.group(2).strip()


            elif ":" in value:
                list_1 = value.split(":")
                key_11 = list_1[0].strip()
                tmp_value10 = list_1[1].strip()
                dict_value[key_11] = tmp_value10
        return dict_value

    def dut_get_show_ip_ref_route_detail_ip(self, show_info):
        dict_value = {}
        show_info_list = show_info.split("\n")
        flag = 0
        flag_2_len_num = 0
        for value in show_info_list:
            if re.match("IPv\d+ (\S+) vrf:(\S+)", value.strip()):
                obj = re.match("IPv\d+ (\S+) vrf:(\S+)", value.strip())
                key_1 = obj.group(1).strip()
                dict_value[key_1 + "/vrf"] = obj.group(2).strip()
            elif "SSC INFO" in value:
                flag = 1
                continue
            elif "SSD INFO" in value:
                flag = 2
                continue
            elif "SSA INFO" in value:
                flag = 3
                continue
            elif flag == 1:
                if re.match("ifx .*", value.strip()):
                    key_2_list = value.strip().split()
                elif re.match("\[(.*)\] (.*)", value.strip()):
                    obj = re.match("\[(.*)\] (.*)", value.strip())
                    dict_value[key_1 + "/ifx_0"] = obj.group(1).strip()
                    value_2_list = obj.group(2).strip().split()
                    for i in range(len(key_2_list)):
                        dict_value[key_1 + "/" + key_2_list[i]] = value_2_list[i]
            elif flag == 2:
                if re.search("LC (.*) ROUTE INFO", value):
                    obj = re.search("LC (.*) ROUTE INFO", value)
                    key_1 = obj.group(1).strip()
                elif "prefix_type" in value:
                    key_2_list = value.strip().split()
                    flag_2_len_num = len(key_2_list)
                elif len(value.strip().split()) == flag_2_len_num:
                    value_2_list = value.strip().split()
                    for i in range(len(key_2_list)):
                        dict_value[key_1 + "/" + key_2_list[i]] = value_2_list[i]
                elif re.match("ifx .*", value.strip()):
                    key_2_list = value.strip().split()
                elif re.match("\[(.*)\] (.*)", value.strip()):
                    obj = re.match("\[(.*)\] (.*)", value.strip())
                    dict_value[key_1 + "/ifx_1"] = obj.group(1).strip()
                    value_2_list = obj.group(2).strip().split()
                    for i in range(len(key_2_list)):
                        dict_value[key_1 + "/" + key_2_list[i]] = value_2_list[i]
            elif flag == 3:
                if re.search("LC (.*) ROUTE INFO", value):
                    obj = re.search("LC (.*) ROUTE INFO", value)
                    key_1 = obj.group(1).strip()
                elif re.match("\[unit:(\d+)\] hw_type:(\S+) ecmpgid:(\S+) nh_id:(\S+) flowid:(\S+) hit:(\S+)", value):
                    obj = re.match("\[unit:(\d+)\] hw_type:(\S+) ecmpgid:(\S+) nh_id:(\S+) flowid:(\S+) hit:(\S+)",
                                   value)
                    dict_value[key_1 + "/unit"] = obj.group(1).strip()
                    dict_value[key_1 + "/hw_type"] = obj.group(2).strip()
                    dict_value[key_1 + "/ecmpgid"] = obj.group(3).strip()
                    dict_value[key_1 + "/nh_id"] = obj.group(4).strip()
                    dict_value[key_1 + "/flowid"] = obj.group(5).strip()
                    dict_value[key_1 + "/hit"] = obj.group(6).strip()
        return dict_value
    def dut_get_show_traffic_classifier(self, show_info):
        dict_value = {}
        show_info_list = show_info.split("\n")
        for value in show_info_list:
            if re.match("if-match (.*) (\d+)", value.strip()):
                obj = re.match("if-match (.*) (\d+)", value.strip())
                key_1 = obj.group(1).strip()
                dict_value[key_1] = obj.group(2).strip()
            elif re.match("if-match (.*)", value.strip()):
                obj = re.match("if-match (.*)", value.strip())
                key_1 = obj.group(1).strip()
                dict_value[key_1] = ""
        return dict_value
    def dut_get_show_traffic_classifier_word(self,show_info):
        return self.dut_get_show_traffic_classifier(show_info)
    def dut_get_show_traffic_behavior_word(self, show_info):
        dict_value = {}
        show_info_list = show_info.split("\n")
        for value in show_info_list:
            if re.match("remark (.*) (\d+)", value.strip()):
                obj = re.match("remark (.*) (\d+)", value.strip())
                key_1 = obj.group(1).strip()
                dict_value[key_1] = obj.group(2).strip()
            elif re.match("cir (\d+) pir (\d+)", value.strip()):
                obj = re.match("cir (\d+) pir (\d+)", value.strip())
                dict_value["cir"] = obj.group(1).strip()
                dict_value["pir"] = obj.group(2).strip()
            elif re.match("service-class (.* color) (\w+)", value.strip()):
                obj = re.match("service-class (.* color) (\w+)", value.strip())
                dict_value[obj.group(1).strip()] = obj.group(2).strip()
        return dict_value
    def dut_get_show_cpuprotect_planedefend_all_statistics_device_num(self, show_info):
        dict_value = {}
        show_info_list = show_info.split("\n")
        for value in show_info_list:
            if re.match("(.*) information:", value):
                obj = re.match("(.*) information:", value)
                key_1 = obj.group(1).strip()
            elif re.match("(.*) subinterface:", value):
                obj = re.match("(.*) subinterface:", value)
                key_2 = obj.group(1).strip()
            elif "STATISTICS:" in value:
                pass
            elif re.match("RULE: (.*)", value.strip()):
                obj = re.match("RULE: (.*)", value.strip())
                list_1 = obj.group(1).strip().split(":")
                dict_value[key_1 + "/" + key_2 + "/" + list_1[0].strip()] = list_1[1].strip().replace("packets", "").strip()
            elif ":" in value:
                list_1 = value.split(":")
                dict_value[key_1 + "/" + key_2 + "/" + list_1[0].strip()] = list_1[1].strip().replace("packets", "").strip()
        return dict_value
    def dut_get_show_cpuprotect_planedefend_all_statistics_slot_num(self, show_info):
        return self.dut_get_show_cpuprotect_planedefend_all_statistics_device_num(show_info)
    def dut_get_show_cpuprotect_planedefend_all_config(self, show_info):
        dict_value = {}
        show_info_list = show_info.split("\n")
        for value in show_info_list:
            if re.match("(.*) information:(.*)", value.strip()):
                obj = re.match("(.*) information:(.*)", value.strip())
                key_1 = obj.group(1).strip()
            elif re.match("(.*) subinterface:(.*)", value.strip()):
                obj = re.match("(.*) subinterface:(.*)", value.strip())
                key_2 = obj.group(1).strip()
                dict_value[key_1 + "/" + key_2] = obj.group(2).strip()
            elif re.match("RULE: (.*)", value.strip()):
                obj = re.match("RULE: (.*)", value.strip())
                if ":" in obj.group(1).strip():
                    list_1 = obj.group(1).strip().split(":")
                    dict_value[key_1 + "/" + key_2 + "/" + list_1[0].strip()] = list_1[1].strip()
            elif re.match("allow: (.*)", value.strip()):
                obj = re.match("allow: (.*)", value.strip())
                dict_value[key_1 + "/" + key_2 + "/allow"] = obj.group(1).strip()
            elif re.match("(.*)rate-limit: (\d+)\(pps\) burst-rate-limit: (\d+)\(pps\) conn-total: (\d+) conn-rate-limit: (\d+) conn-burst-rate-limit: (\d+)(.*)", value.strip()):
                obj = re.match("(.*)rate-limit: (\d+)\(pps\) burst-rate-limit: (\d+)\(pps\) conn-total: (\d+) conn-rate-limit: (\d+) conn-burst-rate-limit: (\d+)(.*)", value.strip())
                dict_value[key_1 + "/" + key_2 + "/rate-limit"] = obj.group(2).strip()
                dict_value[key_1 + "/" + key_2 + "/burst-rate-limit"] = obj.group(3).strip()
                dict_value[key_1 + "/" + key_2 + "/conn-total"] = obj.group(4).strip()
                dict_value[key_1 + "/" + key_2 + "/conn-rate-limit"] = obj.group(5).strip()
                dict_value[key_1 + "/" + key_2 + "/conn-burst-rate-limit"] = obj.group(6).strip()
            elif re.match("rate-limit: (\d+)\(pps\) burst-rate-limit: (\d+)\(pps\) conn-total: (\d+)", value.strip()):
                obj = re.match("rate-limit: (\d+)\(pps\) burst-rate-limit: (\d+)\(pps\) conn-total: (\d+)", value.strip())
                dict_value[key_1 + "/" + key_2 + "/rate-limit"] = obj.group(1).strip()
                dict_value[key_1 + "/" + key_2 + "/burst-rate-limit"] = obj.group(2).strip()
                dict_value[key_1 + "/" + key_2 + "/conn-total"] = obj.group(3).strip()
            elif re.match("rate-limit: (\d+)\(pps\) burst-rate-limit: (\d+)\(pps\)", value.strip()):
                obj = re.match("rate-limit: (\d+)\(pps\) burst-rate-limit: (\d+)\(pps\)", value.strip())
                dict_value[key_1 + "/" + key_2 + "/rate-limit"] = obj.group(1).strip()
                dict_value[key_1 + "/" + key_2 + "/burst-rate-limit"] = obj.group(2).strip()
        return dict_value
    def dut_get_execute_diagnose_cmd_at_xdp_cluster_oob_show_interface_status_all(self,show_info):
        dict_value = {}
        show_info_list = show_info.split("\n")
        for value in show_info_list:
            if re.match("(\d+)\s+(\w+)\Z",value.strip()):
                obj = re.match("(\d+)\s+(\w+)\Z",value.strip())
                dict_value[obj.group(1).strip() + "/Physical statu"] = obj.group(2).strip()
        return dict_value
    def dut_get_show_heap_stats(self,show_info):
        dict_value = {}
        show_info_list = show_info.split("\n")
        for value in show_info_list:
            if re.match("(.*): (\d+)",value.strip()):
                obj = re.match("(.*): (\d+)",value.strip())
                dict_value[obj.group(1).strip()] = obj.group(2).strip()
        return dict_value
    def dut_get_show_crypto_key_mypubkey_sm2(self,show_info):
        dict_value = {}
        show_info_list = show_info.split("\n")
        temp = ""
        flag = 0
        for value in show_info_list:
            if re.match("(Key Data):",value):
                obj = re.match("(Key Data):",value)
                key = obj.group(1)
                flag = 1
                continue
            elif ":" in value:
                list_1 = value.strip().replace(":", ",", 1).strip()
                list_2 = list_1.split(",")
                dict_value[list_2[0]] = list_2[1].strip()
            if flag == 1:
                temp = str(temp +" "+ value.strip()).strip()
        dict_value[key] = temp
        return dict_value
    def dut_get_show_lldp_localinformation(self, show_info):
        dict_value = {}
        show_info_list = show_info.split("\n")
        for value in show_info_list:
            if "Global LLDP local-information:" in value:
                continue
            elif ':' in value:
                list_1 = value.strip().split(":")
                dict_value[list_1[0].strip()] = list_1[1].strip()
        return dict_value
    def dut_get_show_ipv6_ref_route_detail_device_num(self, show_info):
        return self.dut_get_show_ipv6_ref_route_detail_device_num_slot_num(show_info)
    def dut_get_show_bfd_neighbors_client_static(self, show_info):
        dict_value = {}
        show_info_list = show_info.split("\n")
        flag_1_len_num = 0
        for value in show_info_list:
            if ',' in value:
                list_1 = re.split(r'[:,]', value.strip())
                dict_value[list_1[0].strip()] = list_1[1].strip()
                dict_value[list_1[0].strip() + '/' + list_1[2].strip()] = list_1[3].strip()
            elif 'OurAddr' in value:
                key_1_list = value.strip().split()
                flag_1_len_num = len(key_1_list)
            elif len(value.strip().split()) == flag_1_len_num:
                value_1_list = value.strip().split()
                for i in range(len(key_1_list)):
                    dict_value[value_1_list[2] + '/' + key_1_list[i]] = value_1_list[i]
        return dict_value
    def dut_get_show_service(self, show_info):
        dict_value = {}
        show_info_list = show_info.split("\n")
        for value in show_info_list:
            if ':' in value:
                list_1 = value.strip().split(":")
                dict_value[list_1[0].strip()] = list_1[1].strip()
        return dict_value
    def dut_get_show_ip_igmp_groups_detail(self, show_info):
        dict_value = {}
        show_info_list = show_info.split("\n")
        flag_2_len_num = 0
        key_3_list = []
        for value in show_info_list:
            if 'Interface' in value:
                continue
            if re.match('Group:(.+)', value.strip()):
                obj = re.match('Group:(.+)', value.strip())
                key_1 = obj.group(1).strip()
            elif re.match('(.+):\s+(.+)', value.strip()):
                obj = re.match('(.+):\s+(.+)', value.strip())
                key_2 = obj.group(1)
                dict_value[key_1 + '/' + key_2] = obj.group(2).strip()
            else:
                if 'Source Address' in value:
                    w = value.replace('    ', '  ')
                    key_3_list = w.strip().split('  ')
                    flag_2_len_num = len(key_3_list)
                elif len(value.strip().split()) == flag_2_len_num:
                    value_2_list = value.strip().split()
                    for i in range(len(key_3_list)):
                        dict_value[key_1+'/'+key_3_list[i]] = value_2_list[i]
        return dict_value
    def dut_get_show_ipv6_pim_sparsemode_interface_dutport_detail(self, show_info):
        dict_value = {}
        show_info_list = show_info.split("\n")
        flag_1 = 0
        flag_2 = 0
        flag_3 = 0
        for value in show_info_list:
            if '#' in value:
                continue
            elif re.match('.+\(vif (\S+)\):', value):
                obj = re.match('.+\(vif (\S+)\):', value)
                dict_value['vif'] = obj.group(1)
            elif re.search('Address (\S+), DR (\S+)',value):
                obj = re.search('Address (\S+), DR (\S+)',value)
                dict_value['Address'] = obj.group(1)
                dict_value['DR'] = obj.group(2)
            elif re.search('Hello period (\S+) seconds\(default: (\S+) seconds\), Next Hello in (\S+) seconds',value):
                obj = re.search('Hello period (\S+) seconds\(default: (\S+) seconds\), Next Hello in (\S+) seconds',value)
                dict_value['Hello period'] = obj.group(1)
                dict_value['Hello period/default'] = obj.group(2)
                dict_value['Next Hello in'] = obj.group(3)
            elif re.search('Triggered Hello period (\S+) seconds\(default: (\S+) seconds\)',value):
                obj = re.search('Triggered Hello period (\S+) seconds\(default: (\S+) seconds\)',value)
                dict_value['Triggered Hello period'] = obj.group(1)
                dict_value['Triggered Hello period/default'] = obj.group(2)
            elif re.search('Subvlan config, disable_config\((\S+)\), all_config\((\S+)\), vlan_config\((\S+)\)',value):
                obj = re.search('Subvlan config, disable_config\((\S+)\), all_config\((\S+)\), vlan_config\((\S+)\)',value)
                dict_value['disable_config'] = obj.group(1)
                dict_value['all_config'] = obj.group(2)
                dict_value['vlan_config'] = obj.group(3)
            elif re.search('Subvlan id (\S+)',value):
                obj = re.search('Subvlan id (\S+)',value)
                dict_value['Subvlan id'] = obj.group(1)
            elif '  Hello Options:' in value:
                flag_1 = 1
            elif '  LAN Prune Delay:' in value:
                flag_1 = 0
                flag_2 = 1
            elif'  Secondary addresses:' in value:
                flag_2 = 0
                flag_3 = 1
            else:
                if flag_1 == 1:
                    if re.search('Holdtime: (\S+) seconds, default: (\S+) seconds',value):
                        obj = re.search('Holdtime: (\S+) seconds, default: (\S+) seconds',value)
                        dict_value['Hello Options/Holdtime'] = obj.group(1)
                        dict_value['Hello Options/Holdtime/default'] = obj.group(2)
                    elif re.search('Propagation Delay: (\S+) milliseconds, default: (\S+) milliseconds',value):
                        obj = re.search('Propagation Delay: (\S+) milliseconds, default: (\S+) milliseconds',value)
                        dict_value['Hello Options/Propagation Delay'] = obj.group(1)
                        dict_value['Hello Options/Propagation Delay/default'] = obj.group(2)
                    elif re.search('Override interval: (\S+) milliseconds, default: (\S+) milliseconds',value):
                        obj = re.search('Override interval: (\S+) milliseconds, default: (\S+) milliseconds',value)
                        dict_value['Hello Options/Override interval'] = obj.group(1)
                        dict_value['Hello Options/Override interval/default'] = obj.group(2)
                    elif ',' in value:
                        list_2 = re.split(r'[:,]', value.strip())
                        dict_value['Hello Options/' + list_2[0].strip() + '/' + list_2[2].strip()] = list_2[3].strip()
                        dict_value['Hello Options/' + list_2[0].strip()] = list_2[1].strip()
                    elif ':' in value:
                        list_1 = value.split(':')
                        dict_value['Hello Options/' + list_1[0].strip()] = list_1[1].strip()
                if flag_2 == 1:
                    if re.search('Propagation Delay: (\S+) milliseconds',value):
                        obj = re.search('Propagation Delay: (\S+) milliseconds',value)
                        dict_value['LAN Prune Delay/Propagation Delay'] = obj.group(1)
                    elif re.search('Override interval: (\S+) milliseconds',value):
                        obj = re.search('Override interval: (\S+) milliseconds',value)
                        dict_value['LAN Prune Delay/Override interval'] = obj.group(1)
                if flag_3 == 1:
                    dict_value['Secondary addresses'] = value.strip()
        return dict_value

    def dut_get_show_ip_ref_detail(self, show_info):
        dict_value = {}
        show_info_list_line = show_info.split("\n")
        for list_value in show_info_list_line:
            if re.match(".*:.*", list_value):
                list_value_split = list_value.split(":", 1)
                key_name = '%s' % (list_value_split[0].lstrip().rstrip().replace("\r", ""))
                dict_value[key_name] = list_value_split[1].lstrip().rstrip().replace("\r", "").rstrip(".")
        # print dict_value
        return dict_value
    def dut_get_show_routeres_usage_all(self, show_info):
        dict_value = {}
        new_list = []
        flag = 0
        flag_1 = 0
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if 'L3 Software Statistics:' in value:
                flag = 1
            elif 'L3 Forwarding Resourses:' in value:
                flag = 0
            elif ':' in value:
                list_1 = value.strip().split(":")
                dict_value[list_1[0].strip()] = list_1[1].strip()
            elif flag == 1:
                if 'Max' in value:
                    flag_1 = 1
                    new_list.append(value.strip())
                elif flag_1 == 1:
                    if '---' not in value:
                        new_list.append(value.strip())
                        new_show = "\n".join(new_list)
                        dict_value_1 = self.dut_show_autoget_blank_list_3(new_show, 'Switch', value_title_2='Slot',value_title_3='Name')
                else:
                    if '---' not in value:
                        new_list.append(value.strip())
                        new_show_1 = "\n".join(new_list)
                        dict_value_2 = self.dut_show_autoget_blank_list_3(new_show_1, 'Switch', value_title_2='Slot',value_title_3='Name')
        return dict(dict_value_1.items() + dict_value.items() + dict_value_2.items())
    #1131
    def dut_get_show_hdf_detailinfo_slot_num_mainnode_FABRIC_INF_childnode_protocol(self, show_info):
        show_info_list = self.dut_get_start_show_info(show_info)
        dict_value = {}
        dict_value_1 = {}
        new_list = []
        for value in show_info_list:
            if ':' in value:
                list_1 = value.split(':')
                dict_value_1[list_1[0].strip()] = list_1[1].strip()
            elif re.match("--------------------", value.strip()):
                if len(new_list) != 0:
                    new_show = "\n".join(new_list)
                    dict_value = self.dut_show_autoget_blank_list(new_show, "Fabric-interface", split_one=1)
                new_list = []
            else:
                new_list.append(value)
        if len(new_list) != 0:
            new_show = "\n".join(new_list)
            dict_value = self.dut_show_autoget_blank_list(new_show, "Fabric-interface")
        return dict(dict_value.items()+dict_value_1.items())
    #1120
    def dut_get_show_policymap_statistics_name_word_output(self, show_info):
        dict_value = {}
        flag = 0
        new_list = []

        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match('(Last \d+ seconds rate):', value):
                obj = re.match('(Last \d+ seconds rate):', value)
                key_1 = obj.group(1)
                flag = 1
            elif ':' in value:
                list_1 = value.split(':')
                dict_value[list_1[0].strip()] = list_1[1].strip()
            elif "------" not in value:
                if flag == 0:
                    new_list.append(value.strip())
                    new_show = "\n".join(new_list)
                    dict_value_1 = self.dut_show_autoget_blank_list(new_show, "Item")
                elif flag == 1:
                    new_list.append(value.strip())
                    new_show = "\n".join(new_list)
                    dict_value_2 = self.dut_show_autoget_blank_list(new_show, "Item")
                    for k,v in dict_value_2.items():
                        dict_value[key_1 + "/" + k] = v
        return dict(dict_value.items()+dict_value_1.items()+dict_value_2.items())
    #1118
    def dut_get_show_port_maclink(self, show_info):
        dict_value = {}
        new_list = []

        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if "------" not in value :
                new_list.append(value.strip())
                new_show = "\n".join(new_list)
                dict_value = self.dut_show_autoget_blank_list(new_show, "GPort",split_one=1)
        for k,v in dict_value.items():
            if re.match("(\d+).*",value.strip()):
                obj = re.match("(\d+).*",value.strip())
                dict_value[k] = obj.group(1).strip()
            else:
                dict_value[k] = v
        return dict_value
    #1040
    def dut_get_show_ip_route_static_bfd(self, show_info):
        dict_value = {}
        show_info_list = show_info.split("\n")
        for value in show_info_list:
            if re.match('(\S+)\s+(\S+) via (\S+), (.+), BFD state is (\S+), BFD ID is (\S+), session name is (\S+)',
                        value):
                obj = re.match(
                    '(\S+)\s+(\S+) via (\S+), (.+), BFD state is (\S+), BFD ID is (\S+), session name is (\S+)',
                    value)
                key_1 = obj.group(2)
                key_2 = obj.group(3)
                dict_value[key_1 + '/' + key_2 + '/static'] = obj.group(1)
                dict_value[key_1 + '/' + key_2 + '/via'] = obj.group(3)
                dict_value[key_1 + '/' + key_2 + '/interface'] = obj.group(4)
                dict_value[key_1 + '/' + key_2 + '/BFD state'] = obj.group(5)
                dict_value[key_1 + '/' + key_2 + '/BFD ID'] = obj.group(6)
                dict_value[key_1 + '/' + key_2 + '/session name'] = obj.group(7)
        return dict_value
    #1020
    def dut_get_show_isis_database_detail(self, show_info):
        dict_value = {}
        flag = 0
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match('Area (\d+)', value):
                obj = re.match('Area (\d+)', value)
                key_1 = obj.group(1)
                flag = 1
            elif flag == 1:
                if re.match('IS-IS (\S+) Link State Database:',value):
                    obj = re.match('IS-IS (\S+) Link State Database:',value)
                    key_2 = obj.group(1)
                elif re.match('Metric:   (\S+)          (\S+) (.+)',value):
                    obj = re.match('Metric:   (\S+)          (\S+) (.+)',value)
                    key_3 = obj.group(2)
                    dict_value[key_1 + '/' + key_2 + '/' + key_3 + '/Metric'] = obj.group(1)
                    dict_value[key_1 + '/' + key_2 + '/' + key_3] = obj.group(3)
                elif ':' in value:
                    list_1 = value.split(':')
                    dict_value[key_1 + '/' + key_2 + '/' + list_1[0].strip()] = list_1[1].strip()
                elif re.match('LSPID', value):
                    value1 = value.split('  ')
                    for j in range(len(value1)):
                        value1[j].strip()
                    while '' in value1:
                        value1.remove('')
                else:
                    value2 = value.split(' ')
                    for j in range(len(value2)):
                        value2[j].strip()
                    while '' in value2:
                        value2.remove('')
                    if '*' in value2:
                        value2.remove('*')
                    for j in range(len(value2)):
                        dict_value[key_1 +'/'+key_2+'/'+value1[j].strip()] = value2[j]
            else:
                if re.match('IS-IS (\S+) Link State Database:', value):
                    obj = re.match('IS-IS (\S+) Link State Database:', value)
                    key_4 = obj.group(1)
                elif re.match('LSPID', value):
                    value3 = value.split('  ')
                    for j in range(len(value3)):
                        value3[j].strip()
                    if '' in value3:
                        value3.remove('')
                    for j in range(len(value3)):
                        dict_value['Area (null)' + '/' + key_4 + '/' + value3[j]] = ''
        return dict_value
    #1110
    def dut_get_show_ipv6_pim_sparsemode_interface(self, show_info):
        show_info = show_info.replace("VIFindex Ver/Mode Nbr-Count DR-Prior","VIFindex    Ver/Mode   Nbr-Count   DR-Prior")
        dict_value = {}
        new_list = []
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            new_list.append(value.strip())
            new_show = "\n".join(new_list)
            dict_value = self.dut_show_autoget_blank_list(new_show, "Address")
        return dict_value
    #1023
    def dut_get_ut_show_lport_info(self, show_info):
        dict_value = {}
        flag = 0
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if 'begin' in value:
                flag = 1
            elif 'end' in value:
                flag = 0
            elif flag == 1:
                value1 = value.split(' ')
                while '' in value1:
                    value1.remove('')
                for value in value1:
                    list_1 = value.split('=')
                    dict_value[list_1[0].strip()] = list_1[1].strip()
        return dict_value
    #1114
    def dut_get_ut_show_port_config(self,show_info):
        dict_value = {}
        new_list = []
        flag = 0
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if '---' in value:
                flag = 1
            elif flag == 1:
                if re.search('(\<\d+\>)',value):
                    obj = re.search('(\<\d+\>)',value)
                    key_1 = obj.group(1)
                    new_list.append(value.strip())
                #elif re.search('batch_num : (\d+)',value):
                #    obj = re.match('batch_num : (\d+)',value)
                #    key_2 = obj.group(1)
                elif '=' in value:
                    list_2 = value.strip().split("=")
                    dict_value[key_1 + '/' + list_2[0].strip()] = list_2[1].strip()
                elif re.search('config_time: (\d+)(\(s\)).+\s+(\d+)(\(us\))',value):
                    obj = re.search('config_time: (\d+)(\(s\)).+\s+(\d+)(\(us\))',value)
                    dict_value[key_1 + '/config_time/'+obj.group(2)] = obj.group(1)
                    dict_value[key_1 + '/config_time/'+obj.group(4)] = obj.group(3)
                elif re.search('update_stat: (\d+)(\(s\)).+\s+(\d+)(\(us\))',value):
                    obj = re.search('update_stat: (\d+)(\(s\)).+\s+(\d+)(\(us\))',value)
                    dict_value[key_1 + '/update_stat/' + obj.group(2)] = obj.group(1)
                    dict_value[key_1 + '/update_stat/' + obj.group(4)] = obj.group(3)
                elif ':' in value:
                    list_1 = value.strip().split(":")
                    dict_value[key_1 + '/' + list_1[0].strip()] = list_1[1].strip()
                else:
                    if 'RG_AT command execute end.' not in value:
                        new_list.append(value.strip())
                    new_show = "\n".join(new_list)
                    dict_value_1 = self.dut_show_autoget_blank_list(new_show, "num")
        return dict(dict_value_1.items()+dict_value.items())
    #1026
    def dut_get_show_ps(self,show_info):
        dict_value = {}
        new_list = []
        flag = 0
        flag_1 = 0
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if 'port' in value:
                new_list.append(value)
                flag_1 = 1
            elif flag_1 == 1:
                new_list.append(value)
        new_show = "\n".join(new_list)
        star, end, show_len_list, show_info_list_line = self.dut_common_get_linelist(new_show, "port", split_num=1)
        show_len_list = [17,6,6,7,5,6,9,7,7,5,6,7,7,4]
        dict_value = self.dut_show_autoget_form(star, end, "port", show_len_list, show_info_list_line)
        new_dict_value = {}
        for k,v in dict_value.items():
            if re.search('link',k):
                new_key = k.replace('link','ena/link')
                new_dict_value[new_key] = v
            elif re.search('duplex', k):
                new_key = k.replace('duplex','speed/duplex')
                new_dict_value[new_key] = v
            elif re.search('scan', k):
                new_key = k.replace('scan','linkscan')
                new_dict_value[new_key] = v
            elif re.search('neg?', k):
                new_key = k.replace('neg?','autoneg?')
                new_dict_value[new_key] = v
            elif re.search('state', k):
                new_key = k.replace('state','STPstate')
                new_dict_value[new_key] = v
            elif re.search('ops', k):
                new_key = k.replace('ops','lrnops')
                new_dict_value[new_key] = v
            elif re.search('face', k):
                new_key = k.replace('face','interface')
                new_dict_value[new_key] = v
            elif re.search('frame', k):
                new_key = k.replace('frame','maxframe')
                new_dict_value[new_key] = v
            elif re.search('thru?', k):
                new_key = k.replace('thru?','cutrthru?')
                new_dict_value[new_key] = v
            elif re.search('back', k):
                new_key = k.replace('back','loopback')
                new_dict_value[new_key] = v
            else:
                new_dict_value[k] = v
        return new_dict_value
    #1085
    def dut_get_show_ip_ospf_tilfa_node(self, show_info):
        dict_value = {}
        show_info_list = show_info.split("\n")
        ip_list = []
        for value in show_info_list:
            if "#" in value:
                continue
            elif re.match('OSPF process (\S+):',value):
                obj = re.match('OSPF process (\S+):',value)
                key_1 = obj.group(1)
            elif re.match("Area \S+: Node RID:\S+", value):
                obj = re.match("Area (\S+): Node RID:(\S+)", value)
                dict_value[key_1 + "/Area"] = obj.group(1).strip()
                dict_value[key_1 + '/Area ' + obj.group(1).strip() + "/Node RID"] = obj.group(2).strip()
            elif re.match('DestNode (\S+):',value):
                obj = re.match('DestNode (\S+):',value)
                key_2 = obj.group(1)
                ip_list.append(key_2)
            elif re.match('(Type \S+, \S+)', value):
                obj = re.match('(Type \S+, \S+)', value)
                dict_value[key_1+'/'+key_2 + '/'+'Repair path'] = obj.group(1)
            elif re.search(':', value):
                list_1 = value.strip().split(":", 1)
                dict_value[key_1 + "/" + key_2 + '/' + list_1[0].strip()] = list_1[1].strip()
        dict_value["ip_list"] = ip_list
        return dict_value
    #1130
    def dut_get_show_ip_flow_cache_dev_num_slot_num(self, show_info):
        show_info = show_info.replace("Type SrcIPAddress    DstIPAddress    Sport Dport Pro Tos Flag Active     Vlan VNI","Type  SrcIPAddress    DstIPAddress    Sport  Dport  Pro  Tos  Flag  Active     Vlan  VNI")
        dict_value = {}
        new_list = []
        flag = 0
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if 'Protocol' in value:
                list1 = value.split(' ')
                while '' in list1:
                    list1.remove('')
            elif re.match('--------\s+', value):
                flag = 1
                list2 = value.split(' ')
                while '' in list2:
                    list2.remove('')
                list2[0] = ''
                sum_list = []
                for index, item in enumerate(list1):
                    sum_list.append(item + list2[index])
                str1 = '  '.join(sum_list)
                new_list.append(str1.strip())
            elif flag == 1:
                new_list.append(value.strip())
                new_show = "\n".join(new_list)
                dict_value = self.dut_show_autoget_blank_list(new_show, "Protocol")
            else:
                if '---' not in value:
                    list3 = value.split(' ')
                    while '' in list3:
                        list3.remove('')
                    list3[12] = list3[12] + ' ' + list3[13]
                    list3[12] = list3[12] + ' ' + list3[14]
                    list3.remove(list3[13])
                    list3.remove(list3[13])
                    value1 = '  '.join(list3)
                    new_list.append(value1.strip())
                    new_show = "\n".join(new_list)
                    dict_value_1 = self.dut_show_autoget_blank_list(new_show, "Type")
        return dict(dict_value.items()+dict_value_1.items())
    #1137
    def dut_get_show_efd_slot_num_efhpage_poolinfo(self, show_info):
        dict_value = {}
        new_list = []
        flag = 0
        flag_1 = 0
        show_info = show_info.replace('|','')
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match('deviceID : (\d+) slot ID : (\d+)', value):
                obj = re.match('deviceID : (\d+) slot ID : (\d+)', value)
                dict_value['deviceID'] = obj.group(1)
                dict_value['slot ID'] = obj.group(2)
                continue
            elif re.search('Pool/Task', value):
                if len(new_list) != 0:
                    new_show = "\n".join(new_list)
                    #print new_show
                    dict_value_1 = self.dut_show_autoget_blank_list(new_show, "Pool/Task", split_one=1)
                    new_list = []
                    dict_value = dict(dict_value.items() + dict_value_1.items())
            elif'====' in value:
                continue
            new_list.append(value)
        if len(new_list) != 0:
            new_show = "\n".join(new_list)
            dict_value_1 = self.dut_show_autoget_blank_list(new_show, "Pool/Task", split_one=1)
            dict_value = dict(dict_value.items() + dict_value_1.items())

        return dict_value
    def dut_get_show_bgp_egressengineering(self, show_info):
        dict_value = {}
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match('PEER (\S+) \(peer is (\S+)\)', value):
                obj = re.match('PEER (\S+) \(peer is (\S+)\)', value)
                key_1 = obj.group(1).strip()
                key_2 = obj.group(2).strip()
            elif re.search('(.* sid info): number\((\d+)\)', value):
                obj = re.search('(.* sid info): number\((\d+)\)', value)
                key_3 = obj.group(1).strip()
                value_2 = obj.group(2).strip()
                dict_value[key_1 + '/' + key_2 + '/' + key_3 + '/' + 'number'] = value_2
                dict_value[key_1 + '/' + key_2 + '/' + key_3] = "number("+value_2+")"
            elif re.search('(end.*): (\w+:)(.*)', value):
                obj = re.search('(end.*): (\w+:)(.*)', value)
                key_4 = obj.group(1).strip()
                value_1 = obj.group(2).strip()
                value_3 = obj.group(3).strip()
                dict_value[key_1 + '/' + key_2 + '/' + key_3 + '/' + key_4] = value_1 + value_3
                dict_value[key_1 + '/' + key_2 + '/' + key_3 + '/' + key_4 + '/' + 'other'] = value_1
            else:
                list_1 = re.split(': ', value.strip())
                dict_value[key_1 + '/' + key_2 + '/' + list_1[0].strip()] = list_1[1].strip()
        return dict_value
    def dut_get_show_routeres_usage_all(self, show_info):
        dict_value = {}
        dict_value_3 = {}
        new_list = []
        flag = 0
        flag_1 = 0
        flag_2 = 0
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if 'L3 Software Statistics:' in value:
                flag = 1
                flag_2 = 0
            elif 'Switch  Slot    Switch Mode Current' in value:
                flag_2 = 1
                value = value.replace('Switch  Slot    Switch Mode Current:', 'Switch  Slot    Switch Mode Current')
                new_list.append(value)
                new_show_2 = "\n".join(new_list)
            elif ':' in value:
                flag = 0
            elif re.match('Switch Mode Current:(\S+)', value):
                obj = re.match('Switch Mode Current:(\S+)', value)
                dict_value['Switch Mode Current'] = obj.group(1)
            elif re.match('Switch Mode Next   :(\S+)', value):
                obj = re.match('Switch Mode Next   :(\S+)', value)
                dict_value['Switch Mode Next'] = obj.group(1)
            elif flag_2 == 1:
                if '---' not in value:
                    new_list.append(value.strip())
                    new_show_2 = "\n".join(new_list)
                    dict_value_3 = self.dut_show_autoget_blank_list_3(new_show_2, "Switch")
            elif flag == 0:
                continue
            elif flag == 1:
                if 'Max' in value:
                    flag_1 = 1
                    new_list.append(value.strip())
                elif flag_1 == 1:
                    if '---' not in value:
                        new_list.append(value.strip())
                        new_show = "\n".join(new_list)
                        dict_value_1 = self.dut_show_autoget_blank_list_3(new_show,'Switch',value_title_2='Slot',value_title_3='Chip',value_title_4='Name')
                else:
                    if '---' not in value:
                        new_list.append(value.strip())
                        new_show_1 = "\n".join(new_list)
                        dict_value_2 = self.dut_show_autoget_blank_list_3(new_show_1,'Switch',value_title_2='Slot',value_title_3='Chip',value_title_4='Name')
        return dict(dict_value.items()+dict_value_1.items()+dict_value_2.items()+dict_value_3.items())
    def dut_get_show_bgp_l2vpn_evpn_all_summary(self, show_info):
        dict_value = {}
        new_list = []
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            if re.match('Total number of neighbors (.*), established neighbors (.*)', value):
                obj = re.match('Total number of neighbors (.*), established neighbors (.*)', value)
                dict_value['Total number of neighbors'] = obj.group(1).strip()
                dict_value['established neighbors'] = obj.group(2).strip()
            elif re.match('For address family: (.*)', value):
                obj = re.match('For address family: (.*)', value)
                dict_value['For address family'] = obj.group(1).strip()
            elif re.match('BGP router identifier (.*), local AS number (.*)', value):
                obj = re.match('BGP router identifier (.*), local AS number (.*)', value)
                dict_value['BGP router identifier'] = obj.group(1).strip()
                dict_value['local AS number'] = obj.group(2).strip()
            elif re.match('BGP table version is (.*)', value):
                obj = re.match('BGP table version is (.*)', value)
                dict_value['BGP table version'] = obj.group(1).strip()
            elif re.match('(.*) BGP AS-PATH entries', value):
                obj = re.match('(.*) BGP AS-PATH entries', value)
                dict_value['BGP AS-PATH entries'] = obj.group(1).strip()
            elif re.match('(.*) BGP Community entries', value):
                obj = re.match('(.*) BGP Community entries', value)
                dict_value['BGP Community entries'] = obj.group(1).strip()
            elif re.match('(.*) BGP Prefix entries \(Maximum-prefix:(.*)\)', value):
                obj = re.match('(.*) BGP Prefix entries \(Maximum-prefix:(.*)\)', value)
                dict_value['BGP Prefix entries'] = obj.group(1).strip()
                dict_value['BGP Maximum-prefix entries'] = obj.group(2).strip()
            else:
                new_list.append(value)
                new_show = "\n".join(new_list)
                dict_value = self.dut_show_autoget_blank_list(new_show, "Neighbor")
        return dict_value
    def dut_get_show_ipv6_pathmtu(self, show_info):
        dict_value = {}
        new_list = []
        show_info_list = self.dut_get_start_show_info(show_info)
        for value in show_info_list:
            new_list.append(value)
            new_show = "\n".join(new_list)
            dict_value = self.dut_show_autoget_blank_list(new_show, "IPv6 Address")
        return dict_value
    def dut_get_show_ipv6_pathmtu_vrf(self, show_info):
        return self.dut_get_show_ipv6_pathmtu(show_info)
#by：外包
    def dut_get_show_ip_dhcp_history(self,show_info):                          #函数名由锐捷提供
        """
        Function:show ip dhcp history回显解析函数
        CLI命令:show ip dhcp history
        回显信息示例:
11_0PJ56#show ip dhcp history
Expired clients           : 0
Running clients           : 1
IP address        Hardware address       Lease expiration            Vlan/Relay
2.0.1.2           0000.779f.bf96         000 days 23 hours 47 mins   4098

        Returns:
{"2.0.1.2/Lease expiration": "000 days 23 hours 47 mins"
"Expired clients": "0"
"Running clients": "1"
"2.0.1.2/Vlan/Relay": "4098"
"2.0.1.2/Hardware address": "0000.779f.bf96"
"address_list": ["2.0.1.2"]}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip dhcp history | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        #==========================================
        #value_title定义主键的id，即列表中的唯一值
        #==========================================
        value_title="IP address"
        length_list = []
        dict_value={}

        #=======================================================================================
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #=======================================================================================
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)

        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        length = len(dut_info_split)

        #======================================================
        # #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        #======================================================
        for i in range(length):
            if 'Expired clients' in dut_info_split[i]:
                matchObj = re.match('\s*(Expired clients)\s*:\s*(\d+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'Running clients' in dut_info_split[i]:
                matchObj = re.match('\s*(Running clients)\s*:\s*(\d+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break

        # ======================================================================
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        # ======================================================================
        length_list = [18,23,28,32]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        # #print dut_info_split

        # ======================================================================
        # #创建空列表用于保存主键内容
        # ======================================================================
        address_list = []

        # ======================================================================
        # #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        # ======================================================================
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            #获取表头，用于组合
            if list_len[0]==value_title:
                title = list_len
            elif list_len[0]!=value_title:
                #生成字典
                address_list.append(list_len[0])
                for s in range(1,length_list_len):
                    #将主键与表名以/分隔组合成为字典的key
                    key_name = '%s/%s' % (list_len[0],title[s])
                    dict_value[key_name]=list_len[s]
            #将保存有主键值的列表以port_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value["address_list"]=address_list
        return dict_value
    def dut_get_show_snooping_forward(self,show_info):                          #函数名由锐捷提供
        """
        Function:show snooping forward回显解析函数
        CLI命令:show snooping forward
        回显信息示例:
11_0PJ56#show snooping forward 
Receive packet statistics
Total receive : 14
Unknow packet : 0
Receive packet statistics
DHCP_DISCOVER : 8
DHCP_OFFER    : 0
DHCP_REQUEST  : 3
DHCP_DECLINE  : 0
DHCP_ACK      : 3
DHCP_NAK      : 0
DHCP_RELEASE  : 0
DHCP_INFORM   : 0
BOOTP         : 0
Forward packet statistics
DHCP_DISCOVER : 8
DHCP_OFFER    : 0
DHCP_REQUEST  : 3
DHCP_DECLINE  : 0
DHCP_ACK      : 3
DHCP_NAK      : 0
DHCP_RELEASE  : 0
DHCP_INFORM   : 0
BOOTP         : 0        
Broadcast packet statistics
Invalid config           : 0
Invalid length           : 0
Invalid DHCP     packing : 0
Failed to get record     : 0
Discard packet statistics
Untrusted reply          : 0
Suppress DHCP            : 0
Layer2 relayed DHCP      : 0
Invalid DHCP MAC         : 0
DHCP binding not exist   : 0
Invalid DHCP source ifx  : 0
ADD DHCP binding         : 0
Invalid DHCP request(AP) : 0
Packet process time statistics (microseconds)
 checkifx: 0
 stage 1 : 0
 stage 2 : 0
 stage 3 : 0
 stage 4 : 0
 stage 5 : 0
 stage 6 : 0
 stage 7 : 0
 stage 8 : 0
 total   : 0
 pkt cnt : 14
 pro rate: 0 pps
11_0PJ56#

        Returns:
{"Receive packet statistics/DHCP_DISCOVER": "8"
"Forward packet statistics/DHCP_OFFER": "0"
"Forward packet statistics/DHCP_RELEASE": "0"
"Packet process time statistics (microseconds)/stage 3": "0"
"Packet process time statistics (microseconds)/stage 2": "0"
"Packet process time statistics (microseconds)/stage 1": "0"
"Broadcast packet statistics/Invalid config": "0"
"Receive packet statistics/DHCP_NAK": "0"
"Packet process time statistics (microseconds)/stage 5": "0"
"Packet process time statistics (microseconds)/stage 4": "0"
"Receive packet statistics/DHCP_RELEASE": "0"
"Forward packet statistics/DHCP_DECLINE": "0"
"Packet process time statistics (microseconds)/stage 8": "0"
"Forward packet statistics/DHCP_NAK": "0"
"Broadcast packet statistics/Failed to get record": "0"
"Forward packet statistics/DHCP_ACK": "3"
"Receive packet statistics/DHCP_DECLINE": "0"
"Receive packet statistics/DHCP_INFORM": "0"
"Total receive": "14"
"Receive packet statistics/DHCP_OFFER": "0"
"Discard packet statistics/DHCP binding not exist": "0"
"Discard packet statistics/Suppress DHCP": "0"
"Forward packet statistics/DHCP_REQUEST": "3"
"Discard packet statistics/Untrusted reply": "0"
"Packet process time statistics (microseconds)/pkt cnt": "14"
"Packet process time statistics (microseconds)/pro rate": "0 pps"
"Unknow packet": "0"
"Receive packet statistics/BOOTP": "0"
"Broadcast packet statistics/Invalid length": "0"
"Packet process time statistics (microseconds)/total": "0"
"Receive packet statistics/DHCP_ACK": "3"
"Discard packet statistics/Layer2 relayed DHCP": "0"
"Discard packet statistics/Invalid DHCP source ifx": "0"
"Broadcast packet statistics/Invalid DHCP     packing": "0"
"Forward packet statistics/DHCP_INFORM": "0"
"Discard packet statistics/Invalid DHCP MAC": "0"
"Discard packet statistics/ADD DHCP binding": "0"
"Receive packet statistics/DHCP_REQUEST": "3"
"Forward packet statistics/DHCP_DISCOVER": "8"
"Discard packet statistics/Invalid DHCP request(AP)": "0"
"Packet process time statistics (microseconds)/checkifx": "0"
"Forward packet statistics/BOOTP": "0"
"Packet process time statistics (microseconds)/stage 7": "0"
"forward_list": ["Receive packet statistics"
"Forward packet statistics"
"Broadcast packet statistics"
"Discard packet statistics"
"Packet process time statistics (microseconds)"], "Packet process time statistics (microseconds)/stage 6": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show snooping forward | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        #==========================================
        #value_title定义主键的id，即列表中的唯一值
        #==========================================
        value_title_1="Receive packet statistics"
        value_title_2="Forward packet statistics"
        value_title_3="Broadcast packet statistics"
        value_title_4="Discard packet statistics"
        value_title_5="Packet process time statistics (microseconds)"
        length_list = []
        dict_value={}

        #=======================================================================================
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #=======================================================================================
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)

        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        length = len(dut_info_split)
        # #print(dut_info_split)

        #======================================================
        # #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        #======================================================
        for i in range(length):
            if 'Total receive' in dut_info_split[i]:
                matchObj = re.match('\s*(Total receive)\s*:\s*(\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'Unknow packet' in dut_info_split[i]:
                matchObj = re.match('\s*(Unknow packet)\s*:\s*(\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'Receive packet statistics' in dut_info_split[i]:
                show_info_split.remove(show_info_split[i])
                break

        # ======================================================================
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        # ======================================================================
        length_list = [45]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        # #print dut_info_split

        # ======================================================================
        # #创建空列表用于保存主键内容
        # ======================================================================
        forward_list = []

        # ======================================================================
        # #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        # ======================================================================
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            #获取表头，用于组合
            if value_title_1 in list_len[0] or value_title_2 in list_len[0] or value_title_3 in list_len[0] or value_title_4 in list_len[0] or value_title_5 in list_len[0]:
                title = list_len
                forward_list.append(list_len[0])
            else:
                #生成字典
                # forward_list.append(list_len[0])
                list_len = list_len[0].split(':')
                for s in range(0,length_list_len):
                    #将主键与表名以/分隔组合成为字典的key
                    key_name = '%s/%s' % (title[0],list_len[0].lstrip().rstrip())
                    dict_value[key_name]=list_len[s+1].lstrip().rstrip()
            #将保存有主键值的列表以port_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value["forward_list"]=forward_list

        return dict_value
    def dut_get_show_lldp_neighbors_detail(self,show_info):                          #函数名由锐捷提供
        """
        Function:show lldp neighbors detail回显解析函数
        CLI命令:show lldp neighbors detail
        回显信息示例:
6120_2011(config)#show lldp neighbors detail 
----------------------------------------------------------------------------
LLDP neighbor-information of port [TenGigabitEthernet 0/1]
----------------------------------------------------------------------------
  Neighbor index                    : 1
  Device type                       : LLDP Device
  Update time                       : 1hours 42minutes 8seconds 
  Aging time                        : 1minutes 43seconds 

  Chassis ID type                   : MAC address
  Chassis ID                        : 00d0.f8de.95ee
  System name                       : S2910_2005
  System description                : Ruijie 10G Ethernet Switch(S2910-48GT4XS-E) By Ruijie Networks
  System capabilities supported     : Bridge, Router
  System capabilities enabled       : Bridge, Router

  Management address subtype        : ipv4
  Management address                : 127.0.0.1
  Interface numbering subtype       : ifIndex
  Interface number                  : 1
  Object identifier                 : 


  Port ID type                      : Interface name
  Port ID                           : Gi0/1
  Port description                  : GigabitEthernet 0/1

  802.1 organizationally information
  Port VLAN ID                      : 1001
  Port and protocol VLAN ID(PPVID)  : 0
      PPVID Supported               : YES
      PPVID Enabled                 : NO
  VLAN name of VLAN 1001            : VLAN1001
  Protocol Identity                 : 


  802.3 organizationally information
  Auto-negotiation supported        : YES
  Auto-negotiation enabled          : YES
  PMD auto-negotiation advertised   : 1000BASE-T(FD), 1000BASE-T(HD), 100BASE-TX(FD), 100BASE-TX(HD), 10BASE-T(FD), 10BASE-T(HD)
  Operational MAU type              : Duplex(Auto)
  PoE support                       : NO
  Link aggregation supported        : YES
  Link aggregation enabled          : NO
  Aggregation port ID               : 0
  Maximum frame Size                : 1500
----------------------------------------------------------------------------
LLDP neighbor-information of port [TenGigabitEthernet 0/2]
----------------------------------------------------------------------------
  Neighbor index                    : 1
  Device type                       : LLDP Device
  Update time                       : 1hours 41minutes 59seconds 
  Aging time                        : 1minutes 36seconds 

  Chassis ID type                   : MAC address
  Chassis ID                        : 0074.9c68.a555
  System name                       : 57H_2013
  System description                : Ruijie 10G Ethernet Switch(S5750C-48GT4XS-H) By Ruijie Networks, 
Running on RGOS Software S5700H_RGOS 12.x(master) (M02303806252019)
  System capabilities supported     : Bridge, Router
  System capabilities enabled       : Bridge, Router

  Management address subtype        : ipv6
  Management address                : 10::2
  Interface numbering subtype       : ifIndex
  Interface number                  : 4097
  Object identifier                 : 


  Port ID type                      : Interface name
  Port ID                           : Gi0/3
  Port description                  : GigabitEthernet 0/3

  802.1 organizationally information
  Port VLAN ID                      : 1
  Port and protocol VLAN ID(PPVID)  : 0
      PPVID Supported               : NO
      PPVID Enabled                 : NO
  VLAN name of VLAN 1               : VLAN0001
  Protocol Identity                 : 


  802.3 organizationally information
  Auto-negotiation supported        : NO
  Auto-negotiation enabled          : NO
  PMD auto-negotiation advertised   : 
  Operational MAU type              : Duplex(Auto)
  PoE support                       : NO
  Link aggregation supported        : YES
  Link aggregation enabled          : NO
  Aggregation port ID               : 0
  Maximum frame Size                : 1500
6120_2011(config)#

        Returns:
{'TenGigabitEthernet 0/1/System name': 'S2910_2005'
'TenGigabitEthernet 0/1/Operational MAU type': 'Duplex(Auto)'
'TenGigabitEthernet 0/1/Neighbor index': '1'
'TenGigabitEthernet 0/2/Interface numbering subtype': 'ifIndex'
'TenGigabitEthernet 0/2/Port VLAN ID': '1'
'TenGigabitEthernet 0/1/Chassis ID': '00d0.f8de.95ee'
'TenGigabitEthernet 0/1/System capabilities supported': 'Bridge, Router'
'TenGigabitEthernet 0/2/Link aggregation enabled': 'NO'
'TenGigabitEthernet 0/2/System name': '57H_2013'
'TenGigabitEthernet 0/1/Port ID': 'Gi0/1'
'TenGigabitEthernet 0/1/PMD auto-negotiation advertised': '1000BASE-T(FD), 1000BASE-T(HD), 100BASE-TX(FD), 100BASE-TX(HD), 10BASE-T(F'
'TenGigabitEthernet 0/2/Link aggregation supported': 'YES'
'TenGigabitEthernet 0/2/Port ID': 'Gi0/3'
'TenGigabitEthernet 0/2/Aggregation port ID': '0'
'TenGigabitEthernet 0/1/Port description': 'GigabitEthernet 0/1'
'TenGigabitEthernet 0/1/Link aggregation supported': 'YES'
'TenGigabitEthernet 0/2/PPVID Supported': 'NO'
'TenGigabitEthernet 0/1/Port ID type': 'Interface name'
'TenGigabitEthernet 0/2/VLAN name of VLAN 1': 'VLAN0001'
'TenGigabitEthernet 0/2/Management address subtype': 'ipv6'
'TenGigabitEthernet 0/1/Device type': 'LLDP Device'
'TenGigabitEthernet 0/2/PPVID Enabled': 'NO'
'TenGigabitEthernet 0/1/PPVID Supported': 'YES'
'TenGigabitEthernet 0/1/Port VLAN ID': '1001'
'TenGigabitEthernet 0/1/Management address': '127.0.0.1'
'TenGigabitEthernet 0/1/Interface number': '1'
'TenGigabitEthernet 0/1/Update time': '1hours 42minutes 8seconds'
'TenGigabitEthernet 0/1/System description': 'Ruijie 10G Ethernet Switch(S2910-48GT4XS-E) By Ruijie Networks'
'TenGigabitEthernet 0/1/VLAN name of VLAN 1001': 'VLAN1001'
'TenGigabitEthernet 0/1/Aging time': '1minutes 43seconds'
'TenGigabitEthernet 0/1/Interface numbering subtype': 'ifIndex'
'TenGigabitEthernet 0/2/Chassis ID': '0074.9c68.a555'
'TenGigabitEthernet 0/1/PPVID Enabled': 'NO'
'TenGigabitEthernet 0/2/Interface number': '4097'
'TenGigabitEthernet 0/2/Port and protocol VLAN ID(PPVID)': '0'
'TenGigabitEthernet 0/1/Maximum frame Size': '1500'
'TenGigabitEthernet 0/1/Link aggregation enabled': 'NO'
'TenGigabitEthernet 0/2/System capabilities enabled': 'Bridge, Router'
'TenGigabitEthernet 0/2/Auto-negotiation enabled': 'NO'
'TenGigabitEthernet 0/1/Auto-negotiation enabled': 'YES'
'port_list': ['TenGigabitEthernet 0/1'
'TenGigabitEthernet 0/2'], 'TenGigabitEthernet 0/2/System description': 'Ruijie 10G Ethernet Switch(S5750C-48GT4XS-H) By Ruijie Networks,'
'TenGigabitEthernet 0/1/Chassis ID type': 'MAC address'
'TenGigabitEthernet 0/2/System capabilities supported': 'Bridge, Router'
'TenGigabitEthernet 0/2/Maximum frame Size': '1500'
'TenGigabitEthernet 0/1/System capabilities enabled': 'Bridge, Router'
'TenGigabitEthernet 0/2/Update time': '1hours 41minutes 59seconds'
'TenGigabitEthernet 0/2/Management address': '10::2'
'TenGigabitEthernet 0/2/PoE support': 'NO'
'TenGigabitEthernet 0/1/Management address subtype': 'ipv4'
'TenGigabitEthernet 0/1/PoE support': 'NO'
'TenGigabitEthernet 0/2/Operational MAU type': 'Duplex(Auto)'
'TenGigabitEthernet 0/1/Port and protocol VLAN ID(PPVID)': '0'
'TenGigabitEthernet 0/2/Port description': 'GigabitEthernet 0/3'
'TenGigabitEthernet 0/2/Port ID type': 'Interface name'
'TenGigabitEthernet 0/2/Chassis ID type': 'MAC address'
'TenGigabitEthernet 0/2/Auto-negotiation supported': 'NO'
'TenGigabitEthernet 0/2/Aging time': '1minutes 36seconds'
'TenGigabitEthernet 0/1/Auto-negotiation supported': 'YES'
'TenGigabitEthernet 0/2/Neighbor index': '1'
'TenGigabitEthernet 0/1/Aggregation port ID': '0'
'TenGigabitEthernet 0/2/Device type': 'LLDP Device'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show lldp neighbors detail | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        #==========================================
        #value_title定义主键的id，即列表中的唯一值
        #==========================================
        value_title="LLDP neighbor-information of port"
        length_list = []
        dict_value={}

        #=======================================================================================
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #=======================================================================================
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)

        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        length = len(dut_info_split)
        # #print(dut_info_split)

        ##########################################################################
        #判断--所在行，当--已空格分隔可以自动统计出列宽时自动判断列宽，并删除该行
        ##########################################################################
        dut_info_split = self.del_specific_symbol_lines(dut_info_split)

        # ======================================================================
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        # ======================================================================
        length_list = [112]
        length_list_len = len(length_list)
        length = len(dut_info_split)

        # ======================================================================
        # #创建空列表用于保存主键内容
        # ======================================================================
        port_list = []

        # ======================================================================
        # #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        # ======================================================================
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            # insert_value = ''
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            #获取表头，用于组合
            if value_title in list_len[0]:
                each_port = list_len[0].split(']')[0].split('[')[1]
                title = each_port
                port_list.append(each_port)
            else:
                #生成字典
                # port_list.append(list_len[0])
                list_len = list_len[0].split(': ')
                # #print(list_len)
                for s in range(0,length_list_len):
                    #将主键与表名以/分隔组合成为字典的key
                    if len(list_len) == 1:
                        continue
                    else:
                        key_name = '%s/%s' % (title,list_len[0].lstrip().rstrip())
                        dict_value[key_name]=list_len[s+1].lstrip().rstrip()
            #将保存有主键值的列表以port_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value["port_list"]=port_list

        return dict_value
    def del_space_lines(self, dut_info_rec):
        for i in range(len(dut_info_rec)):
            if not dut_info_rec[i]:
                dut_info_rec.remove(dut_info_rec[i])
                break
            elif len(dut_info_rec)-1 == i:
                return dut_info_rec
        return self.del_space_lines(dut_info_rec)
    def del_specific_symbol_lines(self, dut_info_rec):
        for i in range(len(dut_info_rec)):
            if re.match(r'---+',dut_info_rec[i]):
                dut_info_rec.remove(dut_info_rec[i])
                break
            elif len(dut_info_rec)-1 == i:
                return dut_info_rec
        return self.del_specific_symbol_lines(dut_info_rec)
    def dut_get_show_ip_bgp_summary(self,show_info):                          #函数名由锐捷提供
        """
        Function:show ip bgp summary回显解析函数
        CLI命令:show ip bgp summary
        回显信息示例:
Ruijie(config-router)#show ip bgp summary 
For address family: IPv4 Unicast
BGP router identifier 1.1.1.1, local AS number 10
BGP table version is 2
0 BGP AS-PATH entries
0 BGP Community entries
0 BGP Prefix entries (Maximum-prefix:4294967295)

Neighbor        V          AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd
172.16.1.2      4           1      20      21        0    0    0 00:06:07 Connect    

Total number of neighbors 1, established neighbors 0
Ruijie(config-router)#

        Returns:
{'neighbor_list': ['172.16.1.2'], '172.16.1.2/TblVer': '0'
'172.16.1.2/InQ': '0'
'established neighbors': '0'
'BGP Community entries': '0'
'Total number of neighbors': '1'
'For address family': 'IPv4 Unicast'
'172.16.1.2/V': '4'
'local AS number': '10'
'BGP table version': '2'
'172.16.1.2/Up/Down': '00:06:07'
'BGP AS-PATH entries': '0'
'172.16.1.2/State/PfxRcd': 'Connect'
'BGP router identifier': '1.1.1.1'
'172.16.1.2/OutQ': '0'
'172.16.1.2/MsgSent': '21'
'BGP Prefix entries': '0'
'172.16.1.2/AS': '1'
'172.16.1.2/MsgRcvd': '20'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip bgp summary | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        ###########################################
        #value_title定义主键的id，即列表中的唯一值
        ###########################################
        value_title="Neighbor"
        length_list = []
        dict_value={}
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)

        ######################################################
        #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        ######################################################
        for i in range(len(dut_info_split)):
            if re.match(r'For address family\s*:\s*\w+\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(For address family)\s*:\s*(\w+\s*\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break

        for i in range(len(dut_info_split)):
            if re.match(r'BGP router identifier\s*\S+,\s*local AS number\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(BGP router identifier)\s+(\S+),\s*(local AS number)\s+(\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                dict_value[matchObj.group(3)]=matchObj.group(4)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'BGP table version\s*is\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(BGP table version)\s*is\s*(\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'\w+\s*BGP AS-PATH entries',dut_info_split[i]):
                matchObj = re.match('\s*(\w+)\s*(BGP AS-PATH entries)',dut_info_split[i])
                dict_value[matchObj.group(2)]=matchObj.group(1)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'\w+\s*BGP Community entries',dut_info_split[i]):
                matchObj = re.match('\s*(\w+)\s*(BGP Community entries)',dut_info_split[i])
                dict_value[matchObj.group(2)]=matchObj.group(1)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'\w+\s*BGP Prefix entries',dut_info_split[i]):
                matchObj = re.match('\s*(\w+)\s*(BGP Prefix entries)',dut_info_split[i])
                dict_value[matchObj.group(2)]=matchObj.group(1)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'Total number of neighbors\s*\w+,\s*established neighbors\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(Total number of neighbors)\s*(\w+),\s*(established neighbors)\s*(\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                dict_value[matchObj.group(3)]=matchObj.group(4)
                show_info_split.remove(show_info_split[i])
                break

        ##print dut_info_split
        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        length = len(dut_info_split)
        ##########################################################################
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        ##########################################################################
        # length_list = [16,11,3,8,10,8,4,5,9,16]
        #length_list = [16,9,5,8,10,8,4,5,9,16]
        length_list = [14,4,11,8,8,9,5,5,10,16]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        # #print dut_info_split
        ######################################################################
        #创建空列表用于保存主键内容
        ######################################################################
        neighbor_list = []
        ######################################################################
        #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        ######################################################################
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            #获取表头，用于组合
            ##print(list_len)
            if list_len[0]==value_title:
                title = list_len
            elif list_len[0]!=value_title:
                #生成字典
                neighbor_list.append(list_len[0])
                for s in range(1,length_list_len):
                    #将主键与表名以/分隔组合成为字典的key
                    key_name = '%s/%s' % (list_len[0],title[s])
                    dict_value[key_name]=list_len[s]
            #将保存有主键值的列表以neighbor_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value["neighbor_list"]=neighbor_list
        return dict_value
    def dut_get_show_spanning_tree(self,show_info):
        """
        Function:show spanning-tree回显解析函数
        CLI命令:show spanning-tree
        回显信息示例:
Dut2(config)#show spanning-tree 
StpVersion : MSTP
SysStpStatus : ENABLED
MaxAge : 20
HelloTime : 2
ForwardDelay : 15
BridgeMaxAge : 20
BridgeHelloTime : 2
BridgeForwardDelay : 15
MaxHops: 20
TxHoldCount : 3
PathCostMethod : Long
BPDUGuard : Disabled
BPDUFilter : Disabled
LoopGuardDef  : Disabled

###### mst 0 vlans map : 1-65, 67-4094
BridgeAddr : 5869.6ccb.e5b4
Priority: 32768
TimeSinceTopologyChange : 6d:1h:7m:54s
TopologyChanges : 0
DesignatedRoot : 32768.5869.6ccb.e5b4
RootCost : 0
RootPort : 0
CistRegionRoot : 32768.5869.6ccb.e5b4
CistPathCost : 0


###### mst 1 vlans map : 66
BridgeAddr : 5869.6ccb.e5b4
Priority: 0
TimeSinceTopologyChange : 0d:0h:0m:4s
TopologyChanges : 0
DesignatedRoot : 1.5869.6ccb.e5b4
RootCost : 0
RootPort : 0

        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show spanning-tree | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        ###########################################
        #value_title定义主键的id，即列表中的唯一值
        ###########################################
        value_title="mst "
        length_list = []
        dict_value={}
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)
        ######################################################
        #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        ######################################################
        for i in range(len(dut_info_split)):
            if re.match(r'StpVersion\s*:\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(StpVersion)\s*:\s*(\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'SysStpStatus\s*:\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(SysStpStatus)\s*:\s*(\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'MaxAge\s*:\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(MaxAge)\s*:\s*(\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'HelloTime\s*:\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(HelloTime)\s*:\s*(\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'ForwardDelay\s*:\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(ForwardDelay)\s*:\s*(\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'BridgeMaxAge\s*:\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(BridgeMaxAge)\s*:\s*(\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'BridgeHelloTime\s*:\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(BridgeHelloTime)\s*:\s*(\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'BridgeForwardDelay\s*:\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(BridgeForwardDelay)\s*:\s*(\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'MaxHops\s*:\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(MaxHops)\s*:\s*(\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'TxHoldCount\s*:\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(TxHoldCount)\s*:\s*(\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'PathCostMethod\s*:\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(PathCostMethod)\s*:\s*(\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'BPDUGuard\s*:\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(BPDUGuard)\s*:\s*(\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'BPDUFilter\s*:\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(BPDUFilter)\s*:\s*(\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'LoopGuardDef\s*:\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(LoopGuardDef)\s*:\s*(\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break

        ##print dut_info_split
        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        length = len(dut_info_split)
        ##########################################################################
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        ##########################################################################
        length_list = [76]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        ##print dut_info_split
        ##print dut_info_split
        ######################################################################
        #创建空列表用于保存主键内容
        ######################################################################
        address_list = []
        ######################################################################
        #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        ######################################################################
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            #获取表头，用于组合
            if value_title in list_len[0]:
                #print list_len[0]
                matchObj = re.match('######\s*(\w+\s+\d+)\s+(\w+\s+\w+)\s*\S+\s*\d+',list_len[0])
                title = matchObj.group(1)
                matchObj1 = re.match('######\s*(\w+\s+\d+)\s+(\w+\s+\w+)\s*\S+\s*(\d+\S*\s*\S*)',list_len[0])
                title1 = matchObj1.group(1)
                list_len1 = matchObj1.group(2)
                list_len2 = matchObj1.group(3)
                key_name1 = '%s/%s' % (title1,list_len1.lstrip().rstrip())
                dict_value[key_name1]=list_len2.lstrip()
                address_list.append(list_len[0])
            else:
                #生成字典
                index = list_len[0].find(':')
                if index != -1:
                    sub_key = list_len[0].rstrip()
                    sub_key = sub_key[0:index]
                    for s in range(0,length_list_len):
                        #将主键与表名以/分隔组合成为字典的key
                        key_name = '%s/%s' % (title,sub_key.lstrip().rstrip())
                        dict_value[key_name]=list_len[0][(index+1):].lstrip()
            #将保存有主键值的列表以port_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value["address_list"]=address_list
        return dict_value
    def dut_get_show_ip_bgp_neighbors(self,show_info):
        """
        Function:show ip bgp neighbors回显解析函数
        CLI命令:show ip bgp neighbors
        回显信息示例:
Ruijie#show ip bgp neighbors    
For address family: IPv4 Unicast
BGP neighbor is 192.168.2.1, remote AS 20, local AS 40, external link
 Using BFD to detect fast fallover
  BGP version 4, remote router ID 0.0.0.0
  BGP state = Active
  Last read         , hold time is 180, keepalive interval is 60 seconds
  Received 10 messages, 1 notifications, 0 in queue
    open message:1 update message:8 keepalive message:1
    refresh message:0 dynamic cap:0 notifications:1
  Sent 7 messages, 0 notifications, 0 in queue
    open message:1 update message:4 keepalive message:1
    refresh message:1 dynamic cap:0 notifications:0
  Route refresh request: received 0, sent 1
  Minimum time between advertisement runs is 30 seconds
  Minimum time between as origination advertisement runs is 1 seconds
 For address family: IPv4 Unicast
  BGP table version 3, neighbor version 0
  Index 0, Offset 0, Mask 0x1
  0 accepted prefixes
  0 announced prefixes
 Connections established 1; dropped 1
Sock_fd: -1
Next connect timer due in 6 seconds
Last Reset: 00:00:22, due to BGP Notification received
Notification Error Message: (Cease/Other Configuration Change.)

        Returns:
{"BGP neighbor 192.168.2.1/Receivedmessages": "10", "BGP neighbor 192.168.2.1/neighbor version": "0", "BGP neighbor 192.168.2.1/notifications": "0", "BGP neighbor 192.168.2.1/dynamic cap": "0", "BGP neighbor 192.168.2.1/Connections established": "1", "BGP neighbor 192.168.2.1/open message": "1", "BGP neighbor 192.168.2.1/Route refresh requestreceived": "0", "BGP neighbor 192.168.2.1/For address family": "IPv4 Unicast", "BGP neighbor 192.168.2.1/BGP state": "Active", "BGP neighbor 192.168.2.1/Sentmessages": "7", "BGP neighbor 192.168.2.1/hold time": "180", "BGP neighbor 192.168.2.1/in queue": "0", "BGP neighbor 192.168.2.1/local AS": "40", "BGP neighbor 192.168.2.1/BGP table version": "3", "BGP neighbor 192.168.2.1/external": "link", "bgp_neighbor_list": ["BGP neighbor 192.168.2.1"], "BGP neighbor 192.168.2.1/accepted prefixes": "0", "BGP neighbor 192.168.2.1/Last Reset": "00:00:22", "BGP neighbor 192.168.2.1/keepalive interval": "60 seconds", "BGP neighbor 192.168.2.1/due to BGP Notification": "received", "BGP neighbor 192.168.2.1/Sock_fd": "-1", "BGP neighbor 192.168.2.1/refresh message": "1", "BGP neighbor 192.168.2.1/update message": "4", "BGP neighbor 192.168.2.1/BGP version": "4", "BGP neighbor 192.168.2.1/dropped": "1", "BGP neighbor 192.168.2.1/keepalive message": "1", "BGP neighbor 192.168.2.1/remote AS": "20", "BGP neighbor 192.168.2.1/announced prefixes": "0", "BGP neighbor 192.168.2.1/remote router ID": "0.0.0.0", "BGP neighbor 192.168.2.1/Minimum time between advertisement runs": "30 seconds", "BGP neighbor 192.168.2.1/Route refresh requestsent": "1", "BGP neighbor 192.168.2.1/Next connect timer due in": "6 seconds", "BGP neighbor 192.168.2.1/Notification Error Message": "(Cease/Other Configuration Change.)"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip bgp neighbors | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        ###########################################
        #value_title定义主键的id，即列表中的唯一值
        ###########################################
        value_title="BGP neighbor"
        dict_value={}
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        length = len(dut_info_split)
        ######################################################
        #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        ######################################################
        if re.match(r'For address family: IPv4 Unicast',dut_info_split[0]):
            show_info_split.remove(show_info_split[0])
        ##########################################################################
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        ##########################################################################
        length_list = [80]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        # #print dut_info_split
        ######################################################################
        #创建空列表用于保存主键内容，创建空字典用于临时存放表头
        ######################################################################
        bgp_neighbor_list = []
        temp_dic = {}
        ######################################################################
        #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        ######################################################################
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            index = 0
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            #获取表头，用于组合
            if re.match(r'BGP neighbor is\s*\S+,\s*remote AS\s*\w+,\s*local AS\s*\w+,\s*external\s*\w+',list_len[0]):
                matchObj = re.match('(BGP neighbor)\s*is\s*(\S+),\s*(remote AS)\s*(\w+),\s*(local AS)\s*(\w+),\s*(external)\s*(\w+)',list_len[0])
                title_1 = matchObj.group(1)
                title_2 = matchObj.group(2)
                title = title_1 + ' ' + title_2
                #获取全部的标头，并加入到bgp_neighbor_list列表里
                bgp_neighbor_list.append(title)
                temp_dic[index] = title
                #获取BGP neighbor信息那行，将该行生成字典，并加入字典dict_value
                for m in range(3,9,2):
                    key_name = '%s/%s' % (title,matchObj.group(m))
                    dict_value[key_name] = matchObj.group(m+1)
            else:
                title_temp = temp_dic[index]
                if re.match(r'BGP version\s*\w+,\s*remote router ID\s*\S+',list_len[0]):
                    matchObj = re.match('(BGP version)\s*(\w+),\s*(remote router ID)\s*(\S+)',list_len[0])
                    #生成字典
                    for m in range(1,5,2):
                        key_name = '%s/%s' % (title_temp,matchObj.group(m))
                        dict_value[key_name] = matchObj.group(m+1)
                if re.match(r'BGP state = Active',list_len[0]):
                    matchObj = re.match('(BGP state)\s*=\s*(\w+)',list_len[0])
                    #生成字典
                    key_name = '%s/%s' % (title_temp,matchObj.group(1))
                    dict_value[key_name] = matchObj.group(2)
                if re.match(r'Last read         , hold time is\s*\w+,\s*keepalive interval is\s*\w+\s*\w+',list_len[0]):
                    matchObj = re.match('Last read         ,\s*(hold time) is\s*(\w+),\s*(keepalive interval) is\s*(\w+\s*\w+)',list_len[0])
                    #生成字典
                    for m in range(1,5,2):
                        key_name = '%s/%s' % (title_temp,matchObj.group(m))
                        dict_value[key_name] = matchObj.group(m+1)
                if re.match(r'Received\s*\d+\s*messages,\s*\d+\s*notifications,\s*\d+\s*in queue',list_len[0]):
                    matchObj = re.match('(Received)\s*(\d+)\s*(messages),\s*(\d+)\s*(notifications),\s*(\d+)\s*(in queue)',list_len[0])
                    #生成字典
                    matchObj_group = matchObj.group(1) + matchObj.group(3)
                    key_name_1 = '%s/%s' % (title_temp,matchObj_group)
                    dict_value[key_name_1] = matchObj.group(2)
                    key_name_2 = '%s/%s' % (title_temp,matchObj.group(5))
                    dict_value[key_name_2] = matchObj.group(4)
                    key_name_3 = '%s/%s' % (title_temp,matchObj.group(7))
                    dict_value[key_name_3] = matchObj.group(6)
                if re.match(r'open message:\d+\s*update message:\d+\s*keepalive message:\d+',list_len[0]):
                    matchObj = re.match('(open message):(\d+)\s*(update message):(\d+)\s*(keepalive message):(\d+)',list_len[0])
                    #生成字典
                    for m in range(1,7,2):
                        key_name = '%s/%s' % (title_temp,matchObj.group(m))
                        dict_value[key_name] = matchObj.group(m+1)
                if re.match(r'refresh message:\d+\s*dynamic cap:\d+\s*notifications:\d+',list_len[0]):
                    matchObj = re.match('(refresh message):(\d+)\s*(dynamic cap):(\d+)\s*(notifications):(\d+)',list_len[0])
                    #生成字典
                    for m in range(1,7,2):
                        key_name = '%s/%s' % (title_temp,matchObj.group(m))
                        dict_value[key_name] = matchObj.group(m+1)
                if re.match(r'Sent\s*\d+\s*messages,\s*\d+\s*notifications,\s*\d+\s*in queue',list_len[0]):
                    matchObj = re.match('(Sent)\s*(\d+)\s*(messages),\s*(\d+)\s*(notifications),\s*(\d+)\s*(in queue)',list_len[0])
                    #生成字典
                    matchObj_group = matchObj.group(1) + matchObj.group(3)
                    key_name_1 = '%s/%s' % (title_temp,matchObj_group)
                    dict_value[key_name_1] = matchObj.group(2)
                    key_name_2 = '%s/%s' % (title_temp,matchObj.group(5))
                    dict_value[key_name_2] = matchObj.group(4)
                    key_name_3 = '%s/%s' % (title_temp,matchObj.group(7))
                    dict_value[key_name_3] = matchObj.group(6)
                if re.match(r'Route refresh request:\s*received\s\d+,\s*sent\s*\d+',list_len[0]):
                    matchObj = re.match('(Route refresh request):\s*(received)\s*(\d+),\s*(sent)\s*(\d+)',list_len[0])
                    #生成字典
                    matchObj_group_1 = matchObj.group(1) + matchObj.group(2)
                    key_name_1 = '%s/%s' % (title_temp,matchObj_group_1)
                    dict_value[key_name_1] = matchObj.group(3)
                    matchObj_group_2 = matchObj.group(1) + matchObj.group(4)
                    key_name_2 = '%s/%s' % (title_temp,matchObj_group_2)
                    dict_value[key_name_2] = matchObj.group(5)
                if re.match(r'Minimum time between advertisement runs\s*is\s*\d+\s*\w+',list_len[0]):
                    matchObj = re.match('(Minimum time between advertisement runs)\s*is\s*(\d+\s*\w+)',list_len[0])
                    #生成字典
                    key_name = '%s/%s' % (title_temp,matchObj.group(1))
                    dict_value[key_name] = matchObj.group(2)
                if re.match(r'For address family:\s*\w+\s*\w+',list_len[0]):
                    matchObj = re.match('(For address family):\s*(\w+\s*\w+)',list_len[0])
                    #生成字典
                    key_name = '%s/%s' % (title_temp,matchObj.group(1))
                    dict_value[key_name] = matchObj.group(2)
                if re.match(r'BGP table version\s*\w+,\s*neighbor version\s*\w+',list_len[0]):
                    matchObj = re.match('(BGP table version)\s*(\w+),\s*(neighbor version)\s*(\w+)',list_len[0])
                    #生成字典
                    for m in range(1,5,2):
                        key_name = '%s/%s' % (title_temp,matchObj.group(m))
                        dict_value[key_name] = matchObj.group(m+1)
                if re.match(r'Index\s*\w+,\s*Offset\s*\w+,\s*Mask\s*0x2',list_len[0]):
                    matchObj = re.match('(Index)\s*(\w+),\s*(Offset)\s*(\w+),\s*(Mask)\s*(\w+)',list_len[0])
                    #生成字典
                    for m in range(1,7,2):
                        key_name = '%s/%s' % (title_temp,matchObj.group(m))
                        dict_value[key_name] = matchObj.group(m+1)
                if re.match(r'\w+\s*accepted prefixes',list_len[0]):
                    matchObj = re.match('(\w+)\s*(accepted prefixes)',list_len[0])
                    #生成字典
                    key_name = '%s/%s' % (title_temp,matchObj.group(2))
                    dict_value[key_name] = matchObj.group(1)
                if re.match(r'\w+\s*announced prefixes',list_len[0]):
                    matchObj = re.match('(\w+)\s*(announced prefixes)',list_len[0])
                    #生成字典
                    key_name = '%s/%s' % (title_temp,matchObj.group(2))
                    dict_value[key_name] = matchObj.group(1)
                if re.match(r'Connections established\s*\w+;\s*dropped\s*\w+',list_len[0]):
                    matchObj = re.match('(Connections established)\s*(\w+);\s*(dropped)\s*(\w+)',list_len[0])
                    #生成字典
                    for m in range(1,5,2):
                        key_name = '%s/%s' % (title_temp,matchObj.group(m))
                        dict_value[key_name] = matchObj.group(m+1)
                if re.match(r'Sock_fd:\s*\S+',list_len[0]):
                    matchObj = re.match('(Sock_fd):\s*(\S+)',list_len[0])
                    #生成字典
                    key_name = '%s/%s' % (title_temp,matchObj.group(1))
                    dict_value[key_name] = matchObj.group(2)
                if re.match(r'Next connect timer due in\s*\w+\s*\w+',list_len[0]):
                    matchObj = re.match('(Next connect timer due in)\s*(\w+\s*\w+)',list_len[0])
                    #生成字典
                    key_name = '%s/%s' % (title_temp,matchObj.group(1))
                    dict_value[key_name] = matchObj.group(2)
                if re.match(r'Last Reset:\s*\S+,\s*due to BGP Notification\s*\w+',list_len[0]):
                    matchObj = re.match('(Last Reset):\s*(\S+),\s*(due to BGP Notification)\s*(\w+)',list_len[0])
                    #生成字典
                    for m in range(1,5,2):
                        key_name = '%s/%s' % (title_temp,matchObj.group(m))
                        dict_value[key_name] = matchObj.group(m+1)
                if re.match(r'Notification Error Message:\s*\(Cease/Other Configuration Change.\)',list_len[0]):
                    matchObj = re.match('(Notification Error Message):\s*(\S+\s*\S*\s*\S*\s*\S*)',list_len[0])
                    #生成字典
                    key_name = '%s/%s' % (title_temp,matchObj.group(1))
                    dict_value[key_name] = matchObj.group(2)
            index += 1
            #将保存有主键值的列表以bgp_neighbor_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value["bgp_neighbor_list"]=bgp_neighbor_list
        return dict_value
    def dut_get_show_ipv6_dhcp_server_statistics(self,show_info):                          #函数名由锐捷提供
        """
        Function:show ipv6 dhcp server statistics回显解析函数
        CLI命令:show ipv6 dhcp server statistics
        回显信息示例:
RGOS_12_1#show ipv6 dhcp server statistics
DHCPv6 server statistics:
Packet statistics:
DHCPv6 packets received:             8000
 Solicit received:                   4000
 Request received:                   4000
 Confirm received:                   0
 Renew received:                     0
 Rebind received:                    0
 Release received:                   0
 Decline received:                   0
 Relay-forward received:             0
 Information-request received:       0
 Unknown message type received:      0
 Error message received:             0

DHCPv6 packet sent:                  8000
 Advertise sent:                     4000
 Reply sent:                         4000
 Relay-reply sent:                   0
 Send reply error:                   0
 Send packet error:                  0

Binding statistics:
 Bindings generated:                 2000
 IAPD assigned:                      0
 IANA assigned:                      2000

Configuration statistics:
 DHCPv6 server interface:            1
 DHCPv6 pool:                        1
 DHCPv6 iapd binding:                0

        Returns:
{"Configuration statistics/DHCPv6 pool": "1"
"Packet statistics/DHCPv6 packets received": "8000"
"Packet statistics/Error message received": "0"
"statis_list": ["Packet statistics:"
"Binding statistics:"
"Configuration statistics:"], "Packet statistics/Advertise sent": "4000"
"Packet statistics/Renew received": "0"
"Packet statistics/Reply sent": "4000"
"Packet statistics/Information-request received": "0"
"Packet statistics/Request received": "4000"
"Packet statistics/Confirm received": "0"
"Configuration statistics/DHCPv6 iapd binding": "0"
"Packet statistics/Release received": "0"
"Packet statistics/Send packet error": "0"
"Packet statistics/Unknown message type received": "0"
"Binding statistics/Bindings generated": "2000"
"Binding statistics/IANA assigned": "2000"
"Packet statistics/Relay-reply sent": "0"
"Packet statistics/Decline received": "0"
"Binding statistics/IAPD assigned": "0"
"Packet statistics/Relay-forward received": "0"
"Packet statistics/Rebind received": "0"
"Packet statistics/Send reply error": "0"
"Packet statistics/Solicit received": "4000"
"Configuration statistics/DHCPv6 server interface": "1"
"Packet statistics/DHCPv6 packet sent": "8000"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 dhcp server statistics | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        #==========================================
        #value_title定义主键的id，即列表中的唯一值
        #==========================================
        value_title_1="Packet statistics"
        value_title_2="Binding statistics"
        value_title_3="Configuration statistics"
        length_list = []
        dict_value={}

        #=======================================================================================
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #=======================================================================================
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)

        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        length = len(dut_info_split)
        # #print(dut_info_split)

        #======================================================
        # #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        #======================================================
        for i in range(length):
            if 'DHCPv6 server statistics' in dut_info_split[i]:
                show_info_split.remove(show_info_split[i])
                break

        # ======================================================================
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        # ======================================================================
        length_list = [50]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        ##print dut_info_split

        # ======================================================================
        # #创建空列表用于保存主键内容
        # ======================================================================
        statis_list = []

        # ======================================================================
        # #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        # ======================================================================
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            #获取表头，用于组合
            if value_title_1 in list_len[0] or value_title_2 in list_len[0] or value_title_3 in list_len[0]:
                type_statis = list_len[0].split(':')[0]
                title = type_statis
                statis_list.append(list_len[0])
            else:
                #生成字典
                # statis_list.append(list_len[0])
                list_len = list_len[0].split(':')
                for s in range(0,length_list_len):
                    #将主键与表名以/分隔组合成为字典的key
                    key_name = '%s/%s' % (title,list_len[0].lstrip().rstrip())
                    dict_value[key_name]=list_len[s+1].lstrip().rstrip()
            #将保存有主键值的列表以port_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value["statis_list"]=statis_list

        return dict_value
    def dut_get_show_ipv6_dhcp_pool_word(self,show_info):                          #函数名由锐捷提供
        """
        Function:show ipv6 dhcp pool (V6-VLAN256)回显解析函数
        CLI命令:show ipv6 dhcp pool (V6-VLAN256)
        回显信息示例:
RGOS_12_1#show ipv6 dhcp pool V6-VLAN256
    DHCPv6 pool: V6-VLAN256
      Prefix pool: V6-VLAN256
                 preferred lifetime 86400, valid lifetime 86400
      IANA address range: 2015:18:1::1/64 -> 2015:18:1:0:ffff:ffff:ffff:ffff/64
                 preferred lifetime 86400, valid lifetime 86400
    RGOS_12_1#

        Returns:
{"V6-VLAN256/IANA address range/preferred lifetime": "86400"
"V6-VLAN256/Prefix pool": "V6-VLAN256"
"V6-VLAN256/IANA address range/valid lifetime": "86400"
"V6-VLAN256/IANA address range": "2015:18:1::1/64 -> 2015:18:1:0:ffff:ffff:ffff:ffff/64"
"pool_list": ["V6-VLAN256"], "V6-VLAN256/Prefix pool/preferred lifetime": "86400"
"V6-VLAN256/Prefix pool/valid lifetime": "86400"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 dhcp pool (V6-VLAN256) | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        #==========================================
        #value_title定义主键的id，即列表中的唯一值
        #==========================================
        value_title="DHCPv6 pool"
        sub_value_title1="preferred lifetime"
        sub_value_title2="valid lifetime"
        sub_value_title3="expires at"
        length_list = []
        dict_value={}

        #=======================================================================================
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #=======================================================================================
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)

        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        length = len(dut_info_split)
        # #print(dut_info_split)

        # ======================================================================
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        # ======================================================================
        length_list = [80]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        # #print dut_info_split

        # ======================================================================
        # #创建空列表用于保存主键内容
        # ======================================================================
        pool_list = []

        # ======================================================================
        # #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        # ======================================================================
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            #获取表头，用于组合
            if value_title in list_len[0]:
                index = list_len[0].find(':')
                pool_name = list_len[0][(index+1):].lstrip()
                title = pool_name
                pool_list.append(pool_name)
            else:
                #生成字典
                index = list_len[0].find(':')
                if index != -1:
                    sub_key = list_len[0].rstrip()
                    sub_key = sub_key[0:index]
                    for s in range(0,length_list_len):
                        #将主键与表名以/分隔组合成为字典的key
                        key_name = '%s/%s' % (title,sub_key)
                        dict_value[key_name]=list_len[0][(index+1):].lstrip()
                else:
                    #     #将主键与表名以/分隔组合成为字典的key
                    if sub_value_title1 in list_len[0]:
                        temp_str1 = list_len[0]
                        temp_str2 = list_len[0]
                        key_name = '%s/%s/%s' % (title,sub_key,sub_value_title1)
                        key_value = temp_str1.split(',')[0].split(sub_value_title1)[1].lstrip().rstrip()
                        dict_value[key_name]=key_value
                        key_name = '%s/%s/%s' % (title,sub_key,sub_value_title2)
                        key_value = temp_str2.split(sub_value_title2)[1].lstrip().rstrip()
                        dict_value[key_name]=key_value
                    if sub_value_title3 in list_len[0]:
                        key_name = '%s/%s/%s' % (title,sub_key,sub_value_title3)
                        key_value = list_len[0].split(sub_value_title3)[1].lstrip().rstrip()
                        dict_value[key_name]=key_value
            #将保存有主键值的列表以port_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value["pool_list"]=pool_list
        return dict_value
    def dut_get_show_ipv6_local_pool(self,show_info):                          #函数名由锐捷提供
        """
        Function:show ipv6 dhcp pool回显解析函数
        CLI命令:show ipv6 dhcp pool
        回显信息示例:
DUT1#show ipv6 dhcp pool
DHCPv6 pool: DHCPv6-PD-Pool
  Prefix pool: DHCPv6-PD-Pool
             preferred lifetime 300, valid lifetime 300
  IANA address range: 2001::1/64 -> 2001::ffff:ffff:ffff:ffff/64
             preferred lifetime 300, valid lifetime 300
             excluded-address 2001::2 -> 2001::12
             excluded-address 2001::13 -> 2001::23
             excluded-address 2001::24 -> 2001::34
  DNS server: 2002::1
  Domain name: dhcpv6-Test
DHCPv6 pool: DHCPv6-PD-Pool2
  Prefix pool: DHCPv6-PD-Pool2
             preferred lifetime 300, valid lifetime 300
  IANA address range: 2001::1/64 -> 2001::ffff:ffff:ffff:ffff/64
             preferred lifetime 300, valid lifetime 300
             excluded-address 2001::24 -> 2001::34
  DNS server: 2003::1
  Domain name: dhcpv6-Test2

        Returns:
{"DHCPv6-PD-Pool2/Prefix pool/valid lifetime": "300"
"DHCPv6-PD-Pool2/DNS server": "2003::1"
"DHCPv6-PD-Pool2/Domain name": "dhcpv6-Test2"
"DHCPv6-PD-Pool/Prefix pool/valid lifetime": "300"
"DHCPv6-PD-Pool/Prefix pool": "DHCPv6-PD-Pool"
"DHCPv6-PD-Pool2/Prefix pool": "DHCPv6-PD-Pool2"
"DHCPv6-PD-Pool/Domain name": "dhcpv6-Test"
"DHCPv6-PD-Pool2/IANA address range": "2001::1/64 -> 2001::ffff:ffff:ffff:ffff/64"
"DHCPv6-PD-Pool/DNS server": "2002::1"
"DHCPv6-PD-Pool/IANA address range": "2001::1/64 -> 2001::ffff:ffff:ffff:ffff/64"
"DHCPv6-PD-Pool2/IANA address range_list": ["preferred lifetime 300, valid lifetime 300"
"excluded-address 2001::24 -> 2001::34"], "DHCPv6-PD-Pool/IANA address range_list": ["preferred lifetime 300, valid lifetime 300"
"excluded-address 2001::2 -> 2001::12"
"excluded-address 2001::13 -> 2001::23"
"excluded-address 2001::24 -> 2001::34"], "DHCPv6-PD-Pool/Prefix pool/preferred lifetime": "300"
"DHCPv6-PD-Pool2/Prefix pool/preferred lifetime": "300"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 dhcp pool | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        ###########################################
        #value_title定义主键的id，即列表中的唯一值
        ###########################################
        value_title="Pool"
        length_list = []
        dict_value={}
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)
        ##print dut_info_split
        ##########################################################################
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        ##########################################################################
        length_list = [32,64,16,12]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        ##print dut_info_split
         ######################################################################
        #创建空列表用于保存主键内容
        ######################################################################
        address_list = []
        ######################################################################
        #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        ######################################################################
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            #获取表头，用于组合
            if list_len[0]==value_title:
                title = list_len
            elif list_len[0]!=value_title:
                #生成字典
                address_list.append(list_len[0])
                for s in range(1,length_list_len):
                    #将主键与表名以/分隔组合成为字典的key
                    key_name = '%s/%s' % (list_len[0],title[s])
                    dict_value[key_name]=list_len[s]
            #将保存有主键值的列表以address_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value["address_list"]=address_list
        return dict_value
    def dut_get_show_ipv6_nd(self,show_info):                          #函数名由锐捷提供
        #==========================================
        #value_title定义主键的id，即列表中的唯一值
        #==========================================
        value_title="-> link"
        value_title1="link"
        value_title2="flags"
        value_title3="Other"
        length_list = []
        dict_value={}

        #=======================================================================================
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #=======================================================================================
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)
        for i in range(0,13):
            show_info_split.remove(show_info_split[0])

        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        length = len(dut_info_split)
        ##print(dut_info_split)
        # ======================================================================
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        # ======================================================================
        length_list = [180]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        ##print dut_info_split
        # ======================================================================
        # #创建空列表用于保存主键内容
        # ======================================================================
        address_list = []
        # ======================================================================
        # #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        # ======================================================================
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                ##print row_value
                list_len.append(row_value)
            #获取表头，用于组合
            ##print(list_len)
            if value_title in list_len[0]:
                title = list_len
                ##print title
                matchObj = re.match('\s*(\S*\d+\S*\S+\s*\S+\S+\/\d+)\s*\S+\s+(link)\s+(\S+)\s+(@)\s+\W+(\w+\s*\S*)\S+\s+\S+\s+(ifa)=(\S+)\s+(\w+)\s+(\S+\s+\S*\s*\d+)\s+(\w+)\s+(\d+)\s*,\s*(\w+)\s+(\d+)\s*,\s*(\w+\s+\w+)\s*(\d+)',list_len[0])
                title = matchObj.group(1)
                key_name = '%s/%s' % (title,matchObj.group(2))
                dict_value[key_name]=matchObj.group(3)
                key_name = '%s/%s' % (title,matchObj.group(4))
                dict_value[key_name]=matchObj.group(5)
                key_name = '%s/%s' % (title,matchObj.group(6))
                dict_value[key_name]=matchObj.group(7)
                key_name = '%s/%s' % (title,matchObj.group(8))
                dict_value[key_name]=matchObj.group(9)
                key_name = '%s/%s' % (title,matchObj.group(10))
                dict_value[key_name]=matchObj.group(11)
                key_name = '%s/%s' % (title,matchObj.group(12))
                dict_value[key_name]=matchObj.group(13)
                key_name = '%s/%s' % (title,matchObj.group(14))
                dict_value[key_name]=matchObj.group(15)
                address_list.append(list_len[0])
            else:
                #生成字典
                # port_list.append(list_len[0])
                if value_title1 in list_len[0]:
                    list_len.remove(list_len[0])
                    #list_len = list_len[0]
                        #将主键与表名以/分隔组合成为字典的key
                    #key_name = title
                    #dict_value[key_name]=list_len
                else:
                    if value_title2 in list_len[0]:
                        matchObj1 = re.match('\s*(\w+)\W+\s+(\S+)\s+,\s+(\w+)\W+(\d+),\s+(\w+)\W+(\d+),\s+(\S+)\W+(\d+)',list_len[0])
                        key_name = '%s/%s' % (title,matchObj1.group(1))
                        dict_value[key_name]=matchObj1.group(2)
                        key_name = '%s/%s' % (title,matchObj1.group(3))
                        dict_value[key_name]=matchObj1.group(4)
                        key_name = '%s/%s' % (title,matchObj1.group(5))
                        dict_value[key_name]=matchObj1.group(6)
                        key_name = '%s/%s' % (title,matchObj1.group(7))
                        dict_value[key_name]=matchObj1.group(8)
                        #将主键与表名以/分隔组合成为字典的key
                        #list_len = list_len[0].split(': ')
                        #for s in range(0,length_list_len):
                         #将主键与表名以/分隔组合成为字典的key
                           # key_name = '%s/%s' % (title,list_len[0].lstrip().rstrip())
                            #dict_value[key_name]=list_len[s+1].lstrip().rstrip()
                    else:
                        matchObj2 = re.match('\s*\S*\s*(\w+\s+\d+\s+\w+\s*::\s*\w+\s+\d+)',list_len[0])
                        other = matchObj2.group(1)
                        key_name = '%s/%s' % (title,value_title3.lstrip().rstrip())
                        dict_value[key_name]=other.lstrip().rstrip()
            #将保存有主键值的列表以address_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            #dict_value["address_list"]=address_list
        return dict_value
    def dut_get_show_ipv6_neighbors(self,show_info):          #函数名由锐捷提供
        """
        Function:show ipv6 neighbors回显解析函数
        CLI命令:show ipv6 neighbors
        回显信息示例:
dut1(config-if-GigabitEthernet 1/3/18)#show ipv6 neighbors 

IPv6 Address                            Linklayer Addr Interface
2018::1                                 00d0.f822.33bd VLAN 2                
2018::2                                 0000.779f.bf96 VLAN 2                
FE80::2D0:F8FF:FE22:33BD                00d0.f822.33bd VLAN 2                
FE80::2144:A3B6:32BF:761F               0000.779f.bf96 VLAN 2                
dut1(config-if-GigabitEthernet 1/3/18)#

        Returns:
{'2018::2/Linklayer Addr': '0000.779f.bf96'
'FE80::2144:A3B6:32BF:761F/Linklayer Addr': '0000.779f.bf96'
'ip_address_list': ['2018::1'
'2018::2'
'FE80::2D0:F8FF:FE22:33BD'
'FE80::2144:A3B6:32BF:761F'], '2018::2/Interface': 'VLAN 2'
'FE80::2144:A3B6:32BF:761F/Interface': 'VLAN 2'
'FE80::2D0:F8FF:FE22:33BD/Linklayer Addr': '00d0.f822.33bd'
'2018::1/Linklayer Addr': '00d0.f822.33bd'
'FE80::2D0:F8FF:FE22:33BD/Interface': 'VLAN 2'
'2018::1/Interface': 'VLAN 2'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 neighbors | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        ###########################################
        #value_title定义主键的id，即列表中的唯一值
        ###########################################
        value_title="IPv6 Address"
        length_list = []
        dict_value={}
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split

        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        ##########################################################################
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        ##########################################################################
        length_list = [40,15,32]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        # #print dut_info_split
        ######################################################################
        #创建空列表用于保存主键内容
        ######################################################################
        ip_address_list = []
        ######################################################################
        #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        ######################################################################
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            #获取表头，用于组合
            if list_len[0]==value_title:
                title = list_len
            elif list_len[0]!=value_title:
                #生成字典
                ip_address_list.append(list_len[0])
                for s in range(1,length_list_len):
                    #将主键与表名以/分隔组合成为字典的key
                    key_name = '%s/%s' % (list_len[0],title[s])
                    dict_value[key_name]=list_len[s]
            #将保存有主键值的列表以ip_address_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value["ip_address_list"]=ip_address_list
        return dict_value
    def dut_get_show_ipv6_neighbors_verbose(self,show_info):        #函数名由锐捷提供
        """
        Function:show ipv6 neighbors verbose回显解析函数
        CLI命令:show ipv6 neighbors verbose
        回显信息示例:
Ruijie#show ipv6 neighbors verbose
 IPv6 Address                            Linklayer Addr Interface             State          Age         Asked
 2001:DA8:218:4018::1                    0074.9c86.475d VLAN 41               State: REACH/H Age: -      asked: 0 
 2001:DA8:218:4020::1                    0074.9c86.475d VLAN 49               State: REACH/H Age: -      asked: 0 
 FE80::274:9CFF:FE86:475D                0074.9c86.475d VLAN 41               State: REACH/H Age: -      asked: 0 
 FE80::274:9CFF:FE86:475D                0074.9c86.475d VLAN 49               State: REACH/H Age: -      asked: 0

        Returns:
{"2001:DA8:218:4018::1/Linklayer Addr": "0074.9c86.475d"
"FE80::274:9CFF:FE86:475D/Interface             Stat": "VLAN 49               Stat"
"FE80::274:9CFF:FE86:475D/Linklayer Addr": "0074.9c86.475d"
"ipv6_address_list": ["2001:DA8:218:4018::1"
"2001:DA8:218:4020::1"
"FE80::274:9CFF:FE86:475D"
"FE80::274:9CFF:FE86:475D"], "2001:DA8:218:4018::1/Interface             Stat": "VLAN 41               Stat"
"2001:DA8:218:4020::1/Linklayer Addr": "0074.9c86.475d"
"2001:DA8:218:4020::1/Interface             Stat": "VLAN 49               Stat"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 neighbors verbose | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="IPv6 Address"
        dict_value={}
        show_info = show_info
        if "State:" not in str(show_info):
            return self.dut_show_autoget_blank_list(show_info,value_title)

        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split1=show_info_split
        dut_info_split2 = self.del_space_lines(dut_info_split1)
        dut_info_split = []
        value_pro=""
        value_num=0
        for value in dut_info_split2:
            if value_num != 0 :
                value_pro = dut_info_split[-1]
            if re.match(r"State:.*",value.strip()):
                value_state = '       ' + value
                #value_state = value
                value_last = value_pro+value_state
                dut_info_split.pop()
                dut_info_split.append(value_last)
            else:
                dut_info_split.append(value)
            value_num = value_num +1
        length_list = [40,15,25,100]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        ip_address_list = []
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            if list_len[0]==value_title:
                title = list_len
            elif list_len[0]!=value_title:
                ip_address_list.append(list_len[0])
                for s in range(1,length_list_len):
                    if s == 3 :
                        if re.match("State:(.*)Age:(.*)asked:(.*)",list_len[3].strip()):
                            obj_1 = re.match("State:(.*)Age:(.*)asked:(.*)",list_len[3])
                            list_1 =["State","Age","asked"]
                            count = 1
                            for value_list_1 in list_1:
                                key_name = '%s/%s' % (str(list_len[0]).lstrip("*"),value_list_1)
                                dict_value[key_name]=obj_1.group(count).strip()
                                count =count +1
                    else:
                        key_name = '%s/%s' % (str(list_len[0]).lstrip("*"),title[s])
                        dict_value[key_name]=list_len[s]
            dict_value["ipv6_address_list"]=ip_address_list
        return dict_value
    def dut_get_show_ipv6_ref_statistics(self,show_info):                #函数名由锐捷提供
        """
        Function:show ipv6 ref statistics回显解析函数
        CLI命令:show ipv6 ref statistics
        回显信息示例:
Ruijie#show ipv6 ref statistics
global route table statistic:
    Common route         : 1
    Direct net route     : 0
    Direct net addr route: 0
    Local route          : 0
    Default route        : 0
    Drop route           : 0
    MPLS FTN route       : 0
    Vxlan route          : 0
adjacency balance table statistic:
    dest-address load-sharing
    balance: 0

adjacency node table statistic:
    total  : 2
    local  : 1
    glean  : 0
    forward: 0
    discard: 0
    mcast  : 0
    punt   : 1
    vxlan  : 0
Ruijie#

        Returns:
{"adjacency node table statistic/punt": "1"
"statistic_list": ["global route table statistic"
"adjacency balance table statistic"
"adjacency node table statistic"], "adjacency balance table statistic/balance": "0"
"adjacency node table statistic/glean": "0"
"global route table statistic/Common route": "1"
"adjacency node table statistic/discard": "0"
"adjacency balance table statistic/dest-address": "load-sharing"
"global route table statistic/Local route": "0"
"global route table statistic/Vxlan route": "0"
"global route table statistic/MPLS FTN route": "0"
"adjacency node table statistic/local": "1"
"adjacency node table statistic/vxlan": "0"
"global route table statistic/Direct net route": "0"
"adjacency node table statistic/forward": "0"
"adjacency node table statistic/mcast": "0"
"adjacency node table statistic/total": "2"
"global route table statistic/Default route": "0"
"global route table statistic/Drop route": "0"
"global route table statistic/Direct net addr route": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 ref statistics | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        ###########################################
        #value_title定义主键的id，即列表中的唯一值
        ###########################################
        value_title_1="global route table statistic:"
        value_title_2="adjacency balance table statistic:"
        value_title_3="adjacency node table statistic:"
        length_list = []
        dict_value={}
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        ######################################################
        #使用正则匹配列表前的内容，删除该行
        ######################################################
        length = len(dut_info_split)
        for i in range(length):
            if re.match(r'-----------REFv6 Statistic Information-----------',dut_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        ##########################################################################
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        ##########################################################################
        length_list = [45]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        # #print dut_info_split
        ######################################################################
        #创建空列表用于保存主键内容
        ######################################################################
        statistic_list = []
        ######################################################################
        #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        ######################################################################
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            #获取表头，用于组合
            num_list = []
            if list_len[0]==value_title_1 or list_len[0] == value_title_2 or list_len[0] == value_title_3:
                title = list_len[0]
                title = title.replace(':','')
                statistic_list.append(title)
            elif list_len[0]!=value_title_1 or list_len[0]!= value_title_2 or list_len[0]!= value_title_3:
                #生成字典
                list_len_new = list_len[0].split(':')
                #将主键与表名以/分隔组合成为字典的key
                if len(list_len_new) == 2:
                    key_name = '%s/%s' % (title,list_len_new[0].rstrip())
                    value = list_len_new[1]
                    value = value.lstrip()
                    dict_value[key_name]=value
                elif len(list_len_new) == 1:
                    list_len_new = list_len_new[0].split(' ')
                    key_name = '%s/%s' % (title,list_len_new[0])
                    value = list_len_new[1]
                    value = value.lstrip()
                    dict_value[key_name]=value
            #将保存有主键值的列表以statistic_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value["statistic_list"]=statistic_list
        return dict_value
    def dut_get_show_ntp_status(self,show_info):                          #函数名由锐捷提供
        ###########################################
        #value_title定义主键的id，即列表中的唯一值
        ###########################################
        value_title="Ntp"
        length_list = []
        dict_value={}
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        # length = len(dut_info_split)
        ######################################################
        #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        ######################################################
        for i in range(len(dut_info_split)):
            if re.match(r'Clock\s*is\s*\w+,\s*stratum\s*\d+,\s*\w+\s*\w*\s*clock',dut_info_split[i]):
                matchObj = re.match('(Clock)\s*is\s*(\w+),\s*(stratum)\s*(\d+),\s*(\w+\s*\w*)\s*(\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                dict_value[matchObj.group(3)]=matchObj.group(4)
                dict_value[matchObj.group(6)]=matchObj.group(5)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'nominal freq\s*is\s*\S+\s*\w*,\s*actual freq\s*is\s*\S+\s*\w*,\s*precision\s*is\s*\S+',dut_info_split[i]):
                matchObj = re.match('(nominal freq)\s*is\s*(\S+\s*\w*),\s*(actual freq)\s*is\s*(\S+\s*\w*),\s*(precision)\s*is\s*(\S+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                dict_value[matchObj.group(3)]=matchObj.group(4)
                dict_value[matchObj.group(5)]=matchObj.group(6)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'reference time' in dut_info_split[i]:
                matchObj = re.match('(reference time)\s*is\s*(\S+\s*\S*\s*\S*\s*\S*\s*\S*\s*\S*\s*\S*)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'clock offset\s*is\s*\S+\s*\w+,\s*root delay\s*is\s*\S+\s*\S*\s*\S*\s*\S*\s*\S*\s*\S*',dut_info_split[i]):
                matchObj = re.match('(clock offset)\s*is\s*(\S+\s*\w+),\s*(root delay)\s*is\s*(\S+\s*\S*\s*\S*\s*\S*\s*\S*\s*\S*)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                dict_value[matchObj.group(3)]=matchObj.group(4)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'root dispersion\s*is\s*\S+\s*\w+,\s*peer dispersion\s*is\s*\S+\s*\w+',dut_info_split[i]):
                matchObj = re.match('(root dispersion)\s*is\s*(\S+\s*\w+),\s*(peer dispersion)\s*is\s*(\S+\s*\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                dict_value[matchObj.group(3)]=matchObj.group(4)
                show_info_split.remove(show_info_split[i])
                break
        return dict_value
    def dut_get_show_ipv6_vrrp(self,show_info):                          #函数名由锐捷提供
        length_list = []
        dict_value={}
        vlangroup_list = []
        #=======================================================================================
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #=======================================================================================
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        # length = len(dut_info_split)

        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        ##########################################################################
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        ##########################################################################
        length_list = [60]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        ######################################################################
        #创建空列表用于保存主键内容
        ######################################################################
        address_list = []
        ######################################################################
        #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        ######################################################################
        m = 0
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            #获取表头，用于组合
            if re.match(r'\w+\s*\d+.*\s*-\s*Group\s*\d+',list_len[0]):
                m = 0
                matchObj = re.match('((\w+)\s*\d+.*\s*-\s*Group\s*\d+)',list_len[0])
                title = matchObj.group(1)
                keylist_title=matchObj.group(2).lower()
                vlangroup_list.append(title)
            elif 'State is' in list_len[0]:
                matchObj = re.match('\s*(State)\s*is\s*(\w+)',list_len[0])
                key_name = '%s/%s' % (vlangroup_list[-1],matchObj.group(1))
                dict_value[key_name]=matchObj.group(2)
            elif re.match(r'\w+:+\w+',list_len[0]):
                m += 1
                if m == 1:
                    temp_key = '%s/%s' % (title,'Virtual IPv6 address')
                    dict_value[temp_key]=list_len[0]
                else:
                    temp_key = '%s/%s' % (title,'Virtual IPv6 address')
                    temp_value = '%s/%s' % (dict_value[temp_key],list_len[0])
                    dict_value[temp_key]=temp_value
            elif 'Virtual MAC address' in list_len[0]:
                matchObj = re.match('\s*(Virtual MAC address)\s*is\s*(\S+)',list_len[0])
                key_name = '%s/%s' % (vlangroup_list[-1],matchObj.group(1))
                dict_value[key_name]=matchObj.group(2)
            elif re.match(r'\s*Advertisement interval',list_len[0]):
                matchObj = re.match('\s*(Advertisement interval)\s*is\s*(\S+\s*\S+)',list_len[0])
                key_name = '%s/%s' % (vlangroup_list[-1],matchObj.group(1))
                dict_value[key_name]=matchObj.group(2)
            elif 'Accept_Mode' in list_len[0]:
                matchObj = re.match('\s*(Accept_Mode)\s*is\s*(\w+)',list_len[0])
                key_name = '%s/%s' % (vlangroup_list[-1],matchObj.group(1))
                dict_value[key_name]=matchObj.group(2)
            elif 'Preemption' in list_len[0]:
                matchObj = re.match('\s*(Preemption)\s*is\s*(\w+)',list_len[0])
                key_name = '%s/%s' % (vlangroup_list[-1],matchObj.group(1))
                dict_value[key_name]=matchObj.group(2)
            elif 'min delay' in list_len[0]:
                matchObj = re.match('\s*(min delay)\s*is\s*(\w+\s*\w+)',list_len[0])
                key_name = '%s/%s' % (vlangroup_list[-1],matchObj.group(1))
                dict_value[key_name]=matchObj.group(2)
            elif 'Priority' in list_len[0]:
                matchObj = re.match('\s*(Priority)\s*is\s*(\w+)',list_len[0])
                key_name = '%s/%s' % (vlangroup_list[-1],matchObj.group(1))
                dict_value[key_name]=matchObj.group(2)
            elif re.match(r'\s*Master Router is \w+ , priority is \w+',list_len[0]):
                matchObj = re.match('\s*(Master Router)\s*is\s*(\w+)\s*,\s*(priority)\s*is\s*(\w+)',list_len[0])
                key_name1 = '%s/%s' % (vlangroup_list[-1],matchObj.group(1))
                key_name2 = '%s/%s' % (vlangroup_list[-1],matchObj.group(3))
                dict_value[key_name1]=matchObj.group(2)
                dict_value[key_name2]=matchObj.group(4)
            elif 'Master Advertisement interval' in list_len[0]:
                matchObj = re.match('\s*(Master Advertisement interval)\s*is\s*(\w+)',list_len[0])
                key_name = '%s/%s' % (vlangroup_list[-1],matchObj.group(1))
                dict_value[key_name]=matchObj.group(2)
            elif 'Master Down interval' in dut_info_split[i]:
                matchObj = re.match('\s*(Master Down interval)\s*is\s*(\S+\s*\w+)',dut_info_split[i])
                key_name = '%s/%s' % (vlangroup_list[-1],matchObj.group(1))
                dict_value[key_name]=matchObj.group(2)
            elif re.match(r'\s*Tracking state of \d+ interfaces, \d+ up',dut_info_split[i]):
                matchObj = re.match('\s*(Tracking state)\s*of\s*(\d+)\s*interfaces,\s*(\d+)\s*(up)',dut_info_split[i])
                key_name1 = '%s/%s' % (vlangroup_list[-1],matchObj.group(1))
                key_name2 = '%s/%s' % (vlangroup_list[-1],matchObj.group(4))
                dict_value[key_name1]=matchObj.group(2)
                dict_value[key_name2]=matchObj.group(3)
            #将保存有主键值的列表以vlangroup_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value[keylist_title + "group_list"] = vlangroup_list
            dict_value["GigabitEthernetgroup_list"]=vlangroup_list
            dict_value["vlangroup_list"] = vlangroup_list
        return dict_value
    def dut_get_show_vrrp(self,show_info):                          #函数名由锐捷提供
        #==========================================
        #value_title定义主键的id，即列表中的唯一值
        #==========================================
        value_title="VlanGroup"
        length_list = []
        dict_value={}
        vlangroup_list = []
        #=======================================================================================
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #=======================================================================================
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        # length = len(dut_info_split)

        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        length = len(dut_info_split)
        # print(dut_info_split)

        ##########################################################################
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        ##########################################################################
        length_list = [80]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        ######################################################################
        #创建空列表用于保存主键内容
        ######################################################################
        address_list = []
        ######################################################################
        #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        ######################################################################
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            #获取表头，用于组合
            if re.match(r'VLAN\s*\d+\s*-\s*Group\s*\d+',list_len[0]):
                matchObj = re.match('(VLAN\s*\d+\s*-\s*Group\s*\d+)',list_len[0])
                title = matchObj.group(1)
                vlangroup_list.append(title)

            elif 'State is' in list_len[0]:
                matchObj = re.match('\s*(State)\s*is\s*(\w+)',list_len[0])
                key_name = '%s/%s' % (vlangroup_list[-1],matchObj.group(1))
                dict_value[key_name]=matchObj.group(2)

            elif re.match(r'Virtual IP address is \S+ configured',list_len[0]):
                matchObj = re.match('(Virtual IP address) is\s*(\S+)\s*\w+',list_len[0])
                key_name = '%s/%s' % (vlangroup_list[-1],matchObj.group(1))
                dict_value[key_name]=matchObj.group(2)

            elif 'Virtual MAC address' in list_len[0]:
                matchObj = re.match('\s*(Virtual MAC address)\s*is\s*(\S+)',list_len[0])
                key_name = '%s/%s' % (vlangroup_list[-1],matchObj.group(1))
                dict_value[key_name]=matchObj.group(2)

            elif re.match(r'\s*VRRP standard version is \w+',dut_info_split[i]):
                matchObj = re.match('\s*(VRRP standard version) is\s*(\w+)',dut_info_split[i])
                key_name = '%s/%s' % (vlangroup_list[-1],matchObj.group(1))
                dict_value[key_name]=matchObj.group(2)

            elif re.match('\s*Advertisement interval',list_len[0]):
                matchObj = re.match('\s*(Advertisement interval)\s*is\s*(\S+\s*\S+)',list_len[0])
                key_name = '%s/%s' % (vlangroup_list[-1],matchObj.group(1))
                dict_value[key_name]=matchObj.group(2)

            elif 'Preemption' in list_len[0]:
                matchObj = re.match('\s*(Preemption)\s*is\s*(\w+)',list_len[0])
                key_name = '%s/%s' % (vlangroup_list[-1],matchObj.group(1))
                dict_value[key_name]=matchObj.group(2)

            elif 'min delay' in list_len[0]:
                matchObj = re.match('\s*(min delay)\s*is\s*(\w+\s*\w+)',list_len[0])
                key_name = '%s/%s' % (vlangroup_list[-1],matchObj.group(1))
                dict_value[key_name]=matchObj.group(2)

            elif 'Priority' in list_len[0]:
                matchObj = re.match('\s*(Priority)\s*is\s*(\w+)',list_len[0])
                key_name = '%s/%s' % (vlangroup_list[-1],matchObj.group(1))
                dict_value[key_name]=matchObj.group(2)

            elif 'Authentication' in list_len[0]:
                matchObj = re.match('\s*(Authentication)\s*is\s*(\w+)',list_len[0])
                key_name = '%s/%s' % (vlangroup_list[-1],matchObj.group(1))
                dict_value[key_name]=matchObj.group(2)

            elif re.match(r'\s*Master Router is \w+ , priority is \w+',list_len[0]):
                matchObj = re.match('\s*(Master Router)\s*is\s*(\w+)\s*,\s*(priority)\s*is\s*(\w+)',list_len[0])
                key_name1 = '%s/%s' % (vlangroup_list[-1],matchObj.group(1))
                key_name2 = '%s/%s' % (vlangroup_list[-1],matchObj.group(3))
                dict_value[key_name1]=matchObj.group(2)
                dict_value[key_name2]=matchObj.group(4)

            elif 'Master Advertisement interval' in list_len[0]:
                matchObj = re.match('\s*(Master Advertisement interval)\s*is\s*(\w+)',list_len[0])
                key_name = '%s/%s' % (vlangroup_list[-1],matchObj.group(1))
                dict_value[key_name]=matchObj.group(2)

            elif 'Master Down interval' in list_len[0]:
                matchObj = re.match('\s*(Master Down interval)\s*is\s*(\S+\s*\w+)',list_len[0])
                key_name = '%s/%s' % (vlangroup_list[-1],matchObj.group(1))
                dict_value[key_name]=matchObj.group(2)

            elif re.match(r'\s*Description :\s*\w+',list_len[0]):
                matchObj = re.match('\s*(Description ):\s*(\w+)',list_len[0])
                key_name = '%s/%s' % (vlangroup_list[-1],matchObj.group(1))
                dict_value[key_name]=matchObj.group(2)

            #将保存有主键值的列表以vlangroup_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value["vlangroup_list"]=vlangroup_list
        return dict_value
    def dut_get_show_vrf_ipv6(self,show_info):                          #函数名由锐捷提供
        """
        Function:show vrf ipv6回显解析函数
        CLI命令:show vrf ipv6
        回显信息示例:
Ruijie#show vrf ipv6
    Name                             Default RD                 Protocol(s)     Interface
    vrf1                             <not set>                  ipv4,ipv6       <none>
    vrf2                             <not set>                  ipv6            <none>

        Returns:
{"vrf2/Interface": "<none>"
"vrf1/Default RD": "<not set>"
"vrf1/Interface": "<none>"
"vrf1/Protocol(s)": "ipv4,ipv6"
"name_list": ["vrf1"
"vrf2"], "vrf2/Default RD": "<not set>"
"vrf2/Protocol(s)": "ipv6"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show vrf ipv6 | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        #==========================================
        #value_title定义主键的id，即列表中的唯一值
        #==========================================
        value_title="Name"
        length_list = []
        dict_value={}

        #=======================================================================================
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #=======================================================================================
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)

        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        length = len(dut_info_split)

        # ======================================================================
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        # ======================================================================
        length_list = [33,27,16,32]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        # print dut_info_split

        # ======================================================================
        # #创建空列表用于保存主键内容
        # ======================================================================
        name_list = []

        # ======================================================================
        # #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        # ======================================================================
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            #获取表头，用于组合
            if list_len[0]==value_title:
                title = list_len
            elif list_len[0]!=value_title:
                #生成字典
                name_list.append(list_len[0])
                for s in range(1,length_list_len):
                    #将主键与表名以/分隔组合成为字典的key
                    key_name = '%s/%s' % (list_len[0],title[s])
                    dict_value[key_name]=list_len[s]
            #将保存有主键值的列表以port_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value["name_list"]=name_list
        return dict_value
    def dut_get_show_erps(self,show_info):                          #函数名由锐捷提供
        """
        Function:show erps回显解析函数
        CLI命令:show erps
        回显信息示例:
Ruijie#show erps
ERPS Information
Global Status               : Disabled
Link monitored by           : Not Oam
Ruijie#

        Returns:
{"Global Status": "Disabled"
"Link monitored by": "Not Oam"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show erps | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        #==========================================
        #value_title定义主键的id，即列表中的唯一值
        #==========================================
        value_title="R-APS VLAN"
        length_list = []
        dict_value={}

        #=======================================================================================
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #=======================================================================================
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)

        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        length = len(dut_info_split)
        # print(dut_info_split)

        ##########################################################################
        #判断--所在行，当--已空格分隔可以自动统计出列宽时自动判断列宽，并删除该行
        ##########################################################################
        dut_info_split = self.del_specific_symbol_lines(dut_info_split)
        # print(dut_info_split)
        #======================================================
        # #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        #======================================================
        for i in range(length):
            if 'ERPS Information' in dut_info_split[i]:
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'Link monitored by' in dut_info_split[i]:
                index = dut_info_split[i].find(':')
                dict_value[dut_info_split[i][0:index].rstrip().lstrip()]=dut_info_split[i][(index+1):].rstrip().lstrip()
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'Global Status' in dut_info_split[i]:
                matchObj = re.match('\s*(Global Status)\s*:\s*(\w*)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        # ======================================================================
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        # ======================================================================
        length_list = [90]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        # print dut_info_split

        # ======================================================================
        # #创建空列表用于保存主键内容
        # ======================================================================
        APS_VLAN_list = []

        # ======================================================================
        # #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        # ======================================================================
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            #获取表头，用于组合
            if re.match(value_title, list_len[0]):
                temp_value = list_len[0].split(':')[1].lstrip().rstrip()
                title = "%s/%s" % ('R-APS VLAN',temp_value)
                APS_VLAN_list.append(temp_value.lstrip().rstrip())
            else:
                #生成字典
                list_len = list_len[0].split(':')
                for s in range(0,length_list_len):
                    #将主键与表名以/分隔组合成为字典的key
                    key_name = '%s/%s' % (title,list_len[0].lstrip().rstrip())
                    dict_value[key_name]=list_len[s+1].lstrip().rstrip()
            #将保存有主键值的列表以port_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value["R-APS VLAN_list"]=APS_VLAN_list

        return dict_value
    def dut_get_show_interface_switchport_backup_detail(self,show_info):                          #函数名由锐捷提供
        """
        Function:show interface switchport backup detail回显解析函数
        CLI命令:show interface switchport backup detail
        回显信息示例:
Ruijie#show interface switchport backup detail
    Switch Backup Interface Pairs:
    Active Interface         Backup Interface         State
    --------------------------------------------------------------------------
    Gi0/2                    Gi0/1                    Active Up/Backup Standby
    Interface Pair : Gi0/2, Gi0/1
    Preemption Mode : forced
    Preemption Delay : 6 seconds
    Bandwidth : Gi0/2(1000 Mbits), Gi0/1(1000 Mbits)

        Returns:
{"---------------------/Backup Interface": "-------------------------"
"Interface Pair(Gi0/2, Gi0/1)/Preemption Delay": "6 seconds"
"Active_Interface": ["---------------------"
"Gi0/2"], "Interface Pair(Gi0/2, Gi0/1)/Preemption Mode": "forced"
"Interface Pair(Gi0/2, Gi0/1)/Bandwidth": "Gi0/2(1000 Mbits), Gi0/1(1000 Mbits)"
"---------------------/State": "----------------------------"
"Gi0/2/Backup Interface": "Gi0/1"
"Gi0/2/State": "Active Up/Backup Standby"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interface switchport backup detail | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        #==========================================
        #value_title定义主键的id，即列表中的唯一值
        #==========================================
        value_title="Active Interface"
        sub_value_title="Interface Pair"
        length_list = []
        dict_value={}

        #=======================================================================================
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #=======================================================================================
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)

        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        length = len(dut_info_split)
        # print(dut_info_split)

        # =========================================================================
        #判断--所在行，当--已空格分隔可以自动统计出列宽时自动判断列宽，并删除该行
        # =========================================================================
        dut_info_split = self.del_specific_symbol_lines(dut_info_split)

        #======================================================
        # #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        #======================================================
        for i in range(length):
            if 'Switch Backup Interface Pairs' in dut_info_split[i]:
                show_info_split.remove(show_info_split[i])
                break
        # for i in range(len(dut_info_split)):
        #     if 'Interface Pair' in dut_info_split[i]:
        #         dict_value[dut_info_split[i].split(':')[0].rstrip().lstrip()]=dut_info_split[i].split(':')[1].rstrip().lstrip()
        #         show_info_split.remove(show_info_split[i])
        #         break

        # ======================================================================
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        # ======================================================================
        length_list = [25, 25, 32]
        length_list_1 = [74]

        for i in range(length):
            sight = 0
            sight_sum=0
            temp_title = []
            if 'Active Interface' in dut_info_split[i]:
                length_list_len = len(length_list)
                for j in range(length_list_len):
                    sight_sum = sight_sum+int(length_list[j])
                    row_value = dut_info_split[i][sight:sight_sum]
                    sight = sight_sum
                    row_value = row_value.lstrip()
                    row_value = row_value.rstrip()
                    temp_title.append(row_value)
                show_info_split.remove(show_info_split[i])
                break

        length_list_len = len(length_list)
        length = len(dut_info_split)

        # ======================================================================
        # #创建空列表用于保存主键内容
        # ======================================================================
        Active_Interface = []

        # ======================================================================
        # #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        # ======================================================================
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            if dut_info_split[i].find(':') != -1:
                length_list_len = len(length_list_1)
                for j in range(length_list_len):
                    sight_sum = sight_sum+int(length_list_1[j])
                    row_value = dut_info_split[i][sight:sight_sum]
                    sight = sight_sum
                    row_value = row_value.lstrip()
                    row_value = row_value.rstrip()
                    list_len.append(row_value)
                #获取表头，用于组合
                if sub_value_title in list_len[0]:
                    # title = list_len
                    temp_value = list_len[0].split(':')[1].lstrip().rstrip()
                    title = "%s(%s)" % ('Interface Pair',temp_value)
                    # APS_VLAN_list.append(temp_value.lstrip().rstrip())
                    # port_list.append(list_len[0])
                else:
                    #生成字典
                    list_len = list_len[0].split(':')
                    for s in range(0,length_list_len):
                        #将主键与表名以/分隔组合成为字典的key
                        key_name = '%s/%s' % (title,list_len[0].lstrip().rstrip())
                        dict_value[key_name]=list_len[s+1].lstrip().rstrip()
            else:
                length_list_len = len(length_list)
                for j in range(length_list_len):
                    sight_sum = sight_sum+int(length_list[j])
                    row_value = dut_info_split[i][sight:sight_sum]
                    sight = sight_sum
                    row_value = row_value.lstrip()
                    row_value = row_value.rstrip()
                    list_len.append(row_value)
                # if list_len[0]==value_title:
                #     # title = list_len
                Active_Interface.append(list_len[0])
                # elif list_len[0]!=value_title:
                #     #生成字典
                #     name_list.append(list_len[0])
                for s in range(1,length_list_len):
                    #将主键与表名以/分隔组合成为字典的key
                    key_name = '%s/%s' % (list_len[0],temp_title[s])
                    dict_value[key_name]=list_len[s]

            #将保存有主键值的列表以port_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value["Active_Interface"]=Active_Interface

        return dict_value
    def dut_get_show_protocolvlan(self,show_info):                          #函数名由锐捷提供
        ###########################################
        #value_title定义主键的id，即列表中的唯一值
        ###########################################
        value_title_1="ip"
        value_title_2="interface"
        value_title_3="profile"
        length_list = []
        dict_value={}
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)
        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        length = len(dut_info_split)
        # print(dut_info_split)
        ##########################################################################
        #判断--所在行，当--已空格分隔可以自动统计出列宽时自动判断列宽，并删除该行
        ##########################################################################
        length_list_dict = self.count_mulsymbol_lines(dut_info_split)
        # =========================================================================
        #判断--所在行，当--已空格分隔可以自动统计出列宽时自动判断列宽，并删除该行
        # =========================================================================
        dut_info_split = self.del_specific_symbol_lines(dut_info_split)
        # print dut_info_split
        ##########################################################################
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        ##########################################################################
        #length_list = [10,17,10,16,7,25]
        # length_list_len = len(length_list)
        length = len(dut_info_split)
        ######################################################################
        #创建空列表用于保存主键内容
        ######################################################################
        address_list = []
        interface_list = []
        profile_list = []
        ######################################################################
        #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        ######################################################################
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            if re.match('\s*ip',dut_info_split[i]) or re.match("^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)",dut_info_split[i]):
                length_list_len = length_list_dict[1]
                for j in range(len(length_list_len)):
                    sight_sum = sight_sum+int(length_list_len[j])
                    row_value = dut_info_split[i][sight:sight_sum]
                    sight = sight_sum
                    row_value = row_value.lstrip()
                    row_value = row_value.rstrip()
                    list_len.append(row_value)
            #获取表头，用于组合
                if list_len[0]==value_title_1:
                    title = list_len
                elif list_len[0]!=value_title_1:
                    #生成字典
                    address_list.append(list_len[0])
                    for s in range(1,len(length_list_len)):
                        #将主键与表名以/分隔组合成为字典的key
                        key_name = '%s/%s' % (list_len[0],title[s])
                        dict_value[key_name]=list_len[s]
                #将保存有主键值的列表以address_list为key放入字典（命名按照实际命名即xxxxx_list命名）
                    dict_value["address_list"]=address_list
            elif re.match('\s*interface',dut_info_split[i]) or re.match("^(Te|Fa|Gi)",dut_info_split[i]):
                length_list_len = length_list_dict[2]
                for j in range(len(length_list_len)):
                    sight_sum = sight_sum+int(length_list_len[j])
                    row_value = dut_info_split[i][sight:sight_sum]
                    sight = sight_sum
                    row_value = row_value.lstrip()
                    row_value = row_value.rstrip()
                    list_len.append(row_value)
            #获取表头，用于组合
                if list_len[0]==value_title_2:
                    title = list_len
                elif list_len[0]!=value_title_2:
                    #生成字典
                    interface_list.append(list_len[0])
                    for s in range(1,len(length_list_len)):
                        #将主键与表名以/分隔组合成为字典的key
                        key_name = '%s/%s' % (list_len[0],title[s])
                        dict_value[key_name]=list_len[s]
                #将保存有主键值的列表以address_list为key放入字典（命名按照实际命名即xxxxx_list命名）
                    dict_value["interface_list"]=interface_list
            else:
                length_list_len = length_list_dict[3]
                for j in range(len(length_list_len)):
                    sight_sum = sight_sum+int(length_list_len[j])
                    row_value = dut_info_split[i][sight:sight_sum]
                    sight = sight_sum
                    row_value = row_value.lstrip()
                    row_value = row_value.rstrip()
                    list_len.append(row_value)
            #获取表头，用于组合
                if re.match(value_title_3,list_len[0]):
                    title = list_len
                else:
                    #生成字典
                    if list_len[0]:
                        temp_interface_value = ''
                        temp_vlan_value = ''
                        profile_list.append(list_len[0])
                        temp_value = list_len[0]
                    for s in range(1,len(length_list_len)):
                        #将主键与表名以/分隔组合成为字典的key
                        key_name = '%s/%s' % (temp_value,title[s])
                        if list_len[s]:
                            if title[s] == 'interface':
                                if not temp_interface_value:
                                    dict_value[key_name] = list_len[s]
                                else:
                                    dict_value[key_name] = temp_interface_value + ',' + list_len[s]
                                temp_interface_value = list_len[s]
                            elif title[s] == 'vlan':
                                if not temp_vlan_value:
                                    dict_value[key_name] = list_len[s]
                                else:
                                    dict_value[key_name] = temp_vlan_value + ',' + list_len[s]
                                temp_vlan_value = list_len[s]
                            else:
                                dict_value[key_name]=list_len[s]
                #将保存有主键值的列表以address_list为key放入字典（命名按照实际命名即xxxxx_list命名）
                    dict_value["profile_list"]=profile_list
        return dict_value
    def dut_get_show_snmp(self,show_info):                          #函数名由锐捷提供
        """
        Function:show snmp回显解析函数
        CLI命令:show snmp
        回显信息示例:
Ruijie#show snmp
Chassis: 60FF60
0 SNMP packets input
        0 Bad SNMP version errors
        0 Unknown community name
        0 Illegal operation for community name supplied
        0 Encoding errors
        0 Number of requested variables
        0 Number of altered variables
        0 Get-request PDUs
        0 Get-next PDUs
        0 Set-request PDUs
        0 Drop PDUs
        0 UDP parse errors
0 SNMP packets output
        0 Too big errors (Maximum packet size 1472)
        0 No such name errors
        0 Bad values errors
        0 General errors
        0 Response PDUs
        0 Trap PDUs
SNMP global trap: disabled
SNMP logging: disabled
SNMP trap logging: disabled
SNMP agent: enabled
SNMP v1:  enabled
SNMP v2c: enabled
SNMP v3:  enabled
Ruijie#

        Returns:
{"SNMP logging": " disabled"
"SNMP v1": "  enabled"
"SNMP v3": "  enabled"
"SNMP packets output/No such name errors": "0"
"SNMP packets input": "0"
"SNMP packets input/Drop PDUs": "0"
"SNMP packets input/Number of requested variables": "0"
"SNMP packets input/Unknown community name": "0"
"SNMP packets output/Response PDUs": "0"
"SNMP packets output/General errors": "0"
"Chassis": " 60FF60"
"SNMP trap logging": " disabled"
"SNMP packets input/Encoding errors": "0"
"SNMP packets input/Bad SNMP version errors": "0"
"SNMP packets output/Bad values errors": "0"
"SNMP packets output": "0"
"SNMP packets output/Too big errors (Maximum packet size 1472)": "0"
"SNMP agent": " enabled"
"SNMP packets input/Set-request PDUs": "0"
"SNMP packets input/UDP parse errors": "0"
"SNMP packets input/Get-request PDUs": "0"
"SNMP packets input/Illegal operation for community name supplied": "0"
"SNMP packets input/Get-next PDUs": "0"
"SNMP packets input/Number of altered variables": "0"
"SNMP global trap": " disabled"
"SNMP_packets_type_list": ["input"
"output"], "SNMP v2c": " enabled"
"SNMP packets output/Trap PDUs": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show snmp | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        #==========================================
        #value_title定义主键的id，即列表中的唯一值
        #==========================================
        value_title_1="SNMP packets input"
        value_title_2="SNMP packets output"
        length_list = []
        dict_value={}

        #=======================================================================================
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #=======================================================================================
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)

        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        length = len(dut_info_split)

        # ======================================================================
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        # ======================================================================
        length_list = [70]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        # print dut_info_split

        # ======================================================================
        # #创建空列表用于保存主键内容
        # ======================================================================
        SNMP_packets_type_list = ['input', 'output']

        # ======================================================================
        # #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        # ======================================================================
        dict_value = self.get_independent_dic(dut_info_split)

        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            if dut_info_split[i].find(':') == -1:
                for j in range(length_list_len):
                    sight_sum = sight_sum+int(length_list[j])
                    row_value = dut_info_split[i][sight:sight_sum]
                    sight = sight_sum
                    row_value = row_value.lstrip()
                    row_value = row_value.rstrip()
                    list_len.append(row_value)
                #获取表头，用于组合
                if value_title_1 in list_len[0] or value_title_2 in list_len[0]:
                    if value_title_1 in list_len[0]:
                        pattern = pattern = re.compile(r'\s*(\d+)')
                        matchObj = pattern.findall(list_len[0])
                        dict_value[value_title_1] = matchObj[0]
                        title = value_title_1
                    else:
                        pattern = pattern = re.compile(r'\s*(\d+)')
                        matchObj = pattern.findall(list_len[0])
                        dict_value[value_title_2] = matchObj[0]
                        title = value_title_2
                else:
                    #生成字典
                    # name_list.append(list_len[0])
                    pattern = re.compile(r'\s*(\d+)')
                    matchObj = pattern.findall(list_len[0])
                    temp_index = list_len[0].index(matchObj[0])
                    key_name = '%s/%s' % (title,list_len[0][temp_index+len(matchObj[0])+1:])
                    dict_value[key_name]=matchObj[0]
                    # for s in range(1,length_list_len):
                    #     #将主键与表名以/分隔组合成为字典的key
                    #     key_name = '%s/%s' % (title,list_len[0][2:])
                    #     dict_value[key_name]=list_len[s]
                    #将保存有主键值的列表以port_list为key放入字典（命名按照实际命名即xxxxx_list命名）
        dict_value["SNMP_packets_type_list"]=SNMP_packets_type_list
        return dict_value
    def dut_get_show_ipv6_route_summary(self,show_info):          #函数名由锐捷提供
        """
        Function:show ipv6 route summary回显解析函数
        CLI命令:show ipv6 route summary
        回显信息示例:
Ruijie#show ipv6 route summary
IPv6 routing table name is -  Default(0) global scope - 3009 entries
IPv6 routing table default maximum-paths is 128
Local           4
Connected       5
Static          0
ND              3000
RIP             0
OSPF            0
ISIS            0
BGP             0
------------------------
Total           3009
RGOS_12_1

        Returns:
{"IPv6 routing table default maximum-paths": "128"
"ISIS": "0"
"OSPF": "0"
"RIP": "0"
"BGP": "0"
"Connected": "5"
"Static": "0"
"Total": "3009"
"Local": "4"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 route summary | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """
        dict_value = {}
        if "NORMAL" in show_info:
            show_info_list = self.dut_get_start_show_info(show_info)
            new_list = []
            for value in show_info_list:
                if re.match("Entries: (\d+), ((based on route prefixes|based on route nexthops))",value.strip()):
                    obj = re.match("Entries: (\d+), ((based on route prefixes|based on route nexthops))",value.strip())
                    dict_value[obj.group(2)] = obj.group(1)
                elif "NORMAL" in value and "TOTAL" in value:
                    value = "title_name  " + value
                elif re.match("(\S+)\s+\d+\s+\d+\s+\d+\s+(\d+)",value.strip()):
                    obj_2 = re.match("(\S+)\s+\d+\s+\d+\s+\d+\s+(\d+)",value.strip())
                    dict_value[obj_2.group(1)] = obj_2.group(2)
                new_list.append(value.strip())
            new_show = "\n".join(new_list)
            dict_value_2 = self.dut_show_autoget_blank_list(new_show,"title_name",split_one=1)
            return dict(dict_value.items()+dict_value_2.items())

        else:
            ###########################################
            #value_title定义主键的id，即列表中的唯一值
            ###########################################
            value_title="IPv6 routing table"
            length_list = []

            #########################################################################################
            #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
            #########################################################################################
            show_info_split = show_info.split("\n")
            if re.match(r'.*#.*',show_info_split[0]):
                show_info_split.remove(show_info_split[0])
            if re.match(r'.*show.*',show_info_split[0]):
                show_info_split.remove(show_info_split[0])
            if re.match(r'.*#.*',show_info_split[-1]):
                show_info_split.remove(show_info_split[-1])
            dut_info_split=show_info_split

            #=====================================================
            #删除dut_info_split中空字符所在行
            #=====================================================
            dut_info_split = self.del_space_lines(dut_info_split)
            ######################################################
            #使用正则匹配列表前的内容，并提取出写入字典，删除该行
            ######################################################
            for i in range(len(dut_info_split)):
                if re.match(r'IPv6 routing table default maximum-paths is \w+',dut_info_split[i]):
                    matchObj = re.match('(IPv6 routing table default maximum-paths)\s*is\s*(\d+)',dut_info_split[i])
                    dict_value[matchObj.group(1)]=matchObj.group(2)
                if 'Local' in dut_info_split[i]:
                    matchObj = re.match('(Local)\s*(\w+)',dut_info_split[i])
                    dict_value[matchObj.group(1)]=matchObj.group(2)
                if 'Connected' in dut_info_split[i]:
                    matchObj = re.match('(Connected)\s*(\w+)',dut_info_split[i])
                    dict_value[matchObj.group(1)]=matchObj.group(2)
                if 'Static' in dut_info_split[i]:
                    matchObj = re.match('(Static)\s*(\w+)',dut_info_split[i])
                    dict_value[matchObj.group(1)]=matchObj.group(2)
                if 'ND' in dut_info_split[i]:
                    matchObj = re.match('(ND)\s*(\w+)',dut_info_split[i])
                    dict_value[matchObj.group(1)]=matchObj.group(2)
                if 'SID' in dut_info_split[i]:
                    matchObj = re.match('(SID)\s*(\w+)',dut_info_split[i])
                    dict_value[matchObj.group(1)]=matchObj.group(2)
                if 'RIP' in dut_info_split[i]:
                    matchObj = re.match('(RIP)\s*(\w+)',dut_info_split[i])
                    dict_value[matchObj.group(1)]=matchObj.group(2)
                if 'OSPF' in dut_info_split[i]:
                    matchObj = re.match('(OSPF)\s*(\w+)',dut_info_split[i])
                    dict_value[matchObj.group(1)]=matchObj.group(2)
                if 'ISIS' in dut_info_split[i]:
                    matchObj = re.match('(ISIS)\s*(\w+)',dut_info_split[i])
                    dict_value[matchObj.group(1)]=matchObj.group(2)
                if 'BGP' in dut_info_split[i]:
                    matchObj = re.match('(BGP)\s*(\w+)',dut_info_split[i])
                    dict_value[matchObj.group(1)]=matchObj.group(2)
                if 'Total' in dut_info_split[i]:
                    matchObj = re.match('(Total)\s*(\w+)',dut_info_split[i])
                    dict_value[matchObj.group(1)]=matchObj.group(2)

            return dict_value
    def get_independent_dic(self, dut_info_rec):
        temp_dict = {}
        for i in range(len(dut_info_rec)):
            if dut_info_rec[i].find(':') != -1:
                temp_dict[dut_info_rec[i].split(':')[0]] = dut_info_rec[i].split(':')[1]
        return temp_dict
    def count_mulsymbol_lines(self, dut_info_rec):
        temp_dict = {}
        m = 0
        for i in range(len(dut_info_rec)):
            length_list = []
            if re.match(r'---+',dut_info_rec[i]):
                m += 1
                line_split = dut_info_rec[i].split(' ')
                # print line_split
                for line in line_split:
                    line_num=line.count('-')
                    line_num = str(line_num+1)
                    length_list.append(line_num)
                # show_info_split.remove(show_info_split[i])
                #修改最后一个列宽为32位，防止最后一列的参数值超出自动获取的列宽
                length_list[-1]=32
                temp_dict[m] =  length_list
        return temp_dict
    def dut_get_show_vrrp_packet_statistics(self,show_info):          #函数名由锐捷提供
        """
        Function:show vrrp packet statistics回显解析函数
        CLI命令:show vrrp packet statistics
        回显信息示例:
Ruijie#show vrrp packet statistics

Total
   InReceives: 0 packets, InOctets: 0, InErrors: 0 
   OutTransmits: 0, OutOctets: 0
Local 1
   InReceives: 0 packets, InOctets: 0, InErrors: 0 
   OutTransmits: 0, OutOctets: 0
Null 0
   InReceives: 0 packets, InOctets: 0, InErrors: 0 
   OutTransmits: 0, OutOctets: 0
Mgmt 0
   InReceives: 0 packets, InOctets: 0, InErrors: 0 
   OutTransmits: 0, OutOctets: 0
VMgmt 0
   InReceives: 0 packets, InOctets: 0, InErrors: 0 
   OutTransmits: 0, OutOctets: 0
WAVI 0
   InReceives: 0 packets, InOctets: 0, InErrors: 0 
   OutTransmits: 0, OutOctets: 0
Ruijie

        Returns:
{"VMgmt 0/OutTransmits": "0"
"WAVI 0/OutTransmits": "0"
"Null 0/InErrors": "0"
"Total/InReceives": "0 packets"
"VMgmt 0/InErrors": "0"
"WAVI 0/InOctets": "0"
"WAVI 0/OutOctets": "0"
"Total/InOctets": "0"
"Total/InErrors": "0"
"Mgmt 0/InReceives": "0 packets"
"Total/OutOctets": "0"
"Local 1/InErrors": "0"
"Local 1/OutTransmits": "0"
"Local 1/InOctets": "0"
"Null 0/InOctets": "0"
"WAVI 0/InReceives": "0 packets"
"VMgmt 0/OutOctets": "0"
"Mgmt 0/InOctets": "0"
"Mgmt 0/OutOctets": "0"
"Local 1/InReceives": "0 packets"
"Total/OutTransmits": "0"
"VMgmt 0/InOctets": "0"
"Null 0/OutOctets": "0"
"Null 0/OutTransmits": "0"
"Mgmt 0/OutTransmits": "0"
"Local 1/OutOctets": "0"
"Mgmt 0/InErrors": "0"
"WAVI 0/InErrors": "0"
"Null 0/InReceives": "0 packets"
"InterfacePort": ["Total"
"Local 1"
"Null 0"
"Mgmt 0"
"VMgmt 0"
"WAVI 0"], "VMgmt 0/InReceives": "0 packets"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show vrrp packet statistics | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        ###########################################
        #value_title定义主键的id，即列表中的唯一值
        ###########################################
        value_title="InterfacePort"
        length_list = []
        dict_value={}
        InterfacePort_list = []
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split

        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        ######################################################
        #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        ######################################################
        for i in range(len(dut_info_split)):
            if 'Total' in dut_info_split[i]:
                matchObj_1 = re.match(r'\s*(InReceives):\s*(\d+\s*\w+),\s*(InOctets):\s*(\d+),\s*(InErrors):\s*(\d+)',dut_info_split[i+1])
                matchObj_2 = re.match(r'\s*(OutTransmits):\s*(\d+),\s*(OutOctets):\s*(\d+)',dut_info_split[i+2])
                InterfacePort_list.append(dut_info_split[i])
                key_name_1_1 = '%s/%s' % ('Total',matchObj_1.group(1))
                key_name_1_2 = '%s/%s' % ('Total',matchObj_1.group(3))
                key_name_1_3 = '%s/%s' % ('Total',matchObj_1.group(5))
                dict_value[key_name_1_1]=matchObj_1.group(2)
                dict_value[key_name_1_2]=matchObj_1.group(4)
                dict_value[key_name_1_3]=matchObj_1.group(6)
                key_name_2_1 = '%s/%s' % ('Total',matchObj_2.group(1))
                key_name_2_2 = '%s/%s' % ('Total',matchObj_2.group(3))
                dict_value[key_name_2_1]=matchObj_2.group(2)
                dict_value[key_name_2_2]=matchObj_2.group(4)

            if 'TenGigabitEthernet' in dut_info_split[i] or 'Virtual-Template' in dut_info_split[i]\
                    or 'Virtual-ppp' in dut_info_split[i] or 'Tunnel' in dut_info_split[i] or 'Local' in dut_info_split[i]\
                    or 'Null' in dut_info_split[i] or 'VLAN' in dut_info_split[i] or 'Mgmt' in dut_info_split[i]\
                    or 'VMgmt' in dut_info_split[i] or 'WAVI' in dut_info_split[i]\
                    or 'Loopback' in dut_info_split[i] or 'GigabitEthernet' in dut_info_split[i]\
                    or 'FastEthernet' in dut_info_split[i]:
                matchObj_1 = re.match(r'\s*(InReceives):\s*(\d+\s*\w+),\s*(InOctets):\s*(\d+),\s*(InErrors):\s*(\d+)',dut_info_split[i+1])
                matchObj_2 = re.match(r'\s*(OutTransmits):\s*(\d+),\s*(OutOctets):\s*(\d+)',dut_info_split[i+2])
                InterfacePort_list.append(dut_info_split[i])
                key_name_1_1 = '%s/%s' % (dut_info_split[i],matchObj_1.group(1))
                key_name_1_2 = '%s/%s' % (dut_info_split[i],matchObj_1.group(3))
                key_name_1_3 = '%s/%s' % (dut_info_split[i],matchObj_1.group(5))
                dict_value[key_name_1_1]=matchObj_1.group(2)
                dict_value[key_name_1_2]=matchObj_1.group(4)
                dict_value[key_name_1_3]=matchObj_1.group(6)
                key_name_2_1 = '%s/%s' % (dut_info_split[i],matchObj_2.group(1))
                key_name_2_2 = '%s/%s' % (dut_info_split[i],matchObj_2.group(3))
                dict_value[key_name_2_1]=matchObj_2.group(2)
                dict_value[key_name_2_2]=matchObj_2.group(4)
        ######################################################################
        #添加表头列表
        ######################################################################
        dict_value['InterfacePort']=InterfacePort_list
        return dict_value
    def dut_get_show_cwmp_configuration(self,show_info):                          #函数名由锐捷提供
        """
        Function:show cwmp configuration回显解析函数
        CLI命令:show cwmp configuration
        回显信息示例:
mom#show cwmp configuration 
CWMP status                     : enable
ACS URL                         : http://172.18.34.157/service/tr069servlet
ACS username                    : USERB
ACS password                    : PASSWORDB
CPE URL                         : http://172.18.34.157/service/tr069servlet
CPE username                    : USERB
CPE password                    : PASSWORDB
CPE inform status               : enable
CPE inform interval             : 60s
CPE inform start-time           : 0:0:0 0 0 0
CPE wait timeout                : 100s
CPE download status             : disable
CPE upload status               : disable
CPE back up status              : enable
CPE back up delay time          : 30s
CPE STUN port-adaptive          : disable
CPE STUN probe nat agingtime    : disable
CPE STUN port                   : 3478
CPE STUN max-period             : 60s
CPE STUN min-period             : 20s

        Returns:
{"CPE inform status": "enable"
"CPE back up delay time": "30s"
"CPE STUN min-period": "20s"
"ACS username": "USERB"
"CPE inform interval": "60s"
"CPE STUN port": "3478"
"ACS password": "PASSWORDB"
"CPE inform start-time": "0:0:0 0 0 0"
"CPE username": "USERB"
"CPE STUN max-period": "60s"
"CPE STUN probe nat agingtime": "disable"
"CPE URL": "http://172.18.34.157/service/tr069servlet"
"ACS URL": "http://172.18.34.157/service/tr069servlet"
"CWMP status": "enable"
"CPE download status": "disable"
"CPE upload status": "disable"
"CPE back up status": "enable"
"CPE wait timeout": "100s"
"CPE STUN port-adaptive": "disable"
"CPE password": "PASSWORDB"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show cwmp configuration | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        str_arg ="show"
        return self.dut_get_show_info_analy_all_colon(show_info,str_arg)
    def dut_get_show_cwmp_status(self,show_info):                          #函数名由锐捷提供
        """
        Function:show cwmp status回显解析函数
        CLI命令:show cwmp status
        回显信息示例:
Ruijie# show cwmp status
CWMP status                     : disable
Session status                  : Idle
Last success session            : Unknown
Last success session time       : 
Last fail session               : Unknown
Last fail session time          : 
Session retry times             : 0
Ruijie#

        Returns:
{"Last fail session": "Unknown"
"Session retry times": "0"
"Last fail session time": ""
"Last success session": "Unknown"
"Last success session time": ""
"Session status": "Idle"
"CWMP status": "disable"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show cwmp status | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        str_arg ="show"
        return self.dut_get_show_info_analy_all_colon(show_info,str_arg)
    def dut_get_show_snmp_host(self,show_info):                          #函数名由锐捷提供
        #==========================================
        #value_title定义主键的id，即列表中的唯一值
        #==========================================
        value_title="Notification host"
        length_list = []
        dict_value={}

        #=======================================================================================
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #=======================================================================================
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)

        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        length = len(dut_info_split)
        # print(dut_info_split)

        # ======================================================================
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        # ======================================================================
        length_list = [60]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        # print dut_info_split

        # ======================================================================
        # #创建空列表用于保存主键内容
        # ======================================================================
        host_list = []
        suffix = 0
        index = 0
        # ======================================================================
        # #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        # ======================================================================
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            #获取表头，用于组合
            if value_title in list_len[0]:
                title = list_len[0].split(':')[1].lstrip().rstrip()
                host_list.append(title)
                index += 1
                if index > 1 and host_list[index-1] != host_list[index-2]:
                    suffix = 1
                else:
                    suffix += 1
            else:
                #生成字典
                list_len = list_len[0].split(':')
                for s in range(0,length_list_len):
                    #将主键与表名以/分隔组合成为字典的key
                    key_name = '%s/%s_%s' % (title, list_len[0].lstrip().rstrip(), suffix)
                    dict_value[key_name]=list_len[s+1].lstrip().rstrip()
            #将保存有主键值的列表以port_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value["host_list"]=host_list

        return dict_value
    def dut_get_show_ip_nat_translations(self,show_info):
        dict_value={}
        dict_value = self.dut_show_autoget_blank_list(show_info,"Inside global")
        for k,v in dict_value.items():
            if "_list" in k:
                dict_value["IpPort_list"] = v
        return dict_value
    def dut_get_show_ip_nat_translation(self,show_info):
        return self.dut_show_autoget_blank_list(show_info,"Inside local")
    def dut_get_show_tcp_statistics_bak(self,show_info):                          #函数名由锐捷提供
        """
        Function:show tcp statistics回显解析函数
        CLI命令:show tcp statistics
        回显信息示例:
Ruijie#show tcp statistics
TCP Packets
  Received: 0
  Errors  : 0(checksum: 0)
Three way handshake
  Request queue overflow: 0
  Accept backlog full: 0
  Web authentication limit per user: 0
  Failed to alloc memory for request sock: 0
  Failed to create open request child: 0
  SYN ACK retransmits: 0
  Timeouted requests: 0
  Web authentication:
    Limit per user: 0
    SYN ACK retransmission times-users: 0-0,1-0, 2-0,>=3-0
    Handshake fails: 0
Time-wait
  Time-wait bucket table overflow: 0
Ruijie#

        Returns:
{"Three way handshake/Accept backlog full": "0"
"  Web authentication/Limit per user": "0"
"Three way handshake/Timeouted requests": "0"
"TCP Packets/Received": "0"
"Three way handshake/Web authentication limit per user": "0"
"Three way handshake/SYN ACK retransmits": "0"
"  Web authentication/Handshake fails": "0"
"TCP Packets/Errors": "0(checksum: 0)"
"Statistics_list": ["TCP Packets"
"Three way handshake"
"  Web authentication"
"Time-wait"], "Three way handshake/Request queue overflow": "0"
"Three way handshake/Failed to alloc memory for request sock": "0"
"  Web authentication/SYN ACK retransmission times-users": "0-0,1-0, 2-0,>=3-0"
"Time-wait/Time-wait bucket table overflow": "0"
"Three way handshake/Failed to create open request child": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show tcp statistics | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        ###########################################
        #value_title定义主键的id，即列表中的唯一值
        ###########################################
        value_title="Statistics"
        Statistics_list = []
        dict_value={}
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        # length = len(dut_info_split)
        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        ######################################################
        #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        ######################################################
        for i in range(len(dut_info_split)):
            if 'TCP Packets' in dut_info_split[i]:
                matchObj_1 = re.match('\s*(Received)\s*:\s*(\w+)',dut_info_split[i+1])
                matchObj_2 = re.match('\s*(Errors)\s*:\s*(\S+\s*\S*)',dut_info_split[i+2])
                key_name_1 = '%s/%s' % (dut_info_split[i],matchObj_1.group(1))
                key_name_2 = '%s/%s' % (dut_info_split[i],matchObj_2.group(1))
                dict_value[key_name_1]=matchObj_1.group(2)
                dict_value[key_name_2]=matchObj_2.group(2)
                Statistics_list.append(dut_info_split[i])
            if 'Three way handshake' in dut_info_split[i]:
                matchObj_1 = re.match('\s*(Request queue overflow)\s*:\s*(\w+)',dut_info_split[i+1])
                matchObj_2 = re.match('\s*(Accept backlog full)\s*:\s*(\w+)',dut_info_split[i+2])
                matchObj_3 = re.match('\s*(Web authentication limit per user)\s*:\s*(\w+)',dut_info_split[i+3])
                matchObj_4 = re.match('\s*(Failed to alloc memory for request sock)\s*:\s*(\w+)',dut_info_split[i+4])
                matchObj_5 = re.match('\s*(Failed to create open request child)\s*:\s*(\w+)',dut_info_split[i+5])
                matchObj_6 = re.match('\s*(SYN ACK retransmits)\s*:\s*(\w+)',dut_info_split[i+6])
                matchObj_7 = re.match('\s*(Timeouted requests)\s*:\s*(\w+)',dut_info_split[i+7])
                key_name_1 = '%s/%s' % (dut_info_split[i],matchObj_1.group(1))
                key_name_2 = '%s/%s' % (dut_info_split[i],matchObj_2.group(1))
                key_name_3 = '%s/%s' % (dut_info_split[i],matchObj_3.group(1))
                key_name_4 = '%s/%s' % (dut_info_split[i],matchObj_4.group(1))
                key_name_5 = '%s/%s' % (dut_info_split[i],matchObj_5.group(1))
                key_name_6 = '%s/%s' % (dut_info_split[i],matchObj_6.group(1))
                key_name_7 = '%s/%s' % (dut_info_split[i],matchObj_7.group(1))
                dict_value[key_name_1]=matchObj_1.group(2)
                dict_value[key_name_2]=matchObj_2.group(2)
                dict_value[key_name_3]=matchObj_3.group(2)
                dict_value[key_name_4]=matchObj_4.group(2)
                dict_value[key_name_5]=matchObj_5.group(2)
                dict_value[key_name_6]=matchObj_6.group(2)
                dict_value[key_name_7]=matchObj_7.group(2)
                Statistics_list.append(dut_info_split[i])

            if 'Web authentication:' in dut_info_split[i]:
                dut_info_split[i]=dut_info_split[i].replace(':','')
                matchObj_1 = re.match('\s*(Limit per user)\s*:\s*(\w+)',dut_info_split[i+1])
                matchObj_2 = re.match('\s*(SYN ACK retransmission times-users)\s*:\s*(\S+\s*\S*\s*\S*)',dut_info_split[i+2])
                matchObj_3 = re.match('\s*(Handshake fails)\s*:\s*(\w+)',dut_info_split[i+3])
                key_name_1 = '%s/%s' % (dut_info_split[i],matchObj_1.group(1))
                key_name_2 = '%s/%s' % (dut_info_split[i],matchObj_2.group(1))
                key_name_3 = '%s/%s' % (dut_info_split[i],matchObj_3.group(1))
                dict_value[key_name_1]=matchObj_1.group(2)
                dict_value[key_name_2]=matchObj_2.group(2)
                dict_value[key_name_3]=matchObj_3.group(2)
                Statistics_list.append(dut_info_split[i])

            if 'Time-wait' in dut_info_split[i] and i <= 15:
                matchObj_1 = re.match(r'\s*(Time-wait bucket table overflow):\s*(\w+)',dut_info_split[i+1])
                key_name_1 = '%s/%s' % (dut_info_split[i],matchObj_1.group(1))
                dict_value[key_name_1]=matchObj_1.group(2)
                Statistics_list.append(dut_info_split[i])

        dict_value['Statistics_list'] = Statistics_list

        return dict_value
    def dut_get_show_mac_vlan_all(self,show_info):                          #函数名由锐捷提供
        """
        Function:show mac-vlan all回显解析函数
        CLI命令:show mac-vlan all
        回显信息示例:
Ruijie(config-if-TenGigabitEthernet 0/1)#show mac-vlan all 
The following MAC VLAN address exist:
S: Static   D: Dynamic
MAC ADDR        MASK            VLAN ID  PRIO  STATE
----------------------------------------------------
0010.0001.0000  ffff.ffff.0000  4094     0     S    
Total MAC VLAN address count: 1

        Returns:
{"0010.0001.0000/PRIO": "0"
"Total MAC VLAN address count": " 1"
"0010.0001.0000/VLAN ID": "4094"
"0010.0001.0000/MASK": "ffff.ffff.0000"
"0010.0001.0000/STATE": "S"
"MAC ADDR_list": ["0010.0001.0000"]}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mac-vlan all | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        ###########################################
        #value_title定义主键的id，即列表中的唯一值
        ###########################################
        value_title="MAC ADDR"
        length_list = []
        dict_value={}
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)
        ######################################################
        #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        ######################################################
        for i in range(length):
            if re.match(r'The following MAC VLAN address exist:',dut_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        for i in range(length):
            if re.match(r'S: Static   D: Dynamic',dut_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        for i in range(length):
            if re.match(r'Total MAC VLAN address count',dut_info_split[i]):
                matchObj = re.match('(Total MAC VLAN address count): (\d+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break

        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        # =========================================================================
        #判断--所在行，当--已空格分隔可以自动统计出列宽时自动判断列宽，并删除该行
        # =========================================================================
        dut_info_split = self.del_specific_symbol_lines(dut_info_split)
        ##########################################################################
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        ##########################################################################
        length_list = [16,16,9,6,32]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        ######################################################################
        #创建空列表用于保存主键内容
        ######################################################################
        mac_address_list = []
        ######################################################################
        #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        ######################################################################
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            #获取表头，用于组合
            if list_len[0]==value_title:
                title = list_len
            elif list_len[0]!=value_title:
                #生成字典
                mac_address_list.append(list_len[0])
                for s in range(1,length_list_len):
                    #将主键与表名以/分隔组合成为字典的key
                    key_name = '%s/%s' % (list_len[0],title[s])
                    dict_value[key_name]=list_len[s]
            #将保存有主键值的列表以address_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value["mac_address_list"]=mac_address_list
        return dict_value
    def dut_get_show_clink_statistic(self,show_info):                          #函数名由锐捷提供
        #==========================================
        #value_title定义主键的id，即列表中的唯一值
        #==========================================
        value_title="Name"
        length_list = []
        dict_value={}

        #=======================================================================================
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #=======================================================================================
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)

        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        length = len(dut_info_split)

        # ======================================================================
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        # ======================================================================
        length_list = [50]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        # ======================================================================
        # #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        # ======================================================================
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            #将主键与表名以/分隔组合成为字典的key
            key_name = list_len[0].split(":")[0].lstrip().rstrip()
            temp_value = list_len[0].split(":")[1].lstrip().rstrip()
            dict_value[key_name]=temp_value
            #将保存有主键值的列表以port_list为key放入字典（命名按照实际命名即xxxxx_list命名）
        return dict_value
    def dut_get_show_file_systems(self,show_info):                          #函数名由锐捷提供
        """
        Function:show file systems回显解析函数
        CLI命令:show file systems
        回显信息示例:
Ruijie#show file systems
  Size(KB)    Free(KB)      Type  Flags  Prefixes
         -           -   network     rw  tftp:
         -           -   network     rw  oob_tftp:
         -           -   network     rw  ftp:
         -           -   network     rw  oob_ftp:
         -           -   network     rw  http:
         -           -   network     rw  oobhttp:
    147734       48607      disk     rw  flash:
         -           -      disk     rw  usb0:
    528076      498413      disk     rw  tmp:
Ruijie#

        Returns:
{"tftp:/Size(KB)": "-"
"ftp:/Free(KB)": "-"
"oob_ftp:/Type": "network"
"ftp:/Size(KB)": "-"
"oobhttp:/Type": "network"
"usb0:/Type": "disk"
"usb0:/Free(KB)": "-"
"oob_tftp:/Size(KB)": "-"
"http:/Flags": "rw"
"usb0:/Size(KB)": "-"
"http:/Type": "network"
"tftp:/Flags": "rw"
"tmp:/Size(KB)": "528076"
"oob_ftp:/Flags": "rw"
"oob_ftp:/Size(KB)": "-"
"flash:/Flags": "rw"
"ftp:/Type": "network"
"oob_tftp:/Flags": "rw"
"usb0:/Flags": "rw"
"Prefixes_list": ["tftp:"
"oob_tftp:"
"ftp:"
"oob_ftp:"
"http:"
"oobhttp:"
"flash:"
"usb0:"
"tmp:"], "flash:/Type": "disk"
"tmp:/Free(KB)": "498413"
"http:/Size(KB)": "-"
"flash:/Free(KB)": "48607"
"tmp:/Type": "disk"
"http:/Free(KB)": "-"
"flash:/Size(KB)": "147734"
"tftp:/Type": "network"
"oob_tftp:/Free(KB)": "-"
"ftp:/Flags": "rw"
"tftp:/Free(KB)": "-"
"oobhttp:/Free(KB)": "-"
"oobhttp:/Size(KB)": "-"
"oobhttp:/Flags": "rw"
"oob_tftp:/Type": "network"
"oob_ftp:/Free(KB)": "-"
"tmp:/Flags": "rw"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show file systems | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        ###########################################
        #value_title定义主键的id，即列表中的唯一值
        ###########################################
        value_title="Prefixes"
        length_list = []
        dict_value={}
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)
        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        ##########################################################################
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        ##########################################################################
        length_list = [10,12,10,7,32]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        ######################################################################
        #创建空列表用于保存主键内容
        ######################################################################
        Prefixes_list = []
        ######################################################################
        #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        ######################################################################
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            #获取表头，用于组合
            if list_len[-1]==value_title:
                title = list_len
            elif list_len[-1]!=value_title:
                #生成字典
                Prefixes_list.append(list_len[-1])
                for s in range(0,length_list_len-1):
                    #将主键与表名以/分隔组合成为字典的key
                    key_name = '%s/%s' % (list_len[-1],title[s])
                    dict_value[key_name]=list_len[s]
            #将保存有主键值的列表以address_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value["Prefixes_list"]=Prefixes_list
        return dict_value
    def dut_get_show_spanning_tree_counters(self,show_info):                          #函数名由锐捷提供
        ###########################################
        #value_title定义主键的id，即列表中的唯一值
        ###########################################
        value_title_1="Port"
        value_title_2="MSTID"
        length_list = []
        dict_value={}
        main_title = []
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)
        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        ######################################################
        #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        ######################################################
        for i in range(length):
            if 'STP BPDU count' in dut_info_split[i]:
                main_title.append('STP BPDU count')
                dut_info_split.remove(dut_info_split[i])
                break
        for i in range(length):
            if 'STP TC or TCN count' in dut_info_split[i]:
                main_title.append('STP TC or TCN count')
                dut_info_split.remove(dut_info_split[i])
                break

        ##########################################################################
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        ##########################################################################
        length_list_1 = [34,13,32]
        length_list_2 = [12,33,13,32]
        # length_list_len = len(length_list)
        length = len(dut_info_split)
        ######################################################################
        #创建空列表用于保存主键内容
        ######################################################################
        Port_list = []
        ######################################################################
        #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        ######################################################################
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            if re.match('\s*Port',dut_info_split[i]) or re.match("\s*(Te|Fa|Gi)",dut_info_split[i]):
                length_list_len = len(length_list_1)
                for j in range(length_list_len):
                    sight_sum = sight_sum+int(length_list_1[j])
                    row_value = dut_info_split[i][sight:sight_sum]
                    sight = sight_sum
                    row_value = row_value.lstrip()
                    row_value = row_value.rstrip()
                    list_len.append(row_value)
                #获取表头，用于组合
                if list_len[0]==value_title_1:
                    title = list_len
                elif list_len[0]!=value_title_1:
                    #生成字典
                    Port_list.append(list_len[0])
                    for s in range(1,length_list_len):
                        #将主键与表名以/分隔组合成为字典的key
                        key_name = '%s/%s/%s' % (main_title[0],list_len[0],title[s])
                        dict_value[key_name]=list_len[s]
                #将保存有主键值的列表以address_list为key放入字典（命名按照实际命名即xxxxx_list命名）
                    dict_value["Port_list"]=Port_list
            else:
                length_list_len = len(length_list_2)
                for j in range(length_list_len):
                    sight_sum = sight_sum+int(length_list_2[j])
                    row_value = dut_info_split[i][sight:sight_sum]
                    sight = sight_sum
                    row_value = row_value.lstrip()
                    row_value = row_value.rstrip()
                    list_len.append(row_value)
                if list_len[0]==value_title_2:
                    temp_lsit = list_len
                    temp_lsit.pop(1)
                else:
                    #生成字典
                    temp_key_value = list_len.pop(1)
                    for s in range(len(list_len)):
                        #将主键与表名以/分隔组合成为字典的key
                        key_name = '%s/%s/%s' % (main_title[1],temp_key_value,temp_lsit[s])
                        dict_value[key_name]=list_len[s]
                # 将保存有主键值的列表以address_list为key放入字典（命名按照实际命名即xxxxx_list命名）
        return dict_value
    def dut_get_show_spanning_tree_summary(self,show_info):                          #函数名由锐捷提供
        """
        Function:show spanning-tree summary回显解析函数
        CLI命令:show spanning-tree summary
        回显信息示例:
57H_2012(config)#show spanning-tree summary 

Spanning tree enabled protocol stp
  Root ID    Priority    32768
             Address     5869.6ce0.5ac0
             this bridge is root
             Hello Time   2 sec  Forward Delay 15 sec  Max Age 20 sec

  Bridge ID  Priority    32768
             Address     5869.6ce0.5ac0
             Hello Time   2 sec  Forward Delay 15 sec  Max Age 20 sec

Interface        Role Sts Cost       Prio     OperEdge Type
---------------- ---- --- ---------- -------- -------- ----------------
Gi0/5            Desg FWD 20000      128      False    P2p                             
Gi0/6            Desg FWD 20000      128      False    P2p

        Returns:
{"Gi0/6/Role": "Desg"
"Gi0/6/Sts": "FWD"
"Gi0/5/Cost": "20000"
"Bridge ID/Address": "5869.6ce0.5ac0"
"Gi0/6/Cost": "20000"
"Gi0/6/Type": "P2p"
"Gi0/5/Prio": "128"
"Gi0/5/Sts": "FWD"
"Root ID/Address": "5869.6ce0.5ac0"
"Gi0/6/Prio": "128"
"Gi0/5/Role": "Desg"
"Root ID/Priority": "32768"
"Bridge ID/Priority": "32768"
"Gi0/5/Type": "P2p"
"Interface_list": ["Gi0/5"
"Gi0/6"], "Root ID/th": "bridge"
"Gi0/5/OperEdge": "False"
"Gi0/6/OperEdge": "False"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show spanning-tree summary | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        ###########################################
        #value_title定义主键的id，即列表中的唯一值
        ###########################################
        value_title_1="Interface"
        value_title_2="Root ID"
        value_title_3="Bridge ID"
        length_list = []
        dict_value={}
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)
        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        ######################################################
        #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        ######################################################
        for i in range(length):
            if 'Spanning tree enabled protocol mstp' in dut_info_split[i]:
                dut_info_split.remove(dut_info_split[i])
                break
        for i in range(length):
            if re.match(r'MST',dut_info_split[i]):
                dict_value[dut_info_split[i].split(':')[0].lstrip().rstrip()]=dut_info_split[i].split(':')[1].lstrip().rstrip()
                dut_info_split.remove(dut_info_split[i])
                break
        ##########################################################################
        #判断--所在行，当--已空格分隔可以自动统计出列宽时自动判断列宽，并删除该行
        ##########################################################################
        length = len(dut_info_split)
        for i in range(length):
            if re.match(r'---+',dut_info_split[i]):
                line_split = dut_info_split[i].split(' ')
                for line in line_split:
                    line_num=line.count('-')
                    line_num = str(line_num+1)
                    length_list.append(line_num)
                show_info_split.remove(show_info_split[i])
                #修改最后一个列宽为32位，防止最后一列的参数值超出自动获取的列宽
                length_list[-1]=32
                break
        ##########################################################################
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        ##########################################################################
        length_list_1 = [90]
        # length_list_len = len(length_list)
        length = len(dut_info_split)
        ######################################################################
        #创建空列表用于保存主键内容
        ######################################################################
        Port_list = []
        ######################################################################
        #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        ######################################################################
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            if re.match('\s*Interface',dut_info_split[i]) or re.match("\s*(Te|Fa|Gi)",dut_info_split[i]):
                length_list_len = len(length_list)
                for j in range(length_list_len):
                    sight_sum = sight_sum+int(length_list[j])
                    row_value = dut_info_split[i][sight:sight_sum]
                    sight = sight_sum
                    row_value = row_value.lstrip()
                    row_value = row_value.rstrip()
                    list_len.append(row_value)
                #获取表头，用于组合
                if list_len[0]==value_title_1:
                    title = list_len
                elif list_len[0]!=value_title_1:
                    #生成字典
                    Port_list.append(list_len[0])
                    for s in range(1,length_list_len):
                        #将主键与表名以/分隔组合成为字典的key
                        key_name = '%s/%s' % (list_len[0],title[s])
                        dict_value[key_name]=list_len[s]
                #将保存有主键值的列表以address_list为key放入字典（命名按照实际命名即xxxxx_list命名）
                    dict_value["Port_list"]=Port_list
            else:
                length_list_len = len(length_list_1)
                for j in range(length_list_len):
                    sight_sum = sight_sum+int(length_list_1[j])
                    row_value = dut_info_split[i][sight:sight_sum]
                    sight = sight_sum
                    row_value = row_value.lstrip()
                    row_value = row_value.rstrip()
                    list_len.append(row_value)
                if value_title_2 in list_len[0]:
                    title = value_title_2
                    matchObj = re.match('\s*Root ID\s+(Priority)\s+(\d+)',dut_info_split[i])
                    temp_key = '%s/%s' % (value_title_2, matchObj.group(1))
                    dict_value[temp_key]=matchObj.group(2)
                elif value_title_3 in list_len[0]:
                    title = value_title_3
                    matchObj = re.match('\s*Bridge ID\s+(Priority)\s+(\d+)',dut_info_split[i])
                    temp_key = '%s/%s' % (value_title_3, matchObj.group(1))
                    dict_value[temp_key]=matchObj.group(2)
                else:
                    #生成字典
                    if 'Address' in list_len[0]:
                        #将主键与表名以/分隔组合成为字典的key
                        key_name = '%s/%s' % (title,'Address')
                        dict_value[key_name]=list_len[0].split('Address')[1].lstrip().rstrip()
                    elif 'Hello' in list_len[0]:
                        # matchObj = re.match('Hello Time   2 sec  Forward Delay 15 sec  Max Age 20 sec')
                        matchObj = re.match('Hello Time\s+(\d+\s+sec)  Forward Delay (\d+ sec)  Max Age (\d+ sec)',list_len[0])
                        key_name = '%s/%s' % (title,'Hello Time')
                        dict_value[key_name]=matchObj.group(1)
                        key_name = '%s/%s' % (title,'Forward Delay')
                        dict_value[key_name]=matchObj.group(2)
                        key_name = '%s/%s' % (title,'Max Age')
                        dict_value[key_name]=matchObj.group(3)
                    elif 'this bridge' in list_len[0]:
                        key_name = '%s/%s' % (title,'this bridge is')
                        dict_value[key_name]='root'
                # 将保存有主键值的列表以address_list为key放入字典（命名按照实际命名即xxxxx_list命名）
        return dict_value
    def dut_get_show_ipv6_ospf_neighbor(self,show_info):          #函数名由锐捷提供
        """
        Function:show ipv6 ospf neighbor回显解析函数
        CLI命令:show ipv6 ospf neighbor
        回显信息示例:
Ruijie#show ipv6 ospf neighbor
OSPFv3 Process (1), 1 Neighbors, 1 is Full:
Neighbor ID     Pri   State            BFD State  Dead Time    Instance ID   Interface
192.168.2.1       1   Full/DR          -          00:00:35     0             VLAN 12                            

OSPFv3 Process (2), 1 Neighbors, 1 is Full:
Neighbor ID     Pri   State            BFD State  Dead Time    Instance ID   Interface
23.1.1.1          1   Full/DR          -          00:00:40     0             VLAN 13

        Returns:
{"OSPFv3 Process (1)/192.168.2.1/Instance ID": "0"
"OSPFv3 Process (2)/23.1.1.1/Pri": "1"
"OSPFv3 Process (1)/192.168.2.1/Pri": "1"
"OSPFv3 Process (2)/23.1.1.1/Instance ID": "0"
"OSPFv3 Process (2)/23.1.1.1/BFD State": "-"
"OSPFv3 Process (1)/192.168.2.1/Dead Time": "00:00:35"
"OSPFv3 Process (1)/192.168.2.1/State/2": "DR"
"OSPFv3 Process (1)/192.168.2.1/Interface": "VLAN 12"
"OSPFv3 Process (1)/192.168.2.1/State/1": "Full"
"OSPFv3 Process (2)/23.1.1.1/State/2": "DR"
"OSPFv3 Process (1)/192.168.2.1/State": "Full/DR"
"OSPFv3 Process (2)/Neighbor_list": ["23.1.1.1"], "OSPFv3 Process (1)/Neighbor_list": ["192.168.2.1"], "OSPFv3 Process (2)/23.1.1.1/State": "Full/DR"
"OSPFv3 Process (2)/23.1.1.1/Dead Time": "00:00:40"
"OSPFv3 Process (2)/23.1.1.1/Interface": "VLAN 13"
"OSPFv3 Process (2)/23.1.1.1/State/1": "Full"
"OSPFv3 Process (1)/192.168.2.1/BFD State": "-"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 ospf neighbor | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        ###########################################
        #value_title定义主键的id，即列表中的唯一值
        ###########################################
        value_title="Neighbor ID"
        length_list = []
        dict_value={}
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        # length = len(dut_info_split)
        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        ##########################################################################
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        ##########################################################################
        length_list_1 = [19,32]
        length_list_2 = [16,6,17,11,13,14,32]
        length_list_len_1 = len(length_list_1)
        length_list_len_2 = len(length_list_2)
        length = len(dut_info_split)
        ######################################################################
        #创建空列表用于保存主键内容
        ######################################################################
        process_list,patterm_list = [],[]
        title_begin,process_ls = '',''
        ######################################################################
        #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        ######################################################################
        count_list = []
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            if 'OSPFv3' in dut_info_split[i]:
                #每行中取值
                for j in range(length_list_len_1):
                    sight_sum = sight_sum+int(length_list_1[j])
                    row_value = dut_info_split[i][sight:sight_sum]
                    sight = sight_sum
                    row_value = row_value.lstrip()
                    row_value = row_value.rstrip()
                    list_len.append(row_value)
                    list_len[0] = list_len[0].replace(',','')
                    title_begin = list_len[0]
                    count_list.append(i)

            else:
                #每行中取值
                for j in range(length_list_len_2):
                    sight_sum = sight_sum+int(length_list_2[j])
                    row_value = dut_info_split[i][sight:sight_sum]
                    sight = sight_sum
                    row_value = row_value.lstrip()
                    row_value = row_value.rstrip()
                    list_len.append(row_value)

                if list_len[0]==value_title:
                    title = list_len
                elif list_len[0]!=value_title:
                    #生成表头
                    process_ls = '%s/%s' % (title_begin,list_len[0])
                    process_list.append(process_ls)
                    #生成字典
                    Neighbor_list = []
                    for s in range(0,length_list_len_2):
                        if s == 0:
                            key_name_3 = '%s/%s' % (title_begin,'Neighbor_list')
                            if key_name_3 not in dict_value.keys():
                                Neighbor_list.append(list_len[s])
                                dict_value[key_name_3] = Neighbor_list
                            else:
                                dict_value[key_name_3].append(list_len[s])
                        else:
                            #将主键与表名以/分隔组合成为字典的key
                            key_name_2 = '%s/%s' % (process_ls,title[s])
                            dict_value[key_name_2]=list_len[s]
                            if "State" == title[s]:
                                if "/" in list_len[s]:
                                    list_state = list_len[s].split("/")
                                    dict_value[key_name_2+"/"+"1"]=list_state[0]
                                    dict_value[key_name_2+"/"+"2"]=list_state[1]
        return dict_value
    def dut_get_show_ipv6_ospf_neighbo(self,show_info):
        """
        Function:show ipv6 ospf neighbor回显解析函数
        CLI命令:show ipv6 ospf neighbor
        回显信息示例:
Ruijie#show ipv6 ospf neighbor
OSPFv3 Process (1), 1 Neighbors, 1 is Full:
Neighbor ID     Pri   State            BFD State  Dead Time    Instance ID   Interface
192.168.2.1       1   Full/DR          -          00:00:35     0             VLAN 12                            

OSPFv3 Process (2), 1 Neighbors, 1 is Full:
Neighbor ID     Pri   State            BFD State  Dead Time    Instance ID   Interface
23.1.1.1          1   Full/DR          -          00:00:40     0             VLAN 13

        Returns:
{"OSPFv3 Process (1)/192.168.2.1/Instance ID": "0"
"OSPFv3 Process (2)/23.1.1.1/Pri": "1"
"OSPFv3 Process (1)/192.168.2.1/Pri": "1"
"OSPFv3 Process (2)/23.1.1.1/Instance ID": "0"
"OSPFv3 Process (2)/23.1.1.1/BFD State": "-"
"OSPFv3 Process (1)/192.168.2.1/Dead Time": "00:00:35"
"OSPFv3 Process (1)/192.168.2.1/State/2": "DR"
"OSPFv3 Process (1)/192.168.2.1/Interface": "VLAN 12"
"OSPFv3 Process (1)/192.168.2.1/State/1": "Full"
"OSPFv3 Process (2)/23.1.1.1/State/2": "DR"
"OSPFv3 Process (1)/192.168.2.1/State": "Full/DR"
"OSPFv3 Process (2)/Neighbor_list": ["23.1.1.1"], "OSPFv3 Process (1)/Neighbor_list": ["192.168.2.1"], "OSPFv3 Process (2)/23.1.1.1/State": "Full/DR"
"OSPFv3 Process (2)/23.1.1.1/Dead Time": "00:00:40"
"OSPFv3 Process (2)/23.1.1.1/Interface": "VLAN 13"
"OSPFv3 Process (2)/23.1.1.1/State/1": "Full"
"OSPFv3 Process (1)/192.168.2.1/BFD State": "-"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 ospf neighbor | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        value_title="Neighbor ID"     #需要变参的地方
        col_len_list = []
        #创建字典
        dict_value={}
        rol_title_list = []
        title_row =[]
        show_info_list_line = self.dut_get_start_show_info(show_info)
        length = len(show_info_list_line)
        for line_len_num in range(0,length):
            if "OSPFv3 Process" in show_info_list_line[line_len_num]:              #***********
                match = re.search("OSPFv3 Process(.*),(.*)Neighbors,(.*)is(.*)",show_info_list_line[line_len_num])
                dict_value["OSPFv3 Process"] = match.group(1).strip()
                dict_value["Neighbors"] = match.group(2).strip()
                dict_value["Full"] = match.group(3).strip()
        key0 =""
        for k in range(0,length):
            show_info_list_line[k] = show_info_list_line[k].strip()
            if "OSPFv3 Process" in show_info_list_line[k]:
                key0 = show_info_list_line[k].split(",")[0].strip()
                continue
            col_value_list = re.split(r'\s{2,}', show_info_list_line[k])
            title_col = col_value_list[-1]           #表头的列值位*****
            if value_title in col_value_list :
                title_row = col_value_list
            else:
                if col_value_list != "":
                    rol_title_list.append(title_col)
                    for s in range (0,len(col_value_list)-1):           #表头的列值位右边开始*****
                        key_name = '%s/%s'%(title_col,title_row[s])
                        dict_value[key0+"/"+key_name]=col_value_list[s]
                        if "State" in title_row[s]:
                            if "/" in col_value_list[s]:
                                list_state = col_value_list[s].split("/")
                                dict_value[key0+"/"+key_name+"/"+"1"]=list_state[0]
                                dict_value[key0+"/"+key_name+"/"+"2"]=list_state[1]
                    #key_name = '%s/%s' % (title_col, title_row[0])
                    #dict_value[key_name]=col_value_list[0]
        dict_value["Neighbor_ID_list"] = rol_title_list
        return dict_value
    def dut_get_show_ipv6_dhcp_server_hide_scc(self,show_info):                          #函数名由锐捷提供
        #==========================================
        #value_title定义主键的id，即列表中的唯一值
        #==========================================
        length_list = []
        dict_value={}

        #=======================================================================================
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #=======================================================================================
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)

        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        length = len(dut_info_split)

        # ======================================================================
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        # ======================================================================
        length_list = [50]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        # ======================================================================
        # #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        # ======================================================================
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            #将主键与表名以/分隔组合成为字典的key
            key_name = list_len[0].split(":")[0].lstrip().rstrip()
            temp_value = list_len[0].split(":")[1].lstrip().rstrip()
            dict_value[key_name]=temp_value
            #将保存有主键值的列表以port_list为key放入字典（命名按照实际命名即xxxxx_list命名）
        return dict_value
    def dut_get_show_isis_neighbors_detail(self,show_info):                          #函数名由锐捷提供
        #==========================================
        #value_title定义主键的id，即列表中的唯一值
        #==========================================
        value_title="System Id"
        length_list = []
        dict_value={}

        #=======================================================================================
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #=======================================================================================
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)

        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        length = len(dut_info_split)
        # print(dut_info_split)

        #======================================================
        # #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        #======================================================
        for i in range(length):
            if 'Area (' in dut_info_split[i]:
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'Adjacency ID' in dut_info_split[i]:
                dict_value[dut_info_split[i].split(':')[0].lstrip().rstrip()]=dut_info_split[i].split(':')[1].lstrip().rstrip()
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'Uptime' in dut_info_split[i]:
                index = dut_info_split[i].find(":")
                dict_value[dut_info_split[i][0:index].lstrip().rstrip()]=dut_info_split[i][index+1:].lstrip().rstrip()
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'Area Address(es)' in dut_info_split[i]:
                dict_value[dut_info_split[i].split(':')[0].lstrip().rstrip()]=dut_info_split[i].split(':')[1].lstrip().rstrip()
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'IP Address(es)' in dut_info_split[i]:
                dict_value[dut_info_split[i].split(':')[0].lstrip().rstrip()]=dut_info_split[i].split(':')[1].lstrip().rstrip()
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'Level-1 Protocols Supported' in dut_info_split[i]:
                dict_value[dut_info_split[i].split(':')[0].lstrip().rstrip()]=dut_info_split[i].split(':')[1].lstrip().rstrip()
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'Level-2 Protocols Supported' in dut_info_split[i]:
                dict_value[dut_info_split[i].split(':')[0].lstrip().rstrip()]=dut_info_split[i].split(':')[1].lstrip().rstrip()
                show_info_split.remove(show_info_split[i])
                break
        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        # ======================================================================
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        # ======================================================================
        length_list = [11,6,14,8,10,9,32]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        # ======================================================================
        # #创建空列表用于保存主键内容
        # ======================================================================
        group_list = []

        # ======================================================================
        # #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        # ======================================================================
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            #获取表头，用于组合
            if list_len[0]==value_title:
                title = list_len
            elif list_len[0]!=value_title:
                #生成字典
                temp_list_value = '%s/%s' % (list_len[0],list_len[1])
                group_list.append(temp_list_value)
                for s in range(2,length_list_len):
                    #将主键与表名以/分隔组合成为字典的key
                    key_name = '%s/%s/%s' % (list_len[0],list_len[1],title[s])
                    dict_value[key_name]=list_len[s]
            #将保存有主键值的列表以address_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value["group_list"]=group_list

        return dict_value
    def dut_get_show_ipv6_neighbors_statistics(self,show_info):                          #函数名由锐捷提供
        """
        Function:show ipv6 neighbors statistics回显解析函数
        CLI命令:show ipv6 neighbors statistics
        回显信息示例:
5848VAC#show ipv6 neighbors statistics 

Memory: 2912 bytes
Entries: 4
  Static: 0,Dynamic: 2,Local: 2
  Incomplete:0, Reachable:2, Stale:2, Delay:0, Probe:0
5848VAC#

        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 neighbors statistics | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        ###########################################
        #value_title定义主键的id，即列表中的唯一值
        ###########################################
        # value_title="Inside global"
        length_list = []
        dict_value={}
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        # length = len(dut_info_split)
        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        ######################################################
        #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        ######################################################
        for i in range(len(dut_info_split)):
            if 'Memory' in dut_info_split[i]:
                matchObj = re.match('(Memory):\s*(\d+\s*\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)

            if 'Entries' in dut_info_split[i]:
                matchObj = re.match('(Entries):\s*(.*)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2).strip()

            if re.match(r'\s*Static:\s*\d+,Dynamic:\s*\d+,Local:\s*\d+',dut_info_split[i]):
                matchObj = re.match('\s*(Static):\s*(\d+),(Dynamic):\s*(\d+),(Local):\s*(\d+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                dict_value[matchObj.group(3)]=matchObj.group(4)
                dict_value[matchObj.group(5)]=matchObj.group(6)

            if re.match(r'\s*Incomplete:\s*\d+,\s*Reachable:\s*\d+,\s*Stale:\s*\d+,\s*Delay:\s*\d+,\s*Probe:\s*\d+',dut_info_split[i]):
                matchObj = re.match('\s*(Incomplete):\s*(\d+),\s*(Reachable):\s*(\d+),\s*(Stale):\s*(\d+),\s*(Delay):\s*(\d+),\s*(Probe):\s*(\d+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                dict_value[matchObj.group(3)]=matchObj.group(4)
                dict_value[matchObj.group(5)]=matchObj.group(6)
                dict_value[matchObj.group(7)]=matchObj.group(8)
                dict_value[matchObj.group(9)]=matchObj.group(10)
        return dict_value
    def dut_get_debug_scc_macipv6(self,show_info):                          #函数名由锐捷提供
        ###########################################
        #value_title定义主键的id，即列表中的唯一值
        ###########################################
        value_title="MAC address"
        length_list = []
        dict_value={}
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        # length = len(dut_info_split)
        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        ######################################################
        #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        ######################################################
        ##########################################################################
        #判断--所在行，当--已空格分隔可以自动统计出列宽时自动判断列宽，并删除该行
        ##########################################################################
        length = len(dut_info_split)
        for i in range(length):
            if re.match(r'---+',dut_info_split[i]):
                line_split = dut_info_split[i].split(' ')
                for line in line_split:
                    line_num=line.count('-')
                    line_num = str(line_num+1)
                    length_list.append(line_num)
                show_info_split.remove(show_info_split[i])
                #修改最后一个列宽为32位，防止最后一列的参数值超出自动获取的列宽
                length_list[-1]=32
                break
        ##########################################################################
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        ##########################################################################
        #length_list = [10,17,10,16,7,25]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        ######################################################################
        #创建空列表用于保存主键内容
        ######################################################################
        address_list = []
        ######################################################################
        #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        ######################################################################
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            #获取表头，用于组合
            if list_len[0]==value_title:
                title = list_len
            elif list_len[0]!=value_title:
                #生成字典
                address_list.append(list_len[0])
                for s in range(1,length_list_len):
                    #将主键与表名以/分隔组合成为字典的key
                    key_name = '%s/%s' % (list_len[0],title[s])
                    dict_value[key_name]=list_len[s]
            #将保存有主键值的列表以address_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value["address_list"]=address_list
        return dict_value
    def dut_get_debug_scc_macipv6_summary(self,show_info):                          #函数名由锐捷提供
        ###########################################
        #value_title定义主键的id，即列表中的唯一值
        ###########################################
        # value_title="Number"
        # length_list = []
        summary_list = []
        dict_value={}
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)

        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        # length = len(dut_info_split)
        ######################################################
        #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        ######################################################
        for i in range(len(dut_info_split)):
            if re.match(r'All mac ipv6 info global cnt:\s*\d+',dut_info_split[i]):
                matchObj = re.match('(All mac ipv6 info global cnt):\s*(\d+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)

            if 'mac ipv6 statistic' in dut_info_split[i]:
                dut_info_split[i]=dut_info_split[i].replace(':','')
                matchObj_1 = re.match('\s*(mac ipv6 info add times):\s*(\d+)',dut_info_split[i+1])
                matchObj_2 = re.match('\s*(mac ipv6 info del times):\s*(\d+)',dut_info_split[i+2])
                matchObj_3 = re.match('\s*(mac ipv6 info same add times):\s*(\d+)',dut_info_split[i+3])
                matchObj_4 = re.match('\s*(mac ipv6 info same valid add times):\s*(\d+)',dut_info_split[i+4])
                matchObj_5 = re.match('\s*(mac ipv6 info same invalid add times):\s*(\d+)',dut_info_split[i+5])
                matchObj_6 = re.match('\s*(mac ipv6 info update times):\s*(\d+)',dut_info_split[i+6])
                matchObj_7 = re.match('\s*(mac ipv6 info update valid times):\s*(\d+)',dut_info_split[i+7])
                matchObj_8 = re.match('\s*(mac ipv6 info update invalid times):\s*(\d+)',dut_info_split[i+8])
                matchObj_9 = re.match('\s*(mac ipv6 info del ignore times):\s*(\d+)',dut_info_split[i+9])
                matchObj_10 = re.match('\s*(mac ipv6 info clear all times):\s*(\d+)',dut_info_split[i+10])
                key_name_1 = '%s/%s' % (dut_info_split[i],matchObj_1.group(1))
                key_name_2 = '%s/%s' % (dut_info_split[i],matchObj_2.group(1))
                key_name_3 = '%s/%s' % (dut_info_split[i],matchObj_3.group(1))
                key_name_4 = '%s/%s' % (dut_info_split[i],matchObj_4.group(1))
                key_name_5 = '%s/%s' % (dut_info_split[i],matchObj_5.group(1))
                key_name_6 = '%s/%s' % (dut_info_split[i],matchObj_6.group(1))
                key_name_7 = '%s/%s' % (dut_info_split[i],matchObj_7.group(1))
                key_name_8 = '%s/%s' % (dut_info_split[i],matchObj_8.group(1))
                key_name_9 = '%s/%s' % (dut_info_split[i],matchObj_9.group(1))
                key_name_10 = '%s/%s' % (dut_info_split[i],matchObj_10.group(1))
                summary_list.append(dut_info_split[i])
                dict_value[key_name_1]=matchObj_1.group(2)
                dict_value[key_name_2]=matchObj_2.group(2)
                dict_value[key_name_3]=matchObj_3.group(2)
                dict_value[key_name_4]=matchObj_4.group(2)
                dict_value[key_name_5]=matchObj_5.group(2)
                dict_value[key_name_6]=matchObj_6.group(2)
                dict_value[key_name_7]=matchObj_7.group(2)
                dict_value[key_name_8]=matchObj_8.group(2)
                dict_value[key_name_9]=matchObj_9.group(2)
                dict_value[key_name_10]=matchObj_10.group(2)

        #将保存有主键值的列表以summary_list为key放入字典（命名按照实际命名即xxxxx_list命名）
        dict_value["summary_list"]=summary_list
        return dict_value
    def dut_get_show_ip_igmp_snooping(self,show_info):                          #函数名由锐捷提供
        #==========================================
        #value_title定义主键的id，即列表中的唯一值
        #==========================================
        value_title="vlan"
        length_list = []
        dict_value={}

        #=======================================================================================
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #=======================================================================================
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)

        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        length = len(dut_info_split)
        # print(dut_info_split)

        #======================================================
        # #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        #======================================================
        for i in range(length):
            if 'IGMP Snooping running mode' in dut_info_split[i]:
                dict_value[dut_info_split[i].split(':')[0].lstrip().rstrip()]=dut_info_split[i].split(':')[1].lstrip().rstrip()
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'IGMP Snooping L2-entry-limit' in dut_info_split[i]:
                dict_value[dut_info_split[i].split(':')[0].lstrip().rstrip()]=dut_info_split[i].split(':')[1].lstrip().rstrip()
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'Source port check' in dut_info_split[i]:
                dict_value[dut_info_split[i].split(':')[0].lstrip().rstrip()]=dut_info_split[i].split(':')[1].lstrip().rstrip()
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'Source ip check' in dut_info_split[i]:
                dict_value[dut_info_split[i].split(':')[0].lstrip().rstrip()]=dut_info_split[i].split(':')[1].lstrip().rstrip()
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'IGMP Fast-Leave' in dut_info_split[i]:
                dict_value[dut_info_split[i].split(':')[0].lstrip().rstrip()]=dut_info_split[i].split(':')[1].lstrip().rstrip()
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'IGMP Report suppress' in dut_info_split[i]:
                dict_value[dut_info_split[i].split(':')[0].lstrip().rstrip()]=dut_info_split[i].split(':')[1].lstrip().rstrip()
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'IGMP Global Querier' in dut_info_split[i]:
                dict_value[dut_info_split[i].split(':')[0].lstrip().rstrip()]=dut_info_split[i].split(':')[1].lstrip().rstrip()
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'IGMP Preview' in dut_info_split[i]:
                dict_value[dut_info_split[i].split(':')[0].lstrip().rstrip()]=dut_info_split[i].split(':')[1].lstrip().rstrip()
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'IGMP Tunnel' in dut_info_split[i]:
                dict_value[dut_info_split[i].split(':')[0].lstrip().rstrip()]=dut_info_split[i].split(':')[1].lstrip().rstrip()
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'IGMP Preview group aging time' in dut_info_split[i]:
                dict_value[dut_info_split[i].split(':')[0].lstrip().rstrip()]=dut_info_split[i].split(':')[1].lstrip().rstrip()
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'Dynamic Mroute Aging Time' in dut_info_split[i]:
                dict_value[dut_info_split[i].split(':')[0].lstrip().rstrip()]=dut_info_split[i].split(':')[1].lstrip().rstrip()
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'Dynamic Host Aging Time' in dut_info_split[i]:
                dict_value[dut_info_split[i].split(':')[0].lstrip().rstrip()]=dut_info_split[i].split(':')[1].lstrip().rstrip()
                show_info_split.remove(show_info_split[i])
                break
        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        # =========================================================================
        #判断--所在行，当--已空格分隔可以自动统计出列宽时自动判断列宽，并删除该行
        # =========================================================================
        dut_info_split = self.del_specific_symbol_lines(dut_info_split)
        # ======================================================================
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        # ======================================================================
        length_list = [60]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        # print dut_info_split

        # ======================================================================
        # #创建空列表用于保存主键内容
        # ======================================================================
        vlan_list = []

        # ======================================================================
        # #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        # ======================================================================
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            #获取表头，用于组合
            if re.match(value_title, list_len[0]):
                matchObj = re.match(r'^vlan (\d+)', list_len[0])
                title = list_len[0]
                vlan_list.append(matchObj.group(1))
            else:
                #生成字典
                list_len = list_len[0].split(':')
                for s in range(0,length_list_len):
                    #将主键与表名以/分隔组合成为字典的key
                    key_name = '%s/%s' % (title,list_len[0].lstrip().rstrip())
                    dict_value[key_name]=list_len[s+1].lstrip().rstrip()
            #将保存有主键值的列表以port_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value["vlan_list"]=vlan_list

        return dict_value
    def dut_get_show_isis_counter(self,show_info):                          #函数名由锐捷提供
        #==========================================
        #value_title定义主键的id，即列表中的唯一值
        #==========================================
        length_list = []
        dict_value={}

        #=======================================================================================
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #=======================================================================================
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)

        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        length = len(dut_info_split)
        ######################################################
        #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        ######################################################
        for i in range(length):
            if re.match(r'Area ',dut_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        # ======================================================================
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        # ======================================================================
        length_list = [50]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        ######################################################################
        #创建空列表用于保存主键内容
        ######################################################################
        level_list = []
        # ======================================================================
        # #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        # ======================================================================
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            if 'IS-IS Level' in list_len[0]:
                matchObj = re.match('IS-IS (\S+) isisSystemCounterEntry',dut_info_split[i])
                title = list_len[0].split(":")[0].lstrip().rstrip()
                level_list.append(matchObj.group(1))
            else:
            #将主键与表名以/分隔组合成为字典的key
                key_name = '%s/%s' % (title,list_len[0].split(":")[0].lstrip().rstrip())
                temp_value = list_len[0].split(":")[1].lstrip().rstrip()
                dict_value[key_name]=temp_value
            #将保存有主键值的列表以port_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value['level_list'] = level_list
        return dict_value
    def dut_get_show_ip_igmp_snooping_statistics(self,show_info):                          #函数名由锐捷提供
        """
        Function:show ip igmp snooping statistics回显解析函数
        CLI命令:show ip igmp snooping statistics
        回显信息示例:
Ruijie#show ip igmp snooping statistics

Current number of Gda-table entries: 0
Configured Statistics database limit: 64000
Current number of IGMP Query packet received: 0
Current number of IGMPv1/v2 Report packet received: 0
Current number of IGMPv3 Report packet received: 0
Current number of Leave packet received: 0
Current number of PIM packet received: 0
Current number of DVMRP packet received: 0
Current number of SQL Exec waited: 0

-------------------------------------------------------------------------------
Ruijie#

        Returns:
{"Current number of SQL Exec waited": "0"
"Current number of Leave packet received": "0"
"Current number of Gda-table entries": "0"
"Current number of DVMRP packet received": "0"
"Configured Statistics database limit": "64000"
"Current number of IGMPv3 Report packet received": "0"
"Current number of IGMPv1/v2 Report packet received": "0"
"Current number of PIM packet received": "0"
"Current number of IGMP Query packet received": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip igmp snooping statistics | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        #==========================================
        #value_title定义主键的id，即列表中的唯一值
        #==========================================
        value_title="GROUP"
        length_list = []
        dict_value={}

        #=======================================================================================
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #=======================================================================================
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)

        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        length = len(dut_info_split)
        # print(dut_info_split)

        #======================================================
        # #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        #======================================================
        for i in range(length):
            if 'Current number of Gda-table entries' in dut_info_split[i]:
                dict_value[dut_info_split[i].split(':')[0].lstrip().rstrip()]=dut_info_split[i].split(':')[1].lstrip().rstrip()
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'Configured Statistics database limit' in dut_info_split[i]:
                dict_value[dut_info_split[i].split(':')[0].lstrip().rstrip()]=dut_info_split[i].split(':')[1].lstrip().rstrip()
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'Current number of IGMP Query packet received' in dut_info_split[i]:
                dict_value[dut_info_split[i].split(':')[0].lstrip().rstrip()]=dut_info_split[i].split(':')[1].lstrip().rstrip()
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'Current number of IGMPv1/v2 Report packet received' in dut_info_split[i]:
                dict_value[dut_info_split[i].split(':')[0].lstrip().rstrip()]=dut_info_split[i].split(':')[1].lstrip().rstrip()
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'Current number of IGMPv3 Report packet received' in dut_info_split[i]:
                dict_value[dut_info_split[i].split(':')[0].lstrip().rstrip()]=dut_info_split[i].split(':')[1].lstrip().rstrip()
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'Current number of Leave packet received' in dut_info_split[i]:
                dict_value[dut_info_split[i].split(':')[0].lstrip().rstrip()]=dut_info_split[i].split(':')[1].lstrip().rstrip()
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'Current number of PIM packet received' in dut_info_split[i]:
                dict_value[dut_info_split[i].split(':')[0].lstrip().rstrip()]=dut_info_split[i].split(':')[1].lstrip().rstrip()
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'Current number of DVMRP packet received' in dut_info_split[i]:
                dict_value[dut_info_split[i].split(':')[0].lstrip().rstrip()]=dut_info_split[i].split(':')[1].lstrip().rstrip()
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'Current number of SQL Exec waited' in dut_info_split[i]:
                dict_value[dut_info_split[i].split(':')[0].lstrip().rstrip()]=dut_info_split[i].split(':')[1].lstrip().rstrip()
                show_info_split.remove(show_info_split[i])
                break
        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        ##########################################################################
        #判断--所在行，当--已空格分隔可以自动统计出列宽时自动判断列宽，并删除该行
        ##########################################################################
        length = len(dut_info_split)
        for i in range(length):
            if re.match(r'---+',dut_info_split[i]):
                line_split = dut_info_split[i].split(' ')
                for line in line_split:
                    line_num=line.count('-')
                    line_num = str(line_num+1)
                    length_list.append(line_num)
                show_info_split.remove(show_info_split[i])
                #修改最后一个列宽为32位，防止最后一列的参数值超出自动获取的列宽
                length_list[-1]=32
                break
        # ======================================================================
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        # ======================================================================
        # length_list = [60]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        # ======================================================================
        # #创建空列表用于保存主键内容
        # ======================================================================
        group_list = []

        # ======================================================================
        # #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        # ======================================================================
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []

            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            #获取表头，用于组合
            if value_title in list_len[0]:
                temp_list = list_len
            elif  not list_len[0]:
                for i in range(length_list_len):
                    if list_len[i]:
                        temp_list[i] = temp_list[i] + ' ' + list_len[i]
            else:
                #生成字典
                group_list.append(list_len[0])
                for s in range(1,length_list_len):
                    #将主键与表名以/分隔组合成为字典的key
                    key_name = '%s/%s' % (list_len[0],temp_list[s])
                    dict_value[key_name]=list_len[s]
            #将保存有主键值的列表以port_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value["group_list"]=group_list

        return dict_value
    def dut_get_show_isis_topology(self,show_info):                          #函数名由锐捷提供
        #==========================================
        #value_title定义主键的id，即列表中的唯一值
        #==========================================
        value_title="System Id"
        length_list = []
        dict_value={}

        #=======================================================================================
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #=======================================================================================
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)

        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        length = len(dut_info_split)
        # print(dut_info_split)

        #======================================================
        # #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        #======================================================
        for i in range(length):
            if 'Area (' in dut_info_split[i]:
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'IS-IS paths' in dut_info_split[i]:
                show_info_split.remove(show_info_split[i])
                break
        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        # ======================================================================
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        # ======================================================================
        length_list = [13,9,11,19,32]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        # ======================================================================
        # #创建空列表用于保存主键内容
        # ======================================================================
        system_id_list = []
        #print dut_info_split
        # ======================================================================
        # #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        # ======================================================================
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            #获取表头，用于组合
            if list_len[0]==value_title:
                title = list_len
            elif list_len[0]!=value_title:
                #生成字典
                system_id_list.append(list_len[0])
                for s in range(1,length_list_len):
                    #将主键与表名以/分隔组合成为字典的key
                    key_name = '%s/%s' % (list_len[0],title[s])
                    dict_value[key_name]=list_len[s]
            #将保存有主键值的列表以address_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value["system_id_list"]=system_id_list

        return dict_value
    def dut_get_show_ipv6_interface_vlan_num_rainfo(self,show_info):                          #函数名由锐捷提供
        ###########################################
        #value_title定义主键的id，即列表中的唯一值
        ###########################################
        # value_title="MAC address"
        length_list = []
        dict_value={}
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        # length = len(dut_info_split)
        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        ######################################################
        ######################################################
        #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        ######################################################
        for i in range(len(dut_info_split)):
            if re.match(r'VLAN\s*\d+:\s*\w+',dut_info_split[i]):
                matchObj = re.match('(VLAN\s*\d+):\s*(\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'\s*RA timer is\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(RA timer) is\s*(\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'\s*waits:\s*\d+, initcount:\s*\d+',dut_info_split[i]):
                matchObj = re.match('\s*(waits):\s*(\d+),\s*(initcount):\s*(\d+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                dict_value[matchObj.group(3)]=matchObj.group(4)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'\s*statistics:\s*RA\(\S+\):\s*\S+,\s*RS\(input\):\s*\d+',dut_info_split[i]):
                matchObj = re.match('\s*(statistics):\s*(RA\(\S+\)):\s*(\S+),\s*(RS\(input\)):\s*(\d+)',dut_info_split[i])
                key_name = '%s/%s' % (matchObj.group(1),matchObj.group(2))
                dict_value[key_name]=matchObj.group(3)
                dict_value[matchObj.group(4)]=matchObj.group(5)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'\s*Link-layer address:\s*\S+',dut_info_split[i]):
                matchObj = re.match('\s*(Link-layer address):\s*(\S+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'\s*Physical MTU:\s*\d+',dut_info_split[i]):
                matchObj = re.match('\s*(Physical MTU):\s*(\d+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'\s*ND router advertisements live for \d+\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(ND router advertisements live) for (\d+\s*\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'\s*ND router advertisements are sent every \d+\s*\w+\S+',dut_info_split[i]):
                matchObj = re.match('\s*(ND router advertisements are sent every)\s*(\d+\s*\w+\S+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'\s*Flags:\s*\w+, Adv MTU:\s*\d+',dut_info_split[i]):
                matchObj = re.match('\s*(Flags):\s*(\w+),\s*(Adv MTU):\s*(\d+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                dict_value[matchObj.group(3)]=matchObj.group(4)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'\s*ND advertised reachable time is \d+\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(ND advertised reachable time) is \s*(\d+\s*\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'\s*ND advertised retransmit time is \d+\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(ND advertised retransmit time) is \s*(\d+\s*\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'\s*ND advertised CurHopLimit is \d+',dut_info_split[i]):
                matchObj = re.match('\s*(ND advertised CurHopLimit) is \s*(\d+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        #print dut_info_split
        for i in range(len(dut_info_split)):
            if re.match(r'\s*Prefixes:\s*<\w+:\s*\d+>',dut_info_split[i]):
                matchObj = re.match('\s*(Prefixes:\s*<\w+:\s*\d+>)',dut_info_split[i])
                index = i+1
                value = ''.join(dut_info_split[index:])
                # value = value.lstrip()
                value = value.replace('(','')
                value = value.replace(')','')
                value = value.replace('    ','--')
                value = value.replace('--','',1)
                dict_value[matchObj.group(1)]=value
                break
        return dict_value
    def dut_get_show_ipv6_packet_statistics_total(self,show_info):                          #函数名由锐捷提供
        """
        Function:show ipv6 packet statistics total回显解析函数
        CLI命令:show ipv6 packet statistics total
        回显信息示例:
Ruijie#show ipv6 packet statistics total
Total
  Received 0 packets, 0 bytes
    Unicast:0,Multicast:0
    Discards:0
      HdrErrors:0(HoplimitExceeded:0,Others:0)
      NoRoutes:0
      Others:0
  Sent 0 packets, 0 bytes  
    Unicast:0,Multicast:0
Ruijie#

        Returns:
{"Received/Others": "0"
"statistics_list": ["Received"
"Sent"], "Sent/Unicast": "0"
"Received/packets": "0"
"Received/HdrErrors": "0(HoplimitExceeded:0,Others:0)"
"Received/NoRoutes": "0"
"Received/bytes": "0"
"Received/Multicast": "0"
"Sent/packets": "0"
"Sent/bytes": "0"
"Sent/Multicast": "0"
"Received/Unicast": "0"
"Received/Discards": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 packet statistics total | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        ###########################################
        #value_title定义主键的id，即列表中的唯一值
        ###########################################
        # value_title="Number"
        # length_list = []
        statistics_list = []
        dict_value={}
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)

        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        # length = len(dut_info_split)
        ######################################################
        #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        ######################################################
        for i in range(len(dut_info_split)):
            if re.match(r'\s*Received\s*\d+\s*\w+,\s*\d+\s*\w+',dut_info_split[i]):
                matchObj_1 = re.match('\s*(Received)\s*(\d+)\s*(\w+),\s*(\d+)\s*(\w+)',dut_info_split[i])
                matchObj_2 = re.match('\s*(Unicast):(\d+),(Multicast):(\d+)',dut_info_split[i+1])
                matchObj_3 = re.match('\s*(Discards):(\d+)',dut_info_split[i+2])
                matchObj_4 = re.match('\s*(HdrErrors):(\S+\(\S+\))',dut_info_split[i+3])
                matchObj_5 = re.match('\s*(NoRoutes):(\d+)',dut_info_split[i+4])
                matchObj_6 = re.match('\s*(Others):(\d+)',dut_info_split[i+5])

                key_name_1 = '%s/%s' % (matchObj_1.group(1),matchObj_1.group(3))
                key_name_2 = '%s/%s' % (matchObj_1.group(1),matchObj_1.group(5))
                key_name_3 = '%s/%s' % (matchObj_1.group(1),matchObj_2.group(1))
                key_name_4 = '%s/%s' % (matchObj_1.group(1),matchObj_2.group(3))
                key_name_5 = '%s/%s' % (matchObj_1.group(1),matchObj_3.group(1))
                key_name_6 = '%s/%s' % (matchObj_1.group(1),matchObj_4.group(1))
                key_name_7 = '%s/%s' % (matchObj_1.group(1),matchObj_5.group(1))
                key_name_8 = '%s/%s' % (matchObj_1.group(1),matchObj_6.group(1))
                dict_value[key_name_1]=matchObj_1.group(2)
                dict_value[key_name_2]=matchObj_1.group(4)
                dict_value[key_name_3]=matchObj_2.group(2)
                dict_value[key_name_4]=matchObj_2.group(4)
                dict_value[key_name_5]=matchObj_3.group(2)
                dict_value[key_name_6]=matchObj_4.group(2)
                dict_value[key_name_7]=matchObj_5.group(2)
                dict_value[key_name_8]=matchObj_6.group(2)
                statistics_list.append(matchObj_1.group(1))

        for i in range(len(dut_info_split)):
            if re.match(r'\s*Sent\s*\d+\s*\w+,\s*\d+\s*\w+',dut_info_split[i]):
                matchObj_1 = re.match('\s*(Sent)\s*(\d+)\s*(\w+),\s*(\d+)\s*(\w+)',dut_info_split[i])
                matchObj_2 = re.match('\s*(Unicast):(\d+),(Multicast):(\d+)',dut_info_split[i+1])
                key_name_1 = '%s/%s' % (matchObj_1.group(1),matchObj_1.group(3))
                key_name_2 = '%s/%s' % (matchObj_1.group(1),matchObj_1.group(5))
                key_name_3 = '%s/%s' % (matchObj_1.group(1),matchObj_2.group(1))
                key_name_4 = '%s/%s' % (matchObj_1.group(1),matchObj_2.group(3))
                dict_value[key_name_1]=matchObj_1.group(2)
                dict_value[key_name_2]=matchObj_1.group(4)
                dict_value[key_name_3]=matchObj_2.group(2)
                dict_value[key_name_4]=matchObj_2.group(4)
                statistics_list.append(matchObj_1.group(1))

        #将保存有主键值的列表以statistics_list为key放入字典（命名按照实际命名即xxxxx_list命名）
        dict_value["statistics_list"]=statistics_list
        return dict_value
    def dut_get_show_dot11_ratelimit_wlan(self,show_info):                          #函数名由锐捷提供
        ###########################################
        #value_title定义主键的id，即列表中的唯一值
        ###########################################
        value_title="Wlan Id"
        length_list = []
        dict_value={}
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)
        ######################################################
        #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        ######################################################
        for i in range(length):
            if re.match(r'Current user num: 1, Online 1',dut_info_split[i]):
                matchObj = re.match('(Current user num): (\d+), (Online) (\d+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                dict_value[matchObj.group(3)]=matchObj.group(4)
                show_info_split.remove(show_info_split[i])
                break
        ##########################################################################
        #判断--所在行，当--已空格分隔可以自动统计出列宽时自动判断列宽，并删除该行
        ##########################################################################
        length = len(dut_info_split)
        for i in range(length):
            if re.match(r'---+',dut_info_split[i]):
                line_split = dut_info_split[i].split(' ')
                for line in line_split:
                    line_num=line.count('-')
                    line_num = str(line_num+1)
                    length_list.append(line_num)
                show_info_split.remove(show_info_split[i])
                #修改最后一个列宽为32位，防止最后一列的参数值超出自动获取的列宽
                length_list[-1]=32
                break
        ##########################################################################
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        ##########################################################################
        #length_list = [10,17,10,16,7,25]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        ######################################################################
        #创建空列表用于保存主键内容
        ######################################################################
        Wlan_Id_list = []
        ######################################################################
        #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        ######################################################################
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            #获取表头，用于组合
            if list_len[0]==value_title:
                title = list_len
            elif list_len[0]!=value_title:
                #生成字典
                Wlan_Id_list.append(list_len[0])
                for s in range(1,length_list_len):
                    #将主键与表名以/分隔组合成为字典的key
                    key_name = '%s/%s' % (list_len[0],title[s])
                    dict_value[key_name]=list_len[s]
            #将保存有主键值的列表以address_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value["Wlan_Id_list"]=Wlan_Id_list
        return dict_value
    def dut_get_show_arp_timeout(self,show_info):                          #函数名由锐捷提供
        """
        Function:show arp timeout回显解析函数
        CLI命令:show arp timeout
        回显信息示例:
RGOS_12_1#show arp timeout
Interface                               arp timeout(sec)
----------------------                  ----------------
GigabitEthernet 0/0                     0

        Returns:
{"GigabitEthernet 0/0/": ""
"Interface_list": ["GigabitEthernet 0/0"], "GigabitEthernet 0/0/arp timeout(sec)": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show arp timeout | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        ###########################################
        #value_title定义主键的id，即列表中的唯一值
        ###########################################
        value_title="Interface"
        length_list = []
        dict_value={}
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)
        ######################################################
        #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        ######################################################
        for i in range(length):
            if re.match(r'Current user num: 1, Online 1',dut_info_split[i]):
                matchObj = re.match('(Current user num): (\d+), (Online) (\d+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                dict_value[matchObj.group(3)]=matchObj.group(4)
                show_info_split.remove(show_info_split[i])
                break
        ##########################################################################
        #判断--所在行，当--已空格分隔可以自动统计出列宽时自动判断列宽，并删除该行
        ##########################################################################
        length = len(dut_info_split)
        for i in range(length):
            if re.match(r'---+',dut_info_split[i]):
                line_split = dut_info_split[i].split('  ')
                for line in line_split:
                    line_num=line.count('-')
                    line_num = str(line_num+2)
                    length_list.append(line_num)
                show_info_split.remove(show_info_split[i])
                #修改最后一个列宽为32位，防止最后一列的参数值超出自动获取的列宽
                length_list[-1]=32
                break
        ##########################################################################
        #判断--所在行，当--无空格分隔则直接删除该行，使用静态方式指定列宽
        ##########################################################################
        #length_list = [10,17,10,16,7,25]
        length_list_len = len(length_list)
        length = len(dut_info_split)
        ######################################################################
        #创建空列表用于保存主键内容
        ######################################################################
        Interface_list = []
        ######################################################################
        #使用上述列宽获取每行中每列的数据，并组合字典的key，完成字典内容
        ######################################################################
        for i in range(length):
            sight = 0
            sight_sum=0
            list_len = []
            #每行中取值
            for j in range(length_list_len):
                sight_sum = sight_sum+int(length_list[j])
                row_value = dut_info_split[i][sight:sight_sum]
                sight = sight_sum
                row_value = row_value.lstrip()
                row_value = row_value.rstrip()
                list_len.append(row_value)
            #获取表头，用于组合
            if list_len[0]==value_title:
                title = list_len
            elif list_len[0]!=value_title:
                #生成字典
                Interface_list.append(list_len[0])
                for s in range(1,length_list_len):
                    #将主键与表名以/分隔组合成为字典的key
                    key_name = '%s/%s' % (list_len[0],title[s])
                    dict_value[key_name]=list_len[s]
            #将保存有主键值的列表以address_list为key放入字典（命名按照实际命名即xxxxx_list命名）
            dict_value["Interface_list"]=Interface_list
        return dict_value
    def dut_get_show_ipv6_interface_tunnel_num(self,show_info):                          #函数名由锐捷提供
        ###########################################
        #value_title定义主键的id，即列表中的唯一值
        ###########################################
        value_title="Wlan Id"
        length_list = []
        dict_value={}
        temp_key = 'address(es)'
        temp_key_1 = 'Joined group address(es)'
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)
        ######################################################
        #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        ######################################################
        for i in range(length):
            if re.match(r'interface Tunnel',dut_info_split[i]):
                matchObj = re.match('(interface Tunnel\s*\d+)\s*is\s*(\w+),\s*(ifindex):\s*(\d+),\s*(vrf_id)\s*(\d+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                dict_value[matchObj.group(3)]=matchObj.group(4)
                dict_value[matchObj.group(5)]=matchObj.group(6)
                # show_info_split.remove(show_info_split[i])
                # break
            elif re.match(r'\s*Mac Address',dut_info_split[i]):
                ench_content = dut_info_split[i].split(':')
                dict_temp_key = '%s/%s' % (temp_key, ench_content[0].lstrip().rstrip())
                dict_value[dict_temp_key]=ench_content[1].lstrip().rstrip()
            elif re.match(r'\s*INET6',dut_info_split[i]):
                index = dut_info_split[i].find(':')
                dict_temp_key = '%s/%s' % (temp_key, dut_info_split[i][0:index].lstrip().rstrip())
                dict_value[dict_temp_key]=dut_info_split[i][index+1:].lstrip().rstrip()
            elif re.match(r'\s*MTU',dut_info_split[i]):
                matchObj = re.match('\s*(MTU is) (\d+ bytes)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
            elif re.match(r'\s*ICMP error messages',dut_info_split[i]):
                matchObj = re.match('\s*(ICMP error messages limited to one every) (\d+ milliseconds)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
            elif re.match(r'\s*ICMP redirects are enabled',dut_info_split[i]):
                matchObj = re.match('\s*(ICMP redirects are) (enabled)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
            elif re.match(r'\s*ND DAD is',dut_info_split[i]):
                matchObj = re.match('\s*(ND DAD is) (\w+), (number of DAD attempts): (\d+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                dict_value[matchObj.group(3)]=matchObj.group(4)
            elif re.match(r'\s*ND reachable',dut_info_split[i]):
                matchObj = re.match('\s*(ND reachable time is) (\d+ milliseconds)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
            elif re.match(r'\s*ND advertised reachable',dut_info_split[i]):
                matchObj = re.match('\s*(ND advertised reachable time is) (\d+ milliseconds)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
            elif re.match(r'\s*ND retransmit interval',dut_info_split[i]):
                matchObj = re.match('\s*(ND retransmit interval is) (\d+ milliseconds)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
            elif re.match(r'\s*ND advertised retransmit',dut_info_split[i]):
                matchObj = re.match('\s*(ND advertised retransmit interval is) (\d+ milliseconds)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
            elif re.match(r'\s*ND router advertisements are sent',dut_info_split[i]):
                matchObj = re.match('\s*(ND router advertisements are sent every) (\d+ seconds<160--240>)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
            elif re.match(r'\s*ND router advertisements live',dut_info_split[i]):
                matchObj = re.match('\s*(ND router advertisements live for) (\d+ seconds)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
        return dict_value
    def dut_get_show_ipv6_address(self,show_info):                          #函数名由锐捷提供
        """
        Function:show ipv6 address回显解析函数
        CLI命令:show ipv6 address
        回显信息示例:
Ruijie#show ipv6 address
    Global unicast address limit: 2000, Global unicast address count: 1
    Tentative address count: 0,Duplicate address count: 0
    Preferred address count: 2,Deprecated address count: 0
      Mgmt 0
        2000::2/64                                    Preferred 
      Preferred lifetime: INFINITE, Valid lifetime: INFINITE
        FE80::274:9CFF:FEC7:A61B/64                   Preferred 
      Preferred lifetime: INFINITE, Valid lifetime: INFINITE
    Ruijie#

        Returns:
{"preferred_address_list": []}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ipv6 address | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        ###########################################
        #value_title定义主键的id，即列表中的唯一值
        ###########################################
        # value_title="ntp-server"
        preferred_address_list = []
        dict_value={}
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)
        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        ##########################################################################
        ######################################################
        #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        ######################################################
        for i in range(len(dut_info_split)):
            if re.match(r'Global unicast address limit:\s*\d+,\s*Global unicast address count:\s*\d+',dut_info_split[i]):
                matchObj = re.match('(Global unicast address limit):\s*(\d+),\s*(Global unicast address count):\s*(\d+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                dict_value[matchObj.group(3)]=matchObj.group(4)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'Tentative address count:\s*\d+,Duplicate address count:\s*\d+',dut_info_split[i]):
                matchObj = re.match('(Tentative address count):\s*(\d+),\s*(Duplicate address count):\s*(\d+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                dict_value[matchObj.group(3)]=matchObj.group(4)
                show_info_split.remove(show_info_split[i])
                break
        count = 0
        for i in range(len(dut_info_split)):
            if re.match(r'Preferred address count:\s*\d+,Deprecated address count:\s*\d+',dut_info_split[i]):
                matchObj = re.match('(Preferred address count):\s*(\d+),\s*(Deprecated address count):\s*(\d+)',dut_info_split[i])
                count = matchObj.group(2)
                dict_value[matchObj.group(1)]=matchObj.group(2)
                dict_value[matchObj.group(3)]=matchObj.group(4)
                show_info_split.remove(show_info_split[i])
                break
        for k in range(int(count)):
            for i in range(len(dut_info_split)):
                if 'Preferred lifetime' in dut_info_split[i]:
                    show_info_split.remove((show_info_split[i]))
                    break
        index_list = []
        k,j = 2, 0
        for i in range(len(dut_info_split)):
            if 'GigabitEthernet' in dut_info_split[i] or 'VLAN' in dut_info_split[i]:
                index_list.append(i)
                matchObj_1 = re.match(r'\s*(\w+\s*\S+)',dut_info_split[i])
                key_name = '%s/%s' % ('Preferred address',matchObj_1.group(1))
                if 'GigabitEthernet' in dut_info_split[i] or 'VLAN' in dut_info_split[i+2]:
                    matchObj_2 = re.match(r'\s*(\S+)\s*Preferred',dut_info_split[i+1])
                    dict_value[key_name]=matchObj_2.group(1)
                    preferred_address_list.append(matchObj_1.group(1))
                # else:
                #     while 'GigabitEthernet' in dut_info_split[i] or 'VLAN' not in dut_info_split[i+2]:
                #     matchObj_3 = re.match(r'\s*(\S+)\s*Preferred',dut_info_split[i+1])
                if i+k<len(dut_info_split):
                    while 'GigabitEthernet' not in dut_info_split[i+k] and 'VLAN' not in dut_info_split[i+k]:
                        matchObj_3 = re.match(r'\s*(\S+)\s*Preferred',dut_info_split[i+k-1])
                        matchObj_4 = re.match(r'\s*(\S+)\s*Preferred',dut_info_split[-1])
                        key_name_2 = '%s/%s' % ('Preferred address',matchObj_1.group(1)+'_'+str(j))
                        dict_value[key_name_2]=matchObj_3.group(1)
                        k+=1
                        j+=1
                        key_name_3 = '%s/%s' % ('Preferred address',matchObj_1.group(1)+'_'+str(j))
                        dict_value[key_name_3]=matchObj_4.group(1)
                        preferred_address_list.append(matchObj_1.group(1))
                        break





        print(dut_info_split),count
        #将保存有主键值的列表以preferred_address_list为key放入字典（命名按照实际命名即xxxxx_list命名）
        dict_value["preferred_address_list"]=preferred_address_list
        return dict_value
    def dut_get_show_ipv6_interface_dutport(self,show_info):                          #函数名由锐捷提供
        ###########################################
        #value_title定义主键的id，即列表中的唯一值
        ###########################################
        value_title="Address"
        length_list = []
        dict_value={}
        #########################################################################################
        #用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*',show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*',show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split=show_info_split
        length = len(dut_info_split)
        #=====================================================
        #删除dut_info_split中空字符所在行
        #=====================================================
        dut_info_split = self.del_space_lines(dut_info_split)
        ######################################################
        #使用正则匹配列表前的内容，并提取出写入字典，删除该行
        ######################################################
        for i in range(len(dut_info_split)):
            if re.match(r'interface\s*\w+\s*\S+ is\s*\w+, ifindex:\s*\d+, vrf_id \d+',dut_info_split[i]):
                matchObj = re.match('(interface\s*\w+\s*\S+) is\s*(\w+),\s*(ifindex):\s*(\d+),\s*(vrf_id)\s*(\d+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                dict_value[matchObj.group(3)]=matchObj.group(4)
                dict_value[matchObj.group(5)]=matchObj.group(6)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'\s*address\(\w*\):',dut_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'\s*Mac Address:\s*\S+',dut_info_split[i]):
                matchObj = re.match('\s*(Mac Address):\s*(\S+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break

        for i in range(len(dut_info_split)):
            if re.match(r'\s*MTU is\s*\d+\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(MTU) is\s*(\d+\s*\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'\s*ICMP error messages limited to one every \d+\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(ICMP error messages limited to one every)\s*(\d+\s*\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'\s*ICMP redirects are \w+',dut_info_split[i]):
                matchObj = re.match('\s*(ICMP redirects) are \s*(\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'\s*ND DAD is \w+, number of DAD attempts: \d+',dut_info_split[i]):
                matchObj = re.match('\s*(ND DAD) is\s*(\w+),\s*(number of DAD attempts):\s*(\d+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                dict_value[matchObj.group(3)]=matchObj.group(4)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'\s*ND reachable time is \d+\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(ND reachable time) is\s*(\d+\s*\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'\s*ND advertised reachable time is \d+\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(ND advertised reachable time) is\s*(\d+\s*\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'\s*ND retransmit interval is \d+\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(ND retransmit interval) is\s*(\d+\s*\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'\s*ND advertised retransmit interval is \d+\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(ND advertised retransmit interval) is\s*(\d+\s*\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'\s*ND router advertisements are sent every \d+\s*\w+<\S+>',dut_info_split[i]):
                matchObj = re.match('\s*(ND router advertisements are sent every)\s*(\d+\s*\w+<\S+>)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if re.match(r'\s*ND router advertisements live for \d+\s*\w+',dut_info_split[i]):
                matchObj = re.match('\s*(ND router advertisements live) for\s*(\d+\s*\w+)',dut_info_split[i])
                dict_value[matchObj.group(1)]=matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        for i in range(len(dut_info_split)):
            if 'INET6' in dut_info_split[i]:
                matchObj = re.match(r'\s*(INET6):\s*(\S+)\s*,\s*(subnet)\s*is\s*(\S+)',dut_info_split[i])
                key_name_1 = matchObj.group(1) + str(i)
                key_name_2 = matchObj.group(3) + str(i)
                dict_value[key_name_1]=matchObj.group(2)
                dict_value[key_name_2]=matchObj.group(4)
        for i in range(len(dut_info_split)):
            if 'Joined group address' in dut_info_split[i]:
                matchObj_1 = re.match(r'\s*(Joined group address\(es\)):',dut_info_split[i])
                index = i+1
                value = ''.join(dut_info_split[index:])
                value = value.lstrip()
                value = value.replace('    ','/')
                dict_value[matchObj_1.group(1)]=value
        return dict_value
    def dut_get_show_upgrade_file_flash_word(self,show_info):
        dict_value = {}
        package_file_list = []
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for i in range(len(show_info_split)):
            show_info_split[i].strip()
        while '' in show_info_split:
            show_info_split.remove('')
        for i in range(len(show_info_split)):
            if re.match(r'^Package files',show_info_split[i].strip()):
                break
            t1 = show_info_split[i].split(':')
            dict_value[t1[0].strip()] = t1[1].strip()
        for j in range(i+1,len(show_info_split)):
            package_file_list.append(show_info_split[j].strip())
        dict_value['package_files_list'] = package_file_list
        return dict_value
    def dut_get_show_upgrade_status(self,show_info):
        """
        Function:show upgrade status回显解析函数
        CLI命令:show upgrade status
        回显信息示例:
18K_507#show upgrade status 
[Slot M1]
        Device type     : ca-octeon-cmii
        Status          : success
[Slot FE4]
        Device type     : ca-octeon-lc
        Status          : success
[Slot 4]
        Device type     : ca-octeon-lc
        Status          : success
[Slot M2]
        Device type     : ca-octeon-cmii
        Status          : success
[Slot 1]
        Device type     : ca-octeon-lc
        Status          : success

        Returns:
{'Slot M2/Device type': 'ca-octeon-cmii'
'Slot FE4/Status': 'success'
'Slot M1/Status': 'success'
'slot_list': ['Slot M1'
'Slot FE4'
'Slot 4'
'Slot M2'
'Slot 1'], 'Slot 4/Status': 'success'
'Slot 4/Device type': 'ca-octeon-lc'
'Slot M1/Device type': 'ca-octeon-cmii'
'Slot FE4/Device type': 'ca-octeon-lc'
'Slot 1/Device type': 'ca-octeon-lc'
'Slot 1/Status': 'success'
'Slot M2/Status': 'success'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show upgrade status | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        slot_list = []
        dict_value = {}
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for i in range(len(show_info_split)):
            show_info_split[i].strip()
        while '' in show_info_split:
            show_info_split.remove('')
        for i in range(len(show_info_split)):
            if "upgrade global status:" in show_info_split[i]:
                list1 = show_info_split[i].split(":")
                dict_value[list1[0].strip()] = list1[1].strip()
                continue
            if 'Slot' in show_info_split[i]:
                t1 = show_info_split[i].strip('[').strip(']').strip()
                slot_list.append(t1)
                continue
            t2 = show_info_split[i].split(':')
            key = t1 + '/' + t2[0].strip()
            value = t2[1].strip()
            dict_value[key] = value
        dict_value['slot_list'] = slot_list
        return dict_value
    def dut_get_show_upgrade_autosync123(self,show_info):
        """
        Function:show upgrade auto-sync123回显解析函数
        CLI命令:show upgrade auto-sync123
        回显信息示例:


        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show upgrade auto-sync123 | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        str_arg ="show upgrade"
        return self.dut_get_show_info_analy_all_colon(show_info,str_arg)
    def dut_get_show_upgrade_history(self,show_info):
        """
        Function:show upgrade history回显解析函数
        CLI命令:show upgrade history
        回显信息示例:
18K_508#show upgrade history 
Upgrade History Information: 
        Time            : 2017-12-22 23:40:06
        Method          : LOCAL
        Package Name    : N18K_CMII_PJ18.bin
        Package Type    : Distribution
        Time            : 2017-12-22 23:52:09
        Method          : AUTO
        Package Name    : N18K_CMII_PJ18.bin
        Package Type    : Distribution
        Time            : 2017-12-22 23:54:32
        Method          : AUTO
        Package Name    : N18K_CMII_PJ18.bin
        Package Type    : Distribution
        Time            : 2017-12-23 00:25:51
        Method          : LOCAL
        Package Name    : N18000_12.22.bin
        Package Type    : Distribution

        Returns:
{'Package Type': 'Distribution'
'Method': 'LOCAL'
'Upgrade History Information': ''
'Package Name': 'N18000_12.22.bin'
'Time': '2017-12-23 00:25:51'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show upgrade history | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        str_arg ="upgrade history"
        return self.dut_get_show_info_analy_all_colon(show_info,str_arg)
    def dut_get_show_switch_id(self,show_info):
        """
        Function:show switch id回显解析函数
        CLI命令:show switch id
        回显信息示例:
18K#show switch id 
Switch ID is 2
18K#

        Returns:
{'Switch ID': '2'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show switch id | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value ={}
        dut_info_split = show_info.split("\n")
        if re.match(r'.*switch id.*',dut_info_split[0]):
            dut_info_split.remove(dut_info_split[0])
        if re.match(r'.*#.*', dut_info_split[-1]):
            dut_info_split.remove(dut_info_split[-1])
        dut_info_split1 =[]
        for value in dut_info_split:
            if "is" in value:
                dut_info_split1 = value.split("is")
        key_name = dut_info_split1[0].strip()
        dict_value[key_name] = dut_info_split1[1].lstrip().rstrip()
        return dict_value
    def dut_get_show_interfaces_dutport(self, show_info):
        """
            Function:show interfaces TenGigabitEthernet 0/4回显解析函数
            CLI命令:show interfaces TenGigabitEthernet 0/4
            回显信息示例:
    Ruijie#show interfaces TenGigabitEthernet 0/4
    Index(dec):4 (hex):4
    TenGigabitEthernet 0/4 is administratively down  , line protocol is DOWN
      Hardware is Broadcom TenGigabitEthernet, address is 5869.6cb4.a888 (bia 5869.6cb4.a888)
      Interface address is: no ip address
      Interface IPv6 address is:
        No IPv6 address
      MTU 1500 bytes, BW 1000000 Kbit
      Encapsulation protocol is Ethernet-II, loopback not set
      Keepalive interval is 10 sec , set
      Carrier delay is 2 sec
      Ethernet attributes:
        Last link state change time: 2019-05-27 10:39:12
        Time duration since last link state change: 3 days,  1 hours, 37 minutes, 33 seconds
        Priority is 0
        Medium-type is Copper
        Admin duplex mode is AUTO, oper duplex is Unknown
        Admin speed is AUTO, oper speed is Unknown
        Flow control admin status is OFF, flow control oper status is Unknown
        Admin negotiation mode is OFF, oper negotiation state is ON
        Storm Control: Broadcast is OFF, Multicast is OFF, Unicast is OFF
      Bridge attributes:
        Port-type: access
        Vlan id: 1
      Rxload is 1/255, Txload is 1/255
      Input peak rate: 805 bits/sec, at 2019-05-27 10:32:07
      Output peak rate: 1530 bits/sec, at 2019-05-27 10:32:07
       10 seconds input rate 0 bits/sec, 0 packets/sec
       10 seconds output rate 0 bits/sec, 0 packets/sec
        18 packets input, 4428 bytes, 0 no buffer, 0 dropped
        Received 0 broadcasts, 0 runts, 0 giants
        0 input errors, 0 CRC, 0 frame, 0 overrun, 0 abort
        279 packets output, 41461 bytes, 0 underruns , 0 no buffer, 0 dropped
        0 output errors, 0 collisions, 0 interface resets

            Returns:
    {'Txload': '1/255'
    'Output no buffer': '0'
    'address': '5869.6cb4.a888'
    'Time duration since last link state change': '3 days'
    'Priority': '0'
    'CRC': '0'
    'Input peak rate': '805'
    'BW': '1000000 Kbit'
    'Medium-type': 'Copper'
    'Flow control admin status': 'OFF'
    'line protocol': 'DOWN'
    'Rxload': '1/255'
    'Unicast': 'OFF'
    'Last link state change time: 2019-05-27 10:39': '12'
    '10 seconds output rate': [' 0 bits/sec'
    ' 0 packets/sec'], 'loopback': 'not set'
    'Carrier delay': '2 sec'
    'TenGigabitEthernet 0/4': 'administratively down'
    'collisions': '0'
    'flow control oper status': 'Unknown'
    'at 2019-05-27 10:32': '07'
    'Output dropped': '0'
    '(hex)': '4'
    'Storm Control/Unicast': 'OFF'
    'frame': '0'
    'oper duplex': 'Unknown'
    'Bridge attributes': ''
    'Admin speed': 'AUTO'
    'Port-type': 'access'
    'Storm Control/Broadcast': 'OFF'
    'Storm Control': 'Broadcast is OFF'
    'Multicast': 'OFF'
    'Output peak rate': '1530'
    'Output underruns': '0'
    'Interface IPv6 address': ''
    'MTU': '1500 bytes'
    'Interface address': 'no ip address'
    'oper negotiation state': 'ON'
    'Index(dec)': '4'
    'Storm Control/Multicast': 'OFF'
    'Ethernet attributes': ''
    'input errors': '0'
    'Encapsulation protocol': 'Ethernet-II'
    'BW_value': '1000000'
    'Admin duplex mode': 'AUTO'
    'oper speed': 'Unknown'
    'Hardware': 'Broadcom TenGigabitEthernet'
    'Keepalive interval': '10 sec'
    'packets output': '279'
    'Vlan id': '1'
    'Admin negotiation mode': 'OFF'
    'Output bytes': '41461'
    '10 seconds input rate': [' 0 bits/sec'
    ' 0 packets/sec']}
            Example:
            | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
            | ${result1} | dut_judge_show | cmd_str=show interfaces TenGigabitEthernet 0/4 | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
            备注：${yinfo}同Returns格式一致.
            """

        dict_value = {}
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        ################################################################################################
        #  打印回显信息
        ###############################################################################################
        length = len(show_info_split)
        for i in range(length):
            if re.match('(.*)packets input\s?,(.*)bytes\s?,(.*)no buffer\s?,(.*)dropped',
                        show_info_split[i].strip()):
                obj_1 = re.match('(.*)packets input\s?,(.*)bytes\s?,(.*)no buffer\s?,(.*)dropped',
                                 show_info_split[i].strip())
                dict_value["packets input"] = obj_1.group(1).strip()
                dict_value["input bytes"] = obj_1.group(2).strip()
                dict_value["input no buffer"] = obj_1.group(3).strip()
                dict_value["input dropped"] = obj_1.group(4).strip()
            elif re.match('(.*)packets output\s?,(.*)bytes\s?,(.*)underruns\s?,(.*)no buffer\s?,(.*)dropped',
                        show_info_split[i].strip()):
                obj_1 = re.match('(.*)packets output\s?,(.*)bytes\s?,(.*)underruns\s?,(.*)no buffer\s?,(.*)dropped',
                                 show_info_split[i].strip())
                dict_value["packets output"] = obj_1.group(1).strip()
                dict_value["Output bytes"] = obj_1.group(2).strip()
                dict_value["Output underruns"] = obj_1.group(3).strip()
                dict_value["Output no buffer"] = obj_1.group(4).strip()
                dict_value["Output dropped"] = obj_1.group(5).strip()
        for i in range(length):
            if re.match("(.*)Link Status:(.*)Lacp Status:(.*)BFD Status:(.*)", show_info_split[i].strip()):
                obj_0 = re.match("(.*)Link Status:(.*)Lacp Status:(.*)BFD Status:(.*)", show_info_split[i].strip())
                dict_value[obj_0.group(1).strip() + "/Link Status"] = obj_0.group(2).strip()
                dict_value[obj_0.group(1).strip() + "/Lacp Status"] = obj_0.group(3).strip()
                dict_value[obj_0.group(1).strip() + "/BFD Status"] = obj_0.group(4).strip()
            if "Rxload" in show_info_split[i].strip():
                break
        length = len(show_info_split)
        for i in range(length):
            if 'Storm Control: ' in show_info_split[i].strip():
                obj_1 = re.match('Storm Control:(.*)', show_info_split[i].strip())
                list_storm = obj_1.group(1).strip().split(",")
                for value in list_storm:
                    list_storm_2 = value.split("is")
                    dict_value["Storm Control/" + list_storm_2[0].strip()] = list_storm_2[1].strip()

                break
        flag_statistics = 0
        key_statistics_1 = ""
        for i in range(length):
            show_info_split[i] = show_info_split[i].strip()
            if "IPv4 statistics:" in show_info_split[i] or "IPv6 statistics:" in show_info_split[i]:
                flag_statistics = 1
                key_statistics = show_info_split[i].split(":")[0]
                continue
            if flag_statistics == 1:
                if re.match(r'\d+ seconds input rate', show_info_split[i]):
                    matchObj = re.match('(\d+ seconds input rate) (\d+ \w+/\w+), (\d+ \w+/\w+)', show_info_split[i])
                    value_list = [matchObj.group(2), matchObj.group(3)]
                    dict_value[key_statistics + "/" + matchObj.group(1)] = value_list
                    if re.match('(\d+ seconds input rate) (\d+) (\w+/\w+), (\d+) (\w+/\w+)', show_info_split[i]):
                        obj_ex = re.match('(\d+ seconds input rate) (\d+) (\w+/\w+), (\d+) (\w+/\w+)', show_info_split[i])
                        dict_value[key_statistics + "/" + obj_ex.group(1) + "/" + obj_ex.group(3)] = obj_ex.group(2)
                        dict_value[key_statistics + "/" + obj_ex.group(1) + "/" + obj_ex.group(5)] = obj_ex.group(4)
                elif re.match(r'\d+ seconds output rate', show_info_split[i]):
                    matchObj = re.match('(\d+ seconds output rate) (\d+ \w+/\w+), (\d+ \w+/\w+)',
                                        show_info_split[i])
                    value_list = [matchObj.group(2), matchObj.group(3)]
                    dict_value[key_statistics + "/" + matchObj.group(1)] = value_list
                    if re.match('(\d+ seconds input rate) (\d+) (\w+/\w+), (\d+) (\w+/\w+)', show_info_split[i]):
                        obj_ex = re.match('(\d+ seconds input rate) (\d+) (\w+/\w+), (\d+) (\w+/\w+)', show_info_split[i])
                        dict_value[key_statistics + "/" + obj_ex.group(1) + "/" + obj_ex.group(3)] = obj_ex.group(2)
                        dict_value[key_statistics + "/" + obj_ex.group(1) + "/" + obj_ex.group(5)] = obj_ex.group(4)
                elif re.match(r'\d+ packets input, \d+ bytes', show_info_split[i]):
                    matchObj = re.match('(\d+) packets input, (\d+) bytes', show_info_split[i])
                    dict_value[key_statistics + "/packets input"] = matchObj.group(1)
                    dict_value[key_statistics + "/bytes"] = matchObj.group(2)
                elif re.match(r'Input: \d+ packets, \d+ bytes', show_info_split[i]):
                    matchObj = re.match('Input: (\d+) packets, (\d+) bytes', show_info_split[i])
                    dict_value[key_statistics + "/packets input"] = matchObj.group(1)
                    dict_value[key_statistics + "/bytes"] = matchObj.group(2)
                    key_statistics_1 = key_statistics + "/packets input"
                elif re.match(r'\d+ packets output, \d+ bytes', show_info_split[i]):
                    matchObj = re.match('(\d+) packets output, (\d+) bytes', show_info_split[i])
                    dict_value[key_statistics + "/packets output"] = matchObj.group(1)
                    dict_value[key_statistics + "/bytes"] = matchObj.group(2)
                elif re.match(r'Output:\d+ packets, \d+ bytes', show_info_split[i]):
                    matchObj = re.match('Output:(\d+) packets, (\d+) bytes', show_info_split[i])
                    dict_value[key_statistics + "/packets output"] = matchObj.group(1)
                    dict_value[key_statistics + "/bytes"] = matchObj.group(2)
                    key_statistics_1 = key_statistics + "/packets output"

                elif re.match(r"(\d+) unicast packets, (\d+) unicast bytes", show_info_split[i]):
                    matchObj = re.match(r"(\d+) unicast packets, (\d+) unicast bytes", show_info_split[i])
                    dict_value[key_statistics_1 + "/unicast packets"] = matchObj.group(1)
                    dict_value[key_statistics_1 + "/unicast bytes"] = matchObj.group(2)
                elif re.match(r"(\d+) multicast packets, (\d+) multicast bytes", show_info_split[i]):
                    matchObj = re.match(r"(\d+) multicast packets, (\d+) multicast bytes", show_info_split[i])
                    dict_value[key_statistics_1 + "/multicast packets"] = matchObj.group(1)
                    dict_value[key_statistics_1 + "/multicast bytes"] = matchObj.group(2)
                elif "Rxload is" in show_info_split[i] or "Interface statistics" in show_info_split[i]:
                    break

        flag_statistics = 0
        key_statistics_1 = ""
        for i in range(length):
            show_info_split[i] = show_info_split[i].strip()
            if "Interface statistics:" in show_info_split[i]:
                flag_statistics = 1
                key_statistics = show_info_split[i].split(":")[0]
                continue
            if flag_statistics == 1:
                if re.match(r'Input: \d+ packets, \d+ bytes', show_info_split[i]):
                    matchObj = re.match('Input: (\d+) packets, (\d+) bytes', show_info_split[i])
                    dict_value[key_statistics + "/packets input"] = matchObj.group(1)
                    dict_value[key_statistics + "/bytes"] = matchObj.group(2)
                    key_statistics_1 = key_statistics + "/packets input"
                elif re.match(r'Output:\d+ packets, \d+ bytes', show_info_split[i]):
                    matchObj = re.match('Output:(\d+) packets, (\d+) bytes', show_info_split[i])
                    dict_value[key_statistics + "/packets output"] = matchObj.group(1)
                    dict_value[key_statistics + "/bytes"] = matchObj.group(2)
                    key_statistics_1 = key_statistics + "/packets output"

                elif re.match(r"(\d+) unicast packets, (\d+) unicast bytes", show_info_split[i]):
                    matchObj = re.match(r"(\d+) unicast packets, (\d+) unicast bytes", show_info_split[i])
                    dict_value[key_statistics_1 + "/unicast packets"] = matchObj.group(1)
                    dict_value[key_statistics_1 + "/unicast bytes"] = matchObj.group(2)
                elif re.match(r"(\d+) multicast packets, (\d+) multicast bytes", show_info_split[i]):
                    matchObj = re.match(r"(\d+) multicast packets, (\d+) multicast bytes", show_info_split[i])
                    dict_value[key_statistics_1 + "/multicast packets"] = matchObj.group(1)
                    dict_value[key_statistics_1 + "/multicast bytes"] = matchObj.group(2)
                elif re.match(r"(\d+) unicast packets", show_info_split[i]):
                    matchObj = re.match(r"(\d+) unicast packets", show_info_split[i])
                    dict_value[key_statistics_1 + "/unicast packets"] = matchObj.group(1)
                elif re.match(r"(\d+) multicast packets", show_info_split[i]):
                    matchObj = re.match(r"(\d+) multicast packets", show_info_split[i])
                    dict_value[key_statistics_1 + "/multicast packets"] = matchObj.group(1)
                elif re.match(r"(\d+) broadcast packets", show_info_split[i]):
                    matchObj = re.match(r"(\d+) broadcast packets", show_info_split[i])
                    dict_value[key_statistics_1 + "/broadcast packets"] = matchObj.group(1)

        for i in range(length):
            if re.match('(.*)packets output\s?,(.*)bytes\s?,(.*)underruns\s?, (\d+) dropped',
                        show_info_split[i].strip()):
                obj_1 = re.match('(.*)packets output\s?,(.*)bytes\s?,(.*)underruns\s?, (\d+) dropped',
                                 show_info_split[i].strip())
                dict_value["packets output"] = obj_1.group(1).strip()
                dict_value["Output bytes"] = obj_1.group(2).strip()
                dict_value["Output underruns"] = obj_1.group(3).strip()
                dict_value["Output dropped"] = obj_1.group(4).strip()
                break
        for i in range(length):
            if re.match(r'  Ethernet attributes', show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'  Bridge attributes', show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'    Time duration since', show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'    Storm Control', show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        # length = len(show_info_split)
        # for i in range(length):
        #     if re.match(r'  Input peak rate', show_info_split[i]):
        #         show_info_split.remove(show_info_split[i+1])
        #         show_info_split.remove(show_info_split[i ])
        #         break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'    Received', show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        # for i in range(length):
        #     if re.match(r'    \d+ input errors',show_info_split[i]):
        #         show_info_split.remove(show_info_split[i])
        #         break
        # length = len(show_info_split)
        # for i in range(length):
        #     if re.match(r'    \d+ output errors',show_info_split[i]):
        #         show_info_split.remove(show_info_split[i])
        #         break
        length = len(show_info_split)
        #####################################################################
        for i in range(length):
            if re.match(r'(.* seconds input rate)(.*),(.*)', show_info_split[i]):
                if re.match('(\d+ seconds input rate) (\d+) (\w+/\w+), (\d+) (\w+/\w+)', show_info_split[i].strip()):
                    obj_ex = re.match('(\d+ seconds input rate) (\d+) (\w+/\w+), (\d+) (\w+/\w+)', show_info_split[i].strip())
                    dict_value[obj_ex.group(1) + "/" + obj_ex.group(3)] = obj_ex.group(2)
                    dict_value[obj_ex.group(1) + "/" + obj_ex.group(5)] = obj_ex.group(4)
                matchObj = re.match('(.* seconds input rate)(.*),(.*)', show_info_split[i])
                value_list = [matchObj.group(2), matchObj.group(3)]
                dict_value[matchObj.group(1)] = value_list
                show_info_split.remove(show_info_split[i])

                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'(.* seconds output rate)(.*),(.*)', show_info_split[i]):
                if re.match('(\d+ seconds output rate) (\d+) (\w+/\w+), (\d+) (\w+/\w+)', show_info_split[i].strip()):
                    obj_ex = re.match('(\d+ seconds output rate) (\d+) (\w+/\w+), (\d+) (\w+/\w+)', show_info_split[i].strip())
                    dict_value[obj_ex.group(1) + "/" + obj_ex.group(3)] = obj_ex.group(2)
                    dict_value[obj_ex.group(1) + "/" + obj_ex.group(5)] = obj_ex.group(4)
                matchObj = re.match('(.* seconds output rate)(.*),(.*)', show_info_split[i])
                value_list = [matchObj.group(2), matchObj.group(3)]
                dict_value[matchObj.group(1)] = value_list
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'    (\d+) packets input', show_info_split[i]):
                matchObj = re.match('    (\d+) (packets input)', show_info_split[i])
                dict_value[matchObj.group(2)] = matchObj.group(1)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'    (\d+) packets output', show_info_split[i]):
                matchObj = re.match('    (\d+) (packets output)', show_info_split[i])
                dict_value[matchObj.group(2)] = matchObj.group(1)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'    Last link state change', show_info_split[i]):
                matchObj = re.match('    (Last link state change time): (.*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)

        ###########################################################
        # 去除Interface IPv6 address is:
        # No IPv6 address
        #############################################################
        for i in range(length):
            if re.match(r'  Interface IPv6 address', show_info_split[i]):
                matchObj = re.match('  (Interface IPv6 address) is:', show_info_split[i])
                key = matchObj.group(1)
                vaule = show_info_split[i + 1]
                key = key.lstrip()
                key = key.rstrip()
                value = vaule.lstrip()
                value = value.rstrip()
                dict_value[key] = value
                show_info_split.remove(show_info_split[i + 1])
                show_info_split.remove(show_info_split[i])
                break
        ################################################################
        # 去除 Index(dec):4097 (hex):1001
        #####################################################################
        length = len(show_info_split)
        for i in range(length):
            if re.match('Index', show_info_split[i]):
                matchObj = re.match('(.*):(\d*) (.*):(\d*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                dict_value[matchObj.group(3)] = matchObj.group(4)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match('ifindex', show_info_split[i]) and re.match('(.*):(\d*) (.*):(\d*)', show_info_split[i]):
                matchObj = re.match('(.*):(\d*) (.*):(\d*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                dict_value[matchObj.group(3)] = matchObj.group(4)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        #########################################################################
        # 去除 Keepalive interval is 10 sec , set
        #############################################################################
        for i in range(length):
            if re.match(r'  Keepalive interval', show_info_split[i]):
                matchObj = re.match('  (Keepalive interval) is (.*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        ##########################################################################
        # 以逗号为分隔号重新组合成字符串 newString
        ###########################################################################
        newString = ' '
        for i in range(length):
            newString = newString + show_info_split[i] + ','
        #################################################################################
        #   开始处理
        ##############################################################################
        length = len(show_info_split)
        #########################################################################
        # 去除 Keepalive interval is 10 sec , set
        #############################################################################
        for i in range(length):
            if re.match(r'Input packets\s+(\d+)\s+Input bytes\s+(\d+)', show_info_split[i].strip()):
                obj_1 = re.match(r'Input packets\s+(\d+)\s+Input bytes\s+(\d+)', show_info_split[i].strip())
                dict_value["Input packets"] = obj_1.group(1)
                dict_value["Input bytes"] = obj_1.group(2)
            if re.match(r'Input broadcasts\s+(\d+)\s+Input multicasts\s+(\d+)', show_info_split[i].strip()):
                obj_1 = re.match(r'Input broadcasts\s+(\d+)\s+Input multicasts\s+(\d+)', show_info_split[i].strip())
                dict_value["Input broadcasts"] = obj_1.group(1)
                dict_value["Input multicasts"] = obj_1.group(2)
            if re.match(r'Input unicasts\s+(\d+)', show_info_split[i].strip()):
                obj_1 = re.match(r'Input unicasts\s+(\d+)', show_info_split[i].strip())
                dict_value["Input unicasts"] = obj_1.group(1)
            if re.match(r'Output packets\s+(\d+)\s+Output bytes\s+(\d+)', show_info_split[i].strip()):
                obj_1 = re.match(r'Output packets\s+(\d+)\s+Output bytes\s+(\d+)', show_info_split[i].strip())
                dict_value["Output packets"] = obj_1.group(1)
                dict_value["Output bytes"] = obj_1.group(2)

        dut_info_split = newString.split(',')
        length = len(dut_info_split)
        for i in range(length):
            if re.search(r'(.*):(.*)', dut_info_split[i]):
                if "BFD Status:" in dut_info_split[i]:
                    continue
                if re.search(r'(.*)is:(.*)', dut_info_split[i]):
                    type1 = re.search(r'(.*)is:(.*)', dut_info_split[i])
                    key = type1.group(1)
                    value = type1.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
                else:
                    type1 = re.search(r'(.*):(.*)', dut_info_split[i])
                    key = type1.group(1)
                    value = type1.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.replace("bits/sec", "").lstrip()
                    value = value.replace("bits/sec", "").rstrip()
                    dict_value[key] = value
            elif re.match(r'(.*) is (.*)', dut_info_split[i]):
                if re.match(r' address is', dut_info_split[i]):
                    type2 = re.match(r' (address) is (.*) \(bia .*\)', dut_info_split[i])
                    dict_value[type2.group(1)] = type2.group(2)
                else:
                    type2 = re.match(r'(.*) is (.*)', dut_info_split[i])
                    key = type2.group(1)
                    value = type2.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
            elif re.search(r'(MTU|BW|loopback) (.*)', dut_info_split[i]):
                type3 = re.search(r'(MTU|BW|loopback) (.*)', dut_info_split[i])
                key = type3.group(1)
                value = type3.group(2)
                key = key.lstrip()
                key = key.rstrip()
                value = value.lstrip()
                value = value.rstrip()
                dict_value[key] = value
                if re.search("BW \d+ Kbit", dut_info_split[i]):
                    bw_value = re.search("BW (\d+) Kbit", dut_info_split[i]).group(1)
                    dict_value["BW_value"] = bw_value
            elif re.match('.*input errors.*', dut_info_split[i]):
                mainobj = re.match('(.*)(input errors).*', dut_info_split[i])
                vaule = mainobj.group(1).strip()
                key = mainobj.group(2).strip()
                dict_value[key] = vaule
            elif re.match('.*CRC.*', dut_info_split[i]):
                mainobj = re.match('(.*)(CRC).*', dut_info_split[i])
                vaule = mainobj.group(1).strip()
                key = mainobj.group(2).strip()
                dict_value[key] = vaule
            elif re.match('.*frame.*', dut_info_split[i]):
                mainobj = re.match('(.*)(frame).*', dut_info_split[i])
                vaule = mainobj.group(1).strip()
                key = mainobj.group(2).strip()
                dict_value[key] = vaule
            elif re.match('.*collisions.*', dut_info_split[i]):
                mainobj = re.match('(.*)(collisions).*', dut_info_split[i])
                vaule = mainobj.group(1).strip()
                key = mainobj.group(2).strip()
                dict_value[key] = vaule
        # print dut_info_split
        return dict_value
    def dut_get_show_interface_dutport(self, show_info):
        """
            Function:show interfaces TenGigabitEthernet 0/4回显解析函数
            CLI命令:show interfaces TenGigabitEthernet 0/4
            回显信息示例:
    Ruijie#show interfaces TenGigabitEthernet 0/4
    Index(dec):4 (hex):4
    TenGigabitEthernet 0/4 is administratively down  , line protocol is DOWN
      Hardware is Broadcom TenGigabitEthernet, address is 5869.6cb4.a888 (bia 5869.6cb4.a888)
      Interface address is: no ip address
      Interface IPv6 address is:
        No IPv6 address
      MTU 1500 bytes, BW 1000000 Kbit
      Encapsulation protocol is Ethernet-II, loopback not set
      Keepalive interval is 10 sec , set
      Carrier delay is 2 sec
      Ethernet attributes:
        Last link state change time: 2019-05-27 10:39:12
        Time duration since last link state change: 3 days,  1 hours, 37 minutes, 33 seconds
        Priority is 0
        Medium-type is Copper
        Admin duplex mode is AUTO, oper duplex is Unknown
        Admin speed is AUTO, oper speed is Unknown
        Flow control admin status is OFF, flow control oper status is Unknown
        Admin negotiation mode is OFF, oper negotiation state is ON
        Storm Control: Broadcast is OFF, Multicast is OFF, Unicast is OFF
      Bridge attributes:
        Port-type: access
        Vlan id: 1
      Rxload is 1/255, Txload is 1/255
      Input peak rate: 805 bits/sec, at 2019-05-27 10:32:07
      Output peak rate: 1530 bits/sec, at 2019-05-27 10:32:07
       10 seconds input rate 0 bits/sec, 0 packets/sec
       10 seconds output rate 0 bits/sec, 0 packets/sec
        18 packets input, 4428 bytes, 0 no buffer, 0 dropped
        Received 0 broadcasts, 0 runts, 0 giants
        0 input errors, 0 CRC, 0 frame, 0 overrun, 0 abort
        279 packets output, 41461 bytes, 0 underruns , 0 no buffer, 0 dropped
        0 output errors, 0 collisions, 0 interface resets

            Returns:
    {'Txload': '1/255'
    'Output no buffer': '0'
    'address': '5869.6cb4.a888'
    'Time duration since last link state change': '3 days'
    'Priority': '0'
    'CRC': '0'
    'Input peak rate': '805'
    'BW': '1000000 Kbit'
    'Medium-type': 'Copper'
    'Flow control admin status': 'OFF'
    'line protocol': 'DOWN'
    'Rxload': '1/255'
    'Unicast': 'OFF'
    'Last link state change time: 2019-05-27 10:39': '12'
    '10 seconds output rate': [' 0 bits/sec'
    ' 0 packets/sec'], 'loopback': 'not set'
    'Carrier delay': '2 sec'
    'TenGigabitEthernet 0/4': 'administratively down'
    'collisions': '0'
    'flow control oper status': 'Unknown'
    'at 2019-05-27 10:32': '07'
    'Output dropped': '0'
    '(hex)': '4'
    'Storm Control/Unicast': 'OFF'
    'frame': '0'
    'oper duplex': 'Unknown'
    'Bridge attributes': ''
    'Admin speed': 'AUTO'
    'Port-type': 'access'
    'Storm Control/Broadcast': 'OFF'
    'Storm Control': 'Broadcast is OFF'
    'Multicast': 'OFF'
    'Output peak rate': '1530'
    'Output underruns': '0'
    'Interface IPv6 address': ''
    'MTU': '1500 bytes'
    'Interface address': 'no ip address'
    'oper negotiation state': 'ON'
    'Index(dec)': '4'
    'Storm Control/Multicast': 'OFF'
    'Ethernet attributes': ''
    'input errors': '0'
    'Encapsulation protocol': 'Ethernet-II'
    'BW_value': '1000000'
    'Admin duplex mode': 'AUTO'
    'oper speed': 'Unknown'
    'Hardware': 'Broadcom TenGigabitEthernet'
    'Keepalive interval': '10 sec'
    'packets output': '279'
    'Vlan id': '1'
    'Admin negotiation mode': 'OFF'
    'Output bytes': '41461'
    '10 seconds input rate': [' 0 bits/sec'
    ' 0 packets/sec']}
            Example:
            | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
            | ${result1} | dut_judge_show | cmd_str=show interfaces TenGigabitEthernet 0/4 | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
            备注：${yinfo}同Returns格式一致.
            """

        dict_value = {}
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        ################################################################################################
        #  打印回显信息
        ###############################################################################################
        length = len(show_info_split)
        for i in range(length):
            if re.match('(.*)packets input\s?,(.*)bytes\s?,(.*)no buffer\s?,(.*)dropped',
                        show_info_split[i].strip()):
                obj_1 = re.match('(.*)packets input\s?,(.*)bytes\s?,(.*)no buffer\s?,(.*)dropped',
                                 show_info_split[i].strip())
                dict_value["packets input"] = obj_1.group(1).strip()
                dict_value["input bytes"] = obj_1.group(2).strip()
                dict_value["input no buffer"] = obj_1.group(3).strip()
                dict_value["input dropped"] = obj_1.group(4).strip()
            elif re.match('(.*)packets output\s?,(.*)bytes\s?,(.*)underruns\s?,(.*)no buffer\s?,(.*)dropped',
                        show_info_split[i].strip()):
                obj_1 = re.match('(.*)packets output\s?,(.*)bytes\s?,(.*)underruns\s?,(.*)no buffer\s?,(.*)dropped',
                                 show_info_split[i].strip())
                dict_value["packets output"] = obj_1.group(1).strip()
                dict_value["Output bytes"] = obj_1.group(2).strip()
                dict_value["Output underruns"] = obj_1.group(3).strip()
                dict_value["Output no buffer"] = obj_1.group(4).strip()
                dict_value["Output dropped"] = obj_1.group(5).strip()
        for i in range(length):
            if re.match("(.*)Link Status:(.*)Lacp Status:(.*)BFD Status:(.*)", show_info_split[i].strip()):
                obj_0 = re.match("(.*)Link Status:(.*)Lacp Status:(.*)BFD Status:(.*)", show_info_split[i].strip())
                dict_value[obj_0.group(1).strip() + "/Link Status"] = obj_0.group(2).strip()
                dict_value[obj_0.group(1).strip() + "/Lacp Status"] = obj_0.group(3).strip()
                dict_value[obj_0.group(1).strip() + "/BFD Status"] = obj_0.group(4).strip()
            if "Rxload" in show_info_split[i].strip():
                break
        length = len(show_info_split)
        for i in range(length):
            if 'Storm Control: ' in show_info_split[i].strip():
                obj_1 = re.match('Storm Control:(.*)', show_info_split[i].strip())
                list_storm = obj_1.group(1).strip().split(",")
                for value in list_storm:
                    list_storm_2 = value.split("is")
                    dict_value["Storm Control/" + list_storm_2[0].strip()] = list_storm_2[1].strip()

                break
        flag_statistics = 0
        key_statistics_1 = ""
        for i in range(length):
            show_info_split[i] = show_info_split[i].strip()
            if "IPv4 statistics:" in show_info_split[i] or "IPv6 statistics:" in show_info_split[i]:
                flag_statistics = 1
                key_statistics = show_info_split[i].split(":")[0]
                continue
            if flag_statistics == 1:
                if re.match(r'\d+ seconds input rate', show_info_split[i]):
                    matchObj = re.match('(\d+ seconds input rate) (\d+ \w+/\w+), (\d+ \w+/\w+)', show_info_split[i])
                    value_list = [matchObj.group(2), matchObj.group(3)]
                    dict_value[key_statistics + "/" + matchObj.group(1)] = value_list
                    if re.match('(\d+ seconds input rate) (\d+) (\w+/\w+), (\d+) (\w+/\w+)', show_info_split[i]):
                        obj_ex = re.match('(\d+ seconds input rate) (\d+) (\w+/\w+), (\d+) (\w+/\w+)', show_info_split[i])
                        dict_value[key_statistics + "/" + obj_ex.group(1) + "/" + obj_ex.group(3)] = obj_ex.group(2)
                        dict_value[key_statistics + "/" + obj_ex.group(1) + "/" + obj_ex.group(5)] = obj_ex.group(4)
                elif re.match(r'\d+ seconds output rate', show_info_split[i]):
                    matchObj = re.match('(\d+ seconds output rate) (\d+ \w+/\w+), (\d+ \w+/\w+)',
                                        show_info_split[i])
                    value_list = [matchObj.group(2), matchObj.group(3)]
                    dict_value[key_statistics + "/" + matchObj.group(1)] = value_list
                    if re.match('(\d+ seconds input rate) (\d+) (\w+/\w+), (\d+) (\w+/\w+)', show_info_split[i]):
                        obj_ex = re.match('(\d+ seconds input rate) (\d+) (\w+/\w+), (\d+) (\w+/\w+)', show_info_split[i])
                        dict_value[key_statistics + "/" + obj_ex.group(1) + "/" + obj_ex.group(3)] = obj_ex.group(2)
                        dict_value[key_statistics + "/" + obj_ex.group(1) + "/" + obj_ex.group(5)] = obj_ex.group(4)
                elif re.match(r'\d+ packets input, \d+ bytes', show_info_split[i]):
                    matchObj = re.match('(\d+) packets input, (\d+) bytes', show_info_split[i])
                    dict_value[key_statistics + "/packets input"] = matchObj.group(1)
                    dict_value[key_statistics + "/bytes"] = matchObj.group(2)
                elif re.match(r'Input: \d+ packets, \d+ bytes', show_info_split[i]):
                    matchObj = re.match('Input: (\d+) packets, (\d+) bytes', show_info_split[i])
                    dict_value[key_statistics + "/packets input"] = matchObj.group(1)
                    dict_value[key_statistics + "/bytes"] = matchObj.group(2)
                    key_statistics_1 = key_statistics + "/packets input"
                elif re.match(r'\d+ packets output, \d+ bytes', show_info_split[i]):
                    matchObj = re.match('(\d+) packets output, (\d+) bytes', show_info_split[i])
                    dict_value[key_statistics + "/packets output"] = matchObj.group(1)
                    dict_value[key_statistics + "/bytes"] = matchObj.group(2)
                elif re.match(r'Output:\d+ packets, \d+ bytes', show_info_split[i]):
                    matchObj = re.match('Output:(\d+) packets, (\d+) bytes', show_info_split[i])
                    dict_value[key_statistics + "/packets output"] = matchObj.group(1)
                    dict_value[key_statistics + "/bytes"] = matchObj.group(2)
                    key_statistics_1 = key_statistics + "/packets output"

                elif re.match(r"(\d+) unicast packets, (\d+) unicast bytes", show_info_split[i]):
                    matchObj = re.match(r"(\d+) unicast packets, (\d+) unicast bytes", show_info_split[i])
                    dict_value[key_statistics_1 + "/unicast packets"] = matchObj.group(1)
                    dict_value[key_statistics_1 + "/unicast bytes"] = matchObj.group(2)
                elif re.match(r"(\d+) multicast packets, (\d+) multicast bytes", show_info_split[i]):
                    matchObj = re.match(r"(\d+) multicast packets, (\d+) multicast bytes", show_info_split[i])
                    dict_value[key_statistics_1 + "/multicast packets"] = matchObj.group(1)
                    dict_value[key_statistics_1 + "/multicast bytes"] = matchObj.group(2)
                elif "Rxload is" in show_info_split[i] or "Interface statistics" in show_info_split[i]:
                    break

        flag_statistics = 0
        key_statistics_1 = ""
        for i in range(length):
            show_info_split[i] = show_info_split[i].strip()
            if "Interface statistics:" in show_info_split[i]:
                flag_statistics = 1
                key_statistics = show_info_split[i].split(":")[0]
                continue
            if flag_statistics == 1:
                if re.match(r'Input: \d+ packets, \d+ bytes', show_info_split[i]):
                    matchObj = re.match('Input: (\d+) packets, (\d+) bytes', show_info_split[i])
                    dict_value[key_statistics + "/packets input"] = matchObj.group(1)
                    dict_value[key_statistics + "/bytes"] = matchObj.group(2)
                    key_statistics_1 = key_statistics + "/packets input"
                elif re.match(r'Output:\d+ packets, \d+ bytes', show_info_split[i]):
                    matchObj = re.match('Output:(\d+) packets, (\d+) bytes', show_info_split[i])
                    dict_value[key_statistics + "/packets output"] = matchObj.group(1)
                    dict_value[key_statistics + "/bytes"] = matchObj.group(2)
                    key_statistics_1 = key_statistics + "/packets output"

                elif re.match(r"(\d+) unicast packets, (\d+) unicast bytes", show_info_split[i]):
                    matchObj = re.match(r"(\d+) unicast packets, (\d+) unicast bytes", show_info_split[i])
                    dict_value[key_statistics_1 + "/unicast packets"] = matchObj.group(1)
                    dict_value[key_statistics_1 + "/unicast bytes"] = matchObj.group(2)
                elif re.match(r"(\d+) multicast packets, (\d+) multicast bytes", show_info_split[i]):
                    matchObj = re.match(r"(\d+) multicast packets, (\d+) multicast bytes", show_info_split[i])
                    dict_value[key_statistics_1 + "/multicast packets"] = matchObj.group(1)
                    dict_value[key_statistics_1 + "/multicast bytes"] = matchObj.group(2)
                elif re.match(r"(\d+) unicast packets", show_info_split[i]):
                    matchObj = re.match(r"(\d+) unicast packets", show_info_split[i])
                    dict_value[key_statistics_1 + "/unicast packets"] = matchObj.group(1)
                elif re.match(r"(\d+) multicast packets", show_info_split[i]):
                    matchObj = re.match(r"(\d+) multicast packets", show_info_split[i])
                    dict_value[key_statistics_1 + "/multicast packets"] = matchObj.group(1)
                elif re.match(r"(\d+) broadcast packets", show_info_split[i]):
                    matchObj = re.match(r"(\d+) broadcast packets", show_info_split[i])
                    dict_value[key_statistics_1 + "/broadcast packets"] = matchObj.group(1)

        for i in range(length):
            if re.match('(.*)packets output\s?,(.*)bytes\s?,(.*)underruns\s?, (\d+) dropped',
                        show_info_split[i].strip()):
                obj_1 = re.match('(.*)packets output\s?,(.*)bytes\s?,(.*)underruns\s?, (\d+) dropped',
                                 show_info_split[i].strip())
                dict_value["packets output"] = obj_1.group(1).strip()
                dict_value["Output bytes"] = obj_1.group(2).strip()
                dict_value["Output underruns"] = obj_1.group(3).strip()
                dict_value["Output dropped"] = obj_1.group(4).strip()
                break
        for i in range(length):
            if re.match(r'  Ethernet attributes', show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'  Bridge attributes', show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'    Time duration since', show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'    Storm Control', show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        # length = len(show_info_split)
        # for i in range(length):
        #     if re.match(r'  Input peak rate', show_info_split[i]):
        #         show_info_split.remove(show_info_split[i+1])
        #         show_info_split.remove(show_info_split[i ])
        #         break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'    Received', show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        # for i in range(length):
        #     if re.match(r'    \d+ input errors',show_info_split[i]):
        #         show_info_split.remove(show_info_split[i])
        #         break
        # length = len(show_info_split)
        # for i in range(length):
        #     if re.match(r'    \d+ output errors',show_info_split[i]):
        #         show_info_split.remove(show_info_split[i])
        #         break
        length = len(show_info_split)
        #####################################################################
        for i in range(length):
            if re.match(r'(.* seconds input rate)(.*),(.*)', show_info_split[i]):
                if re.match('(\d+ seconds input rate) (\d+) (\w+/\w+), (\d+) (\w+/\w+)', show_info_split[i].strip()):
                    obj_ex = re.match('(\d+ seconds input rate) (\d+) (\w+/\w+), (\d+) (\w+/\w+)', show_info_split[i].strip())
                    dict_value[obj_ex.group(1) + "/" + obj_ex.group(3)] = obj_ex.group(2)
                    dict_value[obj_ex.group(1) + "/" + obj_ex.group(5)] = obj_ex.group(4)
                matchObj = re.match('(.* seconds input rate)(.*),(.*)', show_info_split[i])
                value_list = [matchObj.group(2), matchObj.group(3)]
                dict_value[matchObj.group(1)] = value_list
                show_info_split.remove(show_info_split[i])

                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'(.* seconds output rate)(.*),(.*)', show_info_split[i]):
                if re.match('(\d+ seconds output rate) (\d+) (\w+/\w+), (\d+) (\w+/\w+)', show_info_split[i].strip()):
                    obj_ex = re.match('(\d+ seconds output rate) (\d+) (\w+/\w+), (\d+) (\w+/\w+)', show_info_split[i].strip())
                    dict_value[obj_ex.group(1) + "/" + obj_ex.group(3)] = obj_ex.group(2)
                    dict_value[obj_ex.group(1) + "/" + obj_ex.group(5)] = obj_ex.group(4)
                matchObj = re.match('(.* seconds output rate)(.*),(.*)', show_info_split[i])
                value_list = [matchObj.group(2), matchObj.group(3)]
                dict_value[matchObj.group(1)] = value_list
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'    (\d+) packets input', show_info_split[i]):
                matchObj = re.match('    (\d+) (packets input)', show_info_split[i])
                dict_value[matchObj.group(2)] = matchObj.group(1)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'    (\d+) packets output', show_info_split[i]):
                matchObj = re.match('    (\d+) (packets output)', show_info_split[i])
                dict_value[matchObj.group(2)] = matchObj.group(1)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'    Last link state change', show_info_split[i]):
                matchObj = re.match('    (Last link state change time): (.*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)

        ###########################################################
        # 去除Interface IPv6 address is:
        # No IPv6 address
        #############################################################
        for i in range(length):
            if re.match(r'  Interface IPv6 address', show_info_split[i]):
                matchObj = re.match('  (Interface IPv6 address) is:', show_info_split[i])
                key = matchObj.group(1)
                vaule = show_info_split[i + 1]
                key = key.lstrip()
                key = key.rstrip()
                value = vaule.lstrip()
                value = value.rstrip()
                dict_value[key] = value
                show_info_split.remove(show_info_split[i + 1])
                show_info_split.remove(show_info_split[i])
                break
        ################################################################
        # 去除 Index(dec):4097 (hex):1001
        #####################################################################
        length = len(show_info_split)
        for i in range(length):
            if re.match('Index', show_info_split[i]):
                matchObj = re.match('(.*):(\d*) (.*):(\d*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                dict_value[matchObj.group(3)] = matchObj.group(4)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match('ifindex', show_info_split[i]) and re.match('(.*):(\d*) (.*):(\d*)', show_info_split[i]):
                matchObj = re.match('(.*):(\d*) (.*):(\d*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                dict_value[matchObj.group(3)] = matchObj.group(4)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        #########################################################################
        # 去除 Keepalive interval is 10 sec , set
        #############################################################################
        for i in range(length):
            if re.match(r'  Keepalive interval', show_info_split[i]):
                matchObj = re.match('  (Keepalive interval) is (.*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        ##########################################################################
        # 以逗号为分隔号重新组合成字符串 newString
        ###########################################################################
        newString = ' '
        for i in range(length):
            newString = newString + show_info_split[i] + ','
        #################################################################################
        #   开始处理
        ##############################################################################
        length = len(show_info_split)
        #########################################################################
        # 去除 Keepalive interval is 10 sec , set
        #############################################################################
        for i in range(length):
            if re.match(r'Input packets\s+(\d+)\s+Input bytes\s+(\d+)', show_info_split[i].strip()):
                obj_1 = re.match(r'Input packets\s+(\d+)\s+Input bytes\s+(\d+)', show_info_split[i].strip())
                dict_value["Input packets"] = obj_1.group(1)
                dict_value["Input bytes"] = obj_1.group(2)
            if re.match(r'Input broadcasts\s+(\d+)\s+Input multicasts\s+(\d+)', show_info_split[i].strip()):
                obj_1 = re.match(r'Input broadcasts\s+(\d+)\s+Input multicasts\s+(\d+)', show_info_split[i].strip())
                dict_value["Input broadcasts"] = obj_1.group(1)
                dict_value["Input multicasts"] = obj_1.group(2)
            if re.match(r'Input unicasts\s+(\d+)', show_info_split[i].strip()):
                obj_1 = re.match(r'Input unicasts\s+(\d+)', show_info_split[i].strip())
                dict_value["Input unicasts"] = obj_1.group(1)
            if re.match(r'Output packets\s+(\d+)\s+Output bytes\s+(\d+)', show_info_split[i].strip()):
                obj_1 = re.match(r'Output packets\s+(\d+)\s+Output bytes\s+(\d+)', show_info_split[i].strip())
                dict_value["Output packets"] = obj_1.group(1)
                dict_value["Output bytes"] = obj_1.group(2)

        dut_info_split = newString.split(',')
        length = len(dut_info_split)
        for i in range(length):
            if re.search(r'(.*):(.*)', dut_info_split[i]):
                if "BFD Status:" in dut_info_split[i]:
                    continue
                if re.search(r'(.*)is:(.*)', dut_info_split[i]):
                    type1 = re.search(r'(.*)is:(.*)', dut_info_split[i])
                    key = type1.group(1)
                    value = type1.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
                else:
                    type1 = re.search(r'(.*):(.*)', dut_info_split[i])
                    key = type1.group(1)
                    value = type1.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.replace("bits/sec", "").lstrip()
                    value = value.replace("bits/sec", "").rstrip()
                    dict_value[key] = value
            elif re.match(r'(.*) is (.*)', dut_info_split[i]):
                if re.match(r' address is', dut_info_split[i]):
                    type2 = re.match(r' (address) is (.*) \(bia .*\)', dut_info_split[i])
                    dict_value[type2.group(1)] = type2.group(2)
                else:
                    type2 = re.match(r'(.*) is (.*)', dut_info_split[i])
                    key = type2.group(1)
                    value = type2.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
            elif re.search(r'(MTU|BW|loopback) (.*)', dut_info_split[i]):
                type3 = re.search(r'(MTU|BW|loopback) (.*)', dut_info_split[i])
                key = type3.group(1)
                value = type3.group(2)
                key = key.lstrip()
                key = key.rstrip()
                value = value.lstrip()
                value = value.rstrip()
                dict_value[key] = value
                if re.search("BW \d+ Kbit", dut_info_split[i]):
                    bw_value = re.search("BW (\d+) Kbit", dut_info_split[i]).group(1)
                    dict_value["BW_value"] = bw_value
            elif re.match('.*input errors.*', dut_info_split[i]):
                mainobj = re.match('(.*)(input errors).*', dut_info_split[i])
                vaule = mainobj.group(1).strip()
                key = mainobj.group(2).strip()
                dict_value[key] = vaule
            elif re.match('.*CRC.*', dut_info_split[i]):
                mainobj = re.match('(.*)(CRC).*', dut_info_split[i])
                vaule = mainobj.group(1).strip()
                key = mainobj.group(2).strip()
                dict_value[key] = vaule
            elif re.match('.*frame.*', dut_info_split[i]):
                mainobj = re.match('(.*)(frame).*', dut_info_split[i])
                vaule = mainobj.group(1).strip()
                key = mainobj.group(2).strip()
                dict_value[key] = vaule
            elif re.match('.*collisions.*', dut_info_split[i]):
                mainobj = re.match('(.*)(collisions).*', dut_info_split[i])
                vaule = mainobj.group(1).strip()
                key = mainobj.group(2).strip()
                dict_value[key] = vaule
        # print dut_info_split
        return dict_value
    def dut_get_show_version(self, show_info):
        """
        Function:show version回显解析函数
        CLI命令:show version
        回显信息示例:
Ruijie#show version 
System description      : Ruijie High-density IPv6 100G Core Routing Switch(S8605E) By Ruijie Networks
System start time       : 2018-05-09 20:33:40
System uptime           : 0:14:48:00
System hardware version : 1.00
System software version : S8600E_RGOS 11.8(2), Release(05162301)
System patch number     : NA
System serial number    : 1234942570013
System boot version     : 1.2.25
Module information:
  Slot 2/M1 : M18010-CM
    Hardware version    : 1.00
    Boot version        : 1.2.25
    Software version    : S8600E_RGOS 11.8(2), Release(05162301)
    Serial number       : 1234942570013
  Slot 1/1 : M8600E-24GT20SFP4XS-ED
    Hardware version    : 1.00
    Boot version        : 1.2.14
    Software version    : S8600E_RGOS 11.8(2), Release(05162223)
    Serial number       : G1HL20N000130
  Slot 1/M1 : M8600E-CM
    Hardware version    : 1.10
    Boot version        : 1.2.25
    Software version    : S8600E_RGOS 11.8(2), Release(05162301)
    Serial number       : G1K404P00130A
  Slot 2/1 : M8600E-24GT20SFP4XS-ED
    Hardware version    : 1.00
    Boot version        : 1.2.14
    Software version    : S8600E_RGOS 11.8(2), Release(05162223)
    Serial number       : 1234942570009
  Slot 2/3 : M8600E-24GT20SFP4XS-ED
    Hardware version    : 1.00
    Boot version        : 1.2.14
    Software version    : S8600E_RGOS 11.8(2), Release(05162223)
    Serial number       : 1234942570009

        Returns:
{'Slot 1/M1/Hardware version': '1.10'
'System uptime': '0:14:48:00'
'Slot 2/1/Boot version': '1.2.14'
'System hardware version': '1.00'
'Slot 2/3/Hardware version': '1.00'
'Slot 1/1/Software version': ['S8600E_RGOS 11.8(2)'
'Release(05162223)'], 'Slot 1/1/Hardware version': '1.00'
'Slot 1/M1': 'M8600E-CM'
'Slot 1/M1/Software version': ['S8600E_RGOS 11.8(2)'
'Release(05162301)'], 'System software version': ['S8600E_RGOS 11.8(2)'
'Release(05162301)'], 'Slot 2/3/Boot version': '1.2.14'
'System start time': '2018-05-09 20:33:40'
'Slot 2/3/Software version': ['S8600E_RGOS 11.8(2)'
'Release(05162223)'], 'Slot 2/1/Software version': ['S8600E_RGOS 11.8(2)'
'Release(05162223)'], 'System serial number': '1234942570013'
'System boot version': '1.2.25'
'Slot 2/M1/Serial number': '1234942570013'
'System description': 'Ruijie High-density IPv6 100G Core Routing Switch(S8605E) By Ruijie Networks'
'Slot 2/1/Serial number': '1234942570009'
'Slot 2/3/Serial number': '1234942570009'
'Slot 2/M1': 'M18010-CM'
'Slot 2/M1/Software version': ['S8600E_RGOS 11.8(2)'
'Release(05162301)'], 'System patch number': 'NA'
'Slot 2/M1/Boot version': '1.2.25'
'Slot 2/3': 'M8600E-24GT20SFP4XS-ED'
'Slot 2/1': 'M8600E-24GT20SFP4XS-ED'
'Slot 1/M1/Boot version': '1.2.25'
'Slot 2/M1/Hardware version': '1.00'
'Slot 1/1/Serial number': 'G1HL20N000130'
'Slot 1/1': 'M8600E-24GT20SFP4XS-ED'
'Slot_list': ['Slot 2/M1'
'Slot 1/1'
'Slot 1/M1'
'Slot 2/1'
'Slot 2/3'], 'Slot 1/M1/Serial number': 'G1K404P00130A'
'Slot 2/1/Hardware version': '1.00'
'Slot 1/1/Boot version': '1.2.14'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show version | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        one_key = ''
        value_list = []
        key_list = []
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        length = len(show_info_split)
        for i in range(length):
            if re.match('Module information:', show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        cpu_cheak=0
        for i in range(length):
            if re.match('.*Cpu.*',show_info_split[i]):
                cpu_cheak=1
        if cpu_cheak==0:
            for i in range(length):
                if re.match('  \w', show_info_split[i]):
                    matchObj = re.match('  (.*) : (.*)', show_info_split[i])
                    title = matchObj.group(1).strip()
                    vaule = matchObj.group(2).strip()
                    dict_value[title] = vaule
                    one_key = matchObj.group(1)  ## + '(' + matchObj.group(2) + ')'
                    key_list.append(one_key.strip())
                elif re.match('    \w', show_info_split[i]):
                    if re.search(',', show_info_split[i]):
                        matchObj = re.match('    (.*):(.*),(.*)', show_info_split[i])
                        key = one_key + '/' + matchObj.group(1).strip()
                        value_list.append(matchObj.group(2).strip())
                        value_list.append(matchObj.group(3).strip())
                        dict_value[key] = value_list
                        value_list = []
                    else:
                        matchObj = re.match('    (.*):(.*)', show_info_split[i])
                        key = one_key + '/' + matchObj.group(1).strip()
                        value = matchObj.group(2).strip()
                        dict_value[key] = value
                else:
                    if re.match('.*:.*', show_info_split[i]):
                        if re.search(',', show_info_split[i]):
                            matchObj = re.match('(.*?):(.*),(.*)', show_info_split[i])
                            value_list.append(matchObj.group(2).strip())
                            value_list.append(matchObj.group(3).strip())
                            dict_value[matchObj.group(1).strip()] = value_list
                            value_list = []
                        else:
                            matchObj = re.match('(.*?):(.*)', show_info_split[i])
                            dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
                    else:
                        pass
        elif cpu_cheak==1:
            for i in range(length):
                if re.match('  \w', show_info_split[i]):
                    if re.match('  .*:.*', show_info_split[i]):
                        if re.match('.*Slot.*:.*', show_info_split[i]):
                            matchObj = re.match('.*(Slot.*):(.*)', show_info_split[i])
                            one_key = matchObj.group(1).strip()#+ '(' + matchObj.group(2) + ')'
                            dict_value[matchObj.group(1).strip()]=matchObj.group(2).strip()
                            key_list.append(one_key.strip())
                        elif re.match('.*Cpu.*:.*', show_info_split[i]):
                            matchObj = re.match('.*(Cpu.*):(.*)', show_info_split[i])
                            dict_value[matchObj.group(1).strip()]=matchObj.group(2)
                            continue
                            # matchObj = re.match('.*(Cpu.*):(.*)', show_info_split[i])
                            # one_key = one_key + '/' + matchObj.group(1).strip()#+ '(' + matchObj.group(2) + ')'
                    # elif re.match('')
                elif re.match('    \w', show_info_split[i]):
                    if re.search(',', show_info_split[i]):
                        matchObj = re.match('    (.*):(.*),(.*)', show_info_split[i])
                        key = one_key + '/' + matchObj.group(1).strip()
                        value_list.append(matchObj.group(2).strip())
                        value_list.append(matchObj.group(3).strip())
                        dict_value[key] = value_list
                        value_list = []
                    else:
                        matchObj = re.match('    (.*):(.*)', show_info_split[i])
                        key = one_key + '/' + matchObj.group(1).strip()
                        value = matchObj.group(2).strip()
                        dict_value[key] = value
                else:
                    if re.match('.*:.*', show_info_split[i]):
                        if re.search(',', show_info_split[i]):
                            matchObj = re.match('(.*?):(.*),(.*)', show_info_split[i])
                            value_list.append(matchObj.group(2).strip())
                            value_list.append(matchObj.group(3).strip())
                            dict_value[matchObj.group(1).strip()] = value_list
                            value_list = []
                        else:
                            matchObj = re.match('(.*?):(.*)', show_info_split[i])
                            dict_value[matchObj.group(1).strip()] = matchObj.group(2).strip()
                    else:
                        pass

        dict_value['Slot_list'] = key_list
        return dict_value
    def dut_get_show_bgp_all(self, show_info):
        # 创建字典
        dict_value = {}
        # 按行读取信息，并清除空值清除无用信息头信息尾数据
        show_info_split = show_info.split("\n")
        if re.match(r'.*Ruijie.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*Ruijie.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        if re.match(r'.*Total number of prefixes.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        # （去掉dut_info_split中的空值以及只包含空格符的值）
        for i in dut_info_split:
            if '' in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' ' in dut_info_split:
                dut_info_split.remove(' ')

        # print(dut_info_split)

        title_info = ''
        title_list = []
        vaule_list = []
        for i in range(len(dut_info_split)):
            if re.match('.*Network*', dut_info_split[i]):
                index = i
                title_info = dut_info_split[i]
        vaule_info = dut_info_split[index + 1:]
        #print(vaule_info)
        title_list = []
        title_list = title_info.split(' ')
        for m in range(len(title_list)):
            for i in title_list:
                if '' in title_list:
                    title_list.remove('')
        title_list[1] = title_list[1] + ' ' + title_list[2]
        title_list.remove(title_list[2])
        #print(title_list)
        #print(vaule_info)
        for i in range(len(vaule_info)):
            vaule_info[i] = vaule_info[i].strip('*>')
            if re.match('.*\w+.*', vaule_info[i]):
                #print(vaule_info[i])
                if re.match('.*(\w+).*', vaule_info[i][0]):
                    mainobj = re.match('.*(\w+).*', vaule_info[i][0])
                    vaule_info[i] = vaule_info[i].lstrip(mainobj.group(1))
            vaule_info_info = vaule_info[i].split(' ')
            for k in range(len(vaule_info_info)):
                for i in vaule_info_info:
                    if '' in vaule_info_info:
                        vaule_info_info.remove('')
            vaule_list.append(vaule_info_info)

        Network_list = []
        for i in range(len(vaule_list)):
            for k in range(len(vaule_list[i])):
                if k == 0:
                    Network_list.append(vaule_list[i][k].strip())
                    title1 = vaule_list[i][k].strip()
                else:
                    title2 = title1 + '/' + title_list[k].strip()
                    dict_value[title2] = vaule_list[i][k].strip()
        dict_value['Network_List'] = Network_list

        return dict_value
    def dut_get_show_ip_bgp(self, show_info):
        """
        Function:show ip bgp回显解析函数
        CLI命令:show ip bgp
        回显信息示例:
Ruijie#show ip bgp 
BGP table version is 3, local router ID is 1.1.1.1
Status codes: s suppressed, d damped, h history, * valid, > best, i - internal,
              S Stale, b - backup entry, m - multipath
Origin codes: i - IGP, e - EGP, ? - incomplete

   Network          Next Hop            Metric      LocPrf      Weight Path
*> 2.0.0.0/24       172.16.1.2               0                       0 1 i

Total number of prefixes 1

        Returns:
{'local router ID': '1.1.1.1'
'*> 2.0.0.0/24/Metric': '0'
'*> 2.0.0.0/24/Weight P': '0 1'
'Total number of prefixes': '1'
'Network_list': ['*> 2.0.0.0/24'], '*> 2.0.0.0/24/Next Hop': '172.16.1.2'
'BGP table version': '3'
'*> 2.0.0.0/24/ath': 'i'
'*> 2.0.0.0/24/LocPrf': ''}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip bgp | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_bgp_network(show_info)
    def dut_get_debug_scc_status(self, show_info):
        """
        Function:debug scc status回显解析函数
        CLI命令:debug scc status
        回显信息示例:
Ruijie#debug scc status
================== sccd server info =================
rdnd role       : 2/2.
ready notify    : CLI LSM BRIDGE SS ACLK BRIDGE-READY VFW PGSQL 
aclk-socket info: async - 8, sync - 11, alive - 10. snd_cnt:896. rcv_cnt:896
data sync info  : depend/ready(0x8001e/0x8001e) aclk(req:0) ss(req:0) mac(req:0) pgsql(req:0)
current scc mode: AUTHEN MODE, new mode(AUTHEN MODE).
ability         : 0x3f.
detect_status   :[Global] open, interval:480 min, threshold:0 bytes.
station move    : close.
ipam status     : enable.
dot1x cpp       : set.   author mode:None.
auth reboot     : close.
proc status     : svrid:54 todo-cnt:0 ret-cnt:0.
max wait        : client:-1, cost:61601(ms)
max proc        : client:13, svrid:52, tlvtype:111, ss-cnt:0, aclk-cnt:0 rv:0. cost:3332(ms).
cnt-stat        : web-query-add-arp:[0], web-query-del-arp:[0].
                : add-arp:[0], del-arp:[0].
                : add-mac:[1], del-mac:[0].

        Returns:
{'data sync info/depend/ready': '0x8001e/0x8001e'
'max proc/rv': '0'
'proc status/svrid': '54'
'dot1x cpp/author mode': 'None.'
'data sync info/mac/req': '0'
'aclk-socket info/snd_cnt': '896'
'cnt-stat/web-query-add-arp': '0'
'detect_status/Global/interval': '480 min'
'rdnd role': '2/2'
'max wait/client': '-1'
'add-arp': '0'
'detect_status/Global': 'open'
'aclk-socket info/rcv_cnt': '896'
'station move': 'close'
'aclk-socket info/async': '8'
'max proc/client': '13'
'cnt-stat/web-query-del-arp': '0'
'max proc/tlvtype': '111'
'add-mac': '1'
'del-mac': '0'
'max wait/cost': '61601'
'proc status/ret-cnt': '0'
'del-arp': '0'
'max proc/cost': '3332'
'ability': '0x3f'
'ready notify': 'CLI LSM BRIDGE SS ACLK BRIDGE-READY VFW PGSQL'
'max proc/svrid': '52'
'max proc/ss-cnt': '0'
'ipam status': 'enable'
'aclk-socket info/sync': '11'
'aclk-socket info/alive': '10'
'data sync info/aclk/req': '0'
'auth reboot': 'close'
'data sync info/ss/req': '0'
'dot1x cpp': 'set'
'current scc mode': 'AUTHEN MODE, new mode(AUTHEN MODE)'
'detect_status/Global/480 min': 'threshold'
'proc status/todo-cnt': '0'
'data sync info/pgsql/req': '0'
'max proc/aclk-cnt': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=debug scc status | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        # 创建字典
        dict_value = {}

        # 按行读取信息，并清除空值清除无用信息头信息尾数据
        show_info_split = show_info.split("\n")
        if re.match(r'.*Ruijie.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*=+.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*Ruijie.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        # print(show_info_split)
        # （去掉dut_info_split中的空值以及只包含空格符的值）
        for i in dut_info_split:
            if '' in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' ' in dut_info_split:
                dut_info_split.remove(' ')
        for i in range(len(dut_info_split)):
            dut_info_split[i] = dut_info_split[i].strip()
        #print(dut_info_split)

        for i in range(len(dut_info_split)):
            #print(dut_info_split[i])
            if dut_info_split[i].count(':') == 1:
                if re.match('.*:.*', dut_info_split[i]):
                    mainobj = re.match('(.*):(.*)', dut_info_split[i])
                    dict_value[mainobj.group(1).strip().strip('.')] = mainobj.group(2).strip().strip('.')
                    if mainobj.group(1).strip().strip('.') == "direct vlan max num":
                        dict_value["direct vlan number(global or per interface)"] = mainobj.group(2).strip().strip('.')
                    elif mainobj.group(1).strip().strip('.') == "direct vlan number(global or per interface)":
                        dict_value["direct vlan max num"] = mainobj.group(2).strip().strip('.')
            else:
                if re.match('.*aclk-socket info.*', dut_info_split[i]):
                    mainobj = re.match('.*(aclk-socket info).*:(.*)-(.*),(.*)-(.*),(.*)-(.*)\.(.*):(.*)\.(.*):(.*)',dut_info_split[i])
                    dict_value[mainobj.group(1).strip() + '/' + mainobj.group(2).strip()] = mainobj.group(3).strip()
                    dict_value[mainobj.group(1).strip() + '/' + mainobj.group(4).strip()] = mainobj.group(5).strip()
                    dict_value[mainobj.group(1).strip() + '/' + mainobj.group(6).strip()] = mainobj.group(7).strip()
                    dict_value[mainobj.group(1).strip() + '/' + mainobj.group(8).strip()] = mainobj.group(9).strip()
                    dict_value[mainobj.group(1).strip() + '/' + mainobj.group(10).strip()] = mainobj.group(11).strip()
                elif re.match('.*data sync info.*',dut_info_split[i]):
                    mainobj=re.match('.*(data sync info).*:(.*)\((.*)\)(.*)\((.*):(.*)\)(.*)\((.*):(.*)\)(.*)\((.*):(.*)\)(.*)\((.*):(.*)\)',dut_info_split[i])
                    dict_value[mainobj.group(1).strip()+'/'+mainobj.group(2).strip()]=mainobj.group(3).strip()
                    dict_value[mainobj.group(1).strip()+'/'+mainobj.group(4).strip()+'/'+mainobj.group(5).strip()]=mainobj.group(6).strip()
                    dict_value[mainobj.group(1).strip() + '/' + mainobj.group(7).strip() + '/' + mainobj.group(8).strip()] = mainobj.group(9).strip()
                    dict_value[mainobj.group(1).strip() + '/' + mainobj.group(10).strip() + '/' + mainobj.group(11).strip()] = mainobj.group(12).strip()
                    dict_value[mainobj.group(1).strip() + '/' + mainobj.group(13).strip() + '/' + mainobj.group(14).strip()] = mainobj.group(15).strip()
                elif re.match('.*detect_status.*:.*Global.*',dut_info_split[i]):
                    mainobj=re.match('.*(detect_status).*:.*\[(Global)\](.*),(.*):(.*),(.*):(.*)\.',dut_info_split[i])
                    dict_value[mainobj.group(1).strip()+'/'+mainobj.group(2).strip()]=mainobj.group(3).strip()
                    dict_value[mainobj.group(1).strip() + '/' +mainobj.group(2).strip()+'/' +mainobj.group(4).strip()] = mainobj.group(5).strip()
                    dict_value[mainobj.group(1).strip() + '/' + mainobj.group(2).strip()+'/' +mainobj.group(5).strip()] = mainobj.group(6).strip()
                elif re.match('.*detect_status.*:.*Vlan.*',dut_info_split[i]):
                    mainobj=re.match('.*(detect_status).*:.*\[(Vlan)\](.*),(.*):(.*),(.*):(.*)\.',dut_info_split[i])
                    dict_value[mainobj.group(1).strip()+'/'+mainobj.group(2).strip()]=mainobj.group(3).strip()
                    dict_value[mainobj.group(1).strip() + '/' + mainobj.group(2).strip()+'/' +mainobj.group(4).strip()] = mainobj.group(5).strip()
                    dict_value[mainobj.group(1).strip() + '/' + mainobj.group(2).strip()+'/' +mainobj.group(5).strip()] = mainobj.group(6).strip()
                elif re.match('.*dot1x cpp.*',dut_info_split[i]):
                    mainobj=re.match('.*(dot1x cpp).*:(.*)\.(.*):(.*)',dut_info_split[i])
                    dict_value[mainobj.group(1).strip()]=mainobj.group(2).strip()
                    dict_value[mainobj.group(1).strip()+'/'+mainobj.group(3).strip()]=mainobj.group(4).strip()
                elif re.match('.*proc status.*',dut_info_split[i]):
                    mainobj=re.match('.*(proc status).*:(.*):(.*)\s+(.*):(.*)\s+(.*):(.*)',dut_info_split[i])
                    dict_value[mainobj.group(1).strip()+'/'+mainobj.group(2).strip()]=mainobj.group(3).strip()
                    dict_value[mainobj.group(1).strip() + '/' + mainobj.group(4).strip()] = mainobj.group(5).strip()
                    dict_value[mainobj.group(1).strip() + '/' + mainobj.group(6).strip()] = mainobj.group(7).strip().strip(".")
                elif re.match('.*max wait.*',dut_info_split[i]):
                    mainobj=re.match('.*(max wait).*:(.*):(.*),(.*):(.*)',dut_info_split[i])
                    dict_value[mainobj.group(1).strip()+'/'+mainobj.group(2).strip()]=mainobj.group(3).strip().strip('(ms)')
                    dict_value[mainobj.group(1).strip() + '/' + mainobj.group(4).strip()] = mainobj.group(5).strip().strip('(ms)')
                elif re.match('.*max proc.*', dut_info_split[i]):
                    mainobj = re.match('.*(max proc).*:(.*):(.*),(.*):(.*),(.*):(.*),(.*):(.*),(.*):(.*)\s+(.*):(.*)\.(.*):(.*)\.', dut_info_split[i])
                    dict_value[mainobj.group(1).strip()+'/'+mainobj.group(2).strip()]=mainobj.group(3).strip().strip('(ms)')
                    dict_value[mainobj.group(1).strip() + '/' + mainobj.group(4).strip()] = mainobj.group(5).strip().strip('(ms)')
                    dict_value[mainobj.group(1).strip()+'/'+mainobj.group(6).strip()]=mainobj.group(7).strip().strip('(ms)')
                    dict_value[mainobj.group(1).strip() + '/' + mainobj.group(8).strip()] = mainobj.group(9).strip().strip('(ms)')
                    dict_value[mainobj.group(1).strip()+'/'+mainobj.group(10).strip()]=mainobj.group(11).strip().strip('(ms)')
                    dict_value[mainobj.group(1).strip() + '/' + mainobj.group(12).strip()] = mainobj.group(13).strip().strip('(ms)')
                    dict_value[mainobj.group(1).strip()+'/'+mainobj.group(14).strip()]=mainobj.group(15).strip().strip('(ms)')
                elif re.match('.*cnt-stat.*:.*:\[.*\],.*:\[.*\]\.',dut_info_split[i]):
                    mainobj=re.match('.*(cnt-stat).*:(.*):\[(.*)\],(.*):\[(.*)\]\.',dut_info_split[i])
                    dict_value[mainobj.group(1).strip()+'/'+mainobj.group(2).strip()]=mainobj.group(3).strip()
                    dict_value[mainobj.group(1).strip()+'/'+mainobj.group(4).strip()] = mainobj.group(5).strip()
                elif re.match(':.*:\[.*\],.*:\[.*\]\.',dut_info_split[i]):
                    mainobj=re.match(':(.*):\[(.*)\],(.*):\[(.*)\]\.',dut_info_split[i])
                    dict_value[mainobj.group(1).strip()]=mainobj.group(2).strip()
                    dict_value[mainobj.group(3).strip()] = mainobj.group(4).strip()

        return dict_value
    def dut_get_show_voice_vlan_oui(self,show_info):
        """
        Function:show voice vlan oui回显解析函数
        CLI命令:show voice vlan oui
        回显信息示例:
Ruijie#show voice vlan oui
OUI             Mask            Description                   
--------------- --------------- ------------------------------
0012.3400.0000  ffff.ff00.0000

        Returns:
{"0012.3400.0000/Mask": "ffff.ff00.0000"
"0012.3400.0000/Description": ""
"OUI_list": ["0012.3400.0000"]}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show voice vlan oui | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"OUI")
    def dut_get_show_voice_vlan(self,show_info):
        """
        Function:show voice vlan回显解析函数
        CLI命令:show voice vlan
        回显信息示例:
Ruijie#show voice vlan
Voice VLAN status       : ENABLE
Voice VLAN ID           : 20
Voice VLAN security mode: Security
Voice VLAN aging time   : 1440 minutes
Voice VLAN cos          : 6
Voice VLAN dscp         : 46
Current voice VLAN enabled port mode:
PORT                 MODE
-------------------- ----------
Gi0/9                MANUAL
Gi0/10               MANUAL
Gi0/11               MANUAL

        Returns:
{"Voice VLAN ID": "20"
"Gi0/9/MODE": "MANUAL"
"Voice VLAN cos": "6"
"Voice VLAN dscp": "46"
"Gi0/11/MODE": "MANUAL"
"Voice VLAN aging time": "1440 minutes"
"Voice VLAN status": "ENABLE"
"Current voice VLAN enabled port mode": ""
"PORT_list": ["Gi0/9"
"Gi0/10"
"Gi0/11"], "Voice VLAN security mode": "Security"
"Gi0/10/MODE": "MANUAL"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show voice vlan | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_show_autoget_whippletree_form_analysis(show_info,"PORT",ago_colon_last_str=1)
#by:sw
    def dut_showinfo_remove_prompt_and_newline(self,show_info,cmd_str):
        """
        （不对用户使用）解析的show回显信息中删除空行以及头尾的命令与回显，

        Returns: 返回剔除后的回显信息

        Arguments:
                | show_info              | show回显信息(可选)                                    |
                | cmd_str                | show命令字符串                                    |
        Example:
                | returns   | *Keywords*             |  *Parameters*                             |
                | ${dict}   | showinfo_remove_prompt_and_newline                                 |
        """
        show_info_list_line = show_info.split("\n")
        #show_info_list_line = show_info_list_line.encode('gbk')
        if re.match(r'.*%s.*' % cmd_str,show_info_list_line[0]):#去掉包含show命令字符串的行
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):  #去掉包含hostname#的行
            show_info_list_line.remove(show_info_list_line[-1])

        show_info_list_line = self.dut_showinfo_remove_newline(show_info_list_line)
        print('===>')
        print show_info_list_line
        return show_info_list_line
    def dut_showinfo_remove_newline(self,show_info_list_line):
        """
        （不对用户使用）解析的show回显信息中删除空行，

        Returns: 返回剔除后的回显信息

        Arguments:
                | show_info              | show回显信息(可选)                                    |
        Example:
                | returns   | *Keywords*             |  *Parameters*                             |
                | ${dict}   | showinfo_remove_prompt_and_newline                                 |
        """
        for i in show_info_list_line: #删除每一个空的元素，即删除回显中的空行
            logging.debug(i)
            if '' == i.strip() or i == '!':
                show_info_list_line.remove(i)
        return show_info_list_line
    def dut_showinfo_split_on_colon(self,value_list,dict_value):
        """
        （不对用户使用）解析的show回显信息列表中以冒号分割的信息

        Returns: 返回字典

        Arguments:
                | list_value             | show回显信息列表元素                                |
                | cmd_str                | show命令字符串                                      |
        Example:
                | returns   | *Keywords*             |  *Parameters*                           |
                | ${dict}   | dut_showinfo_split_on_colon                                      |
        """
        for value in value_list:
            logging.debug(value)
            list_value_split = value.split(":",1)   #以冒号分割一次
            key_name = '%s'%(list_value_split[0].strip())
            dict_value[key_name] = list_value_split[1].strip()
        return dict_value
    def dut_showinfo_split_on_is(self,value_list,dict_value):
        """
        （不对用户使用）解析的show回显信息列表中以is为分割的信息

        Returns: 返回字典

        """
        for value in value_list:
            if re.match('(.*)is:{0,1}(.*)', value):
                value_list = value.split('is')
                if value_list[1].strip().startswith(':'):
                    value_list[1] = value_list[1].strip()
                dict_value[value_list[0].strip()] = value_list[1].strip()
        return dict_value
    def dut_showinfo_include_lines_analysiz(self,show_info_list_line,start_col=0,titles=1,key_start=None):
        """
        （不对用户使用）解析的show回显信息列表中包含横线的解析
        start_col：参数中key所起始的列，从0开始
        title：表头信息占了几行，一般是1行（默认），有些是2行，比如show eee interfaces status，只能是1和2
        Returns: 返回字典
        """
        dict = {}
        address_list = []
        cut_flag = 0
        for index,cut_value in enumerate(show_info_list_line):
            cut_flag = cut_flag+1
            if cut_value:
                if re.findall("\s*\-+\s+",cut_value):
                    cut_del = cut_flag
                    col_len_list = []
                    cut_value_list = re.findall("\s*\-+\s+",cut_value)
                    for cut_value_list_value in cut_value_list:
                        col_len_list= col_len_list + [len(cut_value_list_value)]
                    break

        #将最后一位设成固定32位
        logging.debug(col_len_list)
        if show_info_list_line[cut_del-1].rstrip() == show_info_list_line[cut_del-1]:
            col_len_list.append(32)
        show_info_list_line.remove(show_info_list_line[cut_del-1])  #删除带--的行

        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')

        col_list_all_num = len(col_len_list)
        row_list_all_num = len(show_info_list_line)
        title_row =[]
        col_value_list_previous = []
        for i in range(0,row_list_all_num):
            cut_star = 0
            cut_end=0
            col_value_list = []
            for j in range(col_list_all_num):
                cut_end = cut_end+int(col_len_list[j])
                col_value = show_info_list_line[i][cut_star:cut_end]
                cut_star = cut_end
                col_value = col_value.lstrip()
                col_value = col_value.rstrip()
                col_value_list.append(col_value)
            #获取表头的列，用于组合
            if isinstance(start_col,list):
                title_col = ''
                for val in start_col:
                    if title_col:
                        title_col = title_col + '/' + col_value_list[val]
                    else:
                        title_col = col_value_list[val]
            else:
                title_col = col_value_list[start_col]          #需要变参的地方
            if titles == 1:
                if i == 0:
                    if isinstance(start_col,list):
                        value_title = ''
                        for val in start_col:
                            if value_title:
                                value_title = value_title + '/'+ col_value_list[val]
                            else:
                                value_title = col_value_list[val]
                    else:
                        value_title = col_value_list[start_col]
            elif titles == 2:
                logging.debug('====>here')
                if i == 1:
                    col_value_lists = []
                    for index_col in range(0,len(col_value_list)):
                        col_value_lists.append(col_value_list_previous[index_col].strip() + ' '+ col_value_list[index_col].strip())
                    # col_value_list = col_value_lists
                    logging.debug(col_value_lists)
                    if isinstance(start_col,list):
                        value_title = ''
                        for val in start_col:
                            if value_title:
                                value_title = value_title + '/'+ col_value_lists[val]
                            else:
                                value_title = col_value_lists[val]
                    else:
                        value_title = col_value_lists[start_col]
                if i == 0:
                    col_value_list_previous = col_value_list
            if titles==1 or (titles==2 and i>=2):
                logging.debug('====>titile_col')
                logging.debug(title_col)
                logging.debug('====>value_title')
                logging.debug(value_title)
                if titles == 2:
                    title_row = col_value_lists
                elif titles==1 and title_col == value_title:
                    title_row = col_value_list
                logging.debug('titile row===>')
                logging.debug(title_row)
                if title_col != value_title:
                    address_list.append(title_col)
                    #遍历列头右边的值
                    if isinstance(start_col,list):
                        start_index = sorted(start_col)[-1]
                    else:
                        start_index = start_col
                    for s in range(start_index+1,col_list_all_num):  #需要变参的地方
                        if key_start:
                            key_name = '%s/%s/%s'%(key_start,title_col,title_row[s])
                        else:
                            key_name = '%s/%s'%(title_col,title_row[s])
                        dict[key_name]=col_value_list[s]
                    ##遍历列头右边的值
                    if key_start:
                        key_name =  '%s/%s/%s'%(key_start,title_col, title_row[0])
                    else:
                        key_name = '%s/%s' % (title_col, title_row[0])
                    dict[key_name]=col_value_list[0]
                dict["%s_list" % value_title.replace(' ','_')]=address_list
        return dict
    #========fengexian
    #  A:B
    def dut_get_show_vxlan(self,show_info):
        """
        Function:show vxlan回显解析函数
        CLI命令:show vxlan
        回显信息示例:
Ruijie#show vxlan
    VXLAN Total Count: 2
    VXLAN Capacity   : 2000
    
    VXLAN 10
        Symmetric property  : FALSE
        Router Interface    : overlayrouter 10 (anycast)
        Extend VLAN         : 10
        VTEP Adjacency Count: 1
        VTEP Adjacency List :
        Interface              Source IP                                      Destination IP                                 Type
    ---------------------- ---------------------------------------------- ---------------------------------------------- -------
        OverlayTunnel 6145     2.2.2.2                                        1.1.1.1                                        dynamic
    
    VXLAN 20
        Symmetric property  : FALSE
        Router Interface    : overlayrouter 20 (anycast)
        Extend VLAN         : 20
        VTEP Adjacency Count: 1
        VTEP Adjacency List :
        Interface              Source IP                                      Destination IP                                 Type
    ---------------------- ---------------------------------------------- ---------------------------------------------- -------
        OverlayTunnel 6145     2.2.2.2                                        1.1.1.1                                        dynamic

        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show vxlan | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show vxlan'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_split_on_colon(show_info_list_line[0:2],dict_value)
        show_info_list_line = show_info_list_line[2:]  #删除前两行
        logging.debug(show_info_list_line)
        while show_info_list_line:  #如果此时不为空，长度至少为5
            if re.match('^VXLAN\s+\d+',show_info_list_line[0]):  #VXLAN xxx开头
                logging.debug('VXLAN===>start')
                title = show_info_list_line[0]
                for i in range(1,5):
                    logging.debug('===> 4 lines after VXLAN')
                    list_value = show_info_list_line[i]
                    list_value_split = list_value.split (":",1)   #以冒号分割一次
                    key_name = '%s/%s'% (show_info_list_line[0].lstrip().rstrip(),list_value_split[0].lstrip().rstrip().replace("\r",""))
                    dict_value[key_name] = list_value_split[1].lstrip().rstrip().replace("\r","")
                try:
                    show_info_list_line[5]
                except:
                    break
                if 'VTEP Adjacency Count' in show_info_list_line[5]:
                    logging.debug('VTEP Adjacency Count===>start')
                    key_name = '%s/%s'% (show_info_list_line[0].lstrip().rstrip(),'VTEP Adjacency Count')
                    dict_value[key_name] = show_info_list_line[5].split(":",1)[1].lstrip().rstrip()
                    show_info_list_line = show_info_list_line[6:]
                elif 'Type' in show_info_list_line[5]:
                    for i in range(5,8):
                        logging.debug('===> 3 lines after Type')
                        list_value = show_info_list_line[i]
                        list_value_split = list_value.split (":",1)   #以冒号分割一次
                        key_name = '%s/%s'% (show_info_list_line[0].strip(),list_value_split[0].strip())
                        dict_value[key_name] = list_value_split[1].strip()
                    show_info_list_line = show_info_list_line[8:]
                elif 'Extend VLAN' in show_info_list_line[5]:
                    for i in range(5,7):
                        logging.debug('===> 3 lines after Type')
                        list_value = show_info_list_line[i]
                        list_value_split = list_value.split (":",1)   #以冒号分割一次
                        key_name = '%s/%s'% (show_info_list_line[0].strip(),list_value_split[0].strip())
                        dict_value[key_name] = list_value_split[1].strip()
                    show_info_list_line = show_info_list_line[7:]
                else:
                    show_info_list_line = show_info_list_line[5:]

            elif re.match('\s+VTEP Adjacency List',show_info_list_line[0]):
                logging.debug('VTEP Adjacency List===>start')
                value_list = []  #每次循环需要置空，否则列表一直递增
                value_list = value_list + show_info_list_line[1:4]
                for e_index in range(4,len(show_info_list_line)):  #此处的上限应该与vxlan底下可关联的overlaytunnel口的数量相等
                    if 'OverlayTunnel' in show_info_list_line[e_index]:
                        value_list = value_list + [show_info_list_line[e_index]]
                    else:
                        break
                dict = self.dut_showinfo_include_lines_analysiz(value_list)
                key_name = '%s/%s'% (title.lstrip().rstrip(),'VTEP Adjacency List')
                for key,value in dict.items():
                    new_key = key_name + '/'+ key
                    dict_value[new_key] = value
                try:
                    show_info_list_line = show_info_list_line[e_index:]
                except:
                    show_info_list_line = []
        return dict_value
    def dut_get_show_vxlan_num(self,show_info):
        """
        Function:show vxlan 100回显解析函数
        CLI命令:show vxlan 100
        回显信息示例:
Ruijie#show vxlan 100
    VXLAN 100
        Symmetric property  : TRUE
        Router Interface    : overlayrouter 100 (anycast)
        Extend VLAN         : -
        VTEP Adjacency Count: 1
        VTEP Adjacency List :
        Interface              Source IP                                      Destination IP                                 Type
    ---------------------- ---------------------------------------------- ---------------------------------------------- -------
        OverlayTunnel 6145     1.1.1.1                                        2.2.2.2                                        dynamic
    
    Ruijie#

        Returns:
{"VXLAN 100/VTEP Adjacency List/OverlayTunnel 6145/Destination IP": "2.2.2.2"
"VXLAN 100/VTEP Adjacency List/OverlayTunnel 6145/Type": "dynamic"
"VXLAN 100/VTEP Adjacency List/OverlayTunnel 6145/Source IP": "1.1.1.1"
"VXLAN 100/Router Interface": "overlayrouter 100 (anycast)"
"VXLAN 100/Symmetric property": "TRUE"
"VXLAN 100/VTEP Adjacency List/OverlayTunnel 6145/Interface": "OverlayTunnel 6145"
"VXLAN 100/VTEP Adjacency Count": "1"
"VXLAN 100/VTEP Adjacency List/Interface_list": ["OverlayTunnel 6145"], "VXLAN 100/Extend VLAN": "-"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show vxlan 100 | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show vxlan'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        logging.debug(show_info_list_line)
        title = show_info_list_line[0]
        for i in range(1,5):
            logging.debug('===> 4 lines after VXLAN')
            list_value = show_info_list_line[i]
            list_value_split = list_value.split (":",1)   #以冒号分割一次
            key_name = '%s/%s'% (show_info_list_line[0].strip(),list_value_split[0].strip())
            dict_value[key_name] = list_value_split[1].strip()
        try:
            show_info_list_line[5]
        except:
            return dict_value
        if 'VTEP Adjacency Count' in show_info_list_line[5]:
            logging.debug('VTEP Adjacency Count===>start')
            key_name = '%s/%s'% (show_info_list_line[0].strip(),'VTEP Adjacency Count')
            dict_value[key_name] = show_info_list_line[5].split(":",1)[1].strip()
            i = 5
        elif 'Type' in show_info_list_line[5]:
            for i in range(5,8):
                logging.debug('===> 3 lines after Type')
                list_value = show_info_list_line[i]
                list_value_split = list_value.split (":",1)   #以冒号分割一次
                key_name = '%s/%s'% (show_info_list_line[0].strip(),list_value_split[0].strip())
                dict_value[key_name] = list_value_split[1].strip()
        elif 'Extend VLAN' in show_info_list_line[5]:
            for i in range(5,7):
                logging.debug('===> 3 lines after Extend VLAN')
                list_value = show_info_list_line[i]
                list_value_split = list_value.split (":",1)   #以冒号分割一次
                key_name = '%s/%s'% (show_info_list_line[0].strip(),list_value_split[0].strip())
                dict_value[key_name] = list_value_split[1].strip()
        logging.debug('VTEP Adjacency List===>start')
        value_list = show_info_list_line[i+2:]
        logging.debug(value_list)
        dict = self.dut_showinfo_include_lines_analysiz(value_list)
        key_name = '%s/%s'% (title.strip(),'VTEP Adjacency List')
        for key,value in dict.items():
            new_key = key_name + '/'+ key
            dict_value[new_key] = value
        return dict_value
    def dut_get_show_vxlan_mode(self,show_info):
        """
        Auther: 王晓敏

        Functions：show vxlan mode

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show vxlan mode'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_split_on_colon(show_info_list_line,dict_value)
        return dict_value
    def dut_get_show_vxlan_mac(self,show_info):
        """
        Function:show vxlan mac回显解析函数
        CLI命令:show vxlan mac
        回显信息示例:
TOR1#show vxlan mac

Vxlan       MAC Address          Type     Location Interface                      Vlan
----------  -------------------- -------- -------- ------------------------------ ------
      10    0011.9400.0002       DYNAMIC  LOCAL    AggregatePort 1                10     
      10    0011.9400.0003       DYNAMIC  LOCAL    AggregatePort 1                10     
      10    0011.9400.0004       DYNAMIC  LOCAL    AggregatePort 1                10     
      10    0021.9400.0002       PROTOCOL REMOTE   OverlayTunnel 6145             -      
      10    0021.9400.0003       PROTOCOL REMOTE   OverlayTunnel 6145             -      
      10    0021.9400.0004       PROTOCOL REMOTE   OverlayTunnel 6145             -      
      20    0012.9400.0002       DYNAMIC  LOCAL    AggregatePort 1                20     
      20    0012.9400.0003       DYNAMIC  LOCAL    AggregatePort 1                20     
      20    0012.9400.0004       DYNAMIC  LOCAL    AggregatePort 1                20     
      20    0022.9400.0002       PROTOCOL REMOTE   OverlayTunnel 6145             -      
      20    0022.9400.0003       PROTOCOL REMOTE   OverlayTunnel 6145             -      
      20    0022.9400.0004       PROTOCOL REMOTE   OverlayTunnel 6145             -      
     400    5869.6c9f.7418       PROTOCOL REMOTE   OverlayTunnel 6145             -      
     500    5869.6c9f.7418       PROTOCOL REMOTE   OverlayTunnel 6145             -

        Returns:
{'10/0011.9400.0002/Interface': 'AggregatePort 1'
'20/0012.9400.0004/Vxlan': '20'
'500/5869.6c9f.7418/Vlan': '-'
'10/0011.9400.0002/Type': 'DYNAMIC'
'10/0021.9400.0002/Interface': 'OverlayTunnel 6145'
'10/0021.9400.0004/Vlan': '-'
'10/0021.9400.0002/Vxlan': '10'
'400/5869.6c9f.7418/Vlan': '-'
'10/0021.9400.0003/Location': 'REMOTE'
'10/0021.9400.0003/Vlan': '-'
'10/0011.9400.0003/Vlan': '10'
'10/0011.9400.0004/Vlan': '10'
'20/0012.9400.0003/Location': 'LOCAL'
'500/5869.6c9f.7418/Location': 'REMOTE'
'10/0021.9400.0002/Location': 'REMOTE'
'20/0012.9400.0002/Interface': 'AggregatePort 1'
'20/0022.9400.0003/Location': 'REMOTE'
'10/0011.9400.0004/Interface': 'AggregatePort 1'
'20/0022.9400.0002/Type': 'PROTOCOL'
'20/0012.9400.0002/Type': 'DYNAMIC'
'400/5869.6c9f.7418/Interface': 'OverlayTunnel 6145'
'20/0022.9400.0004/Interface': 'OverlayTunnel 6145'
'10/0021.9400.0002/Vlan': '-'
'20/0022.9400.0004/Type': 'PROTOCOL'
'20/0012.9400.0003/Vlan': '20'
'20/0012.9400.0004/Vlan': '20'
'400/5869.6c9f.7418/Location': 'REMOTE'
'10/0011.9400.0002/Vlan': '10'
'10/0011.9400.0004/Type': 'DYNAMIC'
'20/0022.9400.0004/Location': 'REMOTE'
'20/0022.9400.0003/Interface': 'OverlayTunnel 6145'
'20/0012.9400.0004/Location': 'LOCAL'
'10/0021.9400.0003/Type': 'PROTOCOL'
'20/0022.9400.0004/Vlan': '-'
'10/0011.9400.0004/Location': 'LOCAL'
'10/0011.9400.0002/Vxlan': '10'
'10/0021.9400.0002/Type': 'PROTOCOL'
'10/0021.9400.0003/Vxlan': '10'
'10/0011.9400.0003/Vxlan': '10'
'20/0022.9400.0002/Vlan': '-'
'10/0011.9400.0002/Location': 'LOCAL'
'20/0022.9400.0003/Vlan': '-'
'20/0012.9400.0004/Interface': 'AggregatePort 1'
'20/0022.9400.0002/Location': 'REMOTE'
'10/0021.9400.0004/Type': 'PROTOCOL'
'10/0021.9400.0004/Interface': 'OverlayTunnel 6145'
'20/0012.9400.0004/Type': 'DYNAMIC'
'10/0011.9400.0003/Interface': 'AggregatePort 1'
'10/0011.9400.0003/Type': 'DYNAMIC'
'500/5869.6c9f.7418/Vxlan': '500'
'10/0021.9400.0004/Location': 'REMOTE'
'20/0012.9400.0002/Vxlan': '20'
'400/5869.6c9f.7418/Type': 'PROTOCOL'
'10/0011.9400.0004/Vxlan': '10'
'10/0021.9400.0004/Vxlan': '10'
'500/5869.6c9f.7418/Interface': 'OverlayTunnel 6145'
'20/0012.9400.0003/Vxlan': '20'
'20/0012.9400.0002/Location': 'LOCAL'
'500/5869.6c9f.7418/Type': 'PROTOCOL'
'10/0021.9400.0003/Interface': 'OverlayTunnel 6145'
'Vxlan/MAC_Address_list': ['10/0011.9400.0002'
'10/0011.9400.0003'
'10/0011.9400.0004'
'10/0021.9400.0002'
'10/0021.9400.0003'
'10/0021.9400.0004'
'20/0012.9400.0002'
'20/0012.9400.0003'
'20/0012.9400.0004'
'20/0022.9400.0002'
'20/0022.9400.0003'
'20/0022.9400.0004'
'400/5869.6c9f.7418'
'500/5869.6c9f.7418'], '20/0022.9400.0003/Type': 'PROTOCOL'
'20/0022.9400.0004/Vxlan': '20'
'20/0012.9400.0002/Vlan': '20'
'20/0022.9400.0002/Interface': 'OverlayTunnel 6145'
'10/0011.9400.0003/Location': 'LOCAL'
'400/5869.6c9f.7418/Vxlan': '400'
'20/0022.9400.0003/Vxlan': '20'
'20/0022.9400.0002/Vxlan': '20'
'20/0012.9400.0003/Interface': 'AggregatePort 1'
'20/0012.9400.0003/Type': 'DYNAMIC'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show vxlan mac | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show vxlan mac'
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_include_lines_analysiz(show_info_list_line,start_col=[0,1])
        return dict_value
    def dut_get_show_vxlan_udpport(self,show_info):
        """
        Function:show vxlan udp-port回显解析函数
        CLI命令:show vxlan udp-port
        回显信息示例:
Ruijie#show vxlan udp-port
    VXLAN UDP Destination Port: 0

        Returns:
{"VXLAN UDP Destination Port": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show vxlan udp-port | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show vxlan udp-port'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_split_on_colon(show_info_list_line,dict_value)
        return dict_value
    def dut_get_show_vxlan_global(self,show_info):
        """
        Function:show vxlan global回显解析函数
        CLI命令:show vxlan global
        回显信息示例:
Ruijie#show vxlan global
    Local switch vtep ip: 1111::1111
      Binds with interface loopback 0, line protocol is UP.
    Anycast mac: 0000.1111.2222 .
      2 overlayrouters enable anycast .
    
    capacity:
      CAP_BASE: ON
      CAP_BRIDGE: ON
      CAP_ROUTE: ON
      CAP_OUTSIDECENTER: ON
      CAP_DSCP: OFF
      CAP_UDPPORT: ON
      CAP_L2VNIMAPPING: OFF
      CAP_VNISTATISTICS: OFF
      CAP_STATISTICS: OFF
      CAP_TUNNELCOUNTER: OFF
      CAP_VNISTORM: OFF
      CAP_TUNNELSTORM: OFF
      CAP_TUNNELRATELIMIT: ON
      CAP_VNIARPSUPRESS: ON
      CAP_ARPSUPRESS: ON
      CAP_L3VNIMAPPING: OFF
      CAP_REMOTEYANG: ON
      CAP_VNINDSUPRESS: ON
      CAP_NDSUPRESS: ON
      CAP_FWDMODESOFT: OFF
      CAP_L2SUBIF: ON
      CAP_TUNNELV6: ON
    Ruijie#

        Returns:
{"Binds with interface": "loopback 0", "Anycast mac": "0000.1111.2222", "line protocol": "UP", "overlayrouters enable anycast": "2", "Local switch vtep ip": "111"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show vxlan global | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show vxlan global'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        for show_info in show_info_list_line:
            if show_info.find('VXLAN GATEWAY SYNCHRONIZE') != -1:
                dict_value[show_info.split('is')[0].strip()] = show_info.split('is')[1].strip()
            if show_info.find('No anycast mac') != -1:
                dict_value['AnyCast mac'] = None
            if show_info.find('Anycast mac:') != -1:
                dict_value[show_info.split(':')[0].strip()] = show_info.split(':')[1][:-1].strip()
            if show_info.find('overlayrouters enable anycast ') != -1:
                value = re.search('\d+',show_info).group(0)
                dict_value['overlayrouters enable anycast'] = value
            if show_info.find('Local switch hasn\'t set vtep ip') != -1:
                dict_value['Local switch vtep ip'] = None
            if show_info.find('Local switch vtep ip:') != -1:
                dict_value['Local switch vtep ip'] = show_info.split(':')[1][:-1].strip()
            if show_info.find('Binds with interface') != -1:
                intf = re.search('interface\s+(.*),',show_info).group(1)
                stat = re.search('line protocol is\s+(\w+).',show_info).group(1)
                dict_value['Binds with interface'] = intf
                dict_value['line protocol'] = stat
        return dict_value
    def dut_get_show_mgmt_virtual(self,show_info):
        """
        Auther: 王晓敏

        Functions：show mgmt virtual

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show mgmt virtual'
        dict_value = {}
        # mgmt_list = re.findall('Mgmt \d/{0,1}\d{0,1}',show_info,re.M)
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        for index in range(0,len(show_info_list_line),9):
            key_start = show_info_list_line[index].strip()
            logging.debug(key_start)
            for i in range(1,9):
                if i==1 or i==4:
                    continue
                else:
                    key_end = show_info_list_line[i].split(':')[0].strip()
                    value = show_info_list_line[i].split(':')[1].strip()
                    key_name = key_start + '/'+ key_end
                    dict_value[key_name] = value
        return dict_value
    def dut_get_show_aggregateport_capacity(self,show_info):
        """
        Function:show aggregatePort capacity回显解析函数
        CLI命令:show aggregatePort capacity
        回显信息示例:
DUT1(config)#show aggregatePort capacity 
AggregatePort Capacity Information:
Configuration Capacity Mode: 256*8.
Effective Capacity Mode    : 256*8.
Available Capacity         : 256*8.
Total Number: 256, Used: 1, Available: 255.
DUT1(config)#

        Returns:
{'Available': '255.'
'Used': '1'
'Effective Capacity Mode': '256*8.'
'Configuration Capacity Mode': '256*8.'
'Total Number': '256'
'Available Capacity': '256*8.'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show aggregatePort capacity | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        for show_info in show_info_list_line:
            if show_info.find('AggregatePort Capacity Information') != -1:
                show_info_list_line.remove(show_info)
                break
        for show_info in show_info_list_line:
            if show_info.find('Total Number') != -1:
                value_list = show_info.split(',')
                for value in value_list:
                    key = value.split(':')[0].strip()
                    dict_value[key] = value.split(':')[1].strip()
                show_info_list_line.remove(show_info)
                break
        dict_value = self.dut_showinfo_split_on_colon(show_info_list_line,dict_value)
        return dict_value
    def dut_get_show_loadbalanceprofile(self,show_info):
        """
        Function:show load-balance-profile回显解析函数
        CLI命令:show load-balance-profile
        回显信息示例:
Ruijie#show load-balance-profile
Load-balance-profile: default
Packet    Hash Field:
    IPV4: src-ip dst-ip l4-src-port l4-dst-port
    IPV6: src-ip dst-ip l4-src-port l4-dst-port
    L2  : src-mac dst-mac
    MPLS: top-label 2nd-label
    TRILL: src-mac dst-mac vlan
    FCOE: src-id dst-id ox-id
Ruijie#

        Returns:
{"TRILL": "src-mac dst-mac vlan"
"MPLS": "top-label 2nd-label"
"FCOE": "src-id dst-id ox-id"
"L2": "src-mac dst-mac"
"IPV4": "src-ip dst-ip l4-src-port l4-dst-port"
"IPV6": "src-ip dst-ip l4-src-port l4-dst-port"
"Load-balance-profile": "default"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show load-balance-profile | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show load-balance-profile'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        for show_info in show_info_list_line:
            if show_info.find('Packet    Hash Field') != -1:
                show_info_list_line.remove(show_info)
                break
        dict_value = self.dut_showinfo_split_on_colon(show_info_list_line,dict_value)
        return dict_value
    def dut_get_show_eee_interface_dutport(self,show_info):
        """
        Auther: 王晓敏

        Functions：show eee interface xx

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show eee interface'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_split_on_colon(show_info_list_line,dict_value)
        return dict_value
    def dut_get_show_l2protocoltunnel_gvrp(self,show_info):
        """
        Function:show l2protocol-tunnel gvrp回显解析函数
        CLI命令:show l2protocol-tunnel gvrp
        回显信息示例:
Ruijie#show l2protocol-tunnel gvrp

L2protocol-tunnel: Gvrp Disable
L2protocol-tunnel destination mac address:01d0.f800.0006
Ruijie#

        Returns:
{"L2protocol-tunnel destination mac address": "01d0.f800.0006"
"L2protocol-tunnel": "Gvrp Disable"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show l2protocol-tunnel gvrp | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show l2protocol-tunnel'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_split_on_colon(show_info_list_line,dict_value)
        return dict_value
    def dut_get_show_l2protocoltunnel_stp(self,show_info):
        """
        Function:show l2protocol-tunnel stp回显解析函数
        CLI命令:show l2protocol-tunnel stp
        回显信息示例:
Ruijie#show l2protocol-tunnel stp

L2protocol-tunnel: stp Disable
L2protocol-tunnel destination mac address: 01d0.f800.0005
Ruijie#

        Returns:
{"L2protocol-tunnel destination mac address": "01d0.f800.0005"
"L2protocol-tunnel": "stp Disable"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show l2protocol-tunnel stp | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show l2protocol-tunnel'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_split_on_colon(show_info_list_line,dict_value)
        return dict_value
    def dut_get_show_mls_qos_scheduler(self,show_info):
        """
        Function:show mls qos scheduler回显解析函数
        CLI命令:show mls qos scheduler
        回显信息示例:
S57X#show mls qos scheduler
Global Multi-Layer Switching scheduling:
Deficit Round Robin

        Returns:
{"Global Multi-Layer Switching scheduling": "Deficit Round Robin"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mls qos scheduler | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show mls qos'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        key = show_info_list_line[0][:-1]
        dict_value[key] = show_info_list_line[1].strip()
        return dict_value
    #======fengexian
    #--- ------ ----
    def dut_get_show_cpuprotect_type_type(self,show_info):
        """
        Function:show cpu-protect type type回显解析函数
        CLI命令:show cpu-protect type type
        回显信息示例:


        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show cpu-protect type type | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show cpu-protect'
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        logging.debug(show_info_list_line)
        dict_value = self.dut_showinfo_include_lines_analysiz(show_info_list_line)
        return dict_value
    def dut_get_show_eee_interfaces_status(self,show_info):
        """
        Function:show eee interfaces status回显解析函数
        CLI命令:show eee interfaces status
        回显信息示例:
Ruijie#show eee interfaces status
Interface  EEE      Admin     Oper      Remote    Trouble
           Support  Status    Status    Status    Cause
---------- -------- --------- --------- --------- -----------------------
Gi0/1      Yes      Disable   Disable   Disable   Link Down               
Gi0/2      Yes      Disable   Disable   Disable   Link Down               
Gi0/3      Yes      Disable   Disable   Disable   Link Down               
Gi0/4      Yes      Disable   Disable   Disable   Link Down               
Gi0/5      Yes      Disable   Disable   Disable   Link Down               
Gi0/6      Yes      Disable   Disable   Disable   Link Down               
Gi0/7      Yes      Disable   Disable   Disable   Link Down               
Gi0/8      Yes      Disable   Disable   Disable   Link Down                           
Ruijie#

        Returns:
{"Gi0/6/Remote Status": "Disable"
"Gi0/7/Oper Status": "Disable"
"Gi0/5/Remote Status": "Disable"
"Gi0/2/EEE Support": "Yes"
"Gi0/1/Remote Status": "Disable"
"Gi0/1/EEE Support": "Yes"
"Gi0/2/Remote Status": "Disable"
"Gi0/3/EEE Support": "Yes"
"Gi0/5/EEE Support": "Yes"
"Gi0/3/Trouble Cause": "Link Down"
"Gi0/2/Interface ": "Gi0/2"
"Gi0/8/Trouble Cause": "Link Down"
"Gi0/8/Admin Status": "Disable"
"Gi0/8/Interface ": "Gi0/8"
"Gi0/7/Remote Status": "Disable"
"Gi0/5/Interface ": "Gi0/5"
"Gi0/2/Oper Status": "Disable"
"Gi0/5/Oper Status": "Disable"
"Gi0/1/Trouble Cause": "Link Down"
"Gi0/4/Oper Status": "Disable"
"Gi0/8/Oper Status": "Disable"
"Gi0/8/Remote Status": "Disable"
"Gi0/3/Admin Status": "Disable"
"Gi0/4/Remote Status": "Disable"
"Gi0/6/Interface ": "Gi0/6"
"Gi0/8/EEE Support": "Yes"
"Gi0/3/Oper Status": "Disable"
"Interface__list": ["Gi0/1"
"Gi0/2"
"Gi0/3"
"Gi0/4"
"Gi0/5"
"Gi0/6"
"Gi0/7"
"Gi0/8"], "Gi0/4/EEE Support": "Yes"
"Gi0/6/EEE Support": "Yes"
"Gi0/5/Trouble Cause": "Link Down"
"Gi0/6/Oper Status": "Disable"
"Gi0/7/EEE Support": "Yes"
"Gi0/6/Trouble Cause": "Link Down"
"Gi0/7/Admin Status": "Disable"
"Gi0/1/Interface ": "Gi0/1"
"Gi0/5/Admin Status": "Disable"
"Gi0/4/Interface ": "Gi0/4"
"Gi0/1/Oper Status": "Disable"
"Gi0/4/Admin Status": "Disable"
"Gi0/1/Admin Status": "Disable"
"Gi0/6/Admin Status": "Disable"
"Gi0/3/Interface ": "Gi0/3"
"Gi0/4/Trouble Cause": "Link Down"
"Gi0/7/Interface ": "Gi0/7"
"Gi0/7/Trouble Cause": "Link Down"
"Gi0/3/Remote Status": "Disable"
"Gi0/2/Admin Status": "Disable"
"Gi0/2/Trouble Cause": "Link Down"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show eee interfaces status | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show eee interfaces'
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        for value in show_info_list_line[0:2]:
            logging.debug(value)
        dict_value = self.dut_showinfo_include_lines_analysiz(show_info_list_line,0,2)
        return dict_value
    def dut_get_show_macaddresstable_agingtime(self,show_info):
        """
        Function:show mac-address-table aging-time回显解析函数
        CLI命令:show mac-address-table aging-time
        回显信息示例:
Ruijie#show mac-address-table aging-time
    Aging time    : 3600 seconds

        Returns:
{"Aging time": "3600 seconds"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mac-address-table aging-time | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show mac-address-table aging-time'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_split_on_colon(show_info_list_line,dict_value)
        return dict_value
    def dut_get_show_macaddresstable_maxdynamicmaccount_interface_dutport(self,show_info):
        """
        Auther: 王晓敏

        Functions：show mac-address-table max-dynamic-mac-count

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show mac-address-table max-dynamic-mac-count'
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_include_lines_analysiz(show_info_list_line,0)
        return dict_value
    def dut_get_show_macaddresstable_notification_interface_dutport(self,show_info):
        """
        Auther: 王晓敏

        Functions：show mac-address-table max-dynamic-mac-count

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show mac-address-table notification'
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_include_lines_analysiz(show_info_list_line,0)
        return dict_value
    def dut_get_show_interface_switchport(self,show_info):
        """
        Function:show interface switchport回显解析函数
        CLI命令:show interface switchport
        回显信息示例:
Ruijie#show interface switchport
    Interface                        Switchport Mode      Access Native Protected VLAN lists
-------------------------------- ---------- --------- ------ ------ --------- ----------------------
    GigabitEthernet 0/1              enabled    TUNNEL    1      100    Disabled  1,100
    GigabitEthernet 0/2              enabled    UPLINK    1      1      Disabled  ALL
    GigabitEthernet 0/3              enabled    ACCESS    1      1      Disabled  ALL
    GigabitEthernet 0/4              enabled    ACCESS    1      1      Disabled  ALL
    GigabitEthernet 0/5              enabled    ACCESS    1      1      Disabled  ALL
    GigabitEthernet 0/6              enabled    ACCESS    1      1      Disabled  ALL
    GigabitEthernet 0/7              enabled    ACCESS    1      1      Disabled  ALL
    GigabitEthernet 0/8              enabled    ACCESS    1      1      Disabled  ALL

        Returns:
{"GigabitEthernet 0/7/ess Nat": "1", "GigabitEthernet 0/7/Interface": "GigabitEthernet 0/7", "GigabitEthernet 0/5/ted VLAN lists": "ed  ALL", "GigabitEthernet 0/2/Switchp": "enabled", "GigabitEthernet 0/1/Switchp": "enabled", "GigabitEthernet 0/8/Switchp": "enabled", "GigabitEthernet 0/5/ive Protec": "Disabl", "GigabitEthernet 0/3/ess Nat": "1", "GigabitEthernet 0/2/ive Protec": "Disabl", "GigabitEthernet 0/1/ess Nat": "100", "GigabitEthernet 0/4/Interface": "GigabitEthernet 0/4", "GigabitEthernet 0/1/ive Protec": "Disabl", "GigabitEthernet 0/5/Interface": "GigabitEthernet 0/5", "Interface_list": ["GigabitEthernet 0/1", "GigabitEthernet 0/2", "GigabitEthernet 0/3", "GigabitEthernet 0/4", "GigabitEthernet 0/5", "GigabitEthernet 0/6", "GigabitEthernet 0/7", "GigabitEthernet 0/8"], "GigabitEthernet 0/7/ted VLAN lists": "ed  ALL", "GigabitEthernet 0/5/Acc": "1", "GigabitEthernet 0/3/ort Mode": "ACCESS", "GigabitEthernet 0/8/ive Protec": "Disabl", "GigabitEthernet 0/3/Acc": "1", "GigabitEthernet 0/4/Acc": "1", "GigabitEthernet 0/7/ive Protec": "Disabl", "GigabitEthernet 0/7/ort Mode": "ACCESS", "GigabitEthernet 0/8/Interface": "GigabitEthernet 0/8", "GigabitEthernet 0/3/ted VLAN lists": "ed  ALL", "GigabitEthernet 0/8/ted VLAN lists": "ed  ALL", "GigabitEthernet 0/7/Switchp": "enabled", "GigabitEthernet 0/8/ess Nat": "1", "GigabitEthernet 0/2/Interface": "GigabitEthernet 0/2", "GigabitEthernet 0/3/Switchp": "enabled", "GigabitEthernet 0/2/ess Nat": "1", "GigabitEthernet 0/5/ess Nat": "1", "GigabitEthernet 0/6/Acc": "1", "GigabitEthernet 0/8/ort Mode": "ACCESS", "GigabitEthernet 0/3/Interface": "GigabitEthernet 0/3", "GigabitEthernet 0/7/Acc": "1", "GigabitEthernet 0/2/ort Mode": "UPLINK", "GigabitEthernet 0/6/ive Protec": "Disabl", "GigabitEthernet 0/4/ive Protec": "Disabl", "GigabitEthernet 0/1/ted VLAN lists": "ed  1,100", "GigabitEthernet 0/3/ive Protec": "Disabl", "GigabitEthernet 0/6/ess Nat": "1", "GigabitEthernet 0/6/ted VLAN lists": "ed  ALL", "GigabitEthernet 0/4/Switchp": "enabled", "GigabitEthernet 0/8/Acc": "1", "GigabitEthernet 0/6/Interface": "GigabitEthernet 0/6", "GigabitEthernet 0/2/ted VLAN lists": "ed  ALL", "GigabitEthernet 0/6/ort Mode": "ACCESS", "GigabitEthernet 0/1/Interface": "GigabitEthernet 0/1", "GigabitEthernet 0/4/ort Mode": "ACCESS", "GigabitEthernet 0/4/ted VLAN lists": "ed  ALL", "GigabitEthernet 0/4/ess Nat": "1", "GigabitEthernet 0/2/Acc": "1", "GigabitEthernet 0/6/Switchp": "enabled", "GigabitEthernet 0/5/Switchp": "enabled", "GigabitEthernet 0/5/ort Mode": "ACCESS", "GigabitEthernet 0/1/Acc": "1", "GigabitEthernet 0/1/ort Mode": "TUNNEL"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interface switchport | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show interface switchport'
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_include_lines_analysiz(show_info_list_line,0)
        return dict_value
    def dut_get_show_vlan_privatevlan(self,show_info):
        """
        Function:show vlan private-vlan回显解析函数
        CLI命令:show vlan private-vlan
        回显信息示例:
Ruijie#show vlan private-vlan 
    
    VLAN  Type       Status   Routed   Ports                          Associated VLANs
    ----- ---------- -------- -------- ------------------------------ ------------------
    2     primary    active   Disabled Gi0/12                         100               
    100   isolated   active   Disabled Gi0/9, Gi0/11, Ag1             2                 
    Ruijie#

        Returns:
{"100/Associated VLANs": "2"
"2/Routed": "Disabled"
"2/Status": "active"
"100/Status": "active"
"100/Ports": "Gi0/9, Gi0/11, Ag1"
"VLAN_list": ["2"
"100"], "2/Ports": "Gi0/12"
"100/VLAN": "100"
"2/Type": "primary"
"2/VLAN": "2"
"100/Type": "isolated"
"2/Associated VLANs": "100"
"100/Routed": "Disabled"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show vlan private-vlan | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show vlan private-vlan'
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_include_lines_analysiz(show_info_list_line,0)
        return dict_value
    def dut_get_show_dot1qtunnel_interfaces_dutport(self,show_info):
        """
        Function:show dot1q-tunnel interface <dutport>回显解析函数
        CLI命令:show dot1q-tunnel interface <dutport>
        回显信息示例:
Ruijie#show dot1q-tunnel interface gi 0/2

Ports         Dot1q-tunnel
------------  ------------
Gi0/2         Enable

        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show dot1q-tunnel interface <dutport> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show dot1q-tunnel'
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_include_lines_analysiz(show_info_list_line,0)
        return dict_value
    def dut_get_show_dot1qtunnel(self,show_info):
        """
        Function:show dot1q-tunnel回显解析函数
        CLI命令:show dot1q-tunnel
        回显信息示例:
DUT1#show dot1q-tunnel  
    Ports         Dot1q-tunnel
    ------------  ------------
    Gi0/1         Enable      
    Gi0/2         Enable      
    Gi0/3         Disable     
    Gi0/4         Disable     
    Gi0/5         Disable     
    Gi0/6         Disable     
    Gi0/7         Disable     
    Gi0/8         Disable

        Returns:
{"Gi0/7/Ports": "Gi0/7"
"Gi0/7/Dot1q-tunnel": "Disable"
"Gi0/1/Dot1q-tunnel": "Enable"
"Gi0/4/Dot1q-tunnel": "Disable"
"Gi0/6/Ports": "Gi0/6"
"Gi0/8/Ports": "Gi0/8"
"Gi0/3/Dot1q-tunnel": "Disable"
"Gi0/2/Dot1q-tunnel": "Enable"
"Ports_list": ["Gi0/1"
"Gi0/2"
"Gi0/3"
"Gi0/4"
"Gi0/5"
"Gi0/6"
"Gi0/7"
"Gi0/8"], "Gi0/6/Dot1q-tunnel": "Disable"
"Gi0/3/Ports": "Gi0/3"
"Gi0/5/Dot1q-tunnel": "Disable"
"Gi0/5/Ports": "Gi0/5"
"Gi0/4/Ports": "Gi0/4"
"Gi0/8/Dot1q-tunnel": "Disable"
"Gi0/2/Ports": "Gi0/2"
"Gi0/1/Ports": "Gi0/1"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show dot1q-tunnel | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show dot1q-tunnel'
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_include_lines_analysiz(show_info_list_line,0)
        return dict_value
    def dut_get_show_translationtable_interfaces_dutport(self,show_info):
        """
        Auther: 王晓敏

        Functions：show translation-table

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show translation-table'
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_include_lines_analysiz(show_info_list_line,0)
        return dict_value
    def dut_get_show_translationtable(self,show_info):
        """
        Auther: 王晓敏

        Functions：show translation-table

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show translation-table'
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_include_lines_analysiz(show_info_list_line,0)
        return dict_value
    def dut_get_show_registrationtable_interfaces_dutport(self,show_info):
        """
        Auther: 王晓敏

        Functions：show translation-table

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show registration-table'
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_include_lines_analysiz(show_info_list_line,0)
        return dict_value
    def dut_get_show_trafficredirect(self,show_info):
        """
        Function:show traffic-redirect回显解析函数
        CLI命令:show traffic-redirect
        回显信息示例:
Ruijie#show traffic-redirect
    
    Ports        Type        VID  Match-filter
    ------------ ----------- ---- ------------
    Ag1          Nested-vid  4094 700

        Returns:
{"Ag1/Type": "Nested-vid"
"Ports_list": ["Ag1"], "Ag1/VID": "4094"
"Ag1/Match-filter": "700"
"Ag1/Ports": "Ag1"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show traffic-redirect | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show traffic-redirect'
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_include_lines_analysiz(show_info_list_line,0)
        return dict_value
    def dut_get_show_trafficredirect_interfaces_dutport(self,show_info):
        """
        Auther: 王晓敏

        Functions：show traffic-redirect

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show traffic-redirect'
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_include_lines_analysiz(show_info_list_line,0)
        return dict_value
    def dut_get_show_frametag_tpid(self,show_info):
        """
        Auther: 王晓敏

        Functions：show frame-tag tpid

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show frame-tag tpid'
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_include_lines_analysiz(show_info_list_line,0)
        return dict_value
    def dut_get_show_frametag_tpid_interfaces_dutport(self,show_info):
        """
        Auther: 王晓敏

        Functions：show frame-tag tpid

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show frame-tag tpid'
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_include_lines_analysiz(show_info_list_line,0)
        return dict_value
    def dut_get_show_innerprioritytrust(self,show_info):
        """
        Function:show inner-priority-trust回显解析函数
        CLI命令:show inner-priority-trust
        回显信息示例:
Ruijie#show inner-priority-trust

Ports         Inner-priority-trust
------------  ----------          
Gi0/1         Disable             
Gi0/2         Disable             
Gi0/3         Disable             
Gi0/4         Disable             
Gi0/5         Disable             
Gi0/6         Disable             
Gi0/7         Disable             
Gi0/8         Disable

        Returns:
{"Gi0/4/Inner-priority-trust": "Disable"
"Gi0/7/Ports": "Gi0/7"
"Gi0/8/Inner-priority-trust": "Disable"
"Gi0/4/Ports": "Gi0/4"
"Gi0/6/Ports": "Gi0/6"
"Gi0/6/Inner-priority-trust": "Disable"
"Gi0/7/Inner-priority-trust": "Disable"
"Ports_list": ["Gi0/1"
"Gi0/2"
"Gi0/3"
"Gi0/4"
"Gi0/5"
"Gi0/6"
"Gi0/7"
"Gi0/8"], "Gi0/3/Ports": "Gi0/3"
"Gi0/1/Inner-priority-trust": "Disable"
"Gi0/8/Ports": "Gi0/8"
"Gi0/2/Inner-priority-trust": "Disable"
"Gi0/5/Inner-priority-trust": "Disable"
"Gi0/5/Ports": "Gi0/5"
"Gi0/3/Inner-priority-trust": "Disable"
"Gi0/2/Ports": "Gi0/2"
"Gi0/1/Ports": "Gi0/1"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show inner-priority-trust | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show inner-priority-trust'
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_include_lines_analysiz(show_info_list_line,0)
        return dict_value
    def dut_get_show_innerprioritytrust_interfaces_dutport(self,show_info):
        """
        Auther: 王晓敏

        Functions：show inner-priority-trust

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show inner-priority-trust'
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_include_lines_analysiz(show_info_list_line,0)
        return dict_value
    def dut_get_show_interface_dutport_remark(self,show_info):
        """
        Auther: 王晓敏

        Functions：show interfaces ten0/1 remark

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show interface'
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_include_lines_analysiz(show_info_list_line,0)
        return dict_value
    def dut_get_show_interfaces_macaddressmapping(self,show_info):
        """
        Auther: 王晓敏

        Functions：show interfaces mac-address-mapping

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show interface'
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_include_lines_analysiz(show_info_list_line,0)
        return dict_value
    def dut_get_show_nacauthoruser(self,show_info):
        """
        Function:show nac-author-user回显解析函数
        CLI命令:show nac-author-user
        回显信息示例:
Ruijie#show nac-author-user
 Port      Cur_num  Max_num
 --------  -------  -------
 Gi0/1     0         0        
 Gi0/2     0         0        
 Gi0/3     0         0        
 Gi0/4     0         0        
 Gi0/5     0         0        
 Gi0/6     0         0        
 Gi0/7     0         0        
 Gi0/8     0         0        
Ruijie#

        Returns:
{"Gi0/7/Cur_num": "0"
"Gi0/7/Max_num": "0"
"Gi0/4/Port": "Gi0/4"
"Gi0/6/Max_num": "0"
"Gi0/5/Max_num": "0"
"Gi0/3/Cur_num": "0"
"Gi0/2/Cur_num": "0"
"Gi0/2/Max_num": "0"
"Gi0/7/Port": "Gi0/7"
"Gi0/1/Port": "Gi0/1"
"Gi0/6/Cur_num": "0"
"Gi0/5/Port": "Gi0/5"
"Gi0/2/Port": "Gi0/2"
"Gi0/3/Max_num": "0"
"Gi0/5/Cur_num": "0"
"Gi0/3/Port": "Gi0/3"
"Gi0/1/Max_num": "0"
"Gi0/8/Cur_num": "0"
"Gi0/8/Max_num": "0"
"Gi0/8/Port": "Gi0/8"
"Gi0/6/Port": "Gi0/6"
"Gi0/4/Cur_num": "0"
"Port_list": ["Gi0/1"
"Gi0/2"
"Gi0/3"
"Gi0/4"
"Gi0/5"
"Gi0/6"
"Gi0/7"
"Gi0/8"], "Gi0/4/Max_num": "0"
"Gi0/1/Cur_num": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show nac-author-user | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show nac-author-user'
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_include_lines_analysiz(show_info_list_line)
        return dict_value

    #======fengexian
    #interface
    def dut_get_show_interface_aggregateport_num(self,show_info):
        """
        Function:show interface aggregatePort <num>回显解析函数
        CLI命令:show interface aggregatePort <num>
        回显信息示例:
DUT2(config)#show interface aggregatePort 20
Index(dec):113 (hex):71
AggregatePort 20 is UP  , line protocol is UP    
  Hardware is AggregateLink AggregatePort, address is 0074.9cb2.6a12 (bia 0074.9cb2.6a12)
  Interface address is: no ip address
  ARP type: ARPA, ARP Timeout: 3600 seconds
  Interface IPv6 address is:
    2000::2/64
    fe80::274:9cff:feb2:6a12/64
  MTU 1500 bytes, BW 80000000 Kbit
  Encapsulation protocol is Ethernet-II, loopback not set
  Keepalive interval is 10 sec , set
  Carrier delay is 2 sec
  Ethernet attributes:
    Last link state change time: 2018-12-10 15:46:22
    Time duration since last link state change: 0 days,  0 hours, 30 minutes, 37 seconds
    Priority is 0
    Medium-type is Fiber
    Admin duplex mode is AUTO, oper duplex is Full
    Admin speed is AUTO, oper speed is 40G
    Flow control admin status is OFF, flow control oper status is OFF
    Admin negotiation mode is OFF, oper negotiation state is OFF
    Storm Control: Broadcast is OFF, Multicast is OFF, Unicast is OFF
    Admin FEC mode is auto, oper FEC mode is auto
  Aggregate Port Informations:
        Aggregate Number: 20
        Name: "AggregatePort 20"
        Members: (count=2)
        Lower Limit: 1
        HundredGigabitEthernet 1/0/49            Link Status: Up      
        HundredGigabitEthernet 2/0/49            Link Status: Up      
    Load Balance by: Source MAC and Destination MAC
  Rxload is 1/255, Txload is 1/255
  Input peak rate: 1143 bits/sec, at 2018-12-10 15:47:17
  Output peak rate: 908 bits/sec, at 2018-12-10 15:47:17
   10 seconds input rate 203 bits/sec, 0 packets/sec
   10 seconds output rate 160 bits/sec, 0 packets/sec
    330 packets input, 58170 bytes, 0 no buffer, 0 dropped
    Received 0 broadcasts, 0 runts, 0 giants
    0 input errors, 0 CRC, 0 frame, 0 overrun, 0 abort
    334 packets output, 59784 bytes, 0 underruns , 0 no buffer, 0 dropped
    0 output errors, 0 collisions, 0 interface resets
DUT2(config)#

        Returns:
{"Txload": "1/255"
"Output no buffer": "0"
"address": "0074.9cb2.6a12"
"Last link state change time: 2018-12-10 15:46": "22"
"Priority": "0"
"CRC": "0"
"Input peak rate": "1143"
"BW": "80000000 Kbit"
"Admin FEC mode": "auto"
"Medium-type": "Fiber"
"Flow control admin status": "OFF"
"Lower Limit": "1"
"line protocol": "UP"
"Rxload": "1/255"
"Unicast": "OFF"
"10 seconds output rate": [" 160 bits/sec"
" 0 packets/sec"], "oper FEC mode": "auto"
"loopback": "not set"
"Carrier delay": "2 sec"
"HundredGigabitEthernet 2/0/49            Link Status": "Up"
"collisions": "0"
"flow control oper status": "OFF"
"fe80::274:9cff:feb2": "6a12/64"
"Output dropped": "0"
"(hex)": "71"
"Storm Control/Unicast": "OFF"
"HundredGigabitEthernet 1/0/49            Link Status": "Up"
"frame": "0"
"Members": "(count=2)"
"oper duplex": "Full"
"Name": "\"AggregatePort 20\""
"Aggregate Port Informations": ""
"Admin speed": "AUTO"
"at 2018-12-10 15:47": "17"
"Output peak rate": "908"
"Storm Control/Broadcast": "OFF"
"Storm Control": "Broadcast is OFF"
"Admin negotiation mode": "OFF"
"Multicast": "OFF"
"Time duration since last link state change": "0 days"
"Output underruns": "0"
"Interface IPv6 address": ""
"MTU": "1500 bytes"
"Interface address": "no ip address"
"2000:": "2/64"
"oper negotiation state": "OFF"
"Index(dec)": "113"
"Storm Control/Multicast": "OFF"
"Ethernet attributes": ""
"input errors": "0"
"Encapsulation protocol": "Ethernet-II"
"ARP type": "ARPA"
"Admin duplex mode": "AUTO"
"Aggregate Number": "20"
"oper speed": "40G"
"Hardware": "AggregateLink AggregatePort"
"AggregatePort 20": "UP"
"Keepalive interval": "10 sec"
"packets output": "334"
"Load Balance by": "Source MAC and Destination MAC"
"ARP Timeout": "3600 seconds"
"Output bytes": "59784"
"10 seconds input rate": [" 203 bits/sec"
" 0 packets/sec"]}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interface aggregatePort <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        ################################################################################################
        #  打印回显信息
        ###############################################################################################
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'\s+Ethernet attributes',show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'\s+Bridge attributes',show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'Aggregate Port Informations:',show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'\s+Time duration since', show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'\s+Input peak rate', show_info_split[i]):
                show_info_split.remove(show_info_split[i+1])
                show_info_split.remove(show_info_split[i ])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'\s+Received',show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'\s+\d+ input errors',show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'\s+\d+ output errors',show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        #####################################################################
        for i in range(length):
            if re.search(r'Storm Control', show_info_split[i]):
                matchObj = re.search(':\s+(.*)\s+is\s+(ON|OFF),\s+(.*)\s+is\s+(ON|OFF),\s+(.*)\s+is\s+(ON|OFF)',show_info_split[i])
                dict_value['Storm Control/'+matchObj.group(1).strip()] = matchObj.group(2).strip()
                dict_value['Storm Control/'+matchObj.group(3).strip()] = matchObj.group(4).strip()
                dict_value['Storm Control/'+matchObj.group(5).strip()] = matchObj.group(6).strip()
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'\s+\d+ seconds input rate', show_info_split[i]):
                matchObj = re.match('\s+(\d+ seconds input rate) (\d+ \w+/\w+), (\d+ \w+/\w+)',show_info_split[i])
                value_list = [matchObj.group(2),matchObj.group(3)]
                dict_value[matchObj.group(1)] = value_list
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'\s+\d+ seconds output rate', show_info_split[i]):
                matchObj = re.match('\s+(\d+ seconds output rate) (\d+ \w+/\w+), (\d+ \w+/\w+)',show_info_split[i])
                value_list = [matchObj.group(2),matchObj.group(3)]
                dict_value[matchObj.group(1)] = value_list
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'\s+(\d+) packets input', show_info_split[i]):
                matchObj = re.match('\s+(\d+) (packets input)',show_info_split[i])
                dict_value[matchObj.group(2)] = matchObj.group(1)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'\s+(\d+) packets output', show_info_split[i]):
                matchObj = re.match('\s+(\d+) (packets output)',show_info_split[i])
                dict_value[matchObj.group(2)] = matchObj.group(1)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'\s+Last link state change', show_info_split[i]):
                matchObj = re.match('\s+(Last link state change time): (.*)',show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)

        ###########################################################
        # 去除Interface IPv6 address is:
        # No IPv6 address
        #############################################################
        for i in range(length):
            if re.match(r'\s+Interface IPv6 address',show_info_split[i]):
                matchObj = re.match('\s+(Interface IPv6 address) is:', show_info_split[i])
                key = matchObj.group(1)
                vaule = show_info_split[i+1]
                key = key.lstrip()
                key = key.rstrip()
                value = vaule.lstrip()
                value = value.rstrip()
                dict_value[key] = value
                show_info_split.remove(show_info_split[i+1])
                show_info_split.remove(show_info_split[i])
                break
        ################################################################
        # 去除 Index(dec):4097 (hex):1001
        #####################################################################
        length = len(show_info_split)
        for i in range(length):
            if re.match('Index',show_info_split[i]):
                matchObj = re.match('(.*):(\d*) (.*):(\d*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                dict_value[matchObj.group(3)] = matchObj.group(4)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        #########################################################################
        # 去除 Keepalive interval is 10 sec , set
        #############################################################################
        for i in range(length):
            if re.match(r'\s+Keepalive interval', show_info_split[i]):
                matchObj = re.match('  (Keepalive interval) is (.*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        ##########################################################################
        # 以逗号为分隔号重新组合成字符串 newString
        ###########################################################################
        newString = ' '
        for i in range(length):
            newString = newString + show_info_split[i] + ','
        #################################################################################
        #   开始处理
        ##############################################################################
        dut_info_split = newString.split(',')
        length = len(dut_info_split)
        for i in range(length):
            if re.search(r'(.*):(.*)',dut_info_split[i]):
                if re.search(r'(.*)is:(.*)',dut_info_split[i]):
                    type1 = re.search(r'(.*)is:(.*)', dut_info_split[i])
                    key = type1.group(1)
                    value = type1.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
                else:
                    type1 = re.search(r'(.*):(.*)', dut_info_split[i])
                    key = type1.group(1)
                    value = type1.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
            elif re.match(r'(.*) is (.*)',dut_info_split[i]):
                if re.match(r' address is',dut_info_split[i]):
                    type2 = re.match(r' (address) is (.*) \(bia .*\)', dut_info_split[i])
                    dict_value[type2.group(1)] = type2.group(2)
                else:
                    type2 = re.match(r'(.*) is (.*)',dut_info_split[i])
                    key = type2.group(1)
                    value = type2.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
            elif re.search(r'(MTU|BW|loopback) (.*)',dut_info_split[i]):
                type3 = re.search(r'(MTU|BW|loopback) (.*)' ,dut_info_split[i])
                key = type3.group(1)
                value = type3.group(2)
                key = key.lstrip()
                key = key.rstrip()
                value = value.lstrip()
                value = value.rstrip()
                dict_value[key] = value


        return dict_value
    def dut_get_show_interfaces_aggregateport_num(self,show_info):
        """
        Function:show interfaces aggregatePort <num>回显解析函数
        CLI命令:show interfaces aggregatePort <num>
        回显信息示例:
Ruijie#show interfaces aggregatePort 100
Index(dec):13 (hex):d
AggregatePort 100 is DOWN  , line protocol is DOWN    
  Hardware is AggregateLink AggregatePort, address is 0000.0000.0000 (bia 0000.0000.0000)
  Interface address is: no ip address
  Interface IPv6 address is:
    No IPv6 address
  MTU 1500 bytes, BW 1000000 Kbit
  Encapsulation protocol is Ethernet-II, loopback not set
  Keepalive interval is 10 sec , set
  Carrier delay is 2 sec
  Ethernet attributes:
    Last link state change time: 2018-08-02 10:57:13
    Time duration since last link state change: 0 days,  0 hours, 10 minutes, 59 seconds
    Priority is 0
    Medium-type is Copper
    Admin duplex mode is AUTO, oper duplex is Unknown
    Admin speed is AUTO, oper speed is Unknown
  Bridge attributes:
    Port-type: access
    Vlan id: 1
  Aggregate Port Informations:
        Aggregate Number: 100
        Name: "AggregatePort 100"
        Members: (count=0)
    Load Balance by: Source MAC and Destination MAC
  Rxload is 1/255, Txload is 1/255
  Input peak rate: 0 bits/sec, at 2018-08-02 10:57:13
  Output peak rate: 0 bits/sec, at 2018-08-02 10:57:13
   10 seconds input rate 0 bits/sec, 0 packets/sec
   10 seconds output rate 0 bits/sec, 0 packets/sec
    0 packets input, 0 bytes, 0 no buffer, 0 dropped
    Received 0 broadcasts, 0 runts, 0 giants
    0 input errors, 0 CRC, 0 frame, 0 overrun, 0 abort
    0 packets output, 0 bytes, 0 underruns, 0 no buffer, 0 dropped
    0 output errors, 0 collisions, 0 interface resets
Ruijie#

        Returns:
{"Txload": "1/255"
"Output no buffer": "0"
"address": "0000.0000.0000"
"Time duration since last link state change": "0 days"
"Priority": "0"
"CRC": "0"
"Input peak rate": "0"
"BW": "1000000 Kbit"
"Medium-type": "Copper"
"line protocol": "DOWN"
"Rxload": "1/255"
"10 seconds output rate": [" 0 bits/sec"
" 0 packets/sec"], "loopback": "not set"
"Interface address": "no ip address"
"collisions": "0"
"Members": "(count=0)"
"Output dropped": "0"
"(hex)": ""
"Port-type": "access"
"frame": "0"
"oper duplex": "Unknown"
"Name": "\"AggregatePort 100\""
"Bridge attributes": ""
"Aggregate Port Informations": ""
"Admin speed": "AUTO"
"at 2018-08-02 10:57": "13"
"Output peak rate": "0"
"MTU": "1500 bytes"
"Output underruns": "0"
"Interface IPv6 address": ""
"Carrier delay": "2 sec"
"Index(dec)": "13"
"Ethernet attributes": ""
"input errors": "0"
"Encapsulation protocol": "Ethernet-II"
"BW_value": "1000000"
"AggregatePort 100": "DOWN"
"Admin duplex mode": "AUTO"
"Aggregate Number": "100"
"Last link state change time: 2018-08-02 10:57": "13"
"oper speed": "Unknown"
"Hardware": "AggregateLink AggregatePort"
"Keepalive interval": "10 sec"
"packets output": "0"
"Vlan id": "1"
"Load Balance by": "Source MAC and Destination MAC"
"Output bytes": "0"
"10 seconds input rate": [" 0 bits/sec"
" 0 packets/sec"]}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interfaces aggregatePort <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        ################################################################################################
        #  打印回显信息
        ###############################################################################################
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'\s+Ethernet attributes',show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'\s+Bridge attributes',show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'Aggregate Port Informations:',show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'\s+Time duration since', show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'\s+Input peak rate', show_info_split[i]):
                show_info_split.remove(show_info_split[i+1])
                show_info_split.remove(show_info_split[i ])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'\s+Received',show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'\s+\d+ input errors',show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'\s+\d+ output errors',show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        #####################################################################
        for i in range(length):
            if re.search(r'Storm Control', show_info_split[i]):
                matchObj = re.search(':\s+(.*)\s+is\s+(ON|OFF),\s+(.*)\s+is\s+(ON|OFF),\s+(.*)\s+is\s+(ON|OFF)',show_info_split[i])
                dict_value['Storm Control/'+matchObj.group(1).strip()] = matchObj.group(2).strip()
                dict_value['Storm Control/'+matchObj.group(3).strip()] = matchObj.group(4).strip()
                dict_value['Storm Control/'+matchObj.group(5).strip()] = matchObj.group(6).strip()
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'\s+\d+ seconds input rate', show_info_split[i]):
                matchObj = re.match('\s+(\d+ seconds input rate) (\d+ \w+/\w+), (\d+ \w+/\w+)',show_info_split[i])
                value_list = [matchObj.group(2),matchObj.group(3)]
                dict_value[matchObj.group(1)] = value_list
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'\s+\d+ seconds output rate', show_info_split[i]):
                matchObj = re.match('\s+(\d+ seconds output rate) (\d+ \w+/\w+), (\d+ \w+/\w+)',show_info_split[i])
                value_list = [matchObj.group(2),matchObj.group(3)]
                dict_value[matchObj.group(1)] = value_list
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'\s+(\d+) packets input', show_info_split[i]):
                matchObj = re.match('\s+(\d+) (packets input)',show_info_split[i])
                dict_value[matchObj.group(2)] = matchObj.group(1)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'\s+(\d+) packets output', show_info_split[i]):
                matchObj = re.match('\s+(\d+) (packets output)',show_info_split[i])
                dict_value[matchObj.group(2)] = matchObj.group(1)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'\s+Last link state change', show_info_split[i]):
                matchObj = re.match('\s+(Last link state change time): (.*)',show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)

        ###########################################################
        # 去除Interface IPv6 address is:
        # No IPv6 address
        #############################################################
        for i in range(length):
            if re.match(r'\s+Interface IPv6 address',show_info_split[i]):
                matchObj = re.match('  (Interface IPv6 address) is:', show_info_split[i])
                key = matchObj.group(1)
                vaule = show_info_split[i+1]
                key = key.lstrip()
                key = key.rstrip()
                value = vaule.lstrip()
                value = value.rstrip()
                dict_value[key] = value
                show_info_split.remove(show_info_split[i+1])
                show_info_split.remove(show_info_split[i])
                break
        ################################################################
        # 去除 Index(dec):4097 (hex):1001
        #####################################################################
        length = len(show_info_split)
        for i in range(length):
            if re.match('Index',show_info_split[i]):
                matchObj = re.match('(.*):(\d*) (.*):(\d*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                dict_value[matchObj.group(3)] = matchObj.group(4)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        #########################################################################
        # 去除 Keepalive interval is 10 sec , set
        #############################################################################
        for i in range(length):
            if re.match(r'\s+Keepalive interval', show_info_split[i]):
                matchObj = re.match('  (Keepalive interval) is (.*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        ##########################################################################
        # 以逗号为分隔号重新组合成字符串 newString
        ###########################################################################
        newString = ' '
        for i in range(length):
            newString = newString + show_info_split[i] + ','
        #################################################################################
        #   开始处理
        ##############################################################################
        dut_info_split = newString.split(',')
        length = len(dut_info_split)
        for i in range(length):
            if re.search(r'(.*):(.*)',dut_info_split[i]):
                if re.search(r'(.*)is:(.*)',dut_info_split[i]):
                    type1 = re.search(r'(.*)is:(.*)', dut_info_split[i])
                    key = type1.group(1)
                    value = type1.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
                else:
                    type1 = re.search(r'(.*):(.*)', dut_info_split[i])
                    key = type1.group(1)
                    value = type1.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
            elif re.match(r'(.*) is (.*)',dut_info_split[i]):
                if re.match(r' address is',dut_info_split[i]):
                    type2 = re.match(r' (address) is (.*) \(bia .*\)', dut_info_split[i])
                    dict_value[type2.group(1)] = type2.group(2)
                else:
                    type2 = re.match(r'(.*) is (.*)',dut_info_split[i])
                    key = type2.group(1)
                    value = type2.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
            elif re.search(r'(MTU|BW|loopback) (.*)',dut_info_split[i]):
                type3 = re.search(r'(MTU|BW|loopback) (.*)' ,dut_info_split[i])
                key = type3.group(1)
                value = type3.group(2)
                key = key.lstrip()
                key = key.rstrip()
                value = value.lstrip()
                value = value.rstrip()
                dict_value[key] = value


        return dict_value
    def dut_get_show_interfaces_dutport_transceiver_diagnosis(self,show_info):
        """
        Auther: 王晓敏

        Functions：show interfaces dutport transceiver diagnosis

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show interfaces'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        key = show_info_list_line[0][:-1]
        title_list =  re.split('\s{2,}',show_info_list_line[1])
        logging.debug(title_list)
        for value in show_info_list_line[2:]:
            value_list = re.split('\s{2,}',value)
            logging.debug(value_list)
            for index in range(0,len(title_list)):
                key_name = key + '/' + title_list[index]
                dict_value[key_name] = value_list[index]
        return dict_value
    def dut_get_show_interface_dutport_transceiver_diagnosis(self,show_info):
        """
        Auther: 王晓敏

        Functions：show interfaces dutport transceiver diagnosis

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show interface'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        key = show_info_list_line[0][:-1]
        title_list =  re.split('\s{2,}',show_info_list_line[1])
        logging.debug(title_list)
        for value in show_info_list_line[2:]:
            value_list = re.split('\s{2,}',value)
            logging.debug(value_list)
            for index in range(0,len(title_list)):
                key_name = key + '/' + title_list[index]
                dict_value[key_name] = value_list[index]
        return dict_value
    def dut_get_show_interfaces_dutport_transceiver_alarm(self,show_info):
        """
        Auther: 王晓敏

        Functions：show interfaces dutport transceiver alarm

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show interfaces'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        value_list = []
        for value in show_info_list_line[1:]:
            value_list = value_list + [value]
        dict_value[show_info_list_line[0][:-1]]=value_list
        return dict_value
    def dut_get_show_interface_dutport_transceiver_alarm(self,show_info):
        """
        Auther: 王晓敏

        Functions：show interface dutport transceiver alarm

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show interface'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        value_list = []
        for value in show_info_list_line[1:]:
            value_list = value_list + [value]
        dict_value[show_info_list_line[0][:-1]]=value_list
        return dict_value
    def dut_get_show_interfaces_dutport_transceiver_manuinfo(self,show_info):
        """
        Auther: 王晓敏

        Functions：show interfaces dutport transceiver alarm

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show interfaces'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_split_on_colon(show_info_list_line,dict_value)
        return dict_value
    def dut_get_show_interface_dutport_transceiver_manuinfo(self,show_info):
        """
        Auther: 王晓敏

        Functions：show interface dutport transceiver alarm

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show interface'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_split_on_colon(show_info_list_line,dict_value)
        return dict_value
    def dut_get_show_interfaces_dutport_transceiver_bak0901(self,show_info):
        """
        Auther: 王晓敏

        Functions：show interfaces dutport transceiver alarm

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show interfaces'
        dict_value = {}
        index_start,index_end,index_dia,index_show = 0,0,0,0
        alarm_list = []
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        for index,value in enumerate(show_info_list_line):
            if value.find('Transfer Distance') != -1:
                index_start = index
            if value.find('Digital Diagnostic') != -1:
                index_end = index
            if value.find('Current diagnostic parameters') != -1:
                index_dia = index
            if value.find('Transceiver current alarm') != -1:
                alarm_list = show_info_list_line[index:]
                index_show = index

        transfer_list = show_info_list_line[index_start:index_end]
        dia_list = show_info_list_line[index_dia:index_dia+3]
        show_info_list_line = show_info_list_line[0:index_start]+show_info_list_line[index_end:index_dia]+show_info_list_line[index_dia+3:index_show]
        dict_value = self.dut_showinfo_split_on_colon(show_info_list_line,dict_value)
        #Transfer Distance
        for index_tran in range(1,len(transfer_list),2):
            key = transfer_list[index_tran].strip()
            value = transfer_list[index_tran+1].split('--')[1].strip()
            dict_value[key] = value
        #Current diagnostic parameters
        key = dia_list[0][:-1]
        title_list =  re.split('\s{2,}',dia_list[1])
        for value in dia_list[2:]:
            value_list = re.split('\s{2,}',value)
            for index in range(0,len(title_list)):
                key_name = key + '/' + title_list[index]
                dict_value[key_name] = value_list[index]
        # Transceiver current alarm information
        value_list = []
        for value in alarm_list[1:]:
            value_list = value_list + [value]
        dict_value[alarm_list[0][:-1]]=value_list
        return dict_value
    def dut_get_show_interface_dutport_transceiver_bak0901(self,show_info):
        """
        Auther: 王晓敏

        Functions：show interfaces dutport transceiver alarm

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show interface'
        dict_value = {}
        index_start,index_end,index_dia,index_show = 0,0,0,0
        alarm_list = []
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        for index,value in enumerate(show_info_list_line):
            if value.find('Transfer Distance') != -1:
                index_start = index
            if value.find('Digital Diagnostic') != -1:
                index_end = index
            if value.find('Current diagnostic parameters') != -1:
                index_dia = index
            if value.find('Transceiver current alarm') != -1:
                alarm_list = show_info_list_line[index:]
                index_show = index

        transfer_list = show_info_list_line[index_start:index_end]
        dia_list = show_info_list_line[index_dia:index_dia+3]
        logging.debug('====>transfer_list/dia_list/alarm_list')
        logging.debug(transfer_list)
        logging.debug(dia_list)
        logging.debug(alarm_list)
        show_info_list_line = show_info_list_line[0:index_start]+show_info_list_line[index_end:index_dia]+show_info_list_line[index_dia+3:index_show]
        logging.debug('====>show_info_list_line')
        logging.debug(show_info_list_line)
        dict_value = self.dut_showinfo_split_on_colon(show_info_list_line,dict_value)
        #Transfer Distance
        logging.debug('===>Transfer Distance')
        for index_tran in range(1,len(transfer_list),2):
            key = transfer_list[index_tran].strip()
            value = transfer_list[index_tran+1].split('--')[1].strip()
            dict_value[key] = value
        #Current diagnostic parameters
        logging.debug('===>Current diagnostic parameters')
        key = dia_list[0][:-1]
        title_list =  re.split('\s{2,}',dia_list[1])
        for value in dia_list[2:]:
            value_list = re.split('\s{2,}',value)
            for index in range(0,len(title_list)):
                key_name = key + '/' + title_list[index]
                dict_value[key_name] = value_list[index]
        # Transceiver current alarm information
        logging.debug('===>Transceiver current alarm information')
        value_list = []
        for value in alarm_list[1:]:
            value_list = value_list + [value]
        dict_value[alarm_list[0][:-1]]=value_list
        return dict_value
    def dut_get_show_vxlan_statistics_overlaytunnel_num(self,show_info):
        """
        Auther: 王晓敏

        Functions：show mls qos rate-limit

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show vxlan statistics overlayTunnel'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        while show_info_list_line:
            if show_info_list_line[0].find('disable') != -1:
                dict_value[show_info_list_line[0].split('is')[0].strip()] = 'disable'
                break
            show_info_list_line = show_info_list_line[1:]
            logging.debug(show_info_list_line)
            for index,line in enumerate(show_info_list_line):
                if line.find('VXLAN') != -1:
                    key_name = line[:-1].strip()
                    show_info_list_line = show_info_list_line[index:]
                    break
                else:
                    if re.match(r'\s+\d+ seconds input rate', line):
                        matchObj = re.match('\s+(\d+ seconds input rate) (\d+ \w+/\w+), (\d+ \w+/\w+)',line)
                        value_list = [matchObj.group(2),matchObj.group(3)]
                        dict_value[key_name+ '/' + matchObj.group(1)] = value_list
                    if re.match(r'\s+\d+ seconds output rate', line):
                        matchObj = re.match('\s+(\d+ seconds output rate) (\d+ \w+/\w+), (\d+ \w+/\w+)',line)
                        value_list = [matchObj.group(2),matchObj.group(3)]
                        dict_value[key_name+ '/' + matchObj.group(1)] = value_list
                    if re.match(r'\s+(\d+) packets input', line):
                        matchObj = re.match('\s+(\d+) (packets input)',line)
                        dict_value[key_name+ '/' + matchObj.group(2)] = matchObj.group(1)
                    if re.match(r'\s+(\d+) packets output', line):
                        matchObj = re.match('\s+(\d+) (packets output)',line)
                        dict_value[key_name+ '/' + matchObj.group(2)] = matchObj.group(1)
                    logging.debug('====>matchobj')
                    logging.debug(matchObj.group(0))
                if index == len(show_info_list_line)-1:
                    show_info_list_line=[]
        return dict_value
    def dut_get_show_vxlan_statistics_overlaytunnel_num_vni_num(self,show_info):
        """
        Auther: 王晓敏

        Functions：show mls qos rate-limit

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show vxlan statistics overlayTunnel'
        dict_value = {}
        matchObj = ''
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        while show_info_list_line:
            if show_info_list_line[0].find('disable') != -1:
                dict_value[show_info_list_line[0].split('is')[0].strip()] = 'disable'
                break
            show_info_list_line = show_info_list_line[1:]
            logging.debug(show_info_list_line)
            for index,line in enumerate(show_info_list_line):
                if line.find('VXLAN') != -1:
                    key_name = line[:-1].strip()
                    show_info_list_line = show_info_list_line[index:]
                    break
                else:
                    if re.match(r'\s+\d+ seconds input rate', line):
                        matchObj = re.match('\s+(\d+ seconds input rate) (\d+ \w+/\w+), (\d+ \w+/\w+)',line)
                        value_list = [matchObj.group(2),matchObj.group(3)]
                        dict_value[key_name+ '/' + matchObj.group(1)] = value_list
                    if re.match(r'\s+\d+ seconds output rate', line):
                        matchObj = re.match('\s+(\d+ seconds output rate) (\d+ \w+/\w+), (\d+ \w+/\w+)',line)
                        value_list = [matchObj.group(2),matchObj.group(3)]
                        dict_value[key_name + '/' + matchObj.group(1)] = value_list
                    if re.match(r'\s+(\d+) packets input', line):
                        matchObj = re.match('\s+(\d+) (packets input)',line)
                        dict_value[key_name + '/' + matchObj.group(2)] = matchObj.group(1)
                    if re.match(r'\s+(\d+) packets output', line):
                        matchObj = re.match('\s+(\d+) (packets output)',line)
                        dict_value[key_name + '/' + matchObj.group(2)] = matchObj.group(1)
                    if matchObj:
                        logging.debug('====>matchobj')
                        logging.debug(matchObj.group(0))
                if index == len(show_info_list_line)-1:
                    show_info_list_line = []
        return dict_value
    def dut_get_show_interface_overlaytunnel_num(self,show_info):
        cmd_str = 'show interface'
        dict_value = {}
        show_info_split = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        ################################################################################################
        #  打印回显信息
        ###############################################################################################
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'\s+Overlay attributes',show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        ###########################################################
        # 去除Interface IPv6 address is:
        # No IPv6 address
        #############################################################
        for i in range(length):
            if re.match(r'\s+Interface IPv6 address',show_info_split[i]):
                matchObj = re.match('\s+(Interface IPv6 address) is:', show_info_split[i])
                key = matchObj.group(1)
                vaule = show_info_split[i+1]
                key = key.lstrip()
                key = key.rstrip()
                value = vaule.lstrip()
                value = value.rstrip()
                dict_value[key] = value
                show_info_split.remove(show_info_split[i+1])
                show_info_split.remove(show_info_split[i])
                break
        ################################################################
        # 去除 Index(dec):4097 (hex):1001
        #####################################################################
        length = len(show_info_split)
        for i in range(length):
            if re.match('Index',show_info_split[i]):
                matchObj = re.match('(.*):(\d*) (.*):(\d*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                dict_value[matchObj.group(3)] = matchObj.group(4)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        #########################################################################
        # 去除 Keepalive interval is 10 sec , set
        #############################################################################
        for i in range(length):
            if re.match(r'\s+Keepalive interval', show_info_split[i]):
                matchObj = re.match('\s+(Keepalive interval) is (.*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        ##########################################################################
        # 以逗号为分隔号重新组合成字符串 newString
        ###########################################################################
        newString = ' '
        for i in range(length):
            newString = newString + show_info_split[i] + ','
        #################################################################################
        #   开始处理
        ##############################################################################
        dut_info_split = newString.split(',')
        length = len(dut_info_split)
        for i in range(length):
            if re.search(r'(.*):(.*)',dut_info_split[i]):
                if re.search(r'(.*)is:(.*)',dut_info_split[i]):
                    type1 = re.search(r'(.*)is:(.*)', dut_info_split[i])
                    key = type1.group(1)
                    value = type1.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
                else:
                    type1 = re.search(r'(.*):(.*)', dut_info_split[i])
                    key = type1.group(1)
                    value = type1.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
            elif re.match(r'(.*) is (.*)',dut_info_split[i]):
                if re.match(r' address is',dut_info_split[i]):
                    type2 = re.match(r' (address) is (.*) \(bia .*\)', dut_info_split[i])
                    dict_value[type2.group(1)] = type2.group(2)
                else:
                    type2 = re.match(r'(.*) is (.*)',dut_info_split[i])
                    key = type2.group(1)
                    value = type2.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
            elif re.search(r'(MTU|BW|loopback) (.*)',dut_info_split[i]):
                type3 = re.search(r'(MTU|BW|loopback) (.*)' ,dut_info_split[i])
                key = type3.group(1)
                value = type3.group(2)
                key = key.lstrip()
                key = key.rstrip()
                value = value.lstrip()
                value = value.rstrip()
                dict_value[key] = value
        return dict_value
    def dut_get_show_interfaces_overlaytunnel_num(self,show_info):
        """
        Function:show interfaces overlaytunnel <num>回显解析函数
        CLI命令:show interfaces overlaytunnel <num>
        回显信息示例:
s79_1(config)#show interfaces overlaytunnel 6145
Index(dec):50 (hex):32
OverlayTunnel 6145 is UP  ， line protocol is UP    
  Hardware is OverlayTunnel
  Interface address is: no ip address
  Interface IPv6 address is:
    No IPv6 address
  MTU 1500 bytes， BW 1000000 Kbit
  Encapsulation protocol is Tunnel， loopback not set
  Keepalive interval is 10 sec ， set
  Carrier delay is 0 sec
  Overlay attributes:
    Overlay mode is VXLAN
    Tunnel source: 1111::1111， destination: 2222::2222
s79_1(config)#
s79_1(config)#show interfaces overlaytunnel 6145
Index(dec):50 (hex):32
OverlayTunnel 6145 is UP  ， line protocol is UP    
  Hardware is OverlayTunnel
  Interface address is: no ip address
  Interface IPv6 address is:
    No IPv6 address
  MTU 1500 bytes， BW 1000000 Kbit
  Encapsulation protocol is Tunnel， loopback not set
  Keepalive interval is 10 sec ， set
  Carrier delay is 0 sec
  Overlay attributes:
    Overlay mode is VXLAN
    Tunnel source: 1.1.1.1， destination: 2.2.2.2
s79_1(config)#

        Returns:
{'Overlay attributes': ''
'Encapsulation protocol': 'Tunnel\xef\xbc\x8c loopback not set'
'Carrier delay': '0 sec'
'Tunnel source: 1111::1111\xef\xbc\x8c destination: 2222:': '2222'
'MTU': '1500 bytes\xef\xbc\x8c BW 1000000 Kbit'
'Hardware': 'OverlayTunnel'
'Index(dec):50 (hex)': '32'
'Keepalive interval': '10 sec \xef\xbc\x8c set'
'Tunnel source: 1.1.1.1\xef\xbc\x8c destination': '2.2.2.2'
'(hex)': '32'
'Interface IPv6 address': ''
'Index(dec)': '50'
'Interface address': 'no ip address'
'Overlay mode': 'VXLAN'
'OverlayTunnel 6145 is UP  \xef\xbc\x8c line protocol': 'UP'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interfaces overlaytunnel <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show interface'
        dict_value = {}
        show_info_split = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        ################################################################################################
        #  打印回显信息
        ###############################################################################################
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'\s+Overlay attributes',show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        ###########################################################
        # 去除Interface IPv6 address is:
        # No IPv6 address
        #############################################################
        for i in range(length):
            if re.match(r'\s+Interface IPv6 address',show_info_split[i]):
                matchObj = re.match('\s+(Interface IPv6 address) is:', show_info_split[i])
                key = matchObj.group(1)
                vaule = show_info_split[i+1]
                key = key.lstrip()
                key = key.rstrip()
                value = vaule.lstrip()
                value = value.rstrip()
                dict_value[key] = value
                show_info_split.remove(show_info_split[i+1])
                show_info_split.remove(show_info_split[i])
                break
        ################################################################
        # 去除 Index(dec):4097 (hex):1001
        #####################################################################
        length = len(show_info_split)
        for i in range(length):
            if re.match('Index',show_info_split[i]):
                matchObj = re.match('(.*):(\d*) (.*):(\d*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                dict_value[matchObj.group(3)] = matchObj.group(4)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        #########################################################################
        # 去除 Keepalive interval is 10 sec , set
        #############################################################################
        for i in range(length):
            if re.match(r'\s+Keepalive interval', show_info_split[i]):
                matchObj = re.match('\s+(Keepalive interval) is (.*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        ##########################################################################
        # 以逗号为分隔号重新组合成字符串 newString
        ###########################################################################
        newString = ' '
        for i in range(length):
            newString = newString + show_info_split[i] + ','
        #################################################################################
        #   开始处理
        ##############################################################################
        dut_info_split = newString.split(',')
        length = len(dut_info_split)
        for i in range(length):
            if re.search(r'(.*):(.*)',dut_info_split[i]):
                if re.search(r'(.*)is:(.*)',dut_info_split[i]):
                    type1 = re.search(r'(.*)is:(.*)', dut_info_split[i])
                    key = type1.group(1)
                    value = type1.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
                else:
                    type1 = re.search(r'(.*):(.*)', dut_info_split[i])
                    key = type1.group(1)
                    value = type1.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
            elif re.match(r'(.*) is (.*)',dut_info_split[i]):
                if re.match(r' address is',dut_info_split[i]):
                    type2 = re.match(r' (address) is (.*) \(bia .*\)', dut_info_split[i])
                    dict_value[type2.group(1)] = type2.group(2)
                else:
                    type2 = re.match(r'(.*) is (.*)',dut_info_split[i])
                    key = type2.group(1)
                    value = type2.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
            elif re.search(r'(MTU|BW|loopback) (.*)',dut_info_split[i]):
                type3 = re.search(r'(MTU|BW|loopback) (.*)' ,dut_info_split[i])
                key = type3.group(1)
                value = type3.group(2)
                key = key.lstrip()
                key = key.rstrip()
                value = value.lstrip()
                value = value.rstrip()
                dict_value[key] = value
        return dict_value
    def dut_get_show_interface_overlayrouter_num(self,show_info):
        """
        Function:show interface overlayrouter <num>回显解析函数
        CLI命令:show interface overlayrouter <num>
        回显信息示例:
Ruijie#show interface overlayrouter 10
Index(dec):49 (hex):31
OverlayRouter 10 is UP  , line protocol is UP    
  Hardware is OverlayRouter, address is 300d.9e73.8a8f (bia 300d.9e73.8a8f)
  Interface address is: 10.0.0.1/24
  ARP type: ARPA, ARP Timeout: 3600 seconds
  Interface IPv6 address is:
    1010::1/64
    fe80::200:11ff:fe11:2222/64
  MTU 1500 bytes, BW 1000000 Kbit
  Encapsulation protocol is Ethernet-II, loopback not set
  Keepalive interval is 10 sec , set
  Carrier delay is 0 sec
  Overlay attributes:
    Overlay mode is VXLAN
    Anycast is ON
    Associate by VXLAN 10

        Returns:
{"BW": "1000000 Kbit"
"ARP Timeout": "3600 seconds"
"Encapsulation protocol": "Ethernet-II"
"loopback": "not set"
"ARP type": "ARPA"
"fe80::200:11ff:fe11": "2222/64"
"MTU": "1500 bytes"
"Hardware": "OverlayRouter"
"OverlayRouter 10": "UP"
"Keepalive interval": "10 sec , set"
"Anycast": "ON"
"address": "300d.9e73.8a8f"
"(hex)": "31"
"Interface IPv6 address": "1010::1/64"
"Index(dec)": "49"
"Interface address": "10.0.0.1/24"
"Overlay mode": "VXLAN"
"Carrier delay": "0 sec"
"line protocol": "UP"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interface overlayrouter <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show interface'
        dict_value = {}
        show_info_split = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        ################################################################################################
        #  打印回显信息
        ###############################################################################################
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'\s+Overlay attributes',show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        ###########################################################
        # 去除Interface IPv6 address is:
        # No IPv6 address
        #############################################################
        for i in range(length):
            if re.match(r'\s+Interface IPv6 address',show_info_split[i]):
                matchObj = re.match('\s+(Interface IPv6 address) is:', show_info_split[i])
                key = matchObj.group(1)
                vaule = show_info_split[i+1]
                key = key.lstrip()
                key = key.rstrip()
                value = vaule.lstrip()
                value = value.rstrip()
                dict_value[key] = value
                show_info_split.remove(show_info_split[i+1])
                show_info_split.remove(show_info_split[i])
                break
        ################################################################
        # 去除 Index(dec):4097 (hex):1001
        #####################################################################
        length = len(show_info_split)
        for i in range(length):
            if re.match('Index',show_info_split[i]):
                matchObj = re.match('(.*):(\d*) (.*):(\d*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                dict_value[matchObj.group(3)] = matchObj.group(4)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        #########################################################################
        # 去除 Keepalive interval is 10 sec , set
        #############################################################################
        for i in range(length):
            if re.match(r'\s+Keepalive interval', show_info_split[i]):
                matchObj = re.match('\s+(Keepalive interval) is (.*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        ##########################################################################
        # 以逗号为分隔号重新组合成字符串 newString
        ###########################################################################
        newString = ' '
        for i in range(length):
            newString = newString + show_info_split[i] + ','
        #################################################################################
        #   开始处理
        ##############################################################################
        dut_info_split = newString.split(',')
        length = len(dut_info_split)
        for i in range(length):
            if re.search(r'(.*):(.*)',dut_info_split[i]):
                if re.search(r'(.*)is:(.*)',dut_info_split[i]):
                    type1 = re.search(r'(.*)is:(.*)', dut_info_split[i])
                    key = type1.group(1)
                    value = type1.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
                else:
                    type1 = re.search(r'(.*):(.*)', dut_info_split[i])
                    key = type1.group(1)
                    value = type1.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
            elif re.match(r'(.*) is (.*)',dut_info_split[i]):
                if re.match(r' address is',dut_info_split[i]):
                    type2 = re.match(r' (address) is (.*) \(bia .*\)', dut_info_split[i])
                    dict_value[type2.group(1)] = type2.group(2)
                else:
                    type2 = re.match(r'(.*) is (.*)',dut_info_split[i])
                    key = type2.group(1)
                    value = type2.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
            elif re.search(r'(MTU|BW|loopback) (.*)',dut_info_split[i]):
                type3 = re.search(r'(MTU|BW|loopback) (.*)' ,dut_info_split[i])
                key = type3.group(1)
                value = type3.group(2)
                key = key.lstrip()
                key = key.rstrip()
                value = value.lstrip()
                value = value.rstrip()
                dict_value[key] = value
        return dict_value
    def dut_get_show_interfaces_overlayrouter_num(self,show_info):
        """
        Function:show interfaces overlayrouter <num>回显解析函数
        CLI命令:show interfaces overlayrouter <num>
        回显信息示例:
Ruijie#show interfaces overlayrouter 10
Index(dec):193 (hex):c1
OverlayRouter 10 is UP  , line protocol is DOWN    
  Hardware is OverlayRouter, address is 300d.9e73.2767 (bia 300d.9e73.2767)
  Interface address is: no ip address
  ARP type: ARPA, ARP Timeout: 3600 seconds
  Interface IPv6 address is:
    1010::1/64
    fe80::320d:9eff:fe73:2767/64
  MTU 1500 bytes, BW 1000000 Kbit
  Encapsulation protocol is Ethernet-II, loopback not set
  Keepalive interval is 10 sec , set
  Carrier delay is 0 sec
  Overlay attributes:
    Overlay mode is VXLAN
    Anycast is OFF
Ruijie#

        Returns:
{"BW": "1000000 Kbit"
"ARP Timeout": "3600 seconds"
"Encapsulation protocol": "Ethernet-II"
"loopback": "not set"
"ARP type": "ARPA"
"fe80::320d:9eff:fe73": "2767/64"
"Hardware": "OverlayRouter"
"OverlayRouter 10": "UP"
"Keepalive interval": "10 sec , set"
"Anycast": "OFF"
"MTU": "1500 bytes"
"address": "300d.9e73.2767"
"(hex)": ""
"Interface IPv6 address": "1010::1/64"
"Index(dec)": "193"
"Interface address": "no ip address"
"Overlay mode": "VXLAN"
"Carrier delay": "0 sec"
"line protocol": "DOWN"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interfaces overlayrouter <num> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show interface'
        dict_value = {}
        show_info_split = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        ################################################################################################
        #  打印回显信息
        ###############################################################################################
        length = len(show_info_split)
        for i in range(length):
            if re.match(r'\s+Overlay attributes',show_info_split[i]):
                show_info_split.remove(show_info_split[i])
                break
        ###########################################################
        # 去除Interface IPv6 address is:
        # No IPv6 address
        #############################################################
        for i in range(length):
            if re.match(r'\s+Interface IPv6 address',show_info_split[i]):
                matchObj = re.match('\s+(Interface IPv6 address) is:', show_info_split[i])
                key = matchObj.group(1)
                vaule = show_info_split[i+1]
                key = key.lstrip()
                key = key.rstrip()
                value = vaule.lstrip()
                value = value.rstrip()
                dict_value[key] = value
                show_info_split.remove(show_info_split[i+1])
                show_info_split.remove(show_info_split[i])
                break
        ################################################################
        # 去除 Index(dec):4097 (hex):1001
        #####################################################################
        length = len(show_info_split)
        for i in range(length):
            if re.match('Index',show_info_split[i]):
                matchObj = re.match('(.*):(\d*) (.*):(\d*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                dict_value[matchObj.group(3)] = matchObj.group(4)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        #########################################################################
        # 去除 Keepalive interval is 10 sec , set
        #############################################################################
        for i in range(length):
            if re.match(r'\s+Keepalive interval', show_info_split[i]):
                matchObj = re.match('\s+(Keepalive interval) is (.*)', show_info_split[i])
                dict_value[matchObj.group(1)] = matchObj.group(2)
                show_info_split.remove(show_info_split[i])
                break
        length = len(show_info_split)
        ##########################################################################
        # 以逗号为分隔号重新组合成字符串 newString
        ###########################################################################
        newString = ' '
        for i in range(length):
            newString = newString + show_info_split[i] + ','
        #################################################################################
        #   开始处理
        ##############################################################################
        dut_info_split = newString.split(',')
        length = len(dut_info_split)
        for i in range(length):
            if re.search(r'(.*):(.*)',dut_info_split[i]):
                if re.search(r'(.*)is:(.*)',dut_info_split[i]):
                    type1 = re.search(r'(.*)is:(.*)', dut_info_split[i])
                    key = type1.group(1)
                    value = type1.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
                else:
                    type1 = re.search(r'(.*):(.*)', dut_info_split[i])
                    key = type1.group(1)
                    value = type1.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
            elif re.match(r'(.*) is (.*)',dut_info_split[i]):
                if re.match(r' address is',dut_info_split[i]):
                    type2 = re.match(r' (address) is (.*) \(bia .*\)', dut_info_split[i])
                    dict_value[type2.group(1)] = type2.group(2)
                else:
                    type2 = re.match(r'(.*) is (.*)',dut_info_split[i])
                    key = type2.group(1)
                    value = type2.group(2)
                    key = key.lstrip()
                    key = key.rstrip()
                    value = value.lstrip()
                    value = value.rstrip()
                    dict_value[key] = value
            elif re.search(r'(MTU|BW|loopback) (.*)',dut_info_split[i]):
                type3 = re.search(r'(MTU|BW|loopback) (.*)' ,dut_info_split[i])
                key = type3.group(1)
                value = type3.group(2)
                key = key.lstrip()
                key = key.rstrip()
                value = value.lstrip()
                value = value.rstrip()
                dict_value[key] = value
        return dict_value
    def dut_get_show_interface_dot1qtunnel(self,show_info):
        """
        Auther: 王晓敏

        Functions：show interface dot1q-tunnel

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show interface dot1q'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        while show_info_list_line:
            key = re.search('==(Interface.*\d+)==',show_info_list_line[0]).group(1)
            show_info_list_line = show_info_list_line[1:]
            for index,line in enumerate(show_info_list_line):
                if re.search('==(Interface.*\d+)==',line):
                    show_info_list_line = show_info_list_line[index:]
                    break
                else:
                    name = line.split(':')[0].strip()
                    value = line.split(':')[1].strip()
                    dict_value[key+'/'+name] = value
                if index == len(show_info_list_line)-1:
                    show_info_list_line = []
        return dict_value
    def dut_get_show_interfaces_dot1qtunnel(self,show_info):
        """
        Auther: 王晓敏

        Functions：show interfaces dot1q-tunnel

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show interfaces dot1q'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        while show_info_list_line:
            key = re.search('==(Interface.*\d+)==',show_info_list_line[0]).group(1)
            show_info_list_line = show_info_list_line[1:]
            for index,line in enumerate(show_info_list_line):
                if re.search('==(Interface.*\d+)==',line):
                    show_info_list_line = show_info_list_line[index:]
                    break
                else:
                    name = line.split(':')[0].strip()
                    value = line.split(':')[1].strip()
                    dict_value[key+'/'+name] = value
                if index == len(show_info_list_line)-1:
                    show_info_list_line=[]
        return dict_value
    def dut_get_show_interface_counters_up(self,show_info):
        """
        Function:show interface counters up回显解析函数
        CLI命令:show interface counters up
        回显信息示例:
Ruijie#show interface counters up

Interface : GigabitEthernet 0/6
 10 seconds input rate  :11167 bits/sec, 10 packets/sec
 10 seconds output rate :1279 bits/sec, 1 packets/sec
Rxload               : 0%
InOctets             : 280667449974
InPkts               : 2378846123 (Unicast: 1%, Multicast: 13%, Broadcast: 86%)
InUcastPkts          : 22196022
InMulticastPkts      : 308204221
InBroadcastPkts      : 2048445880
Txload               : 0%
OutOctets            : 2952698326
OutPkts              : 23952527 (Unicast: 99%, Multicast: 0%, Broadcast: 1%)
OutUcastPkts         : 23811675
OutMulticastPkts     : 0
OutBroadcastPkts     : 140852
Undersize packets    : 0
Oversize packets     : 0
collisions           : 0
Fragments            : 0
Jabbers              : 0
CRC alignment errors : 0
AlignmentErrors      : 0
FCSErrors            : 0
dropped packet events (due to lack of resources): 21260892
packets received of length (in octets):
  64 : 1200390424
  65-127 : 925322295
  128-255 : 62113235
  256-511 : 2352240
  512-1023 : 167406623
  1024-1518 : 414
Interface : GigabitEthernet 0/6
Packet increment in last sampling interval(6000 milliseconds):
InOctets             : 7022
InPkts               : 49 (Unicast: 0%, Multicast: 73%, Broadcast: 27%)
InUcastPkts          : 0
InMulticastPkts      : 36
InBroadcastPkts      : 13
OutOctets            : 744
OutPkts              : 6 (Unicast: 100%, Multicast: 0%, Broadcast: 0%)
OutUcastPkts         : 6
OutMulticastPkts     : 0
OutBroadcastPkts     : 0
Ruijie#

        Returns:
{"GigabitEthernet 0/6/6000 milliseconds/InPkts/Multicast": "73%"
"GigabitEthernet 0/6/6000 milliseconds/OutUcastPkts": "6"
"GigabitEthernet 0/6/OutBroadcastPkts": "140852"
"GigabitEthernet 0/6/Jabbers": "0"
"GigabitEthernet 0/6/128-255": "62113235"
"GigabitEthernet 0/6/6000 milliseconds/OutPkts": "6"
"GigabitEthernet 0/6/1024-1518": "414"
"GigabitEthernet 0/6/dropped packet events (due to lack of resources)": "21260892"
"GigabitEthernet 0/6/6000 milliseconds/InPkts/Broadcast": "27%"
"GigabitEthernet 0/6/InBroadcastPkts": "2048445880"
"GigabitEthernet 0/6/InMulticastPkts": "308204221"
"GigabitEthernet 0/6/OutMulticastPkts": "0"
"GigabitEthernet 0/6/256-511": "2352240"
"GigabitEthernet 0/6/6000 milliseconds/InUcastPkts": "0"
"GigabitEthernet 0/6/CRC alignment errors": "0"
"GigabitEthernet 0/6/OutPkts": "23952527"
"GigabitEthernet 0/6/6000 milliseconds/InMulticastPkts": "36"
"GigabitEthernet 0/6/Oversize packets": "0"
"GigabitEthernet 0/6/6000 milliseconds/InOctets": "7022"
"GigabitEthernet 0/6/10 seconds output rate": ["1279 bits/sec"
"1 packets/sec"], "GigabitEthernet 0/6/6000 milliseconds/OutPkts/Broadcast": "0%"
"GigabitEthernet 0/6/512-1023": "167406623"
"GigabitEthernet 0/6/AlignmentErrors": "0"
"GigabitEthernet 0/6/InPkts": "2378846123"
"GigabitEthernet 0/6/Rxload": "0%"
"GigabitEthernet 0/6/6000 milliseconds/InPkts/Unicast": "0%"
"GigabitEthernet 0/6/6000 milliseconds/InBroadcastPkts": "13"
"GigabitEthernet 0/6/InOctets": "280667449974"
"GigabitEthernet 0/6/InPkts/Multicast": "13%"
"GigabitEthernet 0/6/FCSErrors": "0"
"GigabitEthernet 0/6/65-127": "925322295"
"GigabitEthernet 0/6/Undersize packets": "0"
"GigabitEthernet 0/6/10 seconds input rate": ["11167 bits/sec"
"10 packets/sec"], "GigabitEthernet 0/6/6000 milliseconds/OutBroadcastPkts": "0"
"GigabitEthernet 0/6/OutPkts/Unicast": "99%"
"GigabitEthernet 0/6/6000 milliseconds/OutOctets": "744"
"GigabitEthernet 0/6/InPkts/Broadcast": "86%"
"GigabitEthernet 0/6/Fragments": "0"
"GigabitEthernet 0/6/InPkts/Unicast": "1%"
"GigabitEthernet 0/6/Txload": "0%"
"GigabitEthernet 0/6/OutOctets": "2952698326"
"GigabitEthernet 0/6/6000 milliseconds/OutPkts/Multicast": "0%"
"GigabitEthernet 0/6/OutPkts/Multicast": "0%"
"GigabitEthernet 0/6/OutPkts/Broadcast": "1%"
"GigabitEthernet 0/6/InUcastPkts": "22196022"
"GigabitEthernet 0/6/6000 milliseconds/InPkts": "49"
"GigabitEthernet 0/6/6000 milliseconds/OutMulticastPkts": "0"
"GigabitEthernet 0/6/6000 milliseconds/OutPkts/Unicast": "100%"
"GigabitEthernet 0/6/collisions": "0"
"GigabitEthernet 0/6/OutUcastPkts": "23811675"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interface counters up | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show interface counters'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        while show_info_list_line:
            key = show_info_list_line[0].split(':')[1].strip()
            logging.info(key)
            show_info_list_line = show_info_list_line[1:]
            for index,line in enumerate(show_info_list_line):
                if re.search('Interface.*\d+',line):
                    show_info_list_line = show_info_list_line[index:]
                    break
                else:
                    if re.match(r'\s*\d+ seconds (input|output) rate',line):
                        matchObj =  re.match('\s*(\d+ seconds (input|output) rate)\s+:\s*(\d+\s+\w+/\w+),\s+(\d+\s+\w+/\w+)',line)
                        value_list = [matchObj.group(3),matchObj.group(4)]
                        ss = key + '/'+matchObj.group(1)
                        logging.debug('ss====> %s' % ss)
                        dict_value[key + '/'+matchObj.group(1)] = value_list
                    elif re.search(r'(InPkts|OutPkts)',line):
                        matchObj =  re.match('\s*(InPkts|OutPkts)\s+:\s*(\d+)\s+\((.*):\s+(.*),\s+(.*):\s+(.*),\s+(.*):\s+(.*)\)',line)
                        ss1 = key + '/'+matchObj.group(1)
                        logging.debug('ss1====> %s' % ss1)
                        dict_value[key + '/'+matchObj.group(1)] = matchObj.group(2)
                        dict_value[key + '/'+matchObj.group(1)+ '/'+matchObj.group(3)] = matchObj.group(4)
                        dict_value[key + '/'+matchObj.group(1)+ '/'+matchObj.group(5)] = matchObj.group(6)
                        dict_value[key + '/'+matchObj.group(1)+ '/'+matchObj.group(7)] = matchObj.group(8)
                    elif re.search(r'Packet increment in last sampling interval',line):
                        name = re.search('\((.*)\)',line).group(1)
                        key = key + '/' + name
                        logging.debug('key====> %s' % key)
                    elif re.search(r'packets received of length',line):
                        show_info_list_line.remove(line)
                    else:
                        dict_value[key+'/'+line.split(':')[0].strip()] = line.split(':')[1].strip()
                if index == len(show_info_list_line)-1:
                    show_info_list_line = []
        return dict_value
    def dut_get_show_interface_dutport_counters(self,show_info):
        """
        Auther: 王晓敏

        Functions：show interface counters

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show interface'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        while show_info_list_line:
            #key = show_info_list_line[0].split(':')[1].strip()
            key = show_info_list_line[0].split(':',1)[-1].strip()
            logging.info(key)
            show_info_list_line = show_info_list_line[1:]
            for index,line in enumerate(show_info_list_line):
                if re.search('Interface.*\d+',line):
                    show_info_list_line = show_info_list_line[index:]
                    break
                else:
                    if re.match(r'\s*\d+ seconds (input|output) rate',line):
                        matchObj =  re.match('\s*(\d+ seconds (input|output) rate)\s+:\s*(\d+\s+\w+/\w+),\s+(\d+\s+\w+/\w+)',line)
                        value_list = [matchObj.group(3),matchObj.group(4)]
                        ss = key + '/'+matchObj.group(1)
                        logging.info('ss====> %s' % ss)
                        dict_value[key + '/'+matchObj.group(1)] = value_list
                    elif re.search(r'(InPkts|OutPkts)',line):
                        matchObj =  re.match('\s*(InPkts|OutPkts)\s+:\s*(\d+)\s+\((.*):\s+(.*),\s+(.*):\s+(.*),\s+(.*):\s+(.*)\)',line)
                        ss1 = key + '/'+matchObj.group(1)
                        logging.info('ss1====> %s' % ss1)
                        dict_value[key + '/'+matchObj.group(1)] = matchObj.group(2)
                        dict_value[key + '/'+matchObj.group(1)+ '/'+matchObj.group(3)] = matchObj.group(4)
                        dict_value[key + '/'+matchObj.group(1)+ '/'+matchObj.group(5)] = matchObj.group(6)
                        dict_value[key + '/'+matchObj.group(1)+ '/'+matchObj.group(7)] = matchObj.group(8)
                    elif re.search(r'Packet increment in last sampling interval',line):
                        name = re.search('\((.*)\)',line).group(1)
                        key = key + '/' + name
                        logging.info('key====> %s' % key)
                    elif re.search(r'packets received of length',line):
                        show_info_list_line.remove(line)
                    else:
                        dict_value[key+'/'+line.split(':')[0].strip()] = line.split(':')[1].strip()
                if index == len(show_info_list_line)-1:
                    show_info_list_line = []
        return dict_value
    def dut_get_show_interface_aggregateport_num_counters(self,show_info):
        """
        Function:show interfaces aggregateport <num> counters回显解析函数
        CLI命令:show interfaces aggregateport <num> counters
        回显信息示例:
Ruijie#show interfaces aggregateport 1 counters  
Interface : AggregatePort 1
 10 seconds input rate  :0 bits/sec, 0 packets/sec
 10 seconds output rate :5120 bits/sec, 10 packets/sec
Rxload               : 0%
InOctets             : 74
InPkts               : 1 (Unicast: 0%, Multicast: 100%, Broadcast: 0%)
InUcastPkts          : 0
InMulticastPkts      : 1
InBroadcastPkts      : 0
Txload               : 0%
OutOctets            : 6400
OutPkts              : 100 (Unicast: 0%, Multicast: 0%, Broadcast: 100%)
OutUcastPkts         : 0
OutMulticastPkts     : 0
OutBroadcastPkts     : 100
Undersize packets    : 0
Oversize packets     : 0
collisions           : 0
Fragments            : 0
Jabbers              : 0
CRC alignment errors : 0
AlignmentErrors      : 0
FCSErrors            : 0
dropped packet events (due to lack of resources): 0
packets received of length (in octets):
  64 : 0
  65-127 : 1
  128-255 : 0
  256-511 : 0
  512-1023 : 0
  1024-1518 : 0
Interface : AggregatePort 1
Packet increment in last sampling interval(5000 milliseconds):
InOctets             : 74
InPkts               : 1 (Unicast: 0%, Multicast: 100%, Broadcast: 0%)
InUcastPkts          : 0
InMulticastPkts      : 1
InBroadcastPkts      : 0
OutOctets            : 6400
OutPkts              : 100 (Unicast: 0%, Multicast: 0%, Broadcast: 100%)
OutUcastPkts         : 0
OutMulticastPkts     : 0
OutBroadcastPkts     : 100

        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interfaces aggregateport <num> counters | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show interface'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        while show_info_list_line:
            key = show_info_list_line[0].split(':')[1].strip()
            logging.info(key)
            show_info_list_line = show_info_list_line[1:]
            for index,line in enumerate(show_info_list_line):
                if re.search('Interface.*\d+',line):
                    show_info_list_line = show_info_list_line[index:]
                    break
                else:
                    if re.match(r'\s*\d+ seconds (input|output) rate',line):
                        matchObj =  re.match('\s*(\d+ seconds (input|output) rate)\s+:\s*(\d+\s+\w+/\w+),\s+(\d+\s+\w+/\w+)',line)
                        value_list = [matchObj.group(3),matchObj.group(4)]
                        ss = key + '/'+matchObj.group(1)
                        logging.info('ss====> %s' % ss)
                        dict_value[key + '/'+matchObj.group(1)] = value_list
                    elif re.search(r'(InPkts|OutPkts)',line):
                        matchObj =  re.match('\s*(InPkts|OutPkts)\s+:\s*(\d+)\s+\((.*):\s+(.*),\s+(.*):\s+(.*),\s+(.*):\s+(.*)\)',line)
                        ss1 = key + '/'+matchObj.group(1)
                        logging.info('ss1====> %s' % ss1)
                        dict_value[key + '/'+matchObj.group(1)] = matchObj.group(2)
                        dict_value[key + '/'+matchObj.group(1)+ '/'+matchObj.group(3)] = matchObj.group(4)
                        dict_value[key + '/'+matchObj.group(1)+ '/'+matchObj.group(5)] = matchObj.group(6)
                        dict_value[key + '/'+matchObj.group(1)+ '/'+matchObj.group(7)] = matchObj.group(8)
                    elif re.search(r'Packet increment in last sampling interval',line):
                        name = re.search('\((.*)\)',line).group(1)
                        key = key + '/' + name
                        logging.info('key====> %s' % key)
                    elif re.search(r'packets received of length',line):
                        show_info_list_line.remove(line)
                    else:
                        dict_value[key+'/'+line.split(':')[0].strip()] = line.split(':')[1].strip()
                if index == len(show_info_list_line)-1:
                    show_info_list_line = []
        return dict_value
    def dut_get_show_interfaces_counters_up(self,show_info):
        """
        Auther: 王晓敏

        Functions：show interfaces counters

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show interfaces counters'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        while show_info_list_line:
            key = show_info_list_line[0].split(':')[1].strip()
            logging.info(key)
            show_info_list_line = show_info_list_line[1:]
            for index,line in enumerate(show_info_list_line):
                if re.search('Interface.*\d+',line):
                    show_info_list_line = show_info_list_line[index:]
                    break
                else:
                    if re.match(r'\s*\d+ seconds (input|output) rate',line):
                        matchObj =  re.match('\s*(\d+ seconds (input|output) rate)\s+:\s*(\d+\s+\w+/\w+),\s+(\d+\s+\w+/\w+)',line)
                        value_list = [matchObj.group(3),matchObj.group(4)]
                        ss = key + '/'+matchObj.group(1)
                        logging.info('ss====> %s' % ss)
                        dict_value[key + '/'+matchObj.group(1)] = value_list
                    elif re.search(r'(InPkts|OutPkts)',line):
                        matchObj =  re.match('\s*(InPkts|OutPkts)\s+:\s*(\d+)\s+\((.*):\s+(.*),\s+(.*):\s+(.*),\s+(.*):\s+(.*)\)',line)
                        ss1 = key + '/'+matchObj.group(1)
                        logging.info('ss1====> %s' % ss1)
                        dict_value[key + '/'+matchObj.group(1)] = matchObj.group(2)
                        dict_value[key + '/'+matchObj.group(1)+ '/'+matchObj.group(3)] = matchObj.group(4)
                        dict_value[key + '/'+matchObj.group(1)+ '/'+matchObj.group(5)] = matchObj.group(6)
                        dict_value[key + '/'+matchObj.group(1)+ '/'+matchObj.group(7)] = matchObj.group(8)
                    elif re.search(r'Packet increment in last sampling interval',line):
                        name = re.search('\((.*)\)',line).group(1)
                        key = key + '/' + name
                        logging.info('key====> %s' % key)
                    elif re.search(r'packets received of length',line):
                        show_info_list_line.remove(line)
                    else:
                        dict_value[key+'/'+line.split(':')[0].strip()] = line.split(':')[1].strip()
                if index == len(show_info_list_line)-1:
                    show_info_list_line = []
        return dict_value
    #======fengexian
    #level
    def dut_get_show_accesslists(self,show_info):
        """
        Function:show access-lists回显解析函数
        CLI命令:show access-lists
        回显信息示例:
MS7000#show access-lists    

ip access-list standard std-acl
 10 deny any

        Returns:
{"ip access-list standard std-acl": ["10 deny any"]}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show access-lists | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show access-lists'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        while show_info_list_line:
            key = show_info_list_line[0].strip()
            show_info_list_line = show_info_list_line[1:]
            value_list = []
            logging.debug(show_info_list_line)
            for index,line in enumerate(show_info_list_line):
                if line.find('access-list') != -1:
                    show_info_list_line = show_info_list_line[index:]
                    break
                else:
                    #2018/11/9 王晓敏  show access-lists回显中，不判断每条ACL最后的计数
                    if line.find('filtered') == -1:
                        value_list = value_list + [line.strip()]
                if index == len(show_info_list_line)-1:
                    show_info_list_line = []
            if key and value_list:
                dict_value[key] = value_list
        return dict_value
    def dut_get_show_switch_virtual_config(self,show_info):
        """
        Function:show switch virtual config回显解析函数
        CLI命令:show switch virtual config
        回显信息示例:
18K#show switch virtual config 
switch_id: 2 (mac: 0011.2233.4455)
!
switch virtual domain 100
!
switch 2
switch 2 priority 150
!
port-member interface TenGigabitEthernet 8/48
port-member interface TenGigabitEthernet 8/45
switch convert mode virtual
!

switch_id: 1 (mac: f822.33d5.4411)
!
switch virtual domain 100
!
switch 1
switch 1 priority 100
!
port-member interface TenGigabitEthernet 12/48
port-member interface TenGigabitEthernet 12/45
switch convert mode virtual
!

18K#

        Returns:
{'1/domain': '100'
'2/priority': '150'
'1/port-member': [' TenGigabitEthernet 12/48'
' TenGigabitEthernet 12/45'], '2/port-member': [' TenGigabitEthernet 8/48'
' TenGigabitEthernet 8/45'], '2/switch convert mode': 'virtual'
'1/priority': '100'
'1/mac': ['f822.33d5.4411'], '1/switch convert mode': 'virtual'
'2/domain': '100'
'2/mac': ['0011.2233.4455']}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show switch virtual config | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show switch virtual config'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        key = ''
        while show_info_list_line:
            port_list = []
            for index,line in enumerate(show_info_list_line):
                if re.search('switch_id',line):
                    match = re.search('switch_id:\s*(\d+)\s*\(mac:\s*(.*)\)',line)
                    logging.debug(match)
                    key = match.group(1)
                    value = [match.group(2)]
                    dict_value[key+'/mac'] = value
                    show_info_list_line = show_info_list_line[index+1:]
                    break
                else:
                    if re.search('domain (\d+)',line):
                        dict_value[key+'/domain'] = re.search('domain (\d+)',line).group(1)
                        logging.debug(dict_value)
                    elif re.search('priority (\d+)',line):
                        dict_value[key+'/priority'] = re.search('priority (\d+)',line).group(1)
                        logging.debug(dict_value)
                    elif re.search('port-member interface(.*)',line,re.M):
                        port_list = port_list + [re.search('port-member interface(.*)',line).group(1)]
                    elif re.search('switch convert mode (.*)',line):
                        dict_value[key+'/switch convert mode'] = re.search('switch convert mode (.*)',line).group(1)
                        logging.debug(dict_value)
                    dict_value[key+'/port-member'] = port_list
                if index == len(show_info_list_line)-1:
                    show_info_list_line = []
        return dict_value
    def dut_get_show_ip_accessgroup(self,show_info):
        """
        Function:show ip access-group回显解析函数
        CLI命令:show ip access-group
        回显信息示例:


        Returns:

        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip access-group | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show ip access-group'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        value = []
        for index,line in enumerate(show_info_list_line):
            if line.find('Applied On') != -1:
                key = line
                dict_value[key] = value
                value = []
                if index == len(show_info_list_line)-1:
                    break
            else:
                value = value + [line.strip()]
        return dict_value
    def dut_get_show_ipv6_trafficfilter(self,show_info):
        """
        Auther: 王晓敏

        Functions：show ipv6 traffic-filter

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show ipv6 traffic-filter'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        value = []
        for index,line in enumerate(show_info_list_line):
            if line.find('Applied On') != -1:
                key = line
                dict_value[key] = value
                value = []
                if index == len(show_info_list_line)-1:
                    break
            else:
                value = value + [line.strip()]
        return dict_value
    def dut_get_show_mac_accessgroup(self,show_info):
        """
        Auther: 王晓敏

        Functions：show access-group

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show mac access-group'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        value = []
        for index,line in enumerate(show_info_list_line):
            if line.find('Applied On') != -1:
                key = line
                dict_value[key] = value
                value = []
                if index == len(show_info_list_line)-1:
                    break
            else:
                value = value + [line.strip()]
        return dict_value
    def dut_get_show_expert_accessgroup(self,show_info):
        """
        Auther: 王晓敏

        Functions：show access-group

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show expert access-group'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        value = []
        for index,line in enumerate(show_info_list_line):
            if line.find('Applied On') != -1:
                key = line
                dict_value[key] = value
                value = []
                if index == len(show_info_list_line)-1:
                    break
            else:
                value = value + [line.strip()]
        return dict_value
    def dut_get_show_classmap(self,show_info):
        """
        Auther: 王晓敏

        Functions：show access-group

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show class-map'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        value = ''
        key = ''
        for index,line in enumerate(show_info_list_line):
            if line.find('Class Map') != -1:
                key = line.strip()
            else:
                value = line.strip()
            if key:
                dict_value[key] = value
                value = ''
        return dict_value
    def dut_get_show_policymap(self,show_info):
        """
        Auther: 王晓敏

        Functions：show access-group

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show policy-map'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        while show_info_list_line:
            key = show_info_list_line[0]
            show_info_list_line = show_info_list_line[1:]
            value = []
            logging.debug(show_info_list_line)
            for index,line in enumerate(show_info_list_line):
                if line.find('Policy Map') != -1:
                    show_info_list_line = show_info_list_line[index:]
                    break
                else:
                    value = value + [line.strip()]
                if index == len(show_info_list_line)-1:
                    show_info_list_line=[]
            if key:
                dict_value[key] = value
        return dict_value
    def dut_get_show_policymap_interface_dutport(self,show_info):
        """
        Auther: 王晓敏

        Functions：show policy-map

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show policy-map'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        while show_info_list_line:
            for index,line in enumerate(show_info_list_line):
                #GigabitEthernet 0/1  input (tc policy): 12
                if re.search(r'(.*)\s+((input|output).*):(.*)',line):
                    matchObj = re.search(r'(.*)\s+((input|output).*):(.*)',line)
                    key = matchObj.group(1).strip()
                    name = matchObj.group(2).strip()
                    value = matchObj.group(4).strip()
                    dict_value[key+'/'+name] = value
                elif re.search('Class\s+(\d+)',line):
                    dict_value[key+'/Class'] = re.search('Class\s+(\d+)',line).group(1)
                    #params:  100 kbps, 33 limit
                elif re.search('params:\s+(.*),(.*)',line):
                    value = [re.search('params:\s+(.*),(.*)',line).group(1).strip()]
                    value = value + [re.search('params:\s+(.*),(.*)',line).group(2).strip()]
                    dict_value[key+'/params'] = value
                if index == len(show_info_list_line)-1:
                    show_info_list_line=[]
                    break
        return dict_value
    def dut_get_show_redirect(self,show_info):
        """
        Auther: 王晓敏

        Functions：show access-lists

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show redirect'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        while show_info_list_line:
            key = show_info_list_line[0].split('interface')[1].strip()
            show_info_list_line = show_info_list_line[1:]
            value = []
            logging.debug(show_info_list_line)
            for index,line in enumerate(show_info_list_line):
                if line.find('acl redirect configuration on') != -1:
                    key = line.split('interface')[1].strip()
                    show_info_list_line = show_info_list_line[index:]
                    break
                else:
                    value = value + [line.strip()]
                if index == len(show_info_list_line)-1:
                    show_info_list_line=[]
            dict_value[key] = value
        return dict_value
    def dut_get_show_mls_qos_interface_policers(self,show_info):
        """
        Auther: 王晓敏

        Functions：show mls qos interface policers

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show mls'
        dict_value = {}
        key = ''
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        while show_info_list_line:
            value = []
            for index,line in enumerate(show_info_list_line):
                if line.find('Interface:') != -1:
                    key = line.split(':')[1].strip()
                    show_info_list_line = show_info_list_line[index+1:]
                    break
                else:
                    if re.search(r'((input|output)\s+policy-map):(.*)',line):
                        matchObj = re.search(r'((input|output)\s+policy-map):(.*)',line)
                        logging.debug(matchObj.group(0))
                        name = matchObj.group(1)
                        value = matchObj.group(3)
                        logging.debug(name)
                        logging.debug(value)
                        dict_value[key+'/'+name] = value
                if index == len(show_info_list_line)-1:
                    show_info_list_line=[]
        return dict_value
    #=======fengexian
    #其他
    def dut_get_show_macvlan_static(self,show_info):
        cmd_str = 'show mac-vlan'
        dict_value={}
        title_list = []
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        show_info_list_line = show_info_list_line[2:]
        title_list =  re.split('\s{2,}',show_info_list_line[0])
        logging.debug(show_info_list_line)
        logging.debug(title_list)
        for value in show_info_list_line[1:]:
            if value.find('---') != -1:
                continue
            elif value.find('Total MAC VLAN') != -1:
                key = value.split(':')[0].strip()
                dict_value[key] = value.split(':')[1].strip()
                continue
            value_list = re.split('\s{2,}',value)
            logging.debug(value_list)
            for index in range(1,len(title_list)):
                key_name = value_list[0] + '/'+title_list[index]
                dict_value[key_name] = value_list[index]
        return dict_value
    def dut_get_show_macvlan_dynamic(self,show_info):
        cmd_str = 'show mac-vlan'
        dict_value={}
        title_list = []
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        show_info_list_line = show_info_list_line[2:]
        title_list =  re.split('\s{2,}',show_info_list_line[0])
        logging.debug(show_info_list_line)
        logging.debug(title_list)
        for value in show_info_list_line[1:]:
            if value.find('---') != -1:
                continue
            elif value.find('Total MAC VLAN') != -1:
                key = value.split(':')[0].strip()
                dict_value[key] = value.split(':')[1].strip()
                continue
            value_list = re.split('\s{2,}',value)
            logging.debug(value_list)
            for index in range(1,len(title_list)):
                key_name = value_list[0] + '/'+title_list[index]
                dict_value[key_name] = value_list[index]
        return dict_value
    def dut_get_show_macvlan_vlan_num(self,show_info):
        cmd_str = 'show mac-vlan'
        dict_value={}
        title_list = []
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        show_info_list_line = show_info_list_line[2:]
        title_list =  re.split('\s{2,}',show_info_list_line[0])
        logging.debug(show_info_list_line)
        logging.debug(title_list)
        for value in show_info_list_line[1:]:
            if value.find('---') != -1:
                continue
            elif value.find('Total MAC VLAN') != -1:
                key = value.split(':')[0].strip()
                dict_value[key] = value.split(':')[1].strip()
                continue
            value_list = re.split('\s{2,}',value)
            logging.debug(value_list)
            for index in range(1,len(title_list)):
                key_name = value_list[0] + '/'+title_list[index]
                dict_value[key_name] = value_list[index]
        return dict_value
    def dut_get_show_macvlan_macaddress_mac(self,show_info):
        cmd_str = 'show mac-vlan'
        dict_value={}
        title_list = []
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        show_info_list_line = show_info_list_line[2:]
        title_list =  re.split('\s{2,}',show_info_list_line[0])
        logging.debug(show_info_list_line)
        logging.debug(title_list)
        for value in show_info_list_line[1:]:
            if value.find('---') != -1:
                continue
            elif value.find('Total MAC VLAN') != -1:
                key = value.split(':')[0].strip()
                dict_value[key] = value.split(':')[1].strip()
                continue
            value_list = re.split('\s{2,}',value)
            logging.debug(value_list)
            for index in range(1,len(title_list)):
                key_name = value_list[0] + '/'+title_list[index]
                dict_value[key_name] = value_list[index]
        return dict_value
    def dut_get_show_runningconfig_interface_dutport(self,show_info):
        """
        Function:show running-config interface <dutport>回显解析函数
        CLI命令:show running-config interface <dutport>
        回显信息示例:
Ruijie#show running-config interface TenGigabitEthernet 1/1/1

Building configuration...
Current configuration: 60 bytes

interface TenGigabitEthernet 1/1/1
 switchport mode trunk

        Returns:
{"TenGigabitEthernet 1/1/1": [" switchport mode trunk"]}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show running-config interface <dutport> | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        cmd_str = 'show running'
        dict_value={}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        show_info_list_line = show_info_list_line[2:]
        key = show_info_list_line[0].split('interface')[1].strip()
        logging.debug(show_info_list_line)
        logging.debug(key)
        value = []
        for line in show_info_list_line[1:]:
            value = value + [line]
        dict_value[key] = value
        return dict_value
    def dut_get_show_runningconfig_interface_vlan_num(self,show_info):
        cmd_str = 'show running'
        dict_value={}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info,cmd_str)
        show_info_list_line = show_info_list_line[2:]
        key = show_info_list_line[0].split('interface')[1].strip()
        logging.debug(show_info_list_line)
        logging.debug(key)
        value = []
        for line in show_info_list_line[1:]:
            value = value + [line]
        dict_value[key] = value
        return dict_value
    def dut_get_show_mac_count(self, show_info):
        """
        Function:show mac count回显解析函数
        CLI命令:show mac count
        回显信息示例:
Ruijie#show mac count
Dynamic Address Count  : 0
EVPN    Address Count  : 0
MLAG    Address Count  : 0
Static  Address Count  : 0
Filtering Address Count: 0
Other   Address Count  : 0
Total Mac Addresses    : 0
Total Mac Address Space Available: 64000
Ruijie#

        Returns:
{"Total Mac Address Space Available": "64000", "Dynamic Address Count": "0", "MLAG    Address Count": "0", "Total Mac Addresses": "0", "EVPN    Address Count": "0", "Static  Address Count": "0", "Filtering Address Count": "0", "Other   Address Count": "0"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show mac count | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        '''
        李衍国
        '''
        cmd_str = 'show mac count'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info, cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_split_on_colon(show_info_list_line[0:], dict_value)
        return dict_value
    def dut_get_show_sntp(self, show_info):
        """
        Function:show sntp回显解析函数
        CLI命令:show sntp
        回显信息示例:
Ruijie#show sntp
 SNTP state            : Disable
 SNTP oob mode         : Disable
 SNTP server           : 0.0.0.0
 SNTP sync interval    : 1800
 Time zone             : -0
Ruijie#

        Returns:
{"SNTP oob mode": "Disable", "Time zone": "-0", "SNTP server": "0.0.0.0", "SNTP sync interval": "1800", "SNTP state": "Disable"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show sntp | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        '''
        李衍国
        '''
        cmd_str = 'show sntp'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info, cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_split_on_colon(show_info_list_line[0:], dict_value)
        return dict_value
    def dut_showinfo_include_lines_analysiztwo(self, show_info_list_line, start_col=0, command = 0, titles=2, key_start=None):
        """
        （不对用户使用）解析的show回显信息列表中包含横线的解析
        start_col：参数中key所起始的列，从0开始
        title：表头信息占了几行，一般是1行（默认），有些是2行，比如show eee interfaces status，只能是1和2
        Returns: 返回字典
        """
        dict = {}
        address_list = []
        cut_flag = 0
        col_len_list = []
        for index, cut_value in enumerate(show_info_list_line):
            cut_flag = cut_flag + 1
            if cut_value:
                if re.findall("\s*\-+\s*", cut_value):
                    cut_del = cut_flag
                    if command == "show_poe_interfaces_configuration":
                        col_len_list = [11, 9, 8, 7, 7, 10, 8, 10]
                    if command == "show_poe_interfaces_status":
                        col_len_list = [10, 8, 7, 6, 6, 6, 8, 8, 9, 9]
        logging.debug(col_len_list)
        show_info_list_line.remove(show_info_list_line[cut_del - 1])  # 删除带--的行

        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')

        col_list_all_num = len(col_len_list)
        row_list_all_num = len(show_info_list_line)
        title_row = []
        col_value_list_previous = []
        for i in range(0, row_list_all_num):
            cut_star = 0
            cut_end = 0
            col_value_list = []
            for j in range(col_list_all_num):
                cut_end = cut_end + int(col_len_list[j])
                col_value = show_info_list_line[i][cut_star:cut_end]
                cut_star = cut_end
                col_value = col_value.lstrip()
                col_value = col_value.rstrip()
                col_value_list.append(col_value)
            # 获取表头的列，用于组合
            if isinstance(start_col, list):
                title_col = ''
                for val in start_col:
                    if title_col:
                        title_col = title_col + '/' + col_value_list[val]
                    else:
                        title_col = col_value_list[val]
            else:
                title_col = col_value_list[start_col]  # 需要变参的地方
            if titles == 1:
                if i == 0:
                    if isinstance(start_col, list):
                        value_title = ''
                        for val in start_col:
                            if value_title:
                                value_title = value_title + '/' + col_value_list[val]
                            else:
                                value_title = col_value_list[val]
                    else:
                        value_title = col_value_list[start_col]
            elif titles == 2:
                logging.debug('====>here')
                if i == 1:
                    col_value_lists = []
                    for index_col in range(0, len(col_value_list)):
                        col_value_lists.append(
                            col_value_list_previous[index_col].strip() + ' ' + col_value_list[index_col].strip())
                    # col_value_list = col_value_lists
                    logging.debug(col_value_lists)
                    if isinstance(start_col, list):
                        value_title = ''
                        for val in start_col:
                            if value_title:
                                value_title = value_title + '/' + col_value_lists[val]
                            else:
                                value_title = col_value_lists[val]
                    else:
                        value_title = col_value_lists[start_col]
                if i == 0:
                    col_value_list_previous = col_value_list
            if titles == 1 or (titles == 2 and i >= 2):
                logging.debug('====>titile_col')
                logging.debug(title_col)
                logging.debug('====>value_title')
                logging.debug(value_title)
                if titles == 2:
                    title_row = col_value_lists
                elif titles == 1 and title_col == value_title:
                    title_row = col_value_list
                logging.debug('titile row===>')
                logging.debug(title_row)
                if title_col != value_title:
                    address_list.append(title_col)
                    # 遍历列头右边的值
                    if isinstance(start_col, list):
                        start_index = sorted(start_col)[-1]
                    else:
                        start_index = start_col
                    for s in range(start_index + 1, col_list_all_num):  # 需要变参的地方
                        if key_start:
                            key_name = '%s/%s/%s' % (key_start, title_col, title_row[s])
                        else:
                            key_name = '%s/%s' % (title_col, title_row[s])
                        dict[key_name] = col_value_list[s]
                    ##遍历列头右边的值
                    if key_start:
                        key_name = '%s/%s/%s' % (key_start, title_col, title_row[0])
                    else:
                        key_name = '%s/%s' % (title_col, title_row[0])
                    dict[key_name] = col_value_list[0]
                dict["%s_list" % value_title.replace(' ', '_')] = address_list
        return dict
    def dut_get_show_poe_interfaces_configuration(self, show_info):
        """
        编写人：李衍国

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show poe interfaces configuration'
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info, cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        command = "show_poe_interfaces_configuration"
        dict_value = self.dut_showinfo_include_lines_analysiztwo(show_info_list_line, 0, command)
        return dict_value  # 验证完毕
    def dut_get_show_poe_interfaces_status(self, show_info):
        """
        Returns: 返回获取的回显信息

        """
        cmd_str = 'show poe interfaces status'
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info, cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        command = "show_poe_interfaces_status"
        dict_value = self.dut_showinfo_include_lines_analysiztwo(show_info_list_line, 0, command)
        return dict_value  # 验证完毕
    def dut_get_show_poe_powersupply(self, show_info):
        """

        Returns: 返回获取的回显信息

        """
        cmd_str = 'show poe powersupply'
        dict_value = {}
        show_info_list_line = self.dut_showinfo_remove_prompt_and_newline(show_info, cmd_str)
        if not show_info_list_line:
            logging.info(u'show回显为空')
            return None
        dict_value = self.dut_showinfo_split_on_colon(show_info_list_line[0:], dict_value)
        return dict_value
    def dut_get_show_switchmode_status(self,show_info):
        """
        Function:show switch-mode status回显解析函数
        CLI命令:show switch-mode status
        回显信息示例:
Ruijie#show switch-mode status
Slot No    Switch-Mode          Status
-------    -------------------- ------
0          default              ok    
Ruijie#

        Returns:
{"1/0/Status": "ok", "1/0/Switch-Mode": "default"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show switch-mode status | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        key_title1="Slot No"      #show switch-mode必然有的key
        key_title2="Device No"    #show switch-mode单机无此key
        col_len_list = []
        #创建字典
        dict_value={}
        #将show信息根据“\n”进行分段
        show_info_list_line = show_info.split("\n")[:-1]
        #删除头尾的行：show 命令行及末尾带“#”行，仅保留show命令有效信息
        if re.match(r'.*show switch-mode status.*',show_info_list_line[0]):
            show_info_list_line.remove(show_info_list_line[0])
        if re.match(r'.*#.*', show_info_list_line[-1]):
            show_info_list_line.remove(show_info_list_line[-1])

        #删除“---”所在行
        cut_flag = 0
        for cut_value in show_info_list_line :
            cut_flag = cut_flag+1
            if cut_value != "":
                if re.match(".*---.*",cut_value) :
                    cut_del = cut_flag
                    cut_value_list = cut_value.split()
                    col_len_list = []
                    for cut_value_list_value in cut_value_list:
                        col_len_list.append(len(cut_value_list_value)+1)
        #将最后一位设成固定32位
        col_len_list[0] = col_len_list[0] + 1
        col_len_list.pop(-1)
        col_len_list.append(32)
        show_info_list_line.remove(show_info_list_line[cut_del-1])
        for i in show_info_list_line:
            if '' in show_info_list_line:
                show_info_list_line.remove('')

        #获取列数、行数
        col_list_all_num = len(col_len_list)
        row_list_all_num = len(show_info_list_line)

        #逐行解析show 命令信息
        title_row =[]
        for i in range(0,row_list_all_num):
            cut_star = 0
            cut_end=0
            col_value_list = []
            show_info_list_line[i] = show_info_list_line[i]
            if show_info_list_line[i] != "" :
                #将行中各个属性信息转换成列表信息
                for j in range(col_list_all_num):
                    cut_end = cut_end+int(col_len_list[j])
                    col_value = show_info_list_line[i][cut_star:cut_end]
                    cut_star = cut_end
                    col_value = col_value.lstrip()
                    col_value = col_value.rstrip()
                    col_value_list.append(col_value)
                title_col = ''
                if key_title1 in col_value_list:            #处理表头行：获取表头信息，及key信息，用于组合
                    #switch-mode在VSU下，key为 switch-mode + slot-no 的组合
                    if key_title2 in col_value_list:
                        key_num = 2
                    #switch-mode在单机下，key为 slot-no
                    else:
                        key_num = 1
                    #获取表头信息
                    title_row = col_value_list
                elif key_title1 not in col_value_list:      #处理数据行：生成字典
                    #switch-mode在VSU下，key为 switch-mode + slot-no 的组合
                    if key_num==2:
                        title_col = '%s/%s'%(col_value_list[0],col_value_list[1])
                    #switch-mode在单机下，key为 slot-no
                    else:
                        title_col = '1/%s'%(col_value_list[0])
                    #遍历关键字以外列：生成字典，字典格式：name为 key/列名，value为col_value_list相应列号的值
                    for s in range(key_num,col_list_all_num):
                        key_name = '%s/%s'%(title_col,title_row[s])
                        dict_value[key_name]=col_value_list[s]
        return dict_value
    def dut_get_show_ip_ospf_database_external_advrouter_word(self,show_info):
        dict_value = {}
        show_info_split = show_info.split("\n")  # 将读进来的字符串拆分成多行，以\n分隔
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        for i in range(len(show_info_split)):
            show_info_split[i].strip()
        while '' in show_info_split:
            show_info_split.remove('')
        show_info_split.remove(show_info_split[0])
        show_info_split.remove(show_info_split[0])
        for i in range(len(show_info_split)):
            t1 = show_info_split[i].split(':')
            dict_value[t1[0].strip()] = t1[1].strip()
        return dict_value

#by:other
    def dut_get_show_ip_dhcp_conflict(self,show_info):
        """
        Function:show ip dhcp conflict回显解析函数
        CLI命令:show ip dhcp conflict
        回显信息示例:
S57#show ip dhcp conflict
IP address     Detection Method
20.0.0.1         Ping
20.0.0.2         Ping
20.0.0.3         Ping
20.0.0.4         Ping
20.0.0.5         Ping
20.0.0.6         Ping

        Returns:
{'20.0.0.5/Detection Method': 'Ping'
'20.0.0.3/Detection Method': 'Ping'
'20.0.0.6/Detection Method': 'Ping'
'20.0.0.4/Detection Method': 'Ping'
'IP address': ['20.0.0.1'
'20.0.0.2'
'20.0.0.3'
'20.0.0.4'
'20.0.0.5'
'20.0.0.6'], '20.0.0.1/Detection Method': 'Ping'
'20.0.0.2/Detection Method': 'Ping'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip dhcp conflict | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        # 主键
        primary = "IP address"

        show_info_split = show_info.split("\n")
        #########################################################################################
        # 用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])

        # 去除空格行
        show_info_split = [ele for ele in show_info_split if ele.strip()]
        show_info_split = [ele for ele in show_info_split if not re.match(r"Total number of clients.*",ele)]
        show_info_split = [ele for ele in show_info_split if not re.match(r"Expired clients.*",ele)]


    	# 设置列宽
        col_width = [15,32]
        # for line in show_info_split:
            # if re.match(r'---+', line):
                # line_split = line.split()
                # for col in line_split:
                    # col_width.append(col.count('-') + 1)
                # show_info_split.remove(line)
                # # 修改最后一个列宽为32位，防止最后一列的参数值超出自动获取的列宽
                # col_width[-1] = 32
                # break

        title = []
        result = {}
        # 主键列的元素集合
        primary_list = []
        # 主键所在列数，从0开始
        primary_index = 0
        try:
            for line in show_info_split:
                # 每列的开始和结束为止
                sight = 0
                sight_sum = 0
                # 每行的内容，列表形式
                line_content = []
                for j in range(len(col_width)):
                    sight_sum = sight_sum + int(col_width[j])
                    row_value = line[sight:sight_sum]
                    sight = sight_sum
                    row_value = row_value.strip()
                    line_content.append(row_value)
                # 获取列表头所在的行
                if primary == line_content[primary_index]:
                    title = line_content
                else:
                    # 获取主key集合，未判断title获取不到的情况，TODO
                    primary_list.append(line_content[primary_index])

                    # 生成字典
                    for s in range(len(col_width)):
                        if s == primary_index:
                            continue
                        name = str('%s/%s' % (line_content[primary_index], title[s]))
                        result[name] = str(line_content[s])
                result[primary] = primary_list
        except Exception as e:
            print (u"show ip dhcp conflict数据异常，处理失败")
        finally:
            return result
    def dut_judge_webauth_off_logging_count(self,show_info, status='on'):
        """
            统计web user上下线终端个数

            Args:
                show_info: show 回显返回值

            Returns:返回终端个数
                    如果返回-1；则passed与online的统计不相等

            Example:
                    | returns      | *Keywords*                    |*Parameters*                                       |
                    |${result}     | dut_show_info                 |show log
                    |${result1}    | dut_judge_webauth_logging_count   | ${result}
        """
        dut_info_split = show_info.split("\n")
        ##print dut_info_split
        ##print type(dut_info_split)
        length = len(dut_info_split)
        ##print length
        passed_count = 0
        online_count = 0
        offline_count = 0
        if status == 'on':
            for i in range(length):
                if re.match( r'.*:\s%AAA-6-USER_AUTH_PASSED.*', dut_info_split[i]):
                    passed_count = passed_count+1
                if re.match( r'.*:\s%WEBAUTH-6-USER_ONLINE.*', dut_info_split[i]):
                    online_count = online_count+1

            if passed_count == online_count :
                return passed_count
            else:
                return "-1"
        else:
            for i in range(length):
                if re.match( r'.*:\s%WEBAUTH-6-USER_OFFLINE.*', dut_info_split[i]):
                    ##print i
                    offline_count = offline_count+1

            return offline_count
    def dut_get_show_lldp_tlvconfig_interface(self,show_info):
        """
        Function:show lldp tlv-config interface回显解析函数
        CLI命令:show lldp tlv-config interface
        回显信息示例:
D1#show lldp tlv-config interface 
----------------------------------------------------------------------------
LLDP tlv-config of port [FortyGigabitEthernet 0/51]
----------------------------------------------------------------------------
               NAME               STATUS DEFAULT
--------------------------------- ------ -------
Basic optional TLV:
Port Description TLV              YES    YES    
System Name TLV                   YES    YES    
System Description TLV            YES    YES    
System Capabilities TLV           YES    YES    
Management Address TLV            YES    YES    

IEEE 802.1 extend TLV:
Port VLAN ID TLV                  YES    YES    
Port And Protocol VLAN ID TLV     YES    YES    
VLAN Name TLV                     YES    YES    

IEEE 802.3 extend TLV:
MAC-Physic TLV                    YES    YES    
Power via MDI TLV                 YES    YES    
Link Aggregation TLV              YES    YES    
Maximum Frame Size TLV            YES    YES    

LLDP-MED extend TLV:
Capabilities TLV                  YES    YES    
Network Policy TLV                YES    YES    
Location Identification TLV       NO     NO     
Extended Power via MDI TLV        YES    YES    
Inventory TLV                     YES    YES

        Returns:
{"LLDP-MED extend TLV:/STATUS": ""
"Network Policy TLV/STATUS": "YES"
"IEEE 802.3 extend TLV:/STATUS": ""
"Power via MDI TLV/STATUS": "YES"
"Port Description TLV/DEFAULT": "YES"
"MAC-Physic TLV/DEFAULT": "YES"
"Port VLAN ID TLV/STATUS": "YES"
"Basic optional TLV:/DEFAULT": ""
"Management Address TLV/STATUS": "YES"
"Location Identification TLV/DEFAULT": "NO"
"System Name TLV/DEFAULT": "YES"
"Port Description TLV/STATUS": "YES"
"VLAN Name TLV/STATUS": "YES"
"Network Policy TLV/DEFAULT": "YES"
"System Capabilities TLV/DEFAULT": "YES"
"Extended Power via MDI TLV/STATUS": "YES"
"LLDP-MED extend TLV:/DEFAULT": ""
"System Capabilities TLV/STATUS": "YES"
"System Name TLV/STATUS": "YES"
"Maximum Frame Size TLV/STATUS": "YES"
"MAC-Physic TLV/STATUS": "YES"
"Inventory TLV/DEFAULT": "YES"
"Management Address TLV/DEFAULT": "YES"
"Capabilities TLV/STATUS": "YES"
"Port VLAN ID TLV/DEFAULT": "YES"
"Power via MDI TLV/DEFAULT": "YES"
"VLAN Name TLV/DEFAULT": "YES"
"IEEE 802.1 extend TLV:/DEFAULT": ""
"IEEE 802.3 extend TLV:/DEFAULT": ""
"Inventory TLV/STATUS": "YES"
"Port And Protocol VLAN ID TLV/DEFAULT": "YES"
"Location Identification TLV/STATUS": "NO"
"System Description TLV/STATUS": "YES"
"System Description TLV/DEFAULT": "YES"
"NAME": ["Basic optional TLV:"
"Port Description TLV"
"System Name TLV"
"System Description TLV"
"System Capabilities TLV"
"Management Address TLV"
"IEEE 802.1 extend TLV:"
"Port VLAN ID TLV"
"Port And Protocol VLAN ID TLV"
"VLAN Name TLV"
"IEEE 802.3 extend TLV:"
"MAC-Physic TLV"
"Power via MDI TLV"
"Link Aggregation TLV"
"Maximum Frame Size TLV"
"LLDP-MED extend TLV:"
"Capabilities TLV"
"Network Policy TLV"
"Location Identification TLV"
"Extended Power via MDI TLV"
"Inventory TLV"], "Link Aggregation TLV/DEFAULT": "YES"
"IEEE 802.1 extend TLV:/STATUS": ""
"Port And Protocol VLAN ID TLV/STATUS": "YES"
"Capabilities TLV/DEFAULT": "YES"
"Extended Power via MDI TLV/DEFAULT": "YES"
"Maximum Frame Size TLV/DEFAULT": "YES"
"Basic optional TLV:/STATUS": ""
"Link Aggregation TLV/STATUS": "YES"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show lldp tlv-config interface | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        primary = "NAME"
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        show_info_split = [ele for ele in show_info_split if ele.strip()]
        show_info_split = [ele for ele in show_info_split if not re.match(r'LLDP tlv-config of port.*', ele)]
        remove_list = [ele for ele in show_info_split if re.match(r'---+', ele) and not re.match(r'---+\s+--+', ele)]
        show_info_split = [ele for ele in show_info_split if ele not in remove_list]
        col_width = []
        for line in show_info_split:
            if re.match(r'---+', line):
                line_split = line.split()
                for col in line_split:
                    line_num = col.count('-')
                    line_num = str(line_num + 1)
                    col_width.append(line_num)
                show_info_split.remove(line)

                col_width[-1] = 32
                break
        title = []
        result = {}
        primary_list = []
        primary_index = 0
        try:
            for line in show_info_split:
                sight = 0
                sight_sum = 0
                line_content = []
                for j in range(len(col_width)):
                    sight_sum = sight_sum + int(col_width[j])
                    row_value = line[sight:sight_sum]
                    sight = sight_sum
                    row_value = row_value.strip()
                    line_content.append(row_value)
                if primary == line_content[primary_index]:
                    title = line_content
                else:
                    primary_list.append(line_content[primary_index])
                    for s in range(len(col_width)):
                        if s == primary_index:
                            continue
                        name = str('%s/%s' % (line_content[primary_index], title[s]))
                        result[name] = str(line_content[s])
                result[primary] = primary_list
        except Exception as e:
            print u"解析出错"
        finally:
            return result
    def dut_get_show_ip_source_binding_dhcpsnooping(self,show_info):
        """
        Function:show ip source binding dhcp-snooping回显解析函数
        CLI命令:show ip source binding dhcp-snooping
        回显信息示例:
11_0PJ56#show ip source binding dhcp-snooping 
NO.   MACADDRESS         IPADDRESS       LEASE(SEC)   TYPE          VLAN  INNER-VLAN VXLAN    INTERFACE
----- ------------------ --------------- ------------ ------------- ----- ---------- -------- --------------------
1     0010.9400.0033     2.0.0.5         22           DHCP-Snooping 8     0          0        GigabitEthernet 1/5/19

Total number of bindings: 1

        Returns:
{'MACADDRESS': ['0010.9400.0033'], '0010.9400.0033/NO.': '1'
'0010.9400.0033/TYPE': 'DHCP-Snooping'
'0010.9400.0033/VXLAN': '0'
'0010.9400.0033/INNER-VLAN': '0'
'0010.9400.0033/LEASE(SEC)': '22'
'0010.9400.0033/VLAN': '8'
'0010.9400.0033/INTERFACE': 'GigabitEthernet 1/5/19'
'0010.9400.0033/IPADDRESS': '2.0.0.5'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip source binding dhcp-snooping | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        # 主键
        primary = "MACADDRESS"

        show_info_split = show_info.split("\n")
        #########################################################################################
        # 用于去除show_info中前后的hostname，或show命令每行前面的空格，只保留具体回显以免发生误判
        #########################################################################################
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])

        # 去除空格行
        show_info_split = [ele.strip() for ele in show_info_split if ele.strip()]
        show_info_split = [ele for ele in show_info_split if not re.match(r"Total number of bindings.*",ele)]

        # 设置列宽
        col_width = []
        for line in show_info_split:
            if re.match(r'---+', line):
                line_split = line.split()
                for col in line_split:
                    col_width.append(col.count('-') + 1)
                show_info_split.remove(line)
                # 修改最后一个列宽为32位，防止最后一列的参数值超出自动获取的列宽
                col_width[-1] = 32
                break
        title = []
        result = {}
        # 主键列的元素集合
        primary_list = []
        # 主键所在列数，从0开始
        primary_index = 1
        try:
            for line in show_info_split:
                # 每列的开始和结束为止
                sight = 0
                sight_sum = 0
                # 每行的内容，列表形式
                line_content = []
                for j in range(len(col_width)):
                    sight_sum = sight_sum + int(col_width[j])
                    row_value = line[sight:sight_sum]
                    sight = sight_sum
                    row_value = row_value.strip()
                    line_content.append(row_value)
                # 获取列表头所在的行
                if primary == line_content[primary_index]:
                    title = line_content
                else:
                    # 获取主key集合，未判断title获取不到的情况，TODO
                    primary_list.append(line_content[primary_index])

                    # 生成字典
                    for s in range(len(col_width)):
                        if s == primary_index:
                            continue
                        name = str('%s/%s' % (line_content[primary_index], title[s]))
                        result[name] = str(line_content[s])
                result[primary] = primary_list
        except Exception as e:
            print u"解析出错"
        finally:
            return result
    def dut_get_debug_acl_efacl_nacshow_dot1x(self,show_info):
        """
        Function:debug acl efacl nac-show dot1x回显解析函数
        CLI命令:debug acl efacl nac-show dot1x
        回显信息示例:
11_0PJ56#*Feb  8 17:14:22: %7: VSD0000:
*Feb  8 17:14:22: %7: ==========================================================
*Feb  8 17:14:22: %7:  Dot1x Su           :  disable.
*Feb  8 17:14:22: %7:  Dot1x port open    :
*Feb  8 17:14:22: %7:       19  
*Feb  8 17:14:22: %7:   Total 1 port(s) open dot1x.
*Feb  8 17:14:22: %7:  Dot1x vni open    :
*Feb  8 17:14:22: %7:   Total 0 vni(s) open dot1x.
*Feb  8 17:14:22: %7: 
*Feb  8 17:14:22: %7:  Dot1x user sumary :
*Feb  8 17:14:22: %7:   NAC-APP-NAME            MAC-NUM   IPv4-NUM   IPv4+MAC-NUM   IPv6-NUM   IPv6+MAC-NUM VLAN-NUM
*Feb  8 17:14:22: %7:   -----------------------------------------------------------------------------------
*Feb  8 17:14:22: %7:   IEEE 802.1X             1         0          1              0          0              0        
*Feb  8 17:14:22: %7:   ---------------------------------END-----------------------------------------------
*Feb  8 17:14:22: %7:  Dot1x user detail info :
*Feb  8 17:14:22: %7:   IPv4(IPv6)                               MAC                  VID            INNER_VID        IFX   
*Feb  8 17:14:22: %7:   ----------------------------------------------------------------------------------------------------
*Feb  8 17:14:22: %7:   -                                        00:00:77:9f:bf:96    23     0      19
*Feb  8 17:14:22: %7:   1.1.1.240                                00:00:77:9f:bf:96    23     0      19
*Feb  8 17:14:22: %7:   ---------------------------------END----------------------------------------

        Returns:
{'NAC-APP-NAME': 'IEEE 802.1X'
'IPv6+MAC-NUM': 0, 'IPv6-NUM': 0, 'MAC-NUM': 1, 'IPv4+MAC-NUM': 1, 'VLAN-NUM': 0, 'IPv4-NUM': 0}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=debug acl efacl nac-show dot1x | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        result = {}
        time_width=21
        col_width = [27,10,11,15,11,13,32]
        line_title = ""
        line_data = ""
        show_info_split = show_info.split("\n")
        for line in show_info_split:
            if re.match(r".*NAC-APP-NAME.*",line):
                line_title = line[time_width:]
            if re.match(r".*IEEE 802.1X.*",line):
                line_data = line[time_width:]
            if line_title and line_data:
                break
        if not line_title or not line_data:
            return result
        try:
            start = 0
            for width in col_width:
                end = start + width
                data = line_data[start:end].strip()
                data = int(data) if data.isdigit() else data
                result[line_title[start:end].strip()] = data
                start = end
        except Exception as e:
            print u"解析出错"
        finally:
            return result
    def dut_get_show_dot1x_portcontrol(self,show_info):
        """
        Function:show dot1x port-control回显解析函数
        CLI命令:show dot1x port-control
        回显信息示例:
Ruijie#show dot1x port-control 
Interface Mode       Dynamic-User Static-User Max-User  Authened MAB
--------- ---------- ------------ ----------- --------- -------- ---------
Te2/1     mac-based  0            0           unlimited no       disable  
Te2/10    mac-based  0            0           unlimited no       disable  
Te2/11    port-based 0            0           unlimited no       disable

        Returns:
{'Te2/1/MAB': 'disable'
'Te2/10/Static-User': '0'
'Te2/1/Mode': 'mac-based'
'Te2/10/Dynamic-User': '0'
'Te2/11/MAB': 'disable'
'Te2/1/Authened': 'no'
'Te2/10/Mode': 'mac-based'
'Te2/10/MAB': 'disable'
'Te2/11/Authened': 'no'
'Te2/1/Static-User': '0'
'Te2/1/Max-User': 'unlimited'
'Te2/1/Dynamic-User': '0'
'Interface': ['Te2/1'
'Te2/10'
'Te2/11'], 'Te2/10/Max-User': 'unlimited'
'Te2/11/Static-User': '0'
'Te2/11/Mode': 'port-based'
'Te2/11/Max-User': 'unlimited'
'Te2/10/Authened': 'no'
'Te2/11/Dynamic-User': '0'}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show dot1x port-control | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        primary = "Interface"
        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        show_info_split = [ele for ele in show_info_split if ele.strip()]
        col_width = []
        for line in show_info_split:
            if re.match(r'---+', line):
                line_split = line.split()
                for col in line_split:
                    col_width.append(col.count('-') + 1)
                show_info_split.remove(line)
                col_width[-1] = 32
                break
        title = []
        result = {}
        primary_list = []
        primary_index = 0
        try:
            for line in show_info_split:
                sight = 0
                sight_sum = 0
                line_content = []
                for j in range(len(col_width)):
                    sight_sum = sight_sum + int(col_width[j])
                    row_value = line[sight:sight_sum]
                    sight = sight_sum
                    row_value = row_value.strip()
                    line_content.append(row_value)
                if primary == line_content[primary_index]:
                    title = line_content
                else:

                    primary_list.append(line_content[primary_index])
                    for s in range(len(col_width)):
                        if s == primary_index:
                            continue
                        name = str('%s/%s' % (line_content[primary_index], title[s]))
                        result[name] = str(line_content[s])
                result[primary] = primary_list
        except Exception as e:
            print u"解析出错"
        finally:
            return result
    def dut_get_show_dot1x_user_diag_mac(self,show_info):
        """
        Function:show dot1x user diag mac回显解析函数
        CLI命令:show dot1x user diag mac
        回显信息示例:
N18010#show dot1x user diag mac 
USER-RECORD: 0010.9400.1223
Time           ifx    vid  authstate      backstate  paestate   authT    ipT      event           detail              
-------------- ------ ---- -------------- ---------- ---------- -------- -------- --------------- --------------------
03.01 02:19:53 53     2101 Disconnected   Idle       0          0     ms 0     ms create pae      none                
03.01 02:19:53 53     2101 Authenticating Response   0x8        0     ms 0     ms aaa reject      none                
03.01 02:19:53 53     2101 Disconnected   Idle       0          0     ms 0     ms create pae      none                
03.01 02:19:53 53     2101 Authenticating Response   0x8        0     ms 0     ms aaa reject      none                
03.01 02:32:12 53     2101 Disconnected   Idle       0          0     ms 0     ms create pae      none                
03.01 02:32:12 53     2101 Authenticating Response   0x8        0     ms 0     ms aaa reject      none                
03.01 02:32:12 53     2101 Disconnected   Idle       0          0     ms 0     ms create pae      none                
03.01 02:32:12 53     2101 Authenticating Response   0x8        0     ms 0     ms aaa reject      none                
03.01 02:32:13 53     2101 Disconnected   Idle       0          0     ms 0     ms create pae      none                
03.01 02:32:13 53     2101 Authenticating Response   0x8        0     ms 0     ms aaa reject      none

        Returns:
{"event": "create pae/aaa reject/create pae/aaa reject/create pae/aaa reject/create pae/aaa reject/create pae/aaa reject"
"vid": "2101/2101/2101/2101/2101/2101/2101/2101/2101/2101"
"ifx": "53/53/53/53/53/53/53/53/53/53"
"detail": "none/none/none/none/none/none/none/none/none/none"
"authT": "0     ms/0     ms/0     ms/0     ms/0     ms/0     ms/0     ms/0     ms/0     ms/0     ms"
"paestate": "0/0x8/0/0x8/0/0x8/0/0x8/0/0x8"
"ipT": "0     ms/0     ms/0     ms/0     ms/0     ms/0     ms/0     ms/0     ms/0     ms/0     ms"
"Time": "03.01 02:19:53/03.01 02:19:53/03.01 02:19:53/03.01 02:19:53/03.01 02:32:12/03.01 02:32:12/03.01 02:32:12/03.01 02:32:12/03.01 02:32:13/03.01 02:32:13"
"authstate": "Disconnected/Authenticating/Disconnected/Authenticating/Disconnected/Authenticating/Disconnected/Authenticating/Disconnected/Authenticating"
"backstate": "Idle/Response/Idle/Response/Idle/Response/Idle/Response/Idle/Response"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show dot1x user diag mac | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        show_info_split = show_info.split("\n")
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*show.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        show_info_split = [ele for ele in show_info_split if not re.match(r'---+', ele)]
        show_info_split = [ele for ele in show_info_split if ele.strip()]
        show_info_split = [ele for ele in show_info_split if not re.match(r'.*USER-RECORD.*', ele)]
        col_width = [15, 7, 5, 15, 11, 11, 9, 9, 16, 20]
        title = []
        result = {}
        try:
            for line in show_info_split:
                sight = 0
                sight_sum = 0
                line_content = []
                for j in range(len(col_width)):
                    sight_sum = sight_sum + int(col_width[j])
                    row_value = line[sight:sight_sum]
                    sight = sight_sum
                    row_value = row_value.strip()
                    line_content.append(row_value)
                if "Time" == line_content[0]:
                    title = line_content
                    for ele in title:
                        result[ele] = []
                else:
                    for s in range(len(col_width)):
                        result[title[s]].append(line_content[s])
            for key, value in result.iteritems():
                result[key] = "/".join(value)
        except Exception as e:
            print u"解析出错"
        finally:
            return result
    def dut_get_show_interface_counters_rate_up(self,show_info):
        """
        Function:show interfaces counters rate up回显解析函数
        CLI命令:show interfaces counters rate up
        回显信息示例:
Ruijie#show interfaces counters rate up 
Interface    Sampling Time         Input Rate           Input Rate           Output Rate          Output Rate
                                   (bits/sec)           (packets/sec)        (bits/sec)           (packets/sec)
------------ --------------------- -------------------- -------------------- -------------------- --------------------
Gi1/1/3      5 seconds             0                    0                    214                  0                   
Gi1/1/5      5 seconds             557                  0                    218                  0                   
Ruijie#

        Returns:
{"Gi1/1/3/Sampling Time": "5 seconds"
"Gi1/1/5/Input Rate(packets/sec)": "0"
"Gi1/1/5/Output Rate(bits/sec)": "218"
"Gi1/1/5/Input Rate(bits/sec)": "557"
"Gi1/1/3/Input Rate(bits/sec)": "0"
"Gi1/1/3/Input Rate(packets/sec)": "0"
"Gi1/1/5/Sampling Time": "5 seconds"
"Interface": ["Gi1/1/3"
"Gi1/1/5"], "Gi1/1/5/Output Rate(packets/sec)": "0"
"Gi1/1/3/Output Rate(packets/sec)": "0"
"Gi1/1/3/Output Rate(bits/sec)": "214"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show interfaces counters rate up | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        # main_key=main_key
        ########关键key的传入值
        ########寻址key（必填）
        main_key_list = ['Interface']
        ########若有key分多行写，填完整的key值，不然与寻址key一样就好（必填）
        real_main_key_list=['Interface']
        ########

        # 创建字典
        dict_value = {}

        # 按行读取信息，并清除空值清除无用信息头信息尾数据
        show_info_split = show_info.split("\n")
        if re.match(r'.*Ruijie.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*Ruijie.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        # （去掉dut_info_split中的空值以及只包含空格符的值）
        for i in dut_info_split:
            if '' in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' ' in dut_info_split:
                dut_info_split.remove(' ')
        for i in range(len(dut_info_split)):
            dut_info_split[i] = dut_info_split[i]
        #print(dut_info_split)

        #######################参数
        # 表数量
        count = 0
        # 各个横杠长度
        hengang_len = 0
        # 一张表内各个横杠长度集合
        hengang_len_list = []
        # 整个showinfo内每张表内各个横杠长度集合的集合
        hengang_len_list_list = []
        # 横杠位置（用来相对判定key的位置）
        hengang_index_list = []
        # key的位置
        key_index_list = []
        # 表信息的集合
        table = []
        # 所有表信息的集合
        table_list = []
        #######################

        # 主要算法
        # 标识横杠位置并记录参数相关信息
        for i in range(len(dut_info_split)):
            if re.match("-+", dut_info_split[i]):
                # 排除数据中有“-”的情况
                for j in dut_info_split[i]:
                    if j != '-' and j != ' ':
                        cheak = 1
                        break
                    else:
                        cheak = 0
                        continue
                if cheak == 0:
                    hengang_len_list = []
                    count = count + 1
                    hengang_index_list.append(i)
                    #print(dut_info_split[i])
                    # 识别并记录下横杠的长度到list中
                    for k in range(len(dut_info_split[i])):
                        if dut_info_split[i][k] == '-' and k != len(dut_info_split[i]) - 1:
                            hengang_len = hengang_len + 1
                            lianxu=0
                        elif dut_info_split[i][k] == ' ' and lianxu==0:
                            hengang_len_list.append(hengang_len)
                            hengang_len = 0
                            lianxu=1
                        elif k == len(dut_info_split[i]) - 1:
                            hengang_len = hengang_len + 1
                            hengang_len_list.append(hengang_len)
                            hengang_len = 0
                    hengang_len_list_list.append(hengang_len_list)
                else:
                    continue
                # print(hengang_len_list_list)
        # 根据横杠位置和key的传入值标识出key的位置
        #"""一般情况下横杠上一位就是key值，其他情况有横杠上一行为单位，或者有key值过长分行输出显示？"""
        for i in range(len(hengang_index_list)):
            main_key = main_key_list[i]
            k = hengang_index_list[i]
            while 1:
                if re.match('.*' + main_key + '.*', dut_info_split[k]):
                    key_index_list.append(k)
                    break
                else:
                    k = k - 1
        # print(key_index_list)
        # 根据查找的key位置进行分表操作,并存入table_list中
        for i in range(len(key_index_list)):
            if i == len(key_index_list) - 1:
                table = dut_info_split[key_index_list[i]:]
            else:
                table = dut_info_split[key_index_list[i]:key_index_list[i + 1]]
            table_list.append(table)
        #print(table_list)
        # 对各个表中的key、value提取，并删除掉横杠
        # 判定若key与横杠之间有单位之类的数据，进行key与该数据的整合成为一个完整key数据
        for i in range(len(table_list)):
            key_list = []
            value_list = []
            for j in range(len(table_list[i])):
                if re.match('-+', table_list[i][j]):
                    index = j
            key_info = table_list[i][0:index]
            value_info = table_list[i][index+1:]
            #print(value_info)
            ##单行key的情况
            if index == 1:
                #key
                num1 = 0
                num2 = 0
                key = []
                for k in range(len(hengang_len_list_list[i])):
                    num1 = num2
                    num2 = 1 + hengang_len_list_list[i][k] + num2
                    key.append(key_info[0][num1:num2].strip())
                #value
                for k in  range(len(value_info)):
                    value = []
                    num1 = 0
                    num2 = 0
                    #print(hengang_len_list_list[i])
                    for l in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][l] + num2
                        value.append(value_info[k][num1:num2])
                        #print(num1,num2)
                    value_list.append(value)
                #print(value_list)
                #录入词典
                real_main_key=real_main_key_list[i]
                real_main_key_index=key.index(real_main_key)
                key__list=[]
                for q in range(len(value_list)):
                    for w in range(len(value_list[q])):
                        if w == real_main_key_index:
                            key__list.append(value_list[q][w].strip())
                            continue
                        else:
                            title=value_list[q][real_main_key_index].strip()+'/'+key[w].strip()
                            info=value_list[q][w].strip()
                            dict_value[title]=info
                    dict_value[real_main_key]=key__list
                # print(main_key)
                # print(key)
                # print(value_list)
            ##多行key的情况
            elif index > 1:
                #key
                for m in range(len(key_info)):
                    num1 = 0
                    num2 = 0
                    key = []
                    for k in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][k] + num2
                        key.append(key_info[m][num1:num2])
                    key_list.append(key)
                #print(key_list)
                count_key_List = 0
                count_num=0
                for h in range(len(key_list[0])):
                    count_key_List=count_key_List+1
                real_key_list=[]
                while 1:
                    real_key=''
                    count_num=count_num+1
                    if count_num>count_key_List:
                        break
                    else:
                        for f in range(len(key_list)):
                            key_in=key_list[f][count_num-1]
                            real_key=real_key.strip()+key_in.strip()
                        #print(real_key)
                        real_key_list.append(real_key)
                        continue
                #print(real_key_list)
                #value
                for k in  range(len(value_info)):
                    value = []
                    num1 = 0
                    num2 = 0
                    for l in range(len(hengang_len_list_list[i])):
                        num1 = num2
                        num2 = 1 + hengang_len_list_list[i][l] + num2
                        value.append(value_info[k][num1:num2])
                    value_list.append(value)
                #录入词典
                real_main_key=real_main_key_list[i]
                real_main_key_index=real_key_list.index(real_main_key)
                key__list = []
                for q in range(len(value_list)):
                    for w in range(len(value_list[q])):
                        if w == real_main_key_index:
                            key__list.append(value_list[q][w].strip())
                            continue
                        else:
                            title=value_list[q][real_main_key_index].strip()+'/'+real_key_list[w].strip()
                            info=value_list[q][w].strip()
                            dict_value[title]=info
                    dict_value[real_main_key]=key__list
        return dict_value

    def dut_get_show_ip_route_vrf_name(self, show_info):  # 函数名由锐捷提供
        """
        Function:show ip route vrf (word)回显解析函数
        CLI命令:show ip route vrf (word)
        回显信息示例:
DUT1#show ip route vrf vrf1
Routing Table: vrf1 
Codes:  C - Connected, L - Local, S - Static
        R - RIP, O - OSPF, B - BGP, I - IS-IS, V - Overflow route
        N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
        E1 - OSPF external type 1, E2 - OSPF external type 2
        SU - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2
        IA - Inter area, EV - BGP EVPN, A - Arp to host
        LA - Local aggregate route
        * - candidate default

Gateway of last resort is no set
C     30.0.0.0/8 is directly connected, OverlayRouter 30
C     30.1.1.1/32 is local host. 
B EV  30.2.1.2/32 [20/0] via 2.2.2.2, 00:01:39, OverlayRouter 600
C     40.0.0.0/8 is directly connected, OverlayRouter 40
C     40.1.1.1/32 is local host. 
DUT1#

        Returns:
{"30.1.1.1/32/Codes": "C"
"30.2.1.2/32/interface": "OverlayRouter 600"
"40.0.0.0/8/status": "directly connected"
"30.2.1.2/32/Codes": "B,EV"
"30.2.1.2/32/via": "2.2.2.2"
"40.1.1.1/32/Codes": "C"
"30.1.1.1/32/status": "local host"
"30.0.0.0/8/interface": "OverlayRouter 30"
"Routing Table": "vrf1"
"40.0.0.0/8/Codes": "C"
"40.1.1.1/32/status": "local host"
"30.0.0.0/8/status": "directly connected"
"40.0.0.0/8/interface": "OverlayRouter 40"
"30.2.1.2/32/mea": "0"
"30.2.1.2/32/pri": "20"
"addr_list": ["30.0.0.0/8/C"
"30.1.1.1/32/C"
"30.2.1.2/32/B,EV"
"40.0.0.0/8/C"
"40.1.1.1/32/C"], "30.0.0.0/8/Codes": "C"}
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip route vrf (word) | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        dict_value = {}

        # 按行读取信息，并清除空值清除无用信息头信息尾数据
        show_info_split = show_info.split("\n")
        if re.match(r'.*Ruijie.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*Ruijie.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        if re.match(r'.*#.*', show_info_split[-1]):
            show_info_split.remove(show_info_split[-1])
        dut_info_split = show_info_split
        # （去掉dut_info_split中的空值以及只包含空格符的值）
        for i in dut_info_split:
            if '' in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' ' in dut_info_split:
                dut_info_split.remove(' ')
        for i in range(len(dut_info_split)):
            dut_info_split[i] = dut_info_split[i].strip()
            if re.match('.*Gateway of last resort.*', dut_info_split[i]):
                index=i
        dut_info_split=dut_info_split[index+1:]

        #print(dut_info_split)

        addr_list=[]
        for i in range(len(dut_info_split)):
            if re.match('.*is.*,.*',dut_info_split[i]):
                #print(dut_info_split[i])
                mainobj=re.match('(.*)is(.*),(.*)', dut_info_split[i])
                Codes=mainobj.group(1)[0].strip()
                addr=mainobj.group(1)[1:].strip()
                type=mainobj.group(2).strip()
                interface=mainobj.group(3).strip()
                dict_value[addr+'/'+'status']=type
                dict_value[addr + '/'+ 'interface'] = interface
                dict_value[addr+'/'+'Codes']=Codes
                addr_list.append(addr+'/'+Codes)
            elif re.match('.*is.*.',dut_info_split[i]):
                #print(dut_info_split[i])
                mainobj = re.match('(.*)is(.*)\..*',dut_info_split[i])
                Codes = mainobj.group(1)[0].strip()
                addr = mainobj.group(1)[1:].strip()
                type = mainobj.group(2).strip()
                dict_value[addr + '/' + 'status'] = type
                dict_value[addr + '/' + 'Codes'] = Codes
                addr_list.append(addr + '/' + Codes)
            elif re.match('.*  .*via.*,.*,.*',dut_info_split[i]):
                #print(dut_info_split[i])
                mainobj=re.match('(.*)  (.*)via(.*),(.*),(.*)',dut_info_split[i])
                Codes_list=mainobj.group(1).split(' ')
                #print(Codes_list)
                Codes=''
                for i in  Codes_list:
                    Codes=Codes.strip()+','+i
                Codes=Codes.strip(',')
                addr=mainobj.group(2).strip()
                via=mainobj.group(3).strip()
                interface=mainobj.group(5).strip()
                dict_value[addr+'/'+'via']=via
                dict_value[addr + '/'+ 'interface'] = interface
                dict_value[addr+'/'+'Codes']=Codes
                addr_list.append(addr + '/' + Codes)
        dict_value['addr_list']=addr_list
        dict_value['count_route']=len(addr_list)

        return dict_value
    def dut_get_show_ip_rns_twamplight_configuration_testsession_num(self,show_info):
        """
        Function:show ip rns twamp-light configuration test-session 1回显解析函数
        CLI命令:show ip rns twamp-light configuration test-session 1
        回显信息示例:
Ruijie(config-ip-rns-twamp-light-responder)#$uration test-session 1
Session ID       : 1
Report-period    : 10
Sender-IP        : 12.1.1.1
Sender-Port      : 2001
Reflector-IP     : 12.1.1.2
Reflector-Port   : 2000
Period Time      : 10ms
Repeat Time      : -
Time Out         : 5s
Duration Time    : 300s
DSCP             : 0
Padding Length   : 128
Padding Value    : 0x0
VRF Name         : -
PTP Enable       : disable
Oneway-enable    : disable
Packet Count     : -
Bind Interface   : HundredGigabitEthernet 1/0/1
Trunk interface  : -
Vlan             : -
Description      : -
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip rns twamp-light configuration test-session 1 | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_ip_rns_twamplightresponder_configuration_testsession_num(self,show_info):
        """
        Function:show ip rns twamp-light-responder configuration test-session 1回显解析函数
        CLI命令:show ip rns twamp-light-responder configuration test-session 1
        回显信息示例:
Ruijie(config-ip-rns-twamp-light-responder)#$rns twamp-light-responder configu$
Session ID      : 1
Local-IP        : 12.1.1.1
Local-Port      : 862
Remote-IP       : 12.1.1.2
Remote-Port     : 862
VRF Name        : -
Timestamp type  : NTP
Trunk interface : -
Vlan            : -
Description     : 1111111111111111111111111111111
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip rns twamp-light-responder configuration test-session 1 | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """

        return self.dut_get_show_info_analy_all_colon(show_info,"show")
    def dut_get_show_ip_rns_twamplight_statistics_testsession_num_total(self,show_info):
        """
        Function:show ip rns twamp-light statistics test-session 1 total回显解析函数
        CLI命令:show ip rns twamp-light statistics test-session 1 total
        回显信息示例:
Ruijie#show ip rns twamp-light statistics test-session 1 total
The Session 1 Delay Statistics:
-----------------------------------------------------
Cur RTT(us)      : 19              Cur Jitter(us)   : 3
Avg RTT(us)      : 19              Avg Jitter(us)   : 0
Max RTT(us)      : 24              Max Jitter(us)   : 8
Min RTT(us)      : 0               Min Jitter(us)   : 0
RTT Alarm        : No              Jitter Alarm     : No
The Session 1 Loss Statistics:
-----------------------------------------------------
Send Packet      : 4000            Loss Packet      : 301
Received Packet  : 3699            Loss Ratio       : 7.5250%
Loss Ratio Alarm : Report
Ruijie#
        Example:
        | *Returns*  | *Keywords*     | *Parameters*                                                                                     |
        | ${result1} | dut_judge_show | cmd_str=show ip rns twamp-light statistics test-session 1 total | yinfo=${yinfo}  | alias=dut1   | include=1    | change_letter=0 |
        备注：${yinfo}同Returns格式一致.
        """
        dict_value = {}
        # 按行读取写入
        show_info_split = show_info.split("\n")
        # print show_info_split
        # 去掉命令行无用表头
        if re.match(r'.*Ruijie.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        if re.match(r'.*#.*', show_info_split[0]):
            show_info_split.remove(show_info_split[0])
        # 处理后的数据存入dut_info_split
        dut_info_split = show_info_split
        # 去掉dut_info_split中的空值以及只包含空格符的值
        for i in dut_info_split:
            if '' in dut_info_split:
                dut_info_split.remove('')
        for i in dut_info_split:
            if ' ' in dut_info_split:
                dut_info_split.remove(' ')
        print(dut_info_split)
    
        title_list = []
        for i in range(len(dut_info_split)):
            if re.match('The Session \d+ \w+ Statistics:', dut_info_split[i]):
                mainobj = re.match('The Session (\d+) (\w+) Statistics:', dut_info_split[i])
                title = mainobj.group(1).strip() + '/' + mainobj.group(2).strip()+ '/'
                title_list.append(mainobj.group(2).strip().decode("utf-8"))
                continue
            elif re.match('.*:.*:.*', dut_info_split[i]):
                mainobj = re.match('(.*):\s+(.*):\s+(.*)', dut_info_split[i])
    
                name1 = title + mainobj.group(1).strip().replace(' ','/')
                name2 = title + re.split("\s+",mainobj.group(2),maxsplit=1)[1].strip().replace(' ','/')
                value1 = re.split("\s+",mainobj.group(2),maxsplit=1)[0].strip()
                value2 = mainobj.group(3).strip()
                dict_value[name1.decode("utf-8")] = value1.decode("utf-8")
                dict_value[name2.decode("utf-8")] = value2.decode("utf-8")
        dict_value['statistics total'] = title_list
    
        return dict_value
